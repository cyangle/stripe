#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::AccountServiceResourceStatusDetails
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe Stripe::AccountServiceResourceStatusDetails do
  describe "test an instance of AccountServiceResourceStatusDetails" do
    it "should create an instance of AccountServiceResourceStatusDetails" do
      # instance = Stripe::AccountServiceResourceStatusDetails.new
      # expect(instance).to be_instance_of(Stripe::AccountServiceResourceStatusDetails)
    end
  end

  describe "test attribute 'code'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("String", ["activating", "capability_not_requested", "financial_account_closed", "rejected_other", "rejected_unsupported_business", "requirements_past_due", "requirements_pending_verification", "restricted_by_platform", "restricted_other"])
      # validator.allowable_values.each do |value|
      #   expect { instance.code = value }.not_to raise_error
      # end
    end
  end

  describe "test attribute 'resolution'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("String", ["contact_stripe", "provide_information", "remove_restriction", "null"])
      # validator.allowable_values.each do |value|
      #   expect { instance.resolution = value }.not_to raise_error
      # end
    end
  end

  describe "test attribute 'restriction'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("String", ["inbound_flows", "outbound_flows"])
      # validator.allowable_values.each do |value|
      #   expect { instance.restriction = value }.not_to raise_error
      # end
    end
  end
end
