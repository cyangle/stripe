#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::PaymentMethodOptionsParam16
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe Stripe::PaymentMethodOptionsParam16 do
  describe "test an instance of PaymentMethodOptionsParam16" do
    it "should create an instance of PaymentMethodOptionsParam16" do
      # instance = Stripe::PaymentMethodOptionsParam16.new
      # expect(instance).to be_instance_of(Stripe::PaymentMethodOptionsParam16)
    end
  end

  describe "test attribute 'capture_method'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("String", ["", "manual"])
      # validator.allowable_values.each do |value|
      #   expect { instance.capture_method = value }.not_to raise_error
      # end
    end
  end

  describe "test attribute 'preferred_locale'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("String", ["da-DK", "de-AT", "de-DE", "en-AT", "en-AU", "en-BE", "en-DE", "en-DK", "en-ES", "en-FI", "en-FR", "en-GB", "en-IE", "en-IT", "en-NL", "en-NO", "en-NZ", "en-SE", "en-US", "es-ES", "es-US", "fi-FI", "fr-BE", "fr-FR", "it-IT", "nb-NO", "nl-BE", "nl-NL", "sv-FI", "sv-SE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.preferred_locale = value }.not_to raise_error
      # end
    end
  end

  describe "test attribute 'setup_future_usage'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("String", ["none"])
      # validator.allowable_values.each do |value|
      #   expect { instance.setup_future_usage = value }.not_to raise_error
      # end
    end
  end
end
