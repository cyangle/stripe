#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"
require "../../src/stripe/api/customers_api"

# Unit tests for Stripe::CustomersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "CustomersApi" do
  describe "test an instance of CustomersApi" do
    it "should create an instance of CustomersApi" do
      api_instance = Stripe::CustomersApi.new
      api_instance.should be_a(Stripe::CustomersApi)
    end
  end

  # unit tests for delete_customers_customer
  # &lt;p&gt;Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @return [DeletedCustomer]
  describe "delete_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_discount
  # &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @return [DeletedDiscount]
  describe "delete_customers_customer_discount test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_sources_id
  # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [DeleteCustomersCustomerSourcesId200Response]
  describe "delete_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_tax_ids_id
  # &lt;p&gt;Deletes an existing &lt;code&gt;tax_id&lt;/code&gt; object.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [DeletedTaxId]
  describe "delete_customers_customer_tax_ids_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers
  # &lt;p&gt;Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email A case-sensitive filter on the list based on the customer&#39;s &#x60;email&#x60; field. The value must be a string.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [GetAccountsCreatedParameter] :created Only return customers that were created during the given date interval.
  # @option opts [String] :test_clock Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerResourceCustomerList]
  describe "get_customers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer
  # &lt;p&gt;Retrieves a Customer object.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetCustomersCustomer200Response]
  describe "get_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_balance_transactions
  # &lt;p&gt;Returns a list of transactions that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerBalanceTransactionList]
  describe "get_customers_customer_balance_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_balance_transactions_transaction
  # &lt;p&gt;Retrieves a specific customer balance transaction that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerBalanceTransaction]
  describe "get_customers_customer_balance_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_cash_balance
  # &lt;p&gt;Retrieves a customer’s cash balance.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CashBalance]
  describe "get_customers_customer_cash_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_cash_balance_transactions
  # &lt;p&gt;Returns a list of transactions that modified the customer’s &lt;a href&#x3D;\&quot;/docs/payments/customer-balance\&quot;&gt;cash balance&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerCashBalanceTransactionList]
  describe "get_customers_customer_cash_balance_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_cash_balance_transactions_transaction
  # &lt;p&gt;Retrieves a specific cash balance transaction, which updated the customer’s &lt;a href&#x3D;\&quot;/docs/payments/customer-balance\&quot;&gt;cash balance&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerCashBalanceTransaction]
  describe "get_customers_customer_cash_balance_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_payment_methods
  # &lt;p&gt;Returns a list of PaymentMethods for a given Customer&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :_type An optional filter on the list, based on the object &#x60;type&#x60; field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :allow_redisplay This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to &#x60;unspecified&#x60;.
  # @return [CustomerPaymentMethodResourceList]
  describe "get_customers_customer_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_payment_methods_payment_method
  # &lt;p&gt;Retrieves a PaymentMethod object for a given Customer.&lt;/p&gt;
  # @param customer
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "get_customers_customer_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_sources
  # &lt;p&gt;List sources for a specified customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :object Filter sources according to a particular object type.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ApmsSourcesSourceList]
  describe "get_customers_customer_sources test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_sources_id
  # &lt;p&gt;Retrieve a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentSource]
  describe "get_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_tax_ids
  # &lt;p&gt;Returns a list of tax IDs for a customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TaxIDsList]
  describe "get_customers_customer_tax_ids test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_tax_ids_id
  # &lt;p&gt;Retrieves the &lt;code&gt;tax_id&lt;/code&gt; object with the given identifier.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TaxId]
  describe "get_customers_customer_tax_ids_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_search
  # &lt;p&gt;Search for customers you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [SearchResult]
  describe "get_customers_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers
  # &lt;p&gt;Creates a new customer object.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersRequestAddress] :address
  # @option opts [Int32] :balance An integer amount in cents (or local equivalent) that represents the customer&#39;s current balance, which affect the customer&#39;s future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
  # @option opts [CashBalanceParam] :cash_balance
  # @option opts [String] :coupon
  # @option opts [String] :description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.
  # @option opts [String] :email Customer&#39;s email address. It&#39;s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :invoice_prefix The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
  # @option opts [CustomerParam] :invoice_settings
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name The customer&#39;s full name or business name.
  # @option opts [Int32] :next_invoice_sequence The sequence to be used on the customer&#39;s next invoice. Defaults to 1.
  # @option opts [String] :payment_method
  # @option opts [String] :phone The customer&#39;s phone number.
  # @option opts [Array(String)] :preferred_locales Customer&#39;s preferred languages, ordered by preference.
  # @option opts [String] :promotion_code The ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount.
  # @option opts [PostCustomersRequestShipping] :shipping
  # @option opts [String] :source
  # @option opts [TaxParam] :tax
  # @option opts [String] :tax_exempt The customer&#39;s tax exemption. One of &#x60;none&#x60;, &#x60;exempt&#x60;, or &#x60;reverse&#x60;.
  # @option opts [Array(DataParams)] :tax_id_data The customer&#39;s tax IDs.
  # @option opts [String] :test_clock ID of the test clock to attach to the customer.
  # @option opts [Bool] :validate
  # @return [Customer]
  describe "post_customers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer
  # &lt;p&gt;Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the &lt;strong&gt;source&lt;/strong&gt; parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the &lt;strong&gt;source&lt;/strong&gt; parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the &lt;code&gt;past_due&lt;/code&gt; state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the &lt;strong&gt;default_source&lt;/strong&gt; for a customer will not trigger this behavior.&lt;/p&gt;  &lt;p&gt;This request accepts mostly the same arguments as the customer creation call.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersRequestAddress] :address
  # @option opts [Int32] :balance An integer amount in cents (or local equivalent) that represents the customer&#39;s current balance, which affect the customer&#39;s future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
  # @option opts [CashBalanceParam] :cash_balance
  # @option opts [String] :coupon
  # @option opts [String] :default_source If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.  Provide the ID of a payment source already attached to this customer to make it this customer&#39;s default payment source.  If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
  # @option opts [String] :description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.
  # @option opts [String] :email Customer&#39;s email address. It&#39;s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :invoice_prefix The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
  # @option opts [CustomerParam] :invoice_settings
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name The customer&#39;s full name or business name.
  # @option opts [Int32] :next_invoice_sequence The sequence to be used on the customer&#39;s next invoice. Defaults to 1.
  # @option opts [String] :phone The customer&#39;s phone number.
  # @option opts [Array(String)] :preferred_locales Customer&#39;s preferred languages, ordered by preference.
  # @option opts [String] :promotion_code The ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount.
  # @option opts [PostCustomersRequestShipping] :shipping
  # @option opts [String] :source
  # @option opts [TaxParam] :tax
  # @option opts [String] :tax_exempt The customer&#39;s tax exemption. One of &#x60;none&#x60;, &#x60;exempt&#x60;, or &#x60;reverse&#x60;.
  # @option opts [Bool] :validate
  # @return [Customer]
  describe "post_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_balance_transactions
  # &lt;p&gt;Creates an immutable transaction that updates the customer’s credit &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balance&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param amount The integer amount in **cents (or local equivalent)** to apply to the customer&#39;s credit balance.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). Specifies the [&#x60;invoice_credit_balance&#x60;](https://stripe.com/docs/api/customers/object#customer_object-invoice_credit_balance) that this transaction will apply to. If the customer&#39;s &#x60;currency&#x60; is not set, it will be updated to this value.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [CustomerBalanceTransaction]
  describe "post_customers_customer_balance_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_balance_transactions_transaction
  # &lt;p&gt;Most credit balance transaction fields are immutable, but you may update its &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;metadata&lt;/code&gt;.&lt;/p&gt;
  # @param customer
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [CustomerBalanceTransaction]
  describe "post_customers_customer_balance_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_cash_balance
  # &lt;p&gt;Changes the settings on a customer’s cash balance.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [BalanceSettingsParam] :settings
  # @return [CashBalance]
  describe "post_customers_customer_cash_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources
  # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
  # @param customer
  # @param source Please refer to full [documentation](https://stripe.com/docs/api) instead.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Hash(String, String)] :metadata
  # @option opts [Bool] :validate
  # @return [PaymentSource]
  describe "post_customers_customer_sources test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources_id
  # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :account_holder_name The name of the person or business that owns the bank account.
  # @option opts [String] :account_holder_type The type of entity that holds the account. This can be either &#x60;individual&#x60; or &#x60;company&#x60;.
  # @option opts [String] :address_city City/District/Suburb/Town/Village.
  # @option opts [String] :address_country Billing address country, if provided when creating card.
  # @option opts [String] :address_line1 Address line 1 (Street address/PO Box/Company name).
  # @option opts [String] :address_line2 Address line 2 (Apartment/Suite/Unit/Building).
  # @option opts [String] :address_state State/County/Province/Region.
  # @option opts [String] :address_zip ZIP or postal code.
  # @option opts [String] :exp_month Two digit number representing the card’s expiration month.
  # @option opts [String] :exp_year Four digit number representing the card’s expiration year.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name Cardholder name.
  # @option opts [Owner] :owner
  # @return [PostCustomersCustomerSourcesId200Response]
  describe "post_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources_id_verify
  # &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(Int32)] :amounts Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [BankAccount]
  describe "post_customers_customer_sources_id_verify test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_tax_ids
  # &lt;p&gt;Creates a new &lt;code&gt;tax_id&lt;/code&gt; object for a customer.&lt;/p&gt;
  # @param customer
  # @param _type Type of the tax ID, one of &#x60;ad_nrt&#x60;, &#x60;ae_trn&#x60;, &#x60;ar_cuit&#x60;, &#x60;au_abn&#x60;, &#x60;au_arn&#x60;, &#x60;bg_uic&#x60;, &#x60;bh_vat&#x60;, &#x60;bo_tin&#x60;, &#x60;br_cnpj&#x60;, &#x60;br_cpf&#x60;, &#x60;ca_bn&#x60;, &#x60;ca_gst_hst&#x60;, &#x60;ca_pst_bc&#x60;, &#x60;ca_pst_mb&#x60;, &#x60;ca_pst_sk&#x60;, &#x60;ca_qst&#x60;, &#x60;ch_uid&#x60;, &#x60;ch_vat&#x60;, &#x60;cl_tin&#x60;, &#x60;cn_tin&#x60;, &#x60;co_nit&#x60;, &#x60;cr_tin&#x60;, &#x60;de_stn&#x60;, &#x60;do_rcn&#x60;, &#x60;ec_ruc&#x60;, &#x60;eg_tin&#x60;, &#x60;es_cif&#x60;, &#x60;eu_oss_vat&#x60;, &#x60;eu_vat&#x60;, &#x60;gb_vat&#x60;, &#x60;ge_vat&#x60;, &#x60;hk_br&#x60;, &#x60;hr_oib&#x60;, &#x60;hu_tin&#x60;, &#x60;id_npwp&#x60;, &#x60;il_vat&#x60;, &#x60;in_gst&#x60;, &#x60;is_vat&#x60;, &#x60;jp_cn&#x60;, &#x60;jp_rn&#x60;, &#x60;jp_trn&#x60;, &#x60;ke_pin&#x60;, &#x60;kr_brn&#x60;, &#x60;kz_bin&#x60;, &#x60;li_uid&#x60;, &#x60;mx_rfc&#x60;, &#x60;my_frp&#x60;, &#x60;my_itn&#x60;, &#x60;my_sst&#x60;, &#x60;ng_tin&#x60;, &#x60;no_vat&#x60;, &#x60;no_voec&#x60;, &#x60;nz_gst&#x60;, &#x60;om_vat&#x60;, &#x60;pe_ruc&#x60;, &#x60;ph_tin&#x60;, &#x60;ro_tin&#x60;, &#x60;rs_pib&#x60;, &#x60;ru_inn&#x60;, &#x60;ru_kpp&#x60;, &#x60;sa_vat&#x60;, &#x60;sg_gst&#x60;, &#x60;sg_uen&#x60;, &#x60;si_tin&#x60;, &#x60;sv_nit&#x60;, &#x60;th_vat&#x60;, &#x60;tr_tin&#x60;, &#x60;tw_vat&#x60;, &#x60;ua_vat&#x60;, &#x60;us_ein&#x60;, &#x60;uy_ruc&#x60;, &#x60;ve_rif&#x60;, &#x60;vn_tin&#x60;, or &#x60;za_vat&#x60;
  # @param value Value of the tax ID.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TaxId]
  describe "post_customers_customer_tax_ids test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
