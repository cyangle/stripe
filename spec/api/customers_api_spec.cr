#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::CustomersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "CustomersApi" do
  describe "test an instance of CustomersApi" do
    it "should create an instance of CustomersApi" do
      api_instance = Stripe::CustomersApi.new
      api_instance.should be_a(Stripe::CustomersApi)
    end
  end

  # unit tests for delete_customers_customer
  # &lt;p&gt;Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @return [DeletedCustomer]
  describe "delete_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_discount
  # &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @return [DeletedDiscount]
  describe "delete_customers_customer_discount test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_sources_id
  # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [PostAccountsAccountLoginLinksRequest] :post_accounts_account_login_links_request
  # @return [DeleteCustomersCustomerSourcesId200Response]
  describe "delete_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_tax_ids_id
  # &lt;p&gt;Deletes an existing &lt;code&gt;TaxID&lt;/code&gt; object.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [DeletedTaxId]
  describe "delete_customers_customer_tax_ids_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers
  # &lt;p&gt;Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email A case-sensitive filter on the list based on the customer&#39;s &#x60;email&#x60; field. The value must be a string.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :test_clock Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [GetAccountsCreatedParameter] :created
  # @return [CustomerResourceCustomerList]
  describe "get_customers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer
  # &lt;p&gt;Retrieves a Customer object.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetCustomersCustomer200Response]
  describe "get_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_balance_transactions
  # &lt;p&gt;Returns a list of transactions that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerBalanceTransactionList]
  describe "get_customers_customer_balance_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_balance_transactions_transaction
  # &lt;p&gt;Retrieves a specific customer balance transaction that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerBalanceTransaction]
  describe "get_customers_customer_balance_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_cash_balance
  # &lt;p&gt;Retrieves a customer’s cash balance.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CashBalance]
  describe "get_customers_customer_cash_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_discount
  #
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Discount]
  describe "get_customers_customer_discount test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_payment_methods
  # &lt;p&gt;Returns a list of PaymentMethods for a given Customer&lt;/p&gt;
  # @param _type A required filter on the list, based on the object &#x60;type&#x60; field.
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerPaymentMethodResourceList]
  describe "get_customers_customer_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_payment_methods_payment_method
  # &lt;p&gt;Retrieves a PaymentMethod object for a given Customer.&lt;/p&gt;
  # @param customer
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "get_customers_customer_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_sources
  # &lt;p&gt;List sources for a specified customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :object Filter sources according to a particular object type.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ApmsSourcesSourceList]
  describe "get_customers_customer_sources test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_sources_id
  # &lt;p&gt;Retrieve a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentSource]
  describe "get_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_tax_ids
  # &lt;p&gt;Returns a list of tax IDs for a customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TaxIDsList]
  describe "get_customers_customer_tax_ids test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_tax_ids_id
  # &lt;p&gt;Retrieves the &lt;code&gt;TaxID&lt;/code&gt; object with the given identifier.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TaxId]
  describe "get_customers_customer_tax_ids_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_search
  # &lt;p&gt;Search for customers you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [SearchResult]
  describe "get_customers_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers
  # &lt;p&gt;Creates a new customer object.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersRequest] :post_customers_request
  # @return [Customer]
  describe "post_customers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer
  # &lt;p&gt;Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the &lt;strong&gt;source&lt;/strong&gt; parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the &lt;strong&gt;source&lt;/strong&gt; parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the &lt;code&gt;past_due&lt;/code&gt; state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the &lt;strong&gt;default_source&lt;/strong&gt; for a customer will not trigger this behavior.&lt;/p&gt;  &lt;p&gt;This request accepts mostly the same arguments as the customer creation call.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersCustomerRequest] :post_customers_customer_request
  # @return [Customer]
  describe "post_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_balance_transactions
  # &lt;p&gt;Creates an immutable transaction that updates the customer’s credit &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balance&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param post_customers_customer_balance_transactions_request
  # @param [Hash] opts the optional parameters
  # @return [CustomerBalanceTransaction]
  describe "post_customers_customer_balance_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_balance_transactions_transaction
  # &lt;p&gt;Most credit balance transaction fields are immutable, but you may update its &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;metadata&lt;/code&gt;.&lt;/p&gt;
  # @param customer
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersCustomerBalanceTransactionsTransactionRequest] :post_customers_customer_balance_transactions_transaction_request
  # @return [CustomerBalanceTransaction]
  describe "post_customers_customer_balance_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_cash_balance
  # &lt;p&gt;Changes the settings on a customer’s cash balance.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersCustomerCashBalanceRequest] :post_customers_customer_cash_balance_request
  # @return [CashBalance]
  describe "post_customers_customer_cash_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources
  # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersCustomerSourcesRequest] :post_customers_customer_sources_request
  # @return [PaymentSource]
  describe "post_customers_customer_sources test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources_id
  # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersCustomerSourcesIdRequest] :post_customers_customer_sources_id_request
  # @return [PostCustomersCustomerSourcesId200Response]
  describe "post_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources_id_verify
  # &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersCustomerSourcesIdVerifyRequest] :post_customers_customer_sources_id_verify_request
  # @return [BankAccount]
  describe "post_customers_customer_sources_id_verify test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_tax_ids
  # &lt;p&gt;Creates a new &lt;code&gt;TaxID&lt;/code&gt; object for a customer.&lt;/p&gt;
  # @param customer
  # @param post_customers_customer_tax_ids_request
  # @param [Hash] opts the optional parameters
  # @return [TaxId]
  describe "post_customers_customer_tax_ids test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
