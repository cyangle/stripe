#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::PaymentLinksApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "PaymentLinksApi" do
  describe "test an instance of PaymentLinksApi" do
    it "should create an instance of PaymentLinksApi" do
      api_instance = Stripe::PaymentLinksApi.new
      api_instance.should be_a(Stripe::PaymentLinksApi)
    end
  end

  # unit tests for get_payment_links
  # &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Bool] :active Only return payment links that are active or inactive (e.g., pass &#x60;false&#x60; to list all inactive payment links).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentLinksResourcePaymentLinkList]
  describe "get_payment_links test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_links_payment_link
  # &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
  # @param payment_link
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentLink]
  describe "get_payment_links_payment_link test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_links_payment_link_line_items
  # &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  # @param payment_link
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentLinksResourceListLineItems]
  describe "get_payment_links_payment_link_line_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_links
  # &lt;p&gt;Creates a payment link.&lt;/p&gt;
  # @param post_payment_links_request
  # @param [Hash] opts the optional parameters
  # @return [PaymentLink]
  describe "post_payment_links test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_links_payment_link
  # &lt;p&gt;Updates a payment link.&lt;/p&gt;
  # @param payment_link
  # @param [Hash] opts the optional parameters
  # @option opts [PostPaymentLinksPaymentLinkRequest] :post_payment_links_payment_link_request
  # @return [PaymentLink]
  describe "post_payment_links_payment_link test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
