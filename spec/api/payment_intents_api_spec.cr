#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"
require "../../src/stripe/api/payment_intents_api"

# Unit tests for Stripe::PaymentIntentsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "PaymentIntentsApi" do
  describe "test an instance of PaymentIntentsApi" do
    it "should create an instance of PaymentIntentsApi" do
      api_instance = Stripe::PaymentIntentsApi.new
      api_instance.should be_a(Stripe::PaymentIntentsApi)
    end
  end

  # unit tests for get_payment_intents
  # &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :customer Only return PaymentIntents for the customer that this customer ID specifies.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentFlowsPaymentIntentList]
  describe "get_payment_intents test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_intents_intent
  # &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;You can retrieve a PaymentIntent client-side using a publishable key when the &lt;code&gt;client_secret&lt;/code&gt; is in the query string. &lt;/p&gt;  &lt;p&gt;If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :client_secret The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.
  # @return [PaymentIntent]
  describe "get_payment_intents_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_intents_search
  # &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [SearchResult]
  describe "get_payment_intents_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents
  # &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. Learn more about &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;the available payment flows with the Payment Intents API&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When you use &lt;code&gt;confirm&#x3D;true&lt;/code&gt; during creation, it’s equivalent to creating and confirming the PaymentIntent in the same call. You can use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when you supply &lt;code&gt;confirm&#x3D;true&lt;/code&gt;.&lt;/p&gt;
  # @param amount Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :application_fee_amount The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner&#39;s Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @option opts [AutomaticPaymentMethodsParam] :automatic_payment_methods
  # @option opts [String] :capture_method Controls when the funds will be captured from the customer&#39;s account.
  # @option opts [Bool] :confirm Set to &#x60;true&#x60; to attempt to [confirm this PaymentIntent](https://stripe.com/docs/api/payment_intents/confirm) immediately. This parameter defaults to &#x60;false&#x60;. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://stripe.com/docs/api/payment_intents/confirm).
  # @option opts [String] :confirmation_method Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  # @option opts [String] :confirmation_token ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as &#x60;payment_method&#x60;, then the values in this request will take precedence.
  # @option opts [String] :customer ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent&#39;s payment method is not &#x60;card_present&#x60;, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is &#x60;card_present&#x60; and isn&#39;t a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Bool] :error_on_requires_action Set to &#x60;true&#x60; to fail the payment attempt if the PaymentIntent transitions into &#x60;requires_action&#x60;. Use this parameter for simpler integrations that don&#39;t handle customer actions, such as [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [&#x60;confirm&#x3D;true&#x60;](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :mandate ID of the mandate that&#39;s used for this payment. This parameter can only be used with [&#x60;confirm&#x3D;true&#x60;](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  # @option opts [PostPaymentIntentsRequestMandateData] :mandate_data
  # @option opts [Hash(String, String)] :metadata
  # @option opts [PostPaymentIntentsRequestOffSession] :off_session
  # @option opts [String] :on_behalf_of The Stripe account ID that these funds are intended for. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.  If you don&#39;t provide the &#x60;payment_method&#x60; parameter or the &#x60;source&#x60; parameter with &#x60;confirm&#x3D;true&#x60;, &#x60;source&#x60; automatically populates with &#x60;customer.default_source&#x60; to improve migration for users of the Charges API. We recommend that you explicitly provide the &#x60;payment_method&#x60; moving forward.
  # @option opts [String] :payment_method_configuration The ID of the payment method configuration to use with this PaymentIntent.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types The list of payment method types (for example, a card) that this PaymentIntent can use. If you don&#39;t provide this, it defaults to [\\\&quot;card\\\&quot;]. Use &#x60;automatic_payment_methods&#x60; to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
  # @option opts [RadarOptionsWithHiddenOptions] :radar_options
  # @option opts [String] :receipt_email Email address to send the receipt to. If you specify &#x60;receipt_email&#x60; for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  # @option opts [String] :return_url The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method&#39;s app or site. If you&#39;d prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [&#x60;confirm&#x3D;true&#x60;](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  # @option opts [String] :setup_future_usage Indicates that you intend to make future payments with this PaymentIntent&#39;s payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don&#39;t provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is &#x60;card_present&#x60; and isn&#39;t a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses &#x60;setup_future_usage&#x60; to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  # @option opts [OptionalFieldsShipping] :shipping
  # @option opts [String] :statement_descriptor Text that appears on the customer&#39;s statement as the statement descriptor for a non-card charge. This value overrides the account&#39;s default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
  # @option opts [String] :statement_descriptor_suffix Provides information about a card charge. Concatenated to the account&#39;s [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer&#39;s statement.
  # @option opts [TransferDataCreationParams] :transfer_data
  # @option opts [String] :transfer_group A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
  # @option opts [Bool] :use_stripe_sdk Set to &#x60;true&#x60; when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
  # @return [PaymentIntent]
  describe "post_payment_intents test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent
  # &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  # @option opts [PostPaymentIntentsIntentRequestApplicationFeeAmount] :application_fee_amount
  # @option opts [String] :capture_method Controls when the funds will be captured from the customer&#39;s account.
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :customer ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent&#39;s payment method is not &#x60;card_present&#x60;, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is &#x60;card_present&#x60; and isn&#39;t a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. To unset this field to null, pass in an empty string.
  # @option opts [String] :payment_method_configuration The ID of the payment method configuration to use with this PaymentIntent.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types The list of payment method types (for example, card) that this PaymentIntent can use. Use &#x60;automatic_payment_methods&#x60; to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
  # @option opts [PostPaymentIntentsIntentRequestReceiptEmail] :receipt_email
  # @option opts [String] :setup_future_usage Indicates that you intend to make future payments with this PaymentIntent&#39;s payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don&#39;t provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is &#x60;card_present&#x60; and isn&#39;t a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses &#x60;setup_future_usage&#x60; to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you&#39;ve already set &#x60;setup_future_usage&#x60; and you&#39;re performing a request using a publishable key, you can only update the value from &#x60;on_session&#x60; to &#x60;off_session&#x60;.
  # @option opts [PostPaymentIntentsIntentRequestShipping] :shipping
  # @option opts [String] :statement_descriptor Text that appears on the customer&#39;s statement as the statement descriptor for a non-card charge. This value overrides the account&#39;s default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
  # @option opts [String] :statement_descriptor_suffix Provides information about a card charge. Concatenated to the account&#39;s [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer&#39;s statement.
  # @option opts [TransferDataUpdateParams] :transfer_data
  # @option opts [String] :transfer_group A string that identifies the resulting payment as part of a group. You can only provide &#x60;transfer_group&#x60; if it hasn&#39;t been set. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @return [PaymentIntent]
  describe "post_payment_intents_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_apply_customer_balance
  # &lt;p&gt;Manually reconcile the remaining amount for a &lt;code&gt;customer_balance&lt;/code&gt; PaymentIntent.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.  A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).  The maximum amount is the amount of the PaymentIntent.  When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_apply_customer_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_cancel
  # &lt;p&gt;You can cancel a PaymentIntent object when it’s in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt; or, &lt;a href&#x3D;\&quot;/docs/payments/intents\&quot;&gt;in rare cases&lt;/a&gt;, &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a &lt;code&gt;status&lt;/code&gt; of &lt;code&gt;requires_capture&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; is automatically refunded. &lt;/p&gt;  &lt;p&gt;You can’t cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cancellation_reason Reason for canceling this PaymentIntent. Possible values are: &#x60;duplicate&#x60;, &#x60;fraudulent&#x60;, &#x60;requested_by_customer&#x60;, or &#x60;abandoned&#x60;
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_capture
  # &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount_to_capture The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full &#x60;amount_capturable&#x60; if it&#39;s not provided.
  # @option opts [Int32] :application_fee_amount The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner&#39;s Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :final_capture Defaults to &#x60;true&#x60;. When capturing a PaymentIntent, setting &#x60;final_capture&#x60; to &#x60;false&#x60; notifies Stripe to not release the remaining uncaptured funds to make sure that they&#39;re captured in future requests. You can only use this setting when [multicapture](https://stripe.com/docs/payments/multicapture) is available for PaymentIntents.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :statement_descriptor Text that appears on the customer&#39;s statement as the statement descriptor for a non-card charge. This value overrides the account&#39;s default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
  # @option opts [String] :statement_descriptor_suffix Provides information about a card charge. Concatenated to the account&#39;s [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer&#39;s statement.
  # @option opts [TransferDataUpdateParams] :transfer_data
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_capture test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_confirm
  # &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent transitions to the &lt;code&gt;requires_payment_method&lt;/code&gt; status or the &lt;code&gt;canceled&lt;/code&gt; status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;). If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment. If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. There is a variable upper limit on how many times a PaymentIntent can be confirmed. After this limit is reached, any further calls to this endpoint will transition the PaymentIntent to the &lt;code&gt;canceled&lt;/code&gt; state.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [String] :capture_method Controls when the funds will be captured from the customer&#39;s account.
  # @option opts [String] :confirmation_token ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as &#x60;payment_method&#x60;, then the values in this request will take precedence.
  # @option opts [Bool] :error_on_requires_action Set to &#x60;true&#x60; to fail the payment attempt if the PaymentIntent transitions into &#x60;requires_action&#x60;. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :mandate ID of the mandate that&#39;s used for this payment.
  # @option opts [PostPaymentIntentsIntentConfirmRequestMandateData] :mandate_data
  # @option opts [PostPaymentIntentsIntentConfirmRequestOffSession] :off_session
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types The list of payment method types (for example, a card) that this PaymentIntent can use. Use &#x60;automatic_payment_methods&#x60; to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
  # @option opts [RadarOptionsWithHiddenOptions] :radar_options
  # @option opts [PostPaymentIntentsIntentRequestReceiptEmail] :receipt_email
  # @option opts [String] :return_url The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method&#39;s app or site. If you&#39;d prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
  # @option opts [String] :setup_future_usage Indicates that you intend to make future payments with this PaymentIntent&#39;s payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don&#39;t provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is &#x60;card_present&#x60; and isn&#39;t a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses &#x60;setup_future_usage&#x60; to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you&#39;ve already set &#x60;setup_future_usage&#x60; and you&#39;re performing a request using a publishable key, you can only update the value from &#x60;on_session&#x60; to &#x60;off_session&#x60;.
  # @option opts [PostPaymentIntentsIntentRequestShipping] :shipping
  # @option opts [Bool] :use_stripe_sdk Set to &#x60;true&#x60; when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_confirm test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_increment_authorization
  # &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object returns with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
  # @param intent
  # @param amount The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :application_fee_amount The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner&#39;s Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Hash(String, String)] :metadata
  # @option opts [String] :statement_descriptor Text that appears on the customer&#39;s statement as the statement descriptor for a non-card or card charge. This value overrides the account&#39;s default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
  # @option opts [TransferDataUpdateParams] :transfer_data
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_increment_authorization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_verify_microdeposits
  # &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Array(Int32)] :amounts Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  # @option opts [String] :descriptor_code A six-character code starting with SM present in the microdeposit sent to the bank account.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_verify_microdeposits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
