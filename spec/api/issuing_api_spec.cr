#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::IssuingApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "IssuingApi" do
  describe "test an instance of IssuingApi" do
    it "should create an instance of IssuingApi" do
      api_instance = Stripe::IssuingApi.new
      api_instance.should be_a(Stripe::IssuingApi)
    end
  end

  # unit tests for get_issuing_authorizations
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :card Only return authorizations that belong to the given card.
  # @option opts [String] :cardholder Only return authorizations that belong to the given cardholder.
  # @option opts [GetAccountsCreatedParameter] :created Only return authorizations that were created during the given date interval.
  # @option opts [String] :status Only return authorizations with the given status. One of &#x60;pending&#x60;, &#x60;closed&#x60;, or &#x60;reversed&#x60;.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingAuthorizationList]
  describe "get_issuing_authorizations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_authorizations_authorization
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
  # @param authorization
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingAuthorization]
  describe "get_issuing_authorizations_authorization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_cardholders
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :email Only return cardholders that have the given email address.
  # @option opts [String] :phone_number Only return cardholders that have the given phone number.
  # @option opts [String] :status Only return cardholders that have the given status. One of &#x60;active&#x60;, &#x60;inactive&#x60;, or &#x60;blocked&#x60;.
  # @option opts [String] :_type Only return cardholders that have the given type. One of &#x60;individual&#x60; or &#x60;company&#x60;.
  # @option opts [GetAccountsCreatedParameter] :created Only return cardholders that were created during the given date interval.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCardholderList]
  describe "get_issuing_cardholders test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_cardholders_cardholder
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
  # @param cardholder
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCardholder]
  describe "get_issuing_cardholders_cardholder test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_cards
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :cardholder Only return cards belonging to the Cardholder with the provided ID.
  # @option opts [Int32] :exp_month Only return cards that have the given expiration month.
  # @option opts [Int32] :exp_year Only return cards that have the given expiration year.
  # @option opts [String] :last4 Only return cards that have the given last four digits.
  # @option opts [String] :status Only return cards that have the given status. One of &#x60;active&#x60;, &#x60;inactive&#x60;, or &#x60;canceled&#x60;.
  # @option opts [String] :_type Only return cards that have the given type. One of &#x60;virtual&#x60; or &#x60;physical&#x60;.
  # @option opts [GetAccountsCreatedParameter] :created Only return cards that were issued during the given date interval.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCardList]
  describe "get_issuing_cards test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_cards_card
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "get_issuing_cards_card test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_disputes
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [GetAccountsCreatedParameter] :created Select Issuing disputes that were created during the given date interval.
  # @option opts [String] :status Select Issuing disputes with the given status.
  # @option opts [String] :transaction Select the Issuing dispute for the given transaction.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingDisputeList]
  describe "get_issuing_disputes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_disputes_dispute
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingDispute]
  describe "get_issuing_disputes_dispute test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_transactions
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :card Only return transactions that belong to the given card.
  # @option opts [String] :cardholder Only return transactions that belong to the given cardholder.
  # @option opts [String] :_type Only return transactions that have the given type. One of &#x60;capture&#x60; or &#x60;refund&#x60;.
  # @option opts [GetAccountsCreatedParameter] :created Only return transactions that were created during the given date interval.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingTransactionList]
  describe "get_issuing_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_transactions_transaction
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingTransaction]
  describe "get_issuing_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_authorizations_authorization
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param authorization
  # @param [Hash] opts the optional parameters
  # @option opts [PostApplicationFeesFeeRefundsIdRequest] :post_application_fees_fee_refunds_id_request
  # @return [IssuingAuthorization]
  describe "post_issuing_authorizations_authorization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_authorizations_authorization_approve
  # &lt;p&gt;Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.&lt;/p&gt;
  # @param authorization
  # @param [Hash] opts the optional parameters
  # @option opts [PostIssuingAuthorizationsAuthorizationApproveRequest] :post_issuing_authorizations_authorization_approve_request
  # @return [IssuingAuthorization]
  describe "post_issuing_authorizations_authorization_approve test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_authorizations_authorization_decline
  # &lt;p&gt;Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow.&lt;/p&gt;
  # @param authorization
  # @param [Hash] opts the optional parameters
  # @option opts [PostApplicationFeesFeeRefundsIdRequest] :post_application_fees_fee_refunds_id_request
  # @return [IssuingAuthorization]
  describe "post_issuing_authorizations_authorization_decline test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_cardholders
  # &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
  # @param post_issuing_cardholders_request
  # @param [Hash] opts the optional parameters
  # @return [IssuingCardholder]
  describe "post_issuing_cardholders test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_cardholders_cardholder
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param cardholder
  # @param [Hash] opts the optional parameters
  # @option opts [PostIssuingCardholdersCardholderRequest] :post_issuing_cardholders_cardholder_request
  # @return [IssuingCardholder]
  describe "post_issuing_cardholders_cardholder test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_cards
  # &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
  # @param post_issuing_cards_request
  # @param [Hash] opts the optional parameters
  # @return [IssuingCard]
  describe "post_issuing_cards test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_cards_card
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [PostIssuingCardsCardRequest] :post_issuing_cards_card_request
  # @return [IssuingCard]
  describe "post_issuing_cards_card test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_disputes
  # &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostIssuingDisputesRequest] :post_issuing_disputes_request
  # @return [IssuingDispute]
  describe "post_issuing_disputes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_disputes_dispute
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [PostIssuingDisputesDisputeRequest] :post_issuing_disputes_dispute_request
  # @return [IssuingDispute]
  describe "post_issuing_disputes_dispute test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_disputes_dispute_submit
  # &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [PostApplicationFeesFeeRefundsIdRequest] :post_application_fees_fee_refunds_id_request
  # @return [IssuingDispute]
  describe "post_issuing_disputes_dispute_submit test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_transactions_transaction
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [PostApplicationFeesFeeRefundsIdRequest] :post_application_fees_fee_refunds_id_request
  # @return [IssuingTransaction]
  describe "post_issuing_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
