#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::SkusApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "SkusApi" do
  describe "test an instance of SkusApi" do
    it "should create an instance of SkusApi" do
      api_instance = Stripe::SkusApi.new
      api_instance.should be_a(Stripe::SkusApi)
    end
  end

  # unit tests for delete_skus_id
  # &lt;p&gt;Delete a SKU. Deleting a SKU is only possible until it has been used in an order.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [DeletedSku]
  describe "delete_skus_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_skus
  # &lt;p&gt;Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Bool] :active Only return SKUs that are active or inactive (e.g., pass &#x60;false&#x60; to list all inactive products).
  # @option opts [Bool] :in_stock Only return SKUs that are either in stock or out of stock (e.g., pass &#x60;false&#x60; to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.
  # @option opts [Hash(String, String)] :attributes Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if &#x60;product&#x60; is also supplied. For instance, if the associated product has attributes &#x60;[\&quot;color\&quot;, \&quot;size\&quot;]&#x60;, passing in &#x60;attributes[color]&#x3D;red&#x60; returns all the SKUs for this product that have &#x60;color&#x60; set to &#x60;red&#x60;.
  # @option opts [Array(String)] :ids Only return SKUs with the given IDs.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :product The ID of the product whose SKUs will be retrieved. Must be a product with type &#x60;good&#x60;.
  # @return [ProductsMethodSkuList]
  describe "get_skus test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_skus_id
  # &lt;p&gt;Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetSkusId200Response]
  describe "get_skus_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_skus
  # &lt;p&gt;Creates a new SKU associated with a product.&lt;/p&gt;
  # @param post_skus_request
  # @param [Hash] opts the optional parameters
  # @return [Sku]
  describe "post_skus test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_skus_id
  # &lt;p&gt;Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;Note that a SKUâ€™s &lt;code&gt;attributes&lt;/code&gt; are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [PostSkusIdRequest] :post_skus_id_request
  # @return [Sku]
  describe "post_skus_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
