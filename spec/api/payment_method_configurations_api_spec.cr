#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"
require "../../src/stripe/api/payment_method_configurations_api"

# Unit tests for Stripe::PaymentMethodConfigurationsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "PaymentMethodConfigurationsApi" do
  describe "test an instance of PaymentMethodConfigurationsApi" do
    it "should create an instance of PaymentMethodConfigurationsApi" do
      api_instance = Stripe::PaymentMethodConfigurationsApi.new
      api_instance.should be_a(Stripe::PaymentMethodConfigurationsApi)
    end
  end

  # unit tests for get_payment_method_configurations
  # &lt;p&gt;List payment method configurations&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [GetPaymentMethodConfigurationsApplicationParameter] :application The Connect application to filter by.
  # @return [PaymentMethodConfigResourcePaymentMethodConfigurationsList]
  describe "get_payment_method_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_method_configurations_configuration
  # &lt;p&gt;Retrieve payment method configuration&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethodConfiguration]
  describe "get_payment_method_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_method_configurations
  # &lt;p&gt;Creates a payment method configuration&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PaymentMethodParam] :acss_debit
  # @option opts [PaymentMethodParam] :affirm
  # @option opts [PaymentMethodParam] :afterpay_clearpay
  # @option opts [PaymentMethodParam] :alipay
  # @option opts [PaymentMethodParam] :amazon_pay
  # @option opts [PaymentMethodParam] :apple_pay
  # @option opts [PaymentMethodParam] :apple_pay_later
  # @option opts [PaymentMethodParam] :au_becs_debit
  # @option opts [PaymentMethodParam] :bacs_debit
  # @option opts [PaymentMethodParam] :bancontact
  # @option opts [PaymentMethodParam] :blik
  # @option opts [PaymentMethodParam] :boleto
  # @option opts [PaymentMethodParam] :card
  # @option opts [PaymentMethodParam] :cartes_bancaires
  # @option opts [PaymentMethodParam] :cashapp
  # @option opts [PaymentMethodParam] :customer_balance
  # @option opts [PaymentMethodParam] :eps
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PaymentMethodParam] :fpx
  # @option opts [PaymentMethodParam] :giropay
  # @option opts [PaymentMethodParam] :google_pay
  # @option opts [PaymentMethodParam] :grabpay
  # @option opts [PaymentMethodParam] :ideal
  # @option opts [PaymentMethodParam] :jcb
  # @option opts [PaymentMethodParam] :klarna
  # @option opts [PaymentMethodParam] :konbini
  # @option opts [PaymentMethodParam] :link
  # @option opts [PaymentMethodParam] :mobilepay
  # @option opts [PaymentMethodParam] :multibanco
  # @option opts [String] :name Configuration name.
  # @option opts [PaymentMethodParam] :oxxo
  # @option opts [PaymentMethodParam] :p24
  # @option opts [String] :parent Configuration&#39;s parent configuration. Specify to create a child configuration.
  # @option opts [PaymentMethodParam] :paynow
  # @option opts [PaymentMethodParam] :paypal
  # @option opts [PaymentMethodParam] :promptpay
  # @option opts [PaymentMethodParam] :revolut_pay
  # @option opts [PaymentMethodParam] :sepa_debit
  # @option opts [PaymentMethodParam] :sofort
  # @option opts [PaymentMethodParam] :swish
  # @option opts [PaymentMethodParam] :twint
  # @option opts [PaymentMethodParam] :us_bank_account
  # @option opts [PaymentMethodParam] :wechat_pay
  # @option opts [PaymentMethodParam] :zip
  # @return [PaymentMethodConfiguration]
  describe "post_payment_method_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_method_configurations_configuration
  # &lt;p&gt;Update payment method configuration&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [PaymentMethodParam] :acss_debit
  # @option opts [Bool] :active Whether the configuration can be used for new payments.
  # @option opts [PaymentMethodParam] :affirm
  # @option opts [PaymentMethodParam] :afterpay_clearpay
  # @option opts [PaymentMethodParam] :alipay
  # @option opts [PaymentMethodParam] :amazon_pay
  # @option opts [PaymentMethodParam] :apple_pay
  # @option opts [PaymentMethodParam] :apple_pay_later
  # @option opts [PaymentMethodParam] :au_becs_debit
  # @option opts [PaymentMethodParam] :bacs_debit
  # @option opts [PaymentMethodParam] :bancontact
  # @option opts [PaymentMethodParam] :blik
  # @option opts [PaymentMethodParam] :boleto
  # @option opts [PaymentMethodParam] :card
  # @option opts [PaymentMethodParam] :cartes_bancaires
  # @option opts [PaymentMethodParam] :cashapp
  # @option opts [PaymentMethodParam] :customer_balance
  # @option opts [PaymentMethodParam] :eps
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PaymentMethodParam] :fpx
  # @option opts [PaymentMethodParam] :giropay
  # @option opts [PaymentMethodParam] :google_pay
  # @option opts [PaymentMethodParam] :grabpay
  # @option opts [PaymentMethodParam] :ideal
  # @option opts [PaymentMethodParam] :jcb
  # @option opts [PaymentMethodParam] :klarna
  # @option opts [PaymentMethodParam] :konbini
  # @option opts [PaymentMethodParam] :link
  # @option opts [PaymentMethodParam] :mobilepay
  # @option opts [PaymentMethodParam] :multibanco
  # @option opts [String] :name Configuration name.
  # @option opts [PaymentMethodParam] :oxxo
  # @option opts [PaymentMethodParam] :p24
  # @option opts [PaymentMethodParam] :paynow
  # @option opts [PaymentMethodParam] :paypal
  # @option opts [PaymentMethodParam] :promptpay
  # @option opts [PaymentMethodParam] :revolut_pay
  # @option opts [PaymentMethodParam] :sepa_debit
  # @option opts [PaymentMethodParam] :sofort
  # @option opts [PaymentMethodParam] :swish
  # @option opts [PaymentMethodParam] :twint
  # @option opts [PaymentMethodParam] :us_bank_account
  # @option opts [PaymentMethodParam] :wechat_pay
  # @option opts [PaymentMethodParam] :zip
  # @return [PaymentMethodConfiguration]
  describe "post_payment_method_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
