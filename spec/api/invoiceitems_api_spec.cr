#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"
require "../../src/stripe/api/invoiceitems_api"

# Unit tests for Stripe::InvoiceitemsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "InvoiceitemsApi" do
  describe "test an instance of InvoiceitemsApi" do
    it "should create an instance of InvoiceitemsApi" do
      api_instance = Stripe::InvoiceitemsApi.new
      api_instance.should be_a(Stripe::InvoiceitemsApi)
    end
  end

  # unit tests for delete_invoiceitems_invoiceitem
  # &lt;p&gt;Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.&lt;/p&gt;
  # @param invoiceitem
  # @param [Hash] opts the optional parameters
  # @return [DeletedInvoiceitem]
  describe "delete_invoiceitems_invoiceitem test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoiceitems
  # &lt;p&gt;Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :invoice Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed.
  # @option opts [GetAccountsCreatedParameter] :created Only return invoice items that were created during the given date interval.
  # @option opts [Bool] :pending Set to &#x60;true&#x60; to only show pending invoice items, which are not yet attached to any invoices. Set to &#x60;false&#x60; to only show invoice items already attached to invoices. If unspecified, no filter is applied.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :customer The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.
  # @return [InvoicesItemsList]
  describe "get_invoiceitems test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoiceitems_invoiceitem
  # &lt;p&gt;Retrieves the invoice item with the given ID.&lt;/p&gt;
  # @param invoiceitem
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Invoiceitem]
  describe "get_invoiceitems_invoiceitem test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoiceitems
  # &lt;p&gt;Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.&lt;/p&gt;
  # @param customer The ID of the customer who will be billed when this invoice item is billed.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. Passing in a negative &#x60;amount&#x60; will reduce the &#x60;amount_due&#x60; on the invoice.
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
  # @option opts [Bool] :discountable Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items.
  # @option opts [PostInvoiceitemsRequestDiscounts] :discounts
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :invoice The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices and there is a maximum of 250 items per invoice.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Period] :period
  # @option opts [String] :price The ID of the price object. One of &#x60;price&#x60; or &#x60;price_data&#x60; is required.
  # @option opts [OneTimePriceData] :price_data
  # @option opts [Int32] :quantity Non-negative integer. The quantity of units for the invoice item.
  # @option opts [String] :subscription The ID of a subscription to add this invoice item to. When left blank, the invoice item is added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription.
  # @option opts [String] :tax_behavior Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of &#x60;inclusive&#x60;, &#x60;exclusive&#x60;, or &#x60;unspecified&#x60;. Once specified as either &#x60;inclusive&#x60; or &#x60;exclusive&#x60;, it cannot be changed.
  # @option opts [PostInvoiceitemsRequestTaxCode] :tax_code
  # @option opts [Array(String)] :tax_rates The tax rates which apply to the invoice item. When set, the &#x60;default_tax_rates&#x60; on the invoice do not apply to this invoice item.
  # @option opts [Int32] :unit_amount The integer unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This &#x60;unit_amount&#x60; will be multiplied by the quantity to get the full amount. Passing in a negative &#x60;unit_amount&#x60; will reduce the &#x60;amount_due&#x60; on the invoice.
  # @option opts [BigDecimal] :unit_amount_decimal Same as &#x60;unit_amount&#x60;, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of &#x60;unit_amount&#x60; and &#x60;unit_amount_decimal&#x60; can be set.
  # @return [Invoiceitem]
  describe "post_invoiceitems test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoiceitems_invoiceitem
  # &lt;p&gt;Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.&lt;/p&gt;
  # @param invoiceitem
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer&#39;s account, pass a negative amount.
  # @option opts [String] :description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
  # @option opts [Bool] :discountable Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations.
  # @option opts [PostInvoiceitemsInvoiceitemRequestDiscounts] :discounts
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Period] :period
  # @option opts [String] :price The ID of the price object. One of &#x60;price&#x60; or &#x60;price_data&#x60; is required.
  # @option opts [OneTimePriceData] :price_data
  # @option opts [Int32] :quantity Non-negative integer. The quantity of units for the invoice item.
  # @option opts [String] :tax_behavior Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of &#x60;inclusive&#x60;, &#x60;exclusive&#x60;, or &#x60;unspecified&#x60;. Once specified as either &#x60;inclusive&#x60; or &#x60;exclusive&#x60;, it cannot be changed.
  # @option opts [PostInvoiceitemsRequestTaxCode] :tax_code
  # @option opts [PostInvoiceitemsInvoiceitemRequestTaxRates] :tax_rates
  # @option opts [Int32] :unit_amount The integer unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer&#39;s account, pass a negative unit_amount.
  # @option opts [BigDecimal] :unit_amount_decimal Same as &#x60;unit_amount&#x60;, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of &#x60;unit_amount&#x60; and &#x60;unit_amount_decimal&#x60; can be set.
  # @return [Invoiceitem]
  describe "post_invoiceitems_invoiceitem test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
