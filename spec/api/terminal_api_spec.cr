#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::TerminalApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "TerminalApi" do
  describe "test an instance of TerminalApi" do
    it "should create an instance of TerminalApi" do
      api_instance = Stripe::TerminalApi.new
      api_instance.should be_a(Stripe::TerminalApi)
    end
  end

  # unit tests for delete_terminal_configurations_configuration
  # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalConfiguration]
  describe "delete_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_terminal_locations_location
  # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalLocation]
  describe "delete_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_terminal_readers_reader
  # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalReader]
  describe "delete_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_configurations
  # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :is_account_default if present, only return the account default or non-default configurations.
  # @return [TerminalConfigurationConfigurationList]
  describe "get_terminal_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_configurations_configuration
  # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalConfigurationsConfiguration200Response]
  describe "get_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_locations
  # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalLocationLocationList]
  describe "get_terminal_locations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_locations_location
  # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalLocationsLocation200Response]
  describe "get_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_readers
  # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :location A location ID to filter the response list to only readers at the specific location
  # @option opts [String] :status A status filter to filter readers to only offline or online readers
  # @option opts [String] :device_type Filters readers by device type
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalReaderRetrieveReader]
  describe "get_terminal_readers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_readers_reader
  # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalReadersReader200Response]
  describe "get_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_configurations
  # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [BbposWisePose] :bbpos_wisepos_e
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostTerminalConfigurationsRequestTipping] :tipping
  # @option opts [VerifoneP400] :verifone_p400
  # @return [TerminalConfiguration]
  describe "post_terminal_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_configurations_configuration
  # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [PostTerminalConfigurationsConfigurationRequestBbposWiseposE] :bbpos_wisepos_e
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostTerminalConfigurationsRequestTipping] :tipping
  # @option opts [PostTerminalConfigurationsConfigurationRequestVerifoneP400] :verifone_p400
  # @return [GetTerminalConfigurationsConfiguration200Response]
  describe "post_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_connection_tokens
  # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :location The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens).
  # @return [TerminalConnectionToken]
  describe "post_terminal_connection_tokens test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_locations
  # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
  # @param address
  # @param display_name A name for the location.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :configuration_overrides The ID of a configuration that will be used to customize all readers in this location.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [TerminalLocation]
  describe "post_terminal_locations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_locations_location
  # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @option opts [OptionalFieldsAddress] :address
  # @option opts [String] :configuration_overrides The ID of a configuration that will be used to customize all readers in this location.
  # @option opts [String] :display_name A name for the location.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [GetTerminalLocationsLocation200Response]
  describe "post_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers
  # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param registration_code A code generated by the reader used for registering to an account.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :label Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
  # @option opts [String] :location The location to assign the reader to.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [TerminalReader]
  describe "post_terminal_readers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader
  # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :label The new label of the reader.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [GetTerminalReadersReader200Response]
  describe "post_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_cancel_action
  # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_cancel_action test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_process_payment_intent
  # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
  # @param reader
  # @param payment_intent PaymentIntent ID
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [ProcessConfig] :process_config
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_process_payment_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_process_setup_intent
  # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
  # @param reader
  # @param customer_consent_collected Customer Consent Collected
  # @param setup_intent SetupIntent ID
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_process_setup_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_set_reader_display
  # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
  # @param reader
  # @param _type Type
  # @param [Hash] opts the optional parameters
  # @option opts [Cart] :cart
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_set_reader_display test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
