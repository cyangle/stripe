#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::TerminalApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "TerminalApi" do
  describe "test an instance of TerminalApi" do
    it "should create an instance of TerminalApi" do
      api_instance = Stripe::TerminalApi.new
      api_instance.should be_a(Stripe::TerminalApi)
    end
  end

  # unit tests for delete_terminal_configurations_configuration
  # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalConfiguration]
  describe "delete_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_terminal_locations_location
  # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalLocation]
  describe "delete_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_terminal_readers_reader
  # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalReader]
  describe "delete_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_configurations
  # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :is_account_default if present, only return the account default or non-default configurations.
  # @return [TerminalConfigurationConfigurationList]
  describe "get_terminal_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_configurations_configuration
  # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalConfigurationsConfiguration200Response]
  describe "get_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_locations
  # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalLocationLocationList]
  describe "get_terminal_locations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_locations_location
  # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalLocationsLocation200Response]
  describe "get_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_readers
  # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :location A location ID to filter the response list to only readers at the specific location
  # @option opts [String] :status A status filter to filter readers to only offline or online readers
  # @option opts [String] :device_type Filters readers by device type
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalReaderRetrieveReader]
  describe "get_terminal_readers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_readers_reader
  # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalReadersReader200Response]
  describe "get_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_configurations
  # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostTerminalConfigurationsRequest] :post_terminal_configurations_request
  # @return [TerminalConfiguration]
  describe "post_terminal_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_configurations_configuration
  # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [PostTerminalConfigurationsConfigurationRequest] :post_terminal_configurations_configuration_request
  # @return [GetTerminalConfigurationsConfiguration200Response]
  describe "post_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_connection_tokens
  # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostTerminalConnectionTokensRequest] :post_terminal_connection_tokens_request
  # @return [TerminalConnectionToken]
  describe "post_terminal_connection_tokens test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_locations
  # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
  # @param post_terminal_locations_request
  # @param [Hash] opts the optional parameters
  # @return [TerminalLocation]
  describe "post_terminal_locations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_locations_location
  # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @option opts [PostTerminalLocationsLocationRequest] :post_terminal_locations_location_request
  # @return [GetTerminalLocationsLocation200Response]
  describe "post_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers
  # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param post_terminal_readers_request
  # @param [Hash] opts the optional parameters
  # @return [TerminalReader]
  describe "post_terminal_readers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader
  # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [PostTerminalReadersReaderRequest] :post_terminal_readers_reader_request
  # @return [GetTerminalReadersReader200Response]
  describe "post_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_cancel_action
  # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [PostAccountsAccountLoginLinksRequest] :post_accounts_account_login_links_request
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_cancel_action test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_process_payment_intent
  # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
  # @param reader
  # @param post_terminal_readers_reader_process_payment_intent_request
  # @param [Hash] opts the optional parameters
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_process_payment_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_process_setup_intent
  # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
  # @param reader
  # @param post_terminal_readers_reader_process_setup_intent_request
  # @param [Hash] opts the optional parameters
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_process_setup_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_set_reader_display
  # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
  # @param reader
  # @param post_terminal_readers_reader_set_reader_display_request
  # @param [Hash] opts the optional parameters
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_set_reader_display test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
