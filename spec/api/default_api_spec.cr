#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "DefaultApi" do
  describe "test an instance of DefaultApi" do
    it "should create an instance of DefaultApi" do
      api_instance = Stripe::DefaultApi.new
      api_instance.should be_a(Stripe::DefaultApi)
    end
  end

  # unit tests for delete_accounts_account
  # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can delete accounts you manage.&lt;/p&gt;  &lt;p&gt;Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.&lt;/p&gt;  &lt;p&gt;If you want to delete your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;account information tab in your account settings&lt;/a&gt; instead.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @return [DeletedAccount]
  describe "delete_accounts_account test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_accounts_account_external_accounts_id
  # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
  # @param account
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [DeletedExternalAccount]
  describe "delete_accounts_account_external_accounts_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_accounts_account_persons_person
  # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
  # @param account
  # @param person
  # @param [Hash] opts the optional parameters
  # @return [DeletedPerson]
  describe "delete_accounts_account_persons_person test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_coupons_coupon
  # &lt;p&gt;You can delete coupons via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.&lt;/p&gt;
  # @param coupon
  # @param [Hash] opts the optional parameters
  # @return [DeletedCoupon]
  describe "delete_coupons_coupon test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer
  # &lt;p&gt;Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @return [DeletedCustomer]
  describe "delete_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_discount
  # &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @return [DeletedDiscount]
  describe "delete_customers_customer_discount test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_sources_id
  # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [DeleteCustomersCustomerSourcesId200Response]
  describe "delete_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_customers_customer_tax_ids_id
  # &lt;p&gt;Deletes an existing &lt;code&gt;TaxID&lt;/code&gt; object.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [DeletedTaxId]
  describe "delete_customers_customer_tax_ids_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_invoiceitems_invoiceitem
  # &lt;p&gt;Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.&lt;/p&gt;
  # @param invoiceitem
  # @param [Hash] opts the optional parameters
  # @return [DeletedInvoiceitem]
  describe "delete_invoiceitems_invoiceitem test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_invoices_invoice
  # &lt;p&gt;Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be &lt;a href&#x3D;\&quot;#void_invoice\&quot;&gt;voided&lt;/a&gt;.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @return [DeletedInvoice]
  describe "delete_invoices_invoice test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_products_id
  # &lt;p&gt;Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with &lt;code&gt;type&#x3D;good&lt;/code&gt; is only possible if it has no SKUs associated with it.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [DeletedProduct]
  describe "delete_products_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_radar_value_list_items_item
  # &lt;p&gt;Deletes a &lt;code&gt;ValueListItem&lt;/code&gt; object, removing it from its parent value list.&lt;/p&gt;
  # @param item
  # @param [Hash] opts the optional parameters
  # @return [DeletedRadarValueListItem]
  describe "delete_radar_value_list_items_item test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_radar_value_lists_value_list
  # &lt;p&gt;Deletes a &lt;code&gt;ValueList&lt;/code&gt; object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.&lt;/p&gt;
  # @param value_list
  # @param [Hash] opts the optional parameters
  # @return [DeletedRadarValueList]
  describe "delete_radar_value_lists_value_list test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_skus_id
  # &lt;p&gt;Delete a SKU. Deleting a SKU is only possible until it has been used in an order.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @return [DeletedSku]
  describe "delete_skus_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_subscription_items_item
  # &lt;p&gt;Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.&lt;/p&gt;
  # @param item
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :clear_usage Delete all usage for the given subscription item. Allowed only when the current plan&#39;s &#x60;usage_type&#x60; is &#x60;metered&#x60;.
  # @option opts [String] :proration_behavior Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting &#x60;billing_cycle_anchor&#x3D;now&#x60;, or starting a trial), or if an item&#39;s &#x60;quantity&#x60; changes.
  # @option opts [Int32] :proration_date If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
  # @return [DeletedSubscriptionItem]
  describe "delete_subscription_items_item test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_subscriptions_subscription_exposed_id
  # &lt;p&gt;Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.&lt;/p&gt;  &lt;p&gt;Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
  # @param subscription_exposed_id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :invoice_now Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items.
  # @option opts [Bool] :prorate Will generate a proration invoice item that credits remaining unused time until the subscription period end.
  # @return [Subscription]
  describe "delete_subscriptions_subscription_exposed_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_subscriptions_subscription_exposed_id_discount
  # &lt;p&gt;Removes the currently applied discount on a subscription.&lt;/p&gt;
  # @param subscription_exposed_id
  # @param [Hash] opts the optional parameters
  # @return [DeletedDiscount]
  describe "delete_subscriptions_subscription_exposed_id_discount test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_terminal_configurations_configuration
  # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalConfiguration]
  describe "delete_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_terminal_locations_location
  # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalLocation]
  describe "delete_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_terminal_readers_reader
  # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @return [DeletedTerminalReader]
  describe "delete_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_test_helpers_test_clocks_test_clock
  # &lt;p&gt;Deletes a test clock.&lt;/p&gt;
  # @param test_clock
  # @param [Hash] opts the optional parameters
  # @return [DeletedTestHelpersTestClock]
  describe "delete_test_helpers_test_clocks_test_clock test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_webhook_endpoints_webhook_endpoint
  # &lt;p&gt;You can also delete webhook endpoints via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhook endpoint management&lt;/a&gt; page of the Stripe dashboard.&lt;/p&gt;
  # @param webhook_endpoint
  # @param [Hash] opts the optional parameters
  # @return [DeletedWebhookEndpoint]
  describe "delete_webhook_endpoints_webhook_endpoint test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_accounts
  # &lt;p&gt;Returns a list of accounts connected to your platform via &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;. If you’re not a platform, the list is empty.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [AccountList]
  describe "get_accounts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_accounts_account
  # &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Account]
  describe "get_accounts_account test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_accounts_account_capabilities
  # &lt;p&gt;Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ListAccountCapability]
  describe "get_accounts_account_capabilities test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_accounts_account_capabilities_capability
  # &lt;p&gt;Retrieves information about the specified Account Capability.&lt;/p&gt;
  # @param account
  # @param capability
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Capability]
  describe "get_accounts_account_capabilities_capability test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_accounts_account_external_accounts
  # &lt;p&gt;List external accounts for an account.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [ExternalAccountList]
  describe "get_accounts_account_external_accounts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_accounts_account_external_accounts_id
  # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
  # @param account
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ExternalAccount]
  describe "get_accounts_account_external_accounts_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_accounts_account_persons
  # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [AllPeopleRelationshipSpecs] :relationship Filters on the list of people returned based on the person&#39;s relationship to the account&#39;s company.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PersonList]
  describe "get_accounts_account_persons test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_accounts_account_persons_person
  # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
  # @param account
  # @param person
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Person]
  describe "get_accounts_account_persons_person test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_application_fees
  # &lt;p&gt;Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :charge Only return application fees for the charge specified by this charge ID.
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PlatformEarningList]
  describe "get_application_fees test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_application_fees_fee_refunds_id
  # &lt;p&gt;By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.&lt;/p&gt;
  # @param fee
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [FeeRefund]
  describe "get_application_fees_fee_refunds_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_application_fees_id
  # &lt;p&gt;Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ApplicationFee]
  describe "get_application_fees_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_application_fees_id_refunds
  # &lt;p&gt;You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional refunds.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [FeeRefundList]
  describe "get_application_fees_id_refunds test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_apps_secrets
  # &lt;p&gt;List all secrets stored on the given scope.&lt;/p&gt;
  # @param scope Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [SecretServiceResourceSecretList]
  describe "get_apps_secrets test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_apps_secrets_find
  # &lt;p&gt;Finds a secret in the secret store by name and scope.&lt;/p&gt;
  # @param name A name for the secret that&#39;s unique within the scope.
  # @param scope Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [AppsSecret]
  describe "get_apps_secrets_find test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_balance
  # &lt;p&gt;Retrieves the current account balance, based on the authentication that was used to make the request.  For a sample request, see &lt;a href&#x3D;\&quot;/docs/connect/account-balances#accounting-for-negative-balances\&quot;&gt;Accounting for negative balances&lt;/a&gt;.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Balance]
  describe "get_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_balance_transactions
  # &lt;p&gt;Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.&lt;/p&gt;  &lt;p&gt;Note that this endpoint was previously called “Balance history” and used the path &lt;code&gt;/v1/balance/history&lt;/code&gt;.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :currency Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :payout For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.
  # @option opts [String] :source Only returns the original transaction.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :_type Only returns transactions of the given type. One of: &#x60;adjustment&#x60;, &#x60;advance&#x60;, &#x60;advance_funding&#x60;, &#x60;anticipation_repayment&#x60;, &#x60;application_fee&#x60;, &#x60;application_fee_refund&#x60;, &#x60;charge&#x60;, &#x60;connect_collection_transfer&#x60;, &#x60;contribution&#x60;, &#x60;issuing_authorization_hold&#x60;, &#x60;issuing_authorization_release&#x60;, &#x60;issuing_dispute&#x60;, &#x60;issuing_transaction&#x60;, &#x60;payment&#x60;, &#x60;payment_failure_refund&#x60;, &#x60;payment_refund&#x60;, &#x60;payout&#x60;, &#x60;payout_cancel&#x60;, &#x60;payout_failure&#x60;, &#x60;refund&#x60;, &#x60;refund_failure&#x60;, &#x60;reserve_transaction&#x60;, &#x60;reserved_funds&#x60;, &#x60;stripe_fee&#x60;, &#x60;stripe_fx_fee&#x60;, &#x60;tax_fee&#x60;, &#x60;topup&#x60;, &#x60;topup_reversal&#x60;, &#x60;transfer&#x60;, &#x60;transfer_cancel&#x60;, &#x60;transfer_failure&#x60;, or &#x60;transfer_refund&#x60;.
  # @return [BalanceTransactionsList]
  describe "get_balance_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_balance_transactions_id
  # &lt;p&gt;Retrieves the balance transaction with the given ID.&lt;/p&gt;  &lt;p&gt;Note that this endpoint previously used the path &lt;code&gt;/v1/balance/history/:id&lt;/code&gt;.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [BalanceTransaction]
  describe "get_balance_transactions_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_billing_portal_configurations
  # &lt;p&gt;Returns a list of configurations that describe the functionality of the customer portal.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Only return configurations that are active or inactive (e.g., pass &#x60;true&#x60; to only list active configurations).
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :is_default Only return the default or non-default configurations (e.g., pass &#x60;true&#x60; to only list the default configuration).
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PortalConfigurationList]
  describe "get_billing_portal_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_billing_portal_configurations_configuration
  # &lt;p&gt;Retrieves a configuration that describes the functionality of the customer portal.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [BillingPortalConfiguration]
  describe "get_billing_portal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_charges
  # &lt;p&gt;Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :customer Only return charges for the customer specified by this customer ID.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :payment_intent Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :transfer_group Only return charges for this transfer group.
  # @return [ChargeList]
  describe "get_charges test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_charges_charge
  # &lt;p&gt;Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.&lt;/p&gt;
  # @param charge
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Charge]
  describe "get_charges_charge test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_charges_search
  # &lt;p&gt;Search for charges you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @return [SearchResult]
  describe "get_charges_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_checkout_sessions
  # &lt;p&gt;Returns a list of Checkout Sessions.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer Only return the Checkout Sessions for the Customer specified.
  # @option opts [CustomerDetailsParams] :customer_details Only return the Checkout Sessions for the Customer details specified.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :payment_intent Only return the Checkout Session for the PaymentIntent specified.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :subscription Only return the Checkout Session for the subscription specified.
  # @return [PaymentPagesCheckoutSessionList]
  describe "get_checkout_sessions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_checkout_sessions_session
  # &lt;p&gt;Retrieves a Session object.&lt;/p&gt;
  # @param session
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CheckoutSession]
  describe "get_checkout_sessions_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_checkout_sessions_session_line_items
  # &lt;p&gt;When retrieving a Checkout Session, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  # @param session
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PaymentPagesCheckoutSessionListLineItems]
  describe "get_checkout_sessions_session_line_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_country_specs
  # &lt;p&gt;Lists all Country Spec objects available in the API.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [CountrySpecList]
  describe "get_country_specs test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_country_specs_country
  # &lt;p&gt;Returns a Country Spec for a given Country code.&lt;/p&gt;
  # @param country
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CountrySpec]
  describe "get_country_specs_country test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_coupons
  # &lt;p&gt;Returns a list of your coupons.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [CouponsResourceCouponList]
  describe "get_coupons test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_coupons_coupon
  # &lt;p&gt;Retrieves the coupon with the given ID.&lt;/p&gt;
  # @param coupon
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Coupon]
  describe "get_coupons_coupon test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_credit_notes
  # &lt;p&gt;Returns a list of credit notes.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer Only return credit notes for the customer specified by this customer ID.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :invoice Only return credit notes for the invoice specified by this invoice ID.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [CreditNotesList]
  describe "get_credit_notes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_credit_notes_credit_note_lines
  # &lt;p&gt;When retrieving a credit note, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  # @param credit_note
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [CreditNoteLinesList]
  describe "get_credit_notes_credit_note_lines test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_credit_notes_id
  # &lt;p&gt;Retrieves the credit note object with the given identifier.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CreditNote]
  describe "get_credit_notes_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_credit_notes_preview
  # &lt;p&gt;Get a preview of a credit note without creating it.&lt;/p&gt;
  # @param invoice ID of the invoice.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The integer amount in cents (or local equivalent) representing the total amount of the credit note.
  # @option opts [Int32] :credit_amount The integer amount in cents (or local equivalent) representing the amount to credit the customer&#39;s balance, which will be automatically applied to their next invoice.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(CreditNoteLineItemParams)] :lines Line items that make up the credit note.
  # @option opts [String] :memo The credit note&#39;s memo appears on the credit note PDF.
  # @option opts [Hash(String, String)] :metadata Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to &#x60;metadata&#x60;.
  # @option opts [Int32] :out_of_band_amount The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
  # @option opts [String] :reason Reason for issuing this credit note, one of &#x60;duplicate&#x60;, &#x60;fraudulent&#x60;, &#x60;order_change&#x60;, or &#x60;product_unsatisfactory&#x60;
  # @option opts [String] :refund ID of an existing refund to link this credit note to.
  # @option opts [Int32] :refund_amount The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
  # @return [CreditNote]
  describe "get_credit_notes_preview test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_credit_notes_preview_lines
  # &lt;p&gt;When retrieving a credit note preview, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  # @param invoice ID of the invoice.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The integer amount in cents (or local equivalent) representing the total amount of the credit note.
  # @option opts [Int32] :credit_amount The integer amount in cents (or local equivalent) representing the amount to credit the customer&#39;s balance, which will be automatically applied to their next invoice.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(CreditNoteLineItemParams)] :lines Line items that make up the credit note.
  # @option opts [String] :memo The credit note&#39;s memo appears on the credit note PDF.
  # @option opts [Hash(String, String)] :metadata Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to &#x60;metadata&#x60;.
  # @option opts [Int32] :out_of_band_amount The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
  # @option opts [String] :reason Reason for issuing this credit note, one of &#x60;duplicate&#x60;, &#x60;fraudulent&#x60;, &#x60;order_change&#x60;, or &#x60;product_unsatisfactory&#x60;
  # @option opts [String] :refund ID of an existing refund to link this credit note to.
  # @option opts [Int32] :refund_amount The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [CreditNoteLinesList]
  describe "get_credit_notes_preview_lines test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers
  # &lt;p&gt;Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :email A case-sensitive filter on the list based on the customer&#39;s &#x60;email&#x60; field. The value must be a string.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :test_clock Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set.
  # @return [CustomerResourceCustomerList]
  describe "get_customers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer
  # &lt;p&gt;Retrieves a Customer object.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetCustomersCustomer200Response]
  describe "get_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_balance_transactions
  # &lt;p&gt;Returns a list of transactions that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [CustomerBalanceTransactionList]
  describe "get_customers_customer_balance_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_balance_transactions_transaction
  # &lt;p&gt;Retrieves a specific customer balance transaction that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CustomerBalanceTransaction]
  describe "get_customers_customer_balance_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_cash_balance
  # &lt;p&gt;Retrieves a customer’s cash balance.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CashBalance]
  describe "get_customers_customer_cash_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_discount
  #
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Discount]
  describe "get_customers_customer_discount test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_payment_methods
  # &lt;p&gt;Returns a list of PaymentMethods for a given Customer&lt;/p&gt;
  # @param customer
  # @param _type A required filter on the list, based on the object &#x60;type&#x60; field.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [CustomerPaymentMethodResourceList]
  describe "get_customers_customer_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_payment_methods_payment_method
  # &lt;p&gt;Retrieves a PaymentMethod object for a given Customer.&lt;/p&gt;
  # @param customer
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "get_customers_customer_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_sources
  # &lt;p&gt;List sources for a specified customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :object Filter sources according to a particular object type.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [ApmsSourcesSourceList]
  describe "get_customers_customer_sources test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_sources_id
  # &lt;p&gt;Retrieve a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentSource]
  describe "get_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_tax_ids
  # &lt;p&gt;Returns a list of tax IDs for a customer.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [TaxIDsList]
  describe "get_customers_customer_tax_ids test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_customer_tax_ids_id
  # &lt;p&gt;Retrieves the &lt;code&gt;TaxID&lt;/code&gt; object with the given identifier.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TaxId]
  describe "get_customers_customer_tax_ids_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_customers_search
  # &lt;p&gt;Search for customers you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers).
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @return [SearchResult]
  describe "get_customers_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_disputes
  # &lt;p&gt;Returns a list of your disputes.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :charge Only return disputes associated to the charge specified by this charge ID.
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :payment_intent Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [DisputeList]
  describe "get_disputes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_disputes_dispute
  # &lt;p&gt;Retrieves the dispute with the given ID.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Dispute]
  describe "get_disputes_dispute test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_events
  # &lt;p&gt;List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in &lt;a href&#x3D;\&quot;/docs/api/events/object\&quot;&gt;event object&lt;/a&gt; &lt;code&gt;api_version&lt;/code&gt; attribute (not according to your current Stripe API version or &lt;code&gt;Stripe-Version&lt;/code&gt; header).&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [Bool] :delivery_success Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :_type A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property.
  # @option opts [Array(String)] :types An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either &#x60;type&#x60; or &#x60;types&#x60;, but not both.
  # @return [NotificationEventList]
  describe "get_events test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_events_id
  # &lt;p&gt;Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Event]
  describe "get_events_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_exchange_rates
  # &lt;p&gt;Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include &#x60;starting_after&#x3D;X&#x60; in order to fetch the next page of the list.
  # @return [ExchangeRateList]
  describe "get_exchange_rates test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_exchange_rates_rate_id
  # &lt;p&gt;Retrieves the exchange rates from the given currency to every supported currency.&lt;/p&gt;
  # @param rate_id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ExchangeRate]
  describe "get_exchange_rates_rate_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_file_links
  # &lt;p&gt;Returns a list of file links.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :expired Filter links by their expiration status. By default, all links are returned.
  # @option opts [String] :file Only return links for the given file.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [FileFileLinkList]
  describe "get_file_links test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_file_links_link
  # &lt;p&gt;Retrieves the file link with the given ID.&lt;/p&gt;
  # @param link
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [FileLink]
  describe "get_file_links_link test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_files
  # &lt;p&gt;Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :purpose The file purpose to filter queries by. If none is provided, files will not be filtered by purpose.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [FileFileList]
  describe "get_files test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_files_file
  # &lt;p&gt;Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the &lt;a href&#x3D;\&quot;/docs/file-upload#download-file-contents\&quot;&gt;File Upload Guide&lt;/a&gt;.&lt;/p&gt;
  # @param file
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [::File]
  describe "get_files_file test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_financial_connections_accounts
  # &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [AccountholderParams] :account_holder If present, only return accounts that belong to the specified account holder. &#x60;account_holder[customer]&#x60; and &#x60;account_holder[account]&#x60; are mutually exclusive.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :session If present, only return accounts that were collected as part of the given session.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [BankConnectionsResourceLinkedAccountList]
  describe "get_financial_connections_accounts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_financial_connections_accounts_account
  # &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [FinancialConnectionsAccount]
  describe "get_financial_connections_accounts_account test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_financial_connections_sessions_session
  # &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
  # @param session
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [FinancialConnectionsSession]
  describe "get_financial_connections_sessions_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_identity_verification_reports
  # &lt;p&gt;List all verification reports.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :_type Only return VerificationReports of this type
  # @option opts [String] :verification_session Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.
  # @return [GelatoVerificationReportList]
  describe "get_identity_verification_reports test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_identity_verification_reports_report
  # &lt;p&gt;Retrieves an existing VerificationReport&lt;/p&gt;
  # @param report
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IdentityVerificationReport]
  describe "get_identity_verification_reports_report test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_identity_verification_sessions
  # &lt;p&gt;Returns a list of VerificationSessions&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
  # @return [GelatoVerificationSessionList]
  describe "get_identity_verification_sessions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_identity_verification_sessions_session
  # &lt;p&gt;Retrieves the details of a VerificationSession that was previously created.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to retrieve a valid &lt;code&gt;client_secret&lt;/code&gt; or &lt;code&gt;url&lt;/code&gt; to allow re-submission.&lt;/p&gt;
  # @param session
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IdentityVerificationSession]
  describe "get_identity_verification_sessions_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoiceitems
  # &lt;p&gt;Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :customer The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :invoice Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Bool] :pending Set to &#x60;true&#x60; to only show pending invoice items, which are not yet attached to any invoices. Set to &#x60;false&#x60; to only show invoice items already attached to invoices. If unspecified, no filter is applied.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [InvoicesItemsList]
  describe "get_invoiceitems test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoiceitems_invoiceitem
  # &lt;p&gt;Retrieves the invoice item with the given ID.&lt;/p&gt;
  # @param invoiceitem
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Invoiceitem]
  describe "get_invoiceitems_invoiceitem test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoices
  # &lt;p&gt;You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :collection_method The collection method of the invoice to retrieve. Either &#x60;charge_automatically&#x60; or &#x60;send_invoice&#x60;.
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :customer Only return invoices for the customer specified by this customer ID.
  # @option opts [GetAccountsCreatedParameter] :due_date
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status The status of the invoice, one of &#x60;draft&#x60;, &#x60;open&#x60;, &#x60;paid&#x60;, &#x60;uncollectible&#x60;, or &#x60;void&#x60;. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
  # @option opts [String] :subscription Only return invoices for the subscription specified by this subscription ID.
  # @return [InvoicesList]
  describe "get_invoices test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoices_invoice
  # &lt;p&gt;Retrieves the invoice with the given ID.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Invoice]
  describe "get_invoices_invoice test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoices_invoice_lines
  # &lt;p&gt;When retrieving an invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [InvoiceLinesList]
  describe "get_invoices_invoice_lines test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoices_search
  # &lt;p&gt;Search for invoices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @return [SearchResult]
  describe "get_invoices_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoices_upcoming
  # &lt;p&gt;At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.&lt;/p&gt;  &lt;p&gt;Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.&lt;/p&gt;  &lt;p&gt;You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a &lt;code&gt;proration_date&lt;/code&gt; parameter when doing the actual subscription update. The value passed in should be the same as the &lt;code&gt;subscription_proration_date&lt;/code&gt; returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where &lt;code&gt;period[start]&lt;/code&gt; is equal to the &lt;code&gt;subscription_proration_date&lt;/code&gt; on the upcoming invoice resource.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [AutomaticTaxParam] :automatic_tax Settings for automatic tax lookup for this invoice preview.
  # @option opts [String] :coupon The code of the coupon to apply. If &#x60;subscription&#x60; or &#x60;subscription_items&#x60; is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer&#39;s subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
  # @option opts [String] :currency The currency to preview this invoice in. Defaults to that of &#x60;customer&#x60; if not specified.
  # @option opts [String] :customer The identifier of the customer whose upcoming invoice you&#39;d like to retrieve.
  # @option opts [CustomerDetailsParam] :customer_details Details about the customer you want to invoice or overrides for an existing customer.
  # @option opts [GetInvoicesUpcomingDiscountsParameter] :discounts The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the &#x60;coupon&#x60; parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn&#39;t been created, use &#x60;coupon&#x60; instead.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(InvoiceItemPreviewParams)] :invoice_items List of invoice items to add or update in the upcoming invoice preview.
  # @option opts [String] :schedule The identifier of the unstarted schedule whose upcoming invoice you&#39;d like to retrieve. Cannot be used with subscription or subscription fields.
  # @option opts [String] :subscription The identifier of the subscription for which you&#39;d like to retrieve the upcoming invoice. If not provided, but a &#x60;subscription_items&#x60; is provided, you will preview creating a subscription with those items. If neither &#x60;subscription&#x60; nor &#x60;subscription_items&#x60; is provided, you will retrieve the next upcoming invoice from among the customer&#39;s subscriptions.
  # @option opts [GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter] :subscription_billing_cycle_anchor For new subscriptions, a future timestamp to anchor the subscription&#39;s [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with &#x60;month&#x60; or &#x60;year&#x60; intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to &#x60;now&#x60; or &#x60;unchanged&#x60;.
  # @option opts [GetInvoicesUpcomingSubscriptionCancelAtParameter] :subscription_cancel_at Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using &#x60;proration_behavior&#x60;.
  # @option opts [Bool] :subscription_cancel_at_period_end Boolean indicating whether this subscription should cancel at the end of the current period.
  # @option opts [Bool] :subscription_cancel_now This simulates the subscription being canceled or expired immediately.
  # @option opts [GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter] :subscription_default_tax_rates If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have &#x60;tax_rates&#x60; set.
  # @option opts [Array(SubscriptionItemUpdateParams)] :subscription_items A list of up to 20 subscription items, each with an attached price.
  # @option opts [String] :subscription_proration_behavior Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting &#x60;billing_cycle_anchor&#x3D;now&#x60;, or starting a trial), or if an item&#39;s &#x60;quantity&#x60; changes.
  # @option opts [Int32] :subscription_proration_date If previewing an update to a subscription, and doing proration, &#x60;subscription_proration_date&#x60; forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, &#x60;subscription&#x60;, and one of &#x60;subscription_items&#x60;, or &#x60;subscription_trial_end&#x60; are required. Also, &#x60;subscription_proration_behavior&#x60; cannot be set to &#39;none&#39;.
  # @option opts [Int32] :subscription_start_date Date a subscription is intended to start (can be future or past)
  # @option opts [GetInvoicesUpcomingSubscriptionTrialEndParameter] :subscription_trial_end If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of &#x60;subscription_items&#x60; or &#x60;subscription&#x60; is required.
  # @option opts [Bool] :subscription_trial_from_plan Indicates if a plan&#39;s &#x60;trial_period_days&#x60; should be applied to the subscription. Setting &#x60;subscription_trial_end&#x60; per subscription is preferred, and this defaults to &#x60;false&#x60;. Setting this flag to &#x60;true&#x60; together with &#x60;subscription_trial_end&#x60; is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  # @return [Invoice]
  describe "get_invoices_upcoming test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_invoices_upcoming_lines
  # &lt;p&gt;When retrieving an upcoming invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [AutomaticTaxParam] :automatic_tax Settings for automatic tax lookup for this invoice preview.
  # @option opts [String] :coupon The code of the coupon to apply. If &#x60;subscription&#x60; or &#x60;subscription_items&#x60; is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer&#39;s subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
  # @option opts [String] :currency The currency to preview this invoice in. Defaults to that of &#x60;customer&#x60; if not specified.
  # @option opts [String] :customer The identifier of the customer whose upcoming invoice you&#39;d like to retrieve.
  # @option opts [CustomerDetailsParam] :customer_details Details about the customer you want to invoice or overrides for an existing customer.
  # @option opts [GetInvoicesUpcomingDiscountsParameter] :discounts The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the &#x60;coupon&#x60; parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn&#39;t been created, use &#x60;coupon&#x60; instead.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(InvoiceItemPreviewParams)] :invoice_items List of invoice items to add or update in the upcoming invoice preview.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :schedule The identifier of the unstarted schedule whose upcoming invoice you&#39;d like to retrieve. Cannot be used with subscription or subscription fields.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :subscription The identifier of the subscription for which you&#39;d like to retrieve the upcoming invoice. If not provided, but a &#x60;subscription_items&#x60; is provided, you will preview creating a subscription with those items. If neither &#x60;subscription&#x60; nor &#x60;subscription_items&#x60; is provided, you will retrieve the next upcoming invoice from among the customer&#39;s subscriptions.
  # @option opts [GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter] :subscription_billing_cycle_anchor For new subscriptions, a future timestamp to anchor the subscription&#39;s [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with &#x60;month&#x60; or &#x60;year&#x60; intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to &#x60;now&#x60; or &#x60;unchanged&#x60;.
  # @option opts [GetInvoicesUpcomingSubscriptionCancelAtParameter] :subscription_cancel_at Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using &#x60;proration_behavior&#x60;.
  # @option opts [Bool] :subscription_cancel_at_period_end Boolean indicating whether this subscription should cancel at the end of the current period.
  # @option opts [Bool] :subscription_cancel_now This simulates the subscription being canceled or expired immediately.
  # @option opts [GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter] :subscription_default_tax_rates If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have &#x60;tax_rates&#x60; set.
  # @option opts [Array(SubscriptionItemUpdateParams)] :subscription_items A list of up to 20 subscription items, each with an attached price.
  # @option opts [String] :subscription_proration_behavior Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting &#x60;billing_cycle_anchor&#x3D;now&#x60;, or starting a trial), or if an item&#39;s &#x60;quantity&#x60; changes.
  # @option opts [Int32] :subscription_proration_date If previewing an update to a subscription, and doing proration, &#x60;subscription_proration_date&#x60; forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, &#x60;subscription&#x60;, and one of &#x60;subscription_items&#x60;, or &#x60;subscription_trial_end&#x60; are required. Also, &#x60;subscription_proration_behavior&#x60; cannot be set to &#39;none&#39;.
  # @option opts [Int32] :subscription_start_date Date a subscription is intended to start (can be future or past)
  # @option opts [GetInvoicesUpcomingSubscriptionTrialEndParameter] :subscription_trial_end If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of &#x60;subscription_items&#x60; or &#x60;subscription&#x60; is required.
  # @option opts [Bool] :subscription_trial_from_plan Indicates if a plan&#39;s &#x60;trial_period_days&#x60; should be applied to the subscription. Setting &#x60;subscription_trial_end&#x60; per subscription is preferred, and this defaults to &#x60;false&#x60;. Setting this flag to &#x60;true&#x60; together with &#x60;subscription_trial_end&#x60; is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  # @return [InvoiceLinesList]
  describe "get_invoices_upcoming_lines test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_authorizations
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :card Only return authorizations that belong to the given card.
  # @option opts [String] :cardholder Only return authorizations that belong to the given cardholder.
  # @option opts [GetAccountsCreatedParameter] :created Only return authorizations that were created during the given date interval.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return authorizations with the given status. One of &#x60;pending&#x60;, &#x60;closed&#x60;, or &#x60;reversed&#x60;.
  # @return [IssuingAuthorizationList]
  describe "get_issuing_authorizations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_authorizations_authorization
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
  # @param authorization
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingAuthorization]
  describe "get_issuing_authorizations_authorization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_cardholders
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created Only return cardholders that were created during the given date interval.
  # @option opts [String] :email Only return cardholders that have the given email address.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :phone_number Only return cardholders that have the given phone number.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return cardholders that have the given status. One of &#x60;active&#x60;, &#x60;inactive&#x60;, or &#x60;blocked&#x60;.
  # @option opts [String] :_type Only return cardholders that have the given type. One of &#x60;individual&#x60; or &#x60;company&#x60;.
  # @return [IssuingCardholderList]
  describe "get_issuing_cardholders test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_cardholders_cardholder
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
  # @param cardholder
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCardholder]
  describe "get_issuing_cardholders_cardholder test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_cards
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cardholder Only return cards belonging to the Cardholder with the provided ID.
  # @option opts [GetAccountsCreatedParameter] :created Only return cards that were issued during the given date interval.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Int32] :exp_month Only return cards that have the given expiration month.
  # @option opts [Int32] :exp_year Only return cards that have the given expiration year.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :last4 Only return cards that have the given last four digits.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return cards that have the given status. One of &#x60;active&#x60;, &#x60;inactive&#x60;, or &#x60;canceled&#x60;.
  # @option opts [String] :_type Only return cards that have the given type. One of &#x60;virtual&#x60; or &#x60;physical&#x60;.
  # @return [IssuingCardList]
  describe "get_issuing_cards test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_cards_card
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "get_issuing_cards_card test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_disputes
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created Select Issuing disputes that were created during the given date interval.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Select Issuing disputes with the given status.
  # @option opts [String] :transaction Select the Issuing dispute for the given transaction.
  # @return [IssuingDisputeList]
  describe "get_issuing_disputes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_disputes_dispute
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingDispute]
  describe "get_issuing_disputes_dispute test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_transactions
  # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :card Only return transactions that belong to the given card.
  # @option opts [String] :cardholder Only return transactions that belong to the given cardholder.
  # @option opts [GetAccountsCreatedParameter] :created Only return transactions that were created during the given date interval.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :_type Only return transactions that have the given type. One of &#x60;capture&#x60; or &#x60;refund&#x60;.
  # @return [IssuingTransactionList]
  describe "get_issuing_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_issuing_transactions_transaction
  # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingTransaction]
  describe "get_issuing_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_mandates_mandate
  # &lt;p&gt;Retrieves a Mandate object.&lt;/p&gt;
  # @param mandate
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Mandate]
  describe "get_mandates_mandate test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_orders
  # &lt;p&gt;Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer Only return orders for the given customer.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [OrdersV2ResourceOrderList]
  describe "get_orders test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_orders_id
  # &lt;p&gt;Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Order]
  describe "get_orders_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_intents
  # &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  # @option opts [String] :customer Only return PaymentIntents for the customer specified by this customer ID.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PaymentFlowsPaymentIntentList]
  describe "get_payment_intents test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_intents_intent
  # &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [String] :client_secret The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentIntent]
  describe "get_payment_intents_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_intents_search
  # &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @return [SearchResult]
  describe "get_payment_intents_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_links
  # &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Only return payment links that are active or inactive (e.g., pass &#x60;false&#x60; to list all inactive payment links).
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PaymentLinksResourcePaymentLinkList]
  describe "get_payment_links test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_links_payment_link
  # &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
  # @param payment_link
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentLink]
  describe "get_payment_links_payment_link test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_links_payment_link_line_items
  # &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  # @param payment_link
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PaymentLinksResourceListLineItems]
  describe "get_payment_links_payment_link_line_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_methods
  # &lt;p&gt;Returns a list of PaymentMethods attached to the StripeAccount. For listing a customer’s payment methods, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
  # @param _type A required filter on the list, based on the object &#x60;type&#x60; field.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer The ID of the customer whose PaymentMethods will be retrieved.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PaymentFlowsPaymentMethodList]
  describe "get_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_methods_payment_method
  # &lt;p&gt;Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer\&quot;&gt;Retrieve a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "get_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payouts
  # &lt;p&gt;Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :arrival_date
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :destination The ID of an external account - only return payouts sent to this external account.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return payouts that have the given status: &#x60;pending&#x60;, &#x60;paid&#x60;, &#x60;failed&#x60;, or &#x60;canceled&#x60;.
  # @return [PayoutList]
  describe "get_payouts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payouts_payout
  # &lt;p&gt;Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.&lt;/p&gt;
  # @param payout
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Payout]
  describe "get_payouts_payout test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_prices
  # &lt;p&gt;Returns a list of your prices.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Only return prices that are active or inactive (e.g., pass &#x60;false&#x60; to list all inactive prices).
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  # @option opts [String] :currency Only return prices for the given currency.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :lookup_keys Only return the price with these lookup_keys, if any exist.
  # @option opts [String] :product Only return prices for the given product.
  # @option opts [AllPricesRecurringParams] :recurring Only return prices with these recurring fields.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :_type Only return prices of type &#x60;recurring&#x60; or &#x60;one_time&#x60;.
  # @return [PriceList]
  describe "get_prices test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_prices_price
  # &lt;p&gt;Retrieves the price with the given ID.&lt;/p&gt;
  # @param price
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Price]
  describe "get_prices_price test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_prices_search
  # &lt;p&gt;Search for prices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @return [SearchResult]
  describe "get_prices_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_products
  # &lt;p&gt;Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Only return products that are active or inactive (e.g., pass &#x60;false&#x60; to list all inactive products).
  # @option opts [GetAccountsCreatedParameter] :created Only return products that were created during the given date interval.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(String)] :ids Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before).
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Bool] :shippable Only return products that can be shipped (i.e., physical, not digital products).
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :url Only return products with the given url.
  # @return [ProductList]
  describe "get_products test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_products_id
  # &lt;p&gt;Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Product]
  describe "get_products_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_products_search
  # &lt;p&gt;Search for products you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @return [SearchResult]
  describe "get_products_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_promotion_codes
  # &lt;p&gt;Returns a list of your promotion codes.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Filter promotion codes by whether they are active.
  # @option opts [String] :code Only return promotion codes that have this case-insensitive code.
  # @option opts [String] :coupon Only return promotion codes for this coupon.
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  # @option opts [String] :customer Only return promotion codes that are restricted to this customer.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PromotionCodesResourcePromotionCodeList]
  describe "get_promotion_codes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_promotion_codes_promotion_code
  # &lt;p&gt;Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing &lt;code&gt;code&lt;/code&gt; use &lt;a href&#x3D;\&quot;/docs/api/promotion_codes/list\&quot;&gt;list&lt;/a&gt; with the desired &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;
  # @param promotion_code
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PromotionCode]
  describe "get_promotion_codes_promotion_code test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_quotes
  # &lt;p&gt;Returns a list of your quotes.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer The ID of the customer whose quotes will be retrieved.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status The status of the quote.
  # @option opts [String] :test_clock Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set.
  # @return [QuotesResourceQuoteList]
  describe "get_quotes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_quotes_quote
  # &lt;p&gt;Retrieves the quote with the given ID.&lt;/p&gt;
  # @param quote
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Quote]
  describe "get_quotes_quote test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_quotes_quote_computed_upfront_line_items
  # &lt;p&gt;When retrieving a quote, there is an includable &lt;a href&#x3D;\&quot;https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items\&quot;&gt;&lt;strong&gt;computed.upfront.line_items&lt;/strong&gt;&lt;/a&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.&lt;/p&gt;
  # @param quote
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [QuotesResourceListLineItems]
  describe "get_quotes_quote_computed_upfront_line_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_quotes_quote_line_items
  # &lt;p&gt;When retrieving a quote, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  # @param quote
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [QuotesResourceListLineItems]
  describe "get_quotes_quote_line_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_quotes_quote_pdf
  # &lt;p&gt;Download the PDF for a finalized quote&lt;/p&gt;
  # @param quote
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [::File]
  describe "get_quotes_quote_pdf test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_radar_early_fraud_warnings
  # &lt;p&gt;Returns a list of early fraud warnings.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :charge Only return early fraud warnings for the charge specified by this charge ID.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :payment_intent Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [RadarEarlyFraudWarningList]
  describe "get_radar_early_fraud_warnings test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_radar_early_fraud_warnings_early_fraud_warning
  # &lt;p&gt;Retrieves the details of an early fraud warning that has previously been created. &lt;/p&gt;  &lt;p&gt;Please refer to the &lt;a href&#x3D;\&quot;#early_fraud_warning_object\&quot;&gt;early fraud warning&lt;/a&gt; object reference for more details.&lt;/p&gt;
  # @param early_fraud_warning
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [RadarEarlyFraudWarning]
  describe "get_radar_early_fraud_warnings_early_fraud_warning test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_radar_value_list_items
  # &lt;p&gt;Returns a list of &lt;code&gt;ValueListItem&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param value_list Identifier for the parent value list this item belongs to.
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :value Return items belonging to the parent list whose value matches the specified value (using an \&quot;is like\&quot; match).
  # @return [RadarListListItemList]
  describe "get_radar_value_list_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_radar_value_list_items_item
  # &lt;p&gt;Retrieves a &lt;code&gt;ValueListItem&lt;/code&gt; object.&lt;/p&gt;
  # @param item
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [RadarValueListItem]
  describe "get_radar_value_list_items_item test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_radar_value_lists
  # &lt;p&gt;Returns a list of &lt;code&gt;ValueList&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :_alias The alias used to reference the value list when writing rules.
  # @option opts [String] :contains A value contained within a value list - returns all value lists containing this value.
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [RadarListListList]
  describe "get_radar_value_lists test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_radar_value_lists_value_list
  # &lt;p&gt;Retrieves a &lt;code&gt;ValueList&lt;/code&gt; object.&lt;/p&gt;
  # @param value_list
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [RadarValueList]
  describe "get_radar_value_lists_value_list test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_refunds
  # &lt;p&gt;Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :charge Only return refunds for the charge specified by this charge ID.
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :payment_intent Only return refunds for the PaymentIntent specified by this ID.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [APIMethodRefundList]
  describe "get_refunds test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_refunds_refund
  # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
  # @param refund
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Refund]
  describe "get_refunds_refund test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_reporting_report_runs
  # &lt;p&gt;Returns a list of Report Runs, with the most recent appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [FinancialReportingFinanceReportRunList]
  describe "get_reporting_report_runs test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_reporting_report_runs_report_run
  # &lt;p&gt;Retrieves the details of an existing Report Run.&lt;/p&gt;
  # @param report_run
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ReportingReportRun]
  describe "get_reporting_report_runs_report_run test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_reporting_report_types
  # &lt;p&gt;Returns a full list of Report Types.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [FinancialReportingFinanceReportTypeList]
  describe "get_reporting_report_types test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_reporting_report_types_report_type
  # &lt;p&gt;Retrieves the details of a Report Type. (Certain report types require a &lt;a href&#x3D;\&quot;https://stripe.com/docs/keys#test-live-modes\&quot;&gt;live-mode API key&lt;/a&gt;.)&lt;/p&gt;
  # @param report_type
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ReportingReportType]
  describe "get_reporting_report_types_report_type test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_reviews
  # &lt;p&gt;Returns a list of &lt;code&gt;Review&lt;/code&gt; objects that have &lt;code&gt;open&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [RadarReviewList]
  describe "get_reviews test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_reviews_review
  # &lt;p&gt;Retrieves a &lt;code&gt;Review&lt;/code&gt; object.&lt;/p&gt;
  # @param review
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Review]
  describe "get_reviews_review test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_setup_attempts
  # &lt;p&gt;Returns a list of SetupAttempts associated with a provided SetupIntent.&lt;/p&gt;
  # @param setup_intent Only return SetupAttempts created by the SetupIntent specified by this ID.
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PaymentFlowsSetupIntentSetupAttemptList]
  describe "get_setup_attempts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_setup_intents
  # &lt;p&gt;Returns a list of SetupIntents.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :attach_to_self If present, the SetupIntent&#39;s payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  # @option opts [String] :customer Only return SetupIntents for the customer specified by this customer ID.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :payment_method Only return SetupIntents associated with the specified payment method.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [PaymentFlowsSetupIntentList]
  describe "get_setup_intents test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_setup_intents_intent
  # &lt;p&gt;Retrieves the details of a SetupIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#setup_intent_object\&quot;&gt;SetupIntent&lt;/a&gt; object reference for more details.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [String] :client_secret The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [SetupIntent]
  describe "get_setup_intents_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_shipping_rates
  # &lt;p&gt;Returns a list of your shipping rates.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Only return shipping rates that are active or inactive.
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  # @option opts [String] :currency Only return shipping rates for the given currency.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [ShippingResourcesShippingRateList]
  describe "get_shipping_rates test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_shipping_rates_shipping_rate_token
  # &lt;p&gt;Returns the shipping rate object with the given ID.&lt;/p&gt;
  # @param shipping_rate_token
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ShippingRate]
  describe "get_shipping_rates_shipping_rate_token test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sigma_scheduled_query_runs
  # &lt;p&gt;Returns a list of scheduled query runs.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [SigmaScheduledQueryRunList]
  describe "get_sigma_scheduled_query_runs test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sigma_scheduled_query_runs_scheduled_query_run
  # &lt;p&gt;Retrieves the details of an scheduled query run.&lt;/p&gt;
  # @param scheduled_query_run
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ScheduledQueryRun]
  describe "get_sigma_scheduled_query_runs_scheduled_query_run test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_skus
  # &lt;p&gt;Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Only return SKUs that are active or inactive (e.g., pass &#x60;false&#x60; to list all inactive products).
  # @option opts [Hash(String, String)] :attributes Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if &#x60;product&#x60; is also supplied. For instance, if the associated product has attributes &#x60;[\&quot;color\&quot;, \&quot;size\&quot;]&#x60;, passing in &#x60;attributes[color]&#x3D;red&#x60; returns all the SKUs for this product that have &#x60;color&#x60; set to &#x60;red&#x60;.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(String)] :ids Only return SKUs with the given IDs.
  # @option opts [Bool] :in_stock Only return SKUs that are either in stock or out of stock (e.g., pass &#x60;false&#x60; to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :product The ID of the product whose SKUs will be retrieved. Must be a product with type &#x60;good&#x60;.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [ProductsMethodSKUList]
  describe "get_skus test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_skus_id
  # &lt;p&gt;Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetSkusId200Response]
  describe "get_skus_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sources_source
  # &lt;p&gt;Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
  # @param source
  # @param [Hash] opts the optional parameters
  # @option opts [String] :client_secret The client secret of the source. Required if a publishable key is used to retrieve the source.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Source]
  describe "get_sources_source test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_subscription_items
  # &lt;p&gt;Returns a list of your subscription items for a given subscription.&lt;/p&gt;
  # @param subscription The ID of the subscription whose items will be retrieved.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [SubscriptionsItemsSubscriptionItemList]
  describe "get_subscription_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_subscription_items_item
  # &lt;p&gt;Retrieves the subscription item with the given ID.&lt;/p&gt;
  # @param item
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [SubscriptionItem]
  describe "get_subscription_items_item test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_subscription_items_subscription_item_usage_record_summaries
  # &lt;p&gt;For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).&lt;/p&gt;  &lt;p&gt;The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.&lt;/p&gt;
  # @param subscription_item
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [UsageEventsResourceUsageRecordSummaryList]
  describe "get_subscription_items_subscription_item_usage_record_summaries test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_subscription_schedules
  # &lt;p&gt;Retrieves the list of your subscription schedules.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :canceled_at Only return subscription schedules that were created canceled the given date interval.
  # @option opts [GetAccountsCreatedParameter] :completed_at Only return subscription schedules that completed during the given date interval.
  # @option opts [GetAccountsCreatedParameter] :created Only return subscription schedules that were created during the given date interval.
  # @option opts [String] :customer Only return subscription schedules for the given customer.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [GetAccountsCreatedParameter] :released_at Only return subscription schedules that were released during the given date interval.
  # @option opts [Bool] :scheduled Only return subscription schedules that have not started yet.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [SubscriptionSchedulesResourceScheduleList]
  describe "get_subscription_schedules test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_subscription_schedules_schedule
  # &lt;p&gt;Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.&lt;/p&gt;
  # @param schedule
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [SubscriptionSchedule]
  describe "get_subscription_schedules_schedule test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_subscriptions
  # &lt;p&gt;By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify &lt;code&gt;status&#x3D;canceled&lt;/code&gt;.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :collection_method The collection method of the subscriptions to retrieve. Either &#x60;charge_automatically&#x60; or &#x60;send_invoice&#x60;.
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [GetAccountsCreatedParameter] :current_period_end
  # @option opts [GetAccountsCreatedParameter] :current_period_start
  # @option opts [String] :customer The ID of the customer whose subscriptions will be retrieved.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :price Filter for subscriptions that contain this recurring price ID.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status The status of the subscriptions to retrieve. Passing in a value of &#x60;canceled&#x60; will return all canceled subscriptions, including those belonging to deleted customers. Pass &#x60;ended&#x60; to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of &#x60;all&#x60; will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.
  # @option opts [String] :test_clock Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set.
  # @return [SubscriptionsSubscriptionList]
  describe "get_subscriptions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_subscriptions_search
  # &lt;p&gt;Search for subscriptions you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  # @param query The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  # @return [SearchResult]
  describe "get_subscriptions_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_subscriptions_subscription_exposed_id
  # &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
  # @param subscription_exposed_id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Subscription]
  describe "get_subscriptions_subscription_exposed_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_tax_rates
  # &lt;p&gt;Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Optional flag to filter by tax rates that are either active or inactive (archived).
  # @option opts [GetAccountsCreatedParameter] :created Optional range for filtering created date.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :inclusive Optional flag to filter by tax rates that are inclusive (or those that are not inclusive).
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [TaxRatesList]
  describe "get_tax_rates test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_tax_rates_tax_rate
  # &lt;p&gt;Retrieves a tax rate with the given ID&lt;/p&gt;
  # @param tax_rate
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TaxRate]
  describe "get_tax_rates_tax_rate test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_configurations
  # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :is_account_default if present, only return the account default or non-default configurations.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [TerminalConfigurationConfigurationList]
  describe "get_terminal_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_configurations_configuration
  # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalConfigurationsConfiguration200Response]
  describe "get_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_locations
  # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [TerminalLocationLocationList]
  describe "get_terminal_locations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_locations_location
  # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalLocationsLocation200Response]
  describe "get_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_readers
  # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :device_type Filters readers by device type
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :location A location ID to filter the response list to only readers at the specific location
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status A status filter to filter readers to only offline or online readers
  # @return [TerminalReaderRetrieveReader]
  describe "get_terminal_readers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_terminal_readers_reader
  # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [GetTerminalReadersReader200Response]
  describe "get_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_helpers_test_clocks
  # &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [BillingClocksResourceBillingClockList]
  describe "get_test_helpers_test_clocks test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_helpers_test_clocks_test_clock
  # &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
  # @param test_clock
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TestHelpersTestClock]
  describe "get_test_helpers_test_clocks_test_clock test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_tokens_token
  # &lt;p&gt;Retrieves the token with the given ID.&lt;/p&gt;
  # @param token
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Token]
  describe "get_tokens_token test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_topups
  # &lt;p&gt;Returns a list of top-ups.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :amount A positive integer representing how much to transfer.
  # @option opts [GetAccountsCreatedParameter] :created A filter on the list, based on the object &#x60;created&#x60; field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return top-ups that have the given status. One of &#x60;canceled&#x60;, &#x60;failed&#x60;, &#x60;pending&#x60; or &#x60;succeeded&#x60;.
  # @return [TopupList]
  describe "get_topups test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_topups_topup
  # &lt;p&gt;Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.&lt;/p&gt;
  # @param topup
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Topup]
  describe "get_topups_topup test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transfers
  # &lt;p&gt;Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :destination Only return transfers for the destination specified by this account ID.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :transfer_group Only return transfers with the specified transfer group.
  # @return [TransferList]
  describe "get_transfers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transfers_id_reversals
  # &lt;p&gt;You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional reversals.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [TransferReversalList]
  describe "get_transfers_id_reversals test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transfers_transfer
  # &lt;p&gt;Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.&lt;/p&gt;
  # @param transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Transfer]
  describe "get_transfers_transfer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transfers_transfer_reversals_id
  # &lt;p&gt;By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.&lt;/p&gt;
  # @param id
  # @param transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TransferReversal]
  describe "get_transfers_transfer_reversals_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_credit_reversals
  # &lt;p&gt;Returns a list of CreditReversals.&lt;/p&gt;
  # @param financial_account Returns objects associated with this FinancialAccount.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :received_credit Only return CreditReversals for the ReceivedCredit ID.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return CreditReversals for a given status.
  # @return [TreasuryReceivedCreditsResourceCreditReversalList]
  describe "get_treasury_credit_reversals test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_credit_reversals_credit_reversal
  # &lt;p&gt;Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list&lt;/p&gt;
  # @param credit_reversal
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryCreditReversal]
  describe "get_treasury_credit_reversals_credit_reversal test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_debit_reversals
  # &lt;p&gt;Returns a list of DebitReversals.&lt;/p&gt;
  # @param financial_account Returns objects associated with this FinancialAccount.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :received_debit Only return DebitReversals for the ReceivedDebit ID.
  # @option opts [String] :resolution Only return DebitReversals for a given resolution.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return DebitReversals for a given status.
  # @return [TreasuryReceivedDebitsResourceDebitReversalList]
  describe "get_treasury_debit_reversals test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_debit_reversals_debit_reversal
  # &lt;p&gt;Retrieves a DebitReversal object.&lt;/p&gt;
  # @param debit_reversal
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryDebitReversal]
  describe "get_treasury_debit_reversals_debit_reversal test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_financial_accounts
  # &lt;p&gt;Returns a list of FinancialAccounts.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before An object ID cursor for use in pagination.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit ranging from 1 to 100 (defaults to 10).
  # @option opts [String] :starting_after An object ID cursor for use in pagination.
  # @return [TreasuryFinancialAccountsResourceFinancialAccountList]
  describe "get_treasury_financial_accounts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_financial_accounts_financial_account
  # &lt;p&gt;Retrieves the details of a FinancialAccount.&lt;/p&gt;
  # @param financial_account
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryFinancialAccount]
  describe "get_treasury_financial_accounts_financial_account test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_financial_accounts_financial_account_features
  # &lt;p&gt;Retrieves Features information associated with the FinancialAccount.&lt;/p&gt;
  # @param financial_account
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryFinancialAccountFeatures]
  describe "get_treasury_financial_accounts_financial_account_features test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_inbound_transfers
  # &lt;p&gt;Returns a list of InboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
  # @param financial_account Returns objects associated with this FinancialAccount.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return InboundTransfers that have the given status: &#x60;processing&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; or &#x60;canceled&#x60;.
  # @return [TreasuryInboundTransfersResourceInboundTransferList]
  describe "get_treasury_inbound_transfers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_inbound_transfers_id
  # &lt;p&gt;Retrieves the details of an existing InboundTransfer.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryInboundTransfer]
  describe "get_treasury_inbound_transfers_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_outbound_payments
  # &lt;p&gt;Returns a list of OutboundPayments sent from the specified FinancialAccount.&lt;/p&gt;
  # @param financial_account Returns objects associated with this FinancialAccount.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer Only return OutboundPayments sent to this customer.
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return OutboundPayments that have the given status: &#x60;processing&#x60;, &#x60;failed&#x60;, &#x60;posted&#x60;, &#x60;returned&#x60;, or &#x60;canceled&#x60;.
  # @return [TreasuryOutboundPaymentsResourceOutboundPaymentList]
  describe "get_treasury_outbound_payments test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_outbound_payments_id
  # &lt;p&gt;Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundPayment]
  describe "get_treasury_outbound_payments_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_outbound_transfers
  # &lt;p&gt;Returns a list of OutboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
  # @param financial_account Returns objects associated with this FinancialAccount.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return OutboundTransfers that have the given status: &#x60;processing&#x60;, &#x60;canceled&#x60;, &#x60;failed&#x60;, &#x60;posted&#x60;, or &#x60;returned&#x60;.
  # @return [TreasuryOutboundTransfersResourceOutboundTransferList]
  describe "get_treasury_outbound_transfers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_outbound_transfers_outbound_transfer
  # &lt;p&gt;Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.&lt;/p&gt;
  # @param outbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundTransfer]
  describe "get_treasury_outbound_transfers_outbound_transfer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_received_credits
  # &lt;p&gt;Returns a list of ReceivedCredits.&lt;/p&gt;
  # @param financial_account The FinancialAccount that received the funds.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [LinkedFlowsParam] :linked_flows Only return ReceivedCredits described by the flow.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return ReceivedCredits that have the given status: &#x60;succeeded&#x60; or &#x60;failed&#x60;.
  # @return [TreasuryReceivedCreditsResourceReceivedCreditList]
  describe "get_treasury_received_credits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_received_credits_id
  # &lt;p&gt;Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryReceivedCredit]
  describe "get_treasury_received_credits_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_received_debits
  # &lt;p&gt;Returns a list of ReceivedDebits.&lt;/p&gt;
  # @param financial_account The FinancialAccount that funds were pulled from.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return ReceivedDebits that have the given status: &#x60;succeeded&#x60; or &#x60;failed&#x60;.
  # @return [TreasuryReceivedDebitsResourceReceivedDebitList]
  describe "get_treasury_received_debits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_received_debits_id
  # &lt;p&gt;Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryReceivedDebit]
  describe "get_treasury_received_debits_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_transaction_entries
  # &lt;p&gt;Retrieves a list of TransactionEntry objects.&lt;/p&gt;
  # @param financial_account Returns objects associated with this FinancialAccount.
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [GetAccountsCreatedParameter] :effective_at
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :order_by The results are in reverse chronological order by &#x60;created&#x60; or &#x60;effective_at&#x60;. The default is &#x60;created&#x60;.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :transaction Only return TransactionEntries associated with this Transaction.
  # @return [TreasuryTransactionsResourceTransactionEntryList]
  describe "get_treasury_transaction_entries test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_transaction_entries_id
  # &lt;p&gt;Retrieves a TransactionEntry object.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryTransactionEntry]
  describe "get_treasury_transaction_entries_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_transactions
  # &lt;p&gt;Retrieves a list of Transaction objects.&lt;/p&gt;
  # @param financial_account Returns objects associated with this FinancialAccount.
  # @param [Hash] opts the optional parameters
  # @option opts [GetAccountsCreatedParameter] :created
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :order_by The results are in reverse chronological order by &#x60;created&#x60; or &#x60;posted_at&#x60;. The default is &#x60;created&#x60;.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [String] :status Only return Transactions that have the given status: &#x60;open&#x60;, &#x60;posted&#x60;, or &#x60;void&#x60;.
  # @option opts [StatusTransitionTimestampSpecs] :status_transitions A filter for the &#x60;status_transitions.posted_at&#x60; timestamp. When using this filter, &#x60;status&#x3D;posted&#x60; and &#x60;order_by&#x3D;posted_at&#x60; must also be specified.
  # @return [TreasuryTransactionsResourceTransactionList]
  describe "get_treasury_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_treasury_transactions_id
  # &lt;p&gt;Retrieves the details of an existing Transaction.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryTransaction]
  describe "get_treasury_transactions_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_webhook_endpoints
  # &lt;p&gt;Returns a list of your webhook endpoints.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @return [NotificationWebhookEndpointList]
  describe "get_webhook_endpoints test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_webhook_endpoints_webhook_endpoint
  # &lt;p&gt;Retrieves the webhook endpoint with the given ID.&lt;/p&gt;
  # @param webhook_endpoint
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [WebhookEndpoint]
  describe "get_webhook_endpoints_webhook_endpoint test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_account_links
  # &lt;p&gt;Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.&lt;/p&gt;
  # @param account The identifier of the account to create an account link for.
  # @param _type The type of account link the user is requesting. Possible values are &#x60;account_onboarding&#x60; or &#x60;account_update&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :collect Which information the platform needs to collect from the user. One of &#x60;currently_due&#x60; or &#x60;eventually_due&#x60;. Default is &#x60;currently_due&#x60;.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :refresh_url The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link&#39;s URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.
  # @option opts [String] :return_url The URL that the user will be redirected to upon leaving or completing the linked flow.
  # @return [AccountLink]
  describe "post_account_links test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts
  # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can create Stripe accounts for your users. To do this, you’ll first need to &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/applications/settings\&quot;&gt;register your platform&lt;/a&gt;.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :account_token An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
  # @option opts [PostAccountsRequestBankAccount] :bank_account
  # @option opts [BusinessProfileSpecs] :business_profile
  # @option opts [String] :business_type The business type.
  # @option opts [CapabilitiesParam] :capabilities
  # @option opts [CompanySpecs] :company
  # @option opts [String] :country The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you&#39;re creating an account is legally represented in Canada, you would use &#x60;CA&#x60; as the country for the account being created. Available countries include [Stripe&#39;s global markets](https://stripe.com/global) as well as countries where [cross-border payouts](https://stripe.com/docs/connect/cross-border-payouts) are supported.
  # @option opts [String] :default_currency Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account&#39;s country](https://stripe.com/docs/payouts).
  # @option opts [DocumentsSpecs] :documents
  # @option opts [String] :email The email address of the account holder. This is only to make the account easier to identify to you. Stripe only emails Custom accounts with your consent.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :external_account A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary, as documented in the &#x60;external_account&#x60; parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. &lt;br&gt;&lt;br&gt;By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the [bank account](https://stripe.com/docs/api#account_create_bank_account) or [card creation](https://stripe.com/docs/api#account_create_card) APIs.
  # @option opts [IndividualSpecs] :individual
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [SettingsSpecs] :settings
  # @option opts [TosAcceptanceSpecs] :tos_acceptance
  # @option opts [String] :_type The type of Stripe account to create. May be one of &#x60;custom&#x60;, &#x60;express&#x60; or &#x60;standard&#x60;.
  # @return [Account]
  describe "post_accounts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts_account
  # &lt;p&gt;Updates a &lt;a href&#x3D;\&quot;/docs/connect/accounts\&quot;&gt;connected account&lt;/a&gt; by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked &lt;strong&gt;Custom Only&lt;/strong&gt; below.) Parameters marked &lt;strong&gt;Custom and Express&lt;/strong&gt; are not supported for Standard accounts.&lt;/p&gt;  &lt;p&gt;To update your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;Dashboard&lt;/a&gt;. Refer to our &lt;a href&#x3D;\&quot;/docs/connect/updating-accounts\&quot;&gt;Connect&lt;/a&gt; documentation to learn more about updating accounts.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :account_token An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
  # @option opts [BusinessProfileSpecs] :business_profile
  # @option opts [String] :business_type The business type.
  # @option opts [CapabilitiesParam] :capabilities
  # @option opts [CompanySpecs] :company
  # @option opts [String] :default_currency Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account&#39;s country](https://stripe.com/docs/payouts).
  # @option opts [DocumentsSpecs] :documents
  # @option opts [String] :email The email address of the account holder. This is only to make the account easier to identify to you. Stripe only emails Custom accounts with your consent.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :external_account A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary, as documented in the &#x60;external_account&#x60; parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. &lt;br&gt;&lt;br&gt;By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the [bank account](https://stripe.com/docs/api#account_create_bank_account) or [card creation](https://stripe.com/docs/api#account_create_card) APIs.
  # @option opts [IndividualSpecs] :individual
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [SettingsSpecsUpdate] :settings
  # @option opts [TosAcceptanceSpecs] :tos_acceptance
  # @return [Account]
  describe "post_accounts_account test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts_account_capabilities_capability
  # &lt;p&gt;Updates an existing Account Capability.&lt;/p&gt;
  # @param account
  # @param capability
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :requested Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the &#x60;requirements&#x60; arrays.
  # @return [Capability]
  describe "post_accounts_account_capabilities_capability test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts_account_external_accounts
  # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [PostAccountsRequestBankAccount] :bank_account
  # @option opts [Bool] :default_for_currency When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :external_account Please refer to full [documentation](https://stripe.com/docs/api) instead.
  # @return [ExternalAccount]
  describe "post_accounts_account_external_accounts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts_account_external_accounts_id
  # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
  # @param account
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :account_holder_name The name of the person or business that owns the bank account.
  # @option opts [String] :account_holder_type The type of entity that holds the account. This can be either &#x60;individual&#x60; or &#x60;company&#x60;.
  # @option opts [String] :account_type The bank account type. This can only be &#x60;checking&#x60; or &#x60;savings&#x60; in most countries. In Japan, this can only be &#x60;futsu&#x60; or &#x60;toza&#x60;.
  # @option opts [String] :address_city City/District/Suburb/Town/Village.
  # @option opts [String] :address_country Billing address country, if provided when creating card.
  # @option opts [String] :address_line1 Address line 1 (Street address/PO Box/Company name).
  # @option opts [String] :address_line2 Address line 2 (Apartment/Suite/Unit/Building).
  # @option opts [String] :address_state State/County/Province/Region.
  # @option opts [String] :address_zip ZIP or postal code.
  # @option opts [Bool] :default_for_currency When set to true, this becomes the default external account for its currency.
  # @option opts [String] :exp_month Two digit number representing the card’s expiration month.
  # @option opts [String] :exp_year Four digit number representing the card’s expiration year.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name Cardholder name.
  # @return [ExternalAccount]
  describe "post_accounts_account_external_accounts_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts_account_login_links
  # &lt;p&gt;Creates a single-use login link for an Express account to access their Stripe dashboard.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;You may only create login links for &lt;a href&#x3D;\&quot;/docs/connect/express-accounts\&quot;&gt;Express accounts&lt;/a&gt; connected to your platform&lt;/strong&gt;.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [LoginLink]
  describe "post_accounts_account_login_links test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts_account_persons
  # &lt;p&gt;Creates a new person.&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [AddressSpecs] :address
  # @option opts [JapanAddressKanaSpecs] :address_kana
  # @option opts [JapanAddressKanjiSpecs] :address_kanji
  # @option opts [PostAccountsAccountPersonsRequestDob] :dob
  # @option opts [PersonDocumentsSpecs] :documents
  # @option opts [String] :email The person&#39;s email address.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :first_name The person&#39;s first name.
  # @option opts [String] :first_name_kana The Kana variation of the person&#39;s first name (Japan only).
  # @option opts [String] :first_name_kanji The Kanji variation of the person&#39;s first name (Japan only).
  # @option opts [PostAccountsAccountPersonsRequestFullNameAliases] :full_name_aliases
  # @option opts [String] :gender The person&#39;s gender (International regulations require either \\\&quot;male\\\&quot; or \\\&quot;female\\\&quot;).
  # @option opts [String] :id_number The person&#39;s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type&#x3D;pii).
  # @option opts [String] :id_number_secondary The person&#39;s secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type&#x3D;pii).
  # @option opts [String] :last_name The person&#39;s last name.
  # @option opts [String] :last_name_kana The Kana variation of the person&#39;s last name (Japan only).
  # @option opts [String] :last_name_kanji The Kanji variation of the person&#39;s last name (Japan only).
  # @option opts [String] :maiden_name The person&#39;s maiden name.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :nationality The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or \\\&quot;XX\\\&quot; if unavailable.
  # @option opts [String] :person_token A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.
  # @option opts [String] :phone The person&#39;s phone number.
  # @option opts [String] :political_exposure Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  # @option opts [AddressSpecs] :registered_address
  # @option opts [RelationshipSpecs] :relationship
  # @option opts [String] :ssn_last_4 The last four digits of the person&#39;s Social Security number (U.S. only).
  # @option opts [PersonVerificationSpecs] :verification
  # @return [Person]
  describe "post_accounts_account_persons test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts_account_persons_person
  # &lt;p&gt;Updates an existing person.&lt;/p&gt;
  # @param account
  # @param person
  # @param [Hash] opts the optional parameters
  # @option opts [AddressSpecs] :address
  # @option opts [JapanAddressKanaSpecs] :address_kana
  # @option opts [JapanAddressKanjiSpecs] :address_kanji
  # @option opts [PostAccountsAccountPersonsRequestDob] :dob
  # @option opts [PersonDocumentsSpecs] :documents
  # @option opts [String] :email The person&#39;s email address.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :first_name The person&#39;s first name.
  # @option opts [String] :first_name_kana The Kana variation of the person&#39;s first name (Japan only).
  # @option opts [String] :first_name_kanji The Kanji variation of the person&#39;s first name (Japan only).
  # @option opts [PostAccountsAccountPersonsRequestFullNameAliases] :full_name_aliases
  # @option opts [String] :gender The person&#39;s gender (International regulations require either \\\&quot;male\\\&quot; or \\\&quot;female\\\&quot;).
  # @option opts [String] :id_number The person&#39;s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type&#x3D;pii).
  # @option opts [String] :id_number_secondary The person&#39;s secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type&#x3D;pii).
  # @option opts [String] :last_name The person&#39;s last name.
  # @option opts [String] :last_name_kana The Kana variation of the person&#39;s last name (Japan only).
  # @option opts [String] :last_name_kanji The Kanji variation of the person&#39;s last name (Japan only).
  # @option opts [String] :maiden_name The person&#39;s maiden name.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :nationality The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or \\\&quot;XX\\\&quot; if unavailable.
  # @option opts [String] :person_token A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.
  # @option opts [String] :phone The person&#39;s phone number.
  # @option opts [String] :political_exposure Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  # @option opts [AddressSpecs] :registered_address
  # @option opts [RelationshipSpecs] :relationship
  # @option opts [String] :ssn_last_4 The last four digits of the person&#39;s Social Security number (U.S. only).
  # @option opts [PersonVerificationSpecs] :verification
  # @return [Person]
  describe "post_accounts_account_persons_person test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_accounts_account_reject
  # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you may flag accounts as suspicious.&lt;/p&gt;  &lt;p&gt;Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.&lt;/p&gt;
  # @param account
  # @param reason The reason for rejecting the account. Can be &#x60;fraud&#x60;, &#x60;terms_of_service&#x60;, or &#x60;other&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Account]
  describe "post_accounts_account_reject test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_application_fees_fee_refunds_id
  # &lt;p&gt;Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata as an argument.&lt;/p&gt;
  # @param fee
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [FeeRefund]
  describe "post_application_fees_fee_refunds_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_application_fees_id_refund
  #
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount
  # @option opts [String] :directive
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [ApplicationFee]
  describe "post_application_fees_id_refund test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_application_fees_id_refunds
  # &lt;p&gt;Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount A positive integer, in _cents (or local equivalent)_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [FeeRefund]
  describe "post_application_fees_id_refunds test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_apps_secrets
  # &lt;p&gt;Create or replace a secret in the secret store.&lt;/p&gt;
  # @param name A name for the secret that&#39;s unique within the scope.
  # @param payload The plaintext secret value to be stored.
  # @param scope
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :expires_at The Unix timestamp for the expiry time of the secret, after which the secret deletes.
  # @return [AppsSecret]
  describe "post_apps_secrets test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_apps_secrets_delete
  # &lt;p&gt;Deletes a secret from the secret store by name and scope.&lt;/p&gt;
  # @param name A name for the secret that&#39;s unique within the scope.
  # @param scope
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [AppsSecret]
  describe "post_apps_secrets_delete test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_billing_portal_configurations
  # &lt;p&gt;Creates a configuration that describes the functionality and behavior of a PortalSession&lt;/p&gt;
  # @param business_profile
  # @param features
  # @param [Hash] opts the optional parameters
  # @option opts [PostBillingPortalConfigurationsRequestDefaultReturnUrl] :default_return_url
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [LoginPageCreateParam] :login_page
  # @return [BillingPortalConfiguration]
  describe "post_billing_portal_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_billing_portal_configurations_configuration
  # &lt;p&gt;Updates a configuration that describes the functionality of the customer portal.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the configuration is active and can be used to create portal sessions.
  # @option opts [BusinessProfileUpdateParam] :business_profile
  # @option opts [PostBillingPortalConfigurationsRequestDefaultReturnUrl] :default_return_url
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FeaturesUpdatingParam] :features
  # @option opts [LoginPageUpdateParam] :login_page
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [BillingPortalConfiguration]
  describe "post_billing_portal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_billing_portal_sessions
  # &lt;p&gt;Creates a session of the customer portal.&lt;/p&gt;
  # @param customer The ID of an existing customer.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :configuration The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :locale The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s &#x60;preferred_locales&#x60; or browser’s locale is used.
  # @option opts [String] :on_behalf_of The &#x60;on_behalf_of&#x60; account to use for this session. When specified, only subscriptions and invoices with this &#x60;on_behalf_of&#x60; account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the &#x60;on_behalf_of&#x60; account&#39;s branding settings, which the portal displays.
  # @option opts [String] :return_url The default URL to redirect customers to when they click on the portal&#39;s link to return to your website.
  # @return [BillingPortalSession]
  describe "post_billing_portal_sessions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_charges
  # &lt;p&gt;To charge a credit card or other payment source, you create a &lt;code&gt;Charge&lt;/code&gt; object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  # @option opts [Int32] :application_fee
  # @option opts [Int32] :application_fee_amount A fee in cents (or local equivalent) that will be applied to the charge and transferred to the application owner&#39;s Stripe account. The request must be made with an OAuth key or the &#x60;Stripe-Account&#x60; header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees).
  # @option opts [Bool] :capture Whether to immediately capture the charge. Defaults to &#x60;true&#x60;. When &#x60;false&#x60;, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire after a set number of days (7 by default). For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation.
  # @option opts [PostChargesRequestCard] :card
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :customer The ID of an existing customer that will be charged in this request.
  # @option opts [String] :description An arbitrary string which you can attach to a &#x60;Charge&#x60; object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the &#x60;description&#x60; of the charge(s) that they are describing.
  # @option opts [PostChargesRequestDestination] :destination
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :on_behalf_of The Stripe account ID for which these funds are intended. Automatically set if you use the &#x60;destination&#x60; parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers#on-behalf-of).
  # @option opts [RadarOptions] :radar_options
  # @option opts [String] :receipt_email The email address to which this charge&#39;s [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer&#39;s email address. If &#x60;receipt_email&#x60; is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  # @option opts [OptionalFieldsShipping] :shipping
  # @option opts [String] :source A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer.
  # @option opts [String] :statement_descriptor For card charges, use &#x60;statement_descriptor_suffix&#x60; instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  # @option opts [String] :statement_descriptor_suffix Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  # @option opts [TransferDataSpecs] :transfer_data
  # @option opts [String] :transfer_group A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/charges-transfers#transfer-options).
  # @return [Charge]
  describe "post_charges test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_charges_charge
  # &lt;p&gt;Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param charge
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.
  # @option opts [String] :description An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the &#x60;description&#x60; of the charge(s) that they are describing.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FraudDetails] :fraud_details
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :receipt_email This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.
  # @option opts [OptionalFieldsShipping] :shipping
  # @option opts [String] :transfer_group A string that identifies this transaction as part of a group. &#x60;transfer_group&#x60; may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  # @return [Charge]
  describe "post_charges_charge test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_charges_charge_capture
  # &lt;p&gt;Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you &lt;a href&#x3D;\&quot;#create_charge\&quot;&gt;created a charge&lt;/a&gt; with the capture option set to false.&lt;/p&gt;  &lt;p&gt;Uncaptured payments expire a set number of days after they are created (&lt;a href&#x3D;\&quot;/docs/charges/placing-a-hold\&quot;&gt;7 by default&lt;/a&gt;). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.&lt;/p&gt;
  # @param charge
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded.
  # @option opts [Int32] :application_fee An application fee to add on to this charge.
  # @option opts [Int32] :application_fee_amount An application fee amount to add on to this charge, which must be less than or equal to the original amount.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :receipt_email The email address to send this charge&#39;s receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.
  # @option opts [String] :statement_descriptor For card charges, use &#x60;statement_descriptor_suffix&#x60; instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  # @option opts [String] :statement_descriptor_suffix Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  # @option opts [TransferDataSpecs] :transfer_data
  # @option opts [String] :transfer_group A string that identifies this transaction as part of a group. &#x60;transfer_group&#x60; may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  # @return [Charge]
  describe "post_charges_charge_capture test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_checkout_sessions
  # &lt;p&gt;Creates a Session object.&lt;/p&gt;
  # @param cancel_url The URL the customer will be directed to if they decide to cancel payment and return to your website.
  # @param success_url The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
  # @param [Hash] opts the optional parameters
  # @option opts [AfterExpirationParams] :after_expiration
  # @option opts [Bool] :allow_promotion_codes Enables user redeemable promotion codes.
  # @option opts [AutomaticTaxParams] :automatic_tax
  # @option opts [String] :billing_address_collection Specify whether Checkout should collect the customer&#39;s billing address.
  # @option opts [String] :client_reference_id A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
  # @option opts [ConsentCollectionParams] :consent_collection
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :customer ID of an existing Customer, if one exists. In &#x60;payment&#x60; mode, the customer’s most recent card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In &#x60;subscription&#x60; mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer&#39;s card details.  If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid &#x60;email&#x60;, Checkout will set the email entered during the session on the Customer.  If blank for Checkout Sessions in &#x60;payment&#x60; or &#x60;subscription&#x60; mode, Checkout will create a new Customer object based on information provided during the payment flow.  You can set [&#x60;payment_intent_data.setup_future_usage&#x60;](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
  # @option opts [String] :customer_creation Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.  When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).  Sessions that don&#39;t create Customers instead create [Guest Customers](https://support.stripe.com/questions/guest-customer-faq) in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.  Can only be set in &#x60;payment&#x60; and &#x60;setup&#x60; mode.
  # @option opts [String] :customer_email If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the &#x60;customer&#x60; field.
  # @option opts [CustomerUpdateParams] :customer_update
  # @option opts [Array(DiscountParams)] :discounts The coupon or promotion code to apply to this Session. Currently, only up to one may be specified.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :expires_at The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
  # @option opts [Array(LineItemParams)] :line_items A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).  For &#x60;payment&#x60; mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.  For &#x60;subscription&#x60; mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.
  # @option opts [String] :locale The IETF language tag of the locale Checkout is displayed in. If blank or &#x60;auto&#x60;, the browser&#39;s locale is used.
  # @option opts [String] :mode The mode of the Checkout Session. Required when using prices or &#x60;setup&#x60; mode. Pass &#x60;subscription&#x60; if the Checkout Session includes at least one recurring item.
  # @option opts [PaymentIntentDataParams] :payment_intent_data
  # @option opts [String] :payment_method_collection Specify whether Checkout should collect a payment method. When set to &#x60;if_required&#x60;, Checkout will not collect a payment method when the total due for the session is 0. This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in &#x60;subscription&#x60; mode.  If you&#39;d like information on how to collect a payment method outside of Checkout, read the guide on configuring [subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types A list of the types of payment methods (e.g., &#x60;card&#x60;) this Checkout Session can accept.  In &#x60;payment&#x60; and &#x60;subscription&#x60; mode, you can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). It is required in &#x60;setup&#x60; mode.  Read more about the supported payment methods and their requirements in our [payment method details guide](/docs/payments/checkout/payment-methods).  If multiple payment methods are passed, Checkout will dynamically reorder them to prioritize the most relevant payment methods based on the customer&#39;s location and other characteristics.
  # @option opts [PhoneNumberCollectionParams] :phone_number_collection
  # @option opts [SetupIntentDataParam] :setup_intent_data
  # @option opts [ShippingAddressCollectionParams] :shipping_address_collection
  # @option opts [Array(ShippingOptionParams)] :shipping_options The shipping rate options to apply to this Session.
  # @option opts [String] :submit_type Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. &#x60;submit_type&#x60; can only be specified on Checkout Sessions in &#x60;payment&#x60; mode, but not Checkout Sessions in &#x60;subscription&#x60; or &#x60;setup&#x60; mode.
  # @option opts [SubscriptionDataParams] :subscription_data
  # @option opts [TaxIdCollectionParams] :tax_id_collection
  # @return [CheckoutSession]
  describe "post_checkout_sessions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_checkout_sessions_session_expire
  # &lt;p&gt;A Session can be expired when it is in one of these statuses: &lt;code&gt;open&lt;/code&gt; &lt;/p&gt;  &lt;p&gt;After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.&lt;/p&gt;
  # @param session
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CheckoutSession]
  describe "post_checkout_sessions_session_expire test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_coupons
  # &lt;p&gt;You can create coupons easily via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.&lt;/p&gt;  &lt;p&gt;A coupon has either a &lt;code&gt;percent_off&lt;/code&gt; or an &lt;code&gt;amount_off&lt;/code&gt; and &lt;code&gt;currency&lt;/code&gt;. If you set an &lt;code&gt;amount_off&lt;/code&gt;, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of &lt;currency&gt;100&lt;/currency&gt; will have a final total of &lt;currency&gt;0&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it and an invoice with a subtotal of &lt;currency&gt;300&lt;/currency&gt; will have a final total of &lt;currency&gt;100&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount_off A positive integer representing the amount to subtract from an invoice total (required if &#x60;percent_off&#x60; is not passed).
  # @option opts [AppliesToParams] :applies_to
  # @option opts [String] :currency Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the &#x60;amount_off&#x60; parameter (required if &#x60;amount_off&#x60; is passed).
  # @option opts [String] :duration Specifies how long the discount will be in effect if used on a subscription. Can be &#x60;forever&#x60;, &#x60;once&#x60;, or &#x60;repeating&#x60;. Defaults to &#x60;once&#x60;.
  # @option opts [Int32] :duration_in_months Required only if &#x60;duration&#x60; is &#x60;repeating&#x60;, in which case it must be a positive integer that specifies the number of months the discount will be in effect.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :id Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don&#39;t want to specify a particular code, you can leave the ID blank and we&#39;ll generate a random code for you.
  # @option opts [Int32] :max_redemptions A positive integer specifying the number of times the coupon can be redeemed before it&#39;s no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the &#x60;id&#x60; is shown if &#x60;name&#x60; is not set.
  # @option opts [Float64] :percent_off A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if &#x60;amount_off&#x60; is not passed).
  # @option opts [Int32] :redeem_by Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.
  # @return [Coupon]
  describe "post_coupons test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_coupons_coupon
  # &lt;p&gt;Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.&lt;/p&gt;
  # @param coupon
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the &#x60;id&#x60; is shown if &#x60;name&#x60; is not set.
  # @return [Coupon]
  describe "post_coupons_coupon test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_credit_notes
  # &lt;p&gt;Issue a credit note to adjust the amount of a finalized invoice. For a &lt;code&gt;status&#x3D;open&lt;/code&gt; invoice, a credit note reduces its &lt;code&gt;amount_due&lt;/code&gt;. For a &lt;code&gt;status&#x3D;paid&lt;/code&gt; invoice, a credit note does not affect its &lt;code&gt;amount_due&lt;/code&gt;. Instead, it can result in any combination of the following:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;Refund: create a new refund (using &lt;code&gt;refund_amount&lt;/code&gt;) or link an existing refund (using &lt;code&gt;refund&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Customer balance credit: credit the customer’s balance (using &lt;code&gt;credit_amount&lt;/code&gt;) which will be automatically applied to their next invoice when it’s finalized.&lt;/li&gt; &lt;li&gt;Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using &lt;code&gt;out_of_band_amount&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.&lt;/p&gt;  &lt;p&gt;You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s &lt;code&gt;pre_payment_credit_notes_amount&lt;/code&gt; or &lt;code&gt;post_payment_credit_notes_amount&lt;/code&gt; depending on its &lt;code&gt;status&lt;/code&gt; at the time of credit note creation.&lt;/p&gt;
  # @param invoice ID of the invoice.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The integer amount in cents (or local equivalent) representing the total amount of the credit note.
  # @option opts [Int32] :credit_amount The integer amount in cents (or local equivalent) representing the amount to credit the customer&#39;s balance, which will be automatically applied to their next invoice.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(CreditNoteLineItemParams)] :lines Line items that make up the credit note.
  # @option opts [String] :memo The credit note&#39;s memo appears on the credit note PDF.
  # @option opts [Int32] :out_of_band_amount The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
  # @option opts [String] :reason Reason for issuing this credit note, one of &#x60;duplicate&#x60;, &#x60;fraudulent&#x60;, &#x60;order_change&#x60;, or &#x60;product_unsatisfactory&#x60;
  # @option opts [String] :refund ID of an existing refund to link this credit note to.
  # @option opts [Int32] :refund_amount The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
  # @return [CreditNote]
  describe "post_credit_notes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_credit_notes_id
  # &lt;p&gt;Updates an existing credit note.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :memo Credit note memo.
  # @return [CreditNote]
  describe "post_credit_notes_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_credit_notes_id_void
  # &lt;p&gt;Marks a credit note as void. Learn more about &lt;a href&#x3D;\&quot;/docs/billing/invoices/credit-notes#voiding\&quot;&gt;voiding credit notes&lt;/a&gt;.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [CreditNote]
  describe "post_credit_notes_id_void test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers
  # &lt;p&gt;Creates a new customer object.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersRequestAddress] :address
  # @option opts [Int32] :balance An integer amount in cents (or local equivalent) that represents the customer&#39;s current balance, which affect the customer&#39;s future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
  # @option opts [CashBalanceParam] :cash_balance
  # @option opts [String] :coupon
  # @option opts [String] :description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.
  # @option opts [String] :email Customer&#39;s email address. It&#39;s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :invoice_prefix The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
  # @option opts [CustomerParam] :invoice_settings
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name The customer&#39;s full name or business name.
  # @option opts [Int32] :next_invoice_sequence The sequence to be used on the customer&#39;s next invoice. Defaults to 1.
  # @option opts [String] :payment_method
  # @option opts [String] :phone The customer&#39;s phone number.
  # @option opts [Array(String)] :preferred_locales Customer&#39;s preferred languages, ordered by preference.
  # @option opts [String] :promotion_code The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount.
  # @option opts [PostCustomersRequestShipping] :shipping
  # @option opts [String] :source
  # @option opts [TaxParam] :tax
  # @option opts [String] :tax_exempt The customer&#39;s tax exemption. One of &#x60;none&#x60;, &#x60;exempt&#x60;, or &#x60;reverse&#x60;.
  # @option opts [Array(DataParams)] :tax_id_data The customer&#39;s tax IDs.
  # @option opts [String] :test_clock ID of the test clock to attach to the customer.
  # @return [Customer]
  describe "post_customers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer
  # &lt;p&gt;Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the &lt;strong&gt;source&lt;/strong&gt; parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the &lt;strong&gt;source&lt;/strong&gt; parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the &lt;code&gt;past_due&lt;/code&gt; state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the &lt;strong&gt;default_source&lt;/strong&gt; for a customer will not trigger this behavior.&lt;/p&gt;  &lt;p&gt;This request accepts mostly the same arguments as the customer creation call.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [PostCustomersRequestAddress] :address
  # @option opts [Int32] :balance An integer amount in cents (or local equivalent) that represents the customer&#39;s current balance, which affect the customer&#39;s future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
  # @option opts [PostCustomersCustomerRequestBankAccount] :bank_account
  # @option opts [PostChargesRequestCard] :card
  # @option opts [CashBalanceParam] :cash_balance
  # @option opts [String] :coupon
  # @option opts [String] :default_alipay_account ID of Alipay account to make the customer&#39;s new default for invoice payments.
  # @option opts [String] :default_bank_account ID of bank account to make the customer&#39;s new default for invoice payments.
  # @option opts [String] :default_card ID of card to make the customer&#39;s new default for invoice payments.
  # @option opts [String] :default_source If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.  Provide the ID of a payment source already attached to this customer to make it this customer&#39;s default payment source.  If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
  # @option opts [String] :description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.
  # @option opts [String] :email Customer&#39;s email address. It&#39;s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :invoice_prefix The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
  # @option opts [CustomerParam] :invoice_settings
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name The customer&#39;s full name or business name.
  # @option opts [Int32] :next_invoice_sequence The sequence to be used on the customer&#39;s next invoice. Defaults to 1.
  # @option opts [String] :phone The customer&#39;s phone number.
  # @option opts [Array(String)] :preferred_locales Customer&#39;s preferred languages, ordered by preference.
  # @option opts [String] :promotion_code The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount.
  # @option opts [PostCustomersRequestShipping] :shipping
  # @option opts [String] :source
  # @option opts [TaxParam] :tax
  # @option opts [String] :tax_exempt The customer&#39;s tax exemption. One of &#x60;none&#x60;, &#x60;exempt&#x60;, or &#x60;reverse&#x60;.
  # @return [Customer]
  describe "post_customers_customer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_balance_transactions
  # &lt;p&gt;Creates an immutable transaction that updates the customer’s credit &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balance&lt;/a&gt;.&lt;/p&gt;
  # @param customer
  # @param amount The integer amount in **cents (or local equivalent)** to apply to the customer&#39;s credit balance.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer&#39;s [&#x60;currency&#x60;](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer&#39;s &#x60;currency&#x60; is not set, it will be updated to this value.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [CustomerBalanceTransaction]
  describe "post_customers_customer_balance_transactions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_balance_transactions_transaction
  # &lt;p&gt;Most credit balance transaction fields are immutable, but you may update its &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;metadata&lt;/code&gt;.&lt;/p&gt;
  # @param customer
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [CustomerBalanceTransaction]
  describe "post_customers_customer_balance_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_cash_balance
  # &lt;p&gt;Changes the settings on a customer’s cash balance.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [BalanceSettingsParam] :settings
  # @return [CashBalance]
  describe "post_customers_customer_cash_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources
  # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
  # @param customer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :alipay_account A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details.
  # @option opts [PostCustomersCustomerRequestBankAccount] :bank_account
  # @option opts [PostChargesRequestCard] :card
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :source Please refer to full [documentation](https://stripe.com/docs/api) instead.
  # @return [PaymentSource]
  describe "post_customers_customer_sources test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources_id
  # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :account_holder_name The name of the person or business that owns the bank account.
  # @option opts [String] :account_holder_type The type of entity that holds the account. This can be either &#x60;individual&#x60; or &#x60;company&#x60;.
  # @option opts [String] :address_city City/District/Suburb/Town/Village.
  # @option opts [String] :address_country Billing address country, if provided when creating card.
  # @option opts [String] :address_line1 Address line 1 (Street address/PO Box/Company name).
  # @option opts [String] :address_line2 Address line 2 (Apartment/Suite/Unit/Building).
  # @option opts [String] :address_state State/County/Province/Region.
  # @option opts [String] :address_zip ZIP or postal code.
  # @option opts [String] :exp_month Two digit number representing the card’s expiration month.
  # @option opts [String] :exp_year Four digit number representing the card’s expiration year.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name Cardholder name.
  # @option opts [Owner] :owner
  # @return [PostCustomersCustomerSourcesId200Response]
  describe "post_customers_customer_sources_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_sources_id_verify
  # &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
  # @param customer
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(Int32)] :amounts Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [BankAccount]
  describe "post_customers_customer_sources_id_verify test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_customers_customer_tax_ids
  # &lt;p&gt;Creates a new &lt;code&gt;TaxID&lt;/code&gt; object for a customer.&lt;/p&gt;
  # @param customer
  # @param _type Type of the tax ID, one of &#x60;ae_trn&#x60;, &#x60;au_abn&#x60;, &#x60;au_arn&#x60;, &#x60;bg_uic&#x60;, &#x60;br_cnpj&#x60;, &#x60;br_cpf&#x60;, &#x60;ca_bn&#x60;, &#x60;ca_gst_hst&#x60;, &#x60;ca_pst_bc&#x60;, &#x60;ca_pst_mb&#x60;, &#x60;ca_pst_sk&#x60;, &#x60;ca_qst&#x60;, &#x60;ch_vat&#x60;, &#x60;cl_tin&#x60;, &#x60;es_cif&#x60;, &#x60;eu_oss_vat&#x60;, &#x60;eu_vat&#x60;, &#x60;gb_vat&#x60;, &#x60;ge_vat&#x60;, &#x60;hk_br&#x60;, &#x60;hu_tin&#x60;, &#x60;id_npwp&#x60;, &#x60;il_vat&#x60;, &#x60;in_gst&#x60;, &#x60;is_vat&#x60;, &#x60;jp_cn&#x60;, &#x60;jp_rn&#x60;, &#x60;kr_brn&#x60;, &#x60;li_uid&#x60;, &#x60;mx_rfc&#x60;, &#x60;my_frp&#x60;, &#x60;my_itn&#x60;, &#x60;my_sst&#x60;, &#x60;no_vat&#x60;, &#x60;nz_gst&#x60;, &#x60;ru_inn&#x60;, &#x60;ru_kpp&#x60;, &#x60;sa_vat&#x60;, &#x60;sg_gst&#x60;, &#x60;sg_uen&#x60;, &#x60;si_tin&#x60;, &#x60;th_vat&#x60;, &#x60;tw_vat&#x60;, &#x60;ua_vat&#x60;, &#x60;us_ein&#x60;, or &#x60;za_vat&#x60;
  # @param value Value of the tax ID.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TaxId]
  describe "post_customers_customer_tax_ids test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_disputes_dispute
  # &lt;p&gt;When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/disputes\&quot;&gt;dashboard&lt;/a&gt;, but if you prefer, you can use the API to submit evidence programmatically.&lt;/p&gt;  &lt;p&gt;Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our &lt;a href&#x3D;\&quot;/docs/disputes/categories\&quot;&gt;guide to dispute types&lt;/a&gt;.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [DisputeEvidenceParams] :evidence
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Bool] :submit Whether to immediately submit evidence to the bank. If &#x60;false&#x60;, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to &#x60;true&#x60; (the default).
  # @return [Dispute]
  describe "post_disputes_dispute test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_disputes_dispute_close
  # &lt;p&gt;Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.&lt;/p&gt;  &lt;p&gt;The status of the dispute will change from &lt;code&gt;needs_response&lt;/code&gt; to &lt;code&gt;lost&lt;/code&gt;. &lt;em&gt;Closing a dispute is irreversible&lt;/em&gt;.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Dispute]
  describe "post_disputes_dispute_close test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_file_links
  # &lt;p&gt;Creates a new file link object.&lt;/p&gt;
  # @param file The ID of the file. The file&#39;s &#x60;purpose&#x60; must be one of the following: &#x60;business_icon&#x60;, &#x60;business_logo&#x60;, &#x60;customer_signature&#x60;, &#x60;dispute_evidence&#x60;, &#x60;finance_report_run&#x60;, &#x60;identity_document_downloadable&#x60;, &#x60;pci_document&#x60;, &#x60;selfie&#x60;, &#x60;sigma_scheduled_query&#x60;, &#x60;tax_document_user_upload&#x60;, or &#x60;terminal_reader_splashscreen&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :expires_at A future timestamp after which the link will no longer be usable.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [FileLink]
  describe "post_file_links test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_file_links_link
  # &lt;p&gt;Updates an existing file link object. Expired links can no longer be updated.&lt;/p&gt;
  # @param link
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostFileLinksLinkRequestExpiresAt] :expires_at
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [FileLink]
  describe "post_file_links_link test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_files
  # &lt;p&gt;To upload a file to Stripe, you’ll need to send a request of type &lt;code&gt;multipart/form-data&lt;/code&gt;. The request should contain the file you would like to upload, as well as the parameters for creating a file.&lt;/p&gt;  &lt;p&gt;All of Stripe’s officially supported Client libraries should have support for sending &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt;
  # @param file A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the &#x60;multipart/form-data&#x60; protocol).
  # @param purpose The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FileLinkCreationParams] :file_link_data
  # @return [::File]
  describe "post_files test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_financial_connections_accounts_account_disconnect
  # &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
  # @param account
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [FinancialConnectionsAccount]
  describe "post_financial_connections_accounts_account_disconnect test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_financial_connections_accounts_account_refresh
  # &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
  # @param account
  # @param features The list of account features that you would like to refresh.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [FinancialConnectionsAccount]
  describe "post_financial_connections_accounts_account_refresh test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_financial_connections_sessions
  # &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
  # @param account_holder
  # @param permissions List of data features that you would like to request access to.  Possible values are &#x60;balances&#x60;, &#x60;transactions&#x60;, &#x60;ownership&#x60;, and &#x60;payment_method&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FiltersParams] :filters
  # @option opts [String] :return_url For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  # @return [FinancialConnectionsSession]
  describe "post_financial_connections_sessions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_identity_verification_sessions
  # &lt;p&gt;Creates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;After the VerificationSession is created, display a verification modal using the session &lt;code&gt;client_secret&lt;/code&gt; or send your users to the session’s &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;Related guide: &lt;a href&#x3D;\&quot;/docs/identity/verify-identity-documents\&quot;&gt;Verify your users’ identity documents&lt;/a&gt;.&lt;/p&gt;
  # @param _type The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [SessionOptionsParam] :options
  # @option opts [String] :return_url The URL that the user will be redirected to upon completing the verification flow.
  # @return [IdentityVerificationSession]
  describe "post_identity_verification_sessions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_identity_verification_sessions_session
  # &lt;p&gt;Updates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to update the verification check and options.&lt;/p&gt;
  # @param session
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [SessionOptionsParam] :options
  # @option opts [String] :_type The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
  # @return [IdentityVerificationSession]
  describe "post_identity_verification_sessions_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_identity_verification_sessions_session_cancel
  # &lt;p&gt;A VerificationSession object can be canceled when it is in &lt;code&gt;requires_input&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Once canceled, future submission attempts are disabled. This cannot be undone. &lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#cancel\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
  # @param session
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IdentityVerificationSession]
  describe "post_identity_verification_sessions_session_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_identity_verification_sessions_session_redact
  # &lt;p&gt;Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.&lt;/p&gt;  &lt;p&gt;A VerificationSession object can be redacted when it is in &lt;code&gt;requires_input&lt;/code&gt; or &lt;code&gt;verified&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;. Redacting a VerificationSession in &lt;code&gt;requires_action&lt;/code&gt; state will automatically cancel it.&lt;/p&gt;  &lt;p&gt;The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s &lt;code&gt;redaction.status&lt;/code&gt; field will be set to &lt;code&gt;processing&lt;/code&gt;; when the process is finished, it will change to &lt;code&gt;redacted&lt;/code&gt; and an &lt;code&gt;identity.verification_session.redacted&lt;/code&gt; event will be emitted.&lt;/p&gt;  &lt;p&gt;Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string &lt;code&gt;[redacted]&lt;/code&gt; or a similar placeholder. The &lt;code&gt;metadata&lt;/code&gt; field will also be erased. Redacted objects cannot be updated or used for any purpose.&lt;/p&gt;  &lt;p&gt;&lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#redact\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
  # @param session
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IdentityVerificationSession]
  describe "post_identity_verification_sessions_session_redact test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoiceitems
  # &lt;p&gt;Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.&lt;/p&gt;
  # @param customer The ID of the customer who will be billed when this invoice item is billed.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. Passing in a negative &#x60;amount&#x60; will reduce the &#x60;amount_due&#x60; on the invoice.
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
  # @option opts [Bool] :discountable Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items.
  # @option opts [PostInvoiceitemsRequestDiscounts] :discounts
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :invoice The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices and there is a maximum of 250 items per invoice.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Period] :period
  # @option opts [String] :price The ID of the price object.
  # @option opts [OneTimePriceData] :price_data
  # @option opts [Int32] :quantity Non-negative integer. The quantity of units for the invoice item.
  # @option opts [String] :subscription The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription.
  # @option opts [Array(String)] :tax_rates The tax rates which apply to the invoice item. When set, the &#x60;default_tax_rates&#x60; on the invoice do not apply to this invoice item.
  # @option opts [Int32] :unit_amount The integer unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This &#x60;unit_amount&#x60; will be multiplied by the quantity to get the full amount. Passing in a negative &#x60;unit_amount&#x60; will reduce the &#x60;amount_due&#x60; on the invoice.
  # @option opts [String] :unit_amount_decimal Same as &#x60;unit_amount&#x60;, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of &#x60;unit_amount&#x60; and &#x60;unit_amount_decimal&#x60; can be set.
  # @return [Invoiceitem]
  describe "post_invoiceitems test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoiceitems_invoiceitem
  # &lt;p&gt;Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.&lt;/p&gt;
  # @param invoiceitem
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer&#39;s account, pass a negative amount.
  # @option opts [String] :description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
  # @option opts [Bool] :discountable Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations.
  # @option opts [PostInvoiceitemsInvoiceitemRequestDiscounts] :discounts
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Period] :period
  # @option opts [String] :price The ID of the price object.
  # @option opts [OneTimePriceData] :price_data
  # @option opts [Int32] :quantity Non-negative integer. The quantity of units for the invoice item.
  # @option opts [PostInvoiceitemsInvoiceitemRequestTaxRates] :tax_rates
  # @option opts [Int32] :unit_amount The integer unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer&#39;s account, pass a negative unit_amount.
  # @option opts [String] :unit_amount_decimal Same as &#x60;unit_amount&#x60;, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of &#x60;unit_amount&#x60; and &#x60;unit_amount_decimal&#x60; can be set.
  # @return [Invoiceitem]
  describe "post_invoiceitems_invoiceitem test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoices
  # &lt;p&gt;This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you &lt;a href&#x3D;\&quot;#finalize_invoice\&quot;&gt;finalize&lt;/a&gt; the invoice, which allows you to &lt;a href&#x3D;\&quot;#pay_invoice\&quot;&gt;pay&lt;/a&gt; or &lt;a href&#x3D;\&quot;#send_invoice\&quot;&gt;send&lt;/a&gt; the invoice to your customers.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostInvoicesRequestAccountTaxIds] :account_tax_ids
  # @option opts [Int32] :application_fee_amount A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner&#39;s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
  # @option opts [Bool] :auto_advance Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When &#x60;false&#x60;, the invoice&#39;s state will not automatically advance without an explicit action.
  # @option opts [AutomaticTaxParam] :automatic_tax
  # @option opts [String] :collection_method Either &#x60;charge_automatically&#x60;, or &#x60;send_invoice&#x60;. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to &#x60;charge_automatically&#x60;.
  # @option opts [String] :currency The currency to create this invoice in. Defaults to that of &#x60;customer&#x60; if not specified.
  # @option opts [PostInvoicesRequestCustomFields] :custom_fields
  # @option opts [String] :customer The ID of the customer who will be billed.
  # @option opts [Int32] :days_until_due The number of days from when the invoice is created until it is due. Valid only for invoices where &#x60;collection_method&#x3D;send_invoice&#x60;.
  # @option opts [String] :default_payment_method ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription&#39;s default payment method, if any, or to the default payment method in the customer&#39;s invoice settings.
  # @option opts [String] :default_source ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription&#39;s default source, if any, or to the customer&#39;s default source.
  # @option opts [Array(String)] :default_tax_rates The tax rates that will apply to any line item that does not have &#x60;tax_rates&#x60; set.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as &#39;memo&#39; in the Dashboard.
  # @option opts [PostInvoicesRequestDiscounts] :discounts
  # @option opts [Int32] :due_date The date on which payment for this invoice is due. Valid only for invoices where &#x60;collection_method&#x3D;send_invoice&#x60;.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :footer Footer to be displayed on the invoice.
  # @option opts [FromInvoice] :from_invoice
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :on_behalf_of The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
  # @option opts [PaymentSettings] :payment_settings
  # @option opts [String] :pending_invoice_items_behavior How to handle pending invoice items on invoice creation. One of &#x60;include&#x60; or &#x60;exclude&#x60;. &#x60;include&#x60; will include any pending invoice items, and will create an empty draft invoice if no pending invoice items exist. &#x60;exclude&#x60; will always create an empty invoice draft regardless if there are pending invoice items or not. Defaults to &#x60;exclude&#x60; if the parameter is omitted.
  # @option opts [PostInvoicesRequestRenderingOptions] :rendering_options
  # @option opts [String] :statement_descriptor Extra information about a charge for the customer&#39;s credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default &#x60;statement_descriptor&#x60; will be set to the first subscription item&#39;s product&#39;s &#x60;statement_descriptor&#x60;.
  # @option opts [String] :subscription The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription and pending invoice items not associated with any subscription if &#x60;pending_invoice_items_behavior&#x60; is &#x60;include&#x60;. The subscription&#39;s billing cycle and regular subscription events won&#39;t be affected.
  # @option opts [TransferDataSpecs] :transfer_data
  # @return [Invoice]
  describe "post_invoices test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoices_invoice
  # &lt;p&gt;Draft invoices are fully editable. Once an invoice is &lt;a href&#x3D;\&quot;/docs/billing/invoices/workflow#finalized\&quot;&gt;finalized&lt;/a&gt;, monetary values, as well as &lt;code&gt;collection_method&lt;/code&gt;, become uneditable.&lt;/p&gt;  &lt;p&gt;If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or &lt;a href&#x3D;\&quot;/docs/billing/invoices/reconciliation\&quot;&gt;automatically reconciling&lt;/a&gt; invoices, pass &lt;code&gt;auto_advance&#x3D;false&lt;/code&gt;.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @option opts [PostInvoicesRequestAccountTaxIds] :account_tax_ids
  # @option opts [Int32] :application_fee_amount A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner&#39;s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
  # @option opts [Bool] :auto_advance Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice.
  # @option opts [AutomaticTaxParam] :automatic_tax
  # @option opts [String] :collection_method Either &#x60;charge_automatically&#x60; or &#x60;send_invoice&#x60;. This field can be updated only on &#x60;draft&#x60; invoices.
  # @option opts [PostInvoicesInvoiceRequestCustomFields] :custom_fields
  # @option opts [Int32] :days_until_due The number of days from which the invoice is created until it is due. Only valid for invoices where &#x60;collection_method&#x3D;send_invoice&#x60;. This field can only be updated on &#x60;draft&#x60; invoices.
  # @option opts [String] :default_payment_method ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription&#39;s default payment method, if any, or to the default payment method in the customer&#39;s invoice settings.
  # @option opts [String] :default_source ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription&#39;s default source, if any, or to the customer&#39;s default source.
  # @option opts [PostInvoicesInvoiceRequestDefaultTaxRates] :default_tax_rates
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as &#39;memo&#39; in the Dashboard.
  # @option opts [PostInvoicesInvoiceRequestDiscounts] :discounts
  # @option opts [Int32] :due_date The date on which payment for this invoice is due. Only valid for invoices where &#x60;collection_method&#x3D;send_invoice&#x60;. This field can only be updated on &#x60;draft&#x60; invoices.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :footer Footer to be displayed on the invoice.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [PostInvoicesInvoiceRequestOnBehalfOf] :on_behalf_of
  # @option opts [PaymentSettings] :payment_settings
  # @option opts [PostInvoicesRequestRenderingOptions] :rendering_options
  # @option opts [String] :statement_descriptor Extra information about a charge for the customer&#39;s credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default &#x60;statement_descriptor&#x60; will be set to the first subscription item&#39;s product&#39;s &#x60;statement_descriptor&#x60;.
  # @option opts [PostInvoicesInvoiceRequestTransferData] :transfer_data
  # @return [Invoice]
  describe "post_invoices_invoice test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoices_invoice_finalize
  # &lt;p&gt;Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :auto_advance Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/invoicing/automatic-charging) of the invoice. When &#x60;false&#x60;, the invoice&#39;s state will not automatically advance without an explicit action.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Invoice]
  describe "post_invoices_invoice_finalize test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoices_invoice_mark_uncollectible
  # &lt;p&gt;Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Invoice]
  describe "post_invoices_invoice_mark_uncollectible test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoices_invoice_pay
  # &lt;p&gt;Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :forgive In cases where the source used to pay the invoice has insufficient funds, passing &#x60;forgive&#x3D;true&#x60; controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.   Passing &#x60;forgive&#x3D;false&#x60; will fail the charge if the source hasn&#39;t been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to &#x60;false&#x60;.
  # @option opts [String] :mandate ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the payment_method param or the invoice&#39;s default_payment_method or default_source, if set.
  # @option opts [Bool] :off_session Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to &#x60;true&#x60; (off-session).
  # @option opts [Bool] :paid_out_of_band Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to &#x60;false&#x60;.
  # @option opts [String] :payment_method A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid.
  # @option opts [String] :source A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.
  # @return [Invoice]
  describe "post_invoices_invoice_pay test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoices_invoice_send
  # &lt;p&gt;Stripe will automatically send invoices to customers according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.&lt;/p&gt;  &lt;p&gt;Requests made in test-mode result in no emails being sent, despite sending an &lt;code&gt;invoice.sent&lt;/code&gt; event.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Invoice]
  describe "post_invoices_invoice_send test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_invoices_invoice_void
  # &lt;p&gt;Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to &lt;a href&#x3D;\&quot;#delete_invoice\&quot;&gt;deletion&lt;/a&gt;, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.&lt;/p&gt;
  # @param invoice
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Invoice]
  describe "post_invoices_invoice_void test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_authorizations_authorization
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param authorization
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [IssuingAuthorization]
  describe "post_issuing_authorizations_authorization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_authorizations_authorization_approve
  # &lt;p&gt;Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.&lt;/p&gt;
  # @param authorization
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount If the authorization&#39;s &#x60;pending_request.is_amount_controllable&#x60; property is &#x60;true&#x60;, you may provide this value to control how much to hold for the authorization. Must be positive (use [&#x60;decline&#x60;](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [IssuingAuthorization]
  describe "post_issuing_authorizations_authorization_approve test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_authorizations_authorization_decline
  # &lt;p&gt;Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow.&lt;/p&gt;
  # @param authorization
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [IssuingAuthorization]
  describe "post_issuing_authorizations_authorization_decline test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_cardholders
  # &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
  # @param billing
  # @param name The cardholder&#39;s name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.
  # @param _type One of &#x60;individual&#x60; or &#x60;company&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [CompanyParam] :company
  # @option opts [String] :email The cardholder&#39;s email address.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [IndividualParam] :individual
  # @option opts [String] :phone_number The cardholder&#39;s phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
  # @option opts [AuthorizationControlsParamV2] :spending_controls
  # @option opts [String] :status Specifies whether to permit authorizations on this cardholder&#39;s cards. Defaults to &#x60;active&#x60;.
  # @return [IssuingCardholder]
  describe "post_issuing_cardholders test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_cardholders_cardholder
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param cardholder
  # @param [Hash] opts the optional parameters
  # @option opts [BillingSpecs] :billing
  # @option opts [CompanyParam] :company
  # @option opts [String] :email The cardholder&#39;s email address.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [IndividualParam] :individual
  # @option opts [String] :phone_number The cardholder&#39;s phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure) for more details.
  # @option opts [AuthorizationControlsParamV2] :spending_controls
  # @option opts [String] :status Specifies whether to permit authorizations on this cardholder&#39;s cards.
  # @return [IssuingCardholder]
  describe "post_issuing_cardholders_cardholder test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_cards
  # &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
  # @param currency The currency for the card.
  # @param _type The type of card to issue. Possible values are &#x60;physical&#x60; or &#x60;virtual&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cardholder The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :financial_account
  # @option opts [String] :replacement_for The card this is meant to be a replacement for (if any).
  # @option opts [String] :replacement_reason If &#x60;replacement_for&#x60; is specified, this should indicate why that card is being replaced.
  # @option opts [ShippingSpecs] :shipping
  # @option opts [AuthorizationControlsParam] :spending_controls
  # @option opts [String] :status Whether authorizations can be approved on this card. Defaults to &#x60;inactive&#x60;.
  # @return [IssuingCard]
  describe "post_issuing_cards test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_cards_card
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cancellation_reason Reason why the &#x60;status&#x60; of this card is &#x60;canceled&#x60;.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [EncryptedPinParam] :pin
  # @option opts [AuthorizationControlsParam] :spending_controls
  # @option opts [String] :status Dictates whether authorizations can be approved on this card. If this card is being canceled because it was lost or stolen, this information should be provided as &#x60;cancellation_reason&#x60;.
  # @return [IssuingCard]
  describe "post_issuing_cards_card test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_disputes
  # &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The dispute amount in the card&#39;s currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If not set, defaults to the full transaction amount.
  # @option opts [EvidenceParam] :evidence
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :transaction The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use &#x60;treasury.received_debit&#x60;.
  # @option opts [TreasuryParam] :treasury
  # @return [IssuingDispute]
  describe "post_issuing_disputes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_disputes_dispute
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount The dispute amount in the card&#39;s currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  # @option opts [EvidenceParam] :evidence
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [IssuingDispute]
  describe "post_issuing_disputes_dispute test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_disputes_dispute_submit
  # &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
  # @param dispute
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [IssuingDispute]
  describe "post_issuing_disputes_dispute_submit test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_issuing_transactions_transaction
  # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [IssuingTransaction]
  describe "post_issuing_transactions_transaction test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_orders
  # &lt;p&gt;Creates a new &lt;code&gt;open&lt;/code&gt; order object.&lt;/p&gt;
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param line_items A list of line items the customer is ordering. Each line item includes information about the product, the quantity, and the resulting cost.
  # @param [Hash] opts the optional parameters
  # @option opts [AutomaticTax] :automatic_tax
  # @option opts [PostOrdersRequestBillingDetails] :billing_details
  # @option opts [ClientPermissions] :client_permissions
  # @option opts [String] :customer The customer associated with this order.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [PostOrdersRequestDiscounts] :discounts
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :ip_address The IP address of the purchaser for this order.
  # @option opts [CreateParams] :payment
  # @option opts [PostOrdersRequestShippingCost] :shipping_cost
  # @option opts [PostOrdersRequestShippingDetails] :shipping_details
  # @option opts [TaxDetails] :tax_details
  # @return [Order]
  describe "post_orders test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_orders_id
  # &lt;p&gt;Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [AutomaticTax] :automatic_tax
  # @option opts [PostOrdersRequestBillingDetails] :billing_details
  # @option opts [ClientPermissions] :client_permissions
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :customer The customer associated with this order.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [PostOrdersIdRequestDiscounts] :discounts
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :ip_address The IP address of the purchaser for this order.
  # @option opts [Array(UpdateParams)] :line_items A list of line items the customer is ordering. Each line item includes information about the product, the quantity, and the resulting cost.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [UpdateParams] :payment
  # @option opts [PostOrdersRequestShippingCost] :shipping_cost
  # @option opts [PostOrdersRequestShippingDetails] :shipping_details
  # @option opts [TaxDetails] :tax_details
  # @return [Order]
  describe "post_orders_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents
  # &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. You can read more about the different payment flows available via the Payment Intents API &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is supplied.&lt;/p&gt;
  # @param amount Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :application_fee_amount The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner&#39;s Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @option opts [AutomaticPaymentMethodsParam] :automatic_payment_methods
  # @option opts [String] :capture_method Controls when the funds will be captured from the customer&#39;s account.
  # @option opts [Bool] :confirm Set to &#x60;true&#x60; to attempt to [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent immediately. This parameter defaults to &#x60;false&#x60;. When creating and confirming a PaymentIntent at the same time, parameters available in the [confirm](https://stripe.com/docs/api/payment_intents/confirm) API may also be provided.
  # @option opts [String] :confirmation_method
  # @option opts [String] :customer ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent&#39;s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Bool] :error_on_requires_action Set to &#x60;true&#x60; to fail the payment attempt if the PaymentIntent transitions into &#x60;requires_action&#x60;. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [&#x60;confirm&#x3D;true&#x60;](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :mandate ID of the mandate to be used for this payment. This parameter can only be used with [&#x60;confirm&#x3D;true&#x60;](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  # @option opts [SecretKeyParam] :mandate_data
  # @option opts [PostPaymentIntentsRequestOffSession] :off_session
  # @option opts [String] :on_behalf_of The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.  If this parameter is omitted with &#x60;confirm&#x3D;true&#x60;, &#x60;customer.default_source&#x60; will be attached as this PaymentIntent&#39;s payment instrument to improve the migration experience for users of the Charges API. We recommend that you explicitly provide the &#x60;payment_method&#x60; going forward.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. If this is not provided, defaults to [\\\&quot;card\\\&quot;]. Use automatic_payment_methods to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
  # @option opts [RadarOptions] :radar_options
  # @option opts [String] :receipt_email Email address that the receipt for the resulting payment will be sent to. If &#x60;receipt_email&#x60; is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  # @option opts [String] :return_url The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method&#39;s app or site. If you&#39;d prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [&#x60;confirm&#x3D;true&#x60;](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  # @option opts [String] :setup_future_usage Indicates that you intend to make future payments with this PaymentIntent&#39;s payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent&#39;s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses &#x60;setup_future_usage&#x60; to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  # @option opts [OptionalFieldsShipping] :shipping
  # @option opts [String] :statement_descriptor For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  # @option opts [String] :statement_descriptor_suffix Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  # @option opts [TransferDataCreationParams] :transfer_data
  # @option opts [String] :transfer_group A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
  # @option opts [Bool] :use_stripe_sdk Set to &#x60;true&#x60; only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps.
  # @return [PaymentIntent]
  describe "post_payment_intents test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent
  # &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  # @option opts [PostPaymentIntentsIntentRequestApplicationFeeAmount] :application_fee_amount
  # @option opts [String] :capture_method Controls when the funds will be captured from the customer&#39;s account.
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :customer ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent&#39;s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. Use automatic_payment_methods to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
  # @option opts [PostPaymentIntentsIntentRequestReceiptEmail] :receipt_email
  # @option opts [String] :setup_future_usage Indicates that you intend to make future payments with this PaymentIntent&#39;s payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent&#39;s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses &#x60;setup_future_usage&#x60; to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).  If &#x60;setup_future_usage&#x60; is already set and you are performing a request using a publishable key, you may only update the value from &#x60;on_session&#x60; to &#x60;off_session&#x60;.
  # @option opts [PostPaymentIntentsIntentRequestShipping] :shipping
  # @option opts [String] :statement_descriptor For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  # @option opts [String] :statement_descriptor_suffix Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  # @option opts [TransferDataUpdateParams] :transfer_data
  # @option opts [String] :transfer_group A string that identifies the resulting payment as part of a group. &#x60;transfer_group&#x60; may only be provided if it has not been set. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_apply_customer_balance
  # &lt;p&gt;Manually reconcile the remaining amount for a customer_balance PaymentIntent.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount Amount intended to be applied to this PaymentIntent from the customer’s cash balance.  A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency).  The maximum amount is the amount of the PaymentIntent.  When omitted, the amount defaults to the remaining amount requested on the PaymentIntent.
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_apply_customer_balance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_cancel
  # &lt;p&gt;A PaymentIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt;, or &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with &lt;code&gt;status&#x3D;’requires_capture’&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; will automatically be refunded. &lt;/p&gt;  &lt;p&gt;You cannot cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cancellation_reason Reason for canceling this PaymentIntent. Possible values are &#x60;duplicate&#x60;, &#x60;fraudulent&#x60;, &#x60;requested_by_customer&#x60;, or &#x60;abandoned&#x60;
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_capture
  # &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount_to_capture The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. Defaults to the full &#x60;amount_capturable&#x60; if not provided.
  # @option opts [Int32] :application_fee_amount The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner&#39;s Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :statement_descriptor For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  # @option opts [String] :statement_descriptor_suffix Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
  # @option opts [TransferDataUpdateParams] :transfer_data
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_capture test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_confirm
  # &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment.&lt;/p&gt;  &lt;p&gt;If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;).&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment.&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the &lt;a href&#x3D;\&quot;/docs/payments/payment-intents/web-manual\&quot;&gt;expanded documentation&lt;/a&gt; to learn more about manual confirmation.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [String] :capture_method Controls when the funds will be captured from the customer&#39;s account.
  # @option opts [String] :client_secret The client secret of the PaymentIntent.
  # @option opts [Bool] :error_on_requires_action Set to &#x60;true&#x60; to fail the payment attempt if the PaymentIntent transitions into &#x60;requires_action&#x60;. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :mandate ID of the mandate to be used for this payment.
  # @option opts [PostPaymentIntentsIntentConfirmRequestMandateData] :mandate_data
  # @option opts [PostPaymentIntentsIntentConfirmRequestOffSession] :off_session
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. Use automatic_payment_methods to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).
  # @option opts [RadarOptions] :radar_options
  # @option opts [PostPaymentIntentsIntentRequestReceiptEmail] :receipt_email
  # @option opts [String] :return_url The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method&#39;s app or site. If you&#39;d prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
  # @option opts [String] :setup_future_usage Indicates that you intend to make future payments with this PaymentIntent&#39;s payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent&#39;s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses &#x60;setup_future_usage&#x60; to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).  If &#x60;setup_future_usage&#x60; is already set and you are performing a request using a publishable key, you may only update the value from &#x60;on_session&#x60; to &#x60;off_session&#x60;.
  # @option opts [PostPaymentIntentsIntentRequestShipping] :shipping
  # @option opts [Bool] :use_stripe_sdk Set to &#x60;true&#x60; only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_confirm test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_increment_authorization
  # &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. As with the initial authorization, incremental authorizations may be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object is returned with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error is returned, and no fields on the PaymentIntent or Charge are updated. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. Once captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
  # @param intent
  # @param amount The updated total amount you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :application_fee_amount The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner&#39;s Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :statement_descriptor For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
  # @option opts [TransferDataUpdateParams] :transfer_data
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_increment_authorization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_intents_intent_verify_microdeposits
  # &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Array(Int32)] :amounts Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  # @option opts [String] :client_secret The client secret of the PaymentIntent.
  # @option opts [String] :descriptor_code A six-character code starting with SM present in the microdeposit sent to the bank account.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentIntent]
  describe "post_payment_intents_intent_verify_microdeposits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_links
  # &lt;p&gt;Creates a payment link.&lt;/p&gt;
  # @param line_items The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
  # @param [Hash] opts the optional parameters
  # @option opts [AfterCompletionParams] :after_completion
  # @option opts [Bool] :allow_promotion_codes Enables user redeemable promotion codes.
  # @option opts [Int32] :application_fee_amount The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner&#39;s Stripe account. Can only be applied when there are no line items with recurring prices.
  # @option opts [Float64] :application_fee_percent A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner&#39;s Stripe account. There must be at least 1 line item with a recurring price to use this field.
  # @option opts [AutomaticTaxParams] :automatic_tax
  # @option opts [String] :billing_address_collection Configuration for collecting the customer&#39;s billing address.
  # @option opts [ConsentCollectionParams] :consent_collection
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies) and supported by each line item&#39;s price.
  # @option opts [String] :customer_creation Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :on_behalf_of The account on behalf of which to charge.
  # @option opts [PaymentIntentDataParams] :payment_intent_data
  # @option opts [String] :payment_method_collection Specify whether Checkout should collect a payment method. When set to &#x60;if_required&#x60;, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in &#x60;subscription&#x60; mode.  If you&#39;d like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
  # @option opts [Array(String)] :payment_method_types The list of payment method types that customers can use. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)).
  # @option opts [PhoneNumberCollectionParams] :phone_number_collection
  # @option opts [ShippingAddressCollectionParams] :shipping_address_collection
  # @option opts [Array(ShippingOptionParams)] :shipping_options The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
  # @option opts [String] :submit_type Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: &#x60;donate.stripe.com&#x60;).
  # @option opts [SubscriptionDataParams] :subscription_data
  # @option opts [TaxIdCollectionParams] :tax_id_collection
  # @option opts [TransferDataParams] :transfer_data
  # @return [PaymentLink]
  describe "post_payment_links test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_links_payment_link
  # &lt;p&gt;Updates a payment link.&lt;/p&gt;
  # @param payment_link
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the payment link&#39;s &#x60;url&#x60; is active. If &#x60;false&#x60;, customers visiting the URL will be shown a page saying that the link has been deactivated.
  # @option opts [AfterCompletionParams] :after_completion
  # @option opts [Bool] :allow_promotion_codes Enables user redeemable promotion codes.
  # @option opts [AutomaticTaxParams] :automatic_tax
  # @option opts [String] :billing_address_collection Configuration for collecting the customer&#39;s billing address.
  # @option opts [String] :customer_creation Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(LineItemsUpdateParams)] :line_items The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
  # @option opts [String] :payment_method_collection Specify whether Checkout should collect a payment method. When set to &#x60;if_required&#x60;, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in &#x60;subscription&#x60; mode.  If you&#39;d like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
  # @option opts [PostPaymentLinksPaymentLinkRequestPaymentMethodTypes] :payment_method_types
  # @option opts [PostPaymentLinksPaymentLinkRequestShippingAddressCollection] :shipping_address_collection
  # @return [PaymentLink]
  describe "post_payment_links_payment_link test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods
  # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostPaymentMethodsRequestAcssDebit] :acss_debit
  # @option opts [JSON::Any] :affirm If this is an &#x60;affirm&#x60; PaymentMethod, this hash contains details about the Affirm payment method.
  # @option opts [JSON::Any] :afterpay_clearpay If this is an &#x60;AfterpayClearpay&#x60; PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
  # @option opts [JSON::Any] :alipay If this is an &#x60;Alipay&#x60; PaymentMethod, this hash contains details about the Alipay payment method.
  # @option opts [PostPaymentMethodsRequestAuBecsDebit] :au_becs_debit
  # @option opts [PostPaymentMethodsRequestBacsDebit] :bacs_debit
  # @option opts [JSON::Any] :bancontact If this is a &#x60;bancontact&#x60; PaymentMethod, this hash contains details about the Bancontact payment method.
  # @option opts [BillingDetailsInnerParams] :billing_details
  # @option opts [JSON::Any] :blik If this is a &#x60;blik&#x60; PaymentMethod, this hash contains details about the BLIK payment method.
  # @option opts [PostPaymentMethodsRequestBoleto] :boleto
  # @option opts [PostPaymentMethodsRequestCard] :card
  # @option opts [String] :customer The &#x60;Customer&#x60; to whom the original PaymentMethod is attached.
  # @option opts [JSON::Any] :customer_balance If this is a &#x60;customer_balance&#x60; PaymentMethod, this hash contains details about the CustomerBalance payment method.
  # @option opts [PostPaymentMethodsRequestEps] :eps
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostPaymentMethodsRequestFpx] :fpx
  # @option opts [JSON::Any] :giropay If this is a &#x60;giropay&#x60; PaymentMethod, this hash contains details about the Giropay payment method.
  # @option opts [JSON::Any] :grabpay If this is a &#x60;grabpay&#x60; PaymentMethod, this hash contains details about the GrabPay payment method.
  # @option opts [PostPaymentMethodsRequestIdeal] :ideal
  # @option opts [JSON::Any] :interac_present If this is an &#x60;interac_present&#x60; PaymentMethod, this hash contains details about the Interac Present payment method.
  # @option opts [PostPaymentMethodsRequestKlarna] :klarna
  # @option opts [JSON::Any] :konbini If this is a &#x60;konbini&#x60; PaymentMethod, this hash contains details about the Konbini payment method.
  # @option opts [JSON::Any] :link If this is an &#x60;Link&#x60; PaymentMethod, this hash contains details about the Link payment method.
  # @option opts [JSON::Any] :oxxo If this is an &#x60;oxxo&#x60; PaymentMethod, this hash contains details about the OXXO payment method.
  # @option opts [PostPaymentMethodsRequestP24] :p24
  # @option opts [String] :payment_method The PaymentMethod to share.
  # @option opts [JSON::Any] :paynow If this is a &#x60;paynow&#x60; PaymentMethod, this hash contains details about the PayNow payment method.
  # @option opts [JSON::Any] :pix If this is a &#x60;pix&#x60; PaymentMethod, this hash contains details about the Pix payment method.
  # @option opts [JSON::Any] :promptpay If this is a &#x60;promptpay&#x60; PaymentMethod, this hash contains details about the PromptPay payment method.
  # @option opts [RadarOptions] :radar_options
  # @option opts [PostPaymentMethodsRequestSepaDebit] :sepa_debit
  # @option opts [PostPaymentMethodsRequestSofort] :sofort
  # @option opts [String] :_type The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  # @option opts [PostPaymentMethodsRequestUsBankAccount] :us_bank_account
  # @option opts [JSON::Any] :wechat_pay If this is an &#x60;wechat_pay&#x60; PaymentMethod, this hash contains details about the wechat_pay payment method.
  # @return [PaymentMethod]
  describe "post_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method
  # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [BillingDetailsInnerParams] :billing_details
  # @option opts [UpdateApiParam] :card
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [JSON::Any] :link If this is an &#x60;Link&#x60; PaymentMethod, this hash contains details about the Link payment method.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [UpdateParam] :us_bank_account
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method_attach
  # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint without first using a SetupIntent or PaymentIntent with &lt;code&gt;setup_future_usage&lt;/code&gt; does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
  # @param payment_method
  # @param customer The ID of the customer to which to attach the PaymentMethod.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method_attach test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method_detach
  # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method_detach test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payouts
  # &lt;p&gt;To send funds to your own bank account, you create a new payout object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The &lt;a href&#x3D;\&quot;#balance_object\&quot;&gt;balance object&lt;/a&gt; details available and pending amounts by source type.&lt;/p&gt;
  # @param amount A positive integer in cents representing how much to payout.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [String] :destination The ID of a bank account or a card to send the payout to. If no destination is supplied, the default external account for the specified currency will be used.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :method The method used to send this payout, which can be &#x60;standard&#x60; or &#x60;instant&#x60;. &#x60;instant&#x60; is only supported for payouts to debit cards. (See [Instant payouts for marketplaces for more information](https://stripe.com/blog/instant-payouts-for-marketplaces).)
  # @option opts [String] :source_type The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. One of &#x60;bank_account&#x60;, &#x60;card&#x60;, or &#x60;fpx&#x60;.
  # @option opts [String] :statement_descriptor A string to be displayed on the recipient&#39;s bank or card statement. This may be at most 22 characters. Attempting to use a &#x60;statement_descriptor&#x60; longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all.
  # @return [Payout]
  describe "post_payouts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payouts_payout
  # &lt;p&gt;Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.&lt;/p&gt;
  # @param payout
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [Payout]
  describe "post_payouts_payout test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payouts_payout_cancel
  # &lt;p&gt;A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.&lt;/p&gt;
  # @param payout
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Payout]
  describe "post_payouts_payout_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payouts_payout_reverse
  # &lt;p&gt;Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the &lt;code&gt;pending&lt;/code&gt; status, &lt;code&gt;/v1/payouts/:id/cancel&lt;/code&gt; should be used instead.&lt;/p&gt;  &lt;p&gt;By requesting a reversal via &lt;code&gt;/v1/payouts/:id/reverse&lt;/code&gt;, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.&lt;/p&gt;
  # @param payout
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Payout]
  describe "post_payouts_payout_reverse test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_prices
  # &lt;p&gt;Creates a new price for an existing product. The price can be recurring or one-time.&lt;/p&gt;
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the price can be used for new purchases. Defaults to &#x60;true&#x60;.
  # @option opts [String] :billing_scheme Describes how to compute the price per period. Either &#x60;per_unit&#x60; or &#x60;tiered&#x60;. &#x60;per_unit&#x60; indicates that the fixed amount (specified in &#x60;unit_amount&#x60; or &#x60;unit_amount_decimal&#x60;) will be charged per unit in &#x60;quantity&#x60; (for prices with &#x60;usage_type&#x3D;licensed&#x60;), or per unit of total usage (for prices with &#x60;usage_type&#x3D;metered&#x60;). &#x60;tiered&#x60; indicates that the unit pricing will be computed using a tiering strategy as defined using the &#x60;tiers&#x60; and &#x60;tiers_mode&#x60; attributes.
  # @option opts [CustomUnitAmount] :custom_unit_amount
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :lookup_key A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
  # @option opts [String] :nickname A brief description of the price, hidden from customers.
  # @option opts [String] :product The ID of the product that this price will belong to.
  # @option opts [InlineProductParams] :product_data
  # @option opts [Recurring] :recurring
  # @option opts [String] :tax_behavior Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of &#x60;inclusive&#x60;, &#x60;exclusive&#x60;, or &#x60;unspecified&#x60;. Once specified as either &#x60;inclusive&#x60; or &#x60;exclusive&#x60;, it cannot be changed.
  # @option opts [Array(Tier)] :tiers Each element represents a pricing tier. This parameter requires &#x60;billing_scheme&#x60; to be set to &#x60;tiered&#x60;. See also the documentation for &#x60;billing_scheme&#x60;.
  # @option opts [String] :tiers_mode Defines if the tiering price should be &#x60;graduated&#x60; or &#x60;volume&#x60; based. In &#x60;volume&#x60;-based tiering, the maximum quantity within a period determines the per unit price, in &#x60;graduated&#x60; tiering pricing can successively change as the quantity grows.
  # @option opts [Bool] :transfer_lookup_key If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
  # @option opts [TransformUsageParam] :transform_quantity
  # @option opts [Int32] :unit_amount A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. One of &#x60;unit_amount&#x60; or &#x60;custom_unit_amount&#x60; is required, unless &#x60;billing_scheme&#x3D;tiered&#x60;.
  # @option opts [String] :unit_amount_decimal Same as &#x60;unit_amount&#x60;, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of &#x60;unit_amount&#x60; and &#x60;unit_amount_decimal&#x60; can be set.
  # @return [Price]
  describe "post_prices test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_prices_price
  # &lt;p&gt;Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.&lt;/p&gt;
  # @param price
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the price can be used for new purchases. Defaults to &#x60;true&#x60;.
  # @option opts [PostPricesPriceRequestCurrencyOptions] :currency_options
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :lookup_key A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :nickname A brief description of the price, hidden from customers.
  # @option opts [String] :tax_behavior Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of &#x60;inclusive&#x60;, &#x60;exclusive&#x60;, or &#x60;unspecified&#x60;. Once specified as either &#x60;inclusive&#x60; or &#x60;exclusive&#x60;, it cannot be changed.
  # @option opts [Bool] :transfer_lookup_key If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
  # @return [Price]
  describe "post_prices_price test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_products
  # &lt;p&gt;Creates a new product object.&lt;/p&gt;
  # @param name The product&#39;s name, meant to be displayable to the customer.
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the product is currently available for purchase. Defaults to &#x60;true&#x60;.
  # @option opts [PriceDataWithoutProduct] :default_price_data
  # @option opts [String] :description The product&#39;s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :id An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.
  # @option opts [Array(String)] :images A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
  # @option opts [PackageDimensionsSpecs] :package_dimensions
  # @option opts [Bool] :shippable Whether this product is shipped (i.e., physical goods).
  # @option opts [String] :statement_descriptor An arbitrary string to be displayed on your customer&#39;s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include &#x60;&lt;&#x60;, &#x60;&gt;&#x60;, &#x60;\\\\&#x60;, &#x60;\\\&quot;&#x60;, &#x60;&#39;&#x60; characters, and will appear on your customer&#39;s statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter.
  # @option opts [String] :tax_code A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
  # @option opts [String] :unit_label A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
  # @option opts [String] :url A URL of a publicly-accessible webpage for this product.
  # @return [Product]
  describe "post_products test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_products_id
  # &lt;p&gt;Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the product is available for purchase.
  # @option opts [String] :default_price The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
  # @option opts [String] :description The product&#39;s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostProductsIdRequestImages] :images
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :name The product&#39;s name, meant to be displayable to the customer.
  # @option opts [PostProductsIdRequestPackageDimensions] :package_dimensions
  # @option opts [Bool] :shippable Whether this product is shipped (i.e., physical goods).
  # @option opts [String] :statement_descriptor An arbitrary string to be displayed on your customer&#39;s credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include &#x60;&lt;&#x60;, &#x60;&gt;&#x60;, &#x60;\\\\&#x60;, &#x60;\\\&quot;&#x60;, &#x60;&#39;&#x60; characters, and will appear on your customer&#39;s statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter. May only be set if &#x60;type&#x3D;service&#x60;.
  # @option opts [PostProductsIdRequestTaxCode] :tax_code
  # @option opts [String] :unit_label A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if &#x60;type&#x3D;service&#x60;.
  # @option opts [PostProductsIdRequestUrl] :url
  # @return [Product]
  describe "post_products_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_promotion_codes
  # &lt;p&gt;A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.&lt;/p&gt;
  # @param coupon The coupon for this promotion code.
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the promotion code is currently active.
  # @option opts [String] :code The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically.
  # @option opts [String] :customer The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :expires_at The timestamp at which this promotion code will expire. If the coupon has specified a &#x60;redeems_by&#x60;, then this value cannot be after the coupon&#39;s &#x60;redeems_by&#x60;.
  # @option opts [Int32] :max_redemptions A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a &#x60;max_redemptions&#x60;, then this value cannot be greater than the coupon&#39;s &#x60;max_redemptions&#x60;.
  # @option opts [RestrictionsParams] :restrictions
  # @return [PromotionCode]
  describe "post_promotion_codes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_promotion_codes_promotion_code
  # &lt;p&gt;Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.&lt;/p&gt;
  # @param promotion_code
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [RestrictionsParams] :restrictions
  # @return [PromotionCode]
  describe "post_promotion_codes_promotion_code test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_quotes
  # &lt;p&gt;A quote models prices and services for a customer. Default options for &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;expires_at&lt;/code&gt; can be set in the dashboard via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/settings/billing/quote\&quot;&gt;quote template&lt;/a&gt;.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostQuotesRequestApplicationFeeAmount] :application_fee_amount
  # @option opts [PostQuotesRequestApplicationFeePercent] :application_fee_percent
  # @option opts [AutomaticTaxParam] :automatic_tax
  # @option opts [String] :collection_method Either &#x60;charge_automatically&#x60;, or &#x60;send_invoice&#x60;. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as &#x60;active&#x60;. Defaults to &#x60;charge_automatically&#x60;.
  # @option opts [String] :customer The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  # @option opts [PostQuotesRequestDefaultTaxRates] :default_tax_rates
  # @option opts [String] :description A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
  # @option opts [PostQuotesRequestDiscounts] :discounts
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :expires_at A future timestamp on which the quote will be canceled if in &#x60;open&#x60; or &#x60;draft&#x60; status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
  # @option opts [String] :footer A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
  # @option opts [FromQuoteParams] :from_quote
  # @option opts [String] :header A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
  # @option opts [QuoteParam] :invoice_settings
  # @option opts [Array(LineItemCreateParams)] :line_items A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
  # @option opts [PostQuotesRequestOnBehalfOf] :on_behalf_of
  # @option opts [SubscriptionDataCreateParams] :subscription_data
  # @option opts [String] :test_clock ID of the test clock to attach to the quote.
  # @option opts [PostQuotesRequestTransferData] :transfer_data
  # @return [Quote]
  describe "post_quotes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_quotes_quote
  # &lt;p&gt;A quote models prices and services for a customer.&lt;/p&gt;
  # @param quote
  # @param [Hash] opts the optional parameters
  # @option opts [PostQuotesRequestApplicationFeeAmount] :application_fee_amount
  # @option opts [PostQuotesRequestApplicationFeePercent] :application_fee_percent
  # @option opts [AutomaticTaxParam] :automatic_tax
  # @option opts [String] :collection_method Either &#x60;charge_automatically&#x60;, or &#x60;send_invoice&#x60;. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as &#x60;active&#x60;. Defaults to &#x60;charge_automatically&#x60;.
  # @option opts [String] :customer The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  # @option opts [PostQuotesRequestDefaultTaxRates] :default_tax_rates
  # @option opts [String] :description A description that will be displayed on the quote PDF.
  # @option opts [PostQuotesRequestDiscounts] :discounts
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :expires_at A future timestamp on which the quote will be canceled if in &#x60;open&#x60; or &#x60;draft&#x60; status. Measured in seconds since the Unix epoch.
  # @option opts [String] :footer A footer that will be displayed on the quote PDF.
  # @option opts [String] :header A header that will be displayed on the quote PDF.
  # @option opts [QuoteParam] :invoice_settings
  # @option opts [Array(LineItemUpdateParams)] :line_items A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
  # @option opts [PostQuotesRequestOnBehalfOf] :on_behalf_of
  # @option opts [SubscriptionDataUpdateParams] :subscription_data
  # @option opts [PostQuotesRequestTransferData] :transfer_data
  # @return [Quote]
  describe "post_quotes_quote test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_quotes_quote_accept
  # &lt;p&gt;Accepts the specified quote.&lt;/p&gt;
  # @param quote
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Quote]
  describe "post_quotes_quote_accept test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_quotes_quote_cancel
  # &lt;p&gt;Cancels the quote.&lt;/p&gt;
  # @param quote
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Quote]
  describe "post_quotes_quote_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_quotes_quote_finalize
  # &lt;p&gt;Finalizes the quote.&lt;/p&gt;
  # @param quote
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Int32] :expires_at A future timestamp on which the quote will be canceled if in &#x60;open&#x60; or &#x60;draft&#x60; status. Measured in seconds since the Unix epoch.
  # @return [Quote]
  describe "post_quotes_quote_finalize test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_radar_value_list_items
  # &lt;p&gt;Creates a new &lt;code&gt;ValueListItem&lt;/code&gt; object, which is added to the specified parent value list.&lt;/p&gt;
  # @param value The value of the item (whose type must match the type of the parent value list).
  # @param value_list The identifier of the value list which the created item will be added to.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [RadarValueListItem]
  describe "post_radar_value_list_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_radar_value_lists
  # &lt;p&gt;Creates a new &lt;code&gt;ValueList&lt;/code&gt; object, which can then be referenced in rules.&lt;/p&gt;
  # @param _alias The name of the value list for use in rules.
  # @param name The human-readable name of the value list.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :item_type Type of the items in the value list. One of &#x60;card_fingerprint&#x60;, &#x60;card_bin&#x60;, &#x60;email&#x60;, &#x60;ip_address&#x60;, &#x60;country&#x60;, &#x60;string&#x60;, &#x60;case_sensitive_string&#x60;, or &#x60;customer_id&#x60;. Use &#x60;string&#x60; if the item type is unknown or mixed.
  # @return [RadarValueList]
  describe "post_radar_value_lists test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_radar_value_lists_value_list
  # &lt;p&gt;Updates a &lt;code&gt;ValueList&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that &lt;code&gt;item_type&lt;/code&gt; is immutable.&lt;/p&gt;
  # @param value_list
  # @param [Hash] opts the optional parameters
  # @option opts [String] :_alias The name of the value list for use in rules.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :name The human-readable name of the value list.
  # @return [RadarValueList]
  describe "post_radar_value_lists_value_list test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_refunds
  # &lt;p&gt;Create a refund.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount A positive integer representing how much to refund.
  # @option opts [String] :charge
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [String] :customer Customer whose customer balance to refund from.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :instructions_email Address to send refund email, use customer email if not specified
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :origin Origin of the refund
  # @option opts [String] :payment_intent
  # @option opts [String] :reason
  # @option opts [Bool] :refund_application_fee
  # @option opts [Bool] :reverse_transfer
  # @return [Refund]
  describe "post_refunds test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_refunds_refund
  # &lt;p&gt;Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts &lt;code&gt;metadata&lt;/code&gt; as an argument.&lt;/p&gt;
  # @param refund
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [Refund]
  describe "post_refunds_refund test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_reporting_report_runs
  # &lt;p&gt;Creates a new object and begin running the report. (Certain report types require a &lt;a href&#x3D;\&quot;https://stripe.com/docs/keys#test-live-modes\&quot;&gt;live-mode API key&lt;/a&gt;.)&lt;/p&gt;
  # @param report_type The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as &#x60;\\\&quot;balance.summary.1\\\&quot;&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [RunParameterSpecs] :parameters
  # @return [ReportingReportRun]
  describe "post_reporting_report_runs test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_reviews_review_approve
  # &lt;p&gt;Approves a &lt;code&gt;Review&lt;/code&gt; object, closing it and removing it from the list of reviews.&lt;/p&gt;
  # @param review
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Review]
  describe "post_reviews_review_approve test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_setup_intents
  # &lt;p&gt;Creates a SetupIntent object.&lt;/p&gt;  &lt;p&gt;After the SetupIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/setup_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to collect any required permissions to charge the payment method later.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :attach_to_self If present, the SetupIntent&#39;s payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  # @option opts [Bool] :confirm Set to &#x60;true&#x60; to attempt to confirm this SetupIntent immediately. This parameter defaults to &#x60;false&#x60;. If the payment method attached is a card, a return_url may be provided in case additional authentication is required.
  # @option opts [String] :customer ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent&#39;s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(String)] :flow_directions Indicates the directions of money movement for which this payment method is intended to be used.  Include &#x60;inbound&#x60; if you intend to use the payment method as the origin to pull funds from. Include &#x60;outbound&#x60; if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
  # @option opts [SecretKeyParam] :mandate_data
  # @option opts [String] :on_behalf_of The Stripe account ID for which this SetupIntent is created.
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to [\\\&quot;card\\\&quot;].
  # @option opts [String] :return_url The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method&#39;s app or site. If you&#39;d prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [&#x60;confirm&#x3D;true&#x60;](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).
  # @option opts [SetupIntentSingleUseParams] :single_use
  # @option opts [String] :usage Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to &#x60;off_session&#x60;.
  # @return [SetupIntent]
  describe "post_setup_intents test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_setup_intents_intent
  # &lt;p&gt;Updates a SetupIntent object.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :attach_to_self If present, the SetupIntent&#39;s payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  # @option opts [String] :customer ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent&#39;s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(String)] :flow_directions Indicates the directions of money movement for which this payment method is intended to be used.  Include &#x60;inbound&#x60; if you intend to use the payment method as the origin to pull funds from. Include &#x60;outbound&#x60; if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [Array(String)] :payment_method_types The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to [\\\&quot;card\\\&quot;].
  # @return [SetupIntent]
  describe "post_setup_intents_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_setup_intents_intent_cancel
  # &lt;p&gt;A SetupIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, or &lt;code&gt;requires_action&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cancellation_reason Reason for canceling this SetupIntent. Possible values are &#x60;abandoned&#x60;, &#x60;requested_by_customer&#x60;, or &#x60;duplicate&#x60;
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [SetupIntent]
  describe "post_setup_intents_intent_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_setup_intents_intent_confirm
  # &lt;p&gt;Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.&lt;/p&gt;  &lt;p&gt;If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status.&lt;/p&gt;  &lt;p&gt;Otherwise, it will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If setup fails, the SetupIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [String] :client_secret The client secret of the SetupIntent.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostPaymentIntentsIntentConfirmRequestMandateData] :mandate_data
  # @option opts [String] :payment_method ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
  # @option opts [PaymentMethodDataParams] :payment_method_data
  # @option opts [PaymentMethodOptionsParam] :payment_method_options
  # @option opts [String] :return_url The URL to redirect your customer back to after they authenticate on the payment method&#39;s app or site. If you&#39;d prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
  # @return [SetupIntent]
  describe "post_setup_intents_intent_confirm test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_setup_intents_intent_verify_microdeposits
  # &lt;p&gt;Verifies microdeposits on a SetupIntent object.&lt;/p&gt;
  # @param intent
  # @param [Hash] opts the optional parameters
  # @option opts [Array(Int32)] :amounts Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  # @option opts [String] :client_secret The client secret of the SetupIntent.
  # @option opts [String] :descriptor_code A six-character code starting with SM present in the microdeposit sent to the bank account.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [SetupIntent]
  describe "post_setup_intents_intent_verify_microdeposits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_shipping_rates
  # &lt;p&gt;Creates a new shipping rate object.&lt;/p&gt;
  # @param display_name The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
  # @param [Hash] opts the optional parameters
  # @option opts [DeliveryEstimate] :delivery_estimate
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FixedAmount] :fixed_amount
  # @option opts [String] :tax_behavior Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of &#x60;inclusive&#x60;, &#x60;exclusive&#x60;, or &#x60;unspecified&#x60;.
  # @option opts [String] :tax_code A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is &#x60;txcd_92010001&#x60;.
  # @option opts [String] :_type The type of calculation to use on the shipping rate. Can only be &#x60;fixed_amount&#x60; for now.
  # @return [ShippingRate]
  describe "post_shipping_rates test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_shipping_rates_shipping_rate_token
  # &lt;p&gt;Updates an existing shipping rate object.&lt;/p&gt;
  # @param shipping_rate_token
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the shipping rate can be used for new purchases. Defaults to &#x60;true&#x60;.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FixedAmountUpdate] :fixed_amount
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :tax_behavior Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of &#x60;inclusive&#x60;, &#x60;exclusive&#x60;, or &#x60;unspecified&#x60;.
  # @return [ShippingRate]
  describe "post_shipping_rates_shipping_rate_token test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_skus
  # &lt;p&gt;Creates a new SKU associated with a product.&lt;/p&gt;
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param inventory
  # @param price The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
  # @param product The ID of the product this SKU is associated with. Must be a product with type &#x60;good&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether the SKU is available for purchase. Default to &#x60;true&#x60;.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :id The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
  # @option opts [String] :image The URL of an image for this SKU, meant to be displayable to the customer.
  # @option opts [PackageDimensionsSpecs] :package_dimensions
  # @return [Sku]
  describe "post_skus test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_skus_id
  # &lt;p&gt;Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;Note that a SKU’s &lt;code&gt;attributes&lt;/code&gt; are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Whether this SKU is available for purchase.
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :image The URL of an image for this SKU, meant to be displayable to the customer.
  # @option opts [InventoryUpdateSpecs] :inventory
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [PostSkusIdRequestPackageDimensions] :package_dimensions
  # @option opts [Int32] :price The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
  # @option opts [String] :product The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU&#39;s current product, and be of type &#x60;good&#x60;.
  # @return [Sku]
  describe "post_skus_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_sources
  # &lt;p&gt;Creates a new source object.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for &#x60;single_use&#x60; sources. Not supported for &#x60;receiver&#x60; type sources, where charge amount may not be specified until funds land.
  # @option opts [String] :currency Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
  # @option opts [String] :customer The &#x60;Customer&#x60; to whom the original source is attached to. Must be set when the original source is not a &#x60;Source&#x60; (e.g., &#x60;Card&#x60;).
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :flow The authentication &#x60;flow&#x60; of the source to create. &#x60;flow&#x60; is one of &#x60;redirect&#x60;, &#x60;receiver&#x60;, &#x60;code_verification&#x60;, &#x60;none&#x60;. It is generally inferred unless a type supports multiple flows.
  # @option opts [MandateParams] :mandate
  # @option opts [String] :original_source The source to share.
  # @option opts [Owner] :owner
  # @option opts [ReceiverParams] :receiver
  # @option opts [RedirectParams] :redirect
  # @option opts [ShallowOrderSpecs] :source_order
  # @option opts [String] :statement_descriptor An arbitrary string to be displayed on your customer&#39;s statement. As an example, if your website is &#x60;RunClub&#x60; and the item you&#39;re charging for is a race ticket, you may want to specify a &#x60;statement_descriptor&#x60; of &#x60;RunClub 5K race ticket.&#x60; While many payment types will display this information, some may not display it at all.
  # @option opts [String] :token An optional token used to create the source. When passed, token properties will override source parameters.
  # @option opts [String] :_type The &#x60;type&#x60; of the source to create. Required unless &#x60;customer&#x60; and &#x60;original_source&#x60; are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)
  # @option opts [String] :usage
  # @return [Source]
  describe "post_sources test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_sources_source
  # &lt;p&gt;Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts the &lt;code&gt;metadata&lt;/code&gt; and &lt;code&gt;owner&lt;/code&gt; as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our &lt;a href&#x3D;\&quot;/docs/sources\&quot;&gt;payment method guides&lt;/a&gt; for more detail.&lt;/p&gt;
  # @param source
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount Amount associated with the source.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [MandateParams] :mandate
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Owner] :owner
  # @option opts [OrderParams] :source_order
  # @return [Source]
  describe "post_sources_source test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscription_items
  # &lt;p&gt;Adds a new item to an existing subscription. No existing items will be changed or replaced.&lt;/p&gt;
  # @param subscription The identifier of the subscription to modify.
  # @param [Hash] opts the optional parameters
  # @option opts [PostSubscriptionItemsRequestBillingThresholds] :billing_thresholds
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :payment_behavior Use &#x60;allow_incomplete&#x60; to transition the subscription to &#x60;status&#x3D;past_due&#x60; if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription&#39;s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use &#x60;default_incomplete&#x60; to transition the subscription to &#x60;status&#x3D;past_due&#x60; when payment is required and await explicit confirmation of the invoice&#39;s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use &#x60;pending_if_incomplete&#x60; to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use &#x60;pending_if_incomplete&#x60; you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use &#x60;error_if_incomplete&#x60; if you want Stripe to return an HTTP 402 status code if a subscription&#39;s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  # @option opts [String] :price The ID of the price object.
  # @option opts [RecurringPriceData] :price_data
  # @option opts [String] :proration_behavior Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting &#x60;billing_cycle_anchor&#x3D;now&#x60;, or starting a trial), or if an item&#39;s &#x60;quantity&#x60; changes.
  # @option opts [Int32] :proration_date If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
  # @option opts [Int32] :quantity The quantity you&#39;d like to apply to the subscription item you&#39;re creating.
  # @option opts [PostSubscriptionItemsRequestTaxRates] :tax_rates
  # @return [SubscriptionItem]
  describe "post_subscription_items test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscription_items_item
  # &lt;p&gt;Updates the plan or quantity of an item on a current subscription.&lt;/p&gt;
  # @param item
  # @param [Hash] opts the optional parameters
  # @option opts [PostSubscriptionItemsRequestBillingThresholds] :billing_thresholds
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Bool] :off_session Indicates if a customer is on or off-session while an invoice payment is attempted.
  # @option opts [String] :payment_behavior Use &#x60;allow_incomplete&#x60; to transition the subscription to &#x60;status&#x3D;past_due&#x60; if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription&#39;s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use &#x60;default_incomplete&#x60; to transition the subscription to &#x60;status&#x3D;past_due&#x60; when payment is required and await explicit confirmation of the invoice&#39;s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use &#x60;pending_if_incomplete&#x60; to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use &#x60;pending_if_incomplete&#x60; you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use &#x60;error_if_incomplete&#x60; if you want Stripe to return an HTTP 402 status code if a subscription&#39;s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  # @option opts [String] :price The ID of the price object. When changing a subscription item&#39;s price, &#x60;quantity&#x60; is set to 1 unless a &#x60;quantity&#x60; parameter is provided.
  # @option opts [RecurringPriceData] :price_data
  # @option opts [String] :proration_behavior Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting &#x60;billing_cycle_anchor&#x3D;now&#x60;, or starting a trial), or if an item&#39;s &#x60;quantity&#x60; changes.
  # @option opts [Int32] :proration_date If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
  # @option opts [Int32] :quantity The quantity you&#39;d like to apply to the subscription item you&#39;re creating.
  # @option opts [PostSubscriptionItemsRequestTaxRates] :tax_rates
  # @return [SubscriptionItem]
  describe "post_subscription_items_item test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscription_items_subscription_item_usage_records
  # &lt;p&gt;Creates a usage record for a specified subscription item and date, and fills it with a quantity.&lt;/p&gt;  &lt;p&gt;Usage records provide &lt;code&gt;quantity&lt;/code&gt; information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the &lt;a href&#x3D;\&quot;https://stripe.com/docs/billing/subscriptions/metered-billing\&quot;&gt;metered billing&lt;/a&gt; plan, Stripe helps you send accurate invoices to your customers.&lt;/p&gt;  &lt;p&gt;The default calculation for usage is to add up all the &lt;code&gt;quantity&lt;/code&gt; values of the usage records within a billing period. You can change this default behavior with the billing plan’s &lt;code&gt;aggregate_usage&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/api/plans/create#create_plan-aggregate_usage\&quot;&gt;parameter&lt;/a&gt;. When there is more than one usage record with the same timestamp, Stripe adds the &lt;code&gt;quantity&lt;/code&gt; values together. In most cases, this is the desired resolution, however, you can change this behavior with the &lt;code&gt;action&lt;/code&gt; parameter.&lt;/p&gt;  &lt;p&gt;The default pricing model for metered billing is &lt;a href&#x3D;\&quot;/docs/api/plans/object#plan_object-billing_scheme\&quot;&gt;per-unit pricing&lt;/a&gt;. For finer granularity, you can configure metered billing to have a &lt;a href&#x3D;\&quot;https://stripe.com/docs/billing/subscriptions/tiers\&quot;&gt;tiered pricing&lt;/a&gt; model.&lt;/p&gt;
  # @param subscription_item
  # @param quantity The usage quantity for the specified timestamp.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :action Valid values are &#x60;increment&#x60; (default) or &#x60;set&#x60;. When using &#x60;increment&#x60; the specified &#x60;quantity&#x60; will be added to the usage at the specified timestamp. The &#x60;set&#x60; action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://stripe.com/docs/api/subscriptions/object#subscription_object-billing_thresholds), &#x60;increment&#x60; is the only allowed value.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostSubscriptionItemsSubscriptionItemUsageRecordsRequestTimestamp] :timestamp
  # @return [UsageRecord]
  describe "post_subscription_items_subscription_item_usage_records test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscription_schedules
  # &lt;p&gt;Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer The identifier of the customer to create the subscription schedule for.
  # @option opts [DefaultSettingsParams] :default_settings
  # @option opts [String] :end_behavior Configures how the subscription schedule behaves when it ends. Possible values are &#x60;release&#x60; or &#x60;cancel&#x60; with the default being &#x60;release&#x60;. &#x60;release&#x60; will end the subscription schedule and keep the underlying subscription running.&#x60;cancel&#x60; will end the subscription schedule and cancel the underlying subscription.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :from_subscription Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription&#39;s item(s), set to auto-renew using the subscription&#39;s interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Array(PhaseConfigurationParams)] :phases List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the &#x60;end_date&#x60; of one phase will always equal the &#x60;start_date&#x60; of the next phase.
  # @option opts [PostSubscriptionSchedulesRequestStartDate] :start_date
  # @return [SubscriptionSchedule]
  describe "post_subscription_schedules test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscription_schedules_schedule
  # &lt;p&gt;Updates an existing subscription schedule.&lt;/p&gt;
  # @param schedule
  # @param [Hash] opts the optional parameters
  # @option opts [DefaultSettingsParams] :default_settings
  # @option opts [String] :end_behavior Configures how the subscription schedule behaves when it ends. Possible values are &#x60;release&#x60; or &#x60;cancel&#x60; with the default being &#x60;release&#x60;. &#x60;release&#x60; will end the subscription schedule and keep the underlying subscription running.&#x60;cancel&#x60; will end the subscription schedule and cancel the underlying subscription.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Array(PhaseConfigurationParams)] :phases List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the &#x60;end_date&#x60; of one phase will always equal the &#x60;start_date&#x60; of the next phase.
  # @option opts [String] :proration_behavior If the update changes the current phase, indicates whether the changes should be prorated. The default value is &#x60;create_prorations&#x60;.
  # @return [SubscriptionSchedule]
  describe "post_subscription_schedules_schedule test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscription_schedules_schedule_cancel
  # &lt;p&gt;Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
  # @param schedule
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :invoice_now If the subscription schedule is &#x60;active&#x60;, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to &#x60;true&#x60;.
  # @option opts [Bool] :prorate If the subscription schedule is &#x60;active&#x60;, indicates if the cancellation should be prorated. Defaults to &#x60;true&#x60;.
  # @return [SubscriptionSchedule]
  describe "post_subscription_schedules_schedule_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscription_schedules_schedule_release
  # &lt;p&gt;Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;. If the subscription schedule is currently associated with a subscription, releasing it will remove its &lt;code&gt;subscription&lt;/code&gt; property and set the subscription’s ID to the &lt;code&gt;released_subscription&lt;/code&gt; property.&lt;/p&gt;
  # @param schedule
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Bool] :preserve_cancel_date Keep any cancellation on the subscription that the schedule has set
  # @return [SubscriptionSchedule]
  describe "post_subscription_schedules_schedule_release test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscriptions
  # &lt;p&gt;Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;  &lt;p&gt;When you create a subscription with &lt;code&gt;collection_method&#x3D;charge_automatically&lt;/code&gt;, the first invoice is finalized as part of the request. The &lt;code&gt;payment_behavior&lt;/code&gt; parameter determines the exact behavior of the initial payment.&lt;/p&gt;  &lt;p&gt;To start subscriptions where the first invoice always begins in a &lt;code&gt;draft&lt;/code&gt; status, use &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/subscription-schedules#managing\&quot;&gt;subscription schedules&lt;/a&gt; instead. Schedules provide the flexibility to model more complex billing configurations that change over time.&lt;/p&gt;
  # @param customer The identifier of the customer to subscribe.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(AddInvoiceItemEntry)] :add_invoice_items A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
  # @option opts [Float64] :application_fee_percent A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner&#39;s Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
  # @option opts [AutomaticTaxConfig] :automatic_tax
  # @option opts [Int32] :backdate_start_date For new subscriptions, a past timestamp to backdate the subscription&#39;s start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
  # @option opts [Int32] :billing_cycle_anchor A future timestamp to anchor the subscription&#39;s [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with &#x60;month&#x60; or &#x60;year&#x60; intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
  # @option opts [PostSubscriptionsRequestBillingThresholds] :billing_thresholds
  # @option opts [Int32] :cancel_at A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using &#x60;proration_behavior&#x60;. If set during a future period, this will always cause a proration for that period.
  # @option opts [Bool] :cancel_at_period_end Boolean indicating whether this subscription should cancel at the end of the current period.
  # @option opts [String] :collection_method Either &#x60;charge_automatically&#x60;, or &#x60;send_invoice&#x60;. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as &#x60;active&#x60;. Defaults to &#x60;charge_automatically&#x60;.
  # @option opts [String] :coupon The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.
  # @option opts [String] :currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @option opts [Int32] :days_until_due Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where &#x60;collection_method&#x60; is set to &#x60;send_invoice&#x60;.
  # @option opts [String] :default_payment_method ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over &#x60;default_source&#x60;. If neither are set, invoices will use the customer&#39;s [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  # @option opts [String] :default_source ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If &#x60;default_payment_method&#x60; is also set, &#x60;default_payment_method&#x60; will take precedence. If neither are set, invoices will use the customer&#39;s [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  # @option opts [PostSubscriptionsRequestDefaultTaxRates] :default_tax_rates
  # @option opts [String] :description The subscription&#39;s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(SubscriptionItemCreateParams)] :items A list of up to 20 subscription items, each with an attached price.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Bool] :off_session Indicates if a customer is on or off-session while an invoice payment is attempted.
  # @option opts [String] :payment_behavior Only applies to subscriptions with &#x60;collection_method&#x3D;charge_automatically&#x60;.  Use &#x60;allow_incomplete&#x60; to create subscriptions with &#x60;status&#x3D;incomplete&#x60; if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription&#39;s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use &#x60;default_incomplete&#x60; to create Subscriptions with &#x60;status&#x3D;incomplete&#x60; when the first invoice requires payment, otherwise start as active. Subscriptions transition to &#x60;status&#x3D;active&#x60; when successfully confirming the payment intent on the first invoice. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the payment intent is not confirmed within 23 hours subscriptions transition to &#x60;status&#x3D;incomplete_expired&#x60;, which is a terminal state.  Use &#x60;error_if_incomplete&#x60; if you want Stripe to return an HTTP 402 status code if a subscription&#39;s first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.  &#x60;pending_if_incomplete&#x60; is only used with updates and cannot be passed when creating a subscription.  Subscriptions with &#x60;collection_method&#x3D;send_invoice&#x60; are automatically activated regardless of the first invoice status.
  # @option opts [SubscriptionsResourcePaymentSettings] :payment_settings
  # @option opts [PostSubscriptionsRequestPendingInvoiceItemInterval] :pending_invoice_item_interval
  # @option opts [String] :promotion_code The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription.
  # @option opts [String] :proration_behavior Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the &#x60;billing_cycle_anchor&#x60;. If no value is passed, the default is &#x60;create_prorations&#x60;.
  # @option opts [TransferDataSpecs] :transfer_data
  # @option opts [PostSubscriptionsRequestTrialEnd] :trial_end
  # @option opts [Bool] :trial_from_plan Indicates if a plan&#39;s &#x60;trial_period_days&#x60; should be applied to the subscription. Setting &#x60;trial_end&#x60; per subscription is preferred, and this defaults to &#x60;false&#x60;. Setting this flag to &#x60;true&#x60; together with &#x60;trial_end&#x60; is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  # @option opts [Int32] :trial_period_days Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  # @return [Subscription]
  describe "post_subscriptions test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_subscriptions_subscription_exposed_id
  # &lt;p&gt;Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the &lt;a href&#x3D;\&quot;#upcoming_invoice\&quot;&gt;upcoming invoice&lt;/a&gt; endpoint.&lt;/p&gt;
  # @param subscription_exposed_id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(AddInvoiceItemEntry)] :add_invoice_items A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
  # @option opts [Float64] :application_fee_percent A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner&#39;s Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
  # @option opts [AutomaticTaxConfig] :automatic_tax
  # @option opts [String] :billing_cycle_anchor Either &#x60;now&#x60; or &#x60;unchanged&#x60;. Setting the value to &#x60;now&#x60; resets the subscription&#39;s billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  # @option opts [PostSubscriptionsRequestBillingThresholds] :billing_thresholds
  # @option opts [PostSubscriptionsSubscriptionExposedIdRequestCancelAt] :cancel_at
  # @option opts [Bool] :cancel_at_period_end Boolean indicating whether this subscription should cancel at the end of the current period.
  # @option opts [String] :collection_method Either &#x60;charge_automatically&#x60;, or &#x60;send_invoice&#x60;. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as &#x60;active&#x60;. Defaults to &#x60;charge_automatically&#x60;.
  # @option opts [String] :coupon The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.
  # @option opts [Int32] :days_until_due Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where &#x60;collection_method&#x60; is set to &#x60;send_invoice&#x60;.
  # @option opts [String] :default_payment_method ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over &#x60;default_source&#x60;. If neither are set, invoices will use the customer&#39;s [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  # @option opts [String] :default_source ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If &#x60;default_payment_method&#x60; is also set, &#x60;default_payment_method&#x60; will take precedence. If neither are set, invoices will use the customer&#39;s [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  # @option opts [PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates] :default_tax_rates
  # @option opts [String] :description The subscription&#39;s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Array(SubscriptionItemUpdateParams)] :items A list of up to 20 subscription items, each with an attached price.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Bool] :off_session Indicates if a customer is on or off-session while an invoice payment is attempted.
  # @option opts [PostSubscriptionsSubscriptionExposedIdRequestPauseCollection] :pause_collection
  # @option opts [String] :payment_behavior Use &#x60;allow_incomplete&#x60; to transition the subscription to &#x60;status&#x3D;past_due&#x60; if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription&#39;s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use &#x60;default_incomplete&#x60; to transition the subscription to &#x60;status&#x3D;past_due&#x60; when payment is required and await explicit confirmation of the invoice&#39;s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use &#x60;pending_if_incomplete&#x60; to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use &#x60;pending_if_incomplete&#x60; you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use &#x60;error_if_incomplete&#x60; if you want Stripe to return an HTTP 402 status code if a subscription&#39;s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  # @option opts [SubscriptionsResourcePaymentSettings] :payment_settings
  # @option opts [PostSubscriptionsRequestPendingInvoiceItemInterval] :pending_invoice_item_interval
  # @option opts [String] :promotion_code The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription.
  # @option opts [String] :proration_behavior Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting &#x60;billing_cycle_anchor&#x3D;now&#x60;, or starting a trial), or if an item&#39;s &#x60;quantity&#x60; changes.
  # @option opts [Int32] :proration_date If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
  # @option opts [PostSubscriptionsSubscriptionExposedIdRequestTransferData] :transfer_data
  # @option opts [PostSubscriptionsSubscriptionExposedIdRequestTrialEnd] :trial_end
  # @option opts [Bool] :trial_from_plan Indicates if a plan&#39;s &#x60;trial_period_days&#x60; should be applied to the subscription. Setting &#x60;trial_end&#x60; per subscription is preferred, and this defaults to &#x60;false&#x60;. Setting this flag to &#x60;true&#x60; together with &#x60;trial_end&#x60; is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  # @return [Subscription]
  describe "post_subscriptions_subscription_exposed_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_tax_rates
  # &lt;p&gt;Creates a new tax rate.&lt;/p&gt;
  # @param display_name The display name of the tax rate, which will be shown to users.
  # @param inclusive This specifies if the tax rate is inclusive or exclusive.
  # @param percentage This represents the tax rate percent out of 100.
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  # @option opts [String] :country Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  # @option opts [String] :description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :jurisdiction The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
  # @option opts [String] :state [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\&quot;NY\\\&quot; for New York, United States.
  # @option opts [String] :tax_type The high-level tax type, such as &#x60;vat&#x60; or &#x60;sales_tax&#x60;.
  # @return [TaxRate]
  describe "post_tax_rates test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_tax_rates_tax_rate
  # &lt;p&gt;Updates an existing tax rate.&lt;/p&gt;
  # @param tax_rate
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  # @option opts [String] :country Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  # @option opts [String] :description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  # @option opts [String] :display_name The display name of the tax rate, which will be shown to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :jurisdiction The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :state [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\&quot;NY\\\&quot; for New York, United States.
  # @option opts [String] :tax_type The high-level tax type, such as &#x60;vat&#x60; or &#x60;sales_tax&#x60;.
  # @return [TaxRate]
  describe "post_tax_rates_tax_rate test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_configurations
  # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [BbposWisePose] :bbpos_wisepos_e
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostTerminalConfigurationsRequestTipping] :tipping
  # @option opts [VerifoneP400] :verifone_p400
  # @return [TerminalConfiguration]
  describe "post_terminal_configurations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_configurations_configuration
  # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  # @param configuration
  # @param [Hash] opts the optional parameters
  # @option opts [PostTerminalConfigurationsConfigurationRequestBbposWiseposE] :bbpos_wisepos_e
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostTerminalConfigurationsRequestTipping] :tipping
  # @option opts [PostTerminalConfigurationsConfigurationRequestVerifoneP400] :verifone_p400
  # @return [GetTerminalConfigurationsConfiguration200Response]
  describe "post_terminal_configurations_configuration test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_connection_tokens
  # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :location The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens).
  # @return [TerminalConnectionToken]
  describe "post_terminal_connection_tokens test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_locations
  # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
  # @param address
  # @param display_name A name for the location.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :configuration_overrides The ID of a configuration that will be used to customize all readers in this location.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [TerminalLocation]
  describe "post_terminal_locations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_locations_location
  # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param location
  # @param [Hash] opts the optional parameters
  # @option opts [OptionalFieldsAddress] :address
  # @option opts [String] :configuration_overrides The ID of a configuration that will be used to customize all readers in this location.
  # @option opts [String] :display_name A name for the location.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [GetTerminalLocationsLocation200Response]
  describe "post_terminal_locations_location test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers
  # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  # @param registration_code A code generated by the reader used for registering to an account.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :label Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
  # @option opts [String] :location The location to assign the reader to.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [TerminalReader]
  describe "post_terminal_readers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader
  # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :label The new label of the reader.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [GetTerminalReadersReader200Response]
  describe "post_terminal_readers_reader test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_cancel_action
  # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_cancel_action test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_process_payment_intent
  # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
  # @param reader
  # @param payment_intent PaymentIntent ID
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [ProcessConfig] :process_config
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_process_payment_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_process_setup_intent
  # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
  # @param reader
  # @param customer_consent_collected Customer Consent Collected
  # @param setup_intent SetupIntent ID
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_process_setup_intent test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_terminal_readers_reader_set_reader_display
  # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
  # @param reader
  # @param _type Type
  # @param [Hash] opts the optional parameters
  # @option opts [Cart] :cart
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TerminalReader]
  describe "post_terminal_readers_reader_set_reader_display test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_issuing_cards_card_shipping_deliver
  # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;delivered&lt;/code&gt;.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "post_test_helpers_issuing_cards_card_shipping_deliver test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_issuing_cards_card_shipping_fail
  # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;failure&lt;/code&gt;.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "post_test_helpers_issuing_cards_card_shipping_fail test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_issuing_cards_card_shipping_return
  # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;returned&lt;/code&gt;.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "post_test_helpers_issuing_cards_card_shipping_return test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_issuing_cards_card_shipping_ship
  # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;shipped&lt;/code&gt;.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "post_test_helpers_issuing_cards_card_shipping_ship test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_terminal_readers_reader_present_payment_method
  # &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [CardPresent] :card_present
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :_type Simulated payment type
  # @return [TerminalReader]
  describe "post_test_helpers_terminal_readers_reader_present_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_test_clocks
  # &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
  # @param frozen_time The initial frozen time for this test clock.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :name The name for this test clock.
  # @return [TestHelpersTestClock]
  describe "post_test_helpers_test_clocks test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_test_clocks_test_clock_advance
  # &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
  # @param test_clock
  # @param frozen_time The time to advance the test clock. Must be after the test clock&#39;s current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TestHelpersTestClock]
  describe "post_test_helpers_test_clocks_test_clock_advance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_inbound_transfers_id_fail
  # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FailureDetailsParams] :failure_details
  # @return [TreasuryInboundTransfer]
  describe "post_test_helpers_treasury_inbound_transfers_id_fail test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_inbound_transfers_id_succeed
  # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryInboundTransfer]
  describe "post_test_helpers_treasury_inbound_transfers_id_succeed test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_payments_id_fail
  # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundPayment]
  describe "post_test_helpers_treasury_outbound_payments_id_fail test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_payments_id_post
  # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundPayment]
  describe "post_test_helpers_treasury_outbound_payments_id_post test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_payments_id_return
  # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [ReturnedDetailsParams] :returned_details
  # @return [TreasuryOutboundPayment]
  describe "post_test_helpers_treasury_outbound_payments_id_return test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail
  # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param outbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundTransfer]
  describe "post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_transfers_outbound_transfer_post
  # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param outbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundTransfer]
  describe "post_test_helpers_treasury_outbound_transfers_outbound_transfer_post test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_transfers_outbound_transfer_return
  # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param outbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [ReturnedDetailsParams] :returned_details
  # @return [TreasuryOutboundTransfer]
  describe "post_test_helpers_treasury_outbound_transfers_outbound_transfer_return test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_received_credits
  # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
  # @param amount Amount (in cents) to be transferred.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param financial_account The FinancialAccount to send funds to.
  # @param network The rails used for the object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [SourceParams] :initiating_payment_method_details
  # @return [TreasuryReceivedCredit]
  describe "post_test_helpers_treasury_received_credits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_received_debits
  # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
  # @param amount Amount (in cents) to be transferred.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param financial_account The FinancialAccount to pull funds from.
  # @param network The rails used for the object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [SourceParams] :initiating_payment_method_details
  # @return [TreasuryReceivedDebit]
  describe "post_test_helpers_treasury_received_debits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_tokens
  # &lt;p&gt;Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a &lt;a href&#x3D;\&quot;#accounts\&quot;&gt;Custom account&lt;/a&gt;.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [ConnectJsAccountTokenSpecs] :account
  # @option opts [TokenCreateBankAccount] :bank_account
  # @option opts [PostTokensRequestCard] :card
  # @option opts [String] :customer The customer (owned by the application&#39;s account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
  # @option opts [CvcParams] :cvc_update
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PersonTokenSpecs] :person
  # @option opts [PiiTokenSpecs] :pii
  # @return [Token]
  describe "post_tokens test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_topups
  # &lt;p&gt;Top up the balance of an account&lt;/p&gt;
  # @param amount A positive integer representing how much to transfer.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :source The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)).
  # @option opts [String] :statement_descriptor Extra information about a top-up for the source&#39;s bank statement. Limited to 15 ASCII characters.
  # @option opts [String] :transfer_group A string that identifies this top-up as part of a group.
  # @return [Topup]
  describe "post_topups test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_topups_topup
  # &lt;p&gt;Updates the metadata of a top-up. Other top-up details are not editable by design.&lt;/p&gt;
  # @param topup
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [Topup]
  describe "post_topups_topup test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_topups_topup_cancel
  # &lt;p&gt;Cancels a top-up. Only pending top-ups can be canceled.&lt;/p&gt;
  # @param topup
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [Topup]
  describe "post_topups_topup_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_transfers
  # &lt;p&gt;To send funds from your Stripe account to a connected account, you create a new transfer object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;
  # @param currency 3-letter [ISO code for currency](https://stripe.com/docs/payouts).
  # @param destination The ID of a connected Stripe account. &lt;a href&#x3D;\\\&quot;/docs/connect/charges-transfers\\\&quot;&gt;See the Connect documentation&lt;/a&gt; for details.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount A positive integer in cents (or local equivalent) representing how much to transfer.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :source_transaction You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-availability) for details.
  # @option opts [String] :source_type The source balance to use for this transfer. One of &#x60;bank_account&#x60;, &#x60;card&#x60;, or &#x60;fpx&#x60;. For most users, this will default to &#x60;card&#x60;.
  # @option opts [String] :transfer_group A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
  # @return [Transfer]
  describe "post_transfers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_transfers_id_reversals
  # &lt;p&gt;When you create a new reversal, you must specify a transfer to create it on.&lt;/p&gt;  &lt;p&gt;When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.&lt;/p&gt;  &lt;p&gt;Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount A positive integer in cents (or local equivalent) representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount.
  # @option opts [String] :description An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the Dashboard. This will be unset if you POST an empty value.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [Bool] :refund_application_fee Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed.
  # @return [TransferReversal]
  describe "post_transfers_id_reversals test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_transfers_transfer
  # &lt;p&gt;Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts only metadata as an argument.&lt;/p&gt;
  # @param transfer
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [Transfer]
  describe "post_transfers_transfer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_transfers_transfer_reversals_id
  # &lt;p&gt;Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata and description as arguments.&lt;/p&gt;
  # @param id
  # @param transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [TransferReversal]
  describe "post_transfers_transfer_reversals_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_credit_reversals
  # &lt;p&gt;Reverses a ReceivedCredit and creates a CreditReversal object.&lt;/p&gt;
  # @param received_credit The ReceivedCredit to reverse.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryCreditReversal]
  describe "post_treasury_credit_reversals test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_debit_reversals
  # &lt;p&gt;Reverses a ReceivedDebit and creates a DebitReversal object.&lt;/p&gt;
  # @param received_debit The ReceivedDebit to reverse.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryDebitReversal]
  describe "post_treasury_debit_reversals test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_financial_accounts
  # &lt;p&gt;Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.&lt;/p&gt;
  # @param supported_currencies The currencies the FinancialAccount can hold a balance in.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FeatureAccess] :features
  # @option opts [PlatformRestrictions] :platform_restrictions
  # @return [TreasuryFinancialAccount]
  describe "post_treasury_financial_accounts test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_financial_accounts_financial_account
  # &lt;p&gt;Updates the details of a FinancialAccount.&lt;/p&gt;
  # @param financial_account
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FeatureAccess] :features
  # @option opts [PlatformRestrictions] :platform_restrictions
  # @return [TreasuryFinancialAccount]
  describe "post_treasury_financial_accounts_financial_account test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_financial_accounts_financial_account_features
  # &lt;p&gt;Updates the Features associated with a FinancialAccount.&lt;/p&gt;
  # @param financial_account
  # @param [Hash] opts the optional parameters
  # @option opts [Access] :card_issuing
  # @option opts [Access] :deposit_insurance
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FinancialAddresses] :financial_addresses
  # @option opts [InboundTransfers] :inbound_transfers
  # @option opts [Access] :intra_stripe_flows
  # @option opts [OutboundPayments] :outbound_payments
  # @option opts [OutboundTransfers] :outbound_transfers
  # @return [TreasuryFinancialAccountFeatures]
  describe "post_treasury_financial_accounts_financial_account_features test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_inbound_transfers
  # &lt;p&gt;Creates an InboundTransfer.&lt;/p&gt;
  # @param amount Amount (in cents) to be transferred.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param financial_account The FinancialAccount to send funds to.
  # @param origin_payment_method The origin payment method to be debited for the InboundTransfer.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :statement_descriptor The complete description that appears on your customers&#39; statements. Maximum 10 characters.
  # @return [TreasuryInboundTransfer]
  describe "post_treasury_inbound_transfers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_inbound_transfers_inbound_transfer_cancel
  # &lt;p&gt;Cancels an InboundTransfer.&lt;/p&gt;
  # @param inbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryInboundTransfer]
  describe "post_treasury_inbound_transfers_inbound_transfer_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_outbound_payments
  # &lt;p&gt;Creates an OutboundPayment.&lt;/p&gt;
  # @param amount Amount (in cents) to be transferred.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param financial_account The FinancialAccount to pull funds from.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :customer ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the &#x60;destination_payment_method&#x60; passed in.
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [String] :destination_payment_method The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with &#x60;destination_payment_method_data&#x60;.
  # @option opts [PaymentMethodData] :destination_payment_method_data
  # @option opts [PaymentMethodOptions] :destination_payment_method_options
  # @option opts [EndUserDetailsParams] :end_user_details
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :statement_descriptor The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for &#x60;ach&#x60; payments, 140 characters for &#x60;wire&#x60; payments, or 500 characters for &#x60;stripe&#x60; network transfers. The default value is &#x60;payment&#x60;.
  # @return [TreasuryOutboundPayment]
  describe "post_treasury_outbound_payments test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_outbound_payments_id_cancel
  # &lt;p&gt;Cancel an OutboundPayment.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundPayment]
  describe "post_treasury_outbound_payments_id_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_outbound_transfers
  # &lt;p&gt;Creates an OutboundTransfer.&lt;/p&gt;
  # @param amount Amount (in cents) to be transferred.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param financial_account The FinancialAccount to pull funds from.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [String] :destination_payment_method The PaymentMethod to use as the payment instrument for the OutboundTransfer.
  # @option opts [PaymentMethodOptions] :destination_payment_method_options
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :statement_descriptor Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for &#x60;ach&#x60; transfers or 140 characters for &#x60;wire&#x60; transfers. The default value is &#x60;transfer&#x60;.
  # @return [TreasuryOutboundTransfer]
  describe "post_treasury_outbound_transfers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_treasury_outbound_transfers_outbound_transfer_cancel
  # &lt;p&gt;An OutboundTransfer can be canceled if the funds have not yet been paid out.&lt;/p&gt;
  # @param outbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundTransfer]
  describe "post_treasury_outbound_transfers_outbound_transfer_cancel test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_webhook_endpoints
  # &lt;p&gt;A webhook endpoint must have a &lt;code&gt;url&lt;/code&gt; and a list of &lt;code&gt;enabled_events&lt;/code&gt;. You may optionally specify the Boolean &lt;code&gt;connect&lt;/code&gt; parameter. If set to true, then a Connect webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; only about events from your account is created. You can also create webhook endpoints in the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhooks settings&lt;/a&gt; section of the Dashboard.&lt;/p&gt;
  # @param enabled_events The list of events to enable for this endpoint. You may specify &#x60;[&#39;*&#39;]&#x60; to enable all events, except those that require explicit selection.
  # @param url The URL of the webhook endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :api_version Events sent to this endpoint will be generated with this Stripe Version instead of your account&#39;s default Stripe Version.
  # @option opts [Bool] :connect Whether this endpoint should receive events from connected accounts (&#x60;true&#x60;), or from your account (&#x60;false&#x60;). Defaults to &#x60;false&#x60;.
  # @option opts [String] :description An optional description of what the webhook is used for.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @return [WebhookEndpoint]
  describe "post_webhook_endpoints test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_webhook_endpoints_webhook_endpoint
  # &lt;p&gt;Updates the webhook endpoint. You may edit the &lt;code&gt;url&lt;/code&gt;, the list of &lt;code&gt;enabled_events&lt;/code&gt;, and the status of your endpoint.&lt;/p&gt;
  # @param webhook_endpoint
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An optional description of what the webhook is used for.
  # @option opts [Bool] :disabled Disable the webhook endpoint if set to true.
  # @option opts [Array(String)] :enabled_events The list of events to enable for this endpoint. You may specify &#x60;[&#39;*&#39;]&#x60; to enable all events, except those that require explicit selection.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [String] :url The URL of the webhook endpoint.
  # @return [WebhookEndpoint]
  describe "post_webhook_endpoints_webhook_endpoint test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
