#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"
require "../../src/stripe/api/entitlements_api"

# Unit tests for Stripe::EntitlementsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "EntitlementsApi" do
  describe "test an instance of EntitlementsApi" do
    it "should create an instance of EntitlementsApi" do
      api_instance = Stripe::EntitlementsApi.new
      api_instance.should be_a(Stripe::EntitlementsApi)
    end
  end

  # unit tests for get_entitlements_active_entitlements
  # &lt;p&gt;Retrieve a list of active entitlements for a customer&lt;/p&gt;
  # @param customer The ID of the customer.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [EntitlementsResourceCustomerEntitlementList]
  describe "get_entitlements_active_entitlements test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_entitlements_active_entitlements_id
  # &lt;p&gt;Retrieve an active entitlement&lt;/p&gt;
  # @param id The ID of the entitlement.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [EntitlementsActiveEntitlement]
  describe "get_entitlements_active_entitlements_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_entitlements_features
  # &lt;p&gt;Retrieve a list of features&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Bool] :archived If set, filter results to only include features with the given archive status.
  # @option opts [String] :lookup_key If set, filter results to only include features with the given lookup_key.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [EntitlementsResourceFeatureList]
  describe "get_entitlements_features test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_entitlements_features_id
  # &lt;p&gt;Retrieves a feature&lt;/p&gt;
  # @param id The ID of the feature.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [EntitlementsFeature]
  describe "get_entitlements_features_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_entitlements_features
  # &lt;p&gt;Creates a feature&lt;/p&gt;
  # @param lookup_key A unique key you provide as your own system identifier. This may be up to 80 characters.
  # @param name The feature&#39;s name, for your own purpose, not meant to be displayable to the customer.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [Hash(String, String)] :metadata
  # @return [EntitlementsFeature]
  describe "post_entitlements_features test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_entitlements_features_id
  # &lt;p&gt;Update a featureâ€™s metadata or permanently deactivate it.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :active Inactive features cannot be attached to new products and will not be returned from the features list endpoint.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostEntitlementsFeaturesIdRequestMetadata] :metadata
  # @option opts [String] :name The feature&#39;s name, for your own purpose, not meant to be displayable to the customer.
  # @return [EntitlementsFeature]
  describe "post_entitlements_features_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
