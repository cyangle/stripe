#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::PaymentMethodsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "PaymentMethodsApi" do
  describe "test an instance of PaymentMethodsApi" do
    it "should create an instance of PaymentMethodsApi" do
      api_instance = Stripe::PaymentMethodsApi.new
      api_instance.should be_a(Stripe::PaymentMethodsApi)
    end
  end

  # unit tests for get_payment_methods
  # &lt;p&gt;Returns a list of PaymentMethods attached to the StripeAccount. For listing a customer’s payment methods, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
  # @param _type A required filter on the list, based on the object &#x60;type&#x60; field.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :customer The ID of the customer whose PaymentMethods will be retrieved.
  # @return [PaymentFlowsPaymentMethodList]
  describe "get_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_methods_payment_method
  # &lt;p&gt;Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer\&quot;&gt;Retrieve a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "get_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods
  # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostPaymentMethodsRequestAcssDebit] :acss_debit
  # @option opts [JSON::Any] :affirm If this is an &#x60;affirm&#x60; PaymentMethod, this hash contains details about the Affirm payment method.
  # @option opts [JSON::Any] :afterpay_clearpay If this is an &#x60;AfterpayClearpay&#x60; PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
  # @option opts [JSON::Any] :alipay If this is an &#x60;Alipay&#x60; PaymentMethod, this hash contains details about the Alipay payment method.
  # @option opts [PostPaymentMethodsRequestAuBecsDebit] :au_becs_debit
  # @option opts [PostPaymentMethodsRequestBacsDebit] :bacs_debit
  # @option opts [JSON::Any] :bancontact If this is a &#x60;bancontact&#x60; PaymentMethod, this hash contains details about the Bancontact payment method.
  # @option opts [BillingDetailsInnerParams] :billing_details
  # @option opts [JSON::Any] :blik If this is a &#x60;blik&#x60; PaymentMethod, this hash contains details about the BLIK payment method.
  # @option opts [PostPaymentMethodsRequestBoleto] :boleto
  # @option opts [PostPaymentMethodsRequestCard] :card
  # @option opts [String] :customer The &#x60;Customer&#x60; to whom the original PaymentMethod is attached.
  # @option opts [JSON::Any] :customer_balance If this is a &#x60;customer_balance&#x60; PaymentMethod, this hash contains details about the CustomerBalance payment method.
  # @option opts [PostPaymentMethodsRequestEps] :eps
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [PostPaymentMethodsRequestFpx] :fpx
  # @option opts [JSON::Any] :giropay If this is a &#x60;giropay&#x60; PaymentMethod, this hash contains details about the Giropay payment method.
  # @option opts [JSON::Any] :grabpay If this is a &#x60;grabpay&#x60; PaymentMethod, this hash contains details about the GrabPay payment method.
  # @option opts [PostPaymentMethodsRequestIdeal] :ideal
  # @option opts [JSON::Any] :interac_present If this is an &#x60;interac_present&#x60; PaymentMethod, this hash contains details about the Interac Present payment method.
  # @option opts [PostPaymentMethodsRequestKlarna] :klarna
  # @option opts [JSON::Any] :konbini If this is a &#x60;konbini&#x60; PaymentMethod, this hash contains details about the Konbini payment method.
  # @option opts [JSON::Any] :link If this is an &#x60;Link&#x60; PaymentMethod, this hash contains details about the Link payment method.
  # @option opts [JSON::Any] :oxxo If this is an &#x60;oxxo&#x60; PaymentMethod, this hash contains details about the OXXO payment method.
  # @option opts [PostPaymentMethodsRequestP24] :p24
  # @option opts [String] :payment_method The PaymentMethod to share.
  # @option opts [JSON::Any] :paynow If this is a &#x60;paynow&#x60; PaymentMethod, this hash contains details about the PayNow payment method.
  # @option opts [JSON::Any] :pix If this is a &#x60;pix&#x60; PaymentMethod, this hash contains details about the Pix payment method.
  # @option opts [JSON::Any] :promptpay If this is a &#x60;promptpay&#x60; PaymentMethod, this hash contains details about the PromptPay payment method.
  # @option opts [RadarOptions] :radar_options
  # @option opts [PostPaymentMethodsRequestSepaDebit] :sepa_debit
  # @option opts [PostPaymentMethodsRequestSofort] :sofort
  # @option opts [String] :_type The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  # @option opts [PostPaymentMethodsRequestUsBankAccount] :us_bank_account
  # @option opts [JSON::Any] :wechat_pay If this is an &#x60;wechat_pay&#x60; PaymentMethod, this hash contains details about the wechat_pay payment method.
  # @return [PaymentMethod]
  describe "post_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method
  # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [BillingDetailsInnerParams] :billing_details
  # @option opts [UpdateApiParam] :card
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [JSON::Any] :link If this is an &#x60;Link&#x60; PaymentMethod, this hash contains details about the Link payment method.
  # @option opts [PostAccountsRequestMetadata] :metadata
  # @option opts [UpdateParam] :us_bank_account
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method_attach
  # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint without first using a SetupIntent or PaymentIntent with &lt;code&gt;setup_future_usage&lt;/code&gt; does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
  # @param payment_method
  # @param customer The ID of the customer to which to attach the PaymentMethod.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method_attach test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method_detach
  # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method_detach test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
