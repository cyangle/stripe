#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for Stripe::PaymentMethodsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "PaymentMethodsApi" do
  describe "test an instance of PaymentMethodsApi" do
    it "should create an instance of PaymentMethodsApi" do
      api_instance = Stripe::PaymentMethodsApi.new
      api_instance.should be_a(Stripe::PaymentMethodsApi)
    end
  end

  # unit tests for get_payment_methods
  # &lt;p&gt;Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt; API instead.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [String] :_type An optional filter on the list, based on the object &#x60;type&#x60; field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :customer The ID of the customer whose PaymentMethods will be retrieved.
  # @return [PaymentFlowsPaymentMethodList]
  describe "get_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_payment_methods_payment_method
  # &lt;p&gt;Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer\&quot;&gt;Retrieve a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [PaymentMethod]
  describe "get_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods
  # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [PostPaymentMethodsRequest] :post_payment_methods_request
  # @return [PaymentMethod]
  describe "post_payment_methods test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method
  # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [PostPaymentMethodsPaymentMethodRequest] :post_payment_methods_payment_method_request
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method_attach
  # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint without first using a SetupIntent or PaymentIntent with &lt;code&gt;setup_future_usage&lt;/code&gt; does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
  # @param payment_method
  # @param post_payment_methods_payment_method_attach_request
  # @param [Hash] opts the optional parameters
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method_attach test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_payment_methods_payment_method_detach
  # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
  # @param payment_method
  # @param [Hash] opts the optional parameters
  # @option opts [PostAccountsAccountLoginLinksRequest] :post_accounts_account_login_links_request
  # @return [PaymentMethod]
  describe "post_payment_methods_payment_method_detach test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
