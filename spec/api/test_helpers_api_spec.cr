#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"
require "../../src/stripe/api/test_helpers_api"

# Unit tests for Stripe::TestHelpersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "TestHelpersApi" do
  describe "test an instance of TestHelpersApi" do
    it "should create an instance of TestHelpersApi" do
      api_instance = Stripe::TestHelpersApi.new
      api_instance.should be_a(Stripe::TestHelpersApi)
    end
  end

  # unit tests for delete_test_helpers_test_clocks_test_clock
  # &lt;p&gt;Deletes a test clock.&lt;/p&gt;
  # @param test_clock
  # @param [Hash] opts the optional parameters
  # @return [DeletedTestHelpersTestClock]
  describe "delete_test_helpers_test_clocks_test_clock test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_helpers_test_clocks
  # &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ending_before A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with &#x60;obj_bar&#x60;, your subsequent call can include &#x60;ending_before&#x3D;obj_bar&#x60; in order to fetch the previous page of the list.
  # @option opts [String] :starting_after A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;obj_foo&#x60;, your subsequent call can include &#x60;starting_after&#x3D;obj_foo&#x60; in order to fetch the next page of the list.
  # @option opts [Int32] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [BillingClocksResourceBillingClockList]
  describe "get_test_helpers_test_clocks test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_helpers_test_clocks_test_clock
  # &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
  # @param test_clock
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TestHelpersTestClock]
  describe "get_test_helpers_test_clocks_test_clock test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_issuing_cards_card_shipping_deliver
  # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;delivered&lt;/code&gt;.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "post_test_helpers_issuing_cards_card_shipping_deliver test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_issuing_cards_card_shipping_fail
  # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;failure&lt;/code&gt;.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "post_test_helpers_issuing_cards_card_shipping_fail test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_issuing_cards_card_shipping_return
  # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;returned&lt;/code&gt;.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "post_test_helpers_issuing_cards_card_shipping_return test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_issuing_cards_card_shipping_ship
  # &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;shipped&lt;/code&gt;.&lt;/p&gt;
  # @param card
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [IssuingCard]
  describe "post_test_helpers_issuing_cards_card_shipping_ship test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_terminal_readers_reader_present_payment_method
  # &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
  # @param reader
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :amount_tip Simulated on-reader tip amount.
  # @option opts [CardPresent] :card_present
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [InteracPresent] :interac_present
  # @option opts [String] :_type Simulated payment type.
  # @return [TerminalReader]
  describe "post_test_helpers_terminal_readers_reader_present_payment_method test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_test_clocks
  # &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
  # @param frozen_time The initial frozen time for this test clock.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [String] :name The name for this test clock.
  # @return [TestHelpersTestClock]
  describe "post_test_helpers_test_clocks test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_test_clocks_test_clock_advance
  # &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
  # @param test_clock
  # @param frozen_time The time to advance the test clock. Must be after the test clock&#39;s current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TestHelpersTestClock]
  describe "post_test_helpers_test_clocks_test_clock_advance test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_inbound_transfers_id_fail
  # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [FailureDetailsParams] :failure_details
  # @return [TreasuryInboundTransfer]
  describe "post_test_helpers_treasury_inbound_transfers_id_fail test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_inbound_transfers_id_succeed
  # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryInboundTransfer]
  describe "post_test_helpers_treasury_inbound_transfers_id_succeed test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_payments_id_fail
  # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundPayment]
  describe "post_test_helpers_treasury_outbound_payments_id_fail test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_payments_id_post
  # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundPayment]
  describe "post_test_helpers_treasury_outbound_payments_id_post test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_payments_id_return
  # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param id
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [ReturnedDetailsParams] :returned_details
  # @return [TreasuryOutboundPayment]
  describe "post_test_helpers_treasury_outbound_payments_id_return test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail
  # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param outbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundTransfer]
  describe "post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_transfers_outbound_transfer_post
  # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param outbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @return [TreasuryOutboundTransfer]
  describe "post_test_helpers_treasury_outbound_transfers_outbound_transfer_post test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_outbound_transfers_outbound_transfer_return
  # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  # @param outbound_transfer
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [ReturnedDetailsParams] :returned_details
  # @return [TreasuryOutboundTransfer]
  describe "post_test_helpers_treasury_outbound_transfers_outbound_transfer_return test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_received_credits
  # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
  # @param amount Amount (in cents) to be transferred.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param financial_account The FinancialAccount to send funds to.
  # @param network Specifies the network rails to be used. If not set, will default to the PaymentMethod&#39;s preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [SourceParams] :initiating_payment_method_details
  # @return [TreasuryReceivedCredit]
  describe "post_test_helpers_treasury_received_credits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for post_test_helpers_treasury_received_debits
  # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
  # @param amount Amount (in cents) to be transferred.
  # @param currency Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  # @param financial_account The FinancialAccount to pull funds from.
  # @param network Specifies the network rails to be used. If not set, will default to the PaymentMethod&#39;s preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description An arbitrary string attached to the object. Often useful for displaying to users.
  # @option opts [Array(String)] :expand Specifies which fields in the response should be expanded.
  # @option opts [SourceParams] :initiating_payment_method_details
  # @return [TreasuryReceivedDebit]
  describe "post_test_helpers_treasury_received_debits test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
