#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class TreasuryFinancialAccountsResourceClosedStatusDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # The array that contains reasons for a FinancialAccount closure.
    @[JSON::Field(key: "reasons", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reasons : Array(String)? = nil
    ERROR_MESSAGE_FOR_REASONS = "invalid value for \"reasons\", must be one of [account_rejected, closed_by_platform, other]."
    VALID_VALUES_FOR_REASONS  = StaticArray["account_rejected", "closed_by_platform", "other"]

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @reasons : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"reasons\" is required and cannot be null") if @reasons.nil?

      if _reasons = @reasons
        invalid_properties.push(ERROR_MESSAGE_FOR_REASONS) unless OpenApi::EnumValidator.valid?(_reasons, VALID_VALUES_FOR_REASONS)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @reasons.nil?
      if _reasons = @reasons
        return false unless OpenApi::EnumValidator.valid?(_reasons, VALID_VALUES_FOR_REASONS)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reasons Object to be assigned
    def reasons=(reasons : Array(String)?)
      if reasons.nil?
        raise ArgumentError.new("\"reasons\" is required and cannot be null")
      end
      _reasons = reasons.not_nil!
      OpenApi::EnumValidator.validate("reasons", _reasons, VALID_VALUES_FOR_REASONS)
      @reasons = _reasons
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@reasons)
  end
end
