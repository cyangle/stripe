#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TreasuryReceivedCredit
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Amount (in cents) transferred.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String)]
    getter description : String

    # Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.
    @[JSON::Field(key: "failure_code", type: String?, presence: true, ignore_serialize: failure_code.nil? && !failure_code_present?)]
    getter failure_code : String?

    @[JSON::Field(ignore: true)]
    property? failure_code_present : Bool = false

    ENUM_VALIDATOR_FOR_FAILURE_CODE = EnumValidator.new("failure_code", "String", ["account_closed", "account_frozen", "other", "null"])

    # The FinancialAccount that received the funds.
    @[JSON::Field(key: "financial_account", type: String?, presence: true, ignore_serialize: financial_account.nil? && !financial_account_present?)]
    getter financial_account : String?

    @[JSON::Field(ignore: true)]
    property? financial_account_present : Bool = false

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    @[JSON::Field(key: "initiating_payment_method_details", type: UfaResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails)]
    property initiating_payment_method_details : UfaResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails

    @[JSON::Field(key: "linked_flows", type: ReceivedCreditsResourceTreasuryLinkedFlows)]
    property linked_flows : ReceivedCreditsResourceTreasuryLinkedFlows

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # The rails used to send the funds.
    @[JSON::Field(key: "network", type: String)]
    getter network : String

    ENUM_VALIDATOR_FOR_NETWORK = EnumValidator.new("network", "String", ["ach", "card", "stripe", "us_domestic_wire"])

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["treasury.received_credit"])

    # Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["failed", "succeeded"])

    @[JSON::Field(key: "transaction", type: TreasuryCreditReversalTransaction?, presence: true, ignore_serialize: transaction.nil? && !transaction_present?)]
    property transaction : TreasuryCreditReversalTransaction?

    @[JSON::Field(ignore: true)]
    property? transaction_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @created : Int64, @currency : String, @description : String, @failure_code : String?, @financial_account : String?, @id : String, @initiating_payment_method_details : UfaResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails, @linked_flows : ReceivedCreditsResourceTreasuryLinkedFlows, @livemode : Bool, @network : String, @object : String, @status : String, @transaction : TreasuryCreditReversalTransaction?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_FAILURE_CODE.error_message) unless ENUM_VALIDATOR_FOR_FAILURE_CODE.valid?(@failure_code)

      if @financial_account.to_s.size > 5000
        invalid_properties.push("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_NETWORK.error_message) unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @description.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_FAILURE_CODE.valid?(@failure_code)
      return false if @financial_account.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network, false)
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_code Object to be assigned
    def failure_code=(failure_code)
      ENUM_VALIDATOR_FOR_FAILURE_CODE.valid!(failure_code)
      @failure_code = failure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] financial_account Value to be assigned
    def financial_account=(financial_account)
      if financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      @financial_account = financial_account
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network)
      ENUM_VALIDATOR_FOR_NETWORK.valid!(network, false)
      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        created == o.created &&
        currency == o.currency &&
        description == o.description &&
        failure_code == o.failure_code &&
        financial_account == o.financial_account &&
        id == o.id &&
        initiating_payment_method_details == o.initiating_payment_method_details &&
        linked_flows == o.linked_flows &&
        livemode == o.livemode &&
        network == o.network &&
        object == o.object &&
        status == o.status &&
        transaction == o.transaction
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amount, @created, @currency, @description, @failure_code, @financial_account, @id, @initiating_payment_method_details, @linked_flows, @livemode, @network, @object, @status, @transaction)
  end
end
