#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class IssuingTransactionNetworkData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter \"S\", followed by a six-digit number. For example, \"S498162\". Please note that the code is not guaranteed to be unique across authorizations.
    @[JSON::Field(key: "authorization_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter authorization_code : String? = nil
    MAX_LENGTH_FOR_AUTHORIZATION_CODE = 5000

    # The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network.
    @[JSON::Field(key: "processing_date", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter processing_date : String? = nil
    MAX_LENGTH_FOR_PROCESSING_DATE = 5000

    # Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter transaction_id : String? = nil
    MAX_LENGTH_FOR_TRANSACTION_ID = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @authorization_code : String? = nil,
      @processing_date : String? = nil,
      @transaction_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_authorization_code = @authorization_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("authorization_code", _authorization_code.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_processing_date = @processing_date).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("processing_date", _processing_date.to_s.size, MAX_LENGTH_FOR_PROCESSING_DATE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_transaction_id = @transaction_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transaction_id", _transaction_id.to_s.size, MAX_LENGTH_FOR_TRANSACTION_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_authorization_code = @authorization_code).nil?
        return false if _authorization_code.to_s.size > MAX_LENGTH_FOR_AUTHORIZATION_CODE
      end

      unless (_processing_date = @processing_date).nil?
        return false if _processing_date.to_s.size > MAX_LENGTH_FOR_PROCESSING_DATE
      end

      unless (_transaction_id = @transaction_id).nil?
        return false if _transaction_id.to_s.size > MAX_LENGTH_FOR_TRANSACTION_ID
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_code Object to be assigned
    def authorization_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("authorization_code", new_value.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_CODE)
      end

      @authorization_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] processing_date Object to be assigned
    def processing_date=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("processing_date", new_value.to_s.size, MAX_LENGTH_FOR_PROCESSING_DATE)
      end

      @processing_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("transaction_id", new_value.to_s.size, MAX_LENGTH_FOR_TRANSACTION_ID)
      end

      @transaction_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@authorization_code, @processing_date, @transaction_id)
  end
end
