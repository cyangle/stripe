#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PhaseConfigurationParams1
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # List of configuration items, each with an attached price, to apply during this phase of the subscription schedule.
    @[JSON::Field(key: "items", type: Array(ConfigurationItemParams))]
    property items : Array(ConfigurationItemParams)

    # Optional properties
    # A list of prices and quantities that will generate invoice items appended to the next invoice. You may pass up to 20 items.
    @[JSON::Field(key: "add_invoice_items", type: Array(AddInvoiceItemEntry)?, presence: true, ignore_serialize: add_invoice_items.nil? && !add_invoice_items_present?)]
    property add_invoice_items : Array(AddInvoiceItemEntry)?

    @[JSON::Field(ignore: true)]
    property? add_invoice_items_present : Bool = false

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
    @[JSON::Field(key: "application_fee_percent", type: Float64?, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    property application_fee_percent : Float64?

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    @[JSON::Field(key: "automatic_tax", type: AutomaticTaxConfig1?, presence: true, ignore_serialize: automatic_tax.nil? && !automatic_tax_present?)]
    property automatic_tax : AutomaticTaxConfig1?

    @[JSON::Field(ignore: true)]
    property? automatic_tax_present : Bool = false

    # Can be set to `phase_start` to set the anchor to the start of the phase or `automatic` to automatically change it if needed. Cannot be set to `phase_start` if this phase specifies a trial. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    @[JSON::Field(key: "billing_cycle_anchor", type: String?, presence: true, ignore_serialize: billing_cycle_anchor.nil? && !billing_cycle_anchor_present?)]
    getter billing_cycle_anchor : String?

    @[JSON::Field(ignore: true)]
    property? billing_cycle_anchor_present : Bool = false

    ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR = EnumValidator.new("billing_cycle_anchor", "String", ["automatic", "phase_start"])

    @[JSON::Field(key: "billing_thresholds", type: DefaultSettingsParamsBillingThresholds?, presence: true, ignore_serialize: billing_thresholds.nil? && !billing_thresholds_present?)]
    property billing_thresholds : DefaultSettingsParamsBillingThresholds?

    @[JSON::Field(ignore: true)]
    property? billing_thresholds_present : Bool = false

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically` on creation.
    @[JSON::Field(key: "collection_method", type: String?, presence: true, ignore_serialize: collection_method.nil? && !collection_method_present?)]
    getter collection_method : String?

    @[JSON::Field(ignore: true)]
    property? collection_method_present : Bool = false

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    # The identifier of the coupon to apply to this phase of the subscription schedule.
    @[JSON::Field(key: "coupon", type: String?, presence: true, ignore_serialize: coupon.nil? && !coupon_present?)]
    getter coupon : String?

    @[JSON::Field(ignore: true)]
    property? coupon_present : Bool = false

    # ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    @[JSON::Field(key: "default_payment_method", type: String?, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    getter default_payment_method : String?

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    @[JSON::Field(key: "default_tax_rates", type: PhaseConfigurationParamsDefaultTaxRates?, presence: true, ignore_serialize: default_tax_rates.nil? && !default_tax_rates_present?)]
    property default_tax_rates : PhaseConfigurationParamsDefaultTaxRates?

    @[JSON::Field(ignore: true)]
    property? default_tax_rates_present : Bool = false

    @[JSON::Field(key: "end_date", type: PhaseConfigurationParams1EndDate?, presence: true, ignore_serialize: end_date.nil? && !end_date_present?)]
    property end_date : PhaseConfigurationParams1EndDate?

    @[JSON::Field(ignore: true)]
    property? end_date_present : Bool = false

    @[JSON::Field(key: "invoice_settings", type: SubscriptionSchedulesParam?, presence: true, ignore_serialize: invoice_settings.nil? && !invoice_settings_present?)]
    property invoice_settings : SubscriptionSchedulesParam?

    @[JSON::Field(ignore: true)]
    property? invoice_settings_present : Bool = false

    # Integer representing the multiplier applied to the price interval. For example, `iterations=2` applied to a price with `interval=month` and `interval_count=3` results in a phase of duration `2 * 3 months = 6 months`. If set, `end_date` must not be set.
    @[JSON::Field(key: "iterations", type: Int64?, presence: true, ignore_serialize: iterations.nil? && !iterations_present?)]
    property iterations : Int64?

    @[JSON::Field(ignore: true)]
    property? iterations_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered, adding new keys and replacing existing keys in the subscription's `metadata`. Individual keys in the subscription's `metadata` can be unset by posting an empty value to them in the phase's `metadata`. To unset all keys in the subscription's `metadata`, update the subscription directly or unset every key individually from the phase's `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # Whether the subscription schedule will create [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when transitioning to this phase. The default value is `create_prorations`.
    @[JSON::Field(key: "proration_behavior", type: String?, presence: true, ignore_serialize: proration_behavior.nil? && !proration_behavior_present?)]
    getter proration_behavior : String?

    @[JSON::Field(ignore: true)]
    property? proration_behavior_present : Bool = false

    ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR = EnumValidator.new("proration_behavior", "String", ["always_invoice", "create_prorations", "none"])

    @[JSON::Field(key: "start_date", type: PhaseConfigurationParams1StartDate?, presence: true, ignore_serialize: start_date.nil? && !start_date_present?)]
    property start_date : PhaseConfigurationParams1StartDate?

    @[JSON::Field(ignore: true)]
    property? start_date_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: TransferDataSpecs7?, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    property transfer_data : TransferDataSpecs7?

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # If set to true the entire phase is counted as a trial and the customer will not be charged for any fees.
    @[JSON::Field(key: "trial", type: Bool?, presence: true, ignore_serialize: trial.nil? && !trial_present?)]
    property trial : Bool?

    @[JSON::Field(ignore: true)]
    property? trial_present : Bool = false

    @[JSON::Field(key: "trial_end", type: PhaseConfigurationParams1TrialEnd?, presence: true, ignore_serialize: trial_end.nil? && !trial_end_present?)]
    property trial_end : PhaseConfigurationParams1TrialEnd?

    @[JSON::Field(ignore: true)]
    property? trial_end_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @items : Array(ConfigurationItemParams), @add_invoice_items : Array(AddInvoiceItemEntry)? = nil, @application_fee_percent : Float64? = nil, @automatic_tax : AutomaticTaxConfig1? = nil, @billing_cycle_anchor : String? = nil, @billing_thresholds : DefaultSettingsParamsBillingThresholds? = nil, @collection_method : String? = nil, @coupon : String? = nil, @default_payment_method : String? = nil, @default_tax_rates : PhaseConfigurationParamsDefaultTaxRates? = nil, @end_date : PhaseConfigurationParams1EndDate? = nil, @invoice_settings : SubscriptionSchedulesParam? = nil, @iterations : Int64? = nil, @metadata : Hash(String, String)? = nil, @proration_behavior : String? = nil, @start_date : PhaseConfigurationParams1StartDate? = nil, @transfer_data : TransferDataSpecs7? = nil, @trial : Bool? = nil, @trial_end : PhaseConfigurationParams1TrialEnd? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.error_message) unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor)

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)

      if !@coupon.nil? && @coupon.to_s.size > 5000
        invalid_properties.push("invalid value for \"coupon\", the character length must be smaller than or equal to 5000.")
      end

      if !@default_payment_method.nil? && @default_payment_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"default_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor)
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      return false if !@coupon.nil? && @coupon.to_s.size > 5000
      return false if !@default_payment_method.nil? && @default_payment_method.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(billing_cycle_anchor)
      ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid!(billing_cycle_anchor)
      @billing_cycle_anchor = billing_cycle_anchor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method)
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(collection_method)
      @collection_method = collection_method
    end

    # Custom attribute writer method with validation
    # @param [Object] coupon Value to be assigned
    def coupon=(coupon)
      if !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\", the character length must be smaller than or equal to 5000.")
      end

      @coupon = coupon
    end

    # Custom attribute writer method with validation
    # @param [Object] default_payment_method Value to be assigned
    def default_payment_method=(default_payment_method)
      if !default_payment_method.nil? && default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @default_payment_method = default_payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_behavior Object to be assigned
    def proration_behavior=(proration_behavior)
      ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid!(proration_behavior)
      @proration_behavior = proration_behavior
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        add_invoice_items == o.add_invoice_items &&
        application_fee_percent == o.application_fee_percent &&
        automatic_tax == o.automatic_tax &&
        billing_cycle_anchor == o.billing_cycle_anchor &&
        billing_thresholds == o.billing_thresholds &&
        collection_method == o.collection_method &&
        coupon == o.coupon &&
        default_payment_method == o.default_payment_method &&
        default_tax_rates == o.default_tax_rates &&
        end_date == o.end_date &&
        invoice_settings == o.invoice_settings &&
        items == o.items &&
        iterations == o.iterations &&
        metadata == o.metadata &&
        proration_behavior == o.proration_behavior &&
        start_date == o.start_date &&
        transfer_data == o.transfer_data &&
        trial == o.trial &&
        trial_end == o.trial_end
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@add_invoice_items, @application_fee_percent, @automatic_tax, @billing_cycle_anchor, @billing_thresholds, @collection_method, @coupon, @default_payment_method, @default_tax_rates, @end_date, @invoice_settings, @items, @iterations, @metadata, @proration_behavior, @start_date, @transfer_data, @trial, @trial_end)
  end
end
