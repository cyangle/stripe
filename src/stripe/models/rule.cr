#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Rule
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The action taken on the payment.
    @[JSON::Field(key: "action", type: String)]
    getter action : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # The predicate to evaluate the payment against.
    @[JSON::Field(key: "predicate", type: String)]
    getter predicate : String

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @action : String, @id : String, @predicate : String)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @action.to_s.size > 5000
        invalid_properties.push("invalid value for \"action\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if @predicate.to_s.size > 5000
        invalid_properties.push("invalid value for \"predicate\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @action.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false if @predicate.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] action Value to be assigned
    def action=(action)
      if action.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"action\", the character length must be smaller than or equal to 5000.")
      end

      @action = action
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] predicate Value to be assigned
    def predicate=(predicate)
      if predicate.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"predicate\", the character length must be smaller than or equal to 5000.")
      end

      @predicate = predicate
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        action == o.action &&
        id == o.id &&
        predicate == o.predicate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@action, @id, @predicate)
  end
end
