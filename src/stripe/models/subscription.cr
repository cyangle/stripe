#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Subscriptions allow you to charge a customer on a recurring basis.  Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
  class Subscription
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "automatic_tax", type: Stripe::SubscriptionAutomaticTax?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::SubscriptionAutomaticTax? = nil

    # Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
    @[JSON::Field(key: "billing_cycle_anchor", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter billing_cycle_anchor : Int64? = nil

    # If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
    @[JSON::Field(key: "cancel_at_period_end", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cancel_at_period_end : Bool? = nil

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter collection_method : String? = nil
    ERROR_MESSAGE_FOR_COLLECTION_METHOD = "invalid value for \"collection_method\", must be one of [charge_automatically, send_invoice]."
    VALID_VALUES_FOR_COLLECTION_METHOD  = String.static_array("charge_automatically", "send_invoice")

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
    @[JSON::Field(key: "current_period_end", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter current_period_end : Int64? = nil

    # Start of the current period that the subscription has been invoiced for.
    @[JSON::Field(key: "current_period_start", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter current_period_start : Int64? = nil

    @[JSON::Field(key: "customer", type: Stripe::SubscriptionCustomer?, default: nil, required: true, nullable: false, emit_null: false)]
    getter customer : Stripe::SubscriptionCustomer? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "items", type: Stripe::SubscriptionItemList?, default: nil, required: true, nullable: false, emit_null: false)]
    getter items : Stripe::SubscriptionItemList? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [subscription]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("subscription")

    # Date when the subscription was first created. The date might differ from the `created` date due to backdating.
    @[JSON::Field(key: "start_date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter start_date : Int64? = nil

    # Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.   For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.   A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.   If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.   If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, canceled, incomplete, incomplete_expired, past_due, trialing, unpaid]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "canceled", "incomplete", "incomplete_expired", "past_due", "trialing", "unpaid")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "application", type: Stripe::SubscriptionApplication?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : Stripe::SubscriptionApplication? = nil

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
    @[JSON::Field(key: "application_fee_percent", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    getter application_fee_percent : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    @[JSON::Field(key: "billing_thresholds", type: Stripe::SubscriptionBillingThresholds1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_thresholds.nil? && !billing_thresholds_present?)]
    getter billing_thresholds : Stripe::SubscriptionBillingThresholds1? = nil

    @[JSON::Field(ignore: true)]
    property? billing_thresholds_present : Bool = false

    # A date in the future at which the subscription will automatically get canceled
    @[JSON::Field(key: "cancel_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cancel_at.nil? && !cancel_at_present?)]
    getter cancel_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? cancel_at_present : Bool = false

    # If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
    @[JSON::Field(key: "canceled_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: canceled_at.nil? && !canceled_at_present?)]
    getter canceled_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? canceled_at_present : Bool = false

    # Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
    @[JSON::Field(key: "days_until_due", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: days_until_due.nil? && !days_until_due_present?)]
    getter days_until_due : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? days_until_due_present : Bool = false

    @[JSON::Field(key: "default_payment_method", type: Stripe::SubscriptionDefaultPaymentMethod?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    getter default_payment_method : Stripe::SubscriptionDefaultPaymentMethod? = nil

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    @[JSON::Field(key: "default_source", type: Stripe::SubscriptionDefaultSource?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_source.nil? && !default_source_present?)]
    getter default_source : Stripe::SubscriptionDefaultSource? = nil

    @[JSON::Field(ignore: true)]
    property? default_source_present : Bool = false

    # The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
    @[JSON::Field(key: "default_tax_rates", type: Array(Stripe::TaxRate)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_tax_rates.nil? && !default_tax_rates_present?)]
    getter default_tax_rates : Array(Stripe::TaxRate)? = nil

    @[JSON::Field(ignore: true)]
    property? default_tax_rates_present : Bool = false

    # The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 500

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "discount", type: Stripe::SubscriptionDiscount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: discount.nil? && !discount_present?)]
    getter discount : Stripe::SubscriptionDiscount? = nil

    @[JSON::Field(ignore: true)]
    property? discount_present : Bool = false

    # If the subscription has ended, the date the subscription ended.
    @[JSON::Field(key: "ended_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ended_at.nil? && !ended_at_present?)]
    getter ended_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? ended_at_present : Bool = false

    @[JSON::Field(key: "latest_invoice", type: Stripe::SubscriptionLatestInvoice?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: latest_invoice.nil? && !latest_invoice_present?)]
    getter latest_invoice : Stripe::SubscriptionLatestInvoice? = nil

    @[JSON::Field(ignore: true)]
    property? latest_invoice_present : Bool = false

    # Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
    @[JSON::Field(key: "next_pending_invoice_item_invoice", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: next_pending_invoice_item_invoice.nil? && !next_pending_invoice_item_invoice_present?)]
    getter next_pending_invoice_item_invoice : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? next_pending_invoice_item_invoice_present : Bool = false

    @[JSON::Field(key: "on_behalf_of", type: Stripe::SubscriptionOnBehalfOf?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    getter on_behalf_of : Stripe::SubscriptionOnBehalfOf? = nil

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "pause_collection", type: Stripe::SubscriptionPauseCollection?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pause_collection.nil? && !pause_collection_present?)]
    getter pause_collection : Stripe::SubscriptionPauseCollection? = nil

    @[JSON::Field(ignore: true)]
    property? pause_collection_present : Bool = false

    @[JSON::Field(key: "payment_settings", type: Stripe::SubscriptionPaymentSettings?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_settings.nil? && !payment_settings_present?)]
    getter payment_settings : Stripe::SubscriptionPaymentSettings? = nil

    @[JSON::Field(ignore: true)]
    property? payment_settings_present : Bool = false

    @[JSON::Field(key: "pending_invoice_item_interval", type: Stripe::SubscriptionPendingInvoiceItemInterval1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pending_invoice_item_interval.nil? && !pending_invoice_item_interval_present?)]
    getter pending_invoice_item_interval : Stripe::SubscriptionPendingInvoiceItemInterval1? = nil

    @[JSON::Field(ignore: true)]
    property? pending_invoice_item_interval_present : Bool = false

    @[JSON::Field(key: "pending_setup_intent", type: Stripe::SubscriptionPendingSetupIntent?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pending_setup_intent.nil? && !pending_setup_intent_present?)]
    getter pending_setup_intent : Stripe::SubscriptionPendingSetupIntent? = nil

    @[JSON::Field(ignore: true)]
    property? pending_setup_intent_present : Bool = false

    @[JSON::Field(key: "pending_update", type: Stripe::SubscriptionPendingUpdate?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pending_update.nil? && !pending_update_present?)]
    getter pending_update : Stripe::SubscriptionPendingUpdate? = nil

    @[JSON::Field(ignore: true)]
    property? pending_update_present : Bool = false

    @[JSON::Field(key: "schedule", type: Stripe::SubscriptionSchedule1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: schedule.nil? && !schedule_present?)]
    getter schedule : Stripe::SubscriptionSchedule1? = nil

    @[JSON::Field(ignore: true)]
    property? schedule_present : Bool = false

    @[JSON::Field(key: "test_clock", type: Stripe::SubscriptionTestClock?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: test_clock.nil? && !test_clock_present?)]
    getter test_clock : Stripe::SubscriptionTestClock? = nil

    @[JSON::Field(ignore: true)]
    property? test_clock_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: Stripe::SubscriptionTransferData1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    getter transfer_data : Stripe::SubscriptionTransferData1? = nil

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # If the subscription has a trial, the end of that trial.
    @[JSON::Field(key: "trial_end", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: trial_end.nil? && !trial_end_present?)]
    getter trial_end : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? trial_end_present : Bool = false

    # If the subscription has a trial, the beginning of that trial.
    @[JSON::Field(key: "trial_start", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: trial_start.nil? && !trial_start_present?)]
    getter trial_start : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? trial_start_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @automatic_tax : Stripe::SubscriptionAutomaticTax? = nil,
      @billing_cycle_anchor : Int64? = nil,
      @cancel_at_period_end : Bool? = nil,
      @collection_method : String? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @current_period_end : Int64? = nil,
      @current_period_start : Int64? = nil,
      @customer : Stripe::SubscriptionCustomer? = nil,
      @id : String? = nil,
      @items : Stripe::SubscriptionItemList? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @start_date : Int64? = nil,
      @status : String? = nil,
      # Optional properties
      @application : Stripe::SubscriptionApplication? = nil,
      @application_fee_percent : Float64? = nil,
      @billing_thresholds : Stripe::SubscriptionBillingThresholds1? = nil,
      @cancel_at : Int64? = nil,
      @canceled_at : Int64? = nil,
      @days_until_due : Int64? = nil,
      @default_payment_method : Stripe::SubscriptionDefaultPaymentMethod? = nil,
      @default_source : Stripe::SubscriptionDefaultSource? = nil,
      @default_tax_rates : Array(Stripe::TaxRate)? = nil,
      @description : String? = nil,
      @discount : Stripe::SubscriptionDiscount? = nil,
      @ended_at : Int64? = nil,
      @latest_invoice : Stripe::SubscriptionLatestInvoice? = nil,
      @next_pending_invoice_item_invoice : Int64? = nil,
      @on_behalf_of : Stripe::SubscriptionOnBehalfOf? = nil,
      @pause_collection : Stripe::SubscriptionPauseCollection? = nil,
      @payment_settings : Stripe::SubscriptionPaymentSettings? = nil,
      @pending_invoice_item_interval : Stripe::SubscriptionPendingInvoiceItemInterval1? = nil,
      @pending_setup_intent : Stripe::SubscriptionPendingSetupIntent? = nil,
      @pending_update : Stripe::SubscriptionPendingUpdate? = nil,
      @schedule : Stripe::SubscriptionSchedule1? = nil,
      @test_clock : Stripe::SubscriptionTestClock? = nil,
      @transfer_data : Stripe::SubscriptionTransferData1? = nil,
      @trial_end : Int64? = nil,
      @trial_start : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"automatic_tax\" is required and cannot be null") if @automatic_tax.nil?

      unless (_automatic_tax = @automatic_tax).nil?
        invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax")) if _automatic_tax.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"billing_cycle_anchor\" is required and cannot be null") if @billing_cycle_anchor.nil?

      invalid_properties.push("\"cancel_at_period_end\" is required and cannot be null") if @cancel_at_period_end.nil?

      invalid_properties.push("\"collection_method\" is required and cannot be null") if @collection_method.nil?

      unless (_collection_method = @collection_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_COLLECTION_METHOD) unless OpenApi::EnumValidator.valid?(_collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"current_period_end\" is required and cannot be null") if @current_period_end.nil?

      invalid_properties.push("\"current_period_start\" is required and cannot be null") if @current_period_start.nil?

      invalid_properties.push("\"customer\" is required and cannot be null") if @customer.nil?

      unless (_customer = @customer).nil?
        invalid_properties.concat(_customer.list_invalid_properties_for("customer")) if _customer.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"items\" is required and cannot be null") if @items.nil?

      unless (_items = @items).nil?
        invalid_properties.concat(_items.list_invalid_properties_for("items")) if _items.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"start_date\" is required and cannot be null") if @start_date.nil?

      unless (_application = @application).nil?
        invalid_properties.concat(_application.list_invalid_properties_for("application")) if _application.is_a?(OpenApi::Validatable)
      end

      unless (_billing_thresholds = @billing_thresholds).nil?
        invalid_properties.concat(_billing_thresholds.list_invalid_properties_for("billing_thresholds")) if _billing_thresholds.is_a?(OpenApi::Validatable)
      end

      unless (_default_payment_method = @default_payment_method).nil?
        invalid_properties.concat(_default_payment_method.list_invalid_properties_for("default_payment_method")) if _default_payment_method.is_a?(OpenApi::Validatable)
      end
      unless (_default_tax_rates = @default_tax_rates).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "default_tax_rates", container: _default_tax_rates)) if _default_tax_rates.is_a?(Array)
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_discount = @discount).nil?
        invalid_properties.concat(_discount.list_invalid_properties_for("discount")) if _discount.is_a?(OpenApi::Validatable)
      end

      unless (_latest_invoice = @latest_invoice).nil?
        invalid_properties.concat(_latest_invoice.list_invalid_properties_for("latest_invoice")) if _latest_invoice.is_a?(OpenApi::Validatable)
      end

      unless (_on_behalf_of = @on_behalf_of).nil?
        invalid_properties.concat(_on_behalf_of.list_invalid_properties_for("on_behalf_of")) if _on_behalf_of.is_a?(OpenApi::Validatable)
      end
      unless (_pause_collection = @pause_collection).nil?
        invalid_properties.concat(_pause_collection.list_invalid_properties_for("pause_collection")) if _pause_collection.is_a?(OpenApi::Validatable)
      end
      unless (_payment_settings = @payment_settings).nil?
        invalid_properties.concat(_payment_settings.list_invalid_properties_for("payment_settings")) if _payment_settings.is_a?(OpenApi::Validatable)
      end
      unless (_pending_invoice_item_interval = @pending_invoice_item_interval).nil?
        invalid_properties.concat(_pending_invoice_item_interval.list_invalid_properties_for("pending_invoice_item_interval")) if _pending_invoice_item_interval.is_a?(OpenApi::Validatable)
      end
      unless (_pending_setup_intent = @pending_setup_intent).nil?
        invalid_properties.concat(_pending_setup_intent.list_invalid_properties_for("pending_setup_intent")) if _pending_setup_intent.is_a?(OpenApi::Validatable)
      end
      unless (_pending_update = @pending_update).nil?
        invalid_properties.concat(_pending_update.list_invalid_properties_for("pending_update")) if _pending_update.is_a?(OpenApi::Validatable)
      end
      unless (_schedule = @schedule).nil?
        invalid_properties.concat(_schedule.list_invalid_properties_for("schedule")) if _schedule.is_a?(OpenApi::Validatable)
      end
      unless (_test_clock = @test_clock).nil?
        invalid_properties.concat(_test_clock.list_invalid_properties_for("test_clock")) if _test_clock.is_a?(OpenApi::Validatable)
      end
      unless (_transfer_data = @transfer_data).nil?
        invalid_properties.concat(_transfer_data.list_invalid_properties_for("transfer_data")) if _transfer_data.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @automatic_tax.nil?
      unless (_automatic_tax = @automatic_tax).nil?
        return false if _automatic_tax.is_a?(OpenApi::Validatable) && !_automatic_tax.valid?
      end

      return false if @billing_cycle_anchor.nil?

      return false if @cancel_at_period_end.nil?

      return false if @collection_method.nil?
      unless (_collection_method = @collection_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      end

      return false if @created.nil?

      return false if @currency.nil?

      return false if @current_period_end.nil?

      return false if @current_period_start.nil?

      return false if @customer.nil?
      unless (_customer = @customer).nil?
        return false if _customer.is_a?(OpenApi::Validatable) && !_customer.valid?
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @items.nil?
      unless (_items = @items).nil?
        return false if _items.is_a?(OpenApi::Validatable) && !_items.valid?
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @start_date.nil?

      unless (_application = @application).nil?
        return false if _application.is_a?(OpenApi::Validatable) && !_application.valid?
      end

      unless (_billing_thresholds = @billing_thresholds).nil?
        return false if _billing_thresholds.is_a?(OpenApi::Validatable) && !_billing_thresholds.valid?
      end

      unless (_default_payment_method = @default_payment_method).nil?
        return false if _default_payment_method.is_a?(OpenApi::Validatable) && !_default_payment_method.valid?
      end

      unless (_default_tax_rates = @default_tax_rates).nil?
        return false if _default_tax_rates.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _default_tax_rates)
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_discount = @discount).nil?
        return false if _discount.is_a?(OpenApi::Validatable) && !_discount.valid?
      end

      unless (_latest_invoice = @latest_invoice).nil?
        return false if _latest_invoice.is_a?(OpenApi::Validatable) && !_latest_invoice.valid?
      end

      unless (_on_behalf_of = @on_behalf_of).nil?
        return false if _on_behalf_of.is_a?(OpenApi::Validatable) && !_on_behalf_of.valid?
      end

      unless (_pause_collection = @pause_collection).nil?
        return false if _pause_collection.is_a?(OpenApi::Validatable) && !_pause_collection.valid?
      end

      unless (_payment_settings = @payment_settings).nil?
        return false if _payment_settings.is_a?(OpenApi::Validatable) && !_payment_settings.valid?
      end

      unless (_pending_invoice_item_interval = @pending_invoice_item_interval).nil?
        return false if _pending_invoice_item_interval.is_a?(OpenApi::Validatable) && !_pending_invoice_item_interval.valid?
      end

      unless (_pending_setup_intent = @pending_setup_intent).nil?
        return false if _pending_setup_intent.is_a?(OpenApi::Validatable) && !_pending_setup_intent.valid?
      end

      unless (_pending_update = @pending_update).nil?
        return false if _pending_update.is_a?(OpenApi::Validatable) && !_pending_update.valid?
      end

      unless (_schedule = @schedule).nil?
        return false if _schedule.is_a?(OpenApi::Validatable) && !_schedule.valid?
      end

      unless (_test_clock = @test_clock).nil?
        return false if _test_clock.is_a?(OpenApi::Validatable) && !_test_clock.valid?
      end

      unless (_transfer_data = @transfer_data).nil?
        return false if _transfer_data.is_a?(OpenApi::Validatable) && !_transfer_data.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(new_value : Stripe::SubscriptionAutomaticTax?)
      raise ArgumentError.new("\"automatic_tax\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @automatic_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(new_value : Int64?)
      raise ArgumentError.new("\"billing_cycle_anchor\" is required and cannot be null") if new_value.nil?

      @billing_cycle_anchor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_at_period_end Object to be assigned
    def cancel_at_period_end=(new_value : Bool?)
      raise ArgumentError.new("\"cancel_at_period_end\" is required and cannot be null") if new_value.nil?

      @cancel_at_period_end = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(new_value : String?)
      raise ArgumentError.new("\"collection_method\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("collection_method", new_value, VALID_VALUES_FOR_COLLECTION_METHOD)
      end

      @collection_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_period_end Object to be assigned
    def current_period_end=(new_value : Int64?)
      raise ArgumentError.new("\"current_period_end\" is required and cannot be null") if new_value.nil?

      @current_period_end = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_period_start Object to be assigned
    def current_period_start=(new_value : Int64?)
      raise ArgumentError.new("\"current_period_start\" is required and cannot be null") if new_value.nil?

      @current_period_start = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : Stripe::SubscriptionCustomer?)
      raise ArgumentError.new("\"customer\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] items Object to be assigned
    def items=(new_value : Stripe::SubscriptionItemList?)
      raise ArgumentError.new("\"items\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @items = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"metadata\" is required and cannot be null") if new_value.nil?

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(new_value : Int64?)
      raise ArgumentError.new("\"start_date\" is required and cannot be null") if new_value.nil?

      @start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(new_value : Stripe::SubscriptionApplication?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @application = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_percent Object to be assigned
    def application_fee_percent=(new_value : Float64?)
      @application_fee_percent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_thresholds Object to be assigned
    def billing_thresholds=(new_value : Stripe::SubscriptionBillingThresholds1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @billing_thresholds = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_at Object to be assigned
    def cancel_at=(new_value : Int64?)
      @cancel_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] canceled_at Object to be assigned
    def canceled_at=(new_value : Int64?)
      @canceled_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_until_due Object to be assigned
    def days_until_due=(new_value : Int64?)
      @days_until_due = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(new_value : Stripe::SubscriptionDefaultPaymentMethod?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @default_payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_source Object to be assigned
    def default_source=(new_value : Stripe::SubscriptionDefaultSource?)
      @default_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_tax_rates Object to be assigned
    def default_tax_rates=(new_value : Array(Stripe::TaxRate)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @default_tax_rates = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount Object to be assigned
    def discount=(new_value : Stripe::SubscriptionDiscount?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @discount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ended_at Object to be assigned
    def ended_at=(new_value : Int64?)
      @ended_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] latest_invoice Object to be assigned
    def latest_invoice=(new_value : Stripe::SubscriptionLatestInvoice?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @latest_invoice = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_pending_invoice_item_invoice Object to be assigned
    def next_pending_invoice_item_invoice=(new_value : Int64?)
      @next_pending_invoice_item_invoice = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(new_value : Stripe::SubscriptionOnBehalfOf?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @on_behalf_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pause_collection Object to be assigned
    def pause_collection=(new_value : Stripe::SubscriptionPauseCollection?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pause_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_settings Object to be assigned
    def payment_settings=(new_value : Stripe::SubscriptionPaymentSettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_settings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending_invoice_item_interval Object to be assigned
    def pending_invoice_item_interval=(new_value : Stripe::SubscriptionPendingInvoiceItemInterval1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pending_invoice_item_interval = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending_setup_intent Object to be assigned
    def pending_setup_intent=(new_value : Stripe::SubscriptionPendingSetupIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pending_setup_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending_update Object to be assigned
    def pending_update=(new_value : Stripe::SubscriptionPendingUpdate?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pending_update = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] schedule Object to be assigned
    def schedule=(new_value : Stripe::SubscriptionSchedule1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @schedule = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock Object to be assigned
    def test_clock=(new_value : Stripe::SubscriptionTestClock?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @test_clock = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(new_value : Stripe::SubscriptionTransferData1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfer_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_end Object to be assigned
    def trial_end=(new_value : Int64?)
      @trial_end = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_start Object to be assigned
    def trial_start=(new_value : Int64?)
      @trial_start = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@automatic_tax, @billing_cycle_anchor, @cancel_at_period_end, @collection_method, @created, @currency, @current_period_end, @current_period_start, @customer, @id, @items, @livemode, @metadata, @object, @start_date, @status, @application, @application_present, @application_fee_percent, @application_fee_percent_present, @billing_thresholds, @billing_thresholds_present, @cancel_at, @cancel_at_present, @canceled_at, @canceled_at_present, @days_until_due, @days_until_due_present, @default_payment_method, @default_payment_method_present, @default_source, @default_source_present, @default_tax_rates, @default_tax_rates_present, @description, @description_present, @discount, @discount_present, @ended_at, @ended_at_present, @latest_invoice, @latest_invoice_present, @next_pending_invoice_item_invoice, @next_pending_invoice_item_invoice_present, @on_behalf_of, @on_behalf_of_present, @pause_collection, @pause_collection_present, @payment_settings, @payment_settings_present, @pending_invoice_item_interval, @pending_invoice_item_interval_present, @pending_setup_intent, @pending_setup_intent_present, @pending_update, @pending_update_present, @schedule, @schedule_present, @test_clock, @test_clock_present, @transfer_data, @transfer_data_present, @trial_end, @trial_end_present, @trial_start, @trial_start_present)
  end
end
