#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class BitcoinReceiver
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # True when this bitcoin receiver has received a non-zero amount of bitcoin.
    @[JSON::Field(key: "active", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter active : Bool? = nil

    # The amount of `currency` that you are collecting as payment.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # The amount of `currency` to which `bitcoin_amount_received` has been converted.
    @[JSON::Field(key: "amount_received", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_received : Int64? = nil

    # The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
    @[JSON::Field(key: "bitcoin_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bitcoin_amount : Int64? = nil

    # The amount of bitcoin that has been sent by the customer to this receiver.
    @[JSON::Field(key: "bitcoin_amount_received", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bitcoin_amount_received : Int64? = nil

    # This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
    @[JSON::Field(key: "bitcoin_uri", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bitcoin_uri : String? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver.
    @[JSON::Field(key: "filled", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter filled : Bool? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
    @[JSON::Field(key: "inbound_address", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter inbound_address : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["bitcoin_receiver"])

    # This receiver contains uncaptured funds that can be used for a payment or refunded.
    @[JSON::Field(key: "uncaptured_funds", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter uncaptured_funds : Bool? = nil

    # Optional properties

    # The customer ID of the bitcoin receiver.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The customer's email address, set by the API call that creates the receiver.
    @[JSON::Field(key: "email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: email.nil? && !email_present?)]
    getter email : String? = nil

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
    @[JSON::Field(key: "payment", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment.nil? && !payment_present?)]
    getter payment : String? = nil

    @[JSON::Field(ignore: true)]
    property? payment_present : Bool = false

    # The refund address of this bitcoin receiver.
    @[JSON::Field(key: "refund_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_address.nil? && !refund_address_present?)]
    getter refund_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? refund_address_present : Bool = false

    @[JSON::Field(key: "transactions", type: Stripe::BitcoinTransactionList1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transactions : Stripe::BitcoinTransactionList1? = nil

    # Indicate if this source is used for payment.
    @[JSON::Field(key: "used_for_payment", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: used_for_payment.nil? && !used_for_payment_present?)]
    getter used_for_payment : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? used_for_payment_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @active : Bool? = nil,
      @amount : Int64? = nil,
      @amount_received : Int64? = nil,
      @bitcoin_amount : Int64? = nil,
      @bitcoin_amount_received : Int64? = nil,
      @bitcoin_uri : String? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @filled : Bool? = nil,
      @id : String? = nil,
      @inbound_address : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @uncaptured_funds : Bool? = nil,
      # Optional properties
      @customer : String? = nil,
      @description : String? = nil,
      @email : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @payment : String? = nil,
      @refund_address : String? = nil,
      @transactions : Stripe::BitcoinTransactionList1? = nil,
      @used_for_payment : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"active\" is required and cannot be null") if @active.nil?
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?
      invalid_properties.push("\"amount_received\" is required and cannot be null") if @amount_received.nil?
      invalid_properties.push("\"bitcoin_amount\" is required and cannot be null") if @bitcoin_amount.nil?
      invalid_properties.push("\"bitcoin_amount_received\" is required and cannot be null") if @bitcoin_amount_received.nil?
      invalid_properties.push("\"bitcoin_uri\" is required and cannot be null") if @bitcoin_uri.nil?
      if _bitcoin_uri = @bitcoin_uri
        if _bitcoin_uri.to_s.size > 5000
          invalid_properties.push("invalid value for \"bitcoin_uri\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?
      invalid_properties.push("\"filled\" is required and cannot be null") if @filled.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"inbound_address\" is required and cannot be null") if @inbound_address.nil?
      if _inbound_address = @inbound_address
        if _inbound_address.to_s.size > 5000
          invalid_properties.push("invalid value for \"inbound_address\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"uncaptured_funds\" is required and cannot be null") if @uncaptured_funds.nil?
      if _customer = @customer
        if _customer.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _email = @email
        if _email.to_s.size > 5000
          invalid_properties.push("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _payment = @payment
        if _payment.to_s.size > 5000
          invalid_properties.push("invalid value for \"payment\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _refund_address = @refund_address
        if _refund_address.to_s.size > 5000
          invalid_properties.push("invalid value for \"refund_address\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model transactions : Stripe::BitcoinTransactionList1?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @active.nil?
      return false if @amount.nil?
      return false if @amount_received.nil?
      return false if @bitcoin_amount.nil?
      return false if @bitcoin_amount_received.nil?
      return false if @bitcoin_uri.nil?
      if _bitcoin_uri = @bitcoin_uri
        return false if _bitcoin_uri.to_s.size > 5000
      end
      return false if @created.nil?
      return false if @currency.nil?
      return false if @filled.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @inbound_address.nil?
      if _inbound_address = @inbound_address
        return false if _inbound_address.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @uncaptured_funds.nil?
      if _customer = @customer
        return false if _customer.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      if _email = @email
        return false if _email.to_s.size > 5000
      end
      if _payment = @payment
        return false if _payment.to_s.size > 5000
      end
      if _refund_address = @refund_address
        return false if _refund_address.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] active Object to be assigned
    def active=(active : Bool?)
      if active.nil?
        raise ArgumentError.new("\"active\" is required and cannot be null")
      end
      @active = active
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        raise ArgumentError.new("\"amount\" is required and cannot be null")
      end
      @amount = amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_received Object to be assigned
    def amount_received=(amount_received : Int64?)
      if amount_received.nil?
        raise ArgumentError.new("\"amount_received\" is required and cannot be null")
      end
      @amount_received = amount_received
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bitcoin_amount Object to be assigned
    def bitcoin_amount=(bitcoin_amount : Int64?)
      if bitcoin_amount.nil?
        raise ArgumentError.new("\"bitcoin_amount\" is required and cannot be null")
      end
      @bitcoin_amount = bitcoin_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bitcoin_amount_received Object to be assigned
    def bitcoin_amount_received=(bitcoin_amount_received : Int64?)
      if bitcoin_amount_received.nil?
        raise ArgumentError.new("\"bitcoin_amount_received\" is required and cannot be null")
      end
      @bitcoin_amount_received = bitcoin_amount_received
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bitcoin_uri Object to be assigned
    def bitcoin_uri=(bitcoin_uri : String?)
      if bitcoin_uri.nil?
        raise ArgumentError.new("\"bitcoin_uri\" is required and cannot be null")
      end
      _bitcoin_uri = bitcoin_uri.not_nil!
      if _bitcoin_uri.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"bitcoin_uri\", the character length must be smaller than or equal to 5000.")
      end

      @bitcoin_uri = bitcoin_uri
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filled Object to be assigned
    def filled=(filled : Bool?)
      if filled.nil?
        raise ArgumentError.new("\"filled\" is required and cannot be null")
      end
      @filled = filled
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inbound_address Object to be assigned
    def inbound_address=(inbound_address : String?)
      if inbound_address.nil?
        raise ArgumentError.new("\"inbound_address\" is required and cannot be null")
      end
      _inbound_address = inbound_address.not_nil!
      if _inbound_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"inbound_address\", the character length must be smaller than or equal to 5000.")
      end

      @inbound_address = inbound_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uncaptured_funds Object to be assigned
    def uncaptured_funds=(uncaptured_funds : Bool?)
      if uncaptured_funds.nil?
        raise ArgumentError.new("\"uncaptured_funds\" is required and cannot be null")
      end
      @uncaptured_funds = uncaptured_funds
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      if _customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(email : String?)
      if email.nil?
        return @email = nil
      end
      _email = email.not_nil!
      if _email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      @email = email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment Object to be assigned
    def payment=(payment : String?)
      if payment.nil?
        return @payment = nil
      end
      _payment = payment.not_nil!
      if _payment.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment\", the character length must be smaller than or equal to 5000.")
      end

      @payment = payment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_address Object to be assigned
    def refund_address=(refund_address : String?)
      if refund_address.nil?
        return @refund_address = nil
      end
      _refund_address = refund_address.not_nil!
      if _refund_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"refund_address\", the character length must be smaller than or equal to 5000.")
      end

      @refund_address = refund_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions Object to be assigned
    def transactions=(transactions : Stripe::BitcoinTransactionList1?)
      if transactions.nil?
        return @transactions = nil
      end
      @transactions = transactions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] used_for_payment Object to be assigned
    def used_for_payment=(used_for_payment : Bool?)
      if used_for_payment.nil?
        return @used_for_payment = nil
      end
      @used_for_payment = used_for_payment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @amount, @amount_received, @bitcoin_amount, @bitcoin_amount_received, @bitcoin_uri, @created, @currency, @filled, @id, @inbound_address, @livemode, @object, @uncaptured_funds, @customer, @customer_present, @description, @description_present, @email, @email_present, @metadata, @metadata_present, @payment, @payment_present, @refund_address, @refund_address_present, @transactions, @used_for_payment, @used_for_payment_present)
  end
end
