#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class PaymentMethodParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Account number of the bank account.
    @[JSON::Field(key: "account_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_number : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_NUMBER = 5000

    # Institution number of the customer's bank.
    @[JSON::Field(key: "institution_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter institution_number : String? = nil
    MAX_LENGTH_FOR_INSTITUTION_NUMBER = 5000

    # Transit number of the customer's bank.
    @[JSON::Field(key: "transit_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transit_number : String? = nil
    MAX_LENGTH_FOR_TRANSIT_NUMBER = 5000

    # End of Required Properties

    # Optional Properties

    # Account holder type: individual or company.
    @[JSON::Field(key: "account_holder_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_holder_type : String? = nil
    ERROR_MESSAGE_FOR_ACCOUNT_HOLDER_TYPE = "invalid value for \"account_holder_type\", must be one of [company, individual]."
    VALID_VALUES_FOR_ACCOUNT_HOLDER_TYPE  = String.static_array("company", "individual")

    # Account type: checkings or savings. Defaults to checking if omitted.
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_type : String? = nil
    ERROR_MESSAGE_FOR_ACCOUNT_TYPE = "invalid value for \"account_type\", must be one of [checking, savings]."
    VALID_VALUES_FOR_ACCOUNT_TYPE  = String.static_array("checking", "savings")

    # The ID of a Financial Connections Account to use as a payment method.
    @[JSON::Field(key: "financial_connections_account", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_connections_account : String? = nil
    MAX_LENGTH_FOR_FINANCIAL_CONNECTIONS_ACCOUNT = 5000

    # Routing number of the bank account.
    @[JSON::Field(key: "routing_number", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter routing_number : String? = nil
    MAX_LENGTH_FOR_ROUTING_NUMBER = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_number : String? = nil,
      @institution_number : String? = nil,
      @transit_number : String? = nil,
      # Optional properties
      @account_holder_type : String? = nil,
      @account_type : String? = nil,
      @financial_connections_account : String? = nil,
      @routing_number : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account_number\" is required and cannot be null") if @account_number.nil?

      unless (_account_number = @account_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_number", _account_number.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"institution_number\" is required and cannot be null") if @institution_number.nil?

      unless (_institution_number = @institution_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("institution_number", _institution_number.to_s.size, MAX_LENGTH_FOR_INSTITUTION_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"transit_number\" is required and cannot be null") if @transit_number.nil?

      unless (_transit_number = @transit_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transit_number", _transit_number.to_s.size, MAX_LENGTH_FOR_TRANSIT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_account_holder_type = @account_holder_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ACCOUNT_HOLDER_TYPE) unless OpenApi::EnumValidator.valid?(_account_holder_type, VALID_VALUES_FOR_ACCOUNT_HOLDER_TYPE)
      end
      unless (_account_type = @account_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ACCOUNT_TYPE) unless OpenApi::EnumValidator.valid?(_account_type, VALID_VALUES_FOR_ACCOUNT_TYPE)
      end
      unless (_financial_connections_account = @financial_connections_account).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("financial_connections_account", _financial_connections_account.to_s.size, MAX_LENGTH_FOR_FINANCIAL_CONNECTIONS_ACCOUNT)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_routing_number = @routing_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("routing_number", _routing_number.to_s.size, MAX_LENGTH_FOR_ROUTING_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account_number.nil?
      unless (_account_number = @account_number).nil?
        return false if _account_number.to_s.size > MAX_LENGTH_FOR_ACCOUNT_NUMBER
      end

      return false if @institution_number.nil?
      unless (_institution_number = @institution_number).nil?
        return false if _institution_number.to_s.size > MAX_LENGTH_FOR_INSTITUTION_NUMBER
      end

      return false if @transit_number.nil?
      unless (_transit_number = @transit_number).nil?
        return false if _transit_number.to_s.size > MAX_LENGTH_FOR_TRANSIT_NUMBER
      end

      unless (_account_holder_type = @account_holder_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_account_holder_type, VALID_VALUES_FOR_ACCOUNT_HOLDER_TYPE)
      end

      unless (_account_type = @account_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_account_type, VALID_VALUES_FOR_ACCOUNT_TYPE)
      end

      unless (_financial_connections_account = @financial_connections_account).nil?
        return false if _financial_connections_account.to_s.size > MAX_LENGTH_FOR_FINANCIAL_CONNECTIONS_ACCOUNT
      end

      unless (_routing_number = @routing_number).nil?
        return false if _routing_number.to_s.size > MAX_LENGTH_FOR_ROUTING_NUMBER
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_number Object to be assigned
    def account_number=(new_value : String?)
      raise ArgumentError.new("\"account_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_number", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NUMBER)
      end

      @account_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_number Object to be assigned
    def institution_number=(new_value : String?)
      raise ArgumentError.new("\"institution_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("institution_number", new_value.to_s.size, MAX_LENGTH_FOR_INSTITUTION_NUMBER)
      end

      @institution_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transit_number Object to be assigned
    def transit_number=(new_value : String?)
      raise ArgumentError.new("\"transit_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("transit_number", new_value.to_s.size, MAX_LENGTH_FOR_TRANSIT_NUMBER)
      end

      @transit_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_holder_type Object to be assigned
    def account_holder_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("account_holder_type", new_value, VALID_VALUES_FOR_ACCOUNT_HOLDER_TYPE)
      end

      @account_holder_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("account_type", new_value, VALID_VALUES_FOR_ACCOUNT_TYPE)
      end

      @account_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_connections_account Object to be assigned
    def financial_connections_account=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("financial_connections_account", new_value.to_s.size, MAX_LENGTH_FOR_FINANCIAL_CONNECTIONS_ACCOUNT)
      end

      @financial_connections_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] routing_number Object to be assigned
    def routing_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("routing_number", new_value.to_s.size, MAX_LENGTH_FOR_ROUTING_NUMBER)
      end

      @routing_number = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_number, @institution_number, @transit_number, @account_holder_type, @account_type, @financial_connections_account, @routing_number)
  end
end
