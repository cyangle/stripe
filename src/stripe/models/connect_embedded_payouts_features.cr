#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class ConnectEmbeddedPayoutsFeatures
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Whether to allow payout schedule to be changed. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
    @[JSON::Field(key: "edit_payout_schedule", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter edit_payout_schedule : Bool? = nil

    # Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for custom accounts (or accounts where the platform is compliance owner). Otherwise, bank account collection is determined by compliance requirements.
    @[JSON::Field(key: "external_account_collection", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter external_account_collection : Bool? = nil

    # Whether to allow creation of instant payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
    @[JSON::Field(key: "instant_payouts", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter instant_payouts : Bool? = nil

    # Whether to allow creation of standard payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
    @[JSON::Field(key: "standard_payouts", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter standard_payouts : Bool? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @edit_payout_schedule : Bool? = nil,
      @external_account_collection : Bool? = nil,
      @instant_payouts : Bool? = nil,
      @standard_payouts : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"edit_payout_schedule\" is required and cannot be null") if @edit_payout_schedule.nil?

      invalid_properties.push("\"external_account_collection\" is required and cannot be null") if @external_account_collection.nil?

      invalid_properties.push("\"instant_payouts\" is required and cannot be null") if @instant_payouts.nil?

      invalid_properties.push("\"standard_payouts\" is required and cannot be null") if @standard_payouts.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @edit_payout_schedule.nil?

      return false if @external_account_collection.nil?

      return false if @instant_payouts.nil?

      return false if @standard_payouts.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] edit_payout_schedule Object to be assigned
    def edit_payout_schedule=(new_value : Bool?)
      raise ArgumentError.new("\"edit_payout_schedule\" is required and cannot be null") if new_value.nil?

      @edit_payout_schedule = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] external_account_collection Object to be assigned
    def external_account_collection=(new_value : Bool?)
      raise ArgumentError.new("\"external_account_collection\" is required and cannot be null") if new_value.nil?

      @external_account_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instant_payouts Object to be assigned
    def instant_payouts=(new_value : Bool?)
      raise ArgumentError.new("\"instant_payouts\" is required and cannot be null") if new_value.nil?

      @instant_payouts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] standard_payouts Object to be assigned
    def standard_payouts=(new_value : Bool?)
      raise ArgumentError.new("\"standard_payouts\" is required and cannot be null") if new_value.nil?

      @standard_payouts = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@edit_payout_schedule, @external_account_collection, @instant_payouts, @standard_payouts)
  end
end
