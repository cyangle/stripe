#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./mandate_offline_acceptance_params"
require "./mandate_online_acceptance_params"

module Stripe
  class MandateAcceptanceParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The status of the mandate acceptance. Either `accepted` (the mandate was accepted) or `refused` (the mandate was refused).
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    MAX_LENGTH_FOR_STATUS    = 5000
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [accepted, pending, refused, revoked]."
    VALID_VALUES_FOR_STATUS  = String.static_array("accepted", "pending", "refused", "revoked")

    # End of Required Properties

    # Optional Properties

    # The Unix timestamp (in seconds) when the mandate was accepted or refused by the customer.
    @[JSON::Field(key: "date", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter date : Int64? = nil

    # The IP address from which the mandate was accepted or refused by the customer.
    @[JSON::Field(key: "ip", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ip : String? = nil

    @[JSON::Field(key: "offline", type: Stripe::MandateOfflineAcceptanceParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter offline : Stripe::MandateOfflineAcceptanceParams? = nil

    @[JSON::Field(key: "online", type: Stripe::MandateOnlineAcceptanceParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter online : Stripe::MandateOnlineAcceptanceParams? = nil

    # The type of acceptance information included with the mandate. Either `online` or `offline`
    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil
    MAX_LENGTH_FOR__TYPE    = 5000
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [offline, online]."
    VALID_VALUES_FOR__TYPE  = String.static_array("offline", "online")

    # The user agent of the browser from which the mandate was accepted or refused by the customer.
    @[JSON::Field(key: "user_agent", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter user_agent : String? = nil
    MAX_LENGTH_FOR_USER_AGENT = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @status : String? = nil,
      # Optional properties
      @date : Int64? = nil,
      @ip : String? = nil,
      @offline : Stripe::MandateOfflineAcceptanceParams? = nil,
      @online : Stripe::MandateOnlineAcceptanceParams? = nil,
      @_type : String? = nil,
      @user_agent : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      unless (_offline = @offline).nil?
        invalid_properties.concat(_offline.list_invalid_properties_for("offline")) if _offline.is_a?(OpenApi::Validatable)
      end
      unless (_online = @online).nil?
        invalid_properties.concat(_online.list_invalid_properties_for("online")) if _online.is_a?(OpenApi::Validatable)
      end
      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_user_agent = @user_agent).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("user_agent", _user_agent.to_s.size, MAX_LENGTH_FOR_USER_AGENT)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      unless (_offline = @offline).nil?
        return false if _offline.is_a?(OpenApi::Validatable) && !_offline.valid?
      end

      unless (_online = @online).nil?
        return false if _online.is_a?(OpenApi::Validatable) && !_online.valid?
      end

      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_user_agent = @user_agent).nil?
        return false if _user_agent.to_s.size > MAX_LENGTH_FOR_USER_AGENT
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date Object to be assigned
    def date=(new_value : Int64?)
      @date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip Object to be assigned
    def ip=(new_value : String?)
      @ip = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] offline Object to be assigned
    def offline=(new_value : Stripe::MandateOfflineAcceptanceParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @offline = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] online Object to be assigned
    def online=(new_value : Stripe::MandateOnlineAcceptanceParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @online = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_agent Object to be assigned
    def user_agent=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("user_agent", new_value.to_s.size, MAX_LENGTH_FOR_USER_AGENT)
      end

      @user_agent = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @date, @ip, @offline, @online, @_type, @user_agent)
  end
end
