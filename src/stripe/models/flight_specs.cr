#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./flight_segment_specs"

module Stripe
  class FlightSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The time that the flight departed.
    @[JSON::Field(key: "departure_at", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter departure_at : Int64? = nil

    # The name of the passenger.
    @[JSON::Field(key: "passenger_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter passenger_name : String? = nil
    MAX_LENGTH_FOR_PASSENGER_NAME = 5000

    # Whether the ticket is refundable.
    @[JSON::Field(key: "refundable", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter refundable : Bool? = nil

    # The legs of the trip.
    @[JSON::Field(key: "segments", type: Array(Stripe::FlightSegmentSpecs)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter segments : Array(Stripe::FlightSegmentSpecs)? = nil

    # The travel agency that issued the ticket.
    @[JSON::Field(key: "travel_agency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter travel_agency : String? = nil
    MAX_LENGTH_FOR_TRAVEL_AGENCY = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @departure_at : Int64? = nil,
      @passenger_name : String? = nil,
      @refundable : Bool? = nil,
      @segments : Array(Stripe::FlightSegmentSpecs)? = nil,
      @travel_agency : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_passenger_name = @passenger_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("passenger_name", _passenger_name.to_s.size, MAX_LENGTH_FOR_PASSENGER_NAME)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_segments = @segments).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "segments", container: _segments)) if _segments.is_a?(Array)
      end
      unless (_travel_agency = @travel_agency).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("travel_agency", _travel_agency.to_s.size, MAX_LENGTH_FOR_TRAVEL_AGENCY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_passenger_name = @passenger_name).nil?
        return false if _passenger_name.to_s.size > MAX_LENGTH_FOR_PASSENGER_NAME
      end

      unless (_segments = @segments).nil?
        return false if _segments.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _segments)
      end

      unless (_travel_agency = @travel_agency).nil?
        return false if _travel_agency.to_s.size > MAX_LENGTH_FOR_TRAVEL_AGENCY
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] departure_at Object to be assigned
    def departure_at=(new_value : Int64?)
      @departure_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] passenger_name Object to be assigned
    def passenger_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("passenger_name", new_value.to_s.size, MAX_LENGTH_FOR_PASSENGER_NAME)
      end

      @passenger_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refundable Object to be assigned
    def refundable=(new_value : Bool?)
      @refundable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segments Object to be assigned
    def segments=(new_value : Array(Stripe::FlightSegmentSpecs)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @segments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] travel_agency Object to be assigned
    def travel_agency=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("travel_agency", new_value.to_s.size, MAX_LENGTH_FOR_TRAVEL_AGENCY)
      end

      @travel_agency = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@departure_at, @passenger_name, @refundable, @segments, @travel_agency)
  end
end
