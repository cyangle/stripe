#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class IssuingDisputeMerchandiseNotAsDescribedEvidence
    include JSON::Serializable
    include JSON::Serializable::Unmapped


    # Optional properties

    @[JSON::Field(key: "additional_documentation", type: IssuingDisputeCanceledEvidenceAdditionalDocumentation?, presence: true, ignore_serialize: additional_documentation.nil? && !additional_documentation_present?)]
    property additional_documentation : IssuingDisputeCanceledEvidenceAdditionalDocumentation?

    @[JSON::Field(ignore: true)]
    property? additional_documentation_present : Bool = false

    # Explanation of why the cardholder is disputing this transaction.
    @[JSON::Field(key: "explanation", type: String?, presence: true, ignore_serialize: explanation.nil? && !explanation_present?)]
    getter explanation : String?

    @[JSON::Field(ignore: true)]
    property? explanation_present : Bool = false

    # Date when the product was received.
    @[JSON::Field(key: "received_at", type: Int64?, presence: true, ignore_serialize: received_at.nil? && !received_at_present?)]
    property received_at : Int64?

    @[JSON::Field(ignore: true)]
    property? received_at_present : Bool = false

    # Description of the cardholder's attempt to return the product.
    @[JSON::Field(key: "return_description", type: String?, presence: true, ignore_serialize: return_description.nil? && !return_description_present?)]
    getter return_description : String?

    @[JSON::Field(ignore: true)]
    property? return_description_present : Bool = false

    # Result of cardholder's attempt to return the product.
    @[JSON::Field(key: "return_status", type: String?, presence: true, ignore_serialize: return_status.nil? && !return_status_present?)]
    getter return_status : String?

    @[JSON::Field(ignore: true)]
    property? return_status_present : Bool = false

    ENUM_VALIDATOR_FOR_RETURN_STATUS = EnumValidator.new("return_status", "String", ["merchant_rejected", "successful"])

    # Date when the product was returned or attempted to be returned.
    @[JSON::Field(key: "returned_at", type: Int64?, presence: true, ignore_serialize: returned_at.nil? && !returned_at_present?)]
    property returned_at : Int64?

    @[JSON::Field(ignore: true)]
    property? returned_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Optional properties
      @additional_documentation : IssuingDisputeCanceledEvidenceAdditionalDocumentation? = nil, 
      @explanation : String? = nil, 
      @received_at : Int64? = nil, 
      @return_description : String? = nil, 
      @return_status : String? = nil, 
      @returned_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@explanation.nil? && @explanation.to_s.size > 5000
        invalid_properties.push("invalid value for \"explanation\", the character length must be smaller than or equal to 5000.")
      end

      if !@return_description.nil? && @return_description.to_s.size > 5000
        invalid_properties.push("invalid value for \"return_description\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_RETURN_STATUS.error_message) unless ENUM_VALIDATOR_FOR_RETURN_STATUS.valid?(@return_status)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@explanation.nil? && @explanation.to_s.size > 5000
      return false if !@return_description.nil? && @return_description.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_RETURN_STATUS.valid?(@return_status)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] explanation Value to be assigned
    def explanation=(explanation)
      if !explanation.nil? && explanation.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"explanation\", the character length must be smaller than or equal to 5000.")
      end

      @explanation = explanation
    end

    # Custom attribute writer method with validation
    # @param [Object] return_description Value to be assigned
    def return_description=(return_description)
      if !return_description.nil? && return_description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"return_description\", the character length must be smaller than or equal to 5000.")
      end

      @return_description = return_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_status Object to be assigned
    def return_status=(return_status)
      ENUM_VALIDATOR_FOR_RETURN_STATUS.valid!(return_status)
      @return_status = return_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@additional_documentation, @explanation, @received_at, @return_description, @return_status, @returned_at)
  end
end
