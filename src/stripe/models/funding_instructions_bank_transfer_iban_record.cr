#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Iban Records contain E.U. bank account details per the SEPA format.
  class FundingInstructionsBankTransferIbanRecord
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The name of the person or business that owns the bank account
    @[JSON::Field(key: "account_holder_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_holder_name : String? = nil

    # The BIC/SWIFT code of the account.
    @[JSON::Field(key: "bic", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bic : String? = nil

    # Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    @[JSON::Field(key: "country", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter country : String? = nil

    # The IBAN of the account.
    @[JSON::Field(key: "iban", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter iban : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_holder_name : String? = nil,
      @bic : String? = nil,
      @country : String? = nil,
      @iban : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"account_holder_name\" is required and cannot be null") if @account_holder_name.nil?
      if _account_holder_name = @account_holder_name
        if _account_holder_name.to_s.size > 5000
          invalid_properties.push("invalid value for \"account_holder_name\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"bic\" is required and cannot be null") if @bic.nil?
      if _bic = @bic
        if _bic.to_s.size > 5000
          invalid_properties.push("invalid value for \"bic\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"country\" is required and cannot be null") if @country.nil?
      if _country = @country
        if _country.to_s.size > 5000
          invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"iban\" is required and cannot be null") if @iban.nil?
      if _iban = @iban
        if _iban.to_s.size > 5000
          invalid_properties.push("invalid value for \"iban\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account_holder_name.nil?
      if _account_holder_name = @account_holder_name
        return false if _account_holder_name.to_s.size > 5000
      end
      return false if @bic.nil?
      if _bic = @bic
        return false if _bic.to_s.size > 5000
      end
      return false if @country.nil?
      if _country = @country
        return false if _country.to_s.size > 5000
      end
      return false if @iban.nil?
      if _iban = @iban
        return false if _iban.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_holder_name Object to be assigned
    def account_holder_name=(account_holder_name : String?)
      if account_holder_name.nil?
        raise ArgumentError.new("\"account_holder_name\" is required and cannot be null")
      end
      _account_holder_name = account_holder_name.not_nil!
      if _account_holder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_name\", the character length must be smaller than or equal to 5000.")
      end

      @account_holder_name = account_holder_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bic Object to be assigned
    def bic=(bic : String?)
      if bic.nil?
        raise ArgumentError.new("\"bic\" is required and cannot be null")
      end
      _bic = bic.not_nil!
      if _bic.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"bic\", the character length must be smaller than or equal to 5000.")
      end

      @bic = bic
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(country : String?)
      if country.nil?
        raise ArgumentError.new("\"country\" is required and cannot be null")
      end
      _country = country.not_nil!
      if _country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iban Object to be assigned
    def iban=(iban : String?)
      if iban.nil?
        raise ArgumentError.new("\"iban\" is required and cannot be null")
      end
      _iban = iban.not_nil!
      if _iban.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"iban\", the character length must be smaller than or equal to 5000.")
      end

      @iban = iban
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_holder_name, @bic, @country, @iban)
  end
end
