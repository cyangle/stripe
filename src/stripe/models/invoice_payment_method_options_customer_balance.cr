#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./invoice_payment_method_options_customer_balance_bank_transfer"

module Stripe
  #
  class InvoicePaymentMethodOptionsCustomerBalance
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
    @[JSON::Field(key: "funding_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter funding_type : String? = nil
    ERROR_MESSAGE_FOR_FUNDING_TYPE = "invalid value for \"funding_type\", must be one of [bank_transfer]."
    VALID_VALUES_FOR_FUNDING_TYPE  = String.static_array("bank_transfer")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "bank_transfer", type: Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_transfer : Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @funding_type : String? = nil,
      # Optional properties
      @bank_transfer : Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_funding_type = @funding_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_FUNDING_TYPE) unless OpenApi::EnumValidator.valid?(_funding_type, VALID_VALUES_FOR_FUNDING_TYPE)
      end
      unless (_bank_transfer = @bank_transfer).nil?
        invalid_properties.concat(_bank_transfer.list_invalid_properties_for("bank_transfer")) if _bank_transfer.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_funding_type = @funding_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_funding_type, VALID_VALUES_FOR_FUNDING_TYPE)
      end

      unless (_bank_transfer = @bank_transfer).nil?
        return false if _bank_transfer.is_a?(OpenApi::Validatable) && !_bank_transfer.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_type Object to be assigned
    def funding_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("funding_type", new_value, VALID_VALUES_FOR_FUNDING_TYPE)
      end

      @funding_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer Object to be assigned
    def bank_transfer=(new_value : Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bank_transfer = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@funding_type, @bank_transfer)
  end
end
