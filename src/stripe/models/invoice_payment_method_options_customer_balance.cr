#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class InvoicePaymentMethodOptionsCustomerBalance
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "bank_transfer", type: Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_transfer : Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer? = nil

    # The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
    @[JSON::Field(key: "funding_type", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: funding_type.nil? && !funding_type_present?)]
    getter funding_type : String? = nil

    @[JSON::Field(ignore: true)]
    property? funding_type_present : Bool = false

    ENUM_VALIDATOR_FOR_FUNDING_TYPE = EnumValidator.new("funding_type", "String", ["bank_transfer"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @bank_transfer : Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer? = nil,
      @funding_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model bank_transfer : Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer?

      invalid_properties.push(ENUM_VALIDATOR_FOR_FUNDING_TYPE.error_message) unless ENUM_VALIDATOR_FOR_FUNDING_TYPE.valid?(@funding_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_FUNDING_TYPE.valid?(@funding_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer Object to be assigned
    def bank_transfer=(bank_transfer : Stripe::InvoicePaymentMethodOptionsCustomerBalanceBankTransfer?)
      if bank_transfer.nil?
        return @bank_transfer = nil
      end
      @bank_transfer = bank_transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_type Object to be assigned
    def funding_type=(funding_type : String?)
      if funding_type.nil?
        return @funding_type = nil
      end
      _funding_type = funding_type.not_nil!
      ENUM_VALIDATOR_FOR_FUNDING_TYPE.valid!(_funding_type)
      @funding_type = funding_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bank_transfer, @funding_type, @funding_type_present)
  end
end
