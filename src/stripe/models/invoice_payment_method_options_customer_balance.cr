#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class InvoicePaymentMethodOptionsCustomerBalance
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
    @[JSON::Field(key: "funding_type", type: String?, presence: true, ignore_serialize: funding_type.nil? && !funding_type_present?)]
    getter funding_type : String?

    @[JSON::Field(ignore: true)]
    property? funding_type_present : Bool = false

    ENUM_VALIDATOR_FOR_FUNDING_TYPE = EnumValidator.new("funding_type", "String", ["bank_transfer", "null"])

    # Optional properties
    @[JSON::Field(key: "bank_transfer", type: InvoicePaymentMethodOptionsCustomerBalanceBankTransfer?, presence: true, ignore_serialize: bank_transfer.nil? && !bank_transfer_present?)]
    property bank_transfer : InvoicePaymentMethodOptionsCustomerBalanceBankTransfer?

    @[JSON::Field(ignore: true)]
    property? bank_transfer_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @funding_type : String?, @bank_transfer : InvoicePaymentMethodOptionsCustomerBalanceBankTransfer? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_FUNDING_TYPE.error_message) unless ENUM_VALIDATOR_FOR_FUNDING_TYPE.valid?(@funding_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_FUNDING_TYPE.valid?(@funding_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_type Object to be assigned
    def funding_type=(funding_type)
      ENUM_VALIDATOR_FOR_FUNDING_TYPE.valid!(funding_type)
      @funding_type = funding_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        bank_transfer == o.bank_transfer &&
        funding_type == o.funding_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@bank_transfer, @funding_type)
  end
end
