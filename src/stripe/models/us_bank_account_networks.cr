#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class UsBankAccountNetworks
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # All supported networks.
    @[JSON::Field(key: "supported", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter supported : Array(String)? = nil
    ERROR_MESSAGE_FOR_SUPPORTED = "invalid value for \"supported\", must be one of [ach, us_domestic_wire]."
    VALID_VALUES_FOR_SUPPORTED  = StaticArray["ach", "us_domestic_wire"]

    # Optional properties

    # The preferred network.
    @[JSON::Field(key: "preferred", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: preferred.nil? && !preferred_present?)]
    getter preferred : String? = nil
    MAX_LENGTH_FOR_PREFERRED = 5000

    @[JSON::Field(ignore: true)]
    property? preferred_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @supported : Array(String)? = nil,
      # Optional properties
      @preferred : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"supported\" is required and cannot be null") if @supported.nil?

      if _supported = @supported
        invalid_properties.push(ERROR_MESSAGE_FOR_SUPPORTED) unless OpenApi::EnumValidator.valid?(_supported, VALID_VALUES_FOR_SUPPORTED)
      end
      if _preferred = @preferred
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("preferred", _preferred.to_s.size, MAX_LENGTH_FOR_PREFERRED)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @supported.nil?
      if _supported = @supported
        return false unless OpenApi::EnumValidator.valid?(_supported, VALID_VALUES_FOR_SUPPORTED)
      end

      if _preferred = @preferred
        return false if _preferred.to_s.size > MAX_LENGTH_FOR_PREFERRED
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supported Object to be assigned
    def supported=(supported : Array(String)?)
      if supported.nil?
        raise ArgumentError.new("\"supported\" is required and cannot be null")
      end
      _supported = supported.not_nil!
      OpenApi::EnumValidator.validate("supported", _supported, VALID_VALUES_FOR_SUPPORTED)
      @supported = _supported
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preferred Object to be assigned
    def preferred=(preferred : String?)
      if preferred.nil?
        return @preferred = nil
      end
      _preferred = preferred.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("preferred", _preferred.to_s.size, MAX_LENGTH_FOR_PREFERRED)
      @preferred = _preferred
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@supported, @preferred, @preferred_present)
  end
end
