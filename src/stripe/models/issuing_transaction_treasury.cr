#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class IssuingTransactionTreasury
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a refund
    @[JSON::Field(key: "received_credit", type: String?, presence: true, ignore_serialize: received_credit.nil? && !received_credit_present?)]
    getter received_credit : String?

    @[JSON::Field(ignore: true)]
    property? received_credit_present : Bool = false

    # The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a capture
    @[JSON::Field(key: "received_debit", type: String?, presence: true, ignore_serialize: received_debit.nil? && !received_debit_present?)]
    getter received_debit : String?

    @[JSON::Field(ignore: true)]
    property? received_debit_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @received_credit : String?, @received_debit : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @received_credit.to_s.size > 5000
        invalid_properties.push("invalid value for \"received_credit\", the character length must be smaller than or equal to 5000.")
      end

      if @received_debit.to_s.size > 5000
        invalid_properties.push("invalid value for \"received_debit\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @received_credit.to_s.size > 5000
      return false if @received_debit.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] received_credit Value to be assigned
    def received_credit=(received_credit)
      if received_credit.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"received_credit\", the character length must be smaller than or equal to 5000.")
      end

      @received_credit = received_credit
    end

    # Custom attribute writer method with validation
    # @param [Object] received_debit Value to be assigned
    def received_debit=(received_debit)
      if received_debit.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"received_debit\", the character length must be smaller than or equal to 5000.")
      end

      @received_debit = received_debit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        received_credit == o.received_credit &&
        received_debit == o.received_debit
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@received_credit, @received_debit)
  end
end
