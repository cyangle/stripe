#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostSourcesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
    @[JSON::Field(key: "flow", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter flow : String? = nil

    ENUM_VALIDATOR_FOR_FLOW = OpenApi::EnumValidator.new("flow", "String", ["code_verification", "none", "receiver", "redirect"])

    @[JSON::Field(key: "mandate", type: Stripe::MandateParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mandate : Stripe::MandateParams? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The source to share.
    @[JSON::Field(key: "original_source", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter original_source : String? = nil

    @[JSON::Field(key: "owner", type: Stripe::Owner1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter owner : Stripe::Owner1? = nil

    @[JSON::Field(key: "receiver", type: Stripe::ReceiverParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter receiver : Stripe::ReceiverParams? = nil

    @[JSON::Field(key: "redirect", type: Stripe::RedirectParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect : Stripe::RedirectParams? = nil

    @[JSON::Field(key: "source_order", type: Stripe::ShallowOrderSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter source_order : Stripe::ShallowOrderSpecs? = nil

    # An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor : String? = nil

    # An optional token used to create the source. When passed, token properties will override source parameters.
    @[JSON::Field(key: "token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter token : String? = nil

    # The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)
    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil

    @[JSON::Field(key: "usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter usage : String? = nil

    ENUM_VALIDATOR_FOR_USAGE = OpenApi::EnumValidator.new("usage", "String", ["reusable", "single_use"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount : Int64? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @expand : Array(String)? = nil,
      @flow : String? = nil,
      @mandate : Stripe::MandateParams? = nil,
      @metadata : Hash(String, String)? = nil,
      @original_source : String? = nil,
      @owner : Stripe::Owner1? = nil,
      @receiver : Stripe::ReceiverParams? = nil,
      @redirect : Stripe::RedirectParams? = nil,
      @source_order : Stripe::ShallowOrderSpecs? = nil,
      @statement_descriptor : String? = nil,
      @token : String? = nil,
      @_type : String? = nil,
      @usage : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _customer = @customer
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, 500)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_FLOW.error_message) unless ENUM_VALIDATOR_FOR_FLOW.valid?(@flow)
      if _mandate = @mandate
        invalid_properties.concat(_mandate.list_invalid_properties_for("mandate")) if _mandate.is_a?(OpenApi::Validatable)
      end

      if _original_source = @original_source
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("original_source", _original_source.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _owner = @owner
        invalid_properties.concat(_owner.list_invalid_properties_for("owner")) if _owner.is_a?(OpenApi::Validatable)
      end
      if _receiver = @receiver
        invalid_properties.concat(_receiver.list_invalid_properties_for("receiver")) if _receiver.is_a?(OpenApi::Validatable)
      end
      if _redirect = @redirect
        invalid_properties.concat(_redirect.list_invalid_properties_for("redirect")) if _redirect.is_a?(OpenApi::Validatable)
      end
      if _source_order = @source_order
        invalid_properties.concat(_source_order.list_invalid_properties_for("source_order")) if _source_order.is_a?(OpenApi::Validatable)
      end
      if _statement_descriptor = @statement_descriptor
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _token = @token
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("token", _token.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if __type = @_type
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_USAGE.error_message) unless ENUM_VALIDATOR_FOR_USAGE.valid?(@usage)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _customer = @customer
        return false if _customer.to_s.size > 500
      end

      return false unless ENUM_VALIDATOR_FOR_FLOW.valid?(@flow)
      if _mandate = @mandate
        return false if _mandate.is_a?(OpenApi::Validatable) && !_mandate.valid?
      end

      if _original_source = @original_source
        return false if _original_source.to_s.size > 5000
      end
      if _owner = @owner
        return false if _owner.is_a?(OpenApi::Validatable) && !_owner.valid?
      end
      if _receiver = @receiver
        return false if _receiver.is_a?(OpenApi::Validatable) && !_receiver.valid?
      end
      if _redirect = @redirect
        return false if _redirect.is_a?(OpenApi::Validatable) && !_redirect.valid?
      end
      if _source_order = @source_order
        return false if _source_order.is_a?(OpenApi::Validatable) && !_source_order.valid?
      end
      if _statement_descriptor = @statement_descriptor
        return false if _statement_descriptor.to_s.size > 5000
      end
      if _token = @token
        return false if _token.to_s.size > 5000
      end
      if __type = @_type
        return false if __type.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_USAGE.valid?(@usage)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        return @amount = nil
      end
      _amount = amount.not_nil!
      @amount = _amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, 500)
        raise ArgumentError.new(max_length_error)
      end

      @customer = _customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      _expand = expand.not_nil!
      @expand = _expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow Object to be assigned
    def flow=(flow : String?)
      if flow.nil?
        return @flow = nil
      end
      _flow = flow.not_nil!
      ENUM_VALIDATOR_FOR_FLOW.valid!(_flow)
      @flow = _flow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate Object to be assigned
    def mandate=(mandate : Stripe::MandateParams?)
      if mandate.nil?
        return @mandate = nil
      end
      _mandate = mandate.not_nil!
      _mandate.validate if _mandate.is_a?(OpenApi::Validatable)
      @mandate = _mandate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_source Object to be assigned
    def original_source=(original_source : String?)
      if original_source.nil?
        return @original_source = nil
      end
      _original_source = original_source.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("original_source", _original_source.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @original_source = _original_source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(owner : Stripe::Owner1?)
      if owner.nil?
        return @owner = nil
      end
      _owner = owner.not_nil!
      _owner.validate if _owner.is_a?(OpenApi::Validatable)
      @owner = _owner
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receiver Object to be assigned
    def receiver=(receiver : Stripe::ReceiverParams?)
      if receiver.nil?
        return @receiver = nil
      end
      _receiver = receiver.not_nil!
      _receiver.validate if _receiver.is_a?(OpenApi::Validatable)
      @receiver = _receiver
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect Object to be assigned
    def redirect=(redirect : Stripe::RedirectParams?)
      if redirect.nil?
        return @redirect = nil
      end
      _redirect = redirect.not_nil!
      _redirect.validate if _redirect.is_a?(OpenApi::Validatable)
      @redirect = _redirect
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_order Object to be assigned
    def source_order=(source_order : Stripe::ShallowOrderSpecs?)
      if source_order.nil?
        return @source_order = nil
      end
      _source_order = source_order.not_nil!
      _source_order.validate if _source_order.is_a?(OpenApi::Validatable)
      @source_order = _source_order
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        return @statement_descriptor = nil
      end
      _statement_descriptor = statement_descriptor.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @statement_descriptor = _statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] token Object to be assigned
    def token=(token : String?)
      if token.nil?
        return @token = nil
      end
      _token = token.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("token", _token.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @token = _token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        return @_type = nil
      end
      __type = _type.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(usage : String?)
      if usage.nil?
        return @usage = nil
      end
      _usage = usage.not_nil!
      ENUM_VALIDATOR_FOR_USAGE.valid!(_usage)
      @usage = _usage
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @customer, @expand, @flow, @mandate, @metadata, @original_source, @owner, @receiver, @redirect, @source_order, @statement_descriptor, @token, @_type, @usage)
  end
end
