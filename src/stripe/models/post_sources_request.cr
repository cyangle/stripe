#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostSourcesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.
    @[JSON::Field(key: "amount", type: Int64?, presence: true, ignore_serialize: amount.nil? && !amount_present?)]
    property amount : Int64?

    @[JSON::Field(ignore: true)]
    property? amount_present : Bool = false

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
    @[JSON::Field(key: "currency", type: String?, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    property currency : String?

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).
    @[JSON::Field(key: "customer", type: String?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
    @[JSON::Field(key: "flow", type: String?, presence: true, ignore_serialize: flow.nil? && !flow_present?)]
    getter flow : String?

    @[JSON::Field(ignore: true)]
    property? flow_present : Bool = false

    ENUM_VALIDATOR_FOR_FLOW = EnumValidator.new("flow", "String", ["code_verification", "none", "receiver", "redirect"])

    @[JSON::Field(key: "mandate", type: MandateParams?, presence: true, ignore_serialize: mandate.nil? && !mandate_present?)]
    property mandate : MandateParams?

    @[JSON::Field(ignore: true)]
    property? mandate_present : Bool = false

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The source to share.
    @[JSON::Field(key: "original_source", type: String?, presence: true, ignore_serialize: original_source.nil? && !original_source_present?)]
    getter original_source : String?

    @[JSON::Field(ignore: true)]
    property? original_source_present : Bool = false

    @[JSON::Field(key: "owner", type: Owner1?, presence: true, ignore_serialize: owner.nil? && !owner_present?)]
    property owner : Owner1?

    @[JSON::Field(ignore: true)]
    property? owner_present : Bool = false

    @[JSON::Field(key: "receiver", type: ReceiverParams?, presence: true, ignore_serialize: receiver.nil? && !receiver_present?)]
    property receiver : ReceiverParams?

    @[JSON::Field(ignore: true)]
    property? receiver_present : Bool = false

    @[JSON::Field(key: "redirect", type: RedirectParams?, presence: true, ignore_serialize: redirect.nil? && !redirect_present?)]
    property redirect : RedirectParams?

    @[JSON::Field(ignore: true)]
    property? redirect_present : Bool = false

    @[JSON::Field(key: "source_order", type: ShallowOrderSpecs?, presence: true, ignore_serialize: source_order.nil? && !source_order_present?)]
    property source_order : ShallowOrderSpecs?

    @[JSON::Field(ignore: true)]
    property? source_order_present : Bool = false

    # An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.
    @[JSON::Field(key: "statement_descriptor", type: String?, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String?

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # An optional token used to create the source. When passed, token properties will override source parameters.
    @[JSON::Field(key: "token", type: String?, presence: true, ignore_serialize: token.nil? && !token_present?)]
    getter token : String?

    @[JSON::Field(ignore: true)]
    property? token_present : Bool = false

    # The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)
    @[JSON::Field(key: "type", type: String?, presence: true, ignore_serialize: _type.nil? && !_type_present?)]
    getter _type : String?

    @[JSON::Field(ignore: true)]
    property? _type_present : Bool = false

    @[JSON::Field(key: "usage", type: String?, presence: true, ignore_serialize: usage.nil? && !usage_present?)]
    getter usage : String?

    @[JSON::Field(ignore: true)]
    property? usage_present : Bool = false

    ENUM_VALIDATOR_FOR_USAGE = EnumValidator.new("usage", "String", ["reusable", "single_use"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount : Int64? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @expand : Array(String)? = nil,
      @flow : String? = nil,
      @mandate : MandateParams? = nil,
      @metadata : Hash(String, String)? = nil,
      @original_source : String? = nil,
      @owner : Owner1? = nil,
      @receiver : ReceiverParams? = nil,
      @redirect : RedirectParams? = nil,
      @source_order : ShallowOrderSpecs? = nil,
      @statement_descriptor : String? = nil,
      @token : String? = nil,
      @_type : String? = nil,
      @usage : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@customer.nil? && @customer.to_s.size > 500
        invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 500.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_FLOW.error_message) unless ENUM_VALIDATOR_FOR_FLOW.valid?(@flow)

      if !@flow.nil? && @flow.to_s.size > 5000
        invalid_properties.push("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
      end

      if !@original_source.nil? && @original_source.to_s.size > 5000
        invalid_properties.push("invalid value for \"original_source\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.nil? && @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if !@token.nil? && @token.to_s.size > 5000
        invalid_properties.push("invalid value for \"token\", the character length must be smaller than or equal to 5000.")
      end

      if !@_type.nil? && @_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_USAGE.error_message) unless ENUM_VALIDATOR_FOR_USAGE.valid?(@usage)

      if !@usage.nil? && @usage.to_s.size > 5000
        invalid_properties.push("invalid value for \"usage\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer.nil? && @customer.to_s.size > 500
      return false unless ENUM_VALIDATOR_FOR_FLOW.valid?(@flow)
      return false if !@flow.nil? && @flow.to_s.size > 5000
      return false if !@original_source.nil? && @original_source.to_s.size > 5000
      return false if !@statement_descriptor.nil? && @statement_descriptor.to_s.size > 5000
      return false if !@token.nil? && @token.to_s.size > 5000
      return false if !@_type.nil? && @_type.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_USAGE.valid?(@usage)
      return false if !@usage.nil? && @usage.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer Value to be assigned
    def customer=(customer)
      if !customer.nil? && customer.to_s.size > 500
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 500.")
      end

      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow Object to be assigned
    def flow=(flow)
      ENUM_VALIDATOR_FOR_FLOW.valid!(flow)
      @flow = flow
    end

    # Custom attribute writer method with validation
    # @param [Object] original_source Value to be assigned
    def original_source=(original_source)
      if !original_source.nil? && original_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"original_source\", the character length must be smaller than or equal to 5000.")
      end

      @original_source = original_source
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor)
      if !statement_descriptor.nil? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if !token.nil? && token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"token\", the character length must be smaller than or equal to 5000.")
      end

      @token = token
    end

    # Custom attribute writer method with validation
    # @param [Object] _type Value to be assigned
    def _type=(_type)
      if !_type.nil? && _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(usage)
      ENUM_VALIDATOR_FOR_USAGE.valid!(usage)
      @usage = usage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @customer, @expand, @flow, @mandate, @metadata, @original_source, @owner, @receiver, @redirect, @source_order, @statement_descriptor, @token, @_type, @usage)
  end
end
