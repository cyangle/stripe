#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./mandate_params"
require "./owner"
require "./receiver_params"
require "./redirect_params"
require "./shallow_order_specs"

module Stripe
  class PostSourcesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil
    MAX_LENGTH_FOR_CUSTOMER = 500

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
    @[JSON::Field(key: "flow", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter flow : String? = nil
    MAX_LENGTH_FOR_FLOW    = 5000
    ERROR_MESSAGE_FOR_FLOW = "invalid value for \"flow\", must be one of [code_verification, none, receiver, redirect]."
    VALID_VALUES_FOR_FLOW  = String.static_array("code_verification", "none", "receiver", "redirect")

    @[JSON::Field(key: "mandate", type: Stripe::MandateParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mandate : Stripe::MandateParams? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The source to share.
    @[JSON::Field(key: "original_source", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter original_source : String? = nil
    MAX_LENGTH_FOR_ORIGINAL_SOURCE = 5000

    @[JSON::Field(key: "owner", type: Stripe::Owner?, default: nil, required: false, nullable: false, emit_null: false)]
    getter owner : Stripe::Owner? = nil

    @[JSON::Field(key: "receiver", type: Stripe::ReceiverParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter receiver : Stripe::ReceiverParams? = nil

    @[JSON::Field(key: "redirect", type: Stripe::RedirectParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect : Stripe::RedirectParams? = nil

    @[JSON::Field(key: "source_order", type: Stripe::ShallowOrderSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter source_order : Stripe::ShallowOrderSpecs? = nil

    # An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # An optional token used to create the source. When passed, token properties will override source parameters.
    @[JSON::Field(key: "token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter token : String? = nil
    MAX_LENGTH_FOR_TOKEN = 5000

    # The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)
    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil
    MAX_LENGTH_FOR__TYPE = 5000

    @[JSON::Field(key: "usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter usage : String? = nil
    MAX_LENGTH_FOR_USAGE    = 5000
    ERROR_MESSAGE_FOR_USAGE = "invalid value for \"usage\", must be one of [reusable, single_use]."
    VALID_VALUES_FOR_USAGE  = String.static_array("reusable", "single_use")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount : Int64? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @expand : Array(String)? = nil,
      @flow : String? = nil,
      @mandate : Stripe::MandateParams? = nil,
      @metadata : Hash(String, String)? = nil,
      @original_source : String? = nil,
      @owner : Stripe::Owner? = nil,
      @receiver : Stripe::ReceiverParams? = nil,
      @redirect : Stripe::RedirectParams? = nil,
      @source_order : Stripe::ShallowOrderSpecs? = nil,
      @statement_descriptor : String? = nil,
      @token : String? = nil,
      @_type : String? = nil,
      @usage : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_customer = @customer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_flow = @flow).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_FLOW) unless OpenApi::EnumValidator.valid?(_flow, VALID_VALUES_FOR_FLOW)
      end
      unless (_mandate = @mandate).nil?
        invalid_properties.concat(_mandate.list_invalid_properties_for("mandate")) if _mandate.is_a?(OpenApi::Validatable)
      end

      unless (_original_source = @original_source).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("original_source", _original_source.to_s.size, MAX_LENGTH_FOR_ORIGINAL_SOURCE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_owner = @owner).nil?
        invalid_properties.concat(_owner.list_invalid_properties_for("owner")) if _owner.is_a?(OpenApi::Validatable)
      end
      unless (_receiver = @receiver).nil?
        invalid_properties.concat(_receiver.list_invalid_properties_for("receiver")) if _receiver.is_a?(OpenApi::Validatable)
      end
      unless (_redirect = @redirect).nil?
        invalid_properties.concat(_redirect.list_invalid_properties_for("redirect")) if _redirect.is_a?(OpenApi::Validatable)
      end
      unless (_source_order = @source_order).nil?
        invalid_properties.concat(_source_order.list_invalid_properties_for("source_order")) if _source_order.is_a?(OpenApi::Validatable)
      end
      unless (_statement_descriptor = @statement_descriptor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_token = @token).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("token", _token.to_s.size, MAX_LENGTH_FOR_TOKEN)
          invalid_properties.push(max_length_error)
        end
      end
      unless (__type = @_type).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, MAX_LENGTH_FOR__TYPE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_usage = @usage).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_USAGE) unless OpenApi::EnumValidator.valid?(_usage, VALID_VALUES_FOR_USAGE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_customer = @customer).nil?
        return false if _customer.to_s.size > MAX_LENGTH_FOR_CUSTOMER
      end

      unless (_flow = @flow).nil?
        return false unless OpenApi::EnumValidator.valid?(_flow, VALID_VALUES_FOR_FLOW)
      end

      unless (_mandate = @mandate).nil?
        return false if _mandate.is_a?(OpenApi::Validatable) && !_mandate.valid?
      end

      unless (_original_source = @original_source).nil?
        return false if _original_source.to_s.size > MAX_LENGTH_FOR_ORIGINAL_SOURCE
      end

      unless (_owner = @owner).nil?
        return false if _owner.is_a?(OpenApi::Validatable) && !_owner.valid?
      end

      unless (_receiver = @receiver).nil?
        return false if _receiver.is_a?(OpenApi::Validatable) && !_receiver.valid?
      end

      unless (_redirect = @redirect).nil?
        return false if _redirect.is_a?(OpenApi::Validatable) && !_redirect.valid?
      end

      unless (_source_order = @source_order).nil?
        return false if _source_order.is_a?(OpenApi::Validatable) && !_source_order.valid?
      end

      unless (_statement_descriptor = @statement_descriptor).nil?
        return false if _statement_descriptor.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR
      end

      unless (_token = @token).nil?
        return false if _token.to_s.size > MAX_LENGTH_FOR_TOKEN
      end

      unless (__type = @_type).nil?
        return false if __type.to_s.size > MAX_LENGTH_FOR__TYPE
      end

      unless (_usage = @usage).nil?
        return false unless OpenApi::EnumValidator.valid?(_usage, VALID_VALUES_FOR_USAGE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow Object to be assigned
    def flow=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("flow", new_value, VALID_VALUES_FOR_FLOW)
      end

      @flow = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate Object to be assigned
    def mandate=(new_value : Stripe::MandateParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mandate = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_source Object to be assigned
    def original_source=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("original_source", new_value.to_s.size, MAX_LENGTH_FOR_ORIGINAL_SOURCE)
      end

      @original_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(new_value : Stripe::Owner?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @owner = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receiver Object to be assigned
    def receiver=(new_value : Stripe::ReceiverParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @receiver = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect Object to be assigned
    def redirect=(new_value : Stripe::RedirectParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @redirect = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_order Object to be assigned
    def source_order=(new_value : Stripe::ShallowOrderSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @source_order = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
      end

      @statement_descriptor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] token Object to be assigned
    def token=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("token", new_value.to_s.size, MAX_LENGTH_FOR_TOKEN)
      end

      @token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("_type", new_value.to_s.size, MAX_LENGTH_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("usage", new_value, VALID_VALUES_FOR_USAGE)
      end

      @usage = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @customer, @expand, @flow, @mandate, @metadata, @original_source, @owner, @receiver, @redirect, @source_order, @statement_descriptor, @token, @_type, @usage)
  end
end
