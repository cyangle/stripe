#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  class BalanceTransactionSource
    include NASON::Serializable

    # Required properties
    # The Connected account that incurred this charge.
    @[NASON::Field(key: "account", type: String)]
    property account : String

    # Amount, in %s.
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    @[NASON::Field(key: "amount_refunded", type: Int64)]
    property amount_refunded : Int64

    # ID of the Connect application that created the charge.
    @[NASON::Field(key: "application", type: String | Application | Null, nillable: false)]
    property application : String | Application | Null

    # Balance transaction that describes the impact on your account balance.
    @[NASON::Field(key: "balance_transaction", type: String | BalanceTransaction | Null, nillable: false)]
    property balance_transaction : String | BalanceTransaction | Null

    # ID of the charge that was refunded.
    @[NASON::Field(key: "charge", type: String | Charge | Null, nillable: false)]
    property charge : String | Charge | Null

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
    @[NASON::Field(key: "originating_transaction", type: String | Charge | Null, nillable: false)]
    property originating_transaction : String | Charge | Null

    # Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    @[NASON::Field(key: "refunded", type: Bool)]
    property refunded : Bool

    @[NASON::Field(key: "refunds", type: RefundList1)]
    property refunds : RefundList1

    # Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
    @[NASON::Field(key: "amount_captured", type: Int64)]
    property amount_captured : Int64

    # The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    @[NASON::Field(key: "application_fee", type: String | ApplicationFee | Null, nillable: false)]
    property application_fee : String | ApplicationFee | Null

    # The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    @[NASON::Field(key: "application_fee_amount", type: Int64 | Null, nillable: false)]
    property application_fee_amount : Int64 | Null

    @[NASON::Field(key: "billing_details", type: BillingDetails)]
    property billing_details : BillingDetails

    # The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
    @[NASON::Field(key: "calculated_statement_descriptor", type: String | Null, nillable: false)]
    property calculated_statement_descriptor : String | Null

    # If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    @[NASON::Field(key: "captured", type: Bool)]
    property captured : Bool

    # ID of the customer this charge is for if one exists.
    @[NASON::Field(key: "customer", type: String | Customer | Null, nillable: false)]
    property customer : String | Customer | Null

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[NASON::Field(key: "description", type: String | Null, nillable: false)]
    property description : String | Null

    # ID of the Stripe account the transfer was sent to.
    @[NASON::Field(key: "destination", type: String | Account | Null, nillable: false)]
    property destination : String | Account | Null

    # If you've disputed the transaction, the ID of the dispute.
    @[NASON::Field(key: "dispute", type: String | IssuingDispute | Null, nillable: false)]
    property dispute : String | IssuingDispute | Null

    # Whether the charge has been disputed.
    @[NASON::Field(key: "disputed", type: Bool)]
    property disputed : Bool

    # Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
    @[NASON::Field(key: "failure_code", type: String | Null, nillable: false)]
    property failure_code : String | Null

    # Message to user further explaining reason for top-up failure if available.
    @[NASON::Field(key: "failure_message", type: String | Null, nillable: false)]
    property failure_message : String | Null

    # Information on fraud assessments for the charge.
    @[NASON::Field(key: "fraud_details", type: ChargeFraudDetails | Null, nillable: false)]
    property fraud_details : ChargeFraudDetails | Null

    # ID of the invoice this charge is for if one exists.
    @[NASON::Field(key: "invoice", type: String | Invoice | Null, nillable: false)]
    property invoice : String | Invoice | Null

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String) | Null, nillable: false)]
    property metadata : Hash(String, String) | Null

    # The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details.
    @[NASON::Field(key: "on_behalf_of", type: String | Account | Null, nillable: false)]
    property on_behalf_of : String | Account | Null

    # ID of the order this charge is for if one exists.
    @[NASON::Field(key: "order", type: String | Order | Null, nillable: false)]
    property order : String | Order | Null

    # Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
    @[NASON::Field(key: "outcome", type: ChargeOutcome | Null, nillable: false)]
    property outcome : ChargeOutcome | Null

    # `true` if the charge succeeded, or was successfully authorized for later capture.
    @[NASON::Field(key: "paid", type: Bool)]
    property paid : Bool

    # ID of the PaymentIntent that was refunded.
    @[NASON::Field(key: "payment_intent", type: String | PaymentIntent | Null, nillable: false)]
    property payment_intent : String | PaymentIntent | Null

    # ID of the payment method used in this charge.
    @[NASON::Field(key: "payment_method", type: String | Null, nillable: false)]
    property payment_method : String | Null

    # Details about the payment method at the time of the transaction.
    @[NASON::Field(key: "payment_method_details", type: PaymentMethodDetails | Null, nillable: false)]
    property payment_method_details : PaymentMethodDetails | Null

    # This is the email address that the receipt for this charge was sent to.
    @[NASON::Field(key: "receipt_email", type: String | Null, nillable: false)]
    property receipt_email : String | Null

    # This is the transaction number that appears on email receipts sent for this refund.
    @[NASON::Field(key: "receipt_number", type: String | Null, nillable: false)]
    property receipt_number : String | Null

    # This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    @[NASON::Field(key: "receipt_url", type: String | Null, nillable: false)]
    property receipt_url : String | Null

    # ID of the review associated with this charge if one exists.
    @[NASON::Field(key: "review", type: String | Review | Null, nillable: false)]
    property review : String | Review | Null

    # Shipping information for the charge.
    @[NASON::Field(key: "shipping", type: Shipping | Null, nillable: false)]
    property shipping : Shipping | Null

    @[NASON::Field(key: "source", type: Source)]
    property source : Source

    # The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
    @[NASON::Field(key: "source_transfer", type: String | Transfer | Null, nillable: false)]
    property source_transfer : String | Transfer | Null

    # Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
    @[NASON::Field(key: "statement_descriptor", type: String | Null, nillable: false)]
    property statement_descriptor : String | Null

    # Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    @[NASON::Field(key: "statement_descriptor_suffix", type: String | Null, nillable: false)]
    property statement_descriptor_suffix : String | Null

    # The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # ID of the transfer that was reversed.
    @[NASON::Field(key: "transfer", type: String | Transfer | Null, nillable: false)]
    property transfer : String | Transfer | Null

    # An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
    @[NASON::Field(key: "transfer_data", type: ChargeTransferData | Null, nillable: false)]
    property transfer_data : ChargeTransferData | Null

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    @[NASON::Field(key: "transfer_group", type: String | Null, nillable: false)]
    property transfer_group : String | Null

    # List of balance transactions associated with the dispute.
    @[NASON::Field(key: "balance_transactions", type: Array(BalanceTransaction) | Null, nillable: false)]
    property balance_transactions : Array(BalanceTransaction) | Null

    @[NASON::Field(key: "evidence", type: IssuingDisputeEvidence)]
    property evidence : IssuingDisputeEvidence

    @[NASON::Field(key: "evidence_details", type: DisputeEvidenceDetails)]
    property evidence_details : DisputeEvidenceDetails

    # If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
    @[NASON::Field(key: "is_charge_refundable", type: Bool)]
    property is_charge_refundable : Bool

    # Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    @[NASON::Field(key: "reason", type: String | Null, nillable: false)]
    property reason : String | Null

    # ID of the application fee that was refunded.
    @[NASON::Field(key: "fee", type: String | ApplicationFee | Null, nillable: false)]
    property fee : String | ApplicationFee | Null

    # Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[NASON::Field(key: "amount_details", type: IssuingTransactionAmountDetails | Null, nillable: false)]
    property amount_details : IssuingTransactionAmountDetails | Null

    # Whether the authorization has been approved.
    @[NASON::Field(key: "approved", type: Bool)]
    property approved : Bool

    # How the card details were provided.
    @[NASON::Field(key: "authorization_method", type: String)]
    property authorization_method : String

    # The card used to make this transaction.
    @[NASON::Field(key: "card", type: String | IssuingCard | Null, nillable: false)]
    property card : String | IssuingCard | Null

    # The cardholder to whom this transaction belongs.
    @[NASON::Field(key: "cardholder", type: String | IssuingCardholder | Null, nillable: false)]
    property cardholder : String | IssuingCardholder | Null

    # The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
    @[NASON::Field(key: "merchant_amount", type: Int64)]
    property merchant_amount : Int64

    # The currency with which the merchant is taking payment.
    @[NASON::Field(key: "merchant_currency", type: String)]
    property merchant_currency : String

    @[NASON::Field(key: "merchant_data", type: IssuingAuthorizationMerchantData)]
    property merchant_data : IssuingAuthorizationMerchantData

    # The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
    @[NASON::Field(key: "pending_request", type: IssuingAuthorizationPendingRequest | Null, nillable: false)]
    property pending_request : IssuingAuthorizationPendingRequest | Null

    # History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
    @[NASON::Field(key: "request_history", type: Array(IssuingAuthorizationRequest))]
    property request_history : Array(IssuingAuthorizationRequest)

    # List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    @[NASON::Field(key: "transactions", type: Array(IssuingTransaction))]
    property transactions : Array(IssuingTransaction)

    @[NASON::Field(key: "verification_data", type: IssuingAuthorizationVerificationData)]
    property verification_data : IssuingAuthorizationVerificationData

    # The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    @[NASON::Field(key: "wallet", type: String | Null, nillable: false)]
    property wallet : String | Null

    # The transaction being disputed.
    @[NASON::Field(key: "transaction", type: String | IssuingTransaction | Null, nillable: false)]
    property transaction : String | IssuingTransaction | Null

    # The `Authorization` object that led to this transaction.
    @[NASON::Field(key: "authorization", type: String | IssuingAuthorization | Null, nillable: false)]
    property authorization : String | IssuingAuthorization | Null

    # Additional purchase information that is optionally provided by the merchant.
    @[NASON::Field(key: "purchase_details", type: IssuingTransactionPurchaseDetails | Null, nillable: false)]
    property purchase_details : IssuingTransactionPurchaseDetails | Null

    # The type of tax (VAT).
    @[NASON::Field(key: "type", type: String)]
    property _type : String

    # Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
    @[NASON::Field(key: "arrival_date", type: Int64)]
    property arrival_date : Int64

    # Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
    @[NASON::Field(key: "automatic", type: Bool)]
    property automatic : Bool

    # If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    @[NASON::Field(key: "failure_balance_transaction", type: String | BalanceTransaction | Null, nillable: false)]
    property failure_balance_transaction : String | BalanceTransaction | Null

    # The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
    @[NASON::Field(key: "method", type: String)]
    property method : String

    # If the payout reverses another, this is the ID of the original payout.
    @[NASON::Field(key: "original_payout", type: String | Payout | Null, nillable: false)]
    property original_payout : String | Payout | Null

    # If the payout was reversed, this is the ID of the payout that reverses this payout.
    @[NASON::Field(key: "reversed_by", type: String | Payout | Null, nillable: false)]
    property reversed_by : String | Payout | Null

    # The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
    @[NASON::Field(key: "source_type", type: String | Null, nillable: false)]
    property source_type : String | Null

    # ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
    @[NASON::Field(key: "source_transaction", type: String | Charge | Null, nillable: false)]
    property source_transaction : String | Charge | Null

    # The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
    @[NASON::Field(key: "source_transfer_reversal", type: String | TransferReversal | Null, nillable: false)]
    property source_transfer_reversal : String | TransferReversal | Null

    # If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
    @[NASON::Field(key: "transfer_reversal", type: String | TransferReversal | Null, nillable: false)]
    property transfer_reversal : String | TransferReversal | Null

    # The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[NASON::Field(key: "period_end", type: Int64)]
    property period_end : Int64

    # The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[NASON::Field(key: "period_start", type: Int64)]
    property period_start : Int64

    # The TAN that was supplied to Stripe when TDS was assessed
    @[NASON::Field(key: "tax_deduction_account_number", type: String)]
    property tax_deduction_account_number : String

    # Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
    @[NASON::Field(key: "expected_availability_date", type: Int64 | Null, nillable: false)]
    property expected_availability_date : Int64 | Null

    # Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
    @[NASON::Field(key: "amount_reversed", type: Int64)]
    property amount_reversed : Int64

    @[NASON::Field(key: "reversals", type: TransferReversalList1)]
    property reversals : TransferReversalList1

    # Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
    @[NASON::Field(key: "reversed", type: Bool)]
    property reversed : Bool

    # Linked payment refund for the transfer reversal.
    @[NASON::Field(key: "destination_payment_refund", type: String | Refund | Null, nillable: false)]
    property destination_payment_refund : String | Refund | Null

    # ID of the refund responsible for the transfer reversal.
    @[NASON::Field(key: "source_refund", type: String | Refund | Null, nillable: false)]
    property source_refund : String | Refund | Null

    # Optional properties
    @[NASON::Field(key: "alternate_statement_descriptors", type: AlternateStatementDescriptors?, nillable: true)]
    property alternate_statement_descriptors : AlternateStatementDescriptors?

    # Authorization code on the charge.
    @[NASON::Field(key: "authorization_code", type: String?, nillable: true)]
    property authorization_code : String?

    @[NASON::Field(key: "level3", type: Level3?, nillable: true)]
    property level3 : Level3?

    # Network-dependent reason code for the dispute.
    @[NASON::Field(key: "network_reason_code", type: String? | Null, nillable: true)]
    property network_reason_code : String? | Null

    # If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
    @[NASON::Field(key: "failure_reason", type: String?, nillable: true)]
    property failure_reason : String?

    # If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
    @[NASON::Field(key: "destination_payment", type: String | Charge? | Null, nillable: true)]
    property destination_payment : String | Charge? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        ApplicationFee,
        Charge,
        ConnectCollectionTransfer,
        Dispute,
        FeeRefund,
        IssuingAuthorization,
        IssuingDispute,
        IssuingTransaction,
        Payout,
        PlatformTaxFee,
        Refund,
        ReserveTransaction,
        TaxDeductedAtSource,
        Topup,
        Transfer,
        TransferReversal,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @account : String, @amount : Int64, @amount_refunded : Int64, @application : String | Application | Null, @balance_transaction : String | BalanceTransaction | Null, @charge : String | Charge | Null, @created : Int64, @currency : String, @id : String, @livemode : Bool, @object : String, @originating_transaction : String | Charge | Null, @refunded : Bool, @refunds : RefundList1, @amount_captured : Int64, @application_fee : String | ApplicationFee | Null, @application_fee_amount : Int64 | Null, @billing_details : BillingDetails, @calculated_statement_descriptor : String | Null, @captured : Bool, @customer : String | Customer | Null, @description : String | Null, @destination : String | Account | Null, @dispute : String | IssuingDispute | Null, @disputed : Bool, @failure_code : String | Null, @failure_message : String | Null, @fraud_details : ChargeFraudDetails | Null, @invoice : String | Invoice | Null, @metadata : Hash(String, String) | Null, @on_behalf_of : String | Account | Null, @order : String | Order | Null, @outcome : ChargeOutcome | Null, @paid : Bool, @payment_intent : String | PaymentIntent | Null, @payment_method : String | Null, @payment_method_details : PaymentMethodDetails | Null, @receipt_email : String | Null, @receipt_number : String | Null, @receipt_url : String | Null, @review : String | Review | Null, @shipping : Shipping | Null, @source : Source, @source_transfer : String | Transfer | Null, @statement_descriptor : String | Null, @statement_descriptor_suffix : String | Null, @status : String, @transfer : String | Transfer | Null, @transfer_data : ChargeTransferData | Null, @transfer_group : String | Null, @balance_transactions : Array(BalanceTransaction) | Null, @evidence : IssuingDisputeEvidence, @evidence_details : DisputeEvidenceDetails, @is_charge_refundable : Bool, @reason : String | Null, @fee : String | ApplicationFee | Null, @amount_details : IssuingTransactionAmountDetails | Null, @approved : Bool, @authorization_method : String, @card : String | IssuingCard | Null, @cardholder : String | IssuingCardholder | Null, @merchant_amount : Int64, @merchant_currency : String, @merchant_data : IssuingAuthorizationMerchantData, @pending_request : IssuingAuthorizationPendingRequest | Null, @request_history : Array(IssuingAuthorizationRequest), @transactions : Array(IssuingTransaction), @verification_data : IssuingAuthorizationVerificationData, @wallet : String | Null, @transaction : String | IssuingTransaction | Null, @authorization : String | IssuingAuthorization | Null, @purchase_details : IssuingTransactionPurchaseDetails | Null, @_type : String, @arrival_date : Int64, @automatic : Bool, @failure_balance_transaction : String | BalanceTransaction | Null, @method : String, @original_payout : String | Payout | Null, @reversed_by : String | Payout | Null, @source_type : String | Null, @source_transaction : String | Charge | Null, @source_transfer_reversal : String | TransferReversal | Null, @transfer_reversal : String | TransferReversal | Null, @period_end : Int64, @period_start : Int64, @tax_deduction_account_number : String, @expected_availability_date : Int64 | Null, @amount_reversed : Int64, @reversals : TransferReversalList1, @reversed : Bool, @destination_payment_refund : String | Refund | Null, @source_refund : String | Refund | Null, @alternate_statement_descriptors : AlternateStatementDescriptors? = nil, @authorization_code : String? = nil, @level3 : Level3? = nil, @network_reason_code : String? | Null = nil, @failure_reason : String? = nil, @destination_payment : String | Charge? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @account.to_s.size > 5000
        invalid_properties.push("invalid value for \"account\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@authorization_code.nil? && @authorization_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"authorization_code\", the character length must be smaller than or equal to 5000.")
      end

      if !@calculated_statement_descriptor.null? && @calculated_statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"calculated_statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.null? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@failure_code.null? && @failure_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      if !@failure_message.null? && @failure_message.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      if !@payment_method.null? && @payment_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"payment_method\", the character length must be smaller than or equal to 5000.")
      end

      if !@receipt_email.null? && @receipt_email.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_email\", the character length must be smaller than or equal to 5000.")
      end

      if !@receipt_number.null? && @receipt_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      if !@receipt_url.null? && @receipt_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor_suffix.null? && @statement_descriptor_suffix.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 5000.")
      end

      if !@transfer_group.null? && @transfer_group.to_s.size > 5000
        invalid_properties.push("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      if !@network_reason_code.nil? && !@network_reason_code.null? && @network_reason_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"network_reason_code\", the character length must be smaller than or equal to 5000.")
      end

      if !@reason.null? && @reason.to_s.size > 5000
        invalid_properties.push("invalid value for \"reason\", the character length must be smaller than or equal to 5000.")
      end

      if @_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      if @method.to_s.size > 5000
        invalid_properties.push("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
      end

      if !@source_type.null? && @source_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      if !@failure_reason.nil? && @failure_reason.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_reason\", the character length must be smaller than or equal to 5000.")
      end

      if @tax_deduction_account_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"tax_deduction_account_number\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account.to_s.size > 5000
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["transfer_reversal"])
      return false unless object_validator.valid?(@object)
      return false if !@authorization_code.nil? && @authorization_code.to_s.size > 5000
      return false if !@calculated_statement_descriptor.null? && @calculated_statement_descriptor.to_s.size > 5000
      return false if !@description.null? && @description.to_s.size > 5000
      return false if !@failure_code.null? && @failure_code.to_s.size > 5000
      return false if !@failure_message.null? && @failure_message.to_s.size > 5000
      return false if !@payment_method.null? && @payment_method.to_s.size > 5000
      return false if !@receipt_email.null? && @receipt_email.to_s.size > 5000
      return false if !@receipt_number.null? && @receipt_number.to_s.size > 5000
      return false if !@receipt_url.null? && @receipt_url.to_s.size > 5000
      return false if !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
      return false if !@statement_descriptor_suffix.null? && @statement_descriptor_suffix.to_s.size > 5000
      status_validator = EnumAttributeValidator.new("String", ["canceled", "failed", "pending", "reversed", "succeeded"])
      return false unless status_validator.valid?(@status)
      return false if !@transfer_group.null? && @transfer_group.to_s.size > 5000
      return false if !@network_reason_code.nil? && !@network_reason_code.null? && @network_reason_code.to_s.size > 5000
      return false if !@reason.null? && @reason.to_s.size > 5000
      authorization_method_validator = EnumAttributeValidator.new("String", ["chip", "contactless", "keyed_in", "online", "swipe"])
      return false unless authorization_method_validator.valid?(@authorization_method)
      wallet_validator = EnumAttributeValidator.new("String", ["apple_pay", "google_pay", "samsung_pay"])
      return false unless wallet_validator.valid?(@wallet)
      return false if @_type.to_s.size > 5000
      return false if @method.to_s.size > 5000
      return false if !@source_type.null? && @source_type.to_s.size > 5000
      return false if !@failure_reason.nil? && @failure_reason.to_s.size > 5000
      return false if @tax_deduction_account_number.to_s.size > 5000
      _any_of_found = false
      self.class.openapi_any_of.each do |_class|
        _any_of = Stripe.const_get(_class).build_from_hash(self.to_hash)
        if _any_of.valid?
          _any_of_found = true
        end
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account Value to be assigned
    def account=(account)
      if account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\", the character length must be smaller than or equal to 5000.")
      end

      @account = account
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["transfer_reversal"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] authorization_code Value to be assigned
    def authorization_code=(authorization_code)
      if !authorization_code.nil? && authorization_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"authorization_code\", the character length must be smaller than or equal to 5000.")
      end

      @authorization_code = authorization_code
    end

    # Custom attribute writer method with validation
    # @param [Object] calculated_statement_descriptor Value to be assigned
    def calculated_statement_descriptor=(calculated_statement_descriptor)
      if !@calculated_statement_descriptor.null? && calculated_statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"calculated_statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @calculated_statement_descriptor = calculated_statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !@description.null? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_code Value to be assigned
    def failure_code=(failure_code)
      if !@failure_code.null? && failure_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      @failure_code = failure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_message Value to be assigned
    def failure_message=(failure_message)
      if !@failure_message.null? && failure_message.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      @failure_message = failure_message
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method Value to be assigned
    def payment_method=(payment_method)
      if !@payment_method.null? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @payment_method = payment_method
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_email Value to be assigned
    def receipt_email=(receipt_email)
      if !@receipt_email.null? && receipt_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_email\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_email = receipt_email
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_number Value to be assigned
    def receipt_number=(receipt_number)
      if !@receipt_number.null? && receipt_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_number = receipt_number
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_url Value to be assigned
    def receipt_url=(receipt_url)
      if !@receipt_url.null? && receipt_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_url = receipt_url
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor)
      if !@statement_descriptor.null? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor_suffix Value to be assigned
    def statement_descriptor_suffix=(statement_descriptor_suffix)
      if !@statement_descriptor_suffix.null? && statement_descriptor_suffix.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor_suffix = statement_descriptor_suffix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["canceled", "failed", "pending", "reversed", "succeeded"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] transfer_group Value to be assigned
    def transfer_group=(transfer_group)
      if !@transfer_group.null? && transfer_group.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      @transfer_group = transfer_group
    end

    # Custom attribute writer method with validation
    # @param [Object] network_reason_code Value to be assigned
    def network_reason_code=(network_reason_code)
      if !network_reason_code.nil? && !@network_reason_code.null? && network_reason_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network_reason_code\", the character length must be smaller than or equal to 5000.")
      end

      @network_reason_code = network_reason_code
    end

    # Custom attribute writer method with validation
    # @param [Object] reason Value to be assigned
    def reason=(reason)
      if !@reason.null? && reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reason\", the character length must be smaller than or equal to 5000.")
      end

      @reason = reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_method Object to be assigned
    def authorization_method=(authorization_method)
      validator = EnumAttributeValidator.new("String", ["chip", "contactless", "keyed_in", "online", "swipe"])
      unless validator.valid?(authorization_method)
        raise ArgumentError.new("invalid value for \"authorization_method\", must be one of #{validator.allowable_values}.")
      end
      @authorization_method = authorization_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet Object to be assigned
    def wallet=(wallet)
      validator = EnumAttributeValidator.new("String", ["apple_pay", "google_pay", "samsung_pay"])
      unless validator.valid?(wallet)
        raise ArgumentError.new("invalid value for \"wallet\", must be one of #{validator.allowable_values}.")
      end
      @wallet = wallet
    end

    # Custom attribute writer method with validation
    # @param [Object] _type Value to be assigned
    def _type=(_type)
      if _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] method Value to be assigned
    def method=(method)
      if method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
      end

      @method = method
    end

    # Custom attribute writer method with validation
    # @param [Object] source_type Value to be assigned
    def source_type=(source_type)
      if !@source_type.null? && source_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      @source_type = source_type
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_reason Value to be assigned
    def failure_reason=(failure_reason)
      if !failure_reason.nil? && failure_reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_reason\", the character length must be smaller than or equal to 5000.")
      end

      @failure_reason = failure_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_deduction_account_number Value to be assigned
    def tax_deduction_account_number=(tax_deduction_account_number)
      if tax_deduction_account_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tax_deduction_account_number\", the character length must be smaller than or equal to 5000.")
      end

      @tax_deduction_account_number = tax_deduction_account_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        account == o.account &&
        amount == o.amount &&
        amount_refunded == o.amount_refunded &&
        application == o.application &&
        balance_transaction == o.balance_transaction &&
        charge == o.charge &&
        created == o.created &&
        currency == o.currency &&
        id == o.id &&
        livemode == o.livemode &&
        object == o.object &&
        originating_transaction == o.originating_transaction &&
        refunded == o.refunded &&
        refunds == o.refunds &&
        alternate_statement_descriptors == o.alternate_statement_descriptors &&
        amount_captured == o.amount_captured &&
        application_fee == o.application_fee &&
        application_fee_amount == o.application_fee_amount &&
        authorization_code == o.authorization_code &&
        billing_details == o.billing_details &&
        calculated_statement_descriptor == o.calculated_statement_descriptor &&
        captured == o.captured &&
        customer == o.customer &&
        description == o.description &&
        destination == o.destination &&
        dispute == o.dispute &&
        disputed == o.disputed &&
        failure_code == o.failure_code &&
        failure_message == o.failure_message &&
        fraud_details == o.fraud_details &&
        invoice == o.invoice &&
        level3 == o.level3 &&
        metadata == o.metadata &&
        on_behalf_of == o.on_behalf_of &&
        order == o.order &&
        outcome == o.outcome &&
        paid == o.paid &&
        payment_intent == o.payment_intent &&
        payment_method == o.payment_method &&
        payment_method_details == o.payment_method_details &&
        receipt_email == o.receipt_email &&
        receipt_number == o.receipt_number &&
        receipt_url == o.receipt_url &&
        review == o.review &&
        shipping == o.shipping &&
        source == o.source &&
        source_transfer == o.source_transfer &&
        statement_descriptor == o.statement_descriptor &&
        statement_descriptor_suffix == o.statement_descriptor_suffix &&
        status == o.status &&
        transfer == o.transfer &&
        transfer_data == o.transfer_data &&
        transfer_group == o.transfer_group &&
        balance_transactions == o.balance_transactions &&
        evidence == o.evidence &&
        evidence_details == o.evidence_details &&
        is_charge_refundable == o.is_charge_refundable &&
        network_reason_code == o.network_reason_code &&
        reason == o.reason &&
        fee == o.fee &&
        amount_details == o.amount_details &&
        approved == o.approved &&
        authorization_method == o.authorization_method &&
        card == o.card &&
        cardholder == o.cardholder &&
        merchant_amount == o.merchant_amount &&
        merchant_currency == o.merchant_currency &&
        merchant_data == o.merchant_data &&
        pending_request == o.pending_request &&
        request_history == o.request_history &&
        transactions == o.transactions &&
        verification_data == o.verification_data &&
        wallet == o.wallet &&
        transaction == o.transaction &&
        authorization == o.authorization &&
        purchase_details == o.purchase_details &&
        _type == o._type &&
        arrival_date == o.arrival_date &&
        automatic == o.automatic &&
        failure_balance_transaction == o.failure_balance_transaction &&
        method == o.method &&
        original_payout == o.original_payout &&
        reversed_by == o.reversed_by &&
        source_type == o.source_type &&
        source_transaction == o.source_transaction &&
        failure_reason == o.failure_reason &&
        source_transfer_reversal == o.source_transfer_reversal &&
        transfer_reversal == o.transfer_reversal &&
        period_end == o.period_end &&
        period_start == o.period_start &&
        tax_deduction_account_number == o.tax_deduction_account_number &&
        expected_availability_date == o.expected_availability_date &&
        amount_reversed == o.amount_reversed &&
        destination_payment == o.destination_payment &&
        reversals == o.reversals &&
        reversed == o.reversed &&
        destination_payment_refund == o.destination_payment_refund &&
        source_refund == o.source_refund
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account, amount, amount_refunded, application, balance_transaction, charge, created, currency, id, livemode, object, originating_transaction, refunded, refunds, alternate_statement_descriptors, amount_captured, application_fee, application_fee_amount, authorization_code, billing_details, calculated_statement_descriptor, captured, customer, description, destination, dispute, disputed, failure_code, failure_message, fraud_details, invoice, level3, metadata, on_behalf_of, order, outcome, paid, payment_intent, payment_method, payment_method_details, receipt_email, receipt_number, receipt_url, review, shipping, source, source_transfer, statement_descriptor, statement_descriptor_suffix, status, transfer, transfer_data, transfer_group, balance_transactions, evidence, evidence_details, is_charge_refundable, network_reason_code, reason, fee, amount_details, approved, authorization_method, card, cardholder, merchant_amount, merchant_currency, merchant_data, pending_request, request_history, transactions, verification_data, wallet, transaction, authorization, purchase_details, _type, arrival_date, automatic, failure_balance_transaction, method, original_payout, reversed_by, source_type, source_transaction, failure_reason, source_transfer_reversal, transfer_reversal, period_end, period_start, tax_deduction_account_number, expected_availability_date, amount_reversed, destination_payment, reversals, reversed, destination_payment_refund, source_refund].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
