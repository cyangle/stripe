#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class BalanceTransactionSource
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The Connected account that incurred this charge.
    @[JSON::Field(key: "account", type: String?)]
    getter account : String?

    # Amount, in %s.
    @[JSON::Field(key: "amount", type: Int64?)]
    property amount : Int64?

    # Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    @[JSON::Field(key: "amount_refunded", type: Int64?)]
    property amount_refunded : Int64?

    @[JSON::Field(key: "application", type: ChargeApplication, presence: true, ignore_serialize: application.nil? && !application_present?)]
    property application : ChargeApplication

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    @[JSON::Field(key: "balance_transaction", type: FeeRefundBalanceTransaction, presence: true, ignore_serialize: balance_transaction.nil? && !balance_transaction_present?)]
    property balance_transaction : FeeRefundBalanceTransaction

    @[JSON::Field(ignore: true)]
    property? balance_transaction_present : Bool = false

    @[JSON::Field(key: "charge", type: RefundCharge, presence: true, ignore_serialize: charge.nil? && !charge_present?)]
    property charge : RefundCharge

    @[JSON::Field(ignore: true)]
    property? charge_present : Bool = false

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?)]
    property created : Int64?

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?)]
    property currency : String?

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?)]
    getter id : String?

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?)]
    property livemode : Bool?

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?)]
    getter object : String?

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["transfer_reversal"])

    @[JSON::Field(key: "originating_transaction", type: ApplicationFeeOriginatingTransaction, presence: true, ignore_serialize: originating_transaction.nil? && !originating_transaction_present?)]
    property originating_transaction : ApplicationFeeOriginatingTransaction

    @[JSON::Field(ignore: true)]
    property? originating_transaction_present : Bool = false

    # Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    @[JSON::Field(key: "refunded", type: Bool?)]
    property refunded : Bool?

    @[JSON::Field(key: "refunds", type: RefundList1?)]
    property refunds : RefundList1?

    # Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
    @[JSON::Field(key: "amount_captured", type: Int64?)]
    property amount_captured : Int64?

    @[JSON::Field(key: "application_fee", type: ChargeApplicationFee, presence: true, ignore_serialize: application_fee.nil? && !application_fee_present?)]
    property application_fee : ChargeApplicationFee

    @[JSON::Field(ignore: true)]
    property? application_fee_present : Bool = false

    # The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    @[JSON::Field(key: "application_fee_amount", type: Int64, presence: true, ignore_serialize: application_fee_amount.nil? && !application_fee_amount_present?)]
    property application_fee_amount : Int64

    @[JSON::Field(ignore: true)]
    property? application_fee_amount_present : Bool = false

    @[JSON::Field(key: "billing_details", type: BillingDetails?)]
    property billing_details : BillingDetails?

    # The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
    @[JSON::Field(key: "calculated_statement_descriptor", type: String, presence: true, ignore_serialize: calculated_statement_descriptor.nil? && !calculated_statement_descriptor_present?)]
    getter calculated_statement_descriptor : String

    @[JSON::Field(ignore: true)]
    property? calculated_statement_descriptor_present : Bool = false

    # If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    @[JSON::Field(key: "captured", type: Bool?)]
    property captured : Bool?

    @[JSON::Field(key: "customer", type: ChargeCustomer, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    property customer : ChargeCustomer

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "destination", type: TransferDestination, presence: true, ignore_serialize: destination.nil? && !destination_present?)]
    property destination : TransferDestination

    @[JSON::Field(ignore: true)]
    property? destination_present : Bool = false

    @[JSON::Field(key: "dispute", type: IssuingTransactionDispute, presence: true, ignore_serialize: dispute.nil? && !dispute_present?)]
    property dispute : IssuingTransactionDispute

    @[JSON::Field(ignore: true)]
    property? dispute_present : Bool = false

    # Whether the charge has been disputed.
    @[JSON::Field(key: "disputed", type: Bool?)]
    property disputed : Bool?

    @[JSON::Field(key: "failure_balance_transaction", type: RefundFailureBalanceTransaction?)]
    property failure_balance_transaction : RefundFailureBalanceTransaction?

    # Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
    @[JSON::Field(key: "failure_code", type: String, presence: true, ignore_serialize: failure_code.nil? && !failure_code_present?)]
    getter failure_code : String

    @[JSON::Field(ignore: true)]
    property? failure_code_present : Bool = false

    # Message to user further explaining reason for top-up failure if available.
    @[JSON::Field(key: "failure_message", type: String, presence: true, ignore_serialize: failure_message.nil? && !failure_message_present?)]
    getter failure_message : String

    @[JSON::Field(ignore: true)]
    property? failure_message_present : Bool = false

    @[JSON::Field(key: "fraud_details", type: ChargeFraudDetails1, presence: true, ignore_serialize: fraud_details.nil? && !fraud_details_present?)]
    property fraud_details : ChargeFraudDetails1

    @[JSON::Field(ignore: true)]
    property? fraud_details_present : Bool = false

    @[JSON::Field(key: "invoice", type: ChargeInvoice, presence: true, ignore_serialize: invoice.nil? && !invoice_present?)]
    property invoice : ChargeInvoice

    @[JSON::Field(ignore: true)]
    property? invoice_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String), presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "on_behalf_of", type: ChargeOnBehalfOf, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    property on_behalf_of : ChargeOnBehalfOf

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "outcome", type: ChargeOutcome1, presence: true, ignore_serialize: outcome.nil? && !outcome_present?)]
    property outcome : ChargeOutcome1

    @[JSON::Field(ignore: true)]
    property? outcome_present : Bool = false

    # `true` if the charge succeeded, or was successfully authorized for later capture.
    @[JSON::Field(key: "paid", type: Bool?)]
    property paid : Bool?

    @[JSON::Field(key: "payment_intent", type: RefundPaymentIntent, presence: true, ignore_serialize: payment_intent.nil? && !payment_intent_present?)]
    property payment_intent : RefundPaymentIntent

    @[JSON::Field(ignore: true)]
    property? payment_intent_present : Bool = false

    # ID of the payment method used in this charge.
    @[JSON::Field(key: "payment_method", type: String, presence: true, ignore_serialize: payment_method.nil? && !payment_method_present?)]
    getter payment_method : String

    @[JSON::Field(ignore: true)]
    property? payment_method_present : Bool = false

    @[JSON::Field(key: "payment_method_details", type: ChargePaymentMethodDetails, presence: true, ignore_serialize: payment_method_details.nil? && !payment_method_details_present?)]
    property payment_method_details : ChargePaymentMethodDetails

    @[JSON::Field(ignore: true)]
    property? payment_method_details_present : Bool = false

    # This is the email address that the receipt for this charge was sent to.
    @[JSON::Field(key: "receipt_email", type: String, presence: true, ignore_serialize: receipt_email.nil? && !receipt_email_present?)]
    getter receipt_email : String

    @[JSON::Field(ignore: true)]
    property? receipt_email_present : Bool = false

    # This is the transaction number that appears on email receipts sent for this refund.
    @[JSON::Field(key: "receipt_number", type: String, presence: true, ignore_serialize: receipt_number.nil? && !receipt_number_present?)]
    getter receipt_number : String

    @[JSON::Field(ignore: true)]
    property? receipt_number_present : Bool = false

    # This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    @[JSON::Field(key: "receipt_url", type: String, presence: true, ignore_serialize: receipt_url.nil? && !receipt_url_present?)]
    getter receipt_url : String

    @[JSON::Field(ignore: true)]
    property? receipt_url_present : Bool = false

    @[JSON::Field(key: "review", type: ChargeReview, presence: true, ignore_serialize: review.nil? && !review_present?)]
    property review : ChargeReview

    @[JSON::Field(ignore: true)]
    property? review_present : Bool = false

    @[JSON::Field(key: "shipping", type: ChargeShipping, presence: true, ignore_serialize: shipping.nil? && !shipping_present?)]
    property shipping : ChargeShipping

    @[JSON::Field(ignore: true)]
    property? shipping_present : Bool = false

    @[JSON::Field(key: "source", type: Source?)]
    property source : Source?

    @[JSON::Field(key: "source_transfer", type: ChargeSourceTransfer, presence: true, ignore_serialize: source_transfer.nil? && !source_transfer_present?)]
    property source_transfer : ChargeSourceTransfer

    @[JSON::Field(ignore: true)]
    property? source_transfer_present : Bool = false

    # Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
    @[JSON::Field(key: "statement_descriptor", type: String, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    @[JSON::Field(key: "statement_descriptor_suffix", type: String, presence: true, ignore_serialize: statement_descriptor_suffix.nil? && !statement_descriptor_suffix_present?)]
    getter statement_descriptor_suffix : String

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_suffix_present : Bool = false

    # The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
    @[JSON::Field(key: "status", type: String?)]
    getter status : String?

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["canceled", "failed", "pending", "reversed", "succeeded"])

    @[JSON::Field(key: "transfer", type: TransferReversalTransfer?)]
    property transfer : TransferReversalTransfer?

    @[JSON::Field(key: "transfer_data", type: ChargeTransferData1, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    property transfer_data : ChargeTransferData1

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    @[JSON::Field(key: "transfer_group", type: String, presence: true, ignore_serialize: transfer_group.nil? && !transfer_group_present?)]
    getter transfer_group : String

    @[JSON::Field(ignore: true)]
    property? transfer_group_present : Bool = false

    # List of balance transactions associated with the dispute.
    @[JSON::Field(key: "balance_transactions", type: Array(BalanceTransaction), presence: true, ignore_serialize: balance_transactions.nil? && !balance_transactions_present?)]
    property balance_transactions : Array(BalanceTransaction)

    @[JSON::Field(ignore: true)]
    property? balance_transactions_present : Bool = false

    @[JSON::Field(key: "evidence", type: IssuingDisputeEvidence?)]
    property evidence : IssuingDisputeEvidence?

    @[JSON::Field(key: "evidence_details", type: DisputeEvidenceDetails?)]
    property evidence_details : DisputeEvidenceDetails?

    # If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
    @[JSON::Field(key: "is_charge_refundable", type: Bool?)]
    property is_charge_refundable : Bool?

    # Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    @[JSON::Field(key: "reason", type: String, presence: true, ignore_serialize: reason.nil? && !reason_present?)]
    getter reason : String

    @[JSON::Field(ignore: true)]
    property? reason_present : Bool = false

    ENUM_VALIDATOR_FOR_REASON = EnumValidator.new("reason", "String", ["duplicate", "expired_uncaptured_charge", "fraudulent", "requested_by_customer", "null"])

    @[JSON::Field(key: "fee", type: FeeRefundFee?)]
    property fee : FeeRefundFee?

    @[JSON::Field(key: "amount_details", type: IssuingTransactionAmountDetails1, presence: true, ignore_serialize: amount_details.nil? && !amount_details_present?)]
    property amount_details : IssuingTransactionAmountDetails1

    @[JSON::Field(ignore: true)]
    property? amount_details_present : Bool = false

    # Whether the authorization has been approved.
    @[JSON::Field(key: "approved", type: Bool?)]
    property approved : Bool?

    # How the card details were provided.
    @[JSON::Field(key: "authorization_method", type: String?)]
    getter authorization_method : String?

    ENUM_VALIDATOR_FOR_AUTHORIZATION_METHOD = EnumValidator.new("authorization_method", "String", ["chip", "contactless", "keyed_in", "online", "swipe"])

    @[JSON::Field(key: "card", type: IssuingTransactionCard?)]
    property card : IssuingTransactionCard?

    @[JSON::Field(key: "cardholder", type: IssuingTransactionCardholder, presence: true, ignore_serialize: cardholder.nil? && !cardholder_present?)]
    property cardholder : IssuingTransactionCardholder

    @[JSON::Field(ignore: true)]
    property? cardholder_present : Bool = false

    # The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
    @[JSON::Field(key: "merchant_amount", type: Int64?)]
    property merchant_amount : Int64?

    # The currency with which the merchant is taking payment.
    @[JSON::Field(key: "merchant_currency", type: String?)]
    property merchant_currency : String?

    @[JSON::Field(key: "merchant_data", type: IssuingAuthorizationMerchantData?)]
    property merchant_data : IssuingAuthorizationMerchantData?

    @[JSON::Field(key: "pending_request", type: IssuingAuthorizationPendingRequest1, presence: true, ignore_serialize: pending_request.nil? && !pending_request_present?)]
    property pending_request : IssuingAuthorizationPendingRequest1

    @[JSON::Field(ignore: true)]
    property? pending_request_present : Bool = false

    # History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
    @[JSON::Field(key: "request_history", type: Array(IssuingAuthorizationRequest)?)]
    property request_history : Array(IssuingAuthorizationRequest)?

    # List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    @[JSON::Field(key: "transactions", type: Array(IssuingTransaction)?)]
    property transactions : Array(IssuingTransaction)?

    @[JSON::Field(key: "verification_data", type: IssuingAuthorizationVerificationData?)]
    property verification_data : IssuingAuthorizationVerificationData?

    # The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    @[JSON::Field(key: "wallet", type: String, presence: true, ignore_serialize: wallet.nil? && !wallet_present?)]
    getter wallet : String

    @[JSON::Field(ignore: true)]
    property? wallet_present : Bool = false

    ENUM_VALIDATOR_FOR_WALLET = EnumValidator.new("wallet", "String", ["apple_pay", "google_pay", "samsung_pay", "null"])

    @[JSON::Field(key: "transaction", type: IssuingDisputeTransaction?)]
    property transaction : IssuingDisputeTransaction?

    @[JSON::Field(key: "authorization", type: IssuingTransactionAuthorization, presence: true, ignore_serialize: authorization.nil? && !authorization_present?)]
    property authorization : IssuingTransactionAuthorization

    @[JSON::Field(ignore: true)]
    property? authorization_present : Bool = false

    @[JSON::Field(key: "purchase_details", type: IssuingTransactionPurchaseDetails1, presence: true, ignore_serialize: purchase_details.nil? && !purchase_details_present?)]
    property purchase_details : IssuingTransactionPurchaseDetails1

    @[JSON::Field(ignore: true)]
    property? purchase_details_present : Bool = false

    # The type of tax (VAT).
    @[JSON::Field(key: "type", type: String?)]
    getter _type : String?

    # Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
    @[JSON::Field(key: "arrival_date", type: Int64?)]
    property arrival_date : Int64?

    # Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
    @[JSON::Field(key: "automatic", type: Bool?)]
    property automatic : Bool?

    # The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
    @[JSON::Field(key: "method", type: String?)]
    getter method : String?

    @[JSON::Field(key: "original_payout", type: PayoutOriginalPayout, presence: true, ignore_serialize: original_payout.nil? && !original_payout_present?)]
    property original_payout : PayoutOriginalPayout

    @[JSON::Field(ignore: true)]
    property? original_payout_present : Bool = false

    @[JSON::Field(key: "reversed_by", type: PayoutReversedBy, presence: true, ignore_serialize: reversed_by.nil? && !reversed_by_present?)]
    property reversed_by : PayoutReversedBy

    @[JSON::Field(ignore: true)]
    property? reversed_by_present : Bool = false

    # The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
    @[JSON::Field(key: "source_type", type: String, presence: true, ignore_serialize: source_type.nil? && !source_type_present?)]
    getter source_type : String

    @[JSON::Field(ignore: true)]
    property? source_type_present : Bool = false

    @[JSON::Field(key: "source_transaction", type: TransferSourceTransaction, presence: true, ignore_serialize: source_transaction.nil? && !source_transaction_present?)]
    property source_transaction : TransferSourceTransaction

    @[JSON::Field(ignore: true)]
    property? source_transaction_present : Bool = false

    @[JSON::Field(key: "source_transfer_reversal", type: RefundSourceTransferReversal, presence: true, ignore_serialize: source_transfer_reversal.nil? && !source_transfer_reversal_present?)]
    property source_transfer_reversal : RefundSourceTransferReversal

    @[JSON::Field(ignore: true)]
    property? source_transfer_reversal_present : Bool = false

    @[JSON::Field(key: "transfer_reversal", type: RefundTransferReversal, presence: true, ignore_serialize: transfer_reversal.nil? && !transfer_reversal_present?)]
    property transfer_reversal : RefundTransferReversal

    @[JSON::Field(ignore: true)]
    property? transfer_reversal_present : Bool = false

    # The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[JSON::Field(key: "period_end", type: Int64?)]
    property period_end : Int64?

    # The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[JSON::Field(key: "period_start", type: Int64?)]
    property period_start : Int64?

    # The TAN that was supplied to Stripe when TDS was assessed
    @[JSON::Field(key: "tax_deduction_account_number", type: String?)]
    getter tax_deduction_account_number : String?

    # Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
    @[JSON::Field(key: "expected_availability_date", type: Int64, presence: true, ignore_serialize: expected_availability_date.nil? && !expected_availability_date_present?)]
    property expected_availability_date : Int64

    @[JSON::Field(ignore: true)]
    property? expected_availability_date_present : Bool = false

    # Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
    @[JSON::Field(key: "amount_reversed", type: Int64?)]
    property amount_reversed : Int64?

    @[JSON::Field(key: "reversals", type: TransferReversalList1?)]
    property reversals : TransferReversalList1?

    # Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
    @[JSON::Field(key: "reversed", type: Bool?)]
    property reversed : Bool?

    @[JSON::Field(key: "destination_payment_refund", type: TransferReversalDestinationPaymentRefund, presence: true, ignore_serialize: destination_payment_refund.nil? && !destination_payment_refund_present?)]
    property destination_payment_refund : TransferReversalDestinationPaymentRefund

    @[JSON::Field(ignore: true)]
    property? destination_payment_refund_present : Bool = false

    @[JSON::Field(key: "source_refund", type: TransferReversalSourceRefund, presence: true, ignore_serialize: source_refund.nil? && !source_refund_present?)]
    property source_refund : TransferReversalSourceRefund

    @[JSON::Field(ignore: true)]
    property? source_refund_present : Bool = false

    # Optional properties
    @[JSON::Field(key: "alternate_statement_descriptors", type: AlternateStatementDescriptors?, presence: true, ignore_serialize: alternate_statement_descriptors.nil? && !alternate_statement_descriptors_present?)]
    property alternate_statement_descriptors : AlternateStatementDescriptors?

    @[JSON::Field(ignore: true)]
    property? alternate_statement_descriptors_present : Bool = false

    # Authorization code on the charge.
    @[JSON::Field(key: "authorization_code", type: String?, presence: true, ignore_serialize: authorization_code.nil? && !authorization_code_present?)]
    getter authorization_code : String?

    @[JSON::Field(ignore: true)]
    property? authorization_code_present : Bool = false

    @[JSON::Field(key: "level3", type: Level3?, presence: true, ignore_serialize: level3.nil? && !level3_present?)]
    property level3 : Level3?

    @[JSON::Field(ignore: true)]
    property? level3_present : Bool = false

    @[JSON::Field(key: "radar_options", type: RadarRadarOptions?, presence: true, ignore_serialize: radar_options.nil? && !radar_options_present?)]
    property radar_options : RadarRadarOptions?

    @[JSON::Field(ignore: true)]
    property? radar_options_present : Bool = false

    # Network-dependent reason code for the dispute.
    @[JSON::Field(key: "network_reason_code", type: String?, presence: true, ignore_serialize: network_reason_code.nil? && !network_reason_code_present?)]
    getter network_reason_code : String?

    @[JSON::Field(ignore: true)]
    property? network_reason_code_present : Bool = false

    @[JSON::Field(key: "treasury", type: IssuingTransactionTreasury1?, presence: true, ignore_serialize: treasury.nil? && !treasury_present?)]
    property treasury : IssuingTransactionTreasury1?

    @[JSON::Field(ignore: true)]
    property? treasury_present : Bool = false

    # If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
    @[JSON::Field(key: "failure_reason", type: String?, presence: true, ignore_serialize: failure_reason.nil? && !failure_reason_present?)]
    getter failure_reason : String?

    @[JSON::Field(ignore: true)]
    property? failure_reason_present : Bool = false

    # Email to which refund instructions, if required, are sent to.
    @[JSON::Field(key: "instructions_email", type: String?, presence: true, ignore_serialize: instructions_email.nil? && !instructions_email_present?)]
    getter instructions_email : String?

    @[JSON::Field(ignore: true)]
    property? instructions_email_present : Bool = false

    @[JSON::Field(key: "next_action", type: RefundNextAction?, presence: true, ignore_serialize: next_action.nil? && !next_action_present?)]
    property next_action : RefundNextAction?

    @[JSON::Field(ignore: true)]
    property? next_action_present : Bool = false

    @[JSON::Field(key: "destination_payment", type: TransferDestinationPayment?, presence: true, ignore_serialize: destination_payment.nil? && !destination_payment_present?)]
    property destination_payment : TransferDestinationPayment?

    @[JSON::Field(ignore: true)]
    property? destination_payment_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::ApplicationFee,
        Stripe::Charge,
        Stripe::ConnectCollectionTransfer,
        Stripe::Dispute,
        Stripe::FeeRefund,
        Stripe::IssuingAuthorization,
        Stripe::IssuingDispute,
        Stripe::IssuingTransaction,
        Stripe::Payout,
        Stripe::PlatformTaxFee,
        Stripe::Refund,
        Stripe::ReserveTransaction,
        Stripe::TaxDeductedAtSource,
        Stripe::Topup,
        Stripe::Transfer,
        Stripe::TransferReversal,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @account : String, @amount : Int64, @amount_refunded : Int64, @application : ChargeApplication?, @balance_transaction : FeeRefundBalanceTransaction?, @charge : RefundCharge?, @created : Int64, @currency : String, @id : String, @livemode : Bool, @object : String, @originating_transaction : ApplicationFeeOriginatingTransaction?, @refunded : Bool, @refunds : RefundList1, @amount_captured : Int64, @application_fee : ChargeApplicationFee?, @application_fee_amount : Int64?, @billing_details : BillingDetails, @calculated_statement_descriptor : String?, @captured : Bool, @customer : ChargeCustomer?, @description : String?, @destination : TransferDestination?, @dispute : IssuingTransactionDispute?, @disputed : Bool, @failure_balance_transaction : RefundFailureBalanceTransaction, @failure_code : String?, @failure_message : String?, @fraud_details : ChargeFraudDetails1?, @invoice : ChargeInvoice?, @metadata : Hash(String, String)?, @on_behalf_of : ChargeOnBehalfOf?, @outcome : ChargeOutcome1?, @paid : Bool, @payment_intent : RefundPaymentIntent?, @payment_method : String?, @payment_method_details : ChargePaymentMethodDetails?, @receipt_email : String?, @receipt_number : String?, @receipt_url : String?, @review : ChargeReview?, @shipping : ChargeShipping?, @source : Source, @source_transfer : ChargeSourceTransfer?, @statement_descriptor : String?, @statement_descriptor_suffix : String?, @status : String, @transfer : TransferReversalTransfer, @transfer_data : ChargeTransferData1?, @transfer_group : String?, @balance_transactions : Array(BalanceTransaction)?, @evidence : IssuingDisputeEvidence, @evidence_details : DisputeEvidenceDetails, @is_charge_refundable : Bool, @reason : String?, @fee : FeeRefundFee, @amount_details : IssuingTransactionAmountDetails1?, @approved : Bool, @authorization_method : String, @card : IssuingTransactionCard, @cardholder : IssuingTransactionCardholder?, @merchant_amount : Int64, @merchant_currency : String, @merchant_data : IssuingAuthorizationMerchantData, @pending_request : IssuingAuthorizationPendingRequest1?, @request_history : Array(IssuingAuthorizationRequest), @transactions : Array(IssuingTransaction), @verification_data : IssuingAuthorizationVerificationData, @wallet : String?, @transaction : IssuingDisputeTransaction, @authorization : IssuingTransactionAuthorization?, @purchase_details : IssuingTransactionPurchaseDetails1?, @_type : String, @arrival_date : Int64, @automatic : Bool, @method : String, @original_payout : PayoutOriginalPayout?, @reversed_by : PayoutReversedBy?, @source_type : String?, @source_transaction : TransferSourceTransaction?, @source_transfer_reversal : RefundSourceTransferReversal?, @transfer_reversal : RefundTransferReversal?, @period_end : Int64, @period_start : Int64, @tax_deduction_account_number : String, @expected_availability_date : Int64?, @amount_reversed : Int64, @reversals : TransferReversalList1, @reversed : Bool, @destination_payment_refund : TransferReversalDestinationPaymentRefund?, @source_refund : TransferReversalSourceRefund?, @alternate_statement_descriptors : AlternateStatementDescriptors? = nil, @authorization_code : String? = nil, @level3 : Level3? = nil, @radar_options : RadarRadarOptions? = nil, @network_reason_code : String? = nil, @treasury : IssuingTransactionTreasury1? = nil, @failure_reason : String? = nil, @instructions_email : String? = nil, @next_action : RefundNextAction? = nil, @destination_payment : TransferDestinationPayment? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @account.to_s.size > 5000
        invalid_properties.push("invalid value for \"account\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if !@authorization_code.nil? && @authorization_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"authorization_code\", the character length must be smaller than or equal to 5000.")
      end

      if @calculated_statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"calculated_statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @failure_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      if @failure_message.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      if @payment_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"payment_method\", the character length must be smaller than or equal to 5000.")
      end

      if @receipt_email.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_email\", the character length must be smaller than or equal to 5000.")
      end

      if @receipt_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      if @receipt_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      if @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if @statement_descriptor_suffix.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      if @transfer_group.to_s.size > 5000
        invalid_properties.push("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      if !@network_reason_code.nil? && @network_reason_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"network_reason_code\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_REASON.error_message) unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason)

      invalid_properties.push(ENUM_VALIDATOR_FOR_AUTHORIZATION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_AUTHORIZATION_METHOD.valid?(@authorization_method, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_WALLET.error_message) unless ENUM_VALIDATOR_FOR_WALLET.valid?(@wallet)

      if @_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      if @method.to_s.size > 5000
        invalid_properties.push("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
      end

      if @source_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      if !@failure_reason.nil? && @failure_reason.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_reason\", the character length must be smaller than or equal to 5000.")
      end

      if !@instructions_email.nil? && @instructions_email.to_s.size > 5000
        invalid_properties.push("invalid value for \"instructions_email\", the character length must be smaller than or equal to 5000.")
      end

      if @tax_deduction_account_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"tax_deduction_account_number\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if !@authorization_code.nil? && @authorization_code.to_s.size > 5000
      return false if @calculated_statement_descriptor.to_s.size > 5000
      return false if @description.to_s.size > 5000
      return false if @failure_code.to_s.size > 5000
      return false if @failure_message.to_s.size > 5000
      return false if @payment_method.to_s.size > 5000
      return false if @receipt_email.to_s.size > 5000
      return false if @receipt_number.to_s.size > 5000
      return false if @receipt_url.to_s.size > 5000
      return false if @statement_descriptor.to_s.size > 5000
      return false if @statement_descriptor_suffix.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false if @transfer_group.to_s.size > 5000
      return false if !@network_reason_code.nil? && @network_reason_code.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason)
      return false unless ENUM_VALIDATOR_FOR_AUTHORIZATION_METHOD.valid?(@authorization_method, false)
      return false unless ENUM_VALIDATOR_FOR_WALLET.valid?(@wallet)
      return false if @_type.to_s.size > 5000
      return false if @method.to_s.size > 5000
      return false if @source_type.to_s.size > 5000
      return false if !@failure_reason.nil? && @failure_reason.to_s.size > 5000
      return false if !@instructions_email.nil? && @instructions_email.to_s.size > 5000
      return false if @tax_deduction_account_number.to_s.size > 5000
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account Value to be assigned
    def account=(account)
      if account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\", the character length must be smaller than or equal to 5000.")
      end

      @account = account
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] authorization_code Value to be assigned
    def authorization_code=(authorization_code)
      if !authorization_code.nil? && authorization_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"authorization_code\", the character length must be smaller than or equal to 5000.")
      end

      @authorization_code = authorization_code
    end

    # Custom attribute writer method with validation
    # @param [Object] calculated_statement_descriptor Value to be assigned
    def calculated_statement_descriptor=(calculated_statement_descriptor)
      if calculated_statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"calculated_statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @calculated_statement_descriptor = calculated_statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_code Value to be assigned
    def failure_code=(failure_code)
      if failure_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      @failure_code = failure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_message Value to be assigned
    def failure_message=(failure_message)
      if failure_message.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      @failure_message = failure_message
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method Value to be assigned
    def payment_method=(payment_method)
      if payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @payment_method = payment_method
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_email Value to be assigned
    def receipt_email=(receipt_email)
      if receipt_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_email\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_email = receipt_email
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_number Value to be assigned
    def receipt_number=(receipt_number)
      if receipt_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_number = receipt_number
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_url Value to be assigned
    def receipt_url=(receipt_url)
      if receipt_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_url = receipt_url
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor)
      if statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor_suffix Value to be assigned
    def statement_descriptor_suffix=(statement_descriptor_suffix)
      if statement_descriptor_suffix.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor_suffix = statement_descriptor_suffix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] transfer_group Value to be assigned
    def transfer_group=(transfer_group)
      if transfer_group.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      @transfer_group = transfer_group
    end

    # Custom attribute writer method with validation
    # @param [Object] network_reason_code Value to be assigned
    def network_reason_code=(network_reason_code)
      if !network_reason_code.nil? && network_reason_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network_reason_code\", the character length must be smaller than or equal to 5000.")
      end

      @network_reason_code = network_reason_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason)
      ENUM_VALIDATOR_FOR_REASON.valid!(reason)
      @reason = reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_method Object to be assigned
    def authorization_method=(authorization_method)
      ENUM_VALIDATOR_FOR_AUTHORIZATION_METHOD.valid!(authorization_method, false)
      @authorization_method = authorization_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet Object to be assigned
    def wallet=(wallet)
      ENUM_VALIDATOR_FOR_WALLET.valid!(wallet)
      @wallet = wallet
    end

    # Custom attribute writer method with validation
    # @param [Object] _type Value to be assigned
    def _type=(_type)
      if _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] method Value to be assigned
    def method=(method)
      if method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
      end

      @method = method
    end

    # Custom attribute writer method with validation
    # @param [Object] source_type Value to be assigned
    def source_type=(source_type)
      if source_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      @source_type = source_type
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_reason Value to be assigned
    def failure_reason=(failure_reason)
      if !failure_reason.nil? && failure_reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_reason\", the character length must be smaller than or equal to 5000.")
      end

      @failure_reason = failure_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] instructions_email Value to be assigned
    def instructions_email=(instructions_email)
      if !instructions_email.nil? && instructions_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"instructions_email\", the character length must be smaller than or equal to 5000.")
      end

      @instructions_email = instructions_email
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_deduction_account_number Value to be assigned
    def tax_deduction_account_number=(tax_deduction_account_number)
      if tax_deduction_account_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tax_deduction_account_number\", the character length must be smaller than or equal to 5000.")
      end

      @tax_deduction_account_number = tax_deduction_account_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        account == o.account &&
        amount == o.amount &&
        amount_refunded == o.amount_refunded &&
        application == o.application &&
        balance_transaction == o.balance_transaction &&
        charge == o.charge &&
        created == o.created &&
        currency == o.currency &&
        id == o.id &&
        livemode == o.livemode &&
        object == o.object &&
        originating_transaction == o.originating_transaction &&
        refunded == o.refunded &&
        refunds == o.refunds &&
        alternate_statement_descriptors == o.alternate_statement_descriptors &&
        amount_captured == o.amount_captured &&
        application_fee == o.application_fee &&
        application_fee_amount == o.application_fee_amount &&
        authorization_code == o.authorization_code &&
        billing_details == o.billing_details &&
        calculated_statement_descriptor == o.calculated_statement_descriptor &&
        captured == o.captured &&
        customer == o.customer &&
        description == o.description &&
        destination == o.destination &&
        dispute == o.dispute &&
        disputed == o.disputed &&
        failure_balance_transaction == o.failure_balance_transaction &&
        failure_code == o.failure_code &&
        failure_message == o.failure_message &&
        fraud_details == o.fraud_details &&
        invoice == o.invoice &&
        level3 == o.level3 &&
        metadata == o.metadata &&
        on_behalf_of == o.on_behalf_of &&
        outcome == o.outcome &&
        paid == o.paid &&
        payment_intent == o.payment_intent &&
        payment_method == o.payment_method &&
        payment_method_details == o.payment_method_details &&
        radar_options == o.radar_options &&
        receipt_email == o.receipt_email &&
        receipt_number == o.receipt_number &&
        receipt_url == o.receipt_url &&
        review == o.review &&
        shipping == o.shipping &&
        source == o.source &&
        source_transfer == o.source_transfer &&
        statement_descriptor == o.statement_descriptor &&
        statement_descriptor_suffix == o.statement_descriptor_suffix &&
        status == o.status &&
        transfer == o.transfer &&
        transfer_data == o.transfer_data &&
        transfer_group == o.transfer_group &&
        balance_transactions == o.balance_transactions &&
        evidence == o.evidence &&
        evidence_details == o.evidence_details &&
        is_charge_refundable == o.is_charge_refundable &&
        network_reason_code == o.network_reason_code &&
        reason == o.reason &&
        fee == o.fee &&
        amount_details == o.amount_details &&
        approved == o.approved &&
        authorization_method == o.authorization_method &&
        card == o.card &&
        cardholder == o.cardholder &&
        merchant_amount == o.merchant_amount &&
        merchant_currency == o.merchant_currency &&
        merchant_data == o.merchant_data &&
        pending_request == o.pending_request &&
        request_history == o.request_history &&
        transactions == o.transactions &&
        treasury == o.treasury &&
        verification_data == o.verification_data &&
        wallet == o.wallet &&
        transaction == o.transaction &&
        authorization == o.authorization &&
        purchase_details == o.purchase_details &&
        _type == o._type &&
        arrival_date == o.arrival_date &&
        automatic == o.automatic &&
        method == o.method &&
        original_payout == o.original_payout &&
        reversed_by == o.reversed_by &&
        source_type == o.source_type &&
        source_transaction == o.source_transaction &&
        failure_reason == o.failure_reason &&
        instructions_email == o.instructions_email &&
        next_action == o.next_action &&
        source_transfer_reversal == o.source_transfer_reversal &&
        transfer_reversal == o.transfer_reversal &&
        period_end == o.period_end &&
        period_start == o.period_start &&
        tax_deduction_account_number == o.tax_deduction_account_number &&
        expected_availability_date == o.expected_availability_date &&
        amount_reversed == o.amount_reversed &&
        destination_payment == o.destination_payment &&
        reversals == o.reversals &&
        reversed == o.reversed &&
        destination_payment_refund == o.destination_payment_refund &&
        source_refund == o.source_refund
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@account, @amount, @amount_refunded, @application, @balance_transaction, @charge, @created, @currency, @id, @livemode, @object, @originating_transaction, @refunded, @refunds, @alternate_statement_descriptors, @amount_captured, @application_fee, @application_fee_amount, @authorization_code, @billing_details, @calculated_statement_descriptor, @captured, @customer, @description, @destination, @dispute, @disputed, @failure_balance_transaction, @failure_code, @failure_message, @fraud_details, @invoice, @level3, @metadata, @on_behalf_of, @outcome, @paid, @payment_intent, @payment_method, @payment_method_details, @radar_options, @receipt_email, @receipt_number, @receipt_url, @review, @shipping, @source, @source_transfer, @statement_descriptor, @statement_descriptor_suffix, @status, @transfer, @transfer_data, @transfer_group, @balance_transactions, @evidence, @evidence_details, @is_charge_refundable, @network_reason_code, @reason, @fee, @amount_details, @approved, @authorization_method, @card, @cardholder, @merchant_amount, @merchant_currency, @merchant_data, @pending_request, @request_history, @transactions, @treasury, @verification_data, @wallet, @transaction, @authorization, @purchase_details, @_type, @arrival_date, @automatic, @method, @original_payout, @reversed_by, @source_type, @source_transaction, @failure_reason, @instructions_email, @next_action, @source_transfer_reversal, @transfer_reversal, @period_end, @period_start, @tax_deduction_account_number, @expected_availability_date, @amount_reversed, @destination_payment, @reversals, @reversed, @destination_payment_refund, @source_refund)
  end
end
