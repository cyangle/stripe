#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./application_fee"
require "./application_fee_account"
require "./application_fee_originating_transaction"
require "./balance_transaction"
require "./billing_details"
require "./charge"
require "./charge_application"
require "./charge_fraud_details"
require "./charge_invoice"
require "./charge_on_behalf_of"
require "./charge_outcome"
require "./charge_review"
require "./charge_source_transfer"
require "./charge_transfer_data"
require "./connect_collection_transfer"
require "./customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft"
require "./customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction"
require "./customer_balance_resource_cash_balance_transaction_resource_funded_transaction"
require "./customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction"
require "./customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance"
require "./customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction"
require "./customer_cash_balance_transaction"
require "./customer_cash_balance_transaction_customer"
require "./dispute"
require "./dispute_evidence_details"
require "./dispute_payment_method_details"
require "./fee_refund"
require "./fee_refund_balance_transaction"
require "./fee_refund_fee"
require "./issuing_authorization"
require "./issuing_authorization_fleet_data"
require "./issuing_authorization_fuel_data"
require "./issuing_authorization_merchant_data"
require "./issuing_authorization_pending_request"
require "./issuing_authorization_request"
require "./issuing_authorization_verification_data"
require "./issuing_dispute"
require "./issuing_dispute_evidence"
require "./issuing_dispute_transaction"
require "./issuing_transaction"
require "./issuing_transaction_amount_details"
require "./issuing_transaction_authorization"
require "./issuing_transaction_card"
require "./issuing_transaction_cardholder"
require "./issuing_transaction_dispute"
require "./issuing_transaction_network_data"
require "./issuing_transaction_purchase_details"
require "./issuing_transaction_token"
require "./issuing_transaction_treasury"
require "./level3"
require "./payout"
require "./payout_application_fee"
require "./payout_original_payout"
require "./payout_reversed_by"
require "./platform_earning_fee_source"
require "./radar_radar_options"
require "./refund"
require "./refund_charge"
require "./refund_destination_details"
require "./refund_failure_balance_transaction"
require "./refund_list"
require "./refund_next_action"
require "./refund_payment_intent"
require "./refund_source_transfer_reversal"
require "./refund_transfer_reversal"
require "./reserve_transaction"
require "./shipping"
require "./source"
require "./tax_deducted_at_source"
require "./topup"
require "./transfer"
require "./transfer_destination"
require "./transfer_destination_payment"
require "./transfer_reversal"
require "./transfer_reversal_destination_payment_refund"
require "./transfer_reversal_list"
require "./transfer_reversal_source_refund"
require "./transfer_reversal_transfer"
require "./transfer_source_transaction"

module Stripe
  class BalanceTransactionSource
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "account", type: Stripe::ApplicationFeeAccount?, default: nil, required: true, nullable: false, emit_null: false)]
    property account : Stripe::ApplicationFeeAccount? = nil

    # Amount, in cents (or local equivalent).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    # Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    @[JSON::Field(key: "amount_refunded", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount_refunded : Int64? = nil

    @[JSON::Field(key: "application", type: Stripe::ChargeApplication?, default: nil, required: true, nullable: true, emit_null: true)]
    property application : Stripe::ChargeApplication? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::FeeRefundBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property balance_transaction : Stripe::FeeRefundBalanceTransaction? = nil

    @[JSON::Field(key: "charge", type: Stripe::RefundCharge?, default: nil, required: true, nullable: true, emit_null: true)]
    property charge : Stripe::RefundCharge? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    @[JSON::Field(key: "fee_source", type: Stripe::PlatformEarningFeeSource?, default: nil, required: true, nullable: false, emit_null: false)]
    property fee_source : Stripe::PlatformEarningFeeSource? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [transfer_reversal]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("transfer_reversal")

    @[JSON::Field(key: "originating_transaction", type: Stripe::ApplicationFeeOriginatingTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property originating_transaction : Stripe::ApplicationFeeOriginatingTransaction? = nil

    # Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    @[JSON::Field(key: "refunded", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property refunded : Bool? = nil

    @[JSON::Field(key: "refunds", type: Stripe::RefundList?, default: nil, required: true, nullable: true, emit_null: true)]
    property refunds : Stripe::RefundList? = nil

    # Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).
    @[JSON::Field(key: "amount_captured", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount_captured : Int64? = nil

    @[JSON::Field(key: "application_fee", type: Stripe::PayoutApplicationFee?, default: nil, required: true, nullable: true, emit_null: true)]
    property application_fee : Stripe::PayoutApplicationFee? = nil

    # The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property application_fee_amount : Int64? = nil

    @[JSON::Field(key: "billing_details", type: Stripe::BillingDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    property billing_details : Stripe::BillingDetails? = nil

    # The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments.
    @[JSON::Field(key: "calculated_statement_descriptor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property calculated_statement_descriptor : String? = nil
    MAX_LENGTH_FOR_CALCULATED_STATEMENT_DESCRIPTOR = 5000

    # If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    @[JSON::Field(key: "captured", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property captured : Bool? = nil

    @[JSON::Field(key: "customer", type: Stripe::CustomerCashBalanceTransactionCustomer?, default: nil, required: true, nullable: false, emit_null: false)]
    property customer : Stripe::CustomerCashBalanceTransactionCustomer? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # Whether the charge has been disputed.
    @[JSON::Field(key: "disputed", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property disputed : Bool? = nil

    @[JSON::Field(key: "failure_balance_transaction", type: Stripe::RefundFailureBalanceTransaction?, default: nil, required: true, nullable: false, emit_null: false)]
    property failure_balance_transaction : Stripe::RefundFailureBalanceTransaction? = nil

    # Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
    @[JSON::Field(key: "failure_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property failure_code : String? = nil
    MAX_LENGTH_FOR_FAILURE_CODE = 5000

    # Message to user further explaining reason for top-up failure if available.
    @[JSON::Field(key: "failure_message", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property failure_message : String? = nil
    MAX_LENGTH_FOR_FAILURE_MESSAGE = 5000

    @[JSON::Field(key: "fraud_details", type: Stripe::ChargeFraudDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    property fraud_details : Stripe::ChargeFraudDetails? = nil

    @[JSON::Field(key: "invoice", type: Stripe::ChargeInvoice?, default: nil, required: true, nullable: true, emit_null: true)]
    property invoice : Stripe::ChargeInvoice? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "on_behalf_of", type: Stripe::ChargeOnBehalfOf?, default: nil, required: true, nullable: true, emit_null: true)]
    property on_behalf_of : Stripe::ChargeOnBehalfOf? = nil

    @[JSON::Field(key: "outcome", type: Stripe::ChargeOutcome?, default: nil, required: true, nullable: false, emit_null: false)]
    property outcome : Stripe::ChargeOutcome? = nil

    # `true` if the charge succeeded, or was successfully authorized for later capture.
    @[JSON::Field(key: "paid", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property paid : Bool? = nil

    @[JSON::Field(key: "payment_intent", type: Stripe::RefundPaymentIntent?, default: nil, required: true, nullable: true, emit_null: true)]
    property payment_intent : Stripe::RefundPaymentIntent? = nil

    # ID of the payment method used in this charge.
    @[JSON::Field(key: "payment_method", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property payment_method : String? = nil
    MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    @[JSON::Field(key: "payment_method_details", type: Stripe::DisputePaymentMethodDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    property payment_method_details : Stripe::DisputePaymentMethodDetails? = nil

    # This is the email address that the receipt for this charge was sent to.
    @[JSON::Field(key: "receipt_email", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property receipt_email : String? = nil
    MAX_LENGTH_FOR_RECEIPT_EMAIL = 5000

    # This is the transaction number that appears on email receipts sent for this refund.
    @[JSON::Field(key: "receipt_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property receipt_number : String? = nil
    MAX_LENGTH_FOR_RECEIPT_NUMBER = 5000

    # This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    @[JSON::Field(key: "receipt_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property receipt_url : String? = nil
    MAX_LENGTH_FOR_RECEIPT_URL = 5000

    @[JSON::Field(key: "review", type: Stripe::ChargeReview?, default: nil, required: true, nullable: true, emit_null: true)]
    property review : Stripe::ChargeReview? = nil

    @[JSON::Field(key: "shipping", type: Stripe::Shipping?, default: nil, required: true, nullable: false, emit_null: false)]
    property shipping : Stripe::Shipping? = nil

    @[JSON::Field(key: "source", type: Stripe::Source?, default: nil, required: true, nullable: false, emit_null: false)]
    property source : Stripe::Source? = nil

    @[JSON::Field(key: "source_transfer", type: Stripe::ChargeSourceTransfer?, default: nil, required: true, nullable: true, emit_null: true)]
    property source_transfer : Stripe::ChargeSourceTransfer? = nil

    # Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
    @[JSON::Field(key: "statement_descriptor_suffix", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property statement_descriptor_suffix : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX = 5000

    # The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [canceled, failed, pending, reversed, succeeded]."
    VALID_VALUES_FOR_STATUS  = String.static_array("canceled", "failed", "pending", "reversed", "succeeded")

    @[JSON::Field(key: "transfer", type: Stripe::TransferReversalTransfer?, default: nil, required: true, nullable: false, emit_null: false)]
    property transfer : Stripe::TransferReversalTransfer? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::ChargeTransferData?, default: nil, required: true, nullable: false, emit_null: false)]
    property transfer_data : Stripe::ChargeTransferData? = nil

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    @[JSON::Field(key: "transfer_group", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property transfer_group : String? = nil
    MAX_LENGTH_FOR_TRANSFER_GROUP = 5000

    @[JSON::Field(key: "destination", type: Stripe::TransferDestination?, default: nil, required: true, nullable: true, emit_null: true)]
    property destination : Stripe::TransferDestination? = nil

    # The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "ending_balance", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property ending_balance : Int64? = nil

    # The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.
    @[JSON::Field(key: "net_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property net_amount : Int64? = nil

    # The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [adjusted_for_overdraft, applied_to_payment, funded, funding_reversed, refunded_from_payment, return_canceled, return_initiated, transferred_to_balance, unapplied_from_payment, capture, refund, bank_account, card]."
    VALID_VALUES_FOR__TYPE  = String.static_array("adjusted_for_overdraft", "applied_to_payment", "funded", "funding_reversed", "refunded_from_payment", "return_canceled", "return_initiated", "transferred_to_balance", "unapplied_from_payment", "capture", "refund", "bank_account", "card")

    # List of balance transactions associated with the dispute.
    @[JSON::Field(key: "balance_transactions", type: Array(Stripe::BalanceTransaction)?, default: nil, required: true, nullable: true, emit_null: true)]
    property balance_transactions : Array(Stripe::BalanceTransaction)? = nil

    @[JSON::Field(key: "evidence", type: Stripe::IssuingDisputeEvidence?, default: nil, required: true, nullable: false, emit_null: false)]
    property evidence : Stripe::IssuingDisputeEvidence? = nil

    @[JSON::Field(key: "evidence_details", type: Stripe::DisputeEvidenceDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    property evidence_details : Stripe::DisputeEvidenceDetails? = nil

    # If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute.
    @[JSON::Field(key: "is_charge_refundable", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property is_charge_refundable : Bool? = nil

    # Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property reason : String? = nil
    ERROR_MESSAGE_FOR_REASON = "invalid value for \"reason\", must be one of [duplicate, expired_uncaptured_charge, fraudulent, requested_by_customer]."
    VALID_VALUES_FOR_REASON  = String.static_array("duplicate", "expired_uncaptured_charge", "fraudulent", "requested_by_customer")

    @[JSON::Field(key: "fee", type: Stripe::FeeRefundFee?, default: nil, required: true, nullable: false, emit_null: false)]
    property fee : Stripe::FeeRefundFee? = nil

    @[JSON::Field(key: "amount_details", type: Stripe::IssuingTransactionAmountDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount_details : Stripe::IssuingTransactionAmountDetails? = nil

    # Whether the authorization has been approved.
    @[JSON::Field(key: "approved", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property approved : Bool? = nil

    # How the card details were provided.
    @[JSON::Field(key: "authorization_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property authorization_method : String? = nil
    ERROR_MESSAGE_FOR_AUTHORIZATION_METHOD = "invalid value for \"authorization_method\", must be one of [chip, contactless, keyed_in, online, swipe]."
    VALID_VALUES_FOR_AUTHORIZATION_METHOD  = String.static_array("chip", "contactless", "keyed_in", "online", "swipe")

    @[JSON::Field(key: "card", type: Stripe::IssuingTransactionCard?, default: nil, required: true, nullable: false, emit_null: false)]
    property card : Stripe::IssuingTransactionCard? = nil

    @[JSON::Field(key: "cardholder", type: Stripe::IssuingTransactionCardholder?, default: nil, required: true, nullable: true, emit_null: true)]
    property cardholder : Stripe::IssuingTransactionCardholder? = nil

    @[JSON::Field(key: "fleet", type: Stripe::IssuingAuthorizationFleetData?, default: nil, required: true, nullable: false, emit_null: false)]
    property fleet : Stripe::IssuingAuthorizationFleetData? = nil

    @[JSON::Field(key: "fuel", type: Stripe::IssuingAuthorizationFuelData?, default: nil, required: true, nullable: false, emit_null: false)]
    property fuel : Stripe::IssuingAuthorizationFuelData? = nil

    # The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
    @[JSON::Field(key: "merchant_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_amount : Int64? = nil

    # The currency with which the merchant is taking payment.
    @[JSON::Field(key: "merchant_currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_currency : String? = nil

    @[JSON::Field(key: "merchant_data", type: Stripe::IssuingAuthorizationMerchantData?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_data : Stripe::IssuingAuthorizationMerchantData? = nil

    @[JSON::Field(key: "network_data", type: Stripe::IssuingTransactionNetworkData?, default: nil, required: true, nullable: false, emit_null: false)]
    property network_data : Stripe::IssuingTransactionNetworkData? = nil

    @[JSON::Field(key: "pending_request", type: Stripe::IssuingAuthorizationPendingRequest?, default: nil, required: true, nullable: false, emit_null: false)]
    property pending_request : Stripe::IssuingAuthorizationPendingRequest? = nil

    # History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
    @[JSON::Field(key: "request_history", type: Array(Stripe::IssuingAuthorizationRequest)?, default: nil, required: true, nullable: false, emit_null: false)]
    property request_history : Array(Stripe::IssuingAuthorizationRequest)? = nil

    # List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    @[JSON::Field(key: "transactions", type: Array(Stripe::IssuingTransaction)?, default: nil, required: true, nullable: false, emit_null: false)]
    property transactions : Array(Stripe::IssuingTransaction)? = nil

    @[JSON::Field(key: "verification_data", type: Stripe::IssuingAuthorizationVerificationData?, default: nil, required: true, nullable: false, emit_null: false)]
    property verification_data : Stripe::IssuingAuthorizationVerificationData? = nil

    # The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    @[JSON::Field(key: "wallet", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property wallet : String? = nil
    ERROR_MESSAGE_FOR_WALLET = "invalid value for \"wallet\", must be one of [apple_pay, google_pay, samsung_pay]."
    VALID_VALUES_FOR_WALLET  = String.static_array("apple_pay", "google_pay", "samsung_pay")

    @[JSON::Field(key: "transaction", type: Stripe::IssuingDisputeTransaction?, default: nil, required: true, nullable: false, emit_null: false)]
    property transaction : Stripe::IssuingDisputeTransaction? = nil

    @[JSON::Field(key: "authorization", type: Stripe::IssuingTransactionAuthorization?, default: nil, required: true, nullable: true, emit_null: true)]
    property authorization : Stripe::IssuingTransactionAuthorization? = nil

    @[JSON::Field(key: "dispute", type: Stripe::IssuingTransactionDispute?, default: nil, required: true, nullable: true, emit_null: true)]
    property dispute : Stripe::IssuingTransactionDispute? = nil

    # Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.
    @[JSON::Field(key: "arrival_date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property arrival_date : Int64? = nil

    # Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts).
    @[JSON::Field(key: "automatic", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property automatic : Bool? = nil

    # The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
    @[JSON::Field(key: "method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property method : String? = nil
    MAX_LENGTH_FOR_METHOD = 5000

    @[JSON::Field(key: "original_payout", type: Stripe::PayoutOriginalPayout?, default: nil, required: true, nullable: true, emit_null: true)]
    property original_payout : Stripe::PayoutOriginalPayout? = nil

    # If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.
    @[JSON::Field(key: "reconciliation_status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property reconciliation_status : String? = nil
    ERROR_MESSAGE_FOR_RECONCILIATION_STATUS = "invalid value for \"reconciliation_status\", must be one of [completed, in_progress, not_applicable]."
    VALID_VALUES_FOR_RECONCILIATION_STATUS  = String.static_array("completed", "in_progress", "not_applicable")

    @[JSON::Field(key: "reversed_by", type: Stripe::PayoutReversedBy?, default: nil, required: true, nullable: true, emit_null: true)]
    property reversed_by : Stripe::PayoutReversedBy? = nil

    # The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
    @[JSON::Field(key: "source_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property source_type : String? = nil
    MAX_LENGTH_FOR_SOURCE_TYPE = 5000

    @[JSON::Field(key: "source_transfer_reversal", type: Stripe::RefundSourceTransferReversal?, default: nil, required: true, nullable: true, emit_null: true)]
    property source_transfer_reversal : Stripe::RefundSourceTransferReversal? = nil

    @[JSON::Field(key: "transfer_reversal", type: Stripe::RefundTransferReversal?, default: nil, required: true, nullable: true, emit_null: true)]
    property transfer_reversal : Stripe::RefundTransferReversal? = nil

    # The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[JSON::Field(key: "period_end", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property period_end : Int64? = nil

    # The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[JSON::Field(key: "period_start", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property period_start : Int64? = nil

    # The TAN that was supplied to Stripe when TDS was assessed
    @[JSON::Field(key: "tax_deduction_account_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property tax_deduction_account_number : String? = nil
    MAX_LENGTH_FOR_TAX_DEDUCTION_ACCOUNT_NUMBER = 5000

    # Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
    @[JSON::Field(key: "expected_availability_date", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property expected_availability_date : Int64? = nil

    # Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
    @[JSON::Field(key: "amount_reversed", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount_reversed : Int64? = nil

    @[JSON::Field(key: "reversals", type: Stripe::TransferReversalList?, default: nil, required: true, nullable: false, emit_null: false)]
    property reversals : Stripe::TransferReversalList? = nil

    # Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
    @[JSON::Field(key: "reversed", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property reversed : Bool? = nil

    @[JSON::Field(key: "source_transaction", type: Stripe::TransferSourceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property source_transaction : Stripe::TransferSourceTransaction? = nil

    @[JSON::Field(key: "destination_payment_refund", type: Stripe::TransferReversalDestinationPaymentRefund?, default: nil, required: true, nullable: true, emit_null: true)]
    property destination_payment_refund : Stripe::TransferReversalDestinationPaymentRefund? = nil

    @[JSON::Field(key: "source_refund", type: Stripe::TransferReversalSourceRefund?, default: nil, required: true, nullable: true, emit_null: true)]
    property source_refund : Stripe::TransferReversalSourceRefund? = nil

    # End of Required Properties

    # Optional Properties

    # Authorization code on the charge.
    @[JSON::Field(key: "authorization_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property authorization_code : String? = nil
    MAX_LENGTH_FOR_AUTHORIZATION_CODE = 5000

    @[JSON::Field(key: "level3", type: Stripe::Level3?, default: nil, required: false, nullable: false, emit_null: false)]
    property level3 : Stripe::Level3? = nil

    @[JSON::Field(key: "radar_options", type: Stripe::RadarRadarOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    property radar_options : Stripe::RadarRadarOptions? = nil

    @[JSON::Field(key: "adjusted_for_overdraft", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft?, default: nil, required: false, nullable: false, emit_null: false)]
    property adjusted_for_overdraft : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft? = nil

    @[JSON::Field(key: "applied_to_payment", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property applied_to_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction? = nil

    @[JSON::Field(key: "funded", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property funded : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction? = nil

    @[JSON::Field(key: "refunded_from_payment", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property refunded_from_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction? = nil

    @[JSON::Field(key: "transferred_to_balance", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    property transferred_to_balance : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance? = nil

    @[JSON::Field(key: "unapplied_from_payment", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property unapplied_from_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction? = nil

    # Network-dependent reason code for the dispute.
    @[JSON::Field(key: "network_reason_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: network_reason_code.nil? && !network_reason_code_present?)]
    property network_reason_code : String? = nil
    MAX_LENGTH_FOR_NETWORK_REASON_CODE = 5000

    @[JSON::Field(ignore: true)]
    property? network_reason_code_present : Bool = false

    @[JSON::Field(key: "token", type: Stripe::IssuingTransactionToken?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: token.nil? && !token_present?)]
    property token : Stripe::IssuingTransactionToken? = nil

    @[JSON::Field(ignore: true)]
    property? token_present : Bool = false

    @[JSON::Field(key: "treasury", type: Stripe::IssuingTransactionTreasury?, default: nil, required: false, nullable: false, emit_null: false)]
    property treasury : Stripe::IssuingTransactionTreasury? = nil

    # The enum that describes the dispute loss outcome. If the dispute is not lost, this field will be absent. New enum values may be added in the future, so be sure to handle unknown values.
    @[JSON::Field(key: "loss_reason", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property loss_reason : String? = nil
    ERROR_MESSAGE_FOR_LOSS_REASON = "invalid value for \"loss_reason\", must be one of [cardholder_authentication_issuer_liability, eci5_token_transaction_with_tavv, excess_disputes_in_timeframe, has_not_met_the_minimum_dispute_amount_requirements, invalid_duplicate_dispute, invalid_incorrect_amount_dispute, invalid_no_authorization, invalid_use_of_disputes, merchandise_delivered_or_shipped, merchandise_or_service_as_described, not_cancelled, other, refund_issued, submitted_beyond_allowable_time_limit, transaction_3ds_required, transaction_approved_after_prior_fraud_dispute, transaction_authorized, transaction_electronically_read, transaction_qualifies_for_visa_easy_payment_service, transaction_unattended]."
    VALID_VALUES_FOR_LOSS_REASON  = String.static_array("cardholder_authentication_issuer_liability", "eci5_token_transaction_with_tavv", "excess_disputes_in_timeframe", "has_not_met_the_minimum_dispute_amount_requirements", "invalid_duplicate_dispute", "invalid_incorrect_amount_dispute", "invalid_no_authorization", "invalid_use_of_disputes", "merchandise_delivered_or_shipped", "merchandise_or_service_as_described", "not_cancelled", "other", "refund_issued", "submitted_beyond_allowable_time_limit", "transaction_3ds_required", "transaction_approved_after_prior_fraud_dispute", "transaction_authorized", "transaction_electronically_read", "transaction_qualifies_for_visa_easy_payment_service", "transaction_unattended")

    @[JSON::Field(key: "purchase_details", type: Stripe::IssuingTransactionPurchaseDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    property purchase_details : Stripe::IssuingTransactionPurchaseDetails? = nil

    @[JSON::Field(key: "destination_details", type: Stripe::RefundDestinationDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    property destination_details : Stripe::RefundDestinationDetails? = nil

    # Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
    @[JSON::Field(key: "failure_reason", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property failure_reason : String? = nil
    MAX_LENGTH_FOR_FAILURE_REASON = 5000

    # For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
    @[JSON::Field(key: "instructions_email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property instructions_email : String? = nil
    MAX_LENGTH_FOR_INSTRUCTIONS_EMAIL = 5000

    @[JSON::Field(key: "next_action", type: Stripe::RefundNextAction?, default: nil, required: false, nullable: false, emit_null: false)]
    property next_action : Stripe::RefundNextAction? = nil

    @[JSON::Field(key: "destination_payment", type: Stripe::TransferDestinationPayment?, default: nil, required: false, nullable: false, emit_null: false)]
    property destination_payment : Stripe::TransferDestinationPayment? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::ApplicationFee,
        Stripe::Charge,
        Stripe::ConnectCollectionTransfer,
        Stripe::CustomerCashBalanceTransaction,
        Stripe::Dispute,
        Stripe::FeeRefund,
        Stripe::IssuingAuthorization,
        Stripe::IssuingDispute,
        Stripe::IssuingTransaction,
        Stripe::Payout,
        Stripe::Refund,
        Stripe::ReserveTransaction,
        Stripe::TaxDeductedAtSource,
        Stripe::Topup,
        Stripe::Transfer,
        Stripe::TransferReversal,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account : Stripe::ApplicationFeeAccount? = nil,
      @amount : Int64? = nil,
      @amount_refunded : Int64? = nil,
      @application : Stripe::ChargeApplication? = nil,
      @balance_transaction : Stripe::FeeRefundBalanceTransaction? = nil,
      @charge : Stripe::RefundCharge? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @fee_source : Stripe::PlatformEarningFeeSource? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @originating_transaction : Stripe::ApplicationFeeOriginatingTransaction? = nil,
      @refunded : Bool? = nil,
      @refunds : Stripe::RefundList? = nil,
      @amount_captured : Int64? = nil,
      @application_fee : Stripe::PayoutApplicationFee? = nil,
      @application_fee_amount : Int64? = nil,
      @billing_details : Stripe::BillingDetails? = nil,
      @calculated_statement_descriptor : String? = nil,
      @captured : Bool? = nil,
      @customer : Stripe::CustomerCashBalanceTransactionCustomer? = nil,
      @description : String? = nil,
      @disputed : Bool? = nil,
      @failure_balance_transaction : Stripe::RefundFailureBalanceTransaction? = nil,
      @failure_code : String? = nil,
      @failure_message : String? = nil,
      @fraud_details : Stripe::ChargeFraudDetails? = nil,
      @invoice : Stripe::ChargeInvoice? = nil,
      @metadata : Hash(String, String)? = nil,
      @on_behalf_of : Stripe::ChargeOnBehalfOf? = nil,
      @outcome : Stripe::ChargeOutcome? = nil,
      @paid : Bool? = nil,
      @payment_intent : Stripe::RefundPaymentIntent? = nil,
      @payment_method : String? = nil,
      @payment_method_details : Stripe::DisputePaymentMethodDetails? = nil,
      @receipt_email : String? = nil,
      @receipt_number : String? = nil,
      @receipt_url : String? = nil,
      @review : Stripe::ChargeReview? = nil,
      @shipping : Stripe::Shipping? = nil,
      @source : Stripe::Source? = nil,
      @source_transfer : Stripe::ChargeSourceTransfer? = nil,
      @statement_descriptor : String? = nil,
      @statement_descriptor_suffix : String? = nil,
      @status : String? = nil,
      @transfer : Stripe::TransferReversalTransfer? = nil,
      @transfer_data : Stripe::ChargeTransferData? = nil,
      @transfer_group : String? = nil,
      @destination : Stripe::TransferDestination? = nil,
      @ending_balance : Int64? = nil,
      @net_amount : Int64? = nil,
      @_type : String? = nil,
      @balance_transactions : Array(Stripe::BalanceTransaction)? = nil,
      @evidence : Stripe::IssuingDisputeEvidence? = nil,
      @evidence_details : Stripe::DisputeEvidenceDetails? = nil,
      @is_charge_refundable : Bool? = nil,
      @reason : String? = nil,
      @fee : Stripe::FeeRefundFee? = nil,
      @amount_details : Stripe::IssuingTransactionAmountDetails? = nil,
      @approved : Bool? = nil,
      @authorization_method : String? = nil,
      @card : Stripe::IssuingTransactionCard? = nil,
      @cardholder : Stripe::IssuingTransactionCardholder? = nil,
      @fleet : Stripe::IssuingAuthorizationFleetData? = nil,
      @fuel : Stripe::IssuingAuthorizationFuelData? = nil,
      @merchant_amount : Int64? = nil,
      @merchant_currency : String? = nil,
      @merchant_data : Stripe::IssuingAuthorizationMerchantData? = nil,
      @network_data : Stripe::IssuingTransactionNetworkData? = nil,
      @pending_request : Stripe::IssuingAuthorizationPendingRequest? = nil,
      @request_history : Array(Stripe::IssuingAuthorizationRequest)? = nil,
      @transactions : Array(Stripe::IssuingTransaction)? = nil,
      @verification_data : Stripe::IssuingAuthorizationVerificationData? = nil,
      @wallet : String? = nil,
      @transaction : Stripe::IssuingDisputeTransaction? = nil,
      @authorization : Stripe::IssuingTransactionAuthorization? = nil,
      @dispute : Stripe::IssuingTransactionDispute? = nil,
      @arrival_date : Int64? = nil,
      @automatic : Bool? = nil,
      @method : String? = nil,
      @original_payout : Stripe::PayoutOriginalPayout? = nil,
      @reconciliation_status : String? = nil,
      @reversed_by : Stripe::PayoutReversedBy? = nil,
      @source_type : String? = nil,
      @source_transfer_reversal : Stripe::RefundSourceTransferReversal? = nil,
      @transfer_reversal : Stripe::RefundTransferReversal? = nil,
      @period_end : Int64? = nil,
      @period_start : Int64? = nil,
      @tax_deduction_account_number : String? = nil,
      @expected_availability_date : Int64? = nil,
      @amount_reversed : Int64? = nil,
      @reversals : Stripe::TransferReversalList? = nil,
      @reversed : Bool? = nil,
      @source_transaction : Stripe::TransferSourceTransaction? = nil,
      @destination_payment_refund : Stripe::TransferReversalDestinationPaymentRefund? = nil,
      @source_refund : Stripe::TransferReversalSourceRefund? = nil,
      # Optional properties
      @authorization_code : String? = nil,
      @level3 : Stripe::Level3? = nil,
      @radar_options : Stripe::RadarRadarOptions? = nil,
      @adjusted_for_overdraft : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft? = nil,
      @applied_to_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction? = nil,
      @funded : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction? = nil,
      @refunded_from_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction? = nil,
      @transferred_to_balance : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance? = nil,
      @unapplied_from_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction? = nil,
      @network_reason_code : String? = nil,
      @token : Stripe::IssuingTransactionToken? = nil,
      @treasury : Stripe::IssuingTransactionTreasury? = nil,
      @loss_reason : String? = nil,
      @purchase_details : Stripe::IssuingTransactionPurchaseDetails? = nil,
      @destination_details : Stripe::RefundDestinationDetails? = nil,
      @failure_reason : String? = nil,
      @instructions_email : String? = nil,
      @next_action : Stripe::RefundNextAction? = nil,
      @destination_payment : Stripe::TransferDestinationPayment? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @amount, @amount_refunded, @application, @balance_transaction, @charge, @created, @currency, @fee_source, @id, @livemode, @object, @originating_transaction, @refunded, @refunds, @amount_captured, @application_fee, @application_fee_amount, @billing_details, @calculated_statement_descriptor, @captured, @customer, @description, @disputed, @failure_balance_transaction, @failure_code, @failure_message, @fraud_details, @invoice, @metadata, @on_behalf_of, @outcome, @paid, @payment_intent, @payment_method, @payment_method_details, @receipt_email, @receipt_number, @receipt_url, @review, @shipping, @source, @source_transfer, @statement_descriptor, @statement_descriptor_suffix, @status, @transfer, @transfer_data, @transfer_group, @destination, @ending_balance, @net_amount, @_type, @balance_transactions, @evidence, @evidence_details, @is_charge_refundable, @reason, @fee, @amount_details, @approved, @authorization_method, @card, @cardholder, @fleet, @fuel, @merchant_amount, @merchant_currency, @merchant_data, @network_data, @pending_request, @request_history, @transactions, @verification_data, @wallet, @transaction, @authorization, @dispute, @arrival_date, @automatic, @method, @original_payout, @reconciliation_status, @reversed_by, @source_type, @source_transfer_reversal, @transfer_reversal, @period_end, @period_start, @tax_deduction_account_number, @expected_availability_date, @amount_reversed, @reversals, @reversed, @source_transaction, @destination_payment_refund, @source_refund, @authorization_code, @level3, @radar_options, @adjusted_for_overdraft, @applied_to_payment, @funded, @refunded_from_payment, @transferred_to_balance, @unapplied_from_payment, @network_reason_code, @network_reason_code_present, @token, @token_present, @treasury, @loss_reason, @purchase_details, @destination_details, @failure_reason, @instructions_email, @next_action, @destination_payment)
  end
end
