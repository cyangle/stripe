#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class TaxDeductedAtSource
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [tax_deducted_at_source]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("tax_deducted_at_source")

    # The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[JSON::Field(key: "period_end", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter period_end : Int64? = nil

    # The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[JSON::Field(key: "period_start", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter period_start : Int64? = nil

    # The TAN that was supplied to Stripe when TDS was assessed
    @[JSON::Field(key: "tax_deduction_account_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_deduction_account_number : String? = nil
    MAX_LENGTH_FOR_TAX_DEDUCTION_ACCOUNT_NUMBER = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @object : String? = nil,
      @period_end : Int64? = nil,
      @period_start : Int64? = nil,
      @tax_deduction_account_number : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"period_end\" is required and cannot be null") if @period_end.nil?

      invalid_properties.push("\"period_start\" is required and cannot be null") if @period_start.nil?

      invalid_properties.push("\"tax_deduction_account_number\" is required and cannot be null") if @tax_deduction_account_number.nil?

      unless (_tax_deduction_account_number = @tax_deduction_account_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("tax_deduction_account_number", _tax_deduction_account_number.to_s.size, MAX_LENGTH_FOR_TAX_DEDUCTION_ACCOUNT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @period_end.nil?

      return false if @period_start.nil?

      return false if @tax_deduction_account_number.nil?
      unless (_tax_deduction_account_number = @tax_deduction_account_number).nil?
        return false if _tax_deduction_account_number.to_s.size > MAX_LENGTH_FOR_TAX_DEDUCTION_ACCOUNT_NUMBER
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] period_end Object to be assigned
    def period_end=(period_end : Int64?)
      if period_end.nil?
        raise ArgumentError.new("\"period_end\" is required and cannot be null")
      end
      _period_end = period_end.not_nil!
      @period_end = _period_end
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] period_start Object to be assigned
    def period_start=(period_start : Int64?)
      if period_start.nil?
        raise ArgumentError.new("\"period_start\" is required and cannot be null")
      end
      _period_start = period_start.not_nil!
      @period_start = _period_start
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_deduction_account_number Object to be assigned
    def tax_deduction_account_number=(tax_deduction_account_number : String?)
      if tax_deduction_account_number.nil?
        raise ArgumentError.new("\"tax_deduction_account_number\" is required and cannot be null")
      end
      _tax_deduction_account_number = tax_deduction_account_number.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("tax_deduction_account_number", _tax_deduction_account_number.to_s.size, MAX_LENGTH_FOR_TAX_DEDUCTION_ACCOUNT_NUMBER)
      @tax_deduction_account_number = _tax_deduction_account_number
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @object, @period_end, @period_start, @tax_deduction_account_number)
  end
end
