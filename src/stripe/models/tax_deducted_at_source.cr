#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TaxDeductedAtSource
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["tax_deducted_at_source"])

    # The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[JSON::Field(key: "period_end", type: Int64)]
    property period_end : Int64

    # The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    @[JSON::Field(key: "period_start", type: Int64)]
    property period_start : Int64

    # The TAN that was supplied to Stripe when TDS was assessed
    @[JSON::Field(key: "tax_deduction_account_number", type: String)]
    getter tax_deduction_account_number : String

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String,
      @object : String,
      @period_end : Int64,
      @period_start : Int64,
      @tax_deduction_account_number : String
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @tax_deduction_account_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"tax_deduction_account_number\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @tax_deduction_account_number.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_deduction_account_number Value to be assigned
    def tax_deduction_account_number=(tax_deduction_account_number)
      if tax_deduction_account_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tax_deduction_account_number\", the character length must be smaller than or equal to 5000.")
      end

      @tax_deduction_account_number = tax_deduction_account_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @object, @period_end, @period_start, @tax_deduction_account_number)
  end
end
