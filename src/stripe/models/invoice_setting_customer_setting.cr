#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class InvoiceSettingCustomerSetting
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Default custom fields to be displayed on invoices for this customer.
    @[JSON::Field(key: "custom_fields", type: Array(Stripe::InvoiceSettingCustomField)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: custom_fields.nil? && !custom_fields_present?)]
    getter custom_fields : Array(Stripe::InvoiceSettingCustomField)? = nil

    @[JSON::Field(ignore: true)]
    property? custom_fields_present : Bool = false

    @[JSON::Field(key: "default_payment_method", type: Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    getter default_payment_method : Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod? = nil

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    # Default footer to be displayed on invoices for this customer.
    @[JSON::Field(key: "footer", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: footer.nil? && !footer_present?)]
    getter footer : String? = nil
    MAX_LENGTH_FOR_FOOTER = 5000

    @[JSON::Field(ignore: true)]
    property? footer_present : Bool = false

    @[JSON::Field(key: "rendering_options", type: Stripe::InvoiceSettingCustomerSettingRenderingOptions?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: rendering_options.nil? && !rendering_options_present?)]
    getter rendering_options : Stripe::InvoiceSettingCustomerSettingRenderingOptions? = nil

    @[JSON::Field(ignore: true)]
    property? rendering_options_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @custom_fields : Array(Stripe::InvoiceSettingCustomField)? = nil,
      @default_payment_method : Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod? = nil,
      @footer : String? = nil,
      @rendering_options : Stripe::InvoiceSettingCustomerSettingRenderingOptions? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_custom_fields = @custom_fields).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "custom_fields", container: _custom_fields)) if _custom_fields.is_a?(Array)
      end
      unless (_default_payment_method = @default_payment_method).nil?
        invalid_properties.concat(_default_payment_method.list_invalid_properties_for("default_payment_method")) if _default_payment_method.is_a?(OpenApi::Validatable)
      end
      unless (_footer = @footer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("footer", _footer.to_s.size, MAX_LENGTH_FOR_FOOTER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_rendering_options = @rendering_options).nil?
        invalid_properties.concat(_rendering_options.list_invalid_properties_for("rendering_options")) if _rendering_options.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_custom_fields = @custom_fields).nil?
        return false if _custom_fields.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _custom_fields)
      end

      unless (_default_payment_method = @default_payment_method).nil?
        return false if _default_payment_method.is_a?(OpenApi::Validatable) && !_default_payment_method.valid?
      end

      unless (_footer = @footer).nil?
        return false if _footer.to_s.size > MAX_LENGTH_FOR_FOOTER
      end

      unless (_rendering_options = @rendering_options).nil?
        return false if _rendering_options.is_a?(OpenApi::Validatable) && !_rendering_options.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(new_value : Array(Stripe::InvoiceSettingCustomField)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @custom_fields = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(new_value : Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @default_payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] footer Object to be assigned
    def footer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("footer", new_value.to_s.size, MAX_LENGTH_FOR_FOOTER)
      end

      @footer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rendering_options Object to be assigned
    def rendering_options=(new_value : Stripe::InvoiceSettingCustomerSettingRenderingOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @rendering_options = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@custom_fields, @custom_fields_present, @default_payment_method, @default_payment_method_present, @footer, @footer_present, @rendering_options, @rendering_options_present)
  end
end
