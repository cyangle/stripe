#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class InvoiceSettingCustomerSetting
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # Default custom fields to be displayed on invoices for this customer.
    @[JSON::Field(key: "custom_fields", type: Array(Stripe::InvoiceSettingCustomField)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: custom_fields.nil? && !custom_fields_present?)]
    getter custom_fields : Array(Stripe::InvoiceSettingCustomField)? = nil

    @[JSON::Field(ignore: true)]
    property? custom_fields_present : Bool = false

    @[JSON::Field(key: "default_payment_method", type: Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    getter default_payment_method : Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod? = nil

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    # Default footer to be displayed on invoices for this customer.
    @[JSON::Field(key: "footer", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: footer.nil? && !footer_present?)]
    getter footer : String? = nil

    @[JSON::Field(ignore: true)]
    property? footer_present : Bool = false

    @[JSON::Field(key: "rendering_options", type: Stripe::InvoiceSettingCustomerSettingRenderingOptions?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: rendering_options.nil? && !rendering_options_present?)]
    getter rendering_options : Stripe::InvoiceSettingCustomerSettingRenderingOptions? = nil

    @[JSON::Field(ignore: true)]
    property? rendering_options_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @custom_fields : Array(Stripe::InvoiceSettingCustomField)? = nil,
      @default_payment_method : Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod? = nil,
      @footer : String? = nil,
      @rendering_options : Stripe::InvoiceSettingCustomerSettingRenderingOptions? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # Container custom_fields array has values of Stripe::InvoiceSettingCustomField
      # This is a model default_payment_method : Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod?
      if _footer = @footer
        if _footer.to_s.size > 5000
          invalid_properties.push("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model rendering_options : Stripe::InvoiceSettingCustomerSettingRenderingOptions?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _footer = @footer
        return false if _footer.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(custom_fields : Array(Stripe::InvoiceSettingCustomField)?)
      if custom_fields.nil?
        return @custom_fields = nil
      end
      @custom_fields = custom_fields
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(default_payment_method : Stripe::InvoiceSettingCustomerSettingDefaultPaymentMethod?)
      if default_payment_method.nil?
        return @default_payment_method = nil
      end
      @default_payment_method = default_payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] footer Object to be assigned
    def footer=(footer : String?)
      if footer.nil?
        return @footer = nil
      end
      _footer = footer.not_nil!
      if _footer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
      end

      @footer = footer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rendering_options Object to be assigned
    def rendering_options=(rendering_options : Stripe::InvoiceSettingCustomerSettingRenderingOptions?)
      if rendering_options.nil?
        return @rendering_options = nil
      end
      @rendering_options = rendering_options
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@custom_fields, @custom_fields_present, @default_payment_method, @default_payment_method_present, @footer, @footer_present, @rendering_options, @rendering_options_present)
  end
end
