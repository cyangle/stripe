#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class InvoiceSettingCustomerSetting
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Default custom fields to be displayed on invoices for this customer.
    @[JSON::Field(key: "custom_fields", type: Array(InvoiceSettingCustomField)?, presence: true, ignore_serialize: custom_fields.nil? && !custom_fields_present?)]
    property custom_fields : Array(InvoiceSettingCustomField)?

    @[JSON::Field(ignore: true)]
    property? custom_fields_present : Bool = false

    @[JSON::Field(key: "default_payment_method", type: InvoiceSettingCustomerSettingDefaultPaymentMethod?, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    property default_payment_method : InvoiceSettingCustomerSettingDefaultPaymentMethod?

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    # Default footer to be displayed on invoices for this customer.
    @[JSON::Field(key: "footer", type: String?, presence: true, ignore_serialize: footer.nil? && !footer_present?)]
    getter footer : String?

    @[JSON::Field(ignore: true)]
    property? footer_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @custom_fields : Array(InvoiceSettingCustomField)?, @default_payment_method : InvoiceSettingCustomerSettingDefaultPaymentMethod?, @footer : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @footer.to_s.size > 5000
        invalid_properties.push("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @footer.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] footer Value to be assigned
    def footer=(footer)
      if footer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
      end

      @footer = footer
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        custom_fields == o.custom_fields &&
        default_payment_method == o.default_payment_method &&
        footer == o.footer
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@custom_fields, @default_payment_method, @footer)
  end
end
