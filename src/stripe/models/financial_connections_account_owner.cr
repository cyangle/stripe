#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class FinancialConnectionsAccountOwner
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The full name of the owner.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [financial_connections.account_owner]."
    VALID_VALUES_FOR_OBJECT  = StaticArray["financial_connections.account_owner"]

    # The ownership object that this owner belongs to.
    @[JSON::Field(key: "ownership", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter ownership : String? = nil
    MAX_LENGTH_FOR_OWNERSHIP = 5000

    # Optional properties

    # The email address of the owner.
    @[JSON::Field(key: "email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: email.nil? && !email_present?)]
    getter email : String? = nil
    MAX_LENGTH_FOR_EMAIL = 5000

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    # The raw phone number of the owner.
    @[JSON::Field(key: "phone", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: phone.nil? && !phone_present?)]
    getter phone : String? = nil
    MAX_LENGTH_FOR_PHONE = 5000

    @[JSON::Field(ignore: true)]
    property? phone_present : Bool = false

    # The raw physical address of the owner.
    @[JSON::Field(key: "raw_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: raw_address.nil? && !raw_address_present?)]
    getter raw_address : String? = nil
    MAX_LENGTH_FOR_RAW_ADDRESS = 5000

    @[JSON::Field(ignore: true)]
    property? raw_address_present : Bool = false

    # The timestamp of the refresh that updated this owner.
    @[JSON::Field(key: "refreshed_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refreshed_at.nil? && !refreshed_at_present?)]
    getter refreshed_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? refreshed_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @ownership : String? = nil,
      # Optional properties
      @email : String? = nil,
      @phone : String? = nil,
      @raw_address : String? = nil,
      @refreshed_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      if _id = @id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      if _name = @name
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      if _object = @object
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"ownership\" is required and cannot be null") if @ownership.nil?

      if _ownership = @ownership
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("ownership", _ownership.to_s.size, MAX_LENGTH_FOR_OWNERSHIP)
          invalid_properties.push(max_length_error)
        end
      end
      if _email = @email
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("email", _email.to_s.size, MAX_LENGTH_FOR_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      if _phone = @phone
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("phone", _phone.to_s.size, MAX_LENGTH_FOR_PHONE)
          invalid_properties.push(max_length_error)
        end
      end
      if _raw_address = @raw_address
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("raw_address", _raw_address.to_s.size, MAX_LENGTH_FOR_RAW_ADDRESS)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @name.nil?
      if _name = @name
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      return false if @object.nil?
      if _object = @object
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @ownership.nil?
      if _ownership = @ownership
        return false if _ownership.to_s.size > MAX_LENGTH_FOR_OWNERSHIP
      end

      if _email = @email
        return false if _email.to_s.size > MAX_LENGTH_FOR_EMAIL
      end

      if _phone = @phone
        return false if _phone.to_s.size > MAX_LENGTH_FOR_PHONE
      end

      if _raw_address = @raw_address
        return false if _raw_address.to_s.size > MAX_LENGTH_FOR_RAW_ADDRESS
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        raise ArgumentError.new("\"name\" is required and cannot be null")
      end
      _name = name.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
      @name = _name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ownership Object to be assigned
    def ownership=(ownership : String?)
      if ownership.nil?
        raise ArgumentError.new("\"ownership\" is required and cannot be null")
      end
      _ownership = ownership.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("ownership", _ownership.to_s.size, MAX_LENGTH_FOR_OWNERSHIP)
      @ownership = _ownership
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(email : String?)
      if email.nil?
        return @email = nil
      end
      _email = email.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("email", _email.to_s.size, MAX_LENGTH_FOR_EMAIL)
      @email = _email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone Object to be assigned
    def phone=(phone : String?)
      if phone.nil?
        return @phone = nil
      end
      _phone = phone.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("phone", _phone.to_s.size, MAX_LENGTH_FOR_PHONE)
      @phone = _phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] raw_address Object to be assigned
    def raw_address=(raw_address : String?)
      if raw_address.nil?
        return @raw_address = nil
      end
      _raw_address = raw_address.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("raw_address", _raw_address.to_s.size, MAX_LENGTH_FOR_RAW_ADDRESS)
      @raw_address = _raw_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refreshed_at Object to be assigned
    def refreshed_at=(refreshed_at : Int64?)
      if refreshed_at.nil?
        return @refreshed_at = nil
      end
      _refreshed_at = refreshed_at.not_nil!
      @refreshed_at = _refreshed_at
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @name, @object, @ownership, @email, @email_present, @phone, @phone_present, @raw_address, @raw_address_present, @refreshed_at, @refreshed_at_present)
  end
end
