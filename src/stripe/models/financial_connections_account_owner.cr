#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FinancialConnectionsAccountOwner
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # The full name of the owner.
    @[JSON::Field(key: "name", type: String)]
    getter name : String

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["financial_connections.account_owner"])

    # The ownership object that this owner belongs to.
    @[JSON::Field(key: "ownership", type: String)]
    getter ownership : String

    # Optional properties

    # The email address of the owner.
    @[JSON::Field(key: "email", type: String?, presence: true, ignore_serialize: email.nil? && !email_present?)]
    getter email : String?

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    # The raw phone number of the owner.
    @[JSON::Field(key: "phone", type: String?, presence: true, ignore_serialize: phone.nil? && !phone_present?)]
    getter phone : String?

    @[JSON::Field(ignore: true)]
    property? phone_present : Bool = false

    # The raw physical address of the owner.
    @[JSON::Field(key: "raw_address", type: String?, presence: true, ignore_serialize: raw_address.nil? && !raw_address_present?)]
    getter raw_address : String?

    @[JSON::Field(ignore: true)]
    property? raw_address_present : Bool = false

    # The timestamp of the refresh that updated this owner.
    @[JSON::Field(key: "refreshed_at", type: Int64?, presence: true, ignore_serialize: refreshed_at.nil? && !refreshed_at_present?)]
    property refreshed_at : Int64?

    @[JSON::Field(ignore: true)]
    property? refreshed_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @id : String, 
      @name : String, 
      @object : String, 
      @ownership : String, 
      # Optional properties
      @email : String? = nil, 
      @phone : String? = nil, 
      @raw_address : String? = nil, 
      @refreshed_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @ownership.to_s.size > 5000
        invalid_properties.push("invalid value for \"ownership\", the character length must be smaller than or equal to 5000.")
      end

      if !@email.nil? && @email.to_s.size > 5000
        invalid_properties.push("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      if !@phone.nil? && @phone.to_s.size > 5000
        invalid_properties.push("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      if !@raw_address.nil? && @raw_address.to_s.size > 5000
        invalid_properties.push("invalid value for \"raw_address\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false if @name.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @ownership.to_s.size > 5000
      return false if !@email.nil? && @email.to_s.size > 5000
      return false if !@phone.nil? && @phone.to_s.size > 5000
      return false if !@raw_address.nil? && @raw_address.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] ownership Value to be assigned
    def ownership=(ownership)
      if ownership.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ownership\", the character length must be smaller than or equal to 5000.")
      end

      @ownership = ownership
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] raw_address Value to be assigned
    def raw_address=(raw_address)
      if !raw_address.nil? && raw_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"raw_address\", the character length must be smaller than or equal to 5000.")
      end

      @raw_address = raw_address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @name, @object, @ownership, @email, @phone, @raw_address, @refreshed_at)
  end
end
