#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./treasury_outbound_payment_destination_payment_method_details"
require "./treasury_outbound_payment_end_user_details"
require "./treasury_outbound_payment_returned_details"
require "./treasury_outbound_payment_tracking_details"
require "./treasury_outbound_payment_transaction"
require "./treasury_outbound_payments_resource_outbound_payment_resource_status_transitions"

module Stripe
  # Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).  Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.  Related guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)
  class TreasuryOutboundPayment
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount (in cents) transferred.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Returns `true` if the object can be canceled, and `false` otherwise.
    @[JSON::Field(key: "cancelable", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cancelable : Bool? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # ID of the [customer](https://stripe.com/docs/api/customers) to whom an OutboundPayment is sent.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer : String? = nil
    MAX_LENGTH_FOR_CUSTOMER = 5000

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.
    @[JSON::Field(key: "destination_payment_method", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter destination_payment_method : String? = nil
    MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD = 5000

    @[JSON::Field(key: "destination_payment_method_details", type: Stripe::TreasuryOutboundPaymentDestinationPaymentMethodDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter destination_payment_method_details : Stripe::TreasuryOutboundPaymentDestinationPaymentMethodDetails? = nil

    @[JSON::Field(key: "end_user_details", type: Stripe::TreasuryOutboundPaymentEndUserDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter end_user_details : Stripe::TreasuryOutboundPaymentEndUserDetails? = nil

    # The date when funds are expected to arrive in the destination account.
    @[JSON::Field(key: "expected_arrival_date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expected_arrival_date : Int64? = nil

    # The FinancialAccount that funds were pulled from.
    @[JSON::Field(key: "financial_account", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter financial_account : String? = nil
    MAX_LENGTH_FOR_FINANCIAL_ACCOUNT = 5000

    # A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
    @[JSON::Field(key: "hosted_regulatory_receipt_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter hosted_regulatory_receipt_url : String? = nil
    MAX_LENGTH_FOR_HOSTED_REGULATORY_RECEIPT_URL = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [treasury.outbound_payment]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("treasury.outbound_payment")

    @[JSON::Field(key: "returned_details", type: Stripe::TreasuryOutboundPaymentReturnedDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter returned_details : Stripe::TreasuryOutboundPaymentReturnedDetails? = nil

    # The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been \"confirmed\" and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [canceled, failed, posted, processing, returned]."
    VALID_VALUES_FOR_STATUS  = String.static_array("canceled", "failed", "posted", "processing", "returned")

    @[JSON::Field(key: "status_transitions", type: Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status_transitions : Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions? = nil

    @[JSON::Field(key: "tracking_details", type: Stripe::TreasuryOutboundPaymentTrackingDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter tracking_details : Stripe::TreasuryOutboundPaymentTrackingDetails? = nil

    @[JSON::Field(key: "transaction", type: Stripe::TreasuryOutboundPaymentTransaction?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction : Stripe::TreasuryOutboundPaymentTransaction? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @cancelable : Bool? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @description : String? = nil,
      @destination_payment_method : String? = nil,
      @destination_payment_method_details : Stripe::TreasuryOutboundPaymentDestinationPaymentMethodDetails? = nil,
      @end_user_details : Stripe::TreasuryOutboundPaymentEndUserDetails? = nil,
      @expected_arrival_date : Int64? = nil,
      @financial_account : String? = nil,
      @hosted_regulatory_receipt_url : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @returned_details : Stripe::TreasuryOutboundPaymentReturnedDetails? = nil,
      @statement_descriptor : String? = nil,
      @status : String? = nil,
      @status_transitions : Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions? = nil,
      @tracking_details : Stripe::TreasuryOutboundPaymentTrackingDetails? = nil,
      @transaction : Stripe::TreasuryOutboundPaymentTransaction? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"cancelable\" is required and cannot be null") if @cancelable.nil?

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_customer = @customer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_destination_payment_method = @destination_payment_method).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("destination_payment_method", _destination_payment_method.to_s.size, MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_destination_payment_method_details = @destination_payment_method_details).nil?
        invalid_properties.concat(_destination_payment_method_details.list_invalid_properties_for("destination_payment_method_details")) if _destination_payment_method_details.is_a?(OpenApi::Validatable)
      end
      unless (_end_user_details = @end_user_details).nil?
        invalid_properties.concat(_end_user_details.list_invalid_properties_for("end_user_details")) if _end_user_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"expected_arrival_date\" is required and cannot be null") if @expected_arrival_date.nil?

      invalid_properties.push("\"financial_account\" is required and cannot be null") if @financial_account.nil?

      unless (_financial_account = @financial_account).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("financial_account", _financial_account.to_s.size, MAX_LENGTH_FOR_FINANCIAL_ACCOUNT)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_hosted_regulatory_receipt_url = @hosted_regulatory_receipt_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("hosted_regulatory_receipt_url", _hosted_regulatory_receipt_url.to_s.size, MAX_LENGTH_FOR_HOSTED_REGULATORY_RECEIPT_URL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_returned_details = @returned_details).nil?
        invalid_properties.concat(_returned_details.list_invalid_properties_for("returned_details")) if _returned_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"statement_descriptor\" is required and cannot be null") if @statement_descriptor.nil?

      unless (_statement_descriptor = @statement_descriptor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"status_transitions\" is required and cannot be null") if @status_transitions.nil?

      unless (_status_transitions = @status_transitions).nil?
        invalid_properties.concat(_status_transitions.list_invalid_properties_for("status_transitions")) if _status_transitions.is_a?(OpenApi::Validatable)
      end
      unless (_tracking_details = @tracking_details).nil?
        invalid_properties.concat(_tracking_details.list_invalid_properties_for("tracking_details")) if _tracking_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"transaction\" is required and cannot be null") if @transaction.nil?

      unless (_transaction = @transaction).nil?
        invalid_properties.concat(_transaction.list_invalid_properties_for("transaction")) if _transaction.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @cancelable.nil?

      return false if @created.nil?

      return false if @currency.nil?

      unless (_customer = @customer).nil?
        return false if _customer.to_s.size > MAX_LENGTH_FOR_CUSTOMER
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_destination_payment_method = @destination_payment_method).nil?
        return false if _destination_payment_method.to_s.size > MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD
      end

      unless (_destination_payment_method_details = @destination_payment_method_details).nil?
        return false if _destination_payment_method_details.is_a?(OpenApi::Validatable) && !_destination_payment_method_details.valid?
      end

      unless (_end_user_details = @end_user_details).nil?
        return false if _end_user_details.is_a?(OpenApi::Validatable) && !_end_user_details.valid?
      end

      return false if @expected_arrival_date.nil?

      return false if @financial_account.nil?
      unless (_financial_account = @financial_account).nil?
        return false if _financial_account.to_s.size > MAX_LENGTH_FOR_FINANCIAL_ACCOUNT
      end

      unless (_hosted_regulatory_receipt_url = @hosted_regulatory_receipt_url).nil?
        return false if _hosted_regulatory_receipt_url.to_s.size > MAX_LENGTH_FOR_HOSTED_REGULATORY_RECEIPT_URL
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_returned_details = @returned_details).nil?
        return false if _returned_details.is_a?(OpenApi::Validatable) && !_returned_details.valid?
      end

      return false if @statement_descriptor.nil?
      unless (_statement_descriptor = @statement_descriptor).nil?
        return false if _statement_descriptor.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @status_transitions.nil?
      unless (_status_transitions = @status_transitions).nil?
        return false if _status_transitions.is_a?(OpenApi::Validatable) && !_status_transitions.valid?
      end

      unless (_tracking_details = @tracking_details).nil?
        return false if _tracking_details.is_a?(OpenApi::Validatable) && !_tracking_details.valid?
      end

      return false if @transaction.nil?
      unless (_transaction = @transaction).nil?
        return false if _transaction.is_a?(OpenApi::Validatable) && !_transaction.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancelable Object to be assigned
    def cancelable=(new_value : Bool?)
      raise ArgumentError.new("\"cancelable\" is required and cannot be null") if new_value.nil?

      @cancelable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination_payment_method Object to be assigned
    def destination_payment_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("destination_payment_method", new_value.to_s.size, MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD)
      end

      @destination_payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination_payment_method_details Object to be assigned
    def destination_payment_method_details=(new_value : Stripe::TreasuryOutboundPaymentDestinationPaymentMethodDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @destination_payment_method_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_user_details Object to be assigned
    def end_user_details=(new_value : Stripe::TreasuryOutboundPaymentEndUserDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @end_user_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_arrival_date Object to be assigned
    def expected_arrival_date=(new_value : Int64?)
      raise ArgumentError.new("\"expected_arrival_date\" is required and cannot be null") if new_value.nil?

      @expected_arrival_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_account Object to be assigned
    def financial_account=(new_value : String?)
      raise ArgumentError.new("\"financial_account\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("financial_account", new_value.to_s.size, MAX_LENGTH_FOR_FINANCIAL_ACCOUNT)
      end

      @financial_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_regulatory_receipt_url Object to be assigned
    def hosted_regulatory_receipt_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("hosted_regulatory_receipt_url", new_value.to_s.size, MAX_LENGTH_FOR_HOSTED_REGULATORY_RECEIPT_URL)
      end

      @hosted_regulatory_receipt_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"metadata\" is required and cannot be null") if new_value.nil?

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] returned_details Object to be assigned
    def returned_details=(new_value : Stripe::TreasuryOutboundPaymentReturnedDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @returned_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(new_value : String?)
      raise ArgumentError.new("\"statement_descriptor\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
      end

      @statement_descriptor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_transitions Object to be assigned
    def status_transitions=(new_value : Stripe::TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions?)
      raise ArgumentError.new("\"status_transitions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @status_transitions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tracking_details Object to be assigned
    def tracking_details=(new_value : Stripe::TreasuryOutboundPaymentTrackingDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tracking_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction Object to be assigned
    def transaction=(new_value : Stripe::TreasuryOutboundPaymentTransaction?)
      raise ArgumentError.new("\"transaction\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transaction = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @cancelable, @created, @currency, @customer, @description, @destination_payment_method, @destination_payment_method_details, @end_user_details, @expected_arrival_date, @financial_account, @hosted_regulatory_receipt_url, @id, @livemode, @metadata, @object, @returned_details, @statement_descriptor, @status, @status_transitions, @tracking_details, @transaction)
  end
end
