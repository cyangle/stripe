#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SetupIntentNextActionVerifyWithMicrodeposits
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The timestamp when the microdeposits are expected to land.
    @[JSON::Field(key: "arrival_date", type: Int64)]
    property arrival_date : Int64

    # The URL for the hosted verification page, which allows customers to verify their bank account.
    @[JSON::Field(key: "hosted_verification_url", type: String)]
    getter hosted_verification_url : String

    # The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
    @[JSON::Field(key: "microdeposit_type", type: String?, presence: true, ignore_serialize: microdeposit_type.nil? && !microdeposit_type_present?)]
    getter microdeposit_type : String?

    @[JSON::Field(ignore: true)]
    property? microdeposit_type_present : Bool = false

    ENUM_VALIDATOR_FOR_MICRODEPOSIT_TYPE = EnumValidator.new("microdeposit_type", "String", ["amounts", "descriptor_code", "null"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @arrival_date : Int64, @hosted_verification_url : String, @microdeposit_type : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @hosted_verification_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"hosted_verification_url\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_MICRODEPOSIT_TYPE.error_message) unless ENUM_VALIDATOR_FOR_MICRODEPOSIT_TYPE.valid?(@microdeposit_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @hosted_verification_url.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_MICRODEPOSIT_TYPE.valid?(@microdeposit_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] hosted_verification_url Value to be assigned
    def hosted_verification_url=(hosted_verification_url)
      if hosted_verification_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"hosted_verification_url\", the character length must be smaller than or equal to 5000.")
      end

      @hosted_verification_url = hosted_verification_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] microdeposit_type Object to be assigned
    def microdeposit_type=(microdeposit_type)
      ENUM_VALIDATOR_FOR_MICRODEPOSIT_TYPE.valid!(microdeposit_type)
      @microdeposit_type = microdeposit_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        arrival_date == o.arrival_date &&
        hosted_verification_url == o.hosted_verification_url &&
        microdeposit_type == o.microdeposit_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@arrival_date, @hosted_verification_url, @microdeposit_type)
  end
end
