#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class SetupIntentNextActionVerifyWithMicrodeposits
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The timestamp when the microdeposits are expected to land.
    @[JSON::Field(key: "arrival_date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter arrival_date : Int64? = nil

    # The URL for the hosted verification page, which allows customers to verify their bank account.
    @[JSON::Field(key: "hosted_verification_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter hosted_verification_url : String? = nil
    MAX_LENGTH_FOR_HOSTED_VERIFICATION_URL = 5000

    # End of Required Properties

    # Optional Properties

    # The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
    @[JSON::Field(key: "microdeposit_type", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: microdeposit_type.nil? && !microdeposit_type_present?)]
    getter microdeposit_type : String? = nil
    ERROR_MESSAGE_FOR_MICRODEPOSIT_TYPE = "invalid value for \"microdeposit_type\", must be one of [amounts, descriptor_code]."
    VALID_VALUES_FOR_MICRODEPOSIT_TYPE  = StaticArray["amounts", "descriptor_code"]

    @[JSON::Field(ignore: true)]
    property? microdeposit_type_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @arrival_date : Int64? = nil,
      @hosted_verification_url : String? = nil,
      # Optional properties
      @microdeposit_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"arrival_date\" is required and cannot be null") if @arrival_date.nil?

      invalid_properties.push("\"hosted_verification_url\" is required and cannot be null") if @hosted_verification_url.nil?

      unless (_hosted_verification_url = @hosted_verification_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("hosted_verification_url", _hosted_verification_url.to_s.size, MAX_LENGTH_FOR_HOSTED_VERIFICATION_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_microdeposit_type = @microdeposit_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_MICRODEPOSIT_TYPE) unless OpenApi::EnumValidator.valid?(_microdeposit_type, VALID_VALUES_FOR_MICRODEPOSIT_TYPE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @arrival_date.nil?

      return false if @hosted_verification_url.nil?
      unless (_hosted_verification_url = @hosted_verification_url).nil?
        return false if _hosted_verification_url.to_s.size > MAX_LENGTH_FOR_HOSTED_VERIFICATION_URL
      end

      unless (_microdeposit_type = @microdeposit_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_microdeposit_type, VALID_VALUES_FOR_MICRODEPOSIT_TYPE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] arrival_date Object to be assigned
    def arrival_date=(arrival_date : Int64?)
      if arrival_date.nil?
        raise ArgumentError.new("\"arrival_date\" is required and cannot be null")
      end
      _arrival_date = arrival_date.not_nil!
      @arrival_date = _arrival_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_verification_url Object to be assigned
    def hosted_verification_url=(hosted_verification_url : String?)
      if hosted_verification_url.nil?
        raise ArgumentError.new("\"hosted_verification_url\" is required and cannot be null")
      end
      _hosted_verification_url = hosted_verification_url.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("hosted_verification_url", _hosted_verification_url.to_s.size, MAX_LENGTH_FOR_HOSTED_VERIFICATION_URL)
      @hosted_verification_url = _hosted_verification_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] microdeposit_type Object to be assigned
    def microdeposit_type=(microdeposit_type : String?)
      if microdeposit_type.nil?
        return @microdeposit_type = nil
      end
      _microdeposit_type = microdeposit_type.not_nil!
      OpenApi::EnumValidator.validate("microdeposit_type", _microdeposit_type, VALID_VALUES_FOR_MICRODEPOSIT_TYPE)
      @microdeposit_type = _microdeposit_type
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@arrival_date, @hosted_verification_url, @microdeposit_type, @microdeposit_type_present)
  end
end
