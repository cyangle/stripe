#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PortalSubscriptionCancellationReason
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Whether the feature is enabled.
    @[JSON::Field(key: "enabled", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter enabled : Bool? = nil

    # Which cancellation reasons will be given as options to the customer.
    @[JSON::Field(key: "options", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter options : Array(String)? = nil
    ERROR_MESSAGE_FOR_OPTIONS = "invalid value for \"options\", must be one of [customer_service, low_quality, missing_features, other, switched_service, too_complex, too_expensive, unused]."
    VALID_VALUES_FOR_OPTIONS  = String.static_array("customer_service", "low_quality", "missing_features", "other", "switched_service", "too_complex", "too_expensive", "unused")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @enabled : Bool? = nil,
      @options : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"enabled\" is required and cannot be null") if @enabled.nil?

      invalid_properties.push("\"options\" is required and cannot be null") if @options.nil?

      unless (_options = @options).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OPTIONS) unless OpenApi::EnumValidator.valid?(_options, VALID_VALUES_FOR_OPTIONS)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @enabled.nil?

      return false if @options.nil?
      unless (_options = @options).nil?
        return false unless OpenApi::EnumValidator.valid?(_options, VALID_VALUES_FOR_OPTIONS)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enabled Object to be assigned
    def enabled=(enabled : Bool?)
      if enabled.nil?
        raise ArgumentError.new("\"enabled\" is required and cannot be null")
      end
      _enabled = enabled.not_nil!
      @enabled = _enabled
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] options Object to be assigned
    def options=(options : Array(String)?)
      if options.nil?
        raise ArgumentError.new("\"options\" is required and cannot be null")
      end
      _options = options.not_nil!
      OpenApi::EnumValidator.validate("options", _options, VALID_VALUES_FOR_OPTIONS)
      @options = _options
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@enabled, @options)
  end
end
