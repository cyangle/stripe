#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.  Plans define the base price, currency, and billing cycle for recurring purchases of products. [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.  For example, you might have a single \"gold\" product that has plans for $10/month, $100/year, €9/month, and €90/year.  Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
  class Plan
    include NASON::Serializable

    # Required properties
    # Whether the plan can be used for new purchases.
    @[NASON::Field(key: "active", type: Bool)]
    property active : Bool

    # Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    @[NASON::Field(key: "billing_scheme", type: String)]
    property billing_scheme : String

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    @[NASON::Field(key: "interval", type: String)]
    property interval : String

    # The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
    @[NASON::Field(key: "interval_count", type: Int64)]
    property interval_count : Int64

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    @[NASON::Field(key: "usage_type", type: String)]
    property usage_type : String

    # Optional properties
    # Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
    @[NASON::Field(key: "aggregate_usage", type: String? | Null, nillable: true)]
    property aggregate_usage : String? | Null

    # The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    @[NASON::Field(key: "amount", type: Int64? | Null, nillable: true)]
    property amount : Int64? | Null

    # The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    @[NASON::Field(key: "amount_decimal", type: String? | Null, nillable: true)]
    property amount_decimal : String? | Null

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    # A brief description of the plan, hidden from customers.
    @[NASON::Field(key: "nickname", type: String? | Null, nillable: true)]
    property nickname : String? | Null

    # The product whose pricing this plan determines.
    @[NASON::Field(key: "product", type: String | Product? | Null, nillable: true)]
    property product : String | Product? | Null

    # Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    @[NASON::Field(key: "tiers", type: Array(PlanTier)?, nillable: true)]
    property tiers : Array(PlanTier)?

    # Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    @[NASON::Field(key: "tiers_mode", type: String? | Null, nillable: true)]
    property tiers_mode : String? | Null

    # Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    @[NASON::Field(key: "transform_usage", type: TransformUsage? | Null, nillable: true)]
    property transform_usage : TransformUsage? | Null

    # Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
    @[NASON::Field(key: "trial_period_days", type: Int64? | Null, nillable: true)]
    property trial_period_days : Int64? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @active : Bool, @billing_scheme : String, @created : Int64, @currency : String, @id : String, @interval : String, @interval_count : Int64, @livemode : Bool, @object : String, @usage_type : String, @aggregate_usage : String? | Null = nil, @amount : Int64? | Null = nil, @amount_decimal : String? | Null = nil, @metadata : Hash(String, String)? | Null = nil, @nickname : String? | Null = nil, @product : String | Product? | Null = nil, @tiers : Array(PlanTier)? = nil, @tiers_mode : String? | Null = nil, @transform_usage : TransformUsage? | Null = nil, @trial_period_days : Int64? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@nickname.nil? && !@nickname.null? && @nickname.to_s.size > 5000
        invalid_properties.push("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      aggregate_usage_validator = EnumAttributeValidator.new("String", ["last_during_period", "last_ever", "max", "sum"])
      return false unless aggregate_usage_validator.valid?(@aggregate_usage)
      billing_scheme_validator = EnumAttributeValidator.new("String", ["per_unit", "tiered"])
      return false unless billing_scheme_validator.valid?(@billing_scheme)
      return false if @id.to_s.size > 5000
      interval_validator = EnumAttributeValidator.new("String", ["day", "month", "week", "year"])
      return false unless interval_validator.valid?(@interval)
      return false if !@nickname.nil? && !@nickname.null? && @nickname.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["plan"])
      return false unless object_validator.valid?(@object)
      tiers_mode_validator = EnumAttributeValidator.new("String", ["graduated", "volume"])
      return false unless tiers_mode_validator.valid?(@tiers_mode)
      usage_type_validator = EnumAttributeValidator.new("String", ["licensed", "metered"])
      return false unless usage_type_validator.valid?(@usage_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aggregate_usage Object to be assigned
    def aggregate_usage=(aggregate_usage)
      validator = EnumAttributeValidator.new("String", ["last_during_period", "last_ever", "max", "sum"])
      unless validator.valid?(aggregate_usage)
        raise ArgumentError.new("invalid value for \"aggregate_usage\", must be one of #{validator.allowable_values}.")
      end
      @aggregate_usage = aggregate_usage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_scheme Object to be assigned
    def billing_scheme=(billing_scheme)
      validator = EnumAttributeValidator.new("String", ["per_unit", "tiered"])
      unless validator.valid?(billing_scheme)
        raise ArgumentError.new("invalid value for \"billing_scheme\", must be one of #{validator.allowable_values}.")
      end
      @billing_scheme = billing_scheme
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interval Object to be assigned
    def interval=(interval)
      validator = EnumAttributeValidator.new("String", ["day", "month", "week", "year"])
      unless validator.valid?(interval)
        raise ArgumentError.new("invalid value for \"interval\", must be one of #{validator.allowable_values}.")
      end
      @interval = interval
    end

    # Custom attribute writer method with validation
    # @param [Object] nickname Value to be assigned
    def nickname=(nickname)
      if !nickname.nil? && !@nickname.null? && nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      @nickname = nickname
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["plan"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tiers_mode Object to be assigned
    def tiers_mode=(tiers_mode)
      validator = EnumAttributeValidator.new("String", ["graduated", "volume"])
      unless validator.valid?(tiers_mode)
        raise ArgumentError.new("invalid value for \"tiers_mode\", must be one of #{validator.allowable_values}.")
      end
      @tiers_mode = tiers_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage_type Object to be assigned
    def usage_type=(usage_type)
      validator = EnumAttributeValidator.new("String", ["licensed", "metered"])
      unless validator.valid?(usage_type)
        raise ArgumentError.new("invalid value for \"usage_type\", must be one of #{validator.allowable_values}.")
      end
      @usage_type = usage_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        active == o.active &&
        aggregate_usage == o.aggregate_usage &&
        amount == o.amount &&
        amount_decimal == o.amount_decimal &&
        billing_scheme == o.billing_scheme &&
        created == o.created &&
        currency == o.currency &&
        id == o.id &&
        interval == o.interval &&
        interval_count == o.interval_count &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        nickname == o.nickname &&
        object == o.object &&
        product == o.product &&
        tiers == o.tiers &&
        tiers_mode == o.tiers_mode &&
        transform_usage == o.transform_usage &&
        trial_period_days == o.trial_period_days &&
        usage_type == o.usage_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, aggregate_usage, amount, amount_decimal, billing_scheme, created, currency, id, interval, interval_count, livemode, metadata, nickname, object, product, tiers, tiers_mode, transform_usage, trial_period_days, usage_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
