#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./automatic_payment_methods_param"
require "./payment_method_data_params"
require "./payment_method_options_param"
require "./post_setup_intents_request_mandate_data"
require "./setup_intent_single_use_params"

module Stripe
  class PostSetupIntentsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Accountâ€™s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    @[JSON::Field(key: "attach_to_self", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter attach_to_self : Bool? = nil

    @[JSON::Field(key: "automatic_payment_methods", type: Stripe::AutomaticPaymentMethodsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_payment_methods : Stripe::AutomaticPaymentMethodsParam? = nil

    # Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If a card is the attached payment method, you can provide a `return_url` in case further authentication is necessary.
    @[JSON::Field(key: "confirm", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter confirm : Bool? = nil

    # ID of the ConfirmationToken used to confirm this SetupIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
    @[JSON::Field(key: "confirmation_token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter confirmation_token : String? = nil
    MAX_LENGTH_FOR_CONFIRMATION_TOKEN = 5000

    # ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil
    MAX_LENGTH_FOR_CUSTOMER = 5000

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 1000

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    @[JSON::Field(key: "flow_directions", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter flow_directions : Array(String)? = nil
    ERROR_MESSAGE_FOR_FLOW_DIRECTIONS = "invalid value for \"flow_directions\", must be one of [inbound, outbound]."
    VALID_VALUES_FOR_FLOW_DIRECTIONS  = String.static_array("inbound", "outbound")

    @[JSON::Field(key: "mandate_data", type: Stripe::PostSetupIntentsRequestMandateData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mandate_data : Stripe::PostSetupIntentsRequestMandateData? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The Stripe account ID created for this SetupIntent.
    @[JSON::Field(key: "on_behalf_of", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter on_behalf_of : String? = nil

    # ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
    @[JSON::Field(key: "payment_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method : String? = nil
    MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # The ID of the payment method configuration to use with this SetupIntent.
    @[JSON::Field(key: "payment_method_configuration", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_configuration : String? = nil
    MAX_LENGTH_FOR_PAYMENT_METHOD_CONFIGURATION = 100

    @[JSON::Field(key: "payment_method_data", type: Stripe::PaymentMethodDataParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_data : Stripe::PaymentMethodDataParams? = nil

    @[JSON::Field(key: "payment_method_options", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_options : Stripe::PaymentMethodOptionsParam? = nil

    # The list of payment method types (for example, card) that this SetupIntent can use. If you don't provide this, it defaults to [\"card\"].
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_types : Array(String)? = nil

    # The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. To redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).
    @[JSON::Field(key: "return_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter return_url : String? = nil

    @[JSON::Field(key: "single_use", type: Stripe::SetupIntentSingleUseParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter single_use : Stripe::SetupIntentSingleUseParams? = nil

    # Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.
    @[JSON::Field(key: "usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter usage : String? = nil
    ERROR_MESSAGE_FOR_USAGE = "invalid value for \"usage\", must be one of [off_session, on_session]."
    VALID_VALUES_FOR_USAGE  = String.static_array("off_session", "on_session")

    # Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
    @[JSON::Field(key: "use_stripe_sdk", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter use_stripe_sdk : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @attach_to_self : Bool? = nil,
      @automatic_payment_methods : Stripe::AutomaticPaymentMethodsParam? = nil,
      @confirm : Bool? = nil,
      @confirmation_token : String? = nil,
      @customer : String? = nil,
      @description : String? = nil,
      @expand : Array(String)? = nil,
      @flow_directions : Array(String)? = nil,
      @mandate_data : Stripe::PostSetupIntentsRequestMandateData? = nil,
      @metadata : Hash(String, String)? = nil,
      @on_behalf_of : String? = nil,
      @payment_method : String? = nil,
      @payment_method_configuration : String? = nil,
      @payment_method_data : Stripe::PaymentMethodDataParams? = nil,
      @payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      @payment_method_types : Array(String)? = nil,
      @return_url : String? = nil,
      @single_use : Stripe::SetupIntentSingleUseParams? = nil,
      @usage : String? = nil,
      @use_stripe_sdk : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_automatic_payment_methods = @automatic_payment_methods).nil?
        invalid_properties.concat(_automatic_payment_methods.list_invalid_properties_for("automatic_payment_methods")) if _automatic_payment_methods.is_a?(OpenApi::Validatable)
      end

      unless (_confirmation_token = @confirmation_token).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("confirmation_token", _confirmation_token.to_s.size, MAX_LENGTH_FOR_CONFIRMATION_TOKEN)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer = @customer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_flow_directions = @flow_directions).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_FLOW_DIRECTIONS) unless OpenApi::EnumValidator.valid?(_flow_directions, VALID_VALUES_FOR_FLOW_DIRECTIONS)
      end
      unless (_mandate_data = @mandate_data).nil?
        invalid_properties.concat(_mandate_data.list_invalid_properties_for("mandate_data")) if _mandate_data.is_a?(OpenApi::Validatable)
      end

      unless (_payment_method = @payment_method).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_method", _payment_method.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_payment_method_configuration = @payment_method_configuration).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_method_configuration", _payment_method_configuration.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD_CONFIGURATION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_payment_method_data = @payment_method_data).nil?
        invalid_properties.concat(_payment_method_data.list_invalid_properties_for("payment_method_data")) if _payment_method_data.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_options = @payment_method_options).nil?
        invalid_properties.concat(_payment_method_options.list_invalid_properties_for("payment_method_options")) if _payment_method_options.is_a?(OpenApi::Validatable)
      end

      unless (_single_use = @single_use).nil?
        invalid_properties.concat(_single_use.list_invalid_properties_for("single_use")) if _single_use.is_a?(OpenApi::Validatable)
      end
      unless (_usage = @usage).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_USAGE) unless OpenApi::EnumValidator.valid?(_usage, VALID_VALUES_FOR_USAGE)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_automatic_payment_methods = @automatic_payment_methods).nil?
        return false if _automatic_payment_methods.is_a?(OpenApi::Validatable) && !_automatic_payment_methods.valid?
      end

      unless (_confirmation_token = @confirmation_token).nil?
        return false if _confirmation_token.to_s.size > MAX_LENGTH_FOR_CONFIRMATION_TOKEN
      end

      unless (_customer = @customer).nil?
        return false if _customer.to_s.size > MAX_LENGTH_FOR_CUSTOMER
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_flow_directions = @flow_directions).nil?
        return false unless OpenApi::EnumValidator.valid?(_flow_directions, VALID_VALUES_FOR_FLOW_DIRECTIONS)
      end

      unless (_mandate_data = @mandate_data).nil?
        return false if _mandate_data.is_a?(OpenApi::Validatable) && !_mandate_data.valid?
      end

      unless (_payment_method = @payment_method).nil?
        return false if _payment_method.to_s.size > MAX_LENGTH_FOR_PAYMENT_METHOD
      end

      unless (_payment_method_configuration = @payment_method_configuration).nil?
        return false if _payment_method_configuration.to_s.size > MAX_LENGTH_FOR_PAYMENT_METHOD_CONFIGURATION
      end

      unless (_payment_method_data = @payment_method_data).nil?
        return false if _payment_method_data.is_a?(OpenApi::Validatable) && !_payment_method_data.valid?
      end

      unless (_payment_method_options = @payment_method_options).nil?
        return false if _payment_method_options.is_a?(OpenApi::Validatable) && !_payment_method_options.valid?
      end

      unless (_single_use = @single_use).nil?
        return false if _single_use.is_a?(OpenApi::Validatable) && !_single_use.valid?
      end

      unless (_usage = @usage).nil?
        return false unless OpenApi::EnumValidator.valid?(_usage, VALID_VALUES_FOR_USAGE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attach_to_self Object to be assigned
    def attach_to_self=(new_value : Bool?)
      @attach_to_self = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_payment_methods Object to be assigned
    def automatic_payment_methods=(new_value : Stripe::AutomaticPaymentMethodsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @automatic_payment_methods = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confirm Object to be assigned
    def confirm=(new_value : Bool?)
      @confirm = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confirmation_token Object to be assigned
    def confirmation_token=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("confirmation_token", new_value.to_s.size, MAX_LENGTH_FOR_CONFIRMATION_TOKEN)
      end

      @confirmation_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow_directions Object to be assigned
    def flow_directions=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("flow_directions", new_value, VALID_VALUES_FOR_FLOW_DIRECTIONS)
      end

      @flow_directions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate_data Object to be assigned
    def mandate_data=(new_value : Stripe::PostSetupIntentsRequestMandateData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mandate_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(new_value : String?)
      @on_behalf_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("payment_method", new_value.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD)
      end

      @payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_configuration Object to be assigned
    def payment_method_configuration=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("payment_method_configuration", new_value.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD_CONFIGURATION)
      end

      @payment_method_configuration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_data Object to be assigned
    def payment_method_data=(new_value : Stripe::PaymentMethodDataParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(new_value : Array(String)?)
      @payment_method_types = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_url Object to be assigned
    def return_url=(new_value : String?)
      @return_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] single_use Object to be assigned
    def single_use=(new_value : Stripe::SetupIntentSingleUseParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @single_use = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("usage", new_value, VALID_VALUES_FOR_USAGE)
      end

      @usage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] use_stripe_sdk Object to be assigned
    def use_stripe_sdk=(new_value : Bool?)
      @use_stripe_sdk = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@attach_to_self, @automatic_payment_methods, @confirm, @confirmation_token, @customer, @description, @expand, @flow_directions, @mandate_data, @metadata, @on_behalf_of, @payment_method, @payment_method_configuration, @payment_method_data, @payment_method_options, @payment_method_types, @return_url, @single_use, @usage, @use_stripe_sdk)
  end
end
