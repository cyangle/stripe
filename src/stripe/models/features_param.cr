#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class FeaturesParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A list of [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) values that controls which saved payment methods the Payment Element displays by filtering to only show payment methods with an `allow_redisplay` value that is present in this list.  If not specified, defaults to [\"always\"]. In order to display all saved payment methods, specify [\"always\", \"limited\", \"unspecified\"].
    @[JSON::Field(key: "payment_method_allow_redisplay_filters", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_allow_redisplay_filters : Array(String)? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_ALLOW_REDISPLAY_FILTERS = "invalid value for \"payment_method_allow_redisplay_filters\", must be one of [always, limited, unspecified]."
    VALID_VALUES_FOR_PAYMENT_METHOD_ALLOW_REDISPLAY_FILTERS  = String.static_array("always", "limited", "unspecified")

    # Controls whether or not the Payment Element shows saved payment methods. This parameter defaults to `disabled`.
    @[JSON::Field(key: "payment_method_redisplay", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_redisplay : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_REDISPLAY = "invalid value for \"payment_method_redisplay\", must be one of [disabled, enabled]."
    VALID_VALUES_FOR_PAYMENT_METHOD_REDISPLAY  = String.static_array("disabled", "enabled")

    # Determines the max number of saved payment methods for the Payment Element to display. This parameter defaults to `3`.
    @[JSON::Field(key: "payment_method_redisplay_limit", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_redisplay_limit : Int64? = nil

    # Controls whether the Payment Element displays the option to remove a saved payment method. This parameter defaults to `disabled`.  Allowing buyers to remove their saved payment methods impacts subscriptions that depend on that payment method. Removing the payment method detaches the [`customer` object](https://docs.stripe.com/api/payment_methods/object#payment_method_object-customer) from that [PaymentMethod](https://docs.stripe.com/api/payment_methods).
    @[JSON::Field(key: "payment_method_remove", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_remove : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_REMOVE = "invalid value for \"payment_method_remove\", must be one of [disabled, enabled]."
    VALID_VALUES_FOR_PAYMENT_METHOD_REMOVE  = String.static_array("disabled", "enabled")

    # Controls whether the Payment Element displays a checkbox offering to save a new payment method. This parameter defaults to `disabled`.  If a customer checks the box, the [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) value on the PaymentMethod is set to `'always'` at confirmation time. For PaymentIntents, the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value is also set to the value defined in `payment_method_save_usage`.
    @[JSON::Field(key: "payment_method_save", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_save : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_SAVE = "invalid value for \"payment_method_save\", must be one of [disabled, enabled]."
    VALID_VALUES_FOR_PAYMENT_METHOD_SAVE  = String.static_array("disabled", "enabled")

    # When using PaymentIntents and the customer checks the save checkbox, this field determines the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value used to confirm the PaymentIntent.  When using SetupIntents, directly configure the [`usage`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) value on SetupIntent creation.
    @[JSON::Field(key: "payment_method_save_usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_save_usage : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_SAVE_USAGE = "invalid value for \"payment_method_save_usage\", must be one of [off_session, on_session]."
    VALID_VALUES_FOR_PAYMENT_METHOD_SAVE_USAGE  = String.static_array("off_session", "on_session")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @payment_method_allow_redisplay_filters : Array(String)? = nil,
      @payment_method_redisplay : String? = nil,
      @payment_method_redisplay_limit : Int64? = nil,
      @payment_method_remove : String? = nil,
      @payment_method_save : String? = nil,
      @payment_method_save_usage : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_payment_method_allow_redisplay_filters = @payment_method_allow_redisplay_filters).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_ALLOW_REDISPLAY_FILTERS) unless OpenApi::EnumValidator.valid?(_payment_method_allow_redisplay_filters, VALID_VALUES_FOR_PAYMENT_METHOD_ALLOW_REDISPLAY_FILTERS)
      end
      unless (_payment_method_redisplay = @payment_method_redisplay).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_REDISPLAY) unless OpenApi::EnumValidator.valid?(_payment_method_redisplay, VALID_VALUES_FOR_PAYMENT_METHOD_REDISPLAY)
      end

      unless (_payment_method_remove = @payment_method_remove).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_REMOVE) unless OpenApi::EnumValidator.valid?(_payment_method_remove, VALID_VALUES_FOR_PAYMENT_METHOD_REMOVE)
      end
      unless (_payment_method_save = @payment_method_save).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_SAVE) unless OpenApi::EnumValidator.valid?(_payment_method_save, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE)
      end
      unless (_payment_method_save_usage = @payment_method_save_usage).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_SAVE_USAGE) unless OpenApi::EnumValidator.valid?(_payment_method_save_usage, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE_USAGE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_payment_method_allow_redisplay_filters = @payment_method_allow_redisplay_filters).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_allow_redisplay_filters, VALID_VALUES_FOR_PAYMENT_METHOD_ALLOW_REDISPLAY_FILTERS)
      end

      unless (_payment_method_redisplay = @payment_method_redisplay).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_redisplay, VALID_VALUES_FOR_PAYMENT_METHOD_REDISPLAY)
      end

      unless (_payment_method_remove = @payment_method_remove).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_remove, VALID_VALUES_FOR_PAYMENT_METHOD_REMOVE)
      end

      unless (_payment_method_save = @payment_method_save).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_save, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE)
      end

      unless (_payment_method_save_usage = @payment_method_save_usage).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_save_usage, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE_USAGE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_allow_redisplay_filters Object to be assigned
    def payment_method_allow_redisplay_filters=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_allow_redisplay_filters", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_ALLOW_REDISPLAY_FILTERS)
      end

      @payment_method_allow_redisplay_filters = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_redisplay Object to be assigned
    def payment_method_redisplay=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_redisplay", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_REDISPLAY)
      end

      @payment_method_redisplay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_redisplay_limit Object to be assigned
    def payment_method_redisplay_limit=(new_value : Int64?)
      @payment_method_redisplay_limit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_remove Object to be assigned
    def payment_method_remove=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_remove", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_REMOVE)
      end

      @payment_method_remove = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_save Object to be assigned
    def payment_method_save=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_save", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE)
      end

      @payment_method_save = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_save_usage Object to be assigned
    def payment_method_save_usage=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_save_usage", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE_USAGE)
      end

      @payment_method_save_usage = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@payment_method_allow_redisplay_filters, @payment_method_redisplay, @payment_method_redisplay_limit, @payment_method_remove, @payment_method_save, @payment_method_save_usage)
  end
end
