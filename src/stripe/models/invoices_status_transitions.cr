#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class InvoicesStatusTransitions
    include JSON::Serializable
    include JSON::Serializable::Unmapped


    # Optional properties

    # The time that the invoice draft was finalized.
    @[JSON::Field(key: "finalized_at", type: Int64?, presence: true, ignore_serialize: finalized_at.nil? && !finalized_at_present?)]
    property finalized_at : Int64?

    @[JSON::Field(ignore: true)]
    property? finalized_at_present : Bool = false

    # The time that the invoice was marked uncollectible.
    @[JSON::Field(key: "marked_uncollectible_at", type: Int64?, presence: true, ignore_serialize: marked_uncollectible_at.nil? && !marked_uncollectible_at_present?)]
    property marked_uncollectible_at : Int64?

    @[JSON::Field(ignore: true)]
    property? marked_uncollectible_at_present : Bool = false

    # The time that the invoice was paid.
    @[JSON::Field(key: "paid_at", type: Int64?, presence: true, ignore_serialize: paid_at.nil? && !paid_at_present?)]
    property paid_at : Int64?

    @[JSON::Field(ignore: true)]
    property? paid_at_present : Bool = false

    # The time that the invoice was voided.
    @[JSON::Field(key: "voided_at", type: Int64?, presence: true, ignore_serialize: voided_at.nil? && !voided_at_present?)]
    property voided_at : Int64?

    @[JSON::Field(ignore: true)]
    property? voided_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Optional properties
      @finalized_at : Int64? = nil, 
      @marked_uncollectible_at : Int64? = nil, 
      @paid_at : Int64? = nil, 
      @voided_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?

      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@finalized_at, @marked_uncollectible_at, @paid_at, @voided_at)
  end
end
