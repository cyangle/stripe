#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class InvoicesStatusTransitions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The time that the invoice draft was finalized.
    @[JSON::Field(key: "finalized_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: finalized_at.nil? && !finalized_at_present?)]
    getter finalized_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? finalized_at_present : Bool = false

    # The time that the invoice was marked uncollectible.
    @[JSON::Field(key: "marked_uncollectible_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: marked_uncollectible_at.nil? && !marked_uncollectible_at_present?)]
    getter marked_uncollectible_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? marked_uncollectible_at_present : Bool = false

    # The time that the invoice was paid.
    @[JSON::Field(key: "paid_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: paid_at.nil? && !paid_at_present?)]
    getter paid_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? paid_at_present : Bool = false

    # The time that the invoice was voided.
    @[JSON::Field(key: "voided_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: voided_at.nil? && !voided_at_present?)]
    getter voided_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? voided_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @finalized_at : Int64? = nil,
      @marked_uncollectible_at : Int64? = nil,
      @paid_at : Int64? = nil,
      @voided_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] finalized_at Object to be assigned
    def finalized_at=(finalized_at : Int64?)
      if finalized_at.nil?
        return @finalized_at = nil
      end
      _finalized_at = finalized_at.not_nil!
      @finalized_at = _finalized_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] marked_uncollectible_at Object to be assigned
    def marked_uncollectible_at=(marked_uncollectible_at : Int64?)
      if marked_uncollectible_at.nil?
        return @marked_uncollectible_at = nil
      end
      _marked_uncollectible_at = marked_uncollectible_at.not_nil!
      @marked_uncollectible_at = _marked_uncollectible_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paid_at Object to be assigned
    def paid_at=(paid_at : Int64?)
      if paid_at.nil?
        return @paid_at = nil
      end
      _paid_at = paid_at.not_nil!
      @paid_at = _paid_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] voided_at Object to be assigned
    def voided_at=(voided_at : Int64?)
      if voided_at.nil?
        return @voided_at = nil
      end
      _voided_at = voided_at.not_nil!
      @voided_at = _voided_at
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@finalized_at, @finalized_at_present, @marked_uncollectible_at, @marked_uncollectible_at_present, @paid_at, @paid_at_present, @voided_at, @voided_at_present)
  end
end
