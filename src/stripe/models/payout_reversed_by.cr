#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payout"
require "./payout_application_fee"
require "./payout_balance_transaction"
require "./payout_destination"
require "./payout_failure_balance_transaction"
require "./payout_original_payout"

module Stripe
  # If the payout reverses, this is the ID of the payout that reverses this payout.
  class PayoutReversedBy
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The amount (in cents (or local equivalent)) that transfers to your bank account or debit card.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    @[JSON::Field(key: "application_fee", type: Stripe::PayoutApplicationFee?, default: nil, required: true, nullable: true, emit_null: true)]
    property application_fee : Stripe::PayoutApplicationFee? = nil

    # The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property application_fee_amount : Int64? = nil

    # Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.
    @[JSON::Field(key: "arrival_date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property arrival_date : Int64? = nil

    # Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts).
    @[JSON::Field(key: "automatic", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property automatic : Bool? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::PayoutBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property balance_transaction : Stripe::PayoutBalanceTransaction? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    @[JSON::Field(key: "destination", type: Stripe::PayoutDestination?, default: nil, required: true, nullable: true, emit_null: true)]
    property destination : Stripe::PayoutDestination? = nil

    @[JSON::Field(key: "failure_balance_transaction", type: Stripe::PayoutFailureBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property failure_balance_transaction : Stripe::PayoutFailureBalanceTransaction? = nil

    # Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures).
    @[JSON::Field(key: "failure_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property failure_code : String? = nil
    MAX_LENGTH_FOR_FAILURE_CODE = 5000

    # Message that provides the reason for a payout failure, if available.
    @[JSON::Field(key: "failure_message", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property failure_message : String? = nil
    MAX_LENGTH_FOR_FAILURE_MESSAGE = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property metadata : Hash(String, String)? = nil

    # The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
    @[JSON::Field(key: "method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property method : String? = nil
    MAX_LENGTH_FOR_METHOD = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [payout]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("payout")

    @[JSON::Field(key: "original_payout", type: Stripe::PayoutOriginalPayout?, default: nil, required: true, nullable: true, emit_null: true)]
    property original_payout : Stripe::PayoutOriginalPayout? = nil

    # If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.
    @[JSON::Field(key: "reconciliation_status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property reconciliation_status : String? = nil
    ERROR_MESSAGE_FOR_RECONCILIATION_STATUS = "invalid value for \"reconciliation_status\", must be one of [completed, in_progress, not_applicable]."
    VALID_VALUES_FOR_RECONCILIATION_STATUS  = String.static_array("completed", "in_progress", "not_applicable")

    @[JSON::Field(key: "reversed_by", type: Stripe::PayoutReversedBy?, default: nil, required: true, nullable: true, emit_null: true)]
    property reversed_by : Stripe::PayoutReversedBy? = nil

    # The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`.
    @[JSON::Field(key: "source_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property source_type : String? = nil
    MAX_LENGTH_FOR_SOURCE_TYPE = 5000

    # Extra information about a payout that displays on the user's bank statement.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    # Can be `bank_account` or `card`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [bank_account, card]."
    VALID_VALUES_FOR__TYPE  = String.static_array("bank_account", "card")

    # End of Required Properties
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Payout,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @application_fee : Stripe::PayoutApplicationFee? = nil,
      @application_fee_amount : Int64? = nil,
      @arrival_date : Int64? = nil,
      @automatic : Bool? = nil,
      @balance_transaction : Stripe::PayoutBalanceTransaction? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @description : String? = nil,
      @destination : Stripe::PayoutDestination? = nil,
      @failure_balance_transaction : Stripe::PayoutFailureBalanceTransaction? = nil,
      @failure_code : String? = nil,
      @failure_message : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @method : String? = nil,
      @object : String? = nil,
      @original_payout : Stripe::PayoutOriginalPayout? = nil,
      @reconciliation_status : String? = nil,
      @reversed_by : Stripe::PayoutReversedBy? = nil,
      @source_type : String? = nil,
      @statement_descriptor : String? = nil,
      @status : String? = nil,
      @_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @application_fee, @application_fee_amount, @arrival_date, @automatic, @balance_transaction, @created, @currency, @description, @destination, @failure_balance_transaction, @failure_code, @failure_message, @id, @livemode, @metadata, @method, @object, @original_payout, @reconciliation_status, @reversed_by, @source_type, @statement_descriptor, @status, @_type)
  end
end
