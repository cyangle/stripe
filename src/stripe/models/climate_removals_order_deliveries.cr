#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./climate_removals_order_deliveries_location"
require "./climate_supplier"

module Stripe
  # The delivery of a specified quantity of carbon for an order.
  class ClimateRemovalsOrderDeliveries
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the delivery occurred. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "delivered_at", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter delivered_at : Int64? = nil

    @[JSON::Field(key: "location", type: Stripe::ClimateRemovalsOrderDeliveriesLocation?, default: nil, required: true, nullable: true, emit_null: true)]
    getter location : Stripe::ClimateRemovalsOrderDeliveriesLocation? = nil

    # Quantity of carbon removal supplied by this delivery.
    @[JSON::Field(key: "metric_tons", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metric_tons : String? = nil
    MAX_LENGTH_FOR_METRIC_TONS = 5000

    # Once retired, a URL to the registry entry for the tons from this delivery.
    @[JSON::Field(key: "registry_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter registry_url : String? = nil
    MAX_LENGTH_FOR_REGISTRY_URL = 5000

    @[JSON::Field(key: "supplier", type: Stripe::ClimateSupplier?, default: nil, required: true, nullable: false, emit_null: false)]
    getter supplier : Stripe::ClimateSupplier? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @delivered_at : Int64? = nil,
      @location : Stripe::ClimateRemovalsOrderDeliveriesLocation? = nil,
      @metric_tons : String? = nil,
      @registry_url : String? = nil,
      @supplier : Stripe::ClimateSupplier? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"delivered_at\" is required and cannot be null") if @delivered_at.nil?

      unless (_location = @location).nil?
        invalid_properties.concat(_location.list_invalid_properties_for("location")) if _location.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"metric_tons\" is required and cannot be null") if @metric_tons.nil?

      unless (_metric_tons = @metric_tons).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("metric_tons", _metric_tons.to_s.size, MAX_LENGTH_FOR_METRIC_TONS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_registry_url = @registry_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("registry_url", _registry_url.to_s.size, MAX_LENGTH_FOR_REGISTRY_URL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"supplier\" is required and cannot be null") if @supplier.nil?

      unless (_supplier = @supplier).nil?
        invalid_properties.concat(_supplier.list_invalid_properties_for("supplier")) if _supplier.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @delivered_at.nil?

      unless (_location = @location).nil?
        return false if _location.is_a?(OpenApi::Validatable) && !_location.valid?
      end

      return false if @metric_tons.nil?
      unless (_metric_tons = @metric_tons).nil?
        return false if _metric_tons.to_s.size > MAX_LENGTH_FOR_METRIC_TONS
      end

      unless (_registry_url = @registry_url).nil?
        return false if _registry_url.to_s.size > MAX_LENGTH_FOR_REGISTRY_URL
      end

      return false if @supplier.nil?
      unless (_supplier = @supplier).nil?
        return false if _supplier.is_a?(OpenApi::Validatable) && !_supplier.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delivered_at Object to be assigned
    def delivered_at=(new_value : Int64?)
      raise ArgumentError.new("\"delivered_at\" is required and cannot be null") if new_value.nil?

      @delivered_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(new_value : Stripe::ClimateRemovalsOrderDeliveriesLocation?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @location = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metric_tons Object to be assigned
    def metric_tons=(new_value : String?)
      raise ArgumentError.new("\"metric_tons\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("metric_tons", new_value.to_s.size, MAX_LENGTH_FOR_METRIC_TONS)
      end

      @metric_tons = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] registry_url Object to be assigned
    def registry_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("registry_url", new_value.to_s.size, MAX_LENGTH_FOR_REGISTRY_URL)
      end

      @registry_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supplier Object to be assigned
    def supplier=(new_value : Stripe::ClimateSupplier?)
      raise ArgumentError.new("\"supplier\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @supplier = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@delivered_at, @location, @metric_tons, @registry_url, @supplier)
  end
end
