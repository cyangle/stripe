#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # The address where the card will be shipped.
  class ShippingSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "address", type: Stripe::RequiredAddress?, default: nil, required: true, nullable: false, emit_null: false)]
    getter address : Stripe::RequiredAddress? = nil

    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    # Optional properties

    @[JSON::Field(key: "customs", type: Stripe::CustomsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customs : Stripe::CustomsParam? = nil

    @[JSON::Field(key: "phone_number", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone_number : String? = nil

    @[JSON::Field(key: "require_signature", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter require_signature : Bool? = nil

    @[JSON::Field(key: "service", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter service : String? = nil

    ENUM_VALIDATOR_FOR_SERVICE = EnumValidator.new("service", "String", ["express", "priority", "standard"])

    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["bulk", "individual"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @address : Stripe::RequiredAddress? = nil,
      @name : String? = nil,
      # Optional properties
      @customs : Stripe::CustomsParam? = nil,
      @phone_number : String? = nil,
      @require_signature : Bool? = nil,
      @service : String? = nil,
      @_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"address\" is required and cannot be null") if @address.nil?
      # This is a model address : Stripe::RequiredAddress?
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?
      if _name = @name
        if _name.to_s.size > 5000
          invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model customs : Stripe::CustomsParam?

      invalid_properties.push(ENUM_VALIDATOR_FOR_SERVICE.error_message) unless ENUM_VALIDATOR_FOR_SERVICE.valid?(@service)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @address.nil?
      return false if @name.nil?
      if _name = @name
        return false if _name.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_SERVICE.valid?(@service)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(address : Stripe::RequiredAddress?)
      if address.nil?
        raise ArgumentError.new("\"address\" is required and cannot be null")
      end
      @address = address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        raise ArgumentError.new("\"name\" is required and cannot be null")
      end
      _name = name.not_nil!
      if _name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customs Object to be assigned
    def customs=(customs : Stripe::CustomsParam?)
      if customs.nil?
        return @customs = nil
      end
      @customs = customs
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number Object to be assigned
    def phone_number=(phone_number : String?)
      if phone_number.nil?
        return @phone_number = nil
      end
      @phone_number = phone_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] require_signature Object to be assigned
    def require_signature=(require_signature : Bool?)
      if require_signature.nil?
        return @require_signature = nil
      end
      @require_signature = require_signature
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service Object to be assigned
    def service=(service : String?)
      if service.nil?
        return @service = nil
      end
      _service = service.not_nil!
      ENUM_VALIDATOR_FOR_SERVICE.valid!(_service)
      @service = service
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        return @_type = nil
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address, @name, @customs, @phone_number, @require_signature, @service, @_type)
  end
end
