#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Additional fields for network related functions
  @[JSON::Serializable::Options(emit_nulls: true)]
  class NetworksOptionsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Triggers validations to run across the selected networks
    @[JSON::Field(key: "requested", type: Array(String)?, presence: true, ignore_serialize: requested.nil? && !requested_present?)]
    getter requested : Array(String)?

    @[JSON::Field(ignore: true)]
    property? requested_present : Bool = false

    ENUM_VALIDATOR_FOR_REQUESTED = EnumValidator.new("requested", "String", ["ach", "us_domestic_wire"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @requested : Array(String)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push(ENUM_VALIDATOR_FOR_REQUESTED.error_message) unless ENUM_VALIDATOR_FOR_REQUESTED.all_valid?(@requested)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_REQUESTED.all_valid?(@requested)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] requested Object to be assigned
    def requested=(requested)
      ENUM_VALIDATOR_FOR_REQUESTED.all_valid!(requested)
      @requested = requested
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        requested == o.requested
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@requested)
  end
end
