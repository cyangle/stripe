#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.  Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
  class SubscriptionSchedule
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    @[JSON::Field(key: "customer", type: Stripe::SubscriptionScheduleCustomer?, default: nil, required: true, nullable: false, emit_null: false)]
    getter customer : Stripe::SubscriptionScheduleCustomer? = nil

    @[JSON::Field(key: "default_settings", type: Stripe::SubscriptionSchedulesResourceDefaultSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter default_settings : Stripe::SubscriptionSchedulesResourceDefaultSettings? = nil

    # Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
    @[JSON::Field(key: "end_behavior", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter end_behavior : String? = nil

    ENUM_VALIDATOR_FOR_END_BEHAVIOR = EnumValidator.new("end_behavior", "String", ["cancel", "none", "release", "renew"])

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["subscription_schedule"])

    # Configuration for the subscription schedule's phases.
    @[JSON::Field(key: "phases", type: Array(Stripe::SubscriptionSchedulePhaseConfiguration)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter phases : Array(Stripe::SubscriptionSchedulePhaseConfiguration)? = nil

    # The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["active", "canceled", "completed", "not_started", "released"])

    # Optional properties

    @[JSON::Field(key: "application", type: Stripe::SubscriptionScheduleApplication?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : Stripe::SubscriptionScheduleApplication? = nil

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    # Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "canceled_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: canceled_at.nil? && !canceled_at_present?)]
    getter canceled_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? canceled_at_present : Bool = false

    # Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "completed_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: completed_at.nil? && !completed_at_present?)]
    getter completed_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? completed_at_present : Bool = false

    @[JSON::Field(key: "current_phase", type: Stripe::SubscriptionScheduleCurrentPhase1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: current_phase.nil? && !current_phase_present?)]
    getter current_phase : Stripe::SubscriptionScheduleCurrentPhase1? = nil

    @[JSON::Field(ignore: true)]
    property? current_phase_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "released_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: released_at.nil? && !released_at_present?)]
    getter released_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? released_at_present : Bool = false

    # ID of the subscription once managed by the subscription schedule (if it is released).
    @[JSON::Field(key: "released_subscription", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: released_subscription.nil? && !released_subscription_present?)]
    getter released_subscription : String? = nil

    @[JSON::Field(ignore: true)]
    property? released_subscription_present : Bool = false

    @[JSON::Field(key: "subscription", type: Stripe::SubscriptionScheduleSubscription?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: subscription.nil? && !subscription_present?)]
    getter subscription : Stripe::SubscriptionScheduleSubscription? = nil

    @[JSON::Field(ignore: true)]
    property? subscription_present : Bool = false

    @[JSON::Field(key: "test_clock", type: Stripe::SubscriptionScheduleTestClock?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: test_clock.nil? && !test_clock_present?)]
    getter test_clock : Stripe::SubscriptionScheduleTestClock? = nil

    @[JSON::Field(ignore: true)]
    property? test_clock_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @customer : Stripe::SubscriptionScheduleCustomer? = nil,
      @default_settings : Stripe::SubscriptionSchedulesResourceDefaultSettings? = nil,
      @end_behavior : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @phases : Array(Stripe::SubscriptionSchedulePhaseConfiguration)? = nil,
      @status : String? = nil,
      # Optional properties
      @application : Stripe::SubscriptionScheduleApplication? = nil,
      @canceled_at : Int64? = nil,
      @completed_at : Int64? = nil,
      @current_phase : Stripe::SubscriptionScheduleCurrentPhase1? = nil,
      @metadata : Hash(String, String)? = nil,
      @released_at : Int64? = nil,
      @released_subscription : String? = nil,
      @subscription : Stripe::SubscriptionScheduleSubscription? = nil,
      @test_clock : Stripe::SubscriptionScheduleTestClock? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"customer\" is required and cannot be null") if @customer.nil?
      # This is a model customer : Stripe::SubscriptionScheduleCustomer?
      invalid_properties.push("\"default_settings\" is required and cannot be null") if @default_settings.nil?
      # This is a model default_settings : Stripe::SubscriptionSchedulesResourceDefaultSettings?

      invalid_properties.push(ENUM_VALIDATOR_FOR_END_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid?(@end_behavior, false)
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"phases\" is required and cannot be null") if @phases.nil?
      # Container phases array has values of Stripe::SubscriptionSchedulePhaseConfiguration

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      # This is a model application : Stripe::SubscriptionScheduleApplication?
      # This is a model current_phase : Stripe::SubscriptionScheduleCurrentPhase1?
      if _released_subscription = @released_subscription
        if _released_subscription.to_s.size > 5000
          invalid_properties.push("invalid value for \"released_subscription\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model subscription : Stripe::SubscriptionScheduleSubscription?
      # This is a model test_clock : Stripe::SubscriptionScheduleTestClock?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @created.nil?
      return false if @customer.nil?
      return false if @default_settings.nil?
      return false unless ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid?(@end_behavior, false)
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @phases.nil?
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      if _released_subscription = @released_subscription
        return false if _released_subscription.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : Stripe::SubscriptionScheduleCustomer?)
      if customer.nil?
        raise ArgumentError.new("\"customer\" is required and cannot be null")
      end
      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_settings Object to be assigned
    def default_settings=(default_settings : Stripe::SubscriptionSchedulesResourceDefaultSettings?)
      if default_settings.nil?
        raise ArgumentError.new("\"default_settings\" is required and cannot be null")
      end
      @default_settings = default_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_behavior Object to be assigned
    def end_behavior=(end_behavior : String?)
      if end_behavior.nil?
        raise ArgumentError.new("\"end_behavior\" is required and cannot be null")
      end
      _end_behavior = end_behavior.not_nil!
      ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid!(_end_behavior)
      @end_behavior = end_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phases Object to be assigned
    def phases=(phases : Array(Stripe::SubscriptionSchedulePhaseConfiguration)?)
      if phases.nil?
        raise ArgumentError.new("\"phases\" is required and cannot be null")
      end
      @phases = phases
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(application : Stripe::SubscriptionScheduleApplication?)
      if application.nil?
        return @application = nil
      end
      @application = application
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] canceled_at Object to be assigned
    def canceled_at=(canceled_at : Int64?)
      if canceled_at.nil?
        return @canceled_at = nil
      end
      @canceled_at = canceled_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] completed_at Object to be assigned
    def completed_at=(completed_at : Int64?)
      if completed_at.nil?
        return @completed_at = nil
      end
      @completed_at = completed_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_phase Object to be assigned
    def current_phase=(current_phase : Stripe::SubscriptionScheduleCurrentPhase1?)
      if current_phase.nil?
        return @current_phase = nil
      end
      @current_phase = current_phase
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] released_at Object to be assigned
    def released_at=(released_at : Int64?)
      if released_at.nil?
        return @released_at = nil
      end
      @released_at = released_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] released_subscription Object to be assigned
    def released_subscription=(released_subscription : String?)
      if released_subscription.nil?
        return @released_subscription = nil
      end
      _released_subscription = released_subscription.not_nil!
      if _released_subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"released_subscription\", the character length must be smaller than or equal to 5000.")
      end

      @released_subscription = released_subscription
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription Object to be assigned
    def subscription=(subscription : Stripe::SubscriptionScheduleSubscription?)
      if subscription.nil?
        return @subscription = nil
      end
      @subscription = subscription
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock Object to be assigned
    def test_clock=(test_clock : Stripe::SubscriptionScheduleTestClock?)
      if test_clock.nil?
        return @test_clock = nil
      end
      @test_clock = test_clock
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @customer, @default_settings, @end_behavior, @id, @livemode, @object, @phases, @status, @application, @application_present, @canceled_at, @canceled_at_present, @completed_at, @completed_at_present, @current_phase, @current_phase_present, @metadata, @metadata_present, @released_at, @released_at_present, @released_subscription, @released_subscription_present, @subscription, @subscription_present, @test_clock, @test_clock_present)
  end
end
