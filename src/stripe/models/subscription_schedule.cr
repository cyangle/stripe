#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.  Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SubscriptionSchedule
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    @[JSON::Field(key: "customer", type: SubscriptionScheduleCustomer)]
    property customer : SubscriptionScheduleCustomer

    @[JSON::Field(key: "default_settings", type: SubscriptionSchedulesResourceDefaultSettings)]
    property default_settings : SubscriptionSchedulesResourceDefaultSettings

    # Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
    @[JSON::Field(key: "end_behavior", type: String)]
    getter end_behavior : String

    ENUM_VALIDATOR_FOR_END_BEHAVIOR = EnumValidator.new("end_behavior", "String", ["cancel", "none", "release", "renew"])

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["subscription_schedule"])

    # Configuration for the subscription schedule's phases.
    @[JSON::Field(key: "phases", type: Array(SubscriptionSchedulePhaseConfiguration))]
    property phases : Array(SubscriptionSchedulePhaseConfiguration)

    # The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["active", "canceled", "completed", "not_started", "released"])

    # Optional properties

    @[JSON::Field(key: "application", type: SubscriptionScheduleApplication?, presence: true, ignore_serialize: application.nil? && !application_present?)]
    property application : SubscriptionScheduleApplication?

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    # Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "canceled_at", type: Int64?, presence: true, ignore_serialize: canceled_at.nil? && !canceled_at_present?)]
    property canceled_at : Int64?

    @[JSON::Field(ignore: true)]
    property? canceled_at_present : Bool = false

    # Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "completed_at", type: Int64?, presence: true, ignore_serialize: completed_at.nil? && !completed_at_present?)]
    property completed_at : Int64?

    @[JSON::Field(ignore: true)]
    property? completed_at_present : Bool = false

    @[JSON::Field(key: "current_phase", type: SubscriptionScheduleCurrentPhase1?, presence: true, ignore_serialize: current_phase.nil? && !current_phase_present?)]
    property current_phase : SubscriptionScheduleCurrentPhase1?

    @[JSON::Field(ignore: true)]
    property? current_phase_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "released_at", type: Int64?, presence: true, ignore_serialize: released_at.nil? && !released_at_present?)]
    property released_at : Int64?

    @[JSON::Field(ignore: true)]
    property? released_at_present : Bool = false

    # ID of the subscription once managed by the subscription schedule (if it is released).
    @[JSON::Field(key: "released_subscription", type: String?, presence: true, ignore_serialize: released_subscription.nil? && !released_subscription_present?)]
    getter released_subscription : String?

    @[JSON::Field(ignore: true)]
    property? released_subscription_present : Bool = false

    @[JSON::Field(key: "subscription", type: SubscriptionScheduleSubscription?, presence: true, ignore_serialize: subscription.nil? && !subscription_present?)]
    property subscription : SubscriptionScheduleSubscription?

    @[JSON::Field(ignore: true)]
    property? subscription_present : Bool = false

    @[JSON::Field(key: "test_clock", type: SubscriptionScheduleTestClock?, presence: true, ignore_serialize: test_clock.nil? && !test_clock_present?)]
    property test_clock : SubscriptionScheduleTestClock?

    @[JSON::Field(ignore: true)]
    property? test_clock_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64,
      @customer : SubscriptionScheduleCustomer,
      @default_settings : SubscriptionSchedulesResourceDefaultSettings,
      @end_behavior : String,
      @id : String,
      @livemode : Bool,
      @object : String,
      @phases : Array(SubscriptionSchedulePhaseConfiguration),
      @status : String,
      # Optional properties
      @application : SubscriptionScheduleApplication? = nil,
      @canceled_at : Int64? = nil,
      @completed_at : Int64? = nil,
      @current_phase : SubscriptionScheduleCurrentPhase1? = nil,
      @metadata : Hash(String, String)? = nil,
      @released_at : Int64? = nil,
      @released_subscription : String? = nil,
      @subscription : SubscriptionScheduleSubscription? = nil,
      @test_clock : SubscriptionScheduleTestClock? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_END_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid?(@end_behavior, false)

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      if !@released_subscription.nil? && @released_subscription.to_s.size > 5000
        invalid_properties.push("invalid value for \"released_subscription\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid?(@end_behavior, false)
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false if !@released_subscription.nil? && @released_subscription.to_s.size > 5000

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_behavior Object to be assigned
    def end_behavior=(end_behavior : String)
      ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid!(end_behavior, false)
      @end_behavior = end_behavior
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] released_subscription Value to be assigned
    def released_subscription=(released_subscription : String?)
      if !released_subscription.nil? && released_subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"released_subscription\", the character length must be smaller than or equal to 5000.")
      end

      @released_subscription = released_subscription
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @customer, @default_settings, @end_behavior, @id, @livemode, @object, @phases, @status, @application, @application_present, @canceled_at, @canceled_at_present, @completed_at, @completed_at_present, @current_phase, @current_phase_present, @metadata, @metadata_present, @released_at, @released_at_present, @released_subscription, @released_subscription_present, @subscription, @subscription_present, @test_clock, @test_clock_present)
  end
end
