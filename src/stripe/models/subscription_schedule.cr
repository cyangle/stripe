#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.  Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
  class SubscriptionSchedule
    include NASON::Serializable

    # Required properties
    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # ID of the customer who owns the subscription schedule.
    @[NASON::Field(key: "customer", type: String | Customer | Null, nillable: false)]
    property customer : String | Customer | Null

    @[NASON::Field(key: "default_settings", type: SubscriptionSchedulesResourceDefaultSettings)]
    property default_settings : SubscriptionSchedulesResourceDefaultSettings

    # Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
    @[NASON::Field(key: "end_behavior", type: String)]
    property end_behavior : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # Configuration for the subscription schedule's phases.
    @[NASON::Field(key: "phases", type: Array(SubscriptionSchedulePhaseConfiguration))]
    property phases : Array(SubscriptionSchedulePhaseConfiguration)

    # The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # Optional properties
    # Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "canceled_at", type: Int64? | Null, nillable: true)]
    property canceled_at : Int64? | Null

    # Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "completed_at", type: Int64? | Null, nillable: true)]
    property completed_at : Int64? | Null

    # Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
    @[NASON::Field(key: "current_phase", type: SubscriptionScheduleCurrentPhase? | Null, nillable: true)]
    property current_phase : SubscriptionScheduleCurrentPhase? | Null

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    # Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "released_at", type: Int64? | Null, nillable: true)]
    property released_at : Int64? | Null

    # ID of the subscription once managed by the subscription schedule (if it is released).
    @[NASON::Field(key: "released_subscription", type: String? | Null, nillable: true)]
    property released_subscription : String? | Null

    # ID of the subscription managed by the subscription schedule.
    @[NASON::Field(key: "subscription", type: String | Subscription? | Null, nillable: true)]
    property subscription : String | Subscription? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @created : Int64, @customer : String | Customer | Null, @default_settings : SubscriptionSchedulesResourceDefaultSettings, @end_behavior : String, @id : String, @livemode : Bool, @object : String, @phases : Array(SubscriptionSchedulePhaseConfiguration), @status : String, @canceled_at : Int64? | Null = nil, @completed_at : Int64? | Null = nil, @current_phase : SubscriptionScheduleCurrentPhase? | Null = nil, @metadata : Hash(String, String)? | Null = nil, @released_at : Int64? | Null = nil, @released_subscription : String? | Null = nil, @subscription : String | Subscription? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@released_subscription.nil? && !@released_subscription.null? && @released_subscription.to_s.size > 5000
        invalid_properties.push("invalid value for \"released_subscription\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      end_behavior_validator = EnumAttributeValidator.new("String", ["cancel", "none", "release", "renew"])
      return false unless end_behavior_validator.valid?(@end_behavior)
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["subscription_schedule"])
      return false unless object_validator.valid?(@object)
      return false if !@released_subscription.nil? && !@released_subscription.null? && @released_subscription.to_s.size > 5000
      status_validator = EnumAttributeValidator.new("String", ["active", "canceled", "completed", "not_started", "released"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_behavior Object to be assigned
    def end_behavior=(end_behavior)
      validator = EnumAttributeValidator.new("String", ["cancel", "none", "release", "renew"])
      unless validator.valid?(end_behavior)
        raise ArgumentError.new("invalid value for \"end_behavior\", must be one of #{validator.allowable_values}.")
      end
      @end_behavior = end_behavior
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["subscription_schedule"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] released_subscription Value to be assigned
    def released_subscription=(released_subscription)
      if !released_subscription.nil? && !@released_subscription.null? && released_subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"released_subscription\", the character length must be smaller than or equal to 5000.")
      end

      @released_subscription = released_subscription
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["active", "canceled", "completed", "not_started", "released"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        canceled_at == o.canceled_at &&
        completed_at == o.completed_at &&
        created == o.created &&
        current_phase == o.current_phase &&
        customer == o.customer &&
        default_settings == o.default_settings &&
        end_behavior == o.end_behavior &&
        id == o.id &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        object == o.object &&
        phases == o.phases &&
        released_at == o.released_at &&
        released_subscription == o.released_subscription &&
        status == o.status &&
        subscription == o.subscription
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [canceled_at, completed_at, created, current_phase, customer, default_settings, end_behavior, id, livemode, metadata, object, phases, released_at, released_subscription, status, subscription].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
