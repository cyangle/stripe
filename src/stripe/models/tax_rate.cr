#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.  Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TaxRate
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    @[JSON::Field(key: "active", type: Bool)]
    property active : Bool

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
    @[JSON::Field(key: "display_name", type: String)]
    getter display_name : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # This specifies if the tax rate is inclusive or exclusive.
    @[JSON::Field(key: "inclusive", type: Bool)]
    property inclusive : Bool

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["tax_rate"])

    # This represents the tax rate percent out of 100.
    @[JSON::Field(key: "percentage", type: Float64)]
    property percentage : Float64

    # Optional properties

    # Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    @[JSON::Field(key: "country", type: String?, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String?

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.
    @[JSON::Field(key: "jurisdiction", type: String?, presence: true, ignore_serialize: jurisdiction.nil? && !jurisdiction_present?)]
    getter jurisdiction : String?

    @[JSON::Field(ignore: true)]
    property? jurisdiction_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \"NY\" for New York, United States.
    @[JSON::Field(key: "state", type: String?, presence: true, ignore_serialize: state.nil? && !state_present?)]
    getter state : String?

    @[JSON::Field(ignore: true)]
    property? state_present : Bool = false

    # The high-level tax type, such as `vat` or `sales_tax`.
    @[JSON::Field(key: "tax_type", type: String?, presence: true, ignore_serialize: tax_type.nil? && !tax_type_present?)]
    getter tax_type : String?

    @[JSON::Field(ignore: true)]
    property? tax_type_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_TYPE = EnumValidator.new("tax_type", "String", ["gst", "hst", "jct", "pst", "qst", "rst", "sales_tax", "vat"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @active : Bool,
      @created : Int64,
      @display_name : String,
      @id : String,
      @inclusive : Bool,
      @livemode : Bool,
      @object : String,
      @percentage : Float64,
      # Optional properties
      @country : String? = nil,
      @description : String? = nil,
      @jurisdiction : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @state : String? = nil,
      @tax_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @display_name.to_s.size > 5000
        invalid_properties.push("invalid value for \"display_name\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if !@country.nil? && @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@jurisdiction.nil? && @jurisdiction.to_s.size > 5000
        invalid_properties.push("invalid value for \"jurisdiction\", the character length must be smaller than or equal to 5000.")
      end

      if !@state.nil? && @state.to_s.size > 5000
        invalid_properties.push("invalid value for \"state\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_TYPE.error_message) unless ENUM_VALIDATOR_FOR_TAX_TYPE.valid?(@tax_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @display_name.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if !@country.nil? && @country.to_s.size > 5000
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@jurisdiction.nil? && @jurisdiction.to_s.size > 5000
      return false if !@state.nil? && @state.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_TAX_TYPE.valid?(@tax_type)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name : String)
      if display_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"display_name\", the character length must be smaller than or equal to 5000.")
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country : String?)
      if !country.nil? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description : String?)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] jurisdiction Value to be assigned
    def jurisdiction=(jurisdiction : String?)
      if !jurisdiction.nil? && jurisdiction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"jurisdiction\", the character length must be smaller than or equal to 5000.")
      end

      @jurisdiction = jurisdiction
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state : String?)
      if !state.nil? && state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"state\", the character length must be smaller than or equal to 5000.")
      end

      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_type Object to be assigned
    def tax_type=(tax_type : String?)
      ENUM_VALIDATOR_FOR_TAX_TYPE.valid!(tax_type)
      @tax_type = tax_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @created, @display_name, @id, @inclusive, @livemode, @object, @percentage, @country, @country_present, @description, @description_present, @jurisdiction, @jurisdiction_present, @metadata, @metadata_present, @state, @state_present, @tax_type, @tax_type_present)
  end
end
