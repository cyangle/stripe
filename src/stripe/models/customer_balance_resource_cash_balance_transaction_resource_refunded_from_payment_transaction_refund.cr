#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./fee_refund_balance_transaction"
require "./refund"
require "./refund_charge"
require "./refund_destination_details"
require "./refund_failure_balance_transaction"
require "./refund_next_action"
require "./refund_payment_intent"
require "./refund_source_transfer_reversal"
require "./refund_transfer_reversal"

module Stripe
  # The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance.
  class CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount, in cents (or local equivalent).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::FeeRefundBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property balance_transaction : Stripe::FeeRefundBalanceTransaction? = nil

    @[JSON::Field(key: "charge", type: Stripe::RefundCharge?, default: nil, required: true, nullable: true, emit_null: true)]
    property charge : Stripe::RefundCharge? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [refund]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("refund")

    @[JSON::Field(key: "payment_intent", type: Stripe::RefundPaymentIntent?, default: nil, required: true, nullable: true, emit_null: true)]
    property payment_intent : Stripe::RefundPaymentIntent? = nil

    # Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property reason : String? = nil
    ERROR_MESSAGE_FOR_REASON = "invalid value for \"reason\", must be one of [duplicate, expired_uncaptured_charge, fraudulent, requested_by_customer]."
    VALID_VALUES_FOR_REASON  = String.static_array("duplicate", "expired_uncaptured_charge", "fraudulent", "requested_by_customer")

    # This is the transaction number that appears on email receipts sent for this refund.
    @[JSON::Field(key: "receipt_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property receipt_number : String? = nil
    MAX_LENGTH_FOR_RECEIPT_NUMBER = 5000

    @[JSON::Field(key: "source_transfer_reversal", type: Stripe::RefundSourceTransferReversal?, default: nil, required: true, nullable: true, emit_null: true)]
    property source_transfer_reversal : Stripe::RefundSourceTransferReversal? = nil

    # Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    @[JSON::Field(key: "transfer_reversal", type: Stripe::RefundTransferReversal?, default: nil, required: true, nullable: true, emit_null: true)]
    property transfer_reversal : Stripe::RefundTransferReversal? = nil

    # End of Required Properties

    # Optional Properties

    # An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    @[JSON::Field(key: "destination_details", type: Stripe::RefundDestinationDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    property destination_details : Stripe::RefundDestinationDetails? = nil

    @[JSON::Field(key: "failure_balance_transaction", type: Stripe::RefundFailureBalanceTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property failure_balance_transaction : Stripe::RefundFailureBalanceTransaction? = nil

    # Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
    @[JSON::Field(key: "failure_reason", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property failure_reason : String? = nil
    MAX_LENGTH_FOR_FAILURE_REASON = 5000

    # For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
    @[JSON::Field(key: "instructions_email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property instructions_email : String? = nil
    MAX_LENGTH_FOR_INSTRUCTIONS_EMAIL = 5000

    @[JSON::Field(key: "next_action", type: Stripe::RefundNextAction?, default: nil, required: false, nullable: false, emit_null: false)]
    property next_action : Stripe::RefundNextAction? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Refund,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @balance_transaction : Stripe::FeeRefundBalanceTransaction? = nil,
      @charge : Stripe::RefundCharge? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @id : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @payment_intent : Stripe::RefundPaymentIntent? = nil,
      @reason : String? = nil,
      @receipt_number : String? = nil,
      @source_transfer_reversal : Stripe::RefundSourceTransferReversal? = nil,
      @status : String? = nil,
      @transfer_reversal : Stripe::RefundTransferReversal? = nil,
      # Optional properties
      @description : String? = nil,
      @destination_details : Stripe::RefundDestinationDetails? = nil,
      @failure_balance_transaction : Stripe::RefundFailureBalanceTransaction? = nil,
      @failure_reason : String? = nil,
      @instructions_email : String? = nil,
      @next_action : Stripe::RefundNextAction? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @balance_transaction, @charge, @created, @currency, @id, @metadata, @object, @payment_intent, @reason, @receipt_number, @source_transfer_reversal, @status, @transfer_reversal, @description, @destination_details, @failure_balance_transaction, @failure_reason, @instructions_email, @next_action)
  end
end
