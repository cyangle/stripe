#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Represents a reader action to process a setup intent
  class TerminalReaderReaderResourceProcessSetupIntentAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "setup_intent", type: Stripe::TerminalReaderReaderResourceProcessSetupIntentActionSetupIntent?, default: nil, required: true, nullable: false, emit_null: false)]
    getter setup_intent : Stripe::TerminalReaderReaderResourceProcessSetupIntentActionSetupIntent? = nil

    # End of Required Properties

    # Optional Properties

    # ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
    @[JSON::Field(key: "generated_card", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter generated_card : String? = nil
    MAX_LENGTH_FOR_GENERATED_CARD = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @setup_intent : Stripe::TerminalReaderReaderResourceProcessSetupIntentActionSetupIntent? = nil,
      # Optional properties
      @generated_card : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"setup_intent\" is required and cannot be null") if @setup_intent.nil?

      unless (_setup_intent = @setup_intent).nil?
        invalid_properties.concat(_setup_intent.list_invalid_properties_for("setup_intent")) if _setup_intent.is_a?(OpenApi::Validatable)
      end
      unless (_generated_card = @generated_card).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("generated_card", _generated_card.to_s.size, MAX_LENGTH_FOR_GENERATED_CARD)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @setup_intent.nil?
      unless (_setup_intent = @setup_intent).nil?
        return false if _setup_intent.is_a?(OpenApi::Validatable) && !_setup_intent.valid?
      end

      unless (_generated_card = @generated_card).nil?
        return false if _generated_card.to_s.size > MAX_LENGTH_FOR_GENERATED_CARD
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_intent Object to be assigned
    def setup_intent=(setup_intent : Stripe::TerminalReaderReaderResourceProcessSetupIntentActionSetupIntent?)
      if setup_intent.nil?
        raise ArgumentError.new("\"setup_intent\" is required and cannot be null")
      end
      _setup_intent = setup_intent.not_nil!
      _setup_intent.validate if _setup_intent.is_a?(OpenApi::Validatable)
      @setup_intent = _setup_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] generated_card Object to be assigned
    def generated_card=(generated_card : String?)
      if generated_card.nil?
        return @generated_card = nil
      end
      _generated_card = generated_card.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("generated_card", _generated_card.to_s.size, MAX_LENGTH_FOR_GENERATED_CARD)
      @generated_card = _generated_card
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@setup_intent, @generated_card)
  end
end
