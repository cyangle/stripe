#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class TaxAmountWithTaxRateParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The amount, in cents (or local equivalent), of the tax.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # The id of the tax rate for this tax amount. The tax rate must have been automatically created by Stripe.
    @[JSON::Field(key: "tax_rate", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_rate : String? = nil
    MAX_LENGTH_FOR_TAX_RATE = 5000

    # The amount on which tax is calculated, in cents (or local equivalent).
    @[JSON::Field(key: "taxable_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter taxable_amount : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @tax_rate : String? = nil,
      @taxable_amount : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"tax_rate\" is required and cannot be null") if @tax_rate.nil?

      unless (_tax_rate = @tax_rate).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("tax_rate", _tax_rate.to_s.size, MAX_LENGTH_FOR_TAX_RATE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"taxable_amount\" is required and cannot be null") if @taxable_amount.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @tax_rate.nil?
      unless (_tax_rate = @tax_rate).nil?
        return false if _tax_rate.to_s.size > MAX_LENGTH_FOR_TAX_RATE
      end

      return false if @taxable_amount.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_rate Object to be assigned
    def tax_rate=(new_value : String?)
      raise ArgumentError.new("\"tax_rate\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("tax_rate", new_value.to_s.size, MAX_LENGTH_FOR_TAX_RATE)
      end

      @tax_rate = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] taxable_amount Object to be assigned
    def taxable_amount=(new_value : Int64?)
      raise ArgumentError.new("\"taxable_amount\" is required and cannot be null") if new_value.nil?

      @taxable_amount = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @tax_rate, @taxable_amount)
  end
end
