#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class LegalEntityPersonVerification
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    # Optional properties
    @[JSON::Field(key: "additional_document", type: LegalEntityPersonVerificationAdditionalDocument?, presence: true, ignore_serialize: additional_document.nil? && !additional_document_present?)]
    property additional_document : LegalEntityPersonVerificationAdditionalDocument?

    @[JSON::Field(ignore: true)]
    property? additional_document_present : Bool = false

    # A user-displayable string describing the verification state for the person. For example, this may say \"Provided identity information could not be verified\".
    @[JSON::Field(key: "details", type: String?, presence: true, ignore_serialize: details.nil? && !details_present?)]
    getter details : String?

    @[JSON::Field(ignore: true)]
    property? details_present : Bool = false

    # One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
    @[JSON::Field(key: "details_code", type: String?, presence: true, ignore_serialize: details_code.nil? && !details_code_present?)]
    getter details_code : String?

    @[JSON::Field(ignore: true)]
    property? details_code_present : Bool = false

    @[JSON::Field(key: "document", type: LegalEntityPersonVerificationDocument?, presence: true, ignore_serialize: document.nil? && !document_present?)]
    property document : LegalEntityPersonVerificationDocument?

    @[JSON::Field(ignore: true)]
    property? document_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @status : String, @additional_document : LegalEntityPersonVerificationAdditionalDocument? = nil, @details : String? = nil, @details_code : String? = nil, @document : LegalEntityPersonVerificationDocument? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@details.nil? && @details.to_s.size > 5000
        invalid_properties.push("invalid value for \"details\", the character length must be smaller than or equal to 5000.")
      end

      if !@details_code.nil? && @details_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"details_code\", the character length must be smaller than or equal to 5000.")
      end

      if @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@details.nil? && @details.to_s.size > 5000
      return false if !@details_code.nil? && @details_code.to_s.size > 5000
      return false if @status.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] details Value to be assigned
    def details=(details)
      if !details.nil? && details.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"details\", the character length must be smaller than or equal to 5000.")
      end

      @details = details
    end

    # Custom attribute writer method with validation
    # @param [Object] details_code Value to be assigned
    def details_code=(details_code)
      if !details_code.nil? && details_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"details_code\", the character length must be smaller than or equal to 5000.")
      end

      @details_code = details_code
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        additional_document == o.additional_document &&
        details == o.details &&
        details_code == o.details_code &&
        document == o.document &&
        status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@additional_document, @details, @details_code, @document, @status)
  end
end
