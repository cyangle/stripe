#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Canceled
    include JSON::Serializable
    include JSON::Serializable::Unmapped


    # Optional properties

    @[JSON::Field(key: "additional_documentation", type: BusinessProfileSpecsSupportUrl?, presence: true, ignore_serialize: additional_documentation.nil? && !additional_documentation_present?)]
    property additional_documentation : BusinessProfileSpecsSupportUrl?

    @[JSON::Field(ignore: true)]
    property? additional_documentation_present : Bool = false

    @[JSON::Field(key: "canceled_at", type: GetInvoicesUpcomingSubscriptionCancelAtParameter?, presence: true, ignore_serialize: canceled_at.nil? && !canceled_at_present?)]
    property canceled_at : GetInvoicesUpcomingSubscriptionCancelAtParameter?

    @[JSON::Field(ignore: true)]
    property? canceled_at_present : Bool = false

    @[JSON::Field(key: "cancellation_policy_provided", type: CanceledCancellationPolicyProvided?, presence: true, ignore_serialize: cancellation_policy_provided.nil? && !cancellation_policy_provided_present?)]
    property cancellation_policy_provided : CanceledCancellationPolicyProvided?

    @[JSON::Field(ignore: true)]
    property? cancellation_policy_provided_present : Bool = false

    @[JSON::Field(key: "cancellation_reason", type: String?, presence: true, ignore_serialize: cancellation_reason.nil? && !cancellation_reason_present?)]
    getter cancellation_reason : String?

    @[JSON::Field(ignore: true)]
    property? cancellation_reason_present : Bool = false

    @[JSON::Field(key: "expected_at", type: GetInvoicesUpcomingSubscriptionCancelAtParameter?, presence: true, ignore_serialize: expected_at.nil? && !expected_at_present?)]
    property expected_at : GetInvoicesUpcomingSubscriptionCancelAtParameter?

    @[JSON::Field(ignore: true)]
    property? expected_at_present : Bool = false

    @[JSON::Field(key: "explanation", type: String?, presence: true, ignore_serialize: explanation.nil? && !explanation_present?)]
    getter explanation : String?

    @[JSON::Field(ignore: true)]
    property? explanation_present : Bool = false

    @[JSON::Field(key: "product_description", type: String?, presence: true, ignore_serialize: product_description.nil? && !product_description_present?)]
    getter product_description : String?

    @[JSON::Field(ignore: true)]
    property? product_description_present : Bool = false

    @[JSON::Field(key: "product_type", type: String?, presence: true, ignore_serialize: product_type.nil? && !product_type_present?)]
    getter product_type : String?

    @[JSON::Field(ignore: true)]
    property? product_type_present : Bool = false

    ENUM_VALIDATOR_FOR_PRODUCT_TYPE = EnumValidator.new("product_type", "String", ["", "merchandise", "service"])

    @[JSON::Field(key: "return_status", type: String?, presence: true, ignore_serialize: return_status.nil? && !return_status_present?)]
    getter return_status : String?

    @[JSON::Field(ignore: true)]
    property? return_status_present : Bool = false

    ENUM_VALIDATOR_FOR_RETURN_STATUS = EnumValidator.new("return_status", "String", ["", "merchant_rejected", "successful"])

    @[JSON::Field(key: "returned_at", type: GetInvoicesUpcomingSubscriptionCancelAtParameter?, presence: true, ignore_serialize: returned_at.nil? && !returned_at_present?)]
    property returned_at : GetInvoicesUpcomingSubscriptionCancelAtParameter?

    @[JSON::Field(ignore: true)]
    property? returned_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Optional properties
      @additional_documentation : BusinessProfileSpecsSupportUrl? = nil, 
      @canceled_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, 
      @cancellation_policy_provided : CanceledCancellationPolicyProvided? = nil, 
      @cancellation_reason : String? = nil, 
      @expected_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, 
      @explanation : String? = nil, 
      @product_description : String? = nil, 
      @product_type : String? = nil, 
      @return_status : String? = nil, 
      @returned_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@cancellation_reason.nil? && @cancellation_reason.to_s.size > 1500
        invalid_properties.push("invalid value for \"cancellation_reason\", the character length must be smaller than or equal to 1500.")
      end

      if !@explanation.nil? && @explanation.to_s.size > 1500
        invalid_properties.push("invalid value for \"explanation\", the character length must be smaller than or equal to 1500.")
      end

      if !@product_description.nil? && @product_description.to_s.size > 1500
        invalid_properties.push("invalid value for \"product_description\", the character length must be smaller than or equal to 1500.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_PRODUCT_TYPE.error_message) unless ENUM_VALIDATOR_FOR_PRODUCT_TYPE.valid?(@product_type)

      invalid_properties.push(ENUM_VALIDATOR_FOR_RETURN_STATUS.error_message) unless ENUM_VALIDATOR_FOR_RETURN_STATUS.valid?(@return_status)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@cancellation_reason.nil? && @cancellation_reason.to_s.size > 1500
      return false if !@explanation.nil? && @explanation.to_s.size > 1500
      return false if !@product_description.nil? && @product_description.to_s.size > 1500
      return false unless ENUM_VALIDATOR_FOR_PRODUCT_TYPE.valid?(@product_type)
      return false unless ENUM_VALIDATOR_FOR_RETURN_STATUS.valid?(@return_status)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cancellation_reason Value to be assigned
    def cancellation_reason=(cancellation_reason)
      if !cancellation_reason.nil? && cancellation_reason.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"cancellation_reason\", the character length must be smaller than or equal to 1500.")
      end

      @cancellation_reason = cancellation_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] explanation Value to be assigned
    def explanation=(explanation)
      if !explanation.nil? && explanation.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"explanation\", the character length must be smaller than or equal to 1500.")
      end

      @explanation = explanation
    end

    # Custom attribute writer method with validation
    # @param [Object] product_description Value to be assigned
    def product_description=(product_description)
      if !product_description.nil? && product_description.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"product_description\", the character length must be smaller than or equal to 1500.")
      end

      @product_description = product_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_type Object to be assigned
    def product_type=(product_type)
      ENUM_VALIDATOR_FOR_PRODUCT_TYPE.valid!(product_type)
      @product_type = product_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_status Object to be assigned
    def return_status=(return_status)
      ENUM_VALIDATOR_FOR_RETURN_STATUS.valid!(return_status)
      @return_status = return_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@additional_documentation, @canceled_at, @cancellation_policy_provided, @cancellation_reason, @expected_at, @explanation, @product_description, @product_type, @return_status, @returned_at)
  end
end
