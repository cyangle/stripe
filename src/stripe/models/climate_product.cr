#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./climate_removals_products_price"
require "./climate_supplier"

module Stripe
  # A Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.
  class ClimateProduct
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Current prices for a metric ton of carbon removal in a currency's smallest unit.
    @[JSON::Field(key: "current_prices_per_metric_ton", type: Hash(String, Stripe::ClimateRemovalsProductsPrice)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter current_prices_per_metric_ton : Hash(String, Stripe::ClimateRemovalsProductsPrice)? = nil

    # The year in which the carbon removal is expected to be delivered.
    @[JSON::Field(key: "delivery_year", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter delivery_year : Int64? = nil

    # Unique identifier for the object. For convenience, Climate product IDs are human-readable strings that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory) for a list of available carbon removal products.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The quantity of metric tons available for reservation.
    @[JSON::Field(key: "metric_tons_available", type: BigDecimal?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metric_tons_available : BigDecimal? = nil

    # The Climate product's name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [climate.product]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("climate.product")

    # The carbon removal suppliers that fulfill orders for this Climate product.
    @[JSON::Field(key: "suppliers", type: Array(Stripe::ClimateSupplier)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter suppliers : Array(Stripe::ClimateSupplier)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @current_prices_per_metric_ton : Hash(String, Stripe::ClimateRemovalsProductsPrice)? = nil,
      @delivery_year : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metric_tons_available : BigDecimal? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @suppliers : Array(Stripe::ClimateSupplier)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"current_prices_per_metric_ton\" is required and cannot be null") if @current_prices_per_metric_ton.nil?

      unless (_current_prices_per_metric_ton = @current_prices_per_metric_ton).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "current_prices_per_metric_ton", container: _current_prices_per_metric_ton)) if _current_prices_per_metric_ton.is_a?(Hash)
      end

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metric_tons_available\" is required and cannot be null") if @metric_tons_available.nil?

      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"suppliers\" is required and cannot be null") if @suppliers.nil?

      unless (_suppliers = @suppliers).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "suppliers", container: _suppliers)) if _suppliers.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @current_prices_per_metric_ton.nil?
      unless (_current_prices_per_metric_ton = @current_prices_per_metric_ton).nil?
        return false if _current_prices_per_metric_ton.is_a?(Hash) && !OpenApi::ContainerValidator.valid?(container: _current_prices_per_metric_ton)
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @metric_tons_available.nil?

      return false if @name.nil?
      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @suppliers.nil?
      unless (_suppliers = @suppliers).nil?
        return false if _suppliers.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _suppliers)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_prices_per_metric_ton Object to be assigned
    def current_prices_per_metric_ton=(new_value : Hash(String, Stripe::ClimateRemovalsProductsPrice)?)
      raise ArgumentError.new("\"current_prices_per_metric_ton\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Hash)
      end

      @current_prices_per_metric_ton = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delivery_year Object to be assigned
    def delivery_year=(new_value : Int64?)
      @delivery_year = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metric_tons_available Object to be assigned
    def metric_tons_available=(new_value : BigDecimal?)
      raise ArgumentError.new("\"metric_tons_available\" is required and cannot be null") if new_value.nil?

      @metric_tons_available = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("name", new_value.to_s.size, MAX_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] suppliers Object to be assigned
    def suppliers=(new_value : Array(Stripe::ClimateSupplier)?)
      raise ArgumentError.new("\"suppliers\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @suppliers = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @current_prices_per_metric_ton, @delivery_year, @id, @livemode, @metric_tons_available, @name, @object, @suppliers)
  end
end
