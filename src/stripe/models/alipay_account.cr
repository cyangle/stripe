#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AlipayAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
    @[JSON::Field(key: "fingerprint", type: String)]
    getter fingerprint : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["alipay_account"])

    # True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
    @[JSON::Field(key: "reusable", type: Bool)]
    property reusable : Bool

    # Whether this Alipay account object has ever been used for a payment.
    @[JSON::Field(key: "used", type: Bool)]
    property used : Bool

    # The username for the Alipay account.
    @[JSON::Field(key: "username", type: String)]
    getter username : String

    # Optional properties

    @[JSON::Field(key: "customer", type: AlipayAccountCustomer?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    property customer : AlipayAccountCustomer?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # If the Alipay account object is not reusable, the exact amount that you can create a charge for.
    @[JSON::Field(key: "payment_amount", type: Int64?, presence: true, ignore_serialize: payment_amount.nil? && !payment_amount_present?)]
    property payment_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? payment_amount_present : Bool = false

    # If the Alipay account object is not reusable, the exact currency that you can create a charge for.
    @[JSON::Field(key: "payment_currency", type: String?, presence: true, ignore_serialize: payment_currency.nil? && !payment_currency_present?)]
    property payment_currency : String?

    @[JSON::Field(ignore: true)]
    property? payment_currency_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64,
      @fingerprint : String,
      @id : String,
      @livemode : Bool,
      @object : String,
      @reusable : Bool,
      @used : Bool,
      @username : String,
      # Optional properties
      @customer : AlipayAccountCustomer? = nil,
      @metadata : Hash(String, String)? = nil,
      @payment_amount : Int64? = nil,
      @payment_currency : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @fingerprint.to_s.size > 5000
        invalid_properties.push("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @username.to_s.size > 5000
        invalid_properties.push("invalid value for \"username\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @fingerprint.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @username.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] fingerprint Value to be assigned
    def fingerprint=(fingerprint)
      if fingerprint.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      @fingerprint = fingerprint
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] username Value to be assigned
    def username=(username)
      if username.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"username\", the character length must be smaller than or equal to 5000.")
      end

      @username = username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @fingerprint, @id, @livemode, @object, @reusable, @used, @username, @customer, @metadata, @payment_amount, @payment_currency)
  end
end
