#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./tax_product_resource_jurisdiction"
require "./tax_product_resource_line_item_tax_rate_details"

module Stripe
  #
  class TaxProductResourceLineItemTaxBreakdown
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    @[JSON::Field(key: "jurisdiction", type: Stripe::TaxProductResourceJurisdiction?, default: nil, required: true, nullable: false, emit_null: false)]
    getter jurisdiction : Stripe::TaxProductResourceJurisdiction? = nil

    # Indicates whether the jurisdiction was determined by the origin (merchant's address) or destination (customer's address).
    @[JSON::Field(key: "sourcing", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter sourcing : String? = nil
    ERROR_MESSAGE_FOR_SOURCING = "invalid value for \"sourcing\", must be one of [destination, origin]."
    VALID_VALUES_FOR_SOURCING  = String.static_array("destination", "origin")

    @[JSON::Field(key: "tax_rate_details", type: Stripe::TaxProductResourceLineItemTaxRateDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter tax_rate_details : Stripe::TaxProductResourceLineItemTaxRateDetails? = nil

    # The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
    @[JSON::Field(key: "taxability_reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter taxability_reason : String? = nil
    ERROR_MESSAGE_FOR_TAXABILITY_REASON = "invalid value for \"taxability_reason\", must be one of [customer_exempt, not_collecting, not_subject_to_tax, not_supported, portion_product_exempt, portion_reduced_rated, portion_standard_rated, product_exempt, product_exempt_holiday, proportionally_rated, reduced_rated, reverse_charge, standard_rated, taxable_basis_reduced, zero_rated]."
    VALID_VALUES_FOR_TAXABILITY_REASON  = String.static_array("customer_exempt", "not_collecting", "not_subject_to_tax", "not_supported", "portion_product_exempt", "portion_reduced_rated", "portion_standard_rated", "product_exempt", "product_exempt_holiday", "proportionally_rated", "reduced_rated", "reverse_charge", "standard_rated", "taxable_basis_reduced", "zero_rated")

    # The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "taxable_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter taxable_amount : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @jurisdiction : Stripe::TaxProductResourceJurisdiction? = nil,
      @sourcing : String? = nil,
      @tax_rate_details : Stripe::TaxProductResourceLineItemTaxRateDetails? = nil,
      @taxability_reason : String? = nil,
      @taxable_amount : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"jurisdiction\" is required and cannot be null") if @jurisdiction.nil?

      unless (_jurisdiction = @jurisdiction).nil?
        invalid_properties.concat(_jurisdiction.list_invalid_properties_for("jurisdiction")) if _jurisdiction.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"sourcing\" is required and cannot be null") if @sourcing.nil?

      unless (_sourcing = @sourcing).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SOURCING) unless OpenApi::EnumValidator.valid?(_sourcing, VALID_VALUES_FOR_SOURCING)
      end
      unless (_tax_rate_details = @tax_rate_details).nil?
        invalid_properties.concat(_tax_rate_details.list_invalid_properties_for("tax_rate_details")) if _tax_rate_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"taxability_reason\" is required and cannot be null") if @taxability_reason.nil?

      unless (_taxability_reason = @taxability_reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_TAXABILITY_REASON) unless OpenApi::EnumValidator.valid?(_taxability_reason, VALID_VALUES_FOR_TAXABILITY_REASON)
      end
      invalid_properties.push("\"taxable_amount\" is required and cannot be null") if @taxable_amount.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @jurisdiction.nil?
      unless (_jurisdiction = @jurisdiction).nil?
        return false if _jurisdiction.is_a?(OpenApi::Validatable) && !_jurisdiction.valid?
      end

      return false if @sourcing.nil?
      unless (_sourcing = @sourcing).nil?
        return false unless OpenApi::EnumValidator.valid?(_sourcing, VALID_VALUES_FOR_SOURCING)
      end

      unless (_tax_rate_details = @tax_rate_details).nil?
        return false if _tax_rate_details.is_a?(OpenApi::Validatable) && !_tax_rate_details.valid?
      end

      return false if @taxability_reason.nil?
      unless (_taxability_reason = @taxability_reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_taxability_reason, VALID_VALUES_FOR_TAXABILITY_REASON)
      end

      return false if @taxable_amount.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jurisdiction Object to be assigned
    def jurisdiction=(new_value : Stripe::TaxProductResourceJurisdiction?)
      raise ArgumentError.new("\"jurisdiction\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @jurisdiction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sourcing Object to be assigned
    def sourcing=(new_value : String?)
      raise ArgumentError.new("\"sourcing\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("sourcing", new_value, VALID_VALUES_FOR_SOURCING)
      end

      @sourcing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_rate_details Object to be assigned
    def tax_rate_details=(new_value : Stripe::TaxProductResourceLineItemTaxRateDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_rate_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] taxability_reason Object to be assigned
    def taxability_reason=(new_value : String?)
      raise ArgumentError.new("\"taxability_reason\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("taxability_reason", new_value, VALID_VALUES_FOR_TAXABILITY_REASON)
      end

      @taxability_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] taxable_amount Object to be assigned
    def taxable_amount=(new_value : Int64?)
      raise ArgumentError.new("\"taxable_amount\" is required and cannot be null") if new_value.nil?

      @taxable_amount = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @jurisdiction, @sourcing, @tax_rate_details, @taxability_reason, @taxable_amount)
  end
end
