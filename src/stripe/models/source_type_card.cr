#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class SourceTypeCard
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "address_line1_check", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address_line1_check.nil? && !address_line1_check_present?)]
    getter address_line1_check : String? = nil

    @[JSON::Field(ignore: true)]
    property? address_line1_check_present : Bool = false

    @[JSON::Field(key: "address_zip_check", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address_zip_check.nil? && !address_zip_check_present?)]
    getter address_zip_check : String? = nil

    @[JSON::Field(ignore: true)]
    property? address_zip_check_present : Bool = false

    @[JSON::Field(key: "brand", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: brand.nil? && !brand_present?)]
    getter brand : String? = nil

    @[JSON::Field(ignore: true)]
    property? brand_present : Bool = false

    @[JSON::Field(key: "country", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String? = nil

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    @[JSON::Field(key: "cvc_check", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cvc_check.nil? && !cvc_check_present?)]
    getter cvc_check : String? = nil

    @[JSON::Field(ignore: true)]
    property? cvc_check_present : Bool = false

    @[JSON::Field(key: "dynamic_last4", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: dynamic_last4.nil? && !dynamic_last4_present?)]
    getter dynamic_last4 : String? = nil

    @[JSON::Field(ignore: true)]
    property? dynamic_last4_present : Bool = false

    @[JSON::Field(key: "exp_month", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: exp_month.nil? && !exp_month_present?)]
    getter exp_month : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? exp_month_present : Bool = false

    @[JSON::Field(key: "exp_year", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: exp_year.nil? && !exp_year_present?)]
    getter exp_year : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? exp_year_present : Bool = false

    @[JSON::Field(key: "fingerprint", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fingerprint : String? = nil

    @[JSON::Field(key: "funding", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: funding.nil? && !funding_present?)]
    getter funding : String? = nil

    @[JSON::Field(ignore: true)]
    property? funding_present : Bool = false

    @[JSON::Field(key: "last4", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last4.nil? && !last4_present?)]
    getter last4 : String? = nil

    @[JSON::Field(ignore: true)]
    property? last4_present : Bool = false

    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String? = nil

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    @[JSON::Field(key: "three_d_secure", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter three_d_secure : String? = nil

    @[JSON::Field(key: "tokenization_method", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tokenization_method.nil? && !tokenization_method_present?)]
    getter tokenization_method : String? = nil

    @[JSON::Field(ignore: true)]
    property? tokenization_method_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @address_line1_check : String? = nil,
      @address_zip_check : String? = nil,
      @brand : String? = nil,
      @country : String? = nil,
      @cvc_check : String? = nil,
      @dynamic_last4 : String? = nil,
      @exp_month : Int64? = nil,
      @exp_year : Int64? = nil,
      @fingerprint : String? = nil,
      @funding : String? = nil,
      @last4 : String? = nil,
      @name : String? = nil,
      @three_d_secure : String? = nil,
      @tokenization_method : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_line1_check Object to be assigned
    def address_line1_check=(address_line1_check : String?)
      if address_line1_check.nil?
        return @address_line1_check = nil
      end
      _address_line1_check = address_line1_check.not_nil!
      @address_line1_check = _address_line1_check
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_zip_check Object to be assigned
    def address_zip_check=(address_zip_check : String?)
      if address_zip_check.nil?
        return @address_zip_check = nil
      end
      _address_zip_check = address_zip_check.not_nil!
      @address_zip_check = _address_zip_check
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] brand Object to be assigned
    def brand=(brand : String?)
      if brand.nil?
        return @brand = nil
      end
      _brand = brand.not_nil!
      @brand = _brand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(country : String?)
      if country.nil?
        return @country = nil
      end
      _country = country.not_nil!
      @country = _country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc_check Object to be assigned
    def cvc_check=(cvc_check : String?)
      if cvc_check.nil?
        return @cvc_check = nil
      end
      _cvc_check = cvc_check.not_nil!
      @cvc_check = _cvc_check
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dynamic_last4 Object to be assigned
    def dynamic_last4=(dynamic_last4 : String?)
      if dynamic_last4.nil?
        return @dynamic_last4 = nil
      end
      _dynamic_last4 = dynamic_last4.not_nil!
      @dynamic_last4 = _dynamic_last4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exp_month Object to be assigned
    def exp_month=(exp_month : Int64?)
      if exp_month.nil?
        return @exp_month = nil
      end
      _exp_month = exp_month.not_nil!
      @exp_month = _exp_month
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exp_year Object to be assigned
    def exp_year=(exp_year : Int64?)
      if exp_year.nil?
        return @exp_year = nil
      end
      _exp_year = exp_year.not_nil!
      @exp_year = _exp_year
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fingerprint Object to be assigned
    def fingerprint=(fingerprint : String?)
      if fingerprint.nil?
        return @fingerprint = nil
      end
      _fingerprint = fingerprint.not_nil!
      @fingerprint = _fingerprint
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding Object to be assigned
    def funding=(funding : String?)
      if funding.nil?
        return @funding = nil
      end
      _funding = funding.not_nil!
      @funding = _funding
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last4 Object to be assigned
    def last4=(last4 : String?)
      if last4.nil?
        return @last4 = nil
      end
      _last4 = last4.not_nil!
      @last4 = _last4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        return @name = nil
      end
      _name = name.not_nil!
      @name = _name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] three_d_secure Object to be assigned
    def three_d_secure=(three_d_secure : String?)
      if three_d_secure.nil?
        return @three_d_secure = nil
      end
      _three_d_secure = three_d_secure.not_nil!
      @three_d_secure = _three_d_secure
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tokenization_method Object to be assigned
    def tokenization_method=(tokenization_method : String?)
      if tokenization_method.nil?
        return @tokenization_method = nil
      end
      _tokenization_method = tokenization_method.not_nil!
      @tokenization_method = _tokenization_method
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address_line1_check, @address_line1_check_present, @address_zip_check, @address_zip_check_present, @brand, @brand_present, @country, @country_present, @cvc_check, @cvc_check_present, @dynamic_last4, @dynamic_last4_present, @exp_month, @exp_month_present, @exp_year, @exp_year_present, @fingerprint, @funding, @funding_present, @last4, @last4_present, @name, @name_present, @three_d_secure, @tokenization_method, @tokenization_method_present)
  end
end
