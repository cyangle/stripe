#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class ShippingRateDeliveryEstimateBound
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # A unit of time.
    @[JSON::Field(key: "unit", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter unit : String? = nil

    ENUM_VALIDATOR_FOR_UNIT = EnumValidator.new("unit", "String", ["business_day", "day", "hour", "month", "week"])

    # Must be greater than 0.
    @[JSON::Field(key: "value", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter value : Int64? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @unit : String? = nil,
      @value : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_UNIT.error_message) unless ENUM_VALIDATOR_FOR_UNIT.valid?(@unit, false)
      invalid_properties.push("\"value\" is required and cannot be null") if @value.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_UNIT.valid?(@unit, false)
      return false if @value.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit Object to be assigned
    def unit=(unit : String?)
      if unit.nil?
        raise ArgumentError.new("\"unit\" is required and cannot be null")
      end
      _unit = unit.not_nil!
      ENUM_VALIDATOR_FOR_UNIT.valid!(_unit)
      @unit = unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value Object to be assigned
    def value=(value : Int64?)
      if value.nil?
        raise ArgumentError.new("\"value\" is required and cannot be null")
      end
      @value = value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@unit, @value)
  end
end
