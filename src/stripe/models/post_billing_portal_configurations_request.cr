#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostBillingPortalConfigurationsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "business_profile", type: BusinessProfileCreateParam)]
    property business_profile : BusinessProfileCreateParam

    @[JSON::Field(key: "features", type: FeaturesCreationParam)]
    property features : FeaturesCreationParam

    # Optional properties
    @[JSON::Field(key: "default_return_url", type: PostBillingPortalConfigurationsRequestDefaultReturnUrl?, presence: true, ignore_serialize: default_return_url.nil? && !default_return_url_present?)]
    property default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl?

    @[JSON::Field(ignore: true)]
    property? default_return_url_present : Bool = false

    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @business_profile : BusinessProfileCreateParam, @features : FeaturesCreationParam, @default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, @expand : Array(String)? = nil, @metadata : Hash(String, String)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        business_profile == o.business_profile &&
        default_return_url == o.default_return_url &&
        expand == o.expand &&
        features == o.features &&
        metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@business_profile, @default_return_url, @expand, @features, @metadata)
  end
end
