#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # The most recent information about the account's balance.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FinancialConnectionsAccountBalance
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "as_of", type: Int64?)]
    property as_of : Int64?

    # The balances owed to (or by) the account holder.  Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.  Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
    @[JSON::Field(key: "current", type: Hash(String, Int64)?)]
    property current : Hash(String, Int64)?

    # The `type` of the balance. An additional hash is included on the balance with a name matching this value.
    @[JSON::Field(key: "type", type: String?)]
    getter _type : String?

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["cash", "credit"])

    # Optional properties
    @[JSON::Field(key: "cash", type: BankConnectionsResourceBalanceApiResourceCashBalance?, presence: true, ignore_serialize: cash.nil? && !cash_present?)]
    property cash : BankConnectionsResourceBalanceApiResourceCashBalance?

    @[JSON::Field(ignore: true)]
    property? cash_present : Bool = false

    @[JSON::Field(key: "credit", type: BankConnectionsResourceBalanceApiResourceCreditBalance?, presence: true, ignore_serialize: credit.nil? && !credit_present?)]
    property credit : BankConnectionsResourceBalanceApiResourceCreditBalance?

    @[JSON::Field(ignore: true)]
    property? credit_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::BankConnectionsResourceBalance,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @as_of : Int64, @current : Hash(String, Int64), @_type : String, @cash : BankConnectionsResourceBalanceApiResourceCashBalance? = nil, @credit : BankConnectionsResourceBalanceApiResourceCreditBalance? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        as_of == o.as_of &&
        cash == o.cash &&
        credit == o.credit &&
        current == o.current &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@as_of, @cash, @credit, @current, @_type)
  end
end
