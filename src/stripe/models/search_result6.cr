#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SearchResult6
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "data", type: Array(Subscription))]
    property data : Array(Subscription)

    @[JSON::Field(key: "has_more", type: Bool)]
    property has_more : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["search_result"])

    @[JSON::Field(key: "url", type: String)]
    getter url : String

    # Optional properties

    @[JSON::Field(key: "next_page", type: String?, presence: true, ignore_serialize: next_page.nil? && !next_page_present?)]
    getter next_page : String?

    @[JSON::Field(ignore: true)]
    property? next_page_present : Bool = false

    # The total number of objects that match the query, only accurate up to 10,000.
    @[JSON::Field(key: "total_count", type: Int64?, presence: true, ignore_serialize: total_count.nil? && !total_count_present?)]
    property total_count : Int64?

    @[JSON::Field(ignore: true)]
    property? total_count_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @data : Array(Subscription),
      @has_more : Bool,
      @object : String,
      @url : String,
      # Optional properties
      @next_page : String? = nil,
      @total_count : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @url.to_s.size > 5000
        invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      if !@next_page.nil? && @next_page.to_s.size > 5000
        invalid_properties.push("invalid value for \"next_page\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @url.to_s.size > 5000
      return false if !@next_page.nil? && @next_page.to_s.size > 5000

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = url
    end

    # Custom attribute writer method with validation
    # @param [Object] next_page Value to be assigned
    def next_page=(next_page)
      if !next_page.nil? && next_page.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"next_page\", the character length must be smaller than or equal to 5000.")
      end

      @next_page = next_page
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@data, @has_more, @object, @url, @next_page, @total_count)
  end
end
