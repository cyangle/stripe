#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class DisplayPreferenceParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The account's preference for whether or not to display this payment method.
    @[JSON::Field(key: "preference", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter preference : String? = nil
    ERROR_MESSAGE_FOR_PREFERENCE = "invalid value for \"preference\", must be one of [none, off, on]."
    VALID_VALUES_FOR_PREFERENCE  = String.static_array("none", "off", "on")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @preference : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_preference = @preference).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PREFERENCE) unless OpenApi::EnumValidator.valid?(_preference, VALID_VALUES_FOR_PREFERENCE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_preference = @preference).nil?
        return false unless OpenApi::EnumValidator.valid?(_preference, VALID_VALUES_FOR_PREFERENCE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preference Object to be assigned
    def preference=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("preference", new_value, VALID_VALUES_FOR_PREFERENCE)
      end

      @preference = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@preference)
  end
end
