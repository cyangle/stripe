#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SourceOwnerVerifiedAddress
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # City, district, suburb, town, or village.
    @[JSON::Field(key: "city", type: String, presence: true, ignore_serialize: city.nil? && !city_present?)]
    getter city : String

    @[JSON::Field(ignore: true)]
    property? city_present : Bool = false

    # Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    @[JSON::Field(key: "country", type: String, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # Address line 1 (e.g., street, PO Box, or company name).
    @[JSON::Field(key: "line1", type: String, presence: true, ignore_serialize: line1.nil? && !line1_present?)]
    getter line1 : String

    @[JSON::Field(ignore: true)]
    property? line1_present : Bool = false

    # Address line 2 (e.g., apartment, suite, unit, or building).
    @[JSON::Field(key: "line2", type: String, presence: true, ignore_serialize: line2.nil? && !line2_present?)]
    getter line2 : String

    @[JSON::Field(ignore: true)]
    property? line2_present : Bool = false

    # ZIP or postal code.
    @[JSON::Field(key: "postal_code", type: String, presence: true, ignore_serialize: postal_code.nil? && !postal_code_present?)]
    getter postal_code : String

    @[JSON::Field(ignore: true)]
    property? postal_code_present : Bool = false

    # State, county, province, or region.
    @[JSON::Field(key: "state", type: String, presence: true, ignore_serialize: state.nil? && !state_present?)]
    getter state : String

    @[JSON::Field(ignore: true)]
    property? state_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Address,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @city : String?, @country : String?, @line1 : String?, @line2 : String?, @postal_code : String?, @state : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @city.to_s.size > 5000
        invalid_properties.push("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
      end

      if @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if @line1.to_s.size > 5000
        invalid_properties.push("invalid value for \"line1\", the character length must be smaller than or equal to 5000.")
      end

      if @line2.to_s.size > 5000
        invalid_properties.push("invalid value for \"line2\", the character length must be smaller than or equal to 5000.")
      end

      if @postal_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"postal_code\", the character length must be smaller than or equal to 5000.")
      end

      if @state.to_s.size > 5000
        invalid_properties.push("invalid value for \"state\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @city.to_s.size > 5000
      return false if @country.to_s.size > 5000
      return false if @line1.to_s.size > 5000
      return false if @line2.to_s.size > 5000
      return false if @postal_code.to_s.size > 5000
      return false if @state.to_s.size > 5000
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] line1 Value to be assigned
    def line1=(line1)
      if line1.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"line1\", the character length must be smaller than or equal to 5000.")
      end

      @line1 = line1
    end

    # Custom attribute writer method with validation
    # @param [Object] line2 Value to be assigned
    def line2=(line2)
      if line2.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"line2\", the character length must be smaller than or equal to 5000.")
      end

      @line2 = line2
    end

    # Custom attribute writer method with validation
    # @param [Object] postal_code Value to be assigned
    def postal_code=(postal_code)
      if postal_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"postal_code\", the character length must be smaller than or equal to 5000.")
      end

      @postal_code = postal_code
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"state\", the character length must be smaller than or equal to 5000.")
      end

      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        city == o.city &&
        country == o.country &&
        line1 == o.line1 &&
        line2 == o.line2 &&
        postal_code == o.postal_code &&
        state == o.state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@city, @country, @line1, @line2, @postal_code, @state)
  end
end
