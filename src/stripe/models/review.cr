#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Reviews can be used to supplement automated fraud detection with human expertise.  Learn more about [Radar](/radar) and reviewing payments [here](https://stripe.com/docs/radar/reviews).
  class Review
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [review]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("review")

    # If `true`, the review needs action.
    @[JSON::Field(key: "open", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter open : Bool? = nil

    # The reason the review was opened. One of `rule` or `manual`.
    @[JSON::Field(key: "opened_reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter opened_reason : String? = nil
    ERROR_MESSAGE_FOR_OPENED_REASON = "invalid value for \"opened_reason\", must be one of [manual, rule]."
    VALID_VALUES_FOR_OPENED_REASON  = String.static_array("manual", "rule")

    # The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reason : String? = nil
    MAX_LENGTH_FOR_REASON = 5000

    # End of Required Properties

    # Optional Properties

    # The ZIP or postal code of the card used, if applicable.
    @[JSON::Field(key: "billing_zip", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_zip.nil? && !billing_zip_present?)]
    getter billing_zip : String? = nil
    MAX_LENGTH_FOR_BILLING_ZIP = 5000

    @[JSON::Field(ignore: true)]
    property? billing_zip_present : Bool = false

    @[JSON::Field(key: "charge", type: Stripe::ReviewCharge?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: charge.nil? && !charge_present?)]
    getter charge : Stripe::ReviewCharge? = nil

    @[JSON::Field(ignore: true)]
    property? charge_present : Bool = false

    # The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    @[JSON::Field(key: "closed_reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: closed_reason.nil? && !closed_reason_present?)]
    getter closed_reason : String? = nil
    ERROR_MESSAGE_FOR_CLOSED_REASON = "invalid value for \"closed_reason\", must be one of [approved, disputed, redacted, refunded, refunded_as_fraud]."
    VALID_VALUES_FOR_CLOSED_REASON  = String.static_array("approved", "disputed", "redacted", "refunded", "refunded_as_fraud")

    @[JSON::Field(ignore: true)]
    property? closed_reason_present : Bool = false

    # The IP address where the payment originated.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String? = nil
    MAX_LENGTH_FOR_IP_ADDRESS = 5000

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "ip_address_location", type: Stripe::ReviewIpAddressLocation?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ip_address_location.nil? && !ip_address_location_present?)]
    getter ip_address_location : Stripe::ReviewIpAddressLocation? = nil

    @[JSON::Field(ignore: true)]
    property? ip_address_location_present : Bool = false

    @[JSON::Field(key: "payment_intent", type: Stripe::ReviewPaymentIntent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_intent : Stripe::ReviewPaymentIntent? = nil

    @[JSON::Field(key: "session", type: Stripe::ReviewSession?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: session.nil? && !session_present?)]
    getter session : Stripe::ReviewSession? = nil

    @[JSON::Field(ignore: true)]
    property? session_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @open : Bool? = nil,
      @opened_reason : String? = nil,
      @reason : String? = nil,
      # Optional properties
      @billing_zip : String? = nil,
      @charge : Stripe::ReviewCharge? = nil,
      @closed_reason : String? = nil,
      @ip_address : String? = nil,
      @ip_address_location : Stripe::ReviewIpAddressLocation? = nil,
      @payment_intent : Stripe::ReviewPaymentIntent? = nil,
      @session : Stripe::ReviewSession? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"open\" is required and cannot be null") if @open.nil?

      invalid_properties.push("\"opened_reason\" is required and cannot be null") if @opened_reason.nil?

      unless (_opened_reason = @opened_reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OPENED_REASON) unless OpenApi::EnumValidator.valid?(_opened_reason, VALID_VALUES_FOR_OPENED_REASON)
      end
      invalid_properties.push("\"reason\" is required and cannot be null") if @reason.nil?

      unless (_reason = @reason).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reason", _reason.to_s.size, MAX_LENGTH_FOR_REASON)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_billing_zip = @billing_zip).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("billing_zip", _billing_zip.to_s.size, MAX_LENGTH_FOR_BILLING_ZIP)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_charge = @charge).nil?
        invalid_properties.concat(_charge.list_invalid_properties_for("charge")) if _charge.is_a?(OpenApi::Validatable)
      end
      unless (_closed_reason = @closed_reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CLOSED_REASON) unless OpenApi::EnumValidator.valid?(_closed_reason, VALID_VALUES_FOR_CLOSED_REASON)
      end
      unless (_ip_address = @ip_address).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("ip_address", _ip_address.to_s.size, MAX_LENGTH_FOR_IP_ADDRESS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_ip_address_location = @ip_address_location).nil?
        invalid_properties.concat(_ip_address_location.list_invalid_properties_for("ip_address_location")) if _ip_address_location.is_a?(OpenApi::Validatable)
      end
      unless (_payment_intent = @payment_intent).nil?
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      unless (_session = @session).nil?
        invalid_properties.concat(_session.list_invalid_properties_for("session")) if _session.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @open.nil?

      return false if @opened_reason.nil?
      unless (_opened_reason = @opened_reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_opened_reason, VALID_VALUES_FOR_OPENED_REASON)
      end

      return false if @reason.nil?
      unless (_reason = @reason).nil?
        return false if _reason.to_s.size > MAX_LENGTH_FOR_REASON
      end

      unless (_billing_zip = @billing_zip).nil?
        return false if _billing_zip.to_s.size > MAX_LENGTH_FOR_BILLING_ZIP
      end

      unless (_charge = @charge).nil?
        return false if _charge.is_a?(OpenApi::Validatable) && !_charge.valid?
      end

      unless (_closed_reason = @closed_reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_closed_reason, VALID_VALUES_FOR_CLOSED_REASON)
      end

      unless (_ip_address = @ip_address).nil?
        return false if _ip_address.to_s.size > MAX_LENGTH_FOR_IP_ADDRESS
      end

      unless (_ip_address_location = @ip_address_location).nil?
        return false if _ip_address_location.is_a?(OpenApi::Validatable) && !_ip_address_location.valid?
      end

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      unless (_session = @session).nil?
        return false if _session.is_a?(OpenApi::Validatable) && !_session.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] open Object to be assigned
    def open=(new_value : Bool?)
      raise ArgumentError.new("\"open\" is required and cannot be null") if new_value.nil?

      @open = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] opened_reason Object to be assigned
    def opened_reason=(new_value : String?)
      raise ArgumentError.new("\"opened_reason\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("opened_reason", new_value, VALID_VALUES_FOR_OPENED_REASON)
      end

      @opened_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(new_value : String?)
      raise ArgumentError.new("\"reason\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("reason", new_value.to_s.size, MAX_LENGTH_FOR_REASON)
      end

      @reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_zip Object to be assigned
    def billing_zip=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("billing_zip", new_value.to_s.size, MAX_LENGTH_FOR_BILLING_ZIP)
      end

      @billing_zip = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(new_value : Stripe::ReviewCharge?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @charge = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] closed_reason Object to be assigned
    def closed_reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("closed_reason", new_value, VALID_VALUES_FOR_CLOSED_REASON)
      end

      @closed_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("ip_address", new_value.to_s.size, MAX_LENGTH_FOR_IP_ADDRESS)
      end

      @ip_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address_location Object to be assigned
    def ip_address_location=(new_value : Stripe::ReviewIpAddressLocation?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ip_address_location = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(new_value : Stripe::ReviewPaymentIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] session Object to be assigned
    def session=(new_value : Stripe::ReviewSession?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @session = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @id, @livemode, @object, @open, @opened_reason, @reason, @billing_zip, @billing_zip_present, @charge, @charge_present, @closed_reason, @closed_reason_present, @ip_address, @ip_address_present, @ip_address_location, @ip_address_location_present, @payment_intent, @session, @session_present)
  end
end
