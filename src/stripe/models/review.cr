#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Reviews can be used to supplement automated fraud detection with human expertise.  Learn more about [Radar](/radar) and reviewing payments [here](https://stripe.com/docs/radar/reviews).
  class Review
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["review"])

    # If `true`, the review needs action.
    @[JSON::Field(key: "open", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter open : Bool? = nil

    # The reason the review was opened. One of `rule` or `manual`.
    @[JSON::Field(key: "opened_reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter opened_reason : String? = nil

    ENUM_VALIDATOR_FOR_OPENED_REASON = EnumValidator.new("opened_reason", "String", ["manual", "rule"])

    # The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reason : String? = nil

    # Optional properties

    # The ZIP or postal code of the card used, if applicable.
    @[JSON::Field(key: "billing_zip", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_zip.nil? && !billing_zip_present?)]
    getter billing_zip : String? = nil

    @[JSON::Field(ignore: true)]
    property? billing_zip_present : Bool = false

    @[JSON::Field(key: "charge", type: Stripe::ReviewCharge?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: charge.nil? && !charge_present?)]
    getter charge : Stripe::ReviewCharge? = nil

    @[JSON::Field(ignore: true)]
    property? charge_present : Bool = false

    # The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    @[JSON::Field(key: "closed_reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: closed_reason.nil? && !closed_reason_present?)]
    getter closed_reason : String? = nil

    @[JSON::Field(ignore: true)]
    property? closed_reason_present : Bool = false

    ENUM_VALIDATOR_FOR_CLOSED_REASON = EnumValidator.new("closed_reason", "String", ["approved", "disputed", "redacted", "refunded", "refunded_as_fraud"])

    # The IP address where the payment originated.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "ip_address_location", type: Stripe::ReviewIpAddressLocation?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ip_address_location.nil? && !ip_address_location_present?)]
    getter ip_address_location : Stripe::ReviewIpAddressLocation? = nil

    @[JSON::Field(ignore: true)]
    property? ip_address_location_present : Bool = false

    @[JSON::Field(key: "payment_intent", type: Stripe::ReviewPaymentIntent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_intent : Stripe::ReviewPaymentIntent? = nil

    @[JSON::Field(key: "session", type: Stripe::ReviewSession?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: session.nil? && !session_present?)]
    getter session : Stripe::ReviewSession? = nil

    @[JSON::Field(ignore: true)]
    property? session_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @open : Bool? = nil,
      @opened_reason : String? = nil,
      @reason : String? = nil,
      # Optional properties
      @billing_zip : String? = nil,
      @charge : Stripe::ReviewCharge? = nil,
      @closed_reason : String? = nil,
      @ip_address : String? = nil,
      @ip_address_location : Stripe::ReviewIpAddressLocation? = nil,
      @payment_intent : Stripe::ReviewPaymentIntent? = nil,
      @session : Stripe::ReviewSession? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"open\" is required and cannot be null") if @open.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OPENED_REASON.error_message) unless ENUM_VALIDATOR_FOR_OPENED_REASON.valid?(@opened_reason, false)
      invalid_properties.push("\"reason\" is required and cannot be null") if @reason.nil?
      if _reason = @reason
        if _reason.to_s.size > 5000
          invalid_properties.push("invalid value for \"reason\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _billing_zip = @billing_zip
        if _billing_zip.to_s.size > 5000
          invalid_properties.push("invalid value for \"billing_zip\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _charge = @charge
        if _charge.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_charge.list_invalid_properties_for("charge"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_CLOSED_REASON.error_message) unless ENUM_VALIDATOR_FOR_CLOSED_REASON.valid?(@closed_reason)
      if _ip_address = @ip_address
        if _ip_address.to_s.size > 5000
          invalid_properties.push("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _ip_address_location = @ip_address_location
        if _ip_address_location.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_ip_address_location.list_invalid_properties_for("ip_address_location"))
        end
      end
      if _payment_intent = @payment_intent
        if _payment_intent.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent"))
        end
      end
      if _session = @session
        if _session.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_session.list_invalid_properties_for("session"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?

      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @open.nil?

      return false unless ENUM_VALIDATOR_FOR_OPENED_REASON.valid?(@opened_reason, false)
      return false if @reason.nil?
      if _reason = @reason
        return false if _reason.to_s.size > 5000
      end
      if _billing_zip = @billing_zip
        return false if _billing_zip.to_s.size > 5000
      end
      if _charge = @charge
        if _charge.is_a?(OpenApi::Validatable)
          return false unless _charge.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_CLOSED_REASON.valid?(@closed_reason)
      if _ip_address = @ip_address
        return false if _ip_address.to_s.size > 5000
      end
      if _ip_address_location = @ip_address_location
        if _ip_address_location.is_a?(OpenApi::Validatable)
          return false unless _ip_address_location.valid?
        end
      end
      if _payment_intent = @payment_intent
        if _payment_intent.is_a?(OpenApi::Validatable)
          return false unless _payment_intent.valid?
        end
      end
      if _session = @session
        if _session.is_a?(OpenApi::Validatable)
          return false unless _session.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] open Object to be assigned
    def open=(open : Bool?)
      if open.nil?
        raise ArgumentError.new("\"open\" is required and cannot be null")
      end
      _open = open.not_nil!
      @open = _open
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] opened_reason Object to be assigned
    def opened_reason=(opened_reason : String?)
      if opened_reason.nil?
        raise ArgumentError.new("\"opened_reason\" is required and cannot be null")
      end
      _opened_reason = opened_reason.not_nil!
      ENUM_VALIDATOR_FOR_OPENED_REASON.valid!(_opened_reason)
      @opened_reason = _opened_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason : String?)
      if reason.nil?
        raise ArgumentError.new("\"reason\" is required and cannot be null")
      end
      _reason = reason.not_nil!
      if _reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reason\", the character length must be smaller than or equal to 5000.")
      end

      @reason = _reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_zip Object to be assigned
    def billing_zip=(billing_zip : String?)
      if billing_zip.nil?
        return @billing_zip = nil
      end
      _billing_zip = billing_zip.not_nil!
      if _billing_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"billing_zip\", the character length must be smaller than or equal to 5000.")
      end

      @billing_zip = _billing_zip
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(charge : Stripe::ReviewCharge?)
      if charge.nil?
        return @charge = nil
      end
      _charge = charge.not_nil!
      if _charge.is_a?(OpenApi::Validatable)
        _charge.validate
      end
      @charge = _charge
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] closed_reason Object to be assigned
    def closed_reason=(closed_reason : String?)
      if closed_reason.nil?
        return @closed_reason = nil
      end
      _closed_reason = closed_reason.not_nil!
      ENUM_VALIDATOR_FOR_CLOSED_REASON.valid!(_closed_reason)
      @closed_reason = _closed_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(ip_address : String?)
      if ip_address.nil?
        return @ip_address = nil
      end
      _ip_address = ip_address.not_nil!
      if _ip_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
      end

      @ip_address = _ip_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address_location Object to be assigned
    def ip_address_location=(ip_address_location : Stripe::ReviewIpAddressLocation?)
      if ip_address_location.nil?
        return @ip_address_location = nil
      end
      _ip_address_location = ip_address_location.not_nil!
      if _ip_address_location.is_a?(OpenApi::Validatable)
        _ip_address_location.validate
      end
      @ip_address_location = _ip_address_location
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(payment_intent : Stripe::ReviewPaymentIntent?)
      if payment_intent.nil?
        return @payment_intent = nil
      end
      _payment_intent = payment_intent.not_nil!
      if _payment_intent.is_a?(OpenApi::Validatable)
        _payment_intent.validate
      end
      @payment_intent = _payment_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] session Object to be assigned
    def session=(session : Stripe::ReviewSession?)
      if session.nil?
        return @session = nil
      end
      _session = session.not_nil!
      if _session.is_a?(OpenApi::Validatable)
        _session.validate
      end
      @session = _session
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @id, @livemode, @object, @open, @opened_reason, @reason, @billing_zip, @billing_zip_present, @charge, @charge_present, @closed_reason, @closed_reason_present, @ip_address, @ip_address_present, @ip_address_location, @ip_address_location_present, @payment_intent, @session, @session_present)
  end
end
