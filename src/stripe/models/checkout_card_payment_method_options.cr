#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class CheckoutCardPaymentMethodOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "installments", type: Stripe::CheckoutCardInstallmentsOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter installments : Stripe::CheckoutCardInstallmentsOptions? = nil

    # Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    @[JSON::Field(key: "setup_future_usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_future_usage : String? = nil

    ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE = EnumValidator.new("setup_future_usage", "String", ["none", "off_session", "on_session"])

    # Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
    @[JSON::Field(key: "statement_descriptor_suffix_kana", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kana : String? = nil

    # Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
    @[JSON::Field(key: "statement_descriptor_suffix_kanji", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kanji : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @installments : Stripe::CheckoutCardInstallmentsOptions? = nil,
      @setup_future_usage : String? = nil,
      @statement_descriptor_suffix_kana : String? = nil,
      @statement_descriptor_suffix_kanji : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model installments : Stripe::CheckoutCardInstallmentsOptions?

      invalid_properties.push(ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.error_message) unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)
      if _statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana
        if _statement_descriptor_suffix_kana.to_s.size > 5000
          invalid_properties.push("invalid value for \"statement_descriptor_suffix_kana\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji
        if _statement_descriptor_suffix_kanji.to_s.size > 5000
          invalid_properties.push("invalid value for \"statement_descriptor_suffix_kanji\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)
      if _statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana
        return false if _statement_descriptor_suffix_kana.to_s.size > 5000
      end
      if _statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji
        return false if _statement_descriptor_suffix_kanji.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] installments Object to be assigned
    def installments=(installments : Stripe::CheckoutCardInstallmentsOptions?)
      if installments.nil?
        return @installments = nil
      end
      @installments = installments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(setup_future_usage : String?)
      if setup_future_usage.nil?
        return @setup_future_usage = nil
      end
      _setup_future_usage = setup_future_usage.not_nil!
      ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid!(_setup_future_usage)
      @setup_future_usage = setup_future_usage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kana Object to be assigned
    def statement_descriptor_suffix_kana=(statement_descriptor_suffix_kana : String?)
      if statement_descriptor_suffix_kana.nil?
        return @statement_descriptor_suffix_kana = nil
      end
      _statement_descriptor_suffix_kana = statement_descriptor_suffix_kana.not_nil!
      if _statement_descriptor_suffix_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix_kana\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor_suffix_kana = statement_descriptor_suffix_kana
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kanji Object to be assigned
    def statement_descriptor_suffix_kanji=(statement_descriptor_suffix_kanji : String?)
      if statement_descriptor_suffix_kanji.nil?
        return @statement_descriptor_suffix_kanji = nil
      end
      _statement_descriptor_suffix_kanji = statement_descriptor_suffix_kanji.not_nil!
      if _statement_descriptor_suffix_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix_kanji\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor_suffix_kanji = statement_descriptor_suffix_kanji
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@installments, @setup_future_usage, @statement_descriptor_suffix_kana, @statement_descriptor_suffix_kanji)
  end
end
