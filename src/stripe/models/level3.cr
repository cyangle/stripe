#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Level3
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "line_items", type: Array(Level3LineItems))]
    property line_items : Array(Level3LineItems)

    @[JSON::Field(key: "merchant_reference", type: String)]
    getter merchant_reference : String

    # Optional properties
    @[JSON::Field(key: "customer_reference", type: String?, presence: true, ignore_serialize: customer_reference.nil? && !customer_reference_present?)]
    getter customer_reference : String?

    @[JSON::Field(ignore: true)]
    property? customer_reference_present : Bool = false

    @[JSON::Field(key: "shipping_address_zip", type: String?, presence: true, ignore_serialize: shipping_address_zip.nil? && !shipping_address_zip_present?)]
    getter shipping_address_zip : String?

    @[JSON::Field(ignore: true)]
    property? shipping_address_zip_present : Bool = false

    @[JSON::Field(key: "shipping_amount", type: Int64?, presence: true, ignore_serialize: shipping_amount.nil? && !shipping_amount_present?)]
    property shipping_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? shipping_amount_present : Bool = false

    @[JSON::Field(key: "shipping_from_zip", type: String?, presence: true, ignore_serialize: shipping_from_zip.nil? && !shipping_from_zip_present?)]
    getter shipping_from_zip : String?

    @[JSON::Field(ignore: true)]
    property? shipping_from_zip_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @line_items : Array(Level3LineItems), @merchant_reference : String, @customer_reference : String? = nil, @shipping_address_zip : String? = nil, @shipping_amount : Int64? = nil, @shipping_from_zip : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@customer_reference.nil? && @customer_reference.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer_reference\", the character length must be smaller than or equal to 5000.")
      end

      if @merchant_reference.to_s.size > 5000
        invalid_properties.push("invalid value for \"merchant_reference\", the character length must be smaller than or equal to 5000.")
      end

      if !@shipping_address_zip.nil? && @shipping_address_zip.to_s.size > 5000
        invalid_properties.push("invalid value for \"shipping_address_zip\", the character length must be smaller than or equal to 5000.")
      end

      if !@shipping_from_zip.nil? && @shipping_from_zip.to_s.size > 5000
        invalid_properties.push("invalid value for \"shipping_from_zip\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer_reference.nil? && @customer_reference.to_s.size > 5000
      return false if @merchant_reference.to_s.size > 5000
      return false if !@shipping_address_zip.nil? && @shipping_address_zip.to_s.size > 5000
      return false if !@shipping_from_zip.nil? && @shipping_from_zip.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_reference Value to be assigned
    def customer_reference=(customer_reference)
      if !customer_reference.nil? && customer_reference.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_reference\", the character length must be smaller than or equal to 5000.")
      end

      @customer_reference = customer_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] merchant_reference Value to be assigned
    def merchant_reference=(merchant_reference)
      if merchant_reference.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"merchant_reference\", the character length must be smaller than or equal to 5000.")
      end

      @merchant_reference = merchant_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_address_zip Value to be assigned
    def shipping_address_zip=(shipping_address_zip)
      if !shipping_address_zip.nil? && shipping_address_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_address_zip\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_address_zip = shipping_address_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_from_zip Value to be assigned
    def shipping_from_zip=(shipping_from_zip)
      if !shipping_from_zip.nil? && shipping_from_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_from_zip\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_from_zip = shipping_from_zip
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        customer_reference == o.customer_reference &&
        line_items == o.line_items &&
        merchant_reference == o.merchant_reference &&
        shipping_address_zip == o.shipping_address_zip &&
        shipping_amount == o.shipping_amount &&
        shipping_from_zip == o.shipping_from_zip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@customer_reference, @line_items, @merchant_reference, @shipping_address_zip, @shipping_amount, @shipping_from_zip)
  end
end
