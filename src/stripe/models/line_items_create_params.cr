#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class LineItemsCreateParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "price", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter price : String? = nil

    @[JSON::Field(key: "quantity", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter quantity : Int64? = nil

    # Optional properties

    @[JSON::Field(key: "adjustable_quantity", type: Stripe::AdjustableQuantityParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter adjustable_quantity : Stripe::AdjustableQuantityParams? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @price : String? = nil,
      @quantity : Int64? = nil,
      # Optional properties
      @adjustable_quantity : Stripe::AdjustableQuantityParams? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"price\" is required and cannot be null") if @price.nil?
      if _price = @price
        if _price.to_s.size > 5000
          invalid_properties.push("invalid value for \"price\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"quantity\" is required and cannot be null") if @quantity.nil?
      # This is a model adjustable_quantity : Stripe::AdjustableQuantityParams?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @price.nil?
      if _price = @price
        return false if _price.to_s.size > 5000
      end
      return false if @quantity.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price Object to be assigned
    def price=(price : String?)
      if price.nil?
        raise ArgumentError.new("\"price\" is required and cannot be null")
      end
      _price = price.not_nil!
      if _price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\", the character length must be smaller than or equal to 5000.")
      end

      @price = price
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(quantity : Int64?)
      if quantity.nil?
        raise ArgumentError.new("\"quantity\" is required and cannot be null")
      end
      @quantity = quantity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adjustable_quantity Object to be assigned
    def adjustable_quantity=(adjustable_quantity : Stripe::AdjustableQuantityParams?)
      if adjustable_quantity.nil?
        return @adjustable_quantity = nil
      end
      @adjustable_quantity = adjustable_quantity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@price, @quantity, @adjustable_quantity)
  end
end
