#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  class IssuingCardShipping
    include NASON::Serializable

    # Required properties
    @[NASON::Field(key: "address", type: Address)]
    property address : Address

    # Recipient name.
    @[NASON::Field(key: "name", type: String)]
    property name : String

    # Shipment service, such as `standard` or `express`.
    @[NASON::Field(key: "service", type: String)]
    property service : String

    # Packaging options.
    @[NASON::Field(key: "type", type: String)]
    property _type : String

    # Optional properties
    # The delivery company that shipped a card.
    @[NASON::Field(key: "carrier", type: String? | Null, nillable: true)]
    property carrier : String? | Null

    # A unix timestamp representing a best estimate of when the card will be delivered.
    @[NASON::Field(key: "eta", type: Int64? | Null, nillable: true)]
    property eta : Int64? | Null

    # The delivery status of the card.
    @[NASON::Field(key: "status", type: String? | Null, nillable: true)]
    property status : String? | Null

    # A tracking number for a card shipment.
    @[NASON::Field(key: "tracking_number", type: String? | Null, nillable: true)]
    property tracking_number : String? | Null

    # A link to the shipping carrier's site where you can view detailed information about a card shipment.
    @[NASON::Field(key: "tracking_url", type: String? | Null, nillable: true)]
    property tracking_url : String? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @address : Address, @name : String, @service : String, @_type : String, @carrier : String? | Null = nil, @eta : Int64? | Null = nil, @status : String? | Null = nil, @tracking_number : String? | Null = nil, @tracking_url : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      if !@tracking_number.nil? && !@tracking_number.null? && @tracking_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"tracking_number\", the character length must be smaller than or equal to 5000.")
      end

      if !@tracking_url.nil? && !@tracking_url.null? && @tracking_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"tracking_url\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      carrier_validator = EnumAttributeValidator.new("String", ["dhl", "fedex", "royal_mail", "usps"])
      return false unless carrier_validator.valid?(@carrier)
      return false if @name.to_s.size > 5000
      service_validator = EnumAttributeValidator.new("String", ["express", "priority", "standard"])
      return false unless service_validator.valid?(@service)
      status_validator = EnumAttributeValidator.new("String", ["canceled", "delivered", "failure", "pending", "returned", "shipped"])
      return false unless status_validator.valid?(@status)
      return false if !@tracking_number.nil? && !@tracking_number.null? && @tracking_number.to_s.size > 5000
      return false if !@tracking_url.nil? && !@tracking_url.null? && @tracking_url.to_s.size > 5000
      _type_validator = EnumAttributeValidator.new("String", ["bulk", "individual"])
      return false unless _type_validator.valid?(@_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] carrier Object to be assigned
    def carrier=(carrier)
      validator = EnumAttributeValidator.new("String", ["dhl", "fedex", "royal_mail", "usps"])
      unless validator.valid?(carrier)
        raise ArgumentError.new("invalid value for \"carrier\", must be one of #{validator.allowable_values}.")
      end
      @carrier = carrier
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service Object to be assigned
    def service=(service)
      validator = EnumAttributeValidator.new("String", ["express", "priority", "standard"])
      unless validator.valid?(service)
        raise ArgumentError.new("invalid value for \"service\", must be one of #{validator.allowable_values}.")
      end
      @service = service
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["canceled", "delivered", "failure", "pending", "returned", "shipped"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] tracking_number Value to be assigned
    def tracking_number=(tracking_number)
      if !tracking_number.nil? && !@tracking_number.null? && tracking_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tracking_number\", the character length must be smaller than or equal to 5000.")
      end

      @tracking_number = tracking_number
    end

    # Custom attribute writer method with validation
    # @param [Object] tracking_url Value to be assigned
    def tracking_url=(tracking_url)
      if !tracking_url.nil? && !@tracking_url.null? && tracking_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tracking_url\", the character length must be smaller than or equal to 5000.")
      end

      @tracking_url = tracking_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      validator = EnumAttributeValidator.new("String", ["bulk", "individual"])
      unless validator.valid?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{validator.allowable_values}.")
      end
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        address == o.address &&
        carrier == o.carrier &&
        eta == o.eta &&
        name == o.name &&
        service == o.service &&
        status == o.status &&
        tracking_number == o.tracking_number &&
        tracking_url == o.tracking_url &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address, carrier, eta, name, service, status, tracking_number, tracking_url, _type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
