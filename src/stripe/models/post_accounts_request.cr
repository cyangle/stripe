#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostAccountsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
    @[JSON::Field(key: "account_token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_token : String? = nil

    @[JSON::Field(key: "bank_account", type: Stripe::PostAccountRequestBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_account : Stripe::PostAccountRequestBankAccount? = nil

    @[JSON::Field(key: "business_profile", type: Stripe::BusinessProfileSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter business_profile : Stripe::BusinessProfileSpecs? = nil

    # The business type.
    @[JSON::Field(key: "business_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter business_type : String? = nil

    ENUM_VALIDATOR_FOR_BUSINESS_TYPE = EnumValidator.new("business_type", "String", ["company", "government_entity", "individual", "non_profit"])

    @[JSON::Field(key: "capabilities", type: Stripe::CapabilitiesParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter capabilities : Stripe::CapabilitiesParam? = nil

    @[JSON::Field(key: "company", type: Stripe::CompanySpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter company : Stripe::CompanySpecs? = nil

    # The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. Available countries include [Stripe's global markets](https://stripe.com/global) as well as countries where [cross-border payouts](https://stripe.com/docs/connect/cross-border-payouts) are supported.
    @[JSON::Field(key: "country", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter country : String? = nil

    # Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
    @[JSON::Field(key: "default_currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_currency : String? = nil

    @[JSON::Field(key: "documents", type: Stripe::DocumentsSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter documents : Stripe::DocumentsSpecs? = nil

    # The email address of the account holder. This is only to make the account easier to identify to you. Stripe only emails Custom accounts with your consent.
    @[JSON::Field(key: "email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter email : String? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you wonâ€™t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the [bank account](https://stripe.com/docs/api#account_create_bank_account) or [card creation](https://stripe.com/docs/api#account_create_card) APIs.
    @[JSON::Field(key: "external_account", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter external_account : String? = nil

    @[JSON::Field(key: "individual", type: Stripe::IndividualSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter individual : Stripe::IndividualSpecs? = nil

    @[JSON::Field(key: "metadata", type: Stripe::PostAccountRequestMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::PostAccountRequestMetadata? = nil

    @[JSON::Field(key: "settings", type: Stripe::SettingsSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter settings : Stripe::SettingsSpecs? = nil

    @[JSON::Field(key: "tos_acceptance", type: Stripe::TosAcceptanceSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tos_acceptance : Stripe::TosAcceptanceSpecs? = nil

    # The type of Stripe account to create. May be one of `custom`, `express` or `standard`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["custom", "express", "standard"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_token : String? = nil,
      @bank_account : Stripe::PostAccountRequestBankAccount? = nil,
      @business_profile : Stripe::BusinessProfileSpecs? = nil,
      @business_type : String? = nil,
      @capabilities : Stripe::CapabilitiesParam? = nil,
      @company : Stripe::CompanySpecs? = nil,
      @country : String? = nil,
      @default_currency : String? = nil,
      @documents : Stripe::DocumentsSpecs? = nil,
      @email : String? = nil,
      @expand : Array(String)? = nil,
      @external_account : String? = nil,
      @individual : Stripe::IndividualSpecs? = nil,
      @metadata : Stripe::PostAccountRequestMetadata? = nil,
      @settings : Stripe::SettingsSpecs? = nil,
      @tos_acceptance : Stripe::TosAcceptanceSpecs? = nil,
      @_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _account_token = @account_token
        if _account_token.to_s.size > 5000
          invalid_properties.push("invalid value for \"account_token\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model bank_account : Stripe::PostAccountRequestBankAccount?
      # This is a model business_profile : Stripe::BusinessProfileSpecs?

      invalid_properties.push(ENUM_VALIDATOR_FOR_BUSINESS_TYPE.error_message) unless ENUM_VALIDATOR_FOR_BUSINESS_TYPE.valid?(@business_type)
      # This is a model capabilities : Stripe::CapabilitiesParam?
      # This is a model company : Stripe::CompanySpecs?
      if _country = @country
        if _country.to_s.size > 5000
          invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model documents : Stripe::DocumentsSpecs?
      if _external_account = @external_account
        if _external_account.to_s.size > 5000
          invalid_properties.push("invalid value for \"external_account\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model individual : Stripe::IndividualSpecs?
      # This is a model metadata : Stripe::PostAccountRequestMetadata?
      # This is a model settings : Stripe::SettingsSpecs?
      # This is a model tos_acceptance : Stripe::TosAcceptanceSpecs?

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _account_token = @account_token
        return false if _account_token.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_BUSINESS_TYPE.valid?(@business_type)
      if _country = @country
        return false if _country.to_s.size > 5000
      end
      if _external_account = @external_account
        return false if _external_account.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_token Object to be assigned
    def account_token=(account_token : String?)
      if account_token.nil?
        return @account_token = nil
      end
      _account_token = account_token.not_nil!
      if _account_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_token\", the character length must be smaller than or equal to 5000.")
      end

      @account_token = account_token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_account Object to be assigned
    def bank_account=(bank_account : Stripe::PostAccountRequestBankAccount?)
      if bank_account.nil?
        return @bank_account = nil
      end
      @bank_account = bank_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] business_profile Object to be assigned
    def business_profile=(business_profile : Stripe::BusinessProfileSpecs?)
      if business_profile.nil?
        return @business_profile = nil
      end
      @business_profile = business_profile
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] business_type Object to be assigned
    def business_type=(business_type : String?)
      if business_type.nil?
        return @business_type = nil
      end
      _business_type = business_type.not_nil!
      ENUM_VALIDATOR_FOR_BUSINESS_TYPE.valid!(_business_type)
      @business_type = business_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capabilities Object to be assigned
    def capabilities=(capabilities : Stripe::CapabilitiesParam?)
      if capabilities.nil?
        return @capabilities = nil
      end
      @capabilities = capabilities
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] company Object to be assigned
    def company=(company : Stripe::CompanySpecs?)
      if company.nil?
        return @company = nil
      end
      @company = company
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(country : String?)
      if country.nil?
        return @country = nil
      end
      _country = country.not_nil!
      if _country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_currency Object to be assigned
    def default_currency=(default_currency : String?)
      if default_currency.nil?
        return @default_currency = nil
      end
      @default_currency = default_currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] documents Object to be assigned
    def documents=(documents : Stripe::DocumentsSpecs?)
      if documents.nil?
        return @documents = nil
      end
      @documents = documents
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(email : String?)
      if email.nil?
        return @email = nil
      end
      @email = email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] external_account Object to be assigned
    def external_account=(external_account : String?)
      if external_account.nil?
        return @external_account = nil
      end
      _external_account = external_account.not_nil!
      if _external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\", the character length must be smaller than or equal to 5000.")
      end

      @external_account = external_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] individual Object to be assigned
    def individual=(individual : Stripe::IndividualSpecs?)
      if individual.nil?
        return @individual = nil
      end
      @individual = individual
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Stripe::PostAccountRequestMetadata?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] settings Object to be assigned
    def settings=(settings : Stripe::SettingsSpecs?)
      if settings.nil?
        return @settings = nil
      end
      @settings = settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tos_acceptance Object to be assigned
    def tos_acceptance=(tos_acceptance : Stripe::TosAcceptanceSpecs?)
      if tos_acceptance.nil?
        return @tos_acceptance = nil
      end
      @tos_acceptance = tos_acceptance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        return @_type = nil
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_token, @bank_account, @business_profile, @business_type, @capabilities, @company, @country, @default_currency, @documents, @email, @expand, @external_account, @individual, @metadata, @settings, @tos_acceptance, @_type)
  end
end
