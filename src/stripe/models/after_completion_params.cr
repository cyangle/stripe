#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Behavior after the purchase is complete.
  class AfterCompletionParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["hosted_confirmation", "redirect"])

    # Optional properties

    @[JSON::Field(key: "hosted_confirmation", type: Stripe::AfterCompletionConfirmationPageParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter hosted_confirmation : Stripe::AfterCompletionConfirmationPageParams? = nil

    @[JSON::Field(key: "redirect", type: Stripe::AfterCompletionRedirectParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect : Stripe::AfterCompletionRedirectParams? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @hosted_confirmation : Stripe::AfterCompletionConfirmationPageParams? = nil,
      @redirect : Stripe::AfterCompletionRedirectParams? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _hosted_confirmation = @hosted_confirmation
        if _hosted_confirmation.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_hosted_confirmation.list_invalid_properties_for("hosted_confirmation"))
        end
      end
      if _redirect = @redirect
        if _redirect.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_redirect.list_invalid_properties_for("redirect"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _hosted_confirmation = @hosted_confirmation
        if _hosted_confirmation.is_a?(OpenApi::Validatable)
          return false unless _hosted_confirmation.valid?
        end
      end
      if _redirect = @redirect
        if _redirect.is_a?(OpenApi::Validatable)
          return false unless _redirect.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_confirmation Object to be assigned
    def hosted_confirmation=(hosted_confirmation : Stripe::AfterCompletionConfirmationPageParams?)
      if hosted_confirmation.nil?
        return @hosted_confirmation = nil
      end
      _hosted_confirmation = hosted_confirmation.not_nil!
      if _hosted_confirmation.is_a?(OpenApi::Validatable)
        _hosted_confirmation.validate
      end
      @hosted_confirmation = _hosted_confirmation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect Object to be assigned
    def redirect=(redirect : Stripe::AfterCompletionRedirectParams?)
      if redirect.nil?
        return @redirect = nil
      end
      _redirect = redirect.not_nil!
      if _redirect.is_a?(OpenApi::Validatable)
        _redirect.validate
      end
      @redirect = _redirect
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @hosted_confirmation, @redirect)
  end
end
