#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Stripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account's country. The Country Specs API makes these rules available to your integration.  You can also view the information from this API call as [an online guide](/docs/connect/required-verification-information).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CountrySpec
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The default currency for this country. This applies to both payment methods and bank accounts.
    @[JSON::Field(key: "default_currency", type: String)]
    getter default_currency : String

    # Unique identifier for the object. Represented as the ISO country code for this country.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["country_spec"])

    # Currencies that can be accepted in the specific country (for transfers).
    @[JSON::Field(key: "supported_bank_account_currencies", type: Hash(String, Array))]
    property supported_bank_account_currencies : Hash(String, Array)

    @[JSON::Field(key: "supported_payment_currencies", type: Array(String))]
    property supported_payment_currencies : Array(String)

    @[JSON::Field(key: "supported_payment_methods", type: Array(String))]
    property supported_payment_methods : Array(String)

    @[JSON::Field(key: "supported_transfer_countries", type: Array(String))]
    property supported_transfer_countries : Array(String)

    @[JSON::Field(key: "verification_fields", type: CountrySpecVerificationFields)]
    property verification_fields : CountrySpecVerificationFields

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @default_currency : String, @id : String, @object : String, @supported_bank_account_currencies : Hash(String, Array), @supported_payment_currencies : Array(String), @supported_payment_methods : Array(String), @supported_transfer_countries : Array(String), @verification_fields : CountrySpecVerificationFields)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @default_currency.to_s.size > 5000
        invalid_properties.push("invalid value for \"default_currency\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @default_currency.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] default_currency Value to be assigned
    def default_currency=(default_currency)
      if default_currency.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_currency\", the character length must be smaller than or equal to 5000.")
      end

      @default_currency = default_currency
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        default_currency == o.default_currency &&
        id == o.id &&
        object == o.object &&
        supported_bank_account_currencies == o.supported_bank_account_currencies &&
        supported_payment_currencies == o.supported_payment_currencies &&
        supported_payment_methods == o.supported_payment_methods &&
        supported_transfer_countries == o.supported_transfer_countries &&
        verification_fields == o.verification_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@default_currency, @id, @object, @supported_bank_account_currencies, @supported_payment_currencies, @supported_payment_methods, @supported_transfer_countries, @verification_fields)
  end
end
