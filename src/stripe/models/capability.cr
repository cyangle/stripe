#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # This is an object representing a capability for a Stripe account.  Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Capability
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "account", type: CapabilityAccount)]
    property account : CapabilityAccount

    # The identifier for the capability.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["capability"])

    # Whether the capability has been requested.
    @[JSON::Field(key: "requested", type: Bool)]
    property requested : Bool

    # The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["active", "disabled", "inactive", "pending", "unrequested"])

    # Optional properties

    @[JSON::Field(key: "future_requirements", type: AccountCapabilityFutureRequirements?, presence: true, ignore_serialize: future_requirements.nil? && !future_requirements_present?)]
    property future_requirements : AccountCapabilityFutureRequirements?

    @[JSON::Field(ignore: true)]
    property? future_requirements_present : Bool = false

    # Time at which the capability was requested. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "requested_at", type: Int64?, presence: true, ignore_serialize: requested_at.nil? && !requested_at_present?)]
    property requested_at : Int64?

    @[JSON::Field(ignore: true)]
    property? requested_at_present : Bool = false

    @[JSON::Field(key: "requirements", type: AccountCapabilityRequirements?, presence: true, ignore_serialize: requirements.nil? && !requirements_present?)]
    property requirements : AccountCapabilityRequirements?

    @[JSON::Field(ignore: true)]
    property? requirements_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account : CapabilityAccount,
      @id : String,
      @object : String,
      @requested : Bool,
      @status : String,
      # Optional properties
      @future_requirements : AccountCapabilityFutureRequirements? = nil,
      @requested_at : Int64? = nil,
      @requirements : AccountCapabilityRequirements? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @id, @object, @requested, @status, @future_requirements, @requested_at, @requirements)
  end
end
