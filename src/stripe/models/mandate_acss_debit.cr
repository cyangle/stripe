#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class MandateAcssDebit
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Payment schedule for the mandate.
    @[JSON::Field(key: "payment_schedule", type: String)]
    getter payment_schedule : String

    ENUM_VALIDATOR_FOR_PAYMENT_SCHEDULE = EnumValidator.new("payment_schedule", "String", ["combined", "interval", "sporadic"])

    # Transaction type of the mandate.
    @[JSON::Field(key: "transaction_type", type: String)]
    getter transaction_type : String

    ENUM_VALIDATOR_FOR_TRANSACTION_TYPE = EnumValidator.new("transaction_type", "String", ["business", "personal"])

    # Optional properties

    # List of Stripe products where this mandate can be selected automatically.
    @[JSON::Field(key: "default_for", type: Array(String)?, presence: true, ignore_serialize: default_for.nil? && !default_for_present?)]
    getter default_for : Array(String)?

    @[JSON::Field(ignore: true)]
    property? default_for_present : Bool = false

    ENUM_VALIDATOR_FOR_DEFAULT_FOR = EnumValidator.new("default_for", "String", ["invoice", "subscription"])

    # Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
    @[JSON::Field(key: "interval_description", type: String?, presence: true, ignore_serialize: interval_description.nil? && !interval_description_present?)]
    getter interval_description : String?

    @[JSON::Field(ignore: true)]
    property? interval_description_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @payment_schedule : String, 
      @transaction_type : String, 
      # Optional properties
      @default_for : Array(String)? = nil, 
      @interval_description : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYMENT_SCHEDULE.error_message) unless ENUM_VALIDATOR_FOR_PAYMENT_SCHEDULE.valid?(@payment_schedule, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TRANSACTION_TYPE.error_message) unless ENUM_VALIDATOR_FOR_TRANSACTION_TYPE.valid?(@transaction_type, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_DEFAULT_FOR.error_message) unless ENUM_VALIDATOR_FOR_DEFAULT_FOR.all_valid?(@default_for)

      if !@interval_description.nil? && @interval_description.to_s.size > 5000
        invalid_properties.push("invalid value for \"interval_description\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_PAYMENT_SCHEDULE.valid?(@payment_schedule, false)
      return false unless ENUM_VALIDATOR_FOR_TRANSACTION_TYPE.valid?(@transaction_type, false)
      return false unless ENUM_VALIDATOR_FOR_DEFAULT_FOR.all_valid?(@default_for)
      return false if !@interval_description.nil? && @interval_description.to_s.size > 5000

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_schedule Object to be assigned
    def payment_schedule=(payment_schedule)
      ENUM_VALIDATOR_FOR_PAYMENT_SCHEDULE.valid!(payment_schedule, false)
      @payment_schedule = payment_schedule
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_type Object to be assigned
    def transaction_type=(transaction_type)
      ENUM_VALIDATOR_FOR_TRANSACTION_TYPE.valid!(transaction_type, false)
      @transaction_type = transaction_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_for Object to be assigned
    def default_for=(default_for)
      ENUM_VALIDATOR_FOR_DEFAULT_FOR.all_valid!(default_for)
      @default_for = default_for
    end

    # Custom attribute writer method with validation
    # @param [Object] interval_description Value to be assigned
    def interval_description=(interval_description)
      if !interval_description.nil? && interval_description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"interval_description\", the character length must be smaller than or equal to 5000.")
      end

      @interval_description = interval_description
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@payment_schedule, @transaction_type, @default_for, @interval_description)
  end
end
