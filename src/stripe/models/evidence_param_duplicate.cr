#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Evidence provided when `reason` is 'duplicate'.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class EvidenceParamDuplicate
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "additional_documentation", type: CanceledAdditionalDocumentation?, presence: true, ignore_serialize: additional_documentation.nil? && !additional_documentation_present?)]
    property additional_documentation : CanceledAdditionalDocumentation?

    @[JSON::Field(ignore: true)]
    property? additional_documentation_present : Bool = false

    @[JSON::Field(key: "card_statement", type: DuplicateCardStatement?, presence: true, ignore_serialize: card_statement.nil? && !card_statement_present?)]
    property card_statement : DuplicateCardStatement?

    @[JSON::Field(ignore: true)]
    property? card_statement_present : Bool = false

    @[JSON::Field(key: "cash_receipt", type: DuplicateCashReceipt?, presence: true, ignore_serialize: cash_receipt.nil? && !cash_receipt_present?)]
    property cash_receipt : DuplicateCashReceipt?

    @[JSON::Field(ignore: true)]
    property? cash_receipt_present : Bool = false

    @[JSON::Field(key: "check_image", type: DuplicateCheckImage?, presence: true, ignore_serialize: check_image.nil? && !check_image_present?)]
    property check_image : DuplicateCheckImage?

    @[JSON::Field(ignore: true)]
    property? check_image_present : Bool = false

    # Explanation of why the cardholder is disputing this transaction.
    @[JSON::Field(key: "explanation", type: String?, presence: true, ignore_serialize: explanation.nil? && !explanation_present?)]
    getter explanation : String?

    @[JSON::Field(ignore: true)]
    property? explanation_present : Bool = false

    # Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
    @[JSON::Field(key: "original_transaction", type: String?, presence: true, ignore_serialize: original_transaction.nil? && !original_transaction_present?)]
    getter original_transaction : String?

    @[JSON::Field(ignore: true)]
    property? original_transaction_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Duplicate,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @additional_documentation : CanceledAdditionalDocumentation? = nil, @card_statement : DuplicateCardStatement? = nil, @cash_receipt : DuplicateCashReceipt? = nil, @check_image : DuplicateCheckImage? = nil, @explanation : String? = nil, @original_transaction : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@explanation.nil? && @explanation.to_s.size > 1500
        invalid_properties.push("invalid value for \"explanation\", the character length must be smaller than or equal to 1500.")
      end

      if !@original_transaction.nil? && @original_transaction.to_s.size > 5000
        invalid_properties.push("invalid value for \"original_transaction\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@explanation.nil? && @explanation.to_s.size > 1500
      return false if !@original_transaction.nil? && @original_transaction.to_s.size > 5000
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] explanation Value to be assigned
    def explanation=(explanation)
      if !explanation.nil? && explanation.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"explanation\", the character length must be smaller than or equal to 1500.")
      end

      @explanation = explanation
    end

    # Custom attribute writer method with validation
    # @param [Object] original_transaction Value to be assigned
    def original_transaction=(original_transaction)
      if !original_transaction.nil? && original_transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"original_transaction\", the character length must be smaller than or equal to 5000.")
      end

      @original_transaction = original_transaction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        additional_documentation == o.additional_documentation &&
        card_statement == o.card_statement &&
        cash_receipt == o.cash_receipt &&
        check_image == o.check_image &&
        explanation == o.explanation &&
        original_transaction == o.original_transaction
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@additional_documentation, @card_statement, @cash_receipt, @check_image, @explanation, @original_transaction)
  end
end
