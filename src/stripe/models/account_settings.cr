#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AccountSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "branding", type: AccountBrandingSettings)]
    property branding : AccountBrandingSettings

    @[JSON::Field(key: "card_payments", type: AccountCardPaymentsSettings)]
    property card_payments : AccountCardPaymentsSettings

    @[JSON::Field(key: "dashboard", type: AccountDashboardSettings)]
    property dashboard : AccountDashboardSettings

    @[JSON::Field(key: "payments", type: AccountPaymentsSettings)]
    property payments : AccountPaymentsSettings

    # Optional properties

    @[JSON::Field(key: "bacs_debit_payments", type: AccountBacsDebitPaymentsSettings?, presence: true, ignore_serialize: bacs_debit_payments.nil? && !bacs_debit_payments_present?)]
    property bacs_debit_payments : AccountBacsDebitPaymentsSettings?

    @[JSON::Field(ignore: true)]
    property? bacs_debit_payments_present : Bool = false

    @[JSON::Field(key: "card_issuing", type: AccountCardIssuingSettings?, presence: true, ignore_serialize: card_issuing.nil? && !card_issuing_present?)]
    property card_issuing : AccountCardIssuingSettings?

    @[JSON::Field(ignore: true)]
    property? card_issuing_present : Bool = false

    @[JSON::Field(key: "payouts", type: AccountPayoutSettings?, presence: true, ignore_serialize: payouts.nil? && !payouts_present?)]
    property payouts : AccountPayoutSettings?

    @[JSON::Field(ignore: true)]
    property? payouts_present : Bool = false

    @[JSON::Field(key: "sepa_debit_payments", type: AccountSepaDebitPaymentsSettings?, presence: true, ignore_serialize: sepa_debit_payments.nil? && !sepa_debit_payments_present?)]
    property sepa_debit_payments : AccountSepaDebitPaymentsSettings?

    @[JSON::Field(ignore: true)]
    property? sepa_debit_payments_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @branding : AccountBrandingSettings,
      @card_payments : AccountCardPaymentsSettings,
      @dashboard : AccountDashboardSettings,
      @payments : AccountPaymentsSettings,
      # Optional properties
      @bacs_debit_payments : AccountBacsDebitPaymentsSettings? = nil,
      @card_issuing : AccountCardIssuingSettings? = nil,
      @payouts : AccountPayoutSettings? = nil,
      @sepa_debit_payments : AccountSepaDebitPaymentsSettings? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@branding, @card_payments, @dashboard, @payments, @bacs_debit_payments, @bacs_debit_payments_present, @card_issuing, @card_issuing_present, @payouts, @payouts_present, @sepa_debit_payments, @sepa_debit_payments_present)
  end
end
