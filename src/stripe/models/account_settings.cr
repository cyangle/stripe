#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./account_bacs_debit_payments_settings"
require "./account_branding_settings"
require "./account_card_issuing_settings"
require "./account_card_payments_settings"
require "./account_dashboard_settings"
require "./account_invoices_settings"
require "./account_payments_settings"
require "./account_payout_settings"
require "./account_sepa_debit_payments_settings"
require "./account_treasury_settings"

module Stripe
  #
  class AccountSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "branding", type: Stripe::AccountBrandingSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter branding : Stripe::AccountBrandingSettings? = nil

    @[JSON::Field(key: "card_payments", type: Stripe::AccountCardPaymentsSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter card_payments : Stripe::AccountCardPaymentsSettings? = nil

    @[JSON::Field(key: "dashboard", type: Stripe::AccountDashboardSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter dashboard : Stripe::AccountDashboardSettings? = nil

    @[JSON::Field(key: "payments", type: Stripe::AccountPaymentsSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payments : Stripe::AccountPaymentsSettings? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "bacs_debit_payments", type: Stripe::AccountBacsDebitPaymentsSettings?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit_payments : Stripe::AccountBacsDebitPaymentsSettings? = nil

    @[JSON::Field(key: "card_issuing", type: Stripe::AccountCardIssuingSettings?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_issuing : Stripe::AccountCardIssuingSettings? = nil

    @[JSON::Field(key: "invoices", type: Stripe::AccountInvoicesSettings?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoices : Stripe::AccountInvoicesSettings? = nil

    @[JSON::Field(key: "payouts", type: Stripe::AccountPayoutSettings?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payouts : Stripe::AccountPayoutSettings? = nil

    @[JSON::Field(key: "sepa_debit_payments", type: Stripe::AccountSepaDebitPaymentsSettings?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit_payments : Stripe::AccountSepaDebitPaymentsSettings? = nil

    @[JSON::Field(key: "treasury", type: Stripe::AccountTreasurySettings?, default: nil, required: false, nullable: false, emit_null: false)]
    getter treasury : Stripe::AccountTreasurySettings? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @branding : Stripe::AccountBrandingSettings? = nil,
      @card_payments : Stripe::AccountCardPaymentsSettings? = nil,
      @dashboard : Stripe::AccountDashboardSettings? = nil,
      @payments : Stripe::AccountPaymentsSettings? = nil,
      # Optional properties
      @bacs_debit_payments : Stripe::AccountBacsDebitPaymentsSettings? = nil,
      @card_issuing : Stripe::AccountCardIssuingSettings? = nil,
      @invoices : Stripe::AccountInvoicesSettings? = nil,
      @payouts : Stripe::AccountPayoutSettings? = nil,
      @sepa_debit_payments : Stripe::AccountSepaDebitPaymentsSettings? = nil,
      @treasury : Stripe::AccountTreasurySettings? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"branding\" is required and cannot be null") if @branding.nil?

      unless (_branding = @branding).nil?
        invalid_properties.concat(_branding.list_invalid_properties_for("branding")) if _branding.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"card_payments\" is required and cannot be null") if @card_payments.nil?

      unless (_card_payments = @card_payments).nil?
        invalid_properties.concat(_card_payments.list_invalid_properties_for("card_payments")) if _card_payments.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"dashboard\" is required and cannot be null") if @dashboard.nil?

      unless (_dashboard = @dashboard).nil?
        invalid_properties.concat(_dashboard.list_invalid_properties_for("dashboard")) if _dashboard.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"payments\" is required and cannot be null") if @payments.nil?

      unless (_payments = @payments).nil?
        invalid_properties.concat(_payments.list_invalid_properties_for("payments")) if _payments.is_a?(OpenApi::Validatable)
      end
      unless (_bacs_debit_payments = @bacs_debit_payments).nil?
        invalid_properties.concat(_bacs_debit_payments.list_invalid_properties_for("bacs_debit_payments")) if _bacs_debit_payments.is_a?(OpenApi::Validatable)
      end
      unless (_card_issuing = @card_issuing).nil?
        invalid_properties.concat(_card_issuing.list_invalid_properties_for("card_issuing")) if _card_issuing.is_a?(OpenApi::Validatable)
      end
      unless (_invoices = @invoices).nil?
        invalid_properties.concat(_invoices.list_invalid_properties_for("invoices")) if _invoices.is_a?(OpenApi::Validatable)
      end
      unless (_payouts = @payouts).nil?
        invalid_properties.concat(_payouts.list_invalid_properties_for("payouts")) if _payouts.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_debit_payments = @sepa_debit_payments).nil?
        invalid_properties.concat(_sepa_debit_payments.list_invalid_properties_for("sepa_debit_payments")) if _sepa_debit_payments.is_a?(OpenApi::Validatable)
      end
      unless (_treasury = @treasury).nil?
        invalid_properties.concat(_treasury.list_invalid_properties_for("treasury")) if _treasury.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @branding.nil?
      unless (_branding = @branding).nil?
        return false if _branding.is_a?(OpenApi::Validatable) && !_branding.valid?
      end

      return false if @card_payments.nil?
      unless (_card_payments = @card_payments).nil?
        return false if _card_payments.is_a?(OpenApi::Validatable) && !_card_payments.valid?
      end

      return false if @dashboard.nil?
      unless (_dashboard = @dashboard).nil?
        return false if _dashboard.is_a?(OpenApi::Validatable) && !_dashboard.valid?
      end

      return false if @payments.nil?
      unless (_payments = @payments).nil?
        return false if _payments.is_a?(OpenApi::Validatable) && !_payments.valid?
      end

      unless (_bacs_debit_payments = @bacs_debit_payments).nil?
        return false if _bacs_debit_payments.is_a?(OpenApi::Validatable) && !_bacs_debit_payments.valid?
      end

      unless (_card_issuing = @card_issuing).nil?
        return false if _card_issuing.is_a?(OpenApi::Validatable) && !_card_issuing.valid?
      end

      unless (_invoices = @invoices).nil?
        return false if _invoices.is_a?(OpenApi::Validatable) && !_invoices.valid?
      end

      unless (_payouts = @payouts).nil?
        return false if _payouts.is_a?(OpenApi::Validatable) && !_payouts.valid?
      end

      unless (_sepa_debit_payments = @sepa_debit_payments).nil?
        return false if _sepa_debit_payments.is_a?(OpenApi::Validatable) && !_sepa_debit_payments.valid?
      end

      unless (_treasury = @treasury).nil?
        return false if _treasury.is_a?(OpenApi::Validatable) && !_treasury.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] branding Object to be assigned
    def branding=(new_value : Stripe::AccountBrandingSettings?)
      raise ArgumentError.new("\"branding\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @branding = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_payments Object to be assigned
    def card_payments=(new_value : Stripe::AccountCardPaymentsSettings?)
      raise ArgumentError.new("\"card_payments\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dashboard Object to be assigned
    def dashboard=(new_value : Stripe::AccountDashboardSettings?)
      raise ArgumentError.new("\"dashboard\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @dashboard = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payments Object to be assigned
    def payments=(new_value : Stripe::AccountPaymentsSettings?)
      raise ArgumentError.new("\"payments\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit_payments Object to be assigned
    def bacs_debit_payments=(new_value : Stripe::AccountBacsDebitPaymentsSettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_issuing Object to be assigned
    def card_issuing=(new_value : Stripe::AccountCardIssuingSettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_issuing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoices Object to be assigned
    def invoices=(new_value : Stripe::AccountInvoicesSettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoices = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payouts Object to be assigned
    def payouts=(new_value : Stripe::AccountPayoutSettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payouts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit_payments Object to be assigned
    def sepa_debit_payments=(new_value : Stripe::AccountSepaDebitPaymentsSettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treasury Object to be assigned
    def treasury=(new_value : Stripe::AccountTreasurySettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @treasury = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@branding, @card_payments, @dashboard, @payments, @bacs_debit_payments, @card_issuing, @invoices, @payouts, @sepa_debit_payments, @treasury)
  end
end
