#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class PaymentMethodDetailsInteracPresentReceipt
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # EMV tag 9F26, cryptogram generated by the integrated circuit chip.
    @[JSON::Field(key: "application_cryptogram", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter application_cryptogram : String? = nil
    MAX_LENGTH_FOR_APPLICATION_CRYPTOGRAM = 5000

    # Mnenomic of the Application Identifier.
    @[JSON::Field(key: "application_preferred_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter application_preferred_name : String? = nil
    MAX_LENGTH_FOR_APPLICATION_PREFERRED_NAME = 5000

    # Identifier for this transaction.
    @[JSON::Field(key: "authorization_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter authorization_code : String? = nil
    MAX_LENGTH_FOR_AUTHORIZATION_CODE = 5000

    # EMV tag 8A. A code returned by the card issuer.
    @[JSON::Field(key: "authorization_response_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter authorization_response_code : String? = nil
    MAX_LENGTH_FOR_AUTHORIZATION_RESPONSE_CODE = 5000

    # Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
    @[JSON::Field(key: "cardholder_verification_method", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cardholder_verification_method : String? = nil
    MAX_LENGTH_FOR_CARDHOLDER_VERIFICATION_METHOD = 5000

    # EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
    @[JSON::Field(key: "dedicated_file_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter dedicated_file_name : String? = nil
    MAX_LENGTH_FOR_DEDICATED_FILE_NAME = 5000

    # The outcome of a series of EMV functions performed by the card reader.
    @[JSON::Field(key: "terminal_verification_results", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter terminal_verification_results : String? = nil
    MAX_LENGTH_FOR_TERMINAL_VERIFICATION_RESULTS = 5000

    # An indication of various EMV functions performed during the transaction.
    @[JSON::Field(key: "transaction_status_information", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter transaction_status_information : String? = nil
    MAX_LENGTH_FOR_TRANSACTION_STATUS_INFORMATION = 5000

    # End of Required Properties

    # Optional Properties

    # The type of account being debited or credited
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_type : String? = nil
    ERROR_MESSAGE_FOR_ACCOUNT_TYPE = "invalid value for \"account_type\", must be one of [checking, savings, unknown]."
    VALID_VALUES_FOR_ACCOUNT_TYPE  = String.static_array("checking", "savings", "unknown")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @application_cryptogram : String? = nil,
      @application_preferred_name : String? = nil,
      @authorization_code : String? = nil,
      @authorization_response_code : String? = nil,
      @cardholder_verification_method : String? = nil,
      @dedicated_file_name : String? = nil,
      @terminal_verification_results : String? = nil,
      @transaction_status_information : String? = nil,
      # Optional properties
      @account_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_application_cryptogram = @application_cryptogram).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("application_cryptogram", _application_cryptogram.to_s.size, MAX_LENGTH_FOR_APPLICATION_CRYPTOGRAM)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_application_preferred_name = @application_preferred_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("application_preferred_name", _application_preferred_name.to_s.size, MAX_LENGTH_FOR_APPLICATION_PREFERRED_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_authorization_code = @authorization_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("authorization_code", _authorization_code.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_authorization_response_code = @authorization_response_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("authorization_response_code", _authorization_response_code.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_RESPONSE_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_cardholder_verification_method = @cardholder_verification_method).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cardholder_verification_method", _cardholder_verification_method.to_s.size, MAX_LENGTH_FOR_CARDHOLDER_VERIFICATION_METHOD)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_dedicated_file_name = @dedicated_file_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("dedicated_file_name", _dedicated_file_name.to_s.size, MAX_LENGTH_FOR_DEDICATED_FILE_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_terminal_verification_results = @terminal_verification_results).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("terminal_verification_results", _terminal_verification_results.to_s.size, MAX_LENGTH_FOR_TERMINAL_VERIFICATION_RESULTS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_transaction_status_information = @transaction_status_information).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transaction_status_information", _transaction_status_information.to_s.size, MAX_LENGTH_FOR_TRANSACTION_STATUS_INFORMATION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_account_type = @account_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ACCOUNT_TYPE) unless OpenApi::EnumValidator.valid?(_account_type, VALID_VALUES_FOR_ACCOUNT_TYPE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_application_cryptogram = @application_cryptogram).nil?
        return false if _application_cryptogram.to_s.size > MAX_LENGTH_FOR_APPLICATION_CRYPTOGRAM
      end

      unless (_application_preferred_name = @application_preferred_name).nil?
        return false if _application_preferred_name.to_s.size > MAX_LENGTH_FOR_APPLICATION_PREFERRED_NAME
      end

      unless (_authorization_code = @authorization_code).nil?
        return false if _authorization_code.to_s.size > MAX_LENGTH_FOR_AUTHORIZATION_CODE
      end

      unless (_authorization_response_code = @authorization_response_code).nil?
        return false if _authorization_response_code.to_s.size > MAX_LENGTH_FOR_AUTHORIZATION_RESPONSE_CODE
      end

      unless (_cardholder_verification_method = @cardholder_verification_method).nil?
        return false if _cardholder_verification_method.to_s.size > MAX_LENGTH_FOR_CARDHOLDER_VERIFICATION_METHOD
      end

      unless (_dedicated_file_name = @dedicated_file_name).nil?
        return false if _dedicated_file_name.to_s.size > MAX_LENGTH_FOR_DEDICATED_FILE_NAME
      end

      unless (_terminal_verification_results = @terminal_verification_results).nil?
        return false if _terminal_verification_results.to_s.size > MAX_LENGTH_FOR_TERMINAL_VERIFICATION_RESULTS
      end

      unless (_transaction_status_information = @transaction_status_information).nil?
        return false if _transaction_status_information.to_s.size > MAX_LENGTH_FOR_TRANSACTION_STATUS_INFORMATION
      end

      unless (_account_type = @account_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_account_type, VALID_VALUES_FOR_ACCOUNT_TYPE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_cryptogram Object to be assigned
    def application_cryptogram=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("application_cryptogram", new_value.to_s.size, MAX_LENGTH_FOR_APPLICATION_CRYPTOGRAM)
      end

      @application_cryptogram = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_preferred_name Object to be assigned
    def application_preferred_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("application_preferred_name", new_value.to_s.size, MAX_LENGTH_FOR_APPLICATION_PREFERRED_NAME)
      end

      @application_preferred_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_code Object to be assigned
    def authorization_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("authorization_code", new_value.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_CODE)
      end

      @authorization_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_response_code Object to be assigned
    def authorization_response_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("authorization_response_code", new_value.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_RESPONSE_CODE)
      end

      @authorization_response_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cardholder_verification_method Object to be assigned
    def cardholder_verification_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cardholder_verification_method", new_value.to_s.size, MAX_LENGTH_FOR_CARDHOLDER_VERIFICATION_METHOD)
      end

      @cardholder_verification_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dedicated_file_name Object to be assigned
    def dedicated_file_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("dedicated_file_name", new_value.to_s.size, MAX_LENGTH_FOR_DEDICATED_FILE_NAME)
      end

      @dedicated_file_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terminal_verification_results Object to be assigned
    def terminal_verification_results=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("terminal_verification_results", new_value.to_s.size, MAX_LENGTH_FOR_TERMINAL_VERIFICATION_RESULTS)
      end

      @terminal_verification_results = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_status_information Object to be assigned
    def transaction_status_information=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("transaction_status_information", new_value.to_s.size, MAX_LENGTH_FOR_TRANSACTION_STATUS_INFORMATION)
      end

      @transaction_status_information = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("account_type", new_value, VALID_VALUES_FOR_ACCOUNT_TYPE)
      end

      @account_type = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@application_cryptogram, @application_preferred_name, @authorization_code, @authorization_response_code, @cardholder_verification_method, @dedicated_file_name, @terminal_verification_results, @transaction_status_information, @account_type)
  end
end
