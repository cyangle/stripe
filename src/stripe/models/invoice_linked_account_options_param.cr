#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./invoice_linked_account_options_filters_param"

module Stripe
  class InvoiceLinkedAccountOptionsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "filters", type: Stripe::InvoiceLinkedAccountOptionsFiltersParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter filters : Stripe::InvoiceLinkedAccountOptionsFiltersParam? = nil

    # The list of permissions to request. If this parameter is passed, the `payment_method` permission must be included. Valid permissions include: `balances`, `ownership`, `payment_method`, and `transactions`.
    @[JSON::Field(key: "permissions", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter permissions : Array(String)? = nil
    ERROR_MESSAGE_FOR_PERMISSIONS = "invalid value for \"permissions\", must be one of [balances, ownership, payment_method, transactions]."
    VALID_VALUES_FOR_PERMISSIONS  = String.static_array("balances", "ownership", "payment_method", "transactions")

    # List of data features that you would like to retrieve upon account creation.
    @[JSON::Field(key: "prefetch", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter prefetch : Array(String)? = nil
    ERROR_MESSAGE_FOR_PREFETCH = "invalid value for \"prefetch\", must be one of [balances, ownership, transactions]."
    VALID_VALUES_FOR_PREFETCH  = String.static_array("balances", "ownership", "transactions")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @filters : Stripe::InvoiceLinkedAccountOptionsFiltersParam? = nil,
      @permissions : Array(String)? = nil,
      @prefetch : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_filters = @filters).nil?
        invalid_properties.concat(_filters.list_invalid_properties_for("filters")) if _filters.is_a?(OpenApi::Validatable)
      end
      unless (_permissions = @permissions).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PERMISSIONS) unless OpenApi::EnumValidator.valid?(_permissions, VALID_VALUES_FOR_PERMISSIONS)
      end
      unless (_prefetch = @prefetch).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PREFETCH) unless OpenApi::EnumValidator.valid?(_prefetch, VALID_VALUES_FOR_PREFETCH)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_filters = @filters).nil?
        return false if _filters.is_a?(OpenApi::Validatable) && !_filters.valid?
      end

      unless (_permissions = @permissions).nil?
        return false unless OpenApi::EnumValidator.valid?(_permissions, VALID_VALUES_FOR_PERMISSIONS)
      end

      unless (_prefetch = @prefetch).nil?
        return false unless OpenApi::EnumValidator.valid?(_prefetch, VALID_VALUES_FOR_PREFETCH)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filters Object to be assigned
    def filters=(new_value : Stripe::InvoiceLinkedAccountOptionsFiltersParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @filters = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permissions Object to be assigned
    def permissions=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("permissions", new_value, VALID_VALUES_FOR_PERMISSIONS)
      end

      @permissions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prefetch Object to be assigned
    def prefetch=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("prefetch", new_value, VALID_VALUES_FOR_PREFETCH)
      end

      @prefetch = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@filters, @permissions, @prefetch)
  end
end
