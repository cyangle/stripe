#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Documents that may be submitted to satisfy various informational requests.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PersonDocumentsSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "company_authorization", type: DocumentsParam7?, presence: true, ignore_serialize: company_authorization.nil? && !company_authorization_present?)]
    property company_authorization : DocumentsParam7?

    @[JSON::Field(ignore: true)]
    property? company_authorization_present : Bool = false

    @[JSON::Field(key: "passport", type: DocumentsParam8?, presence: true, ignore_serialize: passport.nil? && !passport_present?)]
    property passport : DocumentsParam8?

    @[JSON::Field(ignore: true)]
    property? passport_present : Bool = false

    @[JSON::Field(key: "visa", type: DocumentsParam9?, presence: true, ignore_serialize: visa.nil? && !visa_present?)]
    property visa : DocumentsParam9?

    @[JSON::Field(ignore: true)]
    property? visa_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @company_authorization : DocumentsParam7? = nil, @passport : DocumentsParam8? = nil, @visa : DocumentsParam9? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        company_authorization == o.company_authorization &&
        passport == o.passport &&
        visa == o.visa
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@company_authorization, @passport, @visa)
  end
end
