#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class ThreeDSecureDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # For authenticated transactions: how the customer was authenticated by the issuing bank.
    @[JSON::Field(key: "authentication_flow", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: authentication_flow.nil? && !authentication_flow_present?)]
    getter authentication_flow : String? = nil

    @[JSON::Field(ignore: true)]
    property? authentication_flow_present : Bool = false
    VALID_VALUES_FOR_AUTHENTICATION_FLOW = StaticArray["challenge", "frictionless"]

    # Indicates the outcome of 3D Secure authentication.
    @[JSON::Field(key: "result", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: result.nil? && !result_present?)]
    getter result : String? = nil

    @[JSON::Field(ignore: true)]
    property? result_present : Bool = false
    VALID_VALUES_FOR_RESULT = StaticArray["attempt_acknowledged", "authenticated", "exempted", "failed", "not_supported", "processing_error"]

    # Additional information about why 3D Secure succeeded or failed based on the `result`.
    @[JSON::Field(key: "result_reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: result_reason.nil? && !result_reason_present?)]
    getter result_reason : String? = nil

    @[JSON::Field(ignore: true)]
    property? result_reason_present : Bool = false
    VALID_VALUES_FOR_RESULT_REASON = StaticArray["abandoned", "bypassed", "canceled", "card_not_enrolled", "network_not_supported", "protocol_error", "rejected"]

    # The version of 3D Secure that was used.
    @[JSON::Field(key: "version", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: version.nil? && !version_present?)]
    getter version : String? = nil

    @[JSON::Field(ignore: true)]
    property? version_present : Bool = false
    VALID_VALUES_FOR_VERSION = StaticArray["1.0.2", "2.1.0", "2.2.0"]

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @authentication_flow : String? = nil,
      @result : String? = nil,
      @result_reason : String? = nil,
      @version : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _authentication_flow = @authentication_flow
        invalid_properties.push(OpenApi::EnumValidator.error_message("authentication_flow", VALID_VALUES_FOR_AUTHENTICATION_FLOW)) unless OpenApi::EnumValidator.valid?(_authentication_flow, VALID_VALUES_FOR_AUTHENTICATION_FLOW)
      end
      if _result = @result
        invalid_properties.push(OpenApi::EnumValidator.error_message("result", VALID_VALUES_FOR_RESULT)) unless OpenApi::EnumValidator.valid?(_result, VALID_VALUES_FOR_RESULT)
      end
      if _result_reason = @result_reason
        invalid_properties.push(OpenApi::EnumValidator.error_message("result_reason", VALID_VALUES_FOR_RESULT_REASON)) unless OpenApi::EnumValidator.valid?(_result_reason, VALID_VALUES_FOR_RESULT_REASON)
      end
      if _version = @version
        invalid_properties.push(OpenApi::EnumValidator.error_message("version", VALID_VALUES_FOR_VERSION)) unless OpenApi::EnumValidator.valid?(_version, VALID_VALUES_FOR_VERSION)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _authentication_flow = @authentication_flow
        return false unless OpenApi::EnumValidator.valid?(_authentication_flow, VALID_VALUES_FOR_AUTHENTICATION_FLOW)
      end

      if _result = @result
        return false unless OpenApi::EnumValidator.valid?(_result, VALID_VALUES_FOR_RESULT)
      end

      if _result_reason = @result_reason
        return false unless OpenApi::EnumValidator.valid?(_result_reason, VALID_VALUES_FOR_RESULT_REASON)
      end

      if _version = @version
        return false unless OpenApi::EnumValidator.valid?(_version, VALID_VALUES_FOR_VERSION)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication_flow Object to be assigned
    def authentication_flow=(authentication_flow : String?)
      if authentication_flow.nil?
        return @authentication_flow = nil
      end
      _authentication_flow = authentication_flow.not_nil!
      OpenApi::EnumValidator.validate("authentication_flow", _authentication_flow, VALID_VALUES_FOR_AUTHENTICATION_FLOW)
      @authentication_flow = _authentication_flow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result Object to be assigned
    def result=(result : String?)
      if result.nil?
        return @result = nil
      end
      _result = result.not_nil!
      OpenApi::EnumValidator.validate("result", _result, VALID_VALUES_FOR_RESULT)
      @result = _result
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result_reason Object to be assigned
    def result_reason=(result_reason : String?)
      if result_reason.nil?
        return @result_reason = nil
      end
      _result_reason = result_reason.not_nil!
      OpenApi::EnumValidator.validate("result_reason", _result_reason, VALID_VALUES_FOR_RESULT_REASON)
      @result_reason = _result_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(version : String?)
      if version.nil?
        return @version = nil
      end
      _version = version.not_nil!
      OpenApi::EnumValidator.validate("version", _version, VALID_VALUES_FOR_VERSION)
      @version = _version
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@authentication_flow, @authentication_flow_present, @result, @result_present, @result_reason, @result_reason_present, @version, @version_present)
  end
end
