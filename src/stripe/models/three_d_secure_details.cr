#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ThreeDSecureDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # For authenticated transactions: how the customer was authenticated by the issuing bank.
    @[JSON::Field(key: "authentication_flow", type: String?, presence: true, ignore_serialize: authentication_flow.nil? && !authentication_flow_present?)]
    getter authentication_flow : String?

    @[JSON::Field(ignore: true)]
    property? authentication_flow_present : Bool = false

    ENUM_VALIDATOR_FOR_AUTHENTICATION_FLOW = EnumValidator.new("authentication_flow", "String", ["challenge", "frictionless"])

    # Indicates the outcome of 3D Secure authentication.
    @[JSON::Field(key: "result", type: String?, presence: true, ignore_serialize: result.nil? && !result_present?)]
    getter result : String?

    @[JSON::Field(ignore: true)]
    property? result_present : Bool = false

    ENUM_VALIDATOR_FOR_RESULT = EnumValidator.new("result", "String", ["attempt_acknowledged", "authenticated", "failed", "not_supported", "processing_error"])

    # Additional information about why 3D Secure succeeded or failed based on the `result`.
    @[JSON::Field(key: "result_reason", type: String?, presence: true, ignore_serialize: result_reason.nil? && !result_reason_present?)]
    getter result_reason : String?

    @[JSON::Field(ignore: true)]
    property? result_reason_present : Bool = false

    ENUM_VALIDATOR_FOR_RESULT_REASON = EnumValidator.new("result_reason", "String", ["abandoned", "bypassed", "canceled", "card_not_enrolled", "network_not_supported", "protocol_error", "rejected"])

    # The version of 3D Secure that was used.
    @[JSON::Field(key: "version", type: String?, presence: true, ignore_serialize: version.nil? && !version_present?)]
    getter version : String?

    @[JSON::Field(ignore: true)]
    property? version_present : Bool = false

    ENUM_VALIDATOR_FOR_VERSION = EnumValidator.new("version", "String", ["1.0.2", "2.1.0", "2.2.0"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @authentication_flow : String? = nil,
      @result : String? = nil,
      @result_reason : String? = nil,
      @version : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_AUTHENTICATION_FLOW.error_message) unless ENUM_VALIDATOR_FOR_AUTHENTICATION_FLOW.valid?(@authentication_flow)

      invalid_properties.push(ENUM_VALIDATOR_FOR_RESULT.error_message) unless ENUM_VALIDATOR_FOR_RESULT.valid?(@result)

      invalid_properties.push(ENUM_VALIDATOR_FOR_RESULT_REASON.error_message) unless ENUM_VALIDATOR_FOR_RESULT_REASON.valid?(@result_reason)

      invalid_properties.push(ENUM_VALIDATOR_FOR_VERSION.error_message) unless ENUM_VALIDATOR_FOR_VERSION.valid?(@version)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_AUTHENTICATION_FLOW.valid?(@authentication_flow)
      return false unless ENUM_VALIDATOR_FOR_RESULT.valid?(@result)
      return false unless ENUM_VALIDATOR_FOR_RESULT_REASON.valid?(@result_reason)
      return false unless ENUM_VALIDATOR_FOR_VERSION.valid?(@version)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication_flow Object to be assigned
    def authentication_flow=(authentication_flow)
      ENUM_VALIDATOR_FOR_AUTHENTICATION_FLOW.valid!(authentication_flow)
      @authentication_flow = authentication_flow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result Object to be assigned
    def result=(result)
      ENUM_VALIDATOR_FOR_RESULT.valid!(result)
      @result = result
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result_reason Object to be assigned
    def result_reason=(result_reason)
      ENUM_VALIDATOR_FOR_RESULT_REASON.valid!(result_reason)
      @result_reason = result_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(version)
      ENUM_VALIDATOR_FOR_VERSION.valid!(version)
      @version = version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@authentication_flow, @result, @result_reason, @version)
  end
end
