#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class RefundTransferReversal
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Amount, in %s.
    @[JSON::Field(key: "amount", type: Int64?)]
    property amount : Int64?

    @[JSON::Field(key: "balance_transaction", type: FeeRefundBalanceTransaction, presence: true, ignore_serialize: balance_transaction.nil? && !balance_transaction_present?)]
    property balance_transaction : FeeRefundBalanceTransaction

    @[JSON::Field(ignore: true)]
    property? balance_transaction_present : Bool = false

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?)]
    property created : Int64?

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?)]
    property currency : String?

    @[JSON::Field(key: "destination_payment_refund", type: TransferReversalDestinationPaymentRefund, presence: true, ignore_serialize: destination_payment_refund.nil? && !destination_payment_refund_present?)]
    property destination_payment_refund : TransferReversalDestinationPaymentRefund

    @[JSON::Field(ignore: true)]
    property? destination_payment_refund_present : Bool = false

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?)]
    getter id : String?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String), presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?)]
    getter object : String?

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["transfer_reversal"])

    @[JSON::Field(key: "source_refund", type: TransferReversalSourceRefund, presence: true, ignore_serialize: source_refund.nil? && !source_refund_present?)]
    property source_refund : TransferReversalSourceRefund

    @[JSON::Field(ignore: true)]
    property? source_refund_present : Bool = false

    @[JSON::Field(key: "transfer", type: TransferReversalTransfer?)]
    property transfer : TransferReversalTransfer?

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        String,
        Stripe::TransferReversal,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @balance_transaction : FeeRefundBalanceTransaction?, @created : Int64, @currency : String, @destination_payment_refund : TransferReversalDestinationPaymentRefund?, @id : String, @metadata : Hash(String, String)?, @object : String, @source_refund : TransferReversalSourceRefund?, @transfer : TransferReversalTransfer)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        balance_transaction == o.balance_transaction &&
        created == o.created &&
        currency == o.currency &&
        destination_payment_refund == o.destination_payment_refund &&
        id == o.id &&
        metadata == o.metadata &&
        object == o.object &&
        source_refund == o.source_refund &&
        transfer == o.transfer
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amount, @balance_transaction, @created, @currency, @destination_payment_refund, @id, @metadata, @object, @source_refund, @transfer)
  end
end
