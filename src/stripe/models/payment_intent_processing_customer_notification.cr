#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentProcessingCustomerNotification
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank.
    @[JSON::Field(key: "approval_requested", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: approval_requested.nil? && !approval_requested_present?)]
    getter approval_requested : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? approval_requested_present : Bool = false

    # If customer approval is required, they need to provide approval before this time.
    @[JSON::Field(key: "completes_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: completes_at.nil? && !completes_at_present?)]
    getter completes_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? completes_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @approval_requested : Bool? = nil,
      @completes_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] approval_requested Object to be assigned
    def approval_requested=(approval_requested : Bool?)
      if approval_requested.nil?
        return @approval_requested = nil
      end
      _approval_requested = approval_requested.not_nil!
      @approval_requested = _approval_requested
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] completes_at Object to be assigned
    def completes_at=(completes_at : Int64?)
      if completes_at.nil?
        return @completes_at = nil
      end
      _completes_at = completes_at.not_nil!
      @completes_at = _completes_at
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@approval_requested, @approval_requested_present, @completes_at, @completes_at_present)
  end
end
