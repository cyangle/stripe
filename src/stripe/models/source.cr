#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # `Source` objects allow you to accept a variety of payment methods. They represent a customer's payment instrument, and can be used with the Stripe API just like a `Card` object: once chargeable, they can be charged, or can be attached to customers.  Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  class Source
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The client secret of the source. Used for client-side retrieval using a publishable key.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter client_secret : String? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
    @[JSON::Field(key: "flow", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter flow : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["source"])

    # The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    # The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["ach_credit_transfer", "ach_debit", "acss_debit", "alipay", "au_becs_debit", "bancontact", "card", "card_present", "eps", "giropay", "ideal", "klarna", "multibanco", "p24", "sepa_debit", "sofort", "three_d_secure", "wechat"])

    # Optional properties

    @[JSON::Field(key: "ach_credit_transfer", type: Stripe::SourceTypeAchCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer? = nil

    @[JSON::Field(key: "ach_debit", type: Stripe::SourceTypeAchDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_debit : Stripe::SourceTypeAchDebit? = nil

    @[JSON::Field(key: "acss_debit", type: Stripe::SourceTypeAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::SourceTypeAcssDebit? = nil

    @[JSON::Field(key: "alipay", type: Stripe::SourceTypeAlipay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::SourceTypeAlipay? = nil

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount.nil? && !amount_present?)]
    getter amount : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_present : Bool = false

    @[JSON::Field(key: "au_becs_debit", type: Stripe::SourceTypeAuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::SourceTypeAuBecsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::SourceTypeBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::SourceTypeBancontact? = nil

    @[JSON::Field(key: "card", type: Stripe::SourceTypeCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::SourceTypeCard? = nil

    @[JSON::Field(key: "card_present", type: Stripe::SourceTypeCardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::SourceTypeCardPresent? = nil

    @[JSON::Field(key: "code_verification", type: Stripe::SourceCodeVerificationFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter code_verification : Stripe::SourceCodeVerificationFlow? = nil

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil

    @[JSON::Field(key: "eps", type: Stripe::SourceTypeEps?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::SourceTypeEps? = nil

    @[JSON::Field(key: "giropay", type: Stripe::SourceTypeGiropay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::SourceTypeGiropay? = nil

    @[JSON::Field(key: "ideal", type: Stripe::SourceTypeIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::SourceTypeIdeal? = nil

    @[JSON::Field(key: "klarna", type: Stripe::SourceTypeKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::SourceTypeKlarna? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "multibanco", type: Stripe::SourceTypeMultibanco?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco : Stripe::SourceTypeMultibanco? = nil

    @[JSON::Field(key: "owner", type: Stripe::SourceOwner1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: owner.nil? && !owner_present?)]
    getter owner : Stripe::SourceOwner1? = nil

    @[JSON::Field(ignore: true)]
    property? owner_present : Bool = false

    @[JSON::Field(key: "p24", type: Stripe::SourceTypeP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::SourceTypeP24? = nil

    @[JSON::Field(key: "receiver", type: Stripe::SourceReceiverFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter receiver : Stripe::SourceReceiverFlow? = nil

    @[JSON::Field(key: "redirect", type: Stripe::SourceRedirectFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect : Stripe::SourceRedirectFlow? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::SourceTypeSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::SourceTypeSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::SourceTypeSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::SourceTypeSofort? = nil

    @[JSON::Field(key: "source_order", type: Stripe::SourceOrder?, default: nil, required: false, nullable: false, emit_null: false)]
    getter source_order : Stripe::SourceOrder? = nil

    # Extra information about a source. This will appear on your customer's statement every time you charge the source.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String? = nil

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    @[JSON::Field(key: "three_d_secure", type: Stripe::SourceTypeThreeDSecure?, default: nil, required: false, nullable: false, emit_null: false)]
    getter three_d_secure : Stripe::SourceTypeThreeDSecure? = nil

    # Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    @[JSON::Field(key: "usage", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: usage.nil? && !usage_present?)]
    getter usage : String? = nil

    @[JSON::Field(ignore: true)]
    property? usage_present : Bool = false

    @[JSON::Field(key: "wechat", type: Stripe::SourceTypeWechat?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat : Stripe::SourceTypeWechat? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @client_secret : String? = nil,
      @created : Int64? = nil,
      @flow : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer? = nil,
      @ach_debit : Stripe::SourceTypeAchDebit? = nil,
      @acss_debit : Stripe::SourceTypeAcssDebit? = nil,
      @alipay : Stripe::SourceTypeAlipay? = nil,
      @amount : Int64? = nil,
      @au_becs_debit : Stripe::SourceTypeAuBecsDebit? = nil,
      @bancontact : Stripe::SourceTypeBancontact? = nil,
      @card : Stripe::SourceTypeCard? = nil,
      @card_present2 : Stripe::SourceTypeCardPresent? = nil,
      @code_verification : Stripe::SourceCodeVerificationFlow? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @eps : Stripe::SourceTypeEps? = nil,
      @giropay : Stripe::SourceTypeGiropay? = nil,
      @ideal : Stripe::SourceTypeIdeal? = nil,
      @klarna : Stripe::SourceTypeKlarna? = nil,
      @metadata : Hash(String, String)? = nil,
      @multibanco : Stripe::SourceTypeMultibanco? = nil,
      @owner : Stripe::SourceOwner1? = nil,
      @p24 : Stripe::SourceTypeP24? = nil,
      @receiver : Stripe::SourceReceiverFlow? = nil,
      @redirect : Stripe::SourceRedirectFlow? = nil,
      @sepa_debit : Stripe::SourceTypeSepaDebit? = nil,
      @sofort : Stripe::SourceTypeSofort? = nil,
      @source_order : Stripe::SourceOrder? = nil,
      @statement_descriptor : String? = nil,
      @three_d_secure : Stripe::SourceTypeThreeDSecure? = nil,
      @usage : String? = nil,
      @wechat : Stripe::SourceTypeWechat? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"client_secret\" is required and cannot be null") if @client_secret.nil?
      if _client_secret = @client_secret
        if _client_secret.to_s.size > 5000
          invalid_properties.push("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"flow\" is required and cannot be null") if @flow.nil?
      if _flow = @flow
        if _flow.to_s.size > 5000
          invalid_properties.push("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?
      if _status = @status
        if _status.to_s.size > 5000
          invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      # This is a model ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer?
      # This is a model ach_debit : Stripe::SourceTypeAchDebit?
      # This is a model acss_debit : Stripe::SourceTypeAcssDebit?
      # This is a model alipay : Stripe::SourceTypeAlipay?
      # This is a model au_becs_debit : Stripe::SourceTypeAuBecsDebit?
      # This is a model bancontact : Stripe::SourceTypeBancontact?
      # This is a model card : Stripe::SourceTypeCard?
      # This is a model card_present : Stripe::SourceTypeCardPresent?
      # This is a model code_verification : Stripe::SourceCodeVerificationFlow?
      if _customer = @customer
        if _customer.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model eps : Stripe::SourceTypeEps?
      # This is a model giropay : Stripe::SourceTypeGiropay?
      # This is a model ideal : Stripe::SourceTypeIdeal?
      # This is a model klarna : Stripe::SourceTypeKlarna?
      # This is a model multibanco : Stripe::SourceTypeMultibanco?
      # This is a model owner : Stripe::SourceOwner1?
      # This is a model p24 : Stripe::SourceTypeP24?
      # This is a model receiver : Stripe::SourceReceiverFlow?
      # This is a model redirect : Stripe::SourceRedirectFlow?
      # This is a model sepa_debit : Stripe::SourceTypeSepaDebit?
      # This is a model sofort : Stripe::SourceTypeSofort?
      # This is a model source_order : Stripe::SourceOrder?
      if _statement_descriptor = @statement_descriptor
        if _statement_descriptor.to_s.size > 5000
          invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model three_d_secure : Stripe::SourceTypeThreeDSecure?
      if _usage = @usage
        if _usage.to_s.size > 5000
          invalid_properties.push("invalid value for \"usage\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model wechat : Stripe::SourceTypeWechat?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @client_secret.nil?
      if _client_secret = @client_secret
        return false if _client_secret.to_s.size > 5000
      end
      return false if @created.nil?
      return false if @flow.nil?
      if _flow = @flow
        return false if _flow.to_s.size > 5000
      end
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @status.nil?
      if _status = @status
        return false if _status.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _customer = @customer
        return false if _customer.to_s.size > 5000
      end
      if _statement_descriptor = @statement_descriptor
        return false if _statement_descriptor.to_s.size > 5000
      end
      if _usage = @usage
        return false if _usage.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_secret Object to be assigned
    def client_secret=(client_secret : String?)
      if client_secret.nil?
        raise ArgumentError.new("\"client_secret\" is required and cannot be null")
      end
      _client_secret = client_secret.not_nil!
      if _client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      @client_secret = client_secret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow Object to be assigned
    def flow=(flow : String?)
      if flow.nil?
        raise ArgumentError.new("\"flow\" is required and cannot be null")
      end
      _flow = flow.not_nil!
      if _flow.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
      end

      @flow = flow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      if _status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_credit_transfer Object to be assigned
    def ach_credit_transfer=(ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer?)
      if ach_credit_transfer.nil?
        return @ach_credit_transfer = nil
      end
      @ach_credit_transfer = ach_credit_transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_debit Object to be assigned
    def ach_debit=(ach_debit : Stripe::SourceTypeAchDebit?)
      if ach_debit.nil?
        return @ach_debit = nil
      end
      @ach_debit = ach_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::SourceTypeAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      @acss_debit = acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(alipay : Stripe::SourceTypeAlipay?)
      if alipay.nil?
        return @alipay = nil
      end
      @alipay = alipay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        return @amount = nil
      end
      @amount = amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(au_becs_debit : Stripe::SourceTypeAuBecsDebit?)
      if au_becs_debit.nil?
        return @au_becs_debit = nil
      end
      @au_becs_debit = au_becs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::SourceTypeBancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      @bancontact = bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::SourceTypeCard?)
      if card.nil?
        return @card = nil
      end
      @card = card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(card_present : Stripe::SourceTypeCardPresent?)
      if card_present.nil?
        return @card_present2 = nil
      end
      @card_present2 = card_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] code_verification Object to be assigned
    def code_verification=(code_verification : Stripe::SourceCodeVerificationFlow?)
      if code_verification.nil?
        return @code_verification = nil
      end
      @code_verification = code_verification
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      if _customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(eps : Stripe::SourceTypeEps?)
      if eps.nil?
        return @eps = nil
      end
      @eps = eps
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(giropay : Stripe::SourceTypeGiropay?)
      if giropay.nil?
        return @giropay = nil
      end
      @giropay = giropay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(ideal : Stripe::SourceTypeIdeal?)
      if ideal.nil?
        return @ideal = nil
      end
      @ideal = ideal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(klarna : Stripe::SourceTypeKlarna?)
      if klarna.nil?
        return @klarna = nil
      end
      @klarna = klarna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco Object to be assigned
    def multibanco=(multibanco : Stripe::SourceTypeMultibanco?)
      if multibanco.nil?
        return @multibanco = nil
      end
      @multibanco = multibanco
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(owner : Stripe::SourceOwner1?)
      if owner.nil?
        return @owner = nil
      end
      @owner = owner
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(p24 : Stripe::SourceTypeP24?)
      if p24.nil?
        return @p24 = nil
      end
      @p24 = p24
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receiver Object to be assigned
    def receiver=(receiver : Stripe::SourceReceiverFlow?)
      if receiver.nil?
        return @receiver = nil
      end
      @receiver = receiver
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect Object to be assigned
    def redirect=(redirect : Stripe::SourceRedirectFlow?)
      if redirect.nil?
        return @redirect = nil
      end
      @redirect = redirect
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(sepa_debit : Stripe::SourceTypeSepaDebit?)
      if sepa_debit.nil?
        return @sepa_debit = nil
      end
      @sepa_debit = sepa_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(sofort : Stripe::SourceTypeSofort?)
      if sofort.nil?
        return @sofort = nil
      end
      @sofort = sofort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_order Object to be assigned
    def source_order=(source_order : Stripe::SourceOrder?)
      if source_order.nil?
        return @source_order = nil
      end
      @source_order = source_order
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        return @statement_descriptor = nil
      end
      _statement_descriptor = statement_descriptor.not_nil!
      if _statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] three_d_secure Object to be assigned
    def three_d_secure=(three_d_secure : Stripe::SourceTypeThreeDSecure?)
      if three_d_secure.nil?
        return @three_d_secure = nil
      end
      @three_d_secure = three_d_secure
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(usage : String?)
      if usage.nil?
        return @usage = nil
      end
      _usage = usage.not_nil!
      if _usage.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"usage\", the character length must be smaller than or equal to 5000.")
      end

      @usage = usage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat Object to be assigned
    def wechat=(wechat : Stripe::SourceTypeWechat?)
      if wechat.nil?
        return @wechat = nil
      end
      @wechat = wechat
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@client_secret, @created, @flow, @id, @livemode, @object, @status, @_type, @ach_credit_transfer, @ach_debit, @acss_debit, @alipay, @amount, @amount_present, @au_becs_debit, @bancontact, @card, @card_present2, @code_verification, @currency, @currency_present, @customer, @eps, @giropay, @ideal, @klarna, @metadata, @metadata_present, @multibanco, @owner, @owner_present, @p24, @receiver, @redirect, @sepa_debit, @sofort, @source_order, @statement_descriptor, @statement_descriptor_present, @three_d_secure, @usage, @usage_present, @wechat)
  end
end
