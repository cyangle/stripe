#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # `Source` objects allow you to accept a variety of payment methods. They represent a customer's payment instrument, and can be used with the Stripe API just like a `Card` object: once chargeable, they can be charged, or can be attached to customers.  Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  class Source
    include NASON::Serializable

    # Required properties
    # The client secret of the source. Used for client-side retrieval using a publishable key.
    @[NASON::Field(key: "client_secret", type: String)]
    property client_secret : String

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
    @[NASON::Field(key: "flow", type: String)]
    property flow : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
    @[NASON::Field(key: "type", type: String)]
    property _type : String

    # Optional properties
    @[NASON::Field(key: "ach_credit_transfer", type: SourceTypeAchCreditTransfer?, nillable: true)]
    property ach_credit_transfer : SourceTypeAchCreditTransfer?

    @[NASON::Field(key: "ach_debit", type: SourceTypeAchDebit?, nillable: true)]
    property ach_debit : SourceTypeAchDebit?

    @[NASON::Field(key: "acss_debit", type: SourceTypeAcssDebit?, nillable: true)]
    property acss_debit : SourceTypeAcssDebit?

    @[NASON::Field(key: "alipay", type: SourceTypeAlipay?, nillable: true)]
    property alipay : SourceTypeAlipay?

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
    @[NASON::Field(key: "amount", type: Int64? | Null, nillable: true)]
    property amount : Int64? | Null

    @[NASON::Field(key: "au_becs_debit", type: SourceTypeAuBecsDebit?, nillable: true)]
    property au_becs_debit : SourceTypeAuBecsDebit?

    @[NASON::Field(key: "bancontact", type: SourceTypeBancontact?, nillable: true)]
    property bancontact : SourceTypeBancontact?

    @[NASON::Field(key: "card", type: SourceTypeCard?, nillable: true)]
    property card : SourceTypeCard?

    @[NASON::Field(key: "card_present", type: SourceTypeCardPresent?, nillable: true)]
    property card_present : SourceTypeCardPresent?

    @[NASON::Field(key: "code_verification", type: SourceCodeVerificationFlow?, nillable: true)]
    property code_verification : SourceCodeVerificationFlow?

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
    @[NASON::Field(key: "currency", type: String? | Null, nillable: true)]
    property currency : String? | Null

    # The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
    @[NASON::Field(key: "customer", type: String?, nillable: true)]
    property customer : String?

    @[NASON::Field(key: "eps", type: SourceTypeEps?, nillable: true)]
    property eps : SourceTypeEps?

    @[NASON::Field(key: "giropay", type: SourceTypeGiropay?, nillable: true)]
    property giropay : SourceTypeGiropay?

    @[NASON::Field(key: "ideal", type: SourceTypeIdeal?, nillable: true)]
    property ideal : SourceTypeIdeal?

    @[NASON::Field(key: "klarna", type: SourceTypeKlarna?, nillable: true)]
    property klarna : SourceTypeKlarna?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    @[NASON::Field(key: "multibanco", type: SourceTypeMultibanco?, nillable: true)]
    property multibanco : SourceTypeMultibanco?

    # Information about the owner of the payment instrument that may be used or required by particular source types.
    @[NASON::Field(key: "owner", type: SourceOwner? | Null, nillable: true)]
    property owner : SourceOwner? | Null

    @[NASON::Field(key: "p24", type: SourceTypeP24?, nillable: true)]
    property p24 : SourceTypeP24?

    @[NASON::Field(key: "receiver", type: SourceReceiverFlow?, nillable: true)]
    property receiver : SourceReceiverFlow?

    @[NASON::Field(key: "redirect", type: SourceRedirectFlow?, nillable: true)]
    property redirect : SourceRedirectFlow?

    @[NASON::Field(key: "sepa_debit", type: SourceTypeSepaDebit?, nillable: true)]
    property sepa_debit : SourceTypeSepaDebit?

    @[NASON::Field(key: "sofort", type: SourceTypeSofort?, nillable: true)]
    property sofort : SourceTypeSofort?

    @[NASON::Field(key: "source_order", type: SourceOrder?, nillable: true)]
    property source_order : SourceOrder?

    # Extra information about a source. This will appear on your customer's statement every time you charge the source.
    @[NASON::Field(key: "statement_descriptor", type: String? | Null, nillable: true)]
    property statement_descriptor : String? | Null

    @[NASON::Field(key: "three_d_secure", type: SourceTypeThreeDSecure?, nillable: true)]
    property three_d_secure : SourceTypeThreeDSecure?

    # Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    @[NASON::Field(key: "usage", type: String? | Null, nillable: true)]
    property usage : String? | Null

    @[NASON::Field(key: "wechat", type: SourceTypeWechat?, nillable: true)]
    property wechat : SourceTypeWechat?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @client_secret : String, @created : Int64, @flow : String, @id : String, @livemode : Bool, @object : String, @status : String, @_type : String, @ach_credit_transfer : SourceTypeAchCreditTransfer? = nil, @ach_debit : SourceTypeAchDebit? = nil, @acss_debit : SourceTypeAcssDebit? = nil, @alipay : SourceTypeAlipay? = nil, @amount : Int64? | Null = nil, @au_becs_debit : SourceTypeAuBecsDebit? = nil, @bancontact : SourceTypeBancontact? = nil, @card : SourceTypeCard? = nil, @card_present : SourceTypeCardPresent? = nil, @code_verification : SourceCodeVerificationFlow? = nil, @currency : String? | Null = nil, @customer : String? = nil, @eps : SourceTypeEps? = nil, @giropay : SourceTypeGiropay? = nil, @ideal : SourceTypeIdeal? = nil, @klarna : SourceTypeKlarna? = nil, @metadata : Hash(String, String)? | Null = nil, @multibanco : SourceTypeMultibanco? = nil, @owner : SourceOwner? | Null = nil, @p24 : SourceTypeP24? = nil, @receiver : SourceReceiverFlow? = nil, @redirect : SourceRedirectFlow? = nil, @sepa_debit : SourceTypeSepaDebit? = nil, @sofort : SourceTypeSofort? = nil, @source_order : SourceOrder? = nil, @statement_descriptor : String? | Null = nil, @three_d_secure : SourceTypeThreeDSecure? = nil, @usage : String? | Null = nil, @wechat : SourceTypeWechat? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @client_secret.to_s.size > 5000
        invalid_properties.push("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      if !@customer.nil? && @customer.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      if @flow.to_s.size > 5000
        invalid_properties.push("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.nil? && !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      if !@usage.nil? && !@usage.null? && @usage.to_s.size > 5000
        invalid_properties.push("invalid value for \"usage\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @client_secret.to_s.size > 5000
      return false if !@customer.nil? && @customer.to_s.size > 5000
      return false if @flow.to_s.size > 5000
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["source"])
      return false unless object_validator.valid?(@object)
      return false if !@statement_descriptor.nil? && !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
      return false if @status.to_s.size > 5000
      _type_validator = EnumAttributeValidator.new("String", ["ach_credit_transfer", "ach_debit", "acss_debit", "alipay", "au_becs_debit", "bancontact", "card", "card_present", "eps", "giropay", "ideal", "klarna", "multibanco", "p24", "sepa_debit", "sofort", "three_d_secure", "wechat"])
      return false unless _type_validator.valid?(@_type)
      return false if !@usage.nil? && !@usage.null? && @usage.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] client_secret Value to be assigned
    def client_secret=(client_secret)
      if client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      @client_secret = client_secret
    end

    # Custom attribute writer method with validation
    # @param [Object] customer Value to be assigned
    def customer=(customer)
      if !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method with validation
    # @param [Object] flow Value to be assigned
    def flow=(flow)
      if flow.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
      end

      @flow = flow
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["source"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor)
      if !statement_descriptor.nil? && !@statement_descriptor.null? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      validator = EnumAttributeValidator.new("String", ["ach_credit_transfer", "ach_debit", "acss_debit", "alipay", "au_becs_debit", "bancontact", "card", "card_present", "eps", "giropay", "ideal", "klarna", "multibanco", "p24", "sepa_debit", "sofort", "three_d_secure", "wechat"])
      unless validator.valid?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{validator.allowable_values}.")
      end
      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] usage Value to be assigned
    def usage=(usage)
      if !usage.nil? && !@usage.null? && usage.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"usage\", the character length must be smaller than or equal to 5000.")
      end

      @usage = usage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        ach_credit_transfer == o.ach_credit_transfer &&
        ach_debit == o.ach_debit &&
        acss_debit == o.acss_debit &&
        alipay == o.alipay &&
        amount == o.amount &&
        au_becs_debit == o.au_becs_debit &&
        bancontact == o.bancontact &&
        card == o.card &&
        card_present == o.card_present &&
        client_secret == o.client_secret &&
        code_verification == o.code_verification &&
        created == o.created &&
        currency == o.currency &&
        customer == o.customer &&
        eps == o.eps &&
        flow == o.flow &&
        giropay == o.giropay &&
        id == o.id &&
        ideal == o.ideal &&
        klarna == o.klarna &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        multibanco == o.multibanco &&
        object == o.object &&
        owner == o.owner &&
        p24 == o.p24 &&
        receiver == o.receiver &&
        redirect == o.redirect &&
        sepa_debit == o.sepa_debit &&
        sofort == o.sofort &&
        source_order == o.source_order &&
        statement_descriptor == o.statement_descriptor &&
        status == o.status &&
        three_d_secure == o.three_d_secure &&
        _type == o._type &&
        usage == o.usage &&
        wechat == o.wechat
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ach_credit_transfer, ach_debit, acss_debit, alipay, amount, au_becs_debit, bancontact, card, card_present, client_secret, code_verification, created, currency, customer, eps, flow, giropay, id, ideal, klarna, livemode, metadata, multibanco, object, owner, p24, receiver, redirect, sepa_debit, sofort, source_order, statement_descriptor, status, three_d_secure, _type, usage, wechat].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
