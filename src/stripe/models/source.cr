#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./source_code_verification_flow"
require "./source_order"
require "./source_owner"
require "./source_receiver_flow"
require "./source_redirect_flow"
require "./source_type_ach_credit_transfer"
require "./source_type_ach_debit"
require "./source_type_acss_debit"
require "./source_type_alipay"
require "./source_type_au_becs_debit"
require "./source_type_bancontact"
require "./source_type_card"
require "./source_type_card_present"
require "./source_type_eps"
require "./source_type_giropay"
require "./source_type_ideal"
require "./source_type_klarna"
require "./source_type_multibanco"
require "./source_type_p24"
require "./source_type_sepa_credit_transfer"
require "./source_type_sepa_debit"
require "./source_type_sofort"
require "./source_type_three_d_secure"
require "./source_type_wechat"

module Stripe
  # `Source` objects allow you to accept a variety of payment methods. They represent a customer's payment instrument, and can be used with the Stripe API just like a `Card` object: once chargeable, they can be charged, or can be attached to customers.  Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources). We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods). This newer API provides access to our latest features and payment method types.  Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  class Source
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount : Int64? = nil

    # The client secret of the source. Used for client-side retrieval using a publishable key.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter client_secret : String? = nil
    MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter currency : String? = nil

    # The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
    @[JSON::Field(key: "flow", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter flow : String? = nil
    MAX_LENGTH_FOR_FLOW = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [source]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("source")

    @[JSON::Field(key: "owner", type: Stripe::SourceOwner?, default: nil, required: true, nullable: true, emit_null: true)]
    getter owner : Stripe::SourceOwner? = nil

    # Extra information about a source. This will appear on your customer's statement every time you charge the source.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    # The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [ach_credit_transfer, ach_debit, acss_debit, alipay, au_becs_debit, bancontact, card, card_present, eps, giropay, ideal, klarna, multibanco, p24, sepa_credit_transfer, sepa_debit, sofort, three_d_secure, wechat]."
    VALID_VALUES_FOR__TYPE  = String.static_array("ach_credit_transfer", "ach_debit", "acss_debit", "alipay", "au_becs_debit", "bancontact", "card", "card_present", "eps", "giropay", "ideal", "klarna", "multibanco", "p24", "sepa_credit_transfer", "sepa_debit", "sofort", "three_d_secure", "wechat")

    # Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    @[JSON::Field(key: "usage", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter usage : String? = nil
    MAX_LENGTH_FOR_USAGE = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "ach_credit_transfer", type: Stripe::SourceTypeAchCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer? = nil

    @[JSON::Field(key: "ach_debit", type: Stripe::SourceTypeAchDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_debit : Stripe::SourceTypeAchDebit? = nil

    @[JSON::Field(key: "acss_debit", type: Stripe::SourceTypeAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::SourceTypeAcssDebit? = nil

    @[JSON::Field(key: "alipay", type: Stripe::SourceTypeAlipay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::SourceTypeAlipay? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::SourceTypeAuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::SourceTypeAuBecsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::SourceTypeBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::SourceTypeBancontact? = nil

    @[JSON::Field(key: "card", type: Stripe::SourceTypeCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::SourceTypeCard? = nil

    @[JSON::Field(key: "card_present", type: Stripe::SourceTypeCardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::SourceTypeCardPresent? = nil

    @[JSON::Field(key: "code_verification", type: Stripe::SourceCodeVerificationFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter code_verification : Stripe::SourceCodeVerificationFlow? = nil

    # The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil
    MAX_LENGTH_FOR_CUSTOMER = 5000

    @[JSON::Field(key: "eps", type: Stripe::SourceTypeEps?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::SourceTypeEps? = nil

    @[JSON::Field(key: "giropay", type: Stripe::SourceTypeGiropay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::SourceTypeGiropay? = nil

    @[JSON::Field(key: "ideal", type: Stripe::SourceTypeIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::SourceTypeIdeal? = nil

    @[JSON::Field(key: "klarna", type: Stripe::SourceTypeKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::SourceTypeKlarna? = nil

    @[JSON::Field(key: "multibanco", type: Stripe::SourceTypeMultibanco?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco : Stripe::SourceTypeMultibanco? = nil

    @[JSON::Field(key: "p24", type: Stripe::SourceTypeP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::SourceTypeP24? = nil

    @[JSON::Field(key: "receiver", type: Stripe::SourceReceiverFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter receiver : Stripe::SourceReceiverFlow? = nil

    @[JSON::Field(key: "redirect", type: Stripe::SourceRedirectFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect : Stripe::SourceRedirectFlow? = nil

    @[JSON::Field(key: "sepa_credit_transfer", type: Stripe::SourceTypeSepaCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_credit_transfer : Stripe::SourceTypeSepaCreditTransfer? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::SourceTypeSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::SourceTypeSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::SourceTypeSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::SourceTypeSofort? = nil

    @[JSON::Field(key: "source_order", type: Stripe::SourceOrder?, default: nil, required: false, nullable: false, emit_null: false)]
    getter source_order : Stripe::SourceOrder? = nil

    @[JSON::Field(key: "three_d_secure", type: Stripe::SourceTypeThreeDSecure?, default: nil, required: false, nullable: false, emit_null: false)]
    getter three_d_secure : Stripe::SourceTypeThreeDSecure? = nil

    @[JSON::Field(key: "wechat", type: Stripe::SourceTypeWechat?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat : Stripe::SourceTypeWechat? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @client_secret : String? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @flow : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @owner : Stripe::SourceOwner? = nil,
      @statement_descriptor : String? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      @usage : String? = nil,
      # Optional properties
      @ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer? = nil,
      @ach_debit : Stripe::SourceTypeAchDebit? = nil,
      @acss_debit : Stripe::SourceTypeAcssDebit? = nil,
      @alipay : Stripe::SourceTypeAlipay? = nil,
      @au_becs_debit : Stripe::SourceTypeAuBecsDebit? = nil,
      @bancontact : Stripe::SourceTypeBancontact? = nil,
      @card : Stripe::SourceTypeCard? = nil,
      @card_present2 : Stripe::SourceTypeCardPresent? = nil,
      @code_verification : Stripe::SourceCodeVerificationFlow? = nil,
      @customer : String? = nil,
      @eps : Stripe::SourceTypeEps? = nil,
      @giropay : Stripe::SourceTypeGiropay? = nil,
      @ideal : Stripe::SourceTypeIdeal? = nil,
      @klarna : Stripe::SourceTypeKlarna? = nil,
      @multibanco : Stripe::SourceTypeMultibanco? = nil,
      @p24 : Stripe::SourceTypeP24? = nil,
      @receiver : Stripe::SourceReceiverFlow? = nil,
      @redirect : Stripe::SourceRedirectFlow? = nil,
      @sepa_credit_transfer : Stripe::SourceTypeSepaCreditTransfer? = nil,
      @sepa_debit : Stripe::SourceTypeSepaDebit? = nil,
      @sofort : Stripe::SourceTypeSofort? = nil,
      @source_order : Stripe::SourceOrder? = nil,
      @three_d_secure : Stripe::SourceTypeThreeDSecure? = nil,
      @wechat : Stripe::SourceTypeWechat? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"client_secret\" is required and cannot be null") if @client_secret.nil?

      unless (_client_secret = @client_secret).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_secret", _client_secret.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"flow\" is required and cannot be null") if @flow.nil?

      unless (_flow = @flow).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("flow", _flow.to_s.size, MAX_LENGTH_FOR_FLOW)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_owner = @owner).nil?
        invalid_properties.concat(_owner.list_invalid_properties_for("owner")) if _owner.is_a?(OpenApi::Validatable)
      end
      unless (_statement_descriptor = @statement_descriptor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("status", _status.to_s.size, MAX_LENGTH_FOR_STATUS)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_usage = @usage).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("usage", _usage.to_s.size, MAX_LENGTH_FOR_USAGE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_ach_credit_transfer = @ach_credit_transfer).nil?
        invalid_properties.concat(_ach_credit_transfer.list_invalid_properties_for("ach_credit_transfer")) if _ach_credit_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_ach_debit = @ach_debit).nil?
        invalid_properties.concat(_ach_debit.list_invalid_properties_for("ach_debit")) if _ach_debit.is_a?(OpenApi::Validatable)
      end
      unless (_acss_debit = @acss_debit).nil?
        invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit")) if _acss_debit.is_a?(OpenApi::Validatable)
      end
      unless (_alipay = @alipay).nil?
        invalid_properties.concat(_alipay.list_invalid_properties_for("alipay")) if _alipay.is_a?(OpenApi::Validatable)
      end
      unless (_au_becs_debit = @au_becs_debit).nil?
        invalid_properties.concat(_au_becs_debit.list_invalid_properties_for("au_becs_debit")) if _au_becs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bancontact = @bancontact).nil?
        invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact")) if _bancontact.is_a?(OpenApi::Validatable)
      end
      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      unless (_card_present = @card_present).nil?
        invalid_properties.concat(_card_present.list_invalid_properties_for("card_present")) if _card_present.is_a?(OpenApi::Validatable)
      end
      unless (_code_verification = @code_verification).nil?
        invalid_properties.concat(_code_verification.list_invalid_properties_for("code_verification")) if _code_verification.is_a?(OpenApi::Validatable)
      end
      unless (_customer = @customer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_eps = @eps).nil?
        invalid_properties.concat(_eps.list_invalid_properties_for("eps")) if _eps.is_a?(OpenApi::Validatable)
      end
      unless (_giropay = @giropay).nil?
        invalid_properties.concat(_giropay.list_invalid_properties_for("giropay")) if _giropay.is_a?(OpenApi::Validatable)
      end
      unless (_ideal = @ideal).nil?
        invalid_properties.concat(_ideal.list_invalid_properties_for("ideal")) if _ideal.is_a?(OpenApi::Validatable)
      end
      unless (_klarna = @klarna).nil?
        invalid_properties.concat(_klarna.list_invalid_properties_for("klarna")) if _klarna.is_a?(OpenApi::Validatable)
      end
      unless (_multibanco = @multibanco).nil?
        invalid_properties.concat(_multibanco.list_invalid_properties_for("multibanco")) if _multibanco.is_a?(OpenApi::Validatable)
      end
      unless (_p24 = @p24).nil?
        invalid_properties.concat(_p24.list_invalid_properties_for("p24")) if _p24.is_a?(OpenApi::Validatable)
      end
      unless (_receiver = @receiver).nil?
        invalid_properties.concat(_receiver.list_invalid_properties_for("receiver")) if _receiver.is_a?(OpenApi::Validatable)
      end
      unless (_redirect = @redirect).nil?
        invalid_properties.concat(_redirect.list_invalid_properties_for("redirect")) if _redirect.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_credit_transfer = @sepa_credit_transfer).nil?
        invalid_properties.concat(_sepa_credit_transfer.list_invalid_properties_for("sepa_credit_transfer")) if _sepa_credit_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_debit = @sepa_debit).nil?
        invalid_properties.concat(_sepa_debit.list_invalid_properties_for("sepa_debit")) if _sepa_debit.is_a?(OpenApi::Validatable)
      end
      unless (_sofort = @sofort).nil?
        invalid_properties.concat(_sofort.list_invalid_properties_for("sofort")) if _sofort.is_a?(OpenApi::Validatable)
      end
      unless (_source_order = @source_order).nil?
        invalid_properties.concat(_source_order.list_invalid_properties_for("source_order")) if _source_order.is_a?(OpenApi::Validatable)
      end
      unless (_three_d_secure = @three_d_secure).nil?
        invalid_properties.concat(_three_d_secure.list_invalid_properties_for("three_d_secure")) if _three_d_secure.is_a?(OpenApi::Validatable)
      end
      unless (_wechat = @wechat).nil?
        invalid_properties.concat(_wechat.list_invalid_properties_for("wechat")) if _wechat.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @client_secret.nil?
      unless (_client_secret = @client_secret).nil?
        return false if _client_secret.to_s.size > MAX_LENGTH_FOR_CLIENT_SECRET
      end

      return false if @created.nil?

      return false if @flow.nil?
      unless (_flow = @flow).nil?
        return false if _flow.to_s.size > MAX_LENGTH_FOR_FLOW
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_owner = @owner).nil?
        return false if _owner.is_a?(OpenApi::Validatable) && !_owner.valid?
      end

      unless (_statement_descriptor = @statement_descriptor).nil?
        return false if _statement_descriptor.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if _status.to_s.size > MAX_LENGTH_FOR_STATUS
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_usage = @usage).nil?
        return false if _usage.to_s.size > MAX_LENGTH_FOR_USAGE
      end

      unless (_ach_credit_transfer = @ach_credit_transfer).nil?
        return false if _ach_credit_transfer.is_a?(OpenApi::Validatable) && !_ach_credit_transfer.valid?
      end

      unless (_ach_debit = @ach_debit).nil?
        return false if _ach_debit.is_a?(OpenApi::Validatable) && !_ach_debit.valid?
      end

      unless (_acss_debit = @acss_debit).nil?
        return false if _acss_debit.is_a?(OpenApi::Validatable) && !_acss_debit.valid?
      end

      unless (_alipay = @alipay).nil?
        return false if _alipay.is_a?(OpenApi::Validatable) && !_alipay.valid?
      end

      unless (_au_becs_debit = @au_becs_debit).nil?
        return false if _au_becs_debit.is_a?(OpenApi::Validatable) && !_au_becs_debit.valid?
      end

      unless (_bancontact = @bancontact).nil?
        return false if _bancontact.is_a?(OpenApi::Validatable) && !_bancontact.valid?
      end

      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      unless (_card_present = @card_present).nil?
        return false if _card_present.is_a?(OpenApi::Validatable) && !_card_present.valid?
      end

      unless (_code_verification = @code_verification).nil?
        return false if _code_verification.is_a?(OpenApi::Validatable) && !_code_verification.valid?
      end

      unless (_customer = @customer).nil?
        return false if _customer.to_s.size > MAX_LENGTH_FOR_CUSTOMER
      end

      unless (_eps = @eps).nil?
        return false if _eps.is_a?(OpenApi::Validatable) && !_eps.valid?
      end

      unless (_giropay = @giropay).nil?
        return false if _giropay.is_a?(OpenApi::Validatable) && !_giropay.valid?
      end

      unless (_ideal = @ideal).nil?
        return false if _ideal.is_a?(OpenApi::Validatable) && !_ideal.valid?
      end

      unless (_klarna = @klarna).nil?
        return false if _klarna.is_a?(OpenApi::Validatable) && !_klarna.valid?
      end

      unless (_multibanco = @multibanco).nil?
        return false if _multibanco.is_a?(OpenApi::Validatable) && !_multibanco.valid?
      end

      unless (_p24 = @p24).nil?
        return false if _p24.is_a?(OpenApi::Validatable) && !_p24.valid?
      end

      unless (_receiver = @receiver).nil?
        return false if _receiver.is_a?(OpenApi::Validatable) && !_receiver.valid?
      end

      unless (_redirect = @redirect).nil?
        return false if _redirect.is_a?(OpenApi::Validatable) && !_redirect.valid?
      end

      unless (_sepa_credit_transfer = @sepa_credit_transfer).nil?
        return false if _sepa_credit_transfer.is_a?(OpenApi::Validatable) && !_sepa_credit_transfer.valid?
      end

      unless (_sepa_debit = @sepa_debit).nil?
        return false if _sepa_debit.is_a?(OpenApi::Validatable) && !_sepa_debit.valid?
      end

      unless (_sofort = @sofort).nil?
        return false if _sofort.is_a?(OpenApi::Validatable) && !_sofort.valid?
      end

      unless (_source_order = @source_order).nil?
        return false if _source_order.is_a?(OpenApi::Validatable) && !_source_order.valid?
      end

      unless (_three_d_secure = @three_d_secure).nil?
        return false if _three_d_secure.is_a?(OpenApi::Validatable) && !_three_d_secure.valid?
      end

      unless (_wechat = @wechat).nil?
        return false if _wechat.is_a?(OpenApi::Validatable) && !_wechat.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_secret Object to be assigned
    def client_secret=(new_value : String?)
      raise ArgumentError.new("\"client_secret\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_secret", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
      end

      @client_secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow Object to be assigned
    def flow=(new_value : String?)
      raise ArgumentError.new("\"flow\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("flow", new_value.to_s.size, MAX_LENGTH_FOR_FLOW)
      end

      @flow = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(new_value : Stripe::SourceOwner?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @owner = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
      end

      @statement_descriptor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("status", new_value.to_s.size, MAX_LENGTH_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("usage", new_value.to_s.size, MAX_LENGTH_FOR_USAGE)
      end

      @usage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_credit_transfer Object to be assigned
    def ach_credit_transfer=(new_value : Stripe::SourceTypeAchCreditTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ach_credit_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_debit Object to be assigned
    def ach_debit=(new_value : Stripe::SourceTypeAchDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ach_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(new_value : Stripe::SourceTypeAcssDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @acss_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(new_value : Stripe::SourceTypeAlipay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @alipay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(new_value : Stripe::SourceTypeAuBecsDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @au_becs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(new_value : Stripe::SourceTypeBancontact?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bancontact = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : Stripe::SourceTypeCard?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(new_value : Stripe::SourceTypeCardPresent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_present2 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] code_verification Object to be assigned
    def code_verification=(new_value : Stripe::SourceCodeVerificationFlow?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @code_verification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(new_value : Stripe::SourceTypeEps?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eps = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(new_value : Stripe::SourceTypeGiropay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @giropay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(new_value : Stripe::SourceTypeIdeal?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ideal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(new_value : Stripe::SourceTypeKlarna?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @klarna = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco Object to be assigned
    def multibanco=(new_value : Stripe::SourceTypeMultibanco?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @multibanco = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(new_value : Stripe::SourceTypeP24?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @p24 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receiver Object to be assigned
    def receiver=(new_value : Stripe::SourceReceiverFlow?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @receiver = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect Object to be assigned
    def redirect=(new_value : Stripe::SourceRedirectFlow?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @redirect = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_credit_transfer Object to be assigned
    def sepa_credit_transfer=(new_value : Stripe::SourceTypeSepaCreditTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_credit_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(new_value : Stripe::SourceTypeSepaDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(new_value : Stripe::SourceTypeSofort?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sofort = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_order Object to be assigned
    def source_order=(new_value : Stripe::SourceOrder?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @source_order = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] three_d_secure Object to be assigned
    def three_d_secure=(new_value : Stripe::SourceTypeThreeDSecure?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @three_d_secure = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat Object to be assigned
    def wechat=(new_value : Stripe::SourceTypeWechat?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wechat = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @client_secret, @created, @currency, @flow, @id, @livemode, @metadata, @object, @owner, @statement_descriptor, @status, @_type, @usage, @ach_credit_transfer, @ach_debit, @acss_debit, @alipay, @au_becs_debit, @bancontact, @card, @card_present2, @code_verification, @customer, @eps, @giropay, @ideal, @klarna, @multibanco, @p24, @receiver, @redirect, @sepa_credit_transfer, @sepa_debit, @sofort, @source_order, @three_d_secure, @wechat)
  end
end
