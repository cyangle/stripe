#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # `Source` objects allow you to accept a variety of payment methods. They represent a customer's payment instrument, and can be used with the Stripe API just like a `Card` object: once chargeable, they can be charged, or can be attached to customers.  Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources). We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods). This newer API provides access to our latest features and payment method types.  Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  class Source
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The client secret of the source. Used for client-side retrieval using a publishable key.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter client_secret : String? = nil
    MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
    @[JSON::Field(key: "flow", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter flow : String? = nil
    MAX_LENGTH_FOR_FLOW = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [source]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("source")

    # The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    # The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [ach_credit_transfer, ach_debit, acss_debit, alipay, au_becs_debit, bancontact, card, card_present, eps, giropay, ideal, klarna, multibanco, p24, sepa_debit, sofort, three_d_secure, wechat]."
    VALID_VALUES_FOR__TYPE  = String.static_array("ach_credit_transfer", "ach_debit", "acss_debit", "alipay", "au_becs_debit", "bancontact", "card", "card_present", "eps", "giropay", "ideal", "klarna", "multibanco", "p24", "sepa_debit", "sofort", "three_d_secure", "wechat")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "ach_credit_transfer", type: Stripe::SourceTypeAchCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer? = nil

    @[JSON::Field(key: "ach_debit", type: Stripe::SourceTypeAchDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_debit : Stripe::SourceTypeAchDebit? = nil

    @[JSON::Field(key: "acss_debit", type: Stripe::SourceTypeAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::SourceTypeAcssDebit? = nil

    @[JSON::Field(key: "alipay", type: Stripe::SourceTypeAlipay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::SourceTypeAlipay? = nil

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount.nil? && !amount_present?)]
    getter amount : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_present : Bool = false

    @[JSON::Field(key: "au_becs_debit", type: Stripe::SourceTypeAuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::SourceTypeAuBecsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::SourceTypeBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::SourceTypeBancontact? = nil

    @[JSON::Field(key: "card", type: Stripe::SourceTypeCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::SourceTypeCard? = nil

    @[JSON::Field(key: "card_present", type: Stripe::SourceTypeCardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::SourceTypeCardPresent? = nil

    @[JSON::Field(key: "code_verification", type: Stripe::SourceCodeVerificationFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter code_verification : Stripe::SourceCodeVerificationFlow? = nil

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil
    MAX_LENGTH_FOR_CUSTOMER = 5000

    @[JSON::Field(key: "eps", type: Stripe::SourceTypeEps?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::SourceTypeEps? = nil

    @[JSON::Field(key: "giropay", type: Stripe::SourceTypeGiropay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::SourceTypeGiropay? = nil

    @[JSON::Field(key: "ideal", type: Stripe::SourceTypeIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::SourceTypeIdeal? = nil

    @[JSON::Field(key: "klarna", type: Stripe::SourceTypeKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::SourceTypeKlarna? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "multibanco", type: Stripe::SourceTypeMultibanco?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco : Stripe::SourceTypeMultibanco? = nil

    @[JSON::Field(key: "owner", type: Stripe::SourceOwner1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: owner.nil? && !owner_present?)]
    getter owner : Stripe::SourceOwner1? = nil

    @[JSON::Field(ignore: true)]
    property? owner_present : Bool = false

    @[JSON::Field(key: "p24", type: Stripe::SourceTypeP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::SourceTypeP24? = nil

    @[JSON::Field(key: "receiver", type: Stripe::SourceReceiverFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter receiver : Stripe::SourceReceiverFlow? = nil

    @[JSON::Field(key: "redirect", type: Stripe::SourceRedirectFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect : Stripe::SourceRedirectFlow? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::SourceTypeSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::SourceTypeSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::SourceTypeSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::SourceTypeSofort? = nil

    @[JSON::Field(key: "source_order", type: Stripe::SourceOrder?, default: nil, required: false, nullable: false, emit_null: false)]
    getter source_order : Stripe::SourceOrder? = nil

    # Extra information about a source. This will appear on your customer's statement every time you charge the source.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    @[JSON::Field(key: "three_d_secure", type: Stripe::SourceTypeThreeDSecure?, default: nil, required: false, nullable: false, emit_null: false)]
    getter three_d_secure : Stripe::SourceTypeThreeDSecure? = nil

    # Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    @[JSON::Field(key: "usage", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: usage.nil? && !usage_present?)]
    getter usage : String? = nil
    MAX_LENGTH_FOR_USAGE = 5000

    @[JSON::Field(ignore: true)]
    property? usage_present : Bool = false

    @[JSON::Field(key: "wechat", type: Stripe::SourceTypeWechat?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat : Stripe::SourceTypeWechat? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @client_secret : String? = nil,
      @created : Int64? = nil,
      @flow : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer? = nil,
      @ach_debit : Stripe::SourceTypeAchDebit? = nil,
      @acss_debit : Stripe::SourceTypeAcssDebit? = nil,
      @alipay : Stripe::SourceTypeAlipay? = nil,
      @amount : Int64? = nil,
      @au_becs_debit : Stripe::SourceTypeAuBecsDebit? = nil,
      @bancontact : Stripe::SourceTypeBancontact? = nil,
      @card : Stripe::SourceTypeCard? = nil,
      @card_present2 : Stripe::SourceTypeCardPresent? = nil,
      @code_verification : Stripe::SourceCodeVerificationFlow? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @eps : Stripe::SourceTypeEps? = nil,
      @giropay : Stripe::SourceTypeGiropay? = nil,
      @ideal : Stripe::SourceTypeIdeal? = nil,
      @klarna : Stripe::SourceTypeKlarna? = nil,
      @metadata : Hash(String, String)? = nil,
      @multibanco : Stripe::SourceTypeMultibanco? = nil,
      @owner : Stripe::SourceOwner1? = nil,
      @p24 : Stripe::SourceTypeP24? = nil,
      @receiver : Stripe::SourceReceiverFlow? = nil,
      @redirect : Stripe::SourceRedirectFlow? = nil,
      @sepa_debit : Stripe::SourceTypeSepaDebit? = nil,
      @sofort : Stripe::SourceTypeSofort? = nil,
      @source_order : Stripe::SourceOrder? = nil,
      @statement_descriptor : String? = nil,
      @three_d_secure : Stripe::SourceTypeThreeDSecure? = nil,
      @usage : String? = nil,
      @wechat : Stripe::SourceTypeWechat? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"client_secret\" is required and cannot be null") if @client_secret.nil?

      unless (_client_secret = @client_secret).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_secret", _client_secret.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"flow\" is required and cannot be null") if @flow.nil?

      unless (_flow = @flow).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("flow", _flow.to_s.size, MAX_LENGTH_FOR_FLOW)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("status", _status.to_s.size, MAX_LENGTH_FOR_STATUS)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_ach_credit_transfer = @ach_credit_transfer).nil?
        invalid_properties.concat(_ach_credit_transfer.list_invalid_properties_for("ach_credit_transfer")) if _ach_credit_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_ach_debit = @ach_debit).nil?
        invalid_properties.concat(_ach_debit.list_invalid_properties_for("ach_debit")) if _ach_debit.is_a?(OpenApi::Validatable)
      end
      unless (_acss_debit = @acss_debit).nil?
        invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit")) if _acss_debit.is_a?(OpenApi::Validatable)
      end
      unless (_alipay = @alipay).nil?
        invalid_properties.concat(_alipay.list_invalid_properties_for("alipay")) if _alipay.is_a?(OpenApi::Validatable)
      end

      unless (_au_becs_debit = @au_becs_debit).nil?
        invalid_properties.concat(_au_becs_debit.list_invalid_properties_for("au_becs_debit")) if _au_becs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bancontact = @bancontact).nil?
        invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact")) if _bancontact.is_a?(OpenApi::Validatable)
      end
      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      unless (_card_present = @card_present).nil?
        invalid_properties.concat(_card_present.list_invalid_properties_for("card_present")) if _card_present.is_a?(OpenApi::Validatable)
      end
      unless (_code_verification = @code_verification).nil?
        invalid_properties.concat(_code_verification.list_invalid_properties_for("code_verification")) if _code_verification.is_a?(OpenApi::Validatable)
      end

      unless (_customer = @customer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_eps = @eps).nil?
        invalid_properties.concat(_eps.list_invalid_properties_for("eps")) if _eps.is_a?(OpenApi::Validatable)
      end
      unless (_giropay = @giropay).nil?
        invalid_properties.concat(_giropay.list_invalid_properties_for("giropay")) if _giropay.is_a?(OpenApi::Validatable)
      end
      unless (_ideal = @ideal).nil?
        invalid_properties.concat(_ideal.list_invalid_properties_for("ideal")) if _ideal.is_a?(OpenApi::Validatable)
      end
      unless (_klarna = @klarna).nil?
        invalid_properties.concat(_klarna.list_invalid_properties_for("klarna")) if _klarna.is_a?(OpenApi::Validatable)
      end

      unless (_multibanco = @multibanco).nil?
        invalid_properties.concat(_multibanco.list_invalid_properties_for("multibanco")) if _multibanco.is_a?(OpenApi::Validatable)
      end
      unless (_owner = @owner).nil?
        invalid_properties.concat(_owner.list_invalid_properties_for("owner")) if _owner.is_a?(OpenApi::Validatable)
      end
      unless (_p24 = @p24).nil?
        invalid_properties.concat(_p24.list_invalid_properties_for("p24")) if _p24.is_a?(OpenApi::Validatable)
      end
      unless (_receiver = @receiver).nil?
        invalid_properties.concat(_receiver.list_invalid_properties_for("receiver")) if _receiver.is_a?(OpenApi::Validatable)
      end
      unless (_redirect = @redirect).nil?
        invalid_properties.concat(_redirect.list_invalid_properties_for("redirect")) if _redirect.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_debit = @sepa_debit).nil?
        invalid_properties.concat(_sepa_debit.list_invalid_properties_for("sepa_debit")) if _sepa_debit.is_a?(OpenApi::Validatable)
      end
      unless (_sofort = @sofort).nil?
        invalid_properties.concat(_sofort.list_invalid_properties_for("sofort")) if _sofort.is_a?(OpenApi::Validatable)
      end
      unless (_source_order = @source_order).nil?
        invalid_properties.concat(_source_order.list_invalid_properties_for("source_order")) if _source_order.is_a?(OpenApi::Validatable)
      end
      unless (_statement_descriptor = @statement_descriptor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_three_d_secure = @three_d_secure).nil?
        invalid_properties.concat(_three_d_secure.list_invalid_properties_for("three_d_secure")) if _three_d_secure.is_a?(OpenApi::Validatable)
      end
      unless (_usage = @usage).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("usage", _usage.to_s.size, MAX_LENGTH_FOR_USAGE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_wechat = @wechat).nil?
        invalid_properties.concat(_wechat.list_invalid_properties_for("wechat")) if _wechat.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @client_secret.nil?
      unless (_client_secret = @client_secret).nil?
        return false if _client_secret.to_s.size > MAX_LENGTH_FOR_CLIENT_SECRET
      end

      return false if @created.nil?

      return false if @flow.nil?
      unless (_flow = @flow).nil?
        return false if _flow.to_s.size > MAX_LENGTH_FOR_FLOW
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if _status.to_s.size > MAX_LENGTH_FOR_STATUS
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_ach_credit_transfer = @ach_credit_transfer).nil?
        return false if _ach_credit_transfer.is_a?(OpenApi::Validatable) && !_ach_credit_transfer.valid?
      end

      unless (_ach_debit = @ach_debit).nil?
        return false if _ach_debit.is_a?(OpenApi::Validatable) && !_ach_debit.valid?
      end

      unless (_acss_debit = @acss_debit).nil?
        return false if _acss_debit.is_a?(OpenApi::Validatable) && !_acss_debit.valid?
      end

      unless (_alipay = @alipay).nil?
        return false if _alipay.is_a?(OpenApi::Validatable) && !_alipay.valid?
      end

      unless (_au_becs_debit = @au_becs_debit).nil?
        return false if _au_becs_debit.is_a?(OpenApi::Validatable) && !_au_becs_debit.valid?
      end

      unless (_bancontact = @bancontact).nil?
        return false if _bancontact.is_a?(OpenApi::Validatable) && !_bancontact.valid?
      end

      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      unless (_card_present = @card_present).nil?
        return false if _card_present.is_a?(OpenApi::Validatable) && !_card_present.valid?
      end

      unless (_code_verification = @code_verification).nil?
        return false if _code_verification.is_a?(OpenApi::Validatable) && !_code_verification.valid?
      end

      unless (_customer = @customer).nil?
        return false if _customer.to_s.size > MAX_LENGTH_FOR_CUSTOMER
      end

      unless (_eps = @eps).nil?
        return false if _eps.is_a?(OpenApi::Validatable) && !_eps.valid?
      end

      unless (_giropay = @giropay).nil?
        return false if _giropay.is_a?(OpenApi::Validatable) && !_giropay.valid?
      end

      unless (_ideal = @ideal).nil?
        return false if _ideal.is_a?(OpenApi::Validatable) && !_ideal.valid?
      end

      unless (_klarna = @klarna).nil?
        return false if _klarna.is_a?(OpenApi::Validatable) && !_klarna.valid?
      end

      unless (_multibanco = @multibanco).nil?
        return false if _multibanco.is_a?(OpenApi::Validatable) && !_multibanco.valid?
      end

      unless (_owner = @owner).nil?
        return false if _owner.is_a?(OpenApi::Validatable) && !_owner.valid?
      end

      unless (_p24 = @p24).nil?
        return false if _p24.is_a?(OpenApi::Validatable) && !_p24.valid?
      end

      unless (_receiver = @receiver).nil?
        return false if _receiver.is_a?(OpenApi::Validatable) && !_receiver.valid?
      end

      unless (_redirect = @redirect).nil?
        return false if _redirect.is_a?(OpenApi::Validatable) && !_redirect.valid?
      end

      unless (_sepa_debit = @sepa_debit).nil?
        return false if _sepa_debit.is_a?(OpenApi::Validatable) && !_sepa_debit.valid?
      end

      unless (_sofort = @sofort).nil?
        return false if _sofort.is_a?(OpenApi::Validatable) && !_sofort.valid?
      end

      unless (_source_order = @source_order).nil?
        return false if _source_order.is_a?(OpenApi::Validatable) && !_source_order.valid?
      end

      unless (_statement_descriptor = @statement_descriptor).nil?
        return false if _statement_descriptor.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR
      end

      unless (_three_d_secure = @three_d_secure).nil?
        return false if _three_d_secure.is_a?(OpenApi::Validatable) && !_three_d_secure.valid?
      end

      unless (_usage = @usage).nil?
        return false if _usage.to_s.size > MAX_LENGTH_FOR_USAGE
      end

      unless (_wechat = @wechat).nil?
        return false if _wechat.is_a?(OpenApi::Validatable) && !_wechat.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_secret Object to be assigned
    def client_secret=(client_secret : String?)
      if client_secret.nil?
        raise ArgumentError.new("\"client_secret\" is required and cannot be null")
      end
      _client_secret = client_secret.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("client_secret", _client_secret.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
      @client_secret = _client_secret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow Object to be assigned
    def flow=(flow : String?)
      if flow.nil?
        raise ArgumentError.new("\"flow\" is required and cannot be null")
      end
      _flow = flow.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("flow", _flow.to_s.size, MAX_LENGTH_FOR_FLOW)
      @flow = _flow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("status", _status.to_s.size, MAX_LENGTH_FOR_STATUS)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      OpenApi::EnumValidator.validate("_type", __type, VALID_VALUES_FOR__TYPE)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_credit_transfer Object to be assigned
    def ach_credit_transfer=(ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer?)
      if ach_credit_transfer.nil?
        return @ach_credit_transfer = nil
      end
      _ach_credit_transfer = ach_credit_transfer.not_nil!
      _ach_credit_transfer.validate if _ach_credit_transfer.is_a?(OpenApi::Validatable)
      @ach_credit_transfer = _ach_credit_transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_debit Object to be assigned
    def ach_debit=(ach_debit : Stripe::SourceTypeAchDebit?)
      if ach_debit.nil?
        return @ach_debit = nil
      end
      _ach_debit = ach_debit.not_nil!
      _ach_debit.validate if _ach_debit.is_a?(OpenApi::Validatable)
      @ach_debit = _ach_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::SourceTypeAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      _acss_debit = acss_debit.not_nil!
      _acss_debit.validate if _acss_debit.is_a?(OpenApi::Validatable)
      @acss_debit = _acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(alipay : Stripe::SourceTypeAlipay?)
      if alipay.nil?
        return @alipay = nil
      end
      _alipay = alipay.not_nil!
      _alipay.validate if _alipay.is_a?(OpenApi::Validatable)
      @alipay = _alipay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        return @amount = nil
      end
      _amount = amount.not_nil!
      @amount = _amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(au_becs_debit : Stripe::SourceTypeAuBecsDebit?)
      if au_becs_debit.nil?
        return @au_becs_debit = nil
      end
      _au_becs_debit = au_becs_debit.not_nil!
      _au_becs_debit.validate if _au_becs_debit.is_a?(OpenApi::Validatable)
      @au_becs_debit = _au_becs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::SourceTypeBancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      _bancontact = bancontact.not_nil!
      _bancontact.validate if _bancontact.is_a?(OpenApi::Validatable)
      @bancontact = _bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::SourceTypeCard?)
      if card.nil?
        return @card = nil
      end
      _card = card.not_nil!
      _card.validate if _card.is_a?(OpenApi::Validatable)
      @card = _card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(card_present : Stripe::SourceTypeCardPresent?)
      if card_present.nil?
        return @card_present2 = nil
      end
      _card_present = card_present.not_nil!
      _card_present.validate if _card_present.is_a?(OpenApi::Validatable)
      @card_present2 = _card_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] code_verification Object to be assigned
    def code_verification=(code_verification : Stripe::SourceCodeVerificationFlow?)
      if code_verification.nil?
        return @code_verification = nil
      end
      _code_verification = code_verification.not_nil!
      _code_verification.validate if _code_verification.is_a?(OpenApi::Validatable)
      @code_verification = _code_verification
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("customer", _customer.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
      @customer = _customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(eps : Stripe::SourceTypeEps?)
      if eps.nil?
        return @eps = nil
      end
      _eps = eps.not_nil!
      _eps.validate if _eps.is_a?(OpenApi::Validatable)
      @eps = _eps
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(giropay : Stripe::SourceTypeGiropay?)
      if giropay.nil?
        return @giropay = nil
      end
      _giropay = giropay.not_nil!
      _giropay.validate if _giropay.is_a?(OpenApi::Validatable)
      @giropay = _giropay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(ideal : Stripe::SourceTypeIdeal?)
      if ideal.nil?
        return @ideal = nil
      end
      _ideal = ideal.not_nil!
      _ideal.validate if _ideal.is_a?(OpenApi::Validatable)
      @ideal = _ideal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(klarna : Stripe::SourceTypeKlarna?)
      if klarna.nil?
        return @klarna = nil
      end
      _klarna = klarna.not_nil!
      _klarna.validate if _klarna.is_a?(OpenApi::Validatable)
      @klarna = _klarna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco Object to be assigned
    def multibanco=(multibanco : Stripe::SourceTypeMultibanco?)
      if multibanco.nil?
        return @multibanco = nil
      end
      _multibanco = multibanco.not_nil!
      _multibanco.validate if _multibanco.is_a?(OpenApi::Validatable)
      @multibanco = _multibanco
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(owner : Stripe::SourceOwner1?)
      if owner.nil?
        return @owner = nil
      end
      _owner = owner.not_nil!
      _owner.validate if _owner.is_a?(OpenApi::Validatable)
      @owner = _owner
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(p24 : Stripe::SourceTypeP24?)
      if p24.nil?
        return @p24 = nil
      end
      _p24 = p24.not_nil!
      _p24.validate if _p24.is_a?(OpenApi::Validatable)
      @p24 = _p24
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receiver Object to be assigned
    def receiver=(receiver : Stripe::SourceReceiverFlow?)
      if receiver.nil?
        return @receiver = nil
      end
      _receiver = receiver.not_nil!
      _receiver.validate if _receiver.is_a?(OpenApi::Validatable)
      @receiver = _receiver
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect Object to be assigned
    def redirect=(redirect : Stripe::SourceRedirectFlow?)
      if redirect.nil?
        return @redirect = nil
      end
      _redirect = redirect.not_nil!
      _redirect.validate if _redirect.is_a?(OpenApi::Validatable)
      @redirect = _redirect
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(sepa_debit : Stripe::SourceTypeSepaDebit?)
      if sepa_debit.nil?
        return @sepa_debit = nil
      end
      _sepa_debit = sepa_debit.not_nil!
      _sepa_debit.validate if _sepa_debit.is_a?(OpenApi::Validatable)
      @sepa_debit = _sepa_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(sofort : Stripe::SourceTypeSofort?)
      if sofort.nil?
        return @sofort = nil
      end
      _sofort = sofort.not_nil!
      _sofort.validate if _sofort.is_a?(OpenApi::Validatable)
      @sofort = _sofort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_order Object to be assigned
    def source_order=(source_order : Stripe::SourceOrder?)
      if source_order.nil?
        return @source_order = nil
      end
      _source_order = source_order.not_nil!
      _source_order.validate if _source_order.is_a?(OpenApi::Validatable)
      @source_order = _source_order
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        return @statement_descriptor = nil
      end
      _statement_descriptor = statement_descriptor.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
      @statement_descriptor = _statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] three_d_secure Object to be assigned
    def three_d_secure=(three_d_secure : Stripe::SourceTypeThreeDSecure?)
      if three_d_secure.nil?
        return @three_d_secure = nil
      end
      _three_d_secure = three_d_secure.not_nil!
      _three_d_secure.validate if _three_d_secure.is_a?(OpenApi::Validatable)
      @three_d_secure = _three_d_secure
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(usage : String?)
      if usage.nil?
        return @usage = nil
      end
      _usage = usage.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("usage", _usage.to_s.size, MAX_LENGTH_FOR_USAGE)
      @usage = _usage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat Object to be assigned
    def wechat=(wechat : Stripe::SourceTypeWechat?)
      if wechat.nil?
        return @wechat = nil
      end
      _wechat = wechat.not_nil!
      _wechat.validate if _wechat.is_a?(OpenApi::Validatable)
      @wechat = _wechat
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@client_secret, @created, @flow, @id, @livemode, @object, @status, @_type, @ach_credit_transfer, @ach_debit, @acss_debit, @alipay, @amount, @amount_present, @au_becs_debit, @bancontact, @card, @card_present2, @code_verification, @currency, @currency_present, @customer, @eps, @giropay, @ideal, @klarna, @metadata, @metadata_present, @multibanco, @owner, @owner_present, @p24, @receiver, @redirect, @sepa_debit, @sofort, @source_order, @statement_descriptor, @statement_descriptor_present, @three_d_secure, @usage, @usage_present, @wechat)
  end
end
