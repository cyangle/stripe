#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class Duplicate
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "additional_documentation", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter additional_documentation : String? = nil
    ERROR_MESSAGE_FOR_ADDITIONAL_DOCUMENTATION = "invalid value for \"additional_documentation\", must be one of []."
    VALID_VALUES_FOR_ADDITIONAL_DOCUMENTATION  = String.static_array("")

    @[JSON::Field(key: "card_statement", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_statement : String? = nil
    ERROR_MESSAGE_FOR_CARD_STATEMENT = "invalid value for \"card_statement\", must be one of []."
    VALID_VALUES_FOR_CARD_STATEMENT  = String.static_array("")

    @[JSON::Field(key: "cash_receipt", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cash_receipt : String? = nil
    ERROR_MESSAGE_FOR_CASH_RECEIPT = "invalid value for \"cash_receipt\", must be one of []."
    VALID_VALUES_FOR_CASH_RECEIPT  = String.static_array("")

    @[JSON::Field(key: "check_image", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter check_image : String? = nil
    ERROR_MESSAGE_FOR_CHECK_IMAGE = "invalid value for \"check_image\", must be one of []."
    VALID_VALUES_FOR_CHECK_IMAGE  = String.static_array("")

    @[JSON::Field(key: "explanation", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter explanation : String? = nil
    ERROR_MESSAGE_FOR_EXPLANATION = "invalid value for \"explanation\", must be one of []."
    VALID_VALUES_FOR_EXPLANATION  = String.static_array("")

    # Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
    @[JSON::Field(key: "original_transaction", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter original_transaction : String? = nil
    MAX_LENGTH_FOR_ORIGINAL_TRANSACTION = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @additional_documentation : String? = nil,
      @card_statement : String? = nil,
      @cash_receipt : String? = nil,
      @check_image : String? = nil,
      @explanation : String? = nil,
      @original_transaction : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_additional_documentation = @additional_documentation).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ADDITIONAL_DOCUMENTATION) unless OpenApi::EnumValidator.valid?(_additional_documentation, VALID_VALUES_FOR_ADDITIONAL_DOCUMENTATION)
      end
      unless (_card_statement = @card_statement).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARD_STATEMENT) unless OpenApi::EnumValidator.valid?(_card_statement, VALID_VALUES_FOR_CARD_STATEMENT)
      end
      unless (_cash_receipt = @cash_receipt).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CASH_RECEIPT) unless OpenApi::EnumValidator.valid?(_cash_receipt, VALID_VALUES_FOR_CASH_RECEIPT)
      end
      unless (_check_image = @check_image).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CHECK_IMAGE) unless OpenApi::EnumValidator.valid?(_check_image, VALID_VALUES_FOR_CHECK_IMAGE)
      end
      unless (_explanation = @explanation).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_EXPLANATION) unless OpenApi::EnumValidator.valid?(_explanation, VALID_VALUES_FOR_EXPLANATION)
      end
      unless (_original_transaction = @original_transaction).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("original_transaction", _original_transaction.to_s.size, MAX_LENGTH_FOR_ORIGINAL_TRANSACTION)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_additional_documentation = @additional_documentation).nil?
        return false unless OpenApi::EnumValidator.valid?(_additional_documentation, VALID_VALUES_FOR_ADDITIONAL_DOCUMENTATION)
      end

      unless (_card_statement = @card_statement).nil?
        return false unless OpenApi::EnumValidator.valid?(_card_statement, VALID_VALUES_FOR_CARD_STATEMENT)
      end

      unless (_cash_receipt = @cash_receipt).nil?
        return false unless OpenApi::EnumValidator.valid?(_cash_receipt, VALID_VALUES_FOR_CASH_RECEIPT)
      end

      unless (_check_image = @check_image).nil?
        return false unless OpenApi::EnumValidator.valid?(_check_image, VALID_VALUES_FOR_CHECK_IMAGE)
      end

      unless (_explanation = @explanation).nil?
        return false unless OpenApi::EnumValidator.valid?(_explanation, VALID_VALUES_FOR_EXPLANATION)
      end

      unless (_original_transaction = @original_transaction).nil?
        return false if _original_transaction.to_s.size > MAX_LENGTH_FOR_ORIGINAL_TRANSACTION
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] additional_documentation Object to be assigned
    def additional_documentation=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("additional_documentation", new_value, VALID_VALUES_FOR_ADDITIONAL_DOCUMENTATION)
      end

      @additional_documentation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_statement Object to be assigned
    def card_statement=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("card_statement", new_value, VALID_VALUES_FOR_CARD_STATEMENT)
      end

      @card_statement = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cash_receipt Object to be assigned
    def cash_receipt=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("cash_receipt", new_value, VALID_VALUES_FOR_CASH_RECEIPT)
      end

      @cash_receipt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] check_image Object to be assigned
    def check_image=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("check_image", new_value, VALID_VALUES_FOR_CHECK_IMAGE)
      end

      @check_image = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] explanation Object to be assigned
    def explanation=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("explanation", new_value, VALID_VALUES_FOR_EXPLANATION)
      end

      @explanation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_transaction Object to be assigned
    def original_transaction=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("original_transaction", new_value.to_s.size, MAX_LENGTH_FOR_ORIGINAL_TRANSACTION)
      end

      @original_transaction = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@additional_documentation, @card_statement, @cash_receipt, @check_image, @explanation, @original_transaction)
  end
end
