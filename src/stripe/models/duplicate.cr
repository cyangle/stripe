#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class Duplicate
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "additional_documentation", type: Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter additional_documentation : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl? = nil

    @[JSON::Field(key: "card_statement", type: Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_statement : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl? = nil

    @[JSON::Field(key: "cash_receipt", type: Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cash_receipt : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl? = nil

    @[JSON::Field(key: "check_image", type: Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter check_image : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl? = nil

    @[JSON::Field(key: "explanation", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter explanation : String? = nil
    MAX_LENGTH_FOR_EXPLANATION = 1500

    @[JSON::Field(key: "original_transaction", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter original_transaction : String? = nil
    MAX_LENGTH_FOR_ORIGINAL_TRANSACTION = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @additional_documentation : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl? = nil,
      @card_statement : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl? = nil,
      @cash_receipt : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl? = nil,
      @check_image : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl? = nil,
      @explanation : String? = nil,
      @original_transaction : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_additional_documentation = @additional_documentation).nil?
        invalid_properties.concat(_additional_documentation.list_invalid_properties_for("additional_documentation")) if _additional_documentation.is_a?(OpenApi::Validatable)
      end
      unless (_card_statement = @card_statement).nil?
        invalid_properties.concat(_card_statement.list_invalid_properties_for("card_statement")) if _card_statement.is_a?(OpenApi::Validatable)
      end
      unless (_cash_receipt = @cash_receipt).nil?
        invalid_properties.concat(_cash_receipt.list_invalid_properties_for("cash_receipt")) if _cash_receipt.is_a?(OpenApi::Validatable)
      end
      unless (_check_image = @check_image).nil?
        invalid_properties.concat(_check_image.list_invalid_properties_for("check_image")) if _check_image.is_a?(OpenApi::Validatable)
      end
      unless (_explanation = @explanation).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("explanation", _explanation.to_s.size, MAX_LENGTH_FOR_EXPLANATION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_original_transaction = @original_transaction).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("original_transaction", _original_transaction.to_s.size, MAX_LENGTH_FOR_ORIGINAL_TRANSACTION)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_additional_documentation = @additional_documentation).nil?
        return false if _additional_documentation.is_a?(OpenApi::Validatable) && !_additional_documentation.valid?
      end

      unless (_card_statement = @card_statement).nil?
        return false if _card_statement.is_a?(OpenApi::Validatable) && !_card_statement.valid?
      end

      unless (_cash_receipt = @cash_receipt).nil?
        return false if _cash_receipt.is_a?(OpenApi::Validatable) && !_cash_receipt.valid?
      end

      unless (_check_image = @check_image).nil?
        return false if _check_image.is_a?(OpenApi::Validatable) && !_check_image.valid?
      end

      unless (_explanation = @explanation).nil?
        return false if _explanation.to_s.size > MAX_LENGTH_FOR_EXPLANATION
      end

      unless (_original_transaction = @original_transaction).nil?
        return false if _original_transaction.to_s.size > MAX_LENGTH_FOR_ORIGINAL_TRANSACTION
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] additional_documentation Object to be assigned
    def additional_documentation=(additional_documentation : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl?)
      if additional_documentation.nil?
        return @additional_documentation = nil
      end
      _additional_documentation = additional_documentation.not_nil!
      _additional_documentation.validate if _additional_documentation.is_a?(OpenApi::Validatable)
      @additional_documentation = _additional_documentation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_statement Object to be assigned
    def card_statement=(card_statement : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl?)
      if card_statement.nil?
        return @card_statement = nil
      end
      _card_statement = card_statement.not_nil!
      _card_statement.validate if _card_statement.is_a?(OpenApi::Validatable)
      @card_statement = _card_statement
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cash_receipt Object to be assigned
    def cash_receipt=(cash_receipt : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl?)
      if cash_receipt.nil?
        return @cash_receipt = nil
      end
      _cash_receipt = cash_receipt.not_nil!
      _cash_receipt.validate if _cash_receipt.is_a?(OpenApi::Validatable)
      @cash_receipt = _cash_receipt
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] check_image Object to be assigned
    def check_image=(check_image : Stripe::PostOrdersIdRequestPaymentSettingsReturnUrl?)
      if check_image.nil?
        return @check_image = nil
      end
      _check_image = check_image.not_nil!
      _check_image.validate if _check_image.is_a?(OpenApi::Validatable)
      @check_image = _check_image
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] explanation Object to be assigned
    def explanation=(explanation : String?)
      if explanation.nil?
        return @explanation = nil
      end
      _explanation = explanation.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("explanation", _explanation.to_s.size, MAX_LENGTH_FOR_EXPLANATION)
      @explanation = _explanation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_transaction Object to be assigned
    def original_transaction=(original_transaction : String?)
      if original_transaction.nil?
        return @original_transaction = nil
      end
      _original_transaction = original_transaction.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("original_transaction", _original_transaction.to_s.size, MAX_LENGTH_FOR_ORIGINAL_TRANSACTION)
      @original_transaction = _original_transaction
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@additional_documentation, @card_statement, @cash_receipt, @check_image, @explanation, @original_transaction)
  end
end
