#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./bank_connections_resource_accountholder"
require "./bank_connections_resource_link_account_session_filters"
require "./bank_connections_resource_linked_account_list"

module Stripe
  # A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
  class FinancialConnectionsSession
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "account_holder", type: Stripe::BankConnectionsResourceAccountholder?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_holder : Stripe::BankConnectionsResourceAccountholder? = nil

    @[JSON::Field(key: "accounts", type: Stripe::BankConnectionsResourceLinkedAccountList?, default: nil, required: true, nullable: false, emit_null: false)]
    getter accounts : Stripe::BankConnectionsResourceLinkedAccountList? = nil

    # A value that will be passed to the client to launch the authentication flow.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter client_secret : String? = nil
    MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [financial_connections.session]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("financial_connections.session")

    # Permissions requested for accounts collected during this session.
    @[JSON::Field(key: "permissions", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter permissions : Array(String)? = nil
    ERROR_MESSAGE_FOR_PERMISSIONS = "invalid value for \"permissions\", must be one of [balances, ownership, payment_method, transactions]."
    VALID_VALUES_FOR_PERMISSIONS  = String.static_array("balances", "ownership", "payment_method", "transactions")

    # Data features requested to be retrieved upon account creation.
    @[JSON::Field(key: "prefetch", type: Array(String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter prefetch : Array(String)? = nil
    ERROR_MESSAGE_FOR_PREFETCH = "invalid value for \"prefetch\", must be one of [balances, ownership, transactions]."
    VALID_VALUES_FOR_PREFETCH  = String.static_array("balances", "ownership", "transactions")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "filters", type: Stripe::BankConnectionsResourceLinkAccountSessionFilters?, default: nil, required: false, nullable: false, emit_null: false)]
    getter filters : Stripe::BankConnectionsResourceLinkAccountSessionFilters? = nil

    # For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
    @[JSON::Field(key: "return_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter return_url : String? = nil
    MAX_LENGTH_FOR_RETURN_URL = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_holder : Stripe::BankConnectionsResourceAccountholder? = nil,
      @accounts : Stripe::BankConnectionsResourceLinkedAccountList? = nil,
      @client_secret : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @permissions : Array(String)? = nil,
      @prefetch : Array(String)? = nil,
      # Optional properties
      @filters : Stripe::BankConnectionsResourceLinkAccountSessionFilters? = nil,
      @return_url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_holder = @account_holder).nil?
        invalid_properties.concat(_account_holder.list_invalid_properties_for("account_holder")) if _account_holder.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"accounts\" is required and cannot be null") if @accounts.nil?

      unless (_accounts = @accounts).nil?
        invalid_properties.concat(_accounts.list_invalid_properties_for("accounts")) if _accounts.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"client_secret\" is required and cannot be null") if @client_secret.nil?

      unless (_client_secret = @client_secret).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_secret", _client_secret.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"permissions\" is required and cannot be null") if @permissions.nil?

      unless (_permissions = @permissions).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PERMISSIONS) unless OpenApi::EnumValidator.valid?(_permissions, VALID_VALUES_FOR_PERMISSIONS)
      end
      unless (_prefetch = @prefetch).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PREFETCH) unless OpenApi::EnumValidator.valid?(_prefetch, VALID_VALUES_FOR_PREFETCH)
      end
      unless (_filters = @filters).nil?
        invalid_properties.concat(_filters.list_invalid_properties_for("filters")) if _filters.is_a?(OpenApi::Validatable)
      end
      unless (_return_url = @return_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("return_url", _return_url.to_s.size, MAX_LENGTH_FOR_RETURN_URL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_holder = @account_holder).nil?
        return false if _account_holder.is_a?(OpenApi::Validatable) && !_account_holder.valid?
      end

      return false if @accounts.nil?
      unless (_accounts = @accounts).nil?
        return false if _accounts.is_a?(OpenApi::Validatable) && !_accounts.valid?
      end

      return false if @client_secret.nil?
      unless (_client_secret = @client_secret).nil?
        return false if _client_secret.to_s.size > MAX_LENGTH_FOR_CLIENT_SECRET
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @permissions.nil?
      unless (_permissions = @permissions).nil?
        return false unless OpenApi::EnumValidator.valid?(_permissions, VALID_VALUES_FOR_PERMISSIONS)
      end

      unless (_prefetch = @prefetch).nil?
        return false unless OpenApi::EnumValidator.valid?(_prefetch, VALID_VALUES_FOR_PREFETCH)
      end

      unless (_filters = @filters).nil?
        return false if _filters.is_a?(OpenApi::Validatable) && !_filters.valid?
      end

      unless (_return_url = @return_url).nil?
        return false if _return_url.to_s.size > MAX_LENGTH_FOR_RETURN_URL
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_holder Object to be assigned
    def account_holder=(new_value : Stripe::BankConnectionsResourceAccountholder?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @account_holder = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accounts Object to be assigned
    def accounts=(new_value : Stripe::BankConnectionsResourceLinkedAccountList?)
      raise ArgumentError.new("\"accounts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @accounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_secret Object to be assigned
    def client_secret=(new_value : String?)
      raise ArgumentError.new("\"client_secret\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_secret", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
      end

      @client_secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permissions Object to be assigned
    def permissions=(new_value : Array(String)?)
      raise ArgumentError.new("\"permissions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("permissions", new_value, VALID_VALUES_FOR_PERMISSIONS)
      end

      @permissions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prefetch Object to be assigned
    def prefetch=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("prefetch", new_value, VALID_VALUES_FOR_PREFETCH)
      end

      @prefetch = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filters Object to be assigned
    def filters=(new_value : Stripe::BankConnectionsResourceLinkAccountSessionFilters?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @filters = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_url Object to be assigned
    def return_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("return_url", new_value.to_s.size, MAX_LENGTH_FOR_RETURN_URL)
      end

      @return_url = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_holder, @accounts, @client_secret, @id, @livemode, @object, @permissions, @prefetch, @filters, @return_url)
  end
end
