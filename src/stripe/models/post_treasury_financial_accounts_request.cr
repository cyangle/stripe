#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostTreasuryFinancialAccountsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The currencies the FinancialAccount can hold a balance in.
    @[JSON::Field(key: "supported_currencies", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter supported_currencies : Array(String)? = nil

    # Optional properties

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    @[JSON::Field(key: "features", type: Stripe::FeatureAccess?, default: nil, required: false, nullable: false, emit_null: false)]
    getter features : Stripe::FeatureAccess? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "platform_restrictions", type: Stripe::PlatformRestrictions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter platform_restrictions : Stripe::PlatformRestrictions? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @supported_currencies : Array(String)? = nil,
      # Optional properties
      @expand : Array(String)? = nil,
      @features : Stripe::FeatureAccess? = nil,
      @metadata : Hash(String, String)? = nil,
      @platform_restrictions : Stripe::PlatformRestrictions? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"supported_currencies\" is required and cannot be null") if @supported_currencies.nil?
      # This is a model features : Stripe::FeatureAccess?
      # This is a model platform_restrictions : Stripe::PlatformRestrictions?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @supported_currencies.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supported_currencies Object to be assigned
    def supported_currencies=(supported_currencies : Array(String)?)
      if supported_currencies.nil?
        raise ArgumentError.new("\"supported_currencies\" is required and cannot be null")
      end
      @supported_currencies = supported_currencies
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] features Object to be assigned
    def features=(features : Stripe::FeatureAccess?)
      if features.nil?
        return @features = nil
      end
      @features = features
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform_restrictions Object to be assigned
    def platform_restrictions=(platform_restrictions : Stripe::PlatformRestrictions?)
      if platform_restrictions.nil?
        return @platform_restrictions = nil
      end
      @platform_restrictions = platform_restrictions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@supported_currencies, @expand, @features, @metadata, @platform_restrictions)
  end
end
