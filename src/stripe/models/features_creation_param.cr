#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./customer_update_creation_param"
require "./invoice_list_param"
require "./payment_method_update_param"
require "./subscription_cancel_creation_param"
require "./subscription_update_creation_param"

module Stripe
  class FeaturesCreationParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "customer_update", type: Stripe::CustomerUpdateCreationParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_update : Stripe::CustomerUpdateCreationParam? = nil

    @[JSON::Field(key: "invoice_history", type: Stripe::InvoiceListParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_history : Stripe::InvoiceListParam? = nil

    @[JSON::Field(key: "payment_method_update", type: Stripe::PaymentMethodUpdateParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_update : Stripe::PaymentMethodUpdateParam? = nil

    @[JSON::Field(key: "subscription_cancel", type: Stripe::SubscriptionCancelCreationParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_cancel : Stripe::SubscriptionCancelCreationParam? = nil

    @[JSON::Field(key: "subscription_update", type: Stripe::SubscriptionUpdateCreationParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_update : Stripe::SubscriptionUpdateCreationParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @customer_update : Stripe::CustomerUpdateCreationParam? = nil,
      @invoice_history : Stripe::InvoiceListParam? = nil,
      @payment_method_update : Stripe::PaymentMethodUpdateParam? = nil,
      @subscription_cancel : Stripe::SubscriptionCancelCreationParam? = nil,
      @subscription_update : Stripe::SubscriptionUpdateCreationParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_customer_update = @customer_update).nil?
        invalid_properties.concat(_customer_update.list_invalid_properties_for("customer_update")) if _customer_update.is_a?(OpenApi::Validatable)
      end
      unless (_invoice_history = @invoice_history).nil?
        invalid_properties.concat(_invoice_history.list_invalid_properties_for("invoice_history")) if _invoice_history.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_update = @payment_method_update).nil?
        invalid_properties.concat(_payment_method_update.list_invalid_properties_for("payment_method_update")) if _payment_method_update.is_a?(OpenApi::Validatable)
      end
      unless (_subscription_cancel = @subscription_cancel).nil?
        invalid_properties.concat(_subscription_cancel.list_invalid_properties_for("subscription_cancel")) if _subscription_cancel.is_a?(OpenApi::Validatable)
      end
      unless (_subscription_update = @subscription_update).nil?
        invalid_properties.concat(_subscription_update.list_invalid_properties_for("subscription_update")) if _subscription_update.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_customer_update = @customer_update).nil?
        return false if _customer_update.is_a?(OpenApi::Validatable) && !_customer_update.valid?
      end

      unless (_invoice_history = @invoice_history).nil?
        return false if _invoice_history.is_a?(OpenApi::Validatable) && !_invoice_history.valid?
      end

      unless (_payment_method_update = @payment_method_update).nil?
        return false if _payment_method_update.is_a?(OpenApi::Validatable) && !_payment_method_update.valid?
      end

      unless (_subscription_cancel = @subscription_cancel).nil?
        return false if _subscription_cancel.is_a?(OpenApi::Validatable) && !_subscription_cancel.valid?
      end

      unless (_subscription_update = @subscription_update).nil?
        return false if _subscription_update.is_a?(OpenApi::Validatable) && !_subscription_update.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_update Object to be assigned
    def customer_update=(new_value : Stripe::CustomerUpdateCreationParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_update = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_history Object to be assigned
    def invoice_history=(new_value : Stripe::InvoiceListParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice_history = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_update Object to be assigned
    def payment_method_update=(new_value : Stripe::PaymentMethodUpdateParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_update = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_cancel Object to be assigned
    def subscription_cancel=(new_value : Stripe::SubscriptionCancelCreationParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription_cancel = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_update Object to be assigned
    def subscription_update=(new_value : Stripe::SubscriptionUpdateCreationParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription_update = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@customer_update, @invoice_history, @payment_method_update, @subscription_cancel, @subscription_update)
  end
end
