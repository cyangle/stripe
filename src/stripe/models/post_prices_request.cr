#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostPricesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # Optional properties
    # Whether the price can be used for new purchases. Defaults to `true`.
    @[JSON::Field(key: "active", type: Bool?, presence: true, ignore_serialize: active.nil? && !active_present?)]
    property active : Bool?

    @[JSON::Field(ignore: true)]
    property? active_present : Bool = false

    # Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    @[JSON::Field(key: "billing_scheme", type: String?, presence: true, ignore_serialize: billing_scheme.nil? && !billing_scheme_present?)]
    getter billing_scheme : String?

    @[JSON::Field(ignore: true)]
    property? billing_scheme_present : Bool = false

    ENUM_VALIDATOR_FOR_BILLING_SCHEME = EnumValidator.new("billing_scheme", "String", ["per_unit", "tiered"])

    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
    @[JSON::Field(key: "lookup_key", type: String?, presence: true, ignore_serialize: lookup_key.nil? && !lookup_key_present?)]
    getter lookup_key : String?

    @[JSON::Field(ignore: true)]
    property? lookup_key_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # A brief description of the price, hidden from customers.
    @[JSON::Field(key: "nickname", type: String?, presence: true, ignore_serialize: nickname.nil? && !nickname_present?)]
    getter nickname : String?

    @[JSON::Field(ignore: true)]
    property? nickname_present : Bool = false

    # The ID of the product that this price will belong to.
    @[JSON::Field(key: "product", type: String?, presence: true, ignore_serialize: product.nil? && !product_present?)]
    getter product : String?

    @[JSON::Field(ignore: true)]
    property? product_present : Bool = false

    @[JSON::Field(key: "product_data", type: InlineProductParams1?, presence: true, ignore_serialize: product_data.nil? && !product_data_present?)]
    property product_data : InlineProductParams1?

    @[JSON::Field(ignore: true)]
    property? product_data_present : Bool = false

    @[JSON::Field(key: "recurring", type: Recurring1?, presence: true, ignore_serialize: recurring.nil? && !recurring_present?)]
    property recurring : Recurring1?

    @[JSON::Field(ignore: true)]
    property? recurring_present : Bool = false

    # Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    @[JSON::Field(key: "tax_behavior", type: String?, presence: true, ignore_serialize: tax_behavior.nil? && !tax_behavior_present?)]
    getter tax_behavior : String?

    @[JSON::Field(ignore: true)]
    property? tax_behavior_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_BEHAVIOR = EnumValidator.new("tax_behavior", "String", ["exclusive", "inclusive", "unspecified"])

    # Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    @[JSON::Field(key: "tiers", type: Array(Tier)?, presence: true, ignore_serialize: tiers.nil? && !tiers_present?)]
    property tiers : Array(Tier)?

    @[JSON::Field(ignore: true)]
    property? tiers_present : Bool = false

    # Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
    @[JSON::Field(key: "tiers_mode", type: String?, presence: true, ignore_serialize: tiers_mode.nil? && !tiers_mode_present?)]
    getter tiers_mode : String?

    @[JSON::Field(ignore: true)]
    property? tiers_mode_present : Bool = false

    ENUM_VALIDATOR_FOR_TIERS_MODE = EnumValidator.new("tiers_mode", "String", ["graduated", "volume"])

    # If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
    @[JSON::Field(key: "transfer_lookup_key", type: Bool?, presence: true, ignore_serialize: transfer_lookup_key.nil? && !transfer_lookup_key_present?)]
    property transfer_lookup_key : Bool?

    @[JSON::Field(ignore: true)]
    property? transfer_lookup_key_present : Bool = false

    @[JSON::Field(key: "transform_quantity", type: TransformUsageParam?, presence: true, ignore_serialize: transform_quantity.nil? && !transform_quantity_present?)]
    property transform_quantity : TransformUsageParam?

    @[JSON::Field(ignore: true)]
    property? transform_quantity_present : Bool = false

    # A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
    @[JSON::Field(key: "unit_amount", type: Int64?, presence: true, ignore_serialize: unit_amount.nil? && !unit_amount_present?)]
    property unit_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? unit_amount_present : Bool = false

    # Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
    @[JSON::Field(key: "unit_amount_decimal", type: String?, presence: true, ignore_serialize: unit_amount_decimal.nil? && !unit_amount_decimal_present?)]
    property unit_amount_decimal : String?

    @[JSON::Field(ignore: true)]
    property? unit_amount_decimal_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @currency : String, @active : Bool? = nil, @billing_scheme : String? = nil, @expand : Array(String)? = nil, @lookup_key : String? = nil, @metadata : Hash(String, String)? = nil, @nickname : String? = nil, @product : String? = nil, @product_data : InlineProductParams1? = nil, @recurring : Recurring1? = nil, @tax_behavior : String? = nil, @tiers : Array(Tier)? = nil, @tiers_mode : String? = nil, @transfer_lookup_key : Bool? = nil, @transform_quantity : TransformUsageParam? = nil, @unit_amount : Int64? = nil, @unit_amount_decimal : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_SCHEME.error_message) unless ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid?(@billing_scheme)

      if !@lookup_key.nil? && @lookup_key.to_s.size > 200
        invalid_properties.push("invalid value for \"lookup_key\", the character length must be smaller than or equal to 200.")
      end

      if !@nickname.nil? && @nickname.to_s.size > 5000
        invalid_properties.push("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      if !@product.nil? && @product.to_s.size > 5000
        invalid_properties.push("invalid value for \"product\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TIERS_MODE.error_message) unless ENUM_VALIDATOR_FOR_TIERS_MODE.valid?(@tiers_mode)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid?(@billing_scheme)
      return false if !@lookup_key.nil? && @lookup_key.to_s.size > 200
      return false if !@nickname.nil? && @nickname.to_s.size > 5000
      return false if !@product.nil? && @product.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)
      return false unless ENUM_VALIDATOR_FOR_TIERS_MODE.valid?(@tiers_mode)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_scheme Object to be assigned
    def billing_scheme=(billing_scheme)
      ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid!(billing_scheme)
      @billing_scheme = billing_scheme
    end

    # Custom attribute writer method with validation
    # @param [Object] lookup_key Value to be assigned
    def lookup_key=(lookup_key)
      if !lookup_key.nil? && lookup_key.to_s.size > 200
        raise ArgumentError.new("invalid value for \"lookup_key\", the character length must be smaller than or equal to 200.")
      end

      @lookup_key = lookup_key
    end

    # Custom attribute writer method with validation
    # @param [Object] nickname Value to be assigned
    def nickname=(nickname)
      if !nickname.nil? && nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      @nickname = nickname
    end

    # Custom attribute writer method with validation
    # @param [Object] product Value to be assigned
    def product=(product)
      if !product.nil? && product.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product\", the character length must be smaller than or equal to 5000.")
      end

      @product = product
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_behavior Object to be assigned
    def tax_behavior=(tax_behavior)
      ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid!(tax_behavior)
      @tax_behavior = tax_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tiers_mode Object to be assigned
    def tiers_mode=(tiers_mode)
      ENUM_VALIDATOR_FOR_TIERS_MODE.valid!(tiers_mode)
      @tiers_mode = tiers_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        active == o.active &&
        billing_scheme == o.billing_scheme &&
        currency == o.currency &&
        expand == o.expand &&
        lookup_key == o.lookup_key &&
        metadata == o.metadata &&
        nickname == o.nickname &&
        product == o.product &&
        product_data == o.product_data &&
        recurring == o.recurring &&
        tax_behavior == o.tax_behavior &&
        tiers == o.tiers &&
        tiers_mode == o.tiers_mode &&
        transfer_lookup_key == o.transfer_lookup_key &&
        transform_quantity == o.transform_quantity &&
        unit_amount == o.unit_amount &&
        unit_amount_decimal == o.unit_amount_decimal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@active, @billing_scheme, @currency, @expand, @lookup_key, @metadata, @nickname, @product, @product_data, @recurring, @tax_behavior, @tiers, @tiers_mode, @transfer_lookup_key, @transform_quantity, @unit_amount, @unit_amount_decimal)
  end
end
