#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SourceReceiverFlow
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
    @[JSON::Field(key: "amount_charged", type: Int64)]
    property amount_charged : Int64

    # The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
    @[JSON::Field(key: "amount_received", type: Int64)]
    property amount_received : Int64

    # The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
    @[JSON::Field(key: "amount_returned", type: Int64)]
    property amount_returned : Int64

    # Type of refund attribute method, one of `email`, `manual`, or `none`.
    @[JSON::Field(key: "refund_attributes_method", type: String)]
    getter refund_attributes_method : String

    # Type of refund attribute status, one of `missing`, `requested`, or `available`.
    @[JSON::Field(key: "refund_attributes_status", type: String)]
    getter refund_attributes_status : String

    # Optional properties

    # The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
    @[JSON::Field(key: "address", type: String?, presence: true, ignore_serialize: address.nil? && !address_present?)]
    getter address : String?

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_charged : Int64,
      @amount_received : Int64,
      @amount_returned : Int64,
      @refund_attributes_method : String,
      @refund_attributes_status : String,
      # Optional properties
      @address : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @refund_attributes_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"refund_attributes_method\", the character length must be smaller than or equal to 5000.")
      end

      if @refund_attributes_status.to_s.size > 5000
        invalid_properties.push("invalid value for \"refund_attributes_status\", the character length must be smaller than or equal to 5000.")
      end

      if !@address.nil? && @address.to_s.size > 5000
        invalid_properties.push("invalid value for \"address\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @refund_attributes_method.to_s.size > 5000
      return false if @refund_attributes_status.to_s.size > 5000
      return false if !@address.nil? && @address.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] refund_attributes_method Value to be assigned
    def refund_attributes_method=(refund_attributes_method)
      if refund_attributes_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"refund_attributes_method\", the character length must be smaller than or equal to 5000.")
      end

      @refund_attributes_method = refund_attributes_method
    end

    # Custom attribute writer method with validation
    # @param [Object] refund_attributes_status Value to be assigned
    def refund_attributes_status=(refund_attributes_status)
      if refund_attributes_status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"refund_attributes_status\", the character length must be smaller than or equal to 5000.")
      end

      @refund_attributes_status = refund_attributes_status
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address\", the character length must be smaller than or equal to 5000.")
      end

      @address = address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_charged, @amount_received, @amount_returned, @refund_attributes_method, @refund_attributes_status, @address)
  end
end
