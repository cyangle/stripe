#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentPaymentMethodOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentIntentPaymentMethodOptionsAcssDebit1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit1? = nil

    @[JSON::Field(key: "affirm", type: Stripe::PaymentIntentPaymentMethodOptionsAffirm?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm : Stripe::PaymentIntentPaymentMethodOptionsAffirm? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::PaymentIntentPaymentMethodOptionsAfterpayClearpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::PaymentIntentPaymentMethodOptionsAfterpayClearpay? = nil

    @[JSON::Field(key: "alipay", type: Stripe::PaymentIntentPaymentMethodOptionsAlipay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::PaymentIntentPaymentMethodOptionsAlipay? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::PaymentIntentPaymentMethodOptionsAuBecsDebit1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::PaymentIntentPaymentMethodOptionsAuBecsDebit1? = nil

    @[JSON::Field(key: "bacs_debit", type: Stripe::PaymentIntentPaymentMethodOptionsBacsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit : Stripe::PaymentIntentPaymentMethodOptionsBacsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentIntentPaymentMethodOptionsBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentIntentPaymentMethodOptionsBancontact? = nil

    @[JSON::Field(key: "blik", type: Stripe::PaymentIntentPaymentMethodOptionsBlik1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik : Stripe::PaymentIntentPaymentMethodOptionsBlik1? = nil

    @[JSON::Field(key: "boleto", type: Stripe::PaymentIntentPaymentMethodOptionsBoleto?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto : Stripe::PaymentIntentPaymentMethodOptionsBoleto? = nil

    @[JSON::Field(key: "card", type: Stripe::PaymentIntentPaymentMethodOptionsCard1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PaymentIntentPaymentMethodOptionsCard1? = nil

    @[JSON::Field(key: "card_present", type: Stripe::PaymentIntentPaymentMethodOptionsCardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::PaymentIntentPaymentMethodOptionsCardPresent? = nil

    @[JSON::Field(key: "customer_balance", type: Stripe::PaymentIntentPaymentMethodOptionsCustomerBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : Stripe::PaymentIntentPaymentMethodOptionsCustomerBalance? = nil

    @[JSON::Field(key: "eps", type: Stripe::PaymentIntentPaymentMethodOptionsEps1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::PaymentIntentPaymentMethodOptionsEps1? = nil

    @[JSON::Field(key: "fpx", type: Stripe::PaymentIntentPaymentMethodOptionsFpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx : Stripe::PaymentIntentPaymentMethodOptionsFpx? = nil

    @[JSON::Field(key: "giropay", type: Stripe::PaymentIntentPaymentMethodOptionsGiropay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::PaymentIntentPaymentMethodOptionsGiropay? = nil

    @[JSON::Field(key: "grabpay", type: Stripe::PaymentIntentPaymentMethodOptionsGrabpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay : Stripe::PaymentIntentPaymentMethodOptionsGrabpay? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentIntentPaymentMethodOptionsIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentIntentPaymentMethodOptionsIdeal? = nil

    @[JSON::Field(key: "interac_present", type: Stripe::PaymentIntentPaymentMethodOptionsInteracPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interac_present : Stripe::PaymentIntentPaymentMethodOptionsInteracPresent? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentIntentPaymentMethodOptionsKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentIntentPaymentMethodOptionsKlarna? = nil

    @[JSON::Field(key: "konbini", type: Stripe::PaymentIntentPaymentMethodOptionsKonbini?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : Stripe::PaymentIntentPaymentMethodOptionsKonbini? = nil

    @[JSON::Field(key: "link", type: Stripe::PaymentIntentPaymentMethodOptionsLink1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : Stripe::PaymentIntentPaymentMethodOptionsLink1? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::PaymentIntentPaymentMethodOptionsOxxo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::PaymentIntentPaymentMethodOptionsOxxo? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentIntentPaymentMethodOptionsP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentIntentPaymentMethodOptionsP24? = nil

    @[JSON::Field(key: "paynow", type: Stripe::PaymentIntentPaymentMethodOptionsPaynow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow : Stripe::PaymentIntentPaymentMethodOptionsPaynow? = nil

    @[JSON::Field(key: "pix", type: Stripe::PaymentIntentPaymentMethodOptionsPix?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix : Stripe::PaymentIntentPaymentMethodOptionsPix? = nil

    @[JSON::Field(key: "promptpay", type: Stripe::PaymentIntentPaymentMethodOptionsPromptpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay : Stripe::PaymentIntentPaymentMethodOptionsPromptpay? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::PaymentIntentPaymentMethodOptionsSepaDebit1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit1? = nil

    @[JSON::Field(key: "sofort", type: Stripe::PaymentIntentPaymentMethodOptionsSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentIntentPaymentMethodOptionsSofort? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::PaymentIntentPaymentMethodOptionsUsBankAccount1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::PaymentIntentPaymentMethodOptionsUsBankAccount1? = nil

    @[JSON::Field(key: "wechat_pay", type: Stripe::PaymentIntentPaymentMethodOptionsWechatPay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::PaymentIntentPaymentMethodOptionsWechatPay? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit1? = nil,
      @affirm : Stripe::PaymentIntentPaymentMethodOptionsAffirm? = nil,
      @afterpay_clearpay : Stripe::PaymentIntentPaymentMethodOptionsAfterpayClearpay? = nil,
      @alipay : Stripe::PaymentIntentPaymentMethodOptionsAlipay? = nil,
      @au_becs_debit : Stripe::PaymentIntentPaymentMethodOptionsAuBecsDebit1? = nil,
      @bacs_debit : Stripe::PaymentIntentPaymentMethodOptionsBacsDebit? = nil,
      @bancontact : Stripe::PaymentIntentPaymentMethodOptionsBancontact? = nil,
      @blik : Stripe::PaymentIntentPaymentMethodOptionsBlik1? = nil,
      @boleto : Stripe::PaymentIntentPaymentMethodOptionsBoleto? = nil,
      @card : Stripe::PaymentIntentPaymentMethodOptionsCard1? = nil,
      @card_present2 : Stripe::PaymentIntentPaymentMethodOptionsCardPresent? = nil,
      @customer_balance : Stripe::PaymentIntentPaymentMethodOptionsCustomerBalance? = nil,
      @eps : Stripe::PaymentIntentPaymentMethodOptionsEps1? = nil,
      @fpx : Stripe::PaymentIntentPaymentMethodOptionsFpx? = nil,
      @giropay : Stripe::PaymentIntentPaymentMethodOptionsGiropay? = nil,
      @grabpay : Stripe::PaymentIntentPaymentMethodOptionsGrabpay? = nil,
      @ideal : Stripe::PaymentIntentPaymentMethodOptionsIdeal? = nil,
      @interac_present : Stripe::PaymentIntentPaymentMethodOptionsInteracPresent? = nil,
      @klarna : Stripe::PaymentIntentPaymentMethodOptionsKlarna? = nil,
      @konbini : Stripe::PaymentIntentPaymentMethodOptionsKonbini? = nil,
      @link : Stripe::PaymentIntentPaymentMethodOptionsLink1? = nil,
      @oxxo : Stripe::PaymentIntentPaymentMethodOptionsOxxo? = nil,
      @p24 : Stripe::PaymentIntentPaymentMethodOptionsP24? = nil,
      @paynow : Stripe::PaymentIntentPaymentMethodOptionsPaynow? = nil,
      @pix : Stripe::PaymentIntentPaymentMethodOptionsPix? = nil,
      @promptpay : Stripe::PaymentIntentPaymentMethodOptionsPromptpay? = nil,
      @sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit1? = nil,
      @sofort : Stripe::PaymentIntentPaymentMethodOptionsSofort? = nil,
      @us_bank_account : Stripe::PaymentIntentPaymentMethodOptionsUsBankAccount1? = nil,
      @wechat_pay : Stripe::PaymentIntentPaymentMethodOptionsWechatPay? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_acss_debit = @acss_debit).nil?
        invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit")) if _acss_debit.is_a?(OpenApi::Validatable)
      end
      unless (_affirm = @affirm).nil?
        invalid_properties.concat(_affirm.list_invalid_properties_for("affirm")) if _affirm.is_a?(OpenApi::Validatable)
      end
      unless (_afterpay_clearpay = @afterpay_clearpay).nil?
        invalid_properties.concat(_afterpay_clearpay.list_invalid_properties_for("afterpay_clearpay")) if _afterpay_clearpay.is_a?(OpenApi::Validatable)
      end
      unless (_alipay = @alipay).nil?
        invalid_properties.concat(_alipay.list_invalid_properties_for("alipay")) if _alipay.is_a?(OpenApi::Validatable)
      end
      unless (_au_becs_debit = @au_becs_debit).nil?
        invalid_properties.concat(_au_becs_debit.list_invalid_properties_for("au_becs_debit")) if _au_becs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bacs_debit = @bacs_debit).nil?
        invalid_properties.concat(_bacs_debit.list_invalid_properties_for("bacs_debit")) if _bacs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bancontact = @bancontact).nil?
        invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact")) if _bancontact.is_a?(OpenApi::Validatable)
      end
      unless (_blik = @blik).nil?
        invalid_properties.concat(_blik.list_invalid_properties_for("blik")) if _blik.is_a?(OpenApi::Validatable)
      end
      unless (_boleto = @boleto).nil?
        invalid_properties.concat(_boleto.list_invalid_properties_for("boleto")) if _boleto.is_a?(OpenApi::Validatable)
      end
      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      unless (_card_present = @card_present).nil?
        invalid_properties.concat(_card_present.list_invalid_properties_for("card_present")) if _card_present.is_a?(OpenApi::Validatable)
      end
      unless (_customer_balance = @customer_balance).nil?
        invalid_properties.concat(_customer_balance.list_invalid_properties_for("customer_balance")) if _customer_balance.is_a?(OpenApi::Validatable)
      end
      unless (_eps = @eps).nil?
        invalid_properties.concat(_eps.list_invalid_properties_for("eps")) if _eps.is_a?(OpenApi::Validatable)
      end
      unless (_fpx = @fpx).nil?
        invalid_properties.concat(_fpx.list_invalid_properties_for("fpx")) if _fpx.is_a?(OpenApi::Validatable)
      end
      unless (_giropay = @giropay).nil?
        invalid_properties.concat(_giropay.list_invalid_properties_for("giropay")) if _giropay.is_a?(OpenApi::Validatable)
      end
      unless (_grabpay = @grabpay).nil?
        invalid_properties.concat(_grabpay.list_invalid_properties_for("grabpay")) if _grabpay.is_a?(OpenApi::Validatable)
      end
      unless (_ideal = @ideal).nil?
        invalid_properties.concat(_ideal.list_invalid_properties_for("ideal")) if _ideal.is_a?(OpenApi::Validatable)
      end
      unless (_interac_present = @interac_present).nil?
        invalid_properties.concat(_interac_present.list_invalid_properties_for("interac_present")) if _interac_present.is_a?(OpenApi::Validatable)
      end
      unless (_klarna = @klarna).nil?
        invalid_properties.concat(_klarna.list_invalid_properties_for("klarna")) if _klarna.is_a?(OpenApi::Validatable)
      end
      unless (_konbini = @konbini).nil?
        invalid_properties.concat(_konbini.list_invalid_properties_for("konbini")) if _konbini.is_a?(OpenApi::Validatable)
      end
      unless (_link = @link).nil?
        invalid_properties.concat(_link.list_invalid_properties_for("link")) if _link.is_a?(OpenApi::Validatable)
      end
      unless (_oxxo = @oxxo).nil?
        invalid_properties.concat(_oxxo.list_invalid_properties_for("oxxo")) if _oxxo.is_a?(OpenApi::Validatable)
      end
      unless (_p24 = @p24).nil?
        invalid_properties.concat(_p24.list_invalid_properties_for("p24")) if _p24.is_a?(OpenApi::Validatable)
      end
      unless (_paynow = @paynow).nil?
        invalid_properties.concat(_paynow.list_invalid_properties_for("paynow")) if _paynow.is_a?(OpenApi::Validatable)
      end
      unless (_pix = @pix).nil?
        invalid_properties.concat(_pix.list_invalid_properties_for("pix")) if _pix.is_a?(OpenApi::Validatable)
      end
      unless (_promptpay = @promptpay).nil?
        invalid_properties.concat(_promptpay.list_invalid_properties_for("promptpay")) if _promptpay.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_debit = @sepa_debit).nil?
        invalid_properties.concat(_sepa_debit.list_invalid_properties_for("sepa_debit")) if _sepa_debit.is_a?(OpenApi::Validatable)
      end
      unless (_sofort = @sofort).nil?
        invalid_properties.concat(_sofort.list_invalid_properties_for("sofort")) if _sofort.is_a?(OpenApi::Validatable)
      end
      unless (_us_bank_account = @us_bank_account).nil?
        invalid_properties.concat(_us_bank_account.list_invalid_properties_for("us_bank_account")) if _us_bank_account.is_a?(OpenApi::Validatable)
      end
      unless (_wechat_pay = @wechat_pay).nil?
        invalid_properties.concat(_wechat_pay.list_invalid_properties_for("wechat_pay")) if _wechat_pay.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_acss_debit = @acss_debit).nil?
        return false if _acss_debit.is_a?(OpenApi::Validatable) && !_acss_debit.valid?
      end

      unless (_affirm = @affirm).nil?
        return false if _affirm.is_a?(OpenApi::Validatable) && !_affirm.valid?
      end

      unless (_afterpay_clearpay = @afterpay_clearpay).nil?
        return false if _afterpay_clearpay.is_a?(OpenApi::Validatable) && !_afterpay_clearpay.valid?
      end

      unless (_alipay = @alipay).nil?
        return false if _alipay.is_a?(OpenApi::Validatable) && !_alipay.valid?
      end

      unless (_au_becs_debit = @au_becs_debit).nil?
        return false if _au_becs_debit.is_a?(OpenApi::Validatable) && !_au_becs_debit.valid?
      end

      unless (_bacs_debit = @bacs_debit).nil?
        return false if _bacs_debit.is_a?(OpenApi::Validatable) && !_bacs_debit.valid?
      end

      unless (_bancontact = @bancontact).nil?
        return false if _bancontact.is_a?(OpenApi::Validatable) && !_bancontact.valid?
      end

      unless (_blik = @blik).nil?
        return false if _blik.is_a?(OpenApi::Validatable) && !_blik.valid?
      end

      unless (_boleto = @boleto).nil?
        return false if _boleto.is_a?(OpenApi::Validatable) && !_boleto.valid?
      end

      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      unless (_card_present = @card_present).nil?
        return false if _card_present.is_a?(OpenApi::Validatable) && !_card_present.valid?
      end

      unless (_customer_balance = @customer_balance).nil?
        return false if _customer_balance.is_a?(OpenApi::Validatable) && !_customer_balance.valid?
      end

      unless (_eps = @eps).nil?
        return false if _eps.is_a?(OpenApi::Validatable) && !_eps.valid?
      end

      unless (_fpx = @fpx).nil?
        return false if _fpx.is_a?(OpenApi::Validatable) && !_fpx.valid?
      end

      unless (_giropay = @giropay).nil?
        return false if _giropay.is_a?(OpenApi::Validatable) && !_giropay.valid?
      end

      unless (_grabpay = @grabpay).nil?
        return false if _grabpay.is_a?(OpenApi::Validatable) && !_grabpay.valid?
      end

      unless (_ideal = @ideal).nil?
        return false if _ideal.is_a?(OpenApi::Validatable) && !_ideal.valid?
      end

      unless (_interac_present = @interac_present).nil?
        return false if _interac_present.is_a?(OpenApi::Validatable) && !_interac_present.valid?
      end

      unless (_klarna = @klarna).nil?
        return false if _klarna.is_a?(OpenApi::Validatable) && !_klarna.valid?
      end

      unless (_konbini = @konbini).nil?
        return false if _konbini.is_a?(OpenApi::Validatable) && !_konbini.valid?
      end

      unless (_link = @link).nil?
        return false if _link.is_a?(OpenApi::Validatable) && !_link.valid?
      end

      unless (_oxxo = @oxxo).nil?
        return false if _oxxo.is_a?(OpenApi::Validatable) && !_oxxo.valid?
      end

      unless (_p24 = @p24).nil?
        return false if _p24.is_a?(OpenApi::Validatable) && !_p24.valid?
      end

      unless (_paynow = @paynow).nil?
        return false if _paynow.is_a?(OpenApi::Validatable) && !_paynow.valid?
      end

      unless (_pix = @pix).nil?
        return false if _pix.is_a?(OpenApi::Validatable) && !_pix.valid?
      end

      unless (_promptpay = @promptpay).nil?
        return false if _promptpay.is_a?(OpenApi::Validatable) && !_promptpay.valid?
      end

      unless (_sepa_debit = @sepa_debit).nil?
        return false if _sepa_debit.is_a?(OpenApi::Validatable) && !_sepa_debit.valid?
      end

      unless (_sofort = @sofort).nil?
        return false if _sofort.is_a?(OpenApi::Validatable) && !_sofort.valid?
      end

      unless (_us_bank_account = @us_bank_account).nil?
        return false if _us_bank_account.is_a?(OpenApi::Validatable) && !_us_bank_account.valid?
      end

      unless (_wechat_pay = @wechat_pay).nil?
        return false if _wechat_pay.is_a?(OpenApi::Validatable) && !_wechat_pay.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(new_value : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @acss_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm Object to be assigned
    def affirm=(new_value : Stripe::PaymentIntentPaymentMethodOptionsAffirm?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @affirm = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(new_value : Stripe::PaymentIntentPaymentMethodOptionsAfterpayClearpay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @afterpay_clearpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(new_value : Stripe::PaymentIntentPaymentMethodOptionsAlipay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @alipay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(new_value : Stripe::PaymentIntentPaymentMethodOptionsAuBecsDebit1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @au_becs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit Object to be assigned
    def bacs_debit=(new_value : Stripe::PaymentIntentPaymentMethodOptionsBacsDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(new_value : Stripe::PaymentIntentPaymentMethodOptionsBancontact?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bancontact = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik Object to be assigned
    def blik=(new_value : Stripe::PaymentIntentPaymentMethodOptionsBlik1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @blik = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto Object to be assigned
    def boleto=(new_value : Stripe::PaymentIntentPaymentMethodOptionsBoleto?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @boleto = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : Stripe::PaymentIntentPaymentMethodOptionsCard1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(new_value : Stripe::PaymentIntentPaymentMethodOptionsCardPresent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_present2 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(new_value : Stripe::PaymentIntentPaymentMethodOptionsCustomerBalance?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(new_value : Stripe::PaymentIntentPaymentMethodOptionsEps1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eps = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx Object to be assigned
    def fpx=(new_value : Stripe::PaymentIntentPaymentMethodOptionsFpx?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fpx = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(new_value : Stripe::PaymentIntentPaymentMethodOptionsGiropay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @giropay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay Object to be assigned
    def grabpay=(new_value : Stripe::PaymentIntentPaymentMethodOptionsGrabpay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @grabpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(new_value : Stripe::PaymentIntentPaymentMethodOptionsIdeal?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ideal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interac_present Object to be assigned
    def interac_present=(new_value : Stripe::PaymentIntentPaymentMethodOptionsInteracPresent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @interac_present = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(new_value : Stripe::PaymentIntentPaymentMethodOptionsKlarna?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @klarna = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(new_value : Stripe::PaymentIntentPaymentMethodOptionsKonbini?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @konbini = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(new_value : Stripe::PaymentIntentPaymentMethodOptionsLink1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(new_value : Stripe::PaymentIntentPaymentMethodOptionsOxxo?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @oxxo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(new_value : Stripe::PaymentIntentPaymentMethodOptionsP24?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @p24 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow Object to be assigned
    def paynow=(new_value : Stripe::PaymentIntentPaymentMethodOptionsPaynow?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paynow = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix Object to be assigned
    def pix=(new_value : Stripe::PaymentIntentPaymentMethodOptionsPix?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay Object to be assigned
    def promptpay=(new_value : Stripe::PaymentIntentPaymentMethodOptionsPromptpay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @promptpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(new_value : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(new_value : Stripe::PaymentIntentPaymentMethodOptionsSofort?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sofort = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(new_value : Stripe::PaymentIntentPaymentMethodOptionsUsBankAccount1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @us_bank_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(new_value : Stripe::PaymentIntentPaymentMethodOptionsWechatPay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wechat_pay = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit, @affirm, @afterpay_clearpay, @alipay, @au_becs_debit, @bacs_debit, @bancontact, @blik, @boleto, @card, @card_present2, @customer_balance, @eps, @fpx, @giropay, @grabpay, @ideal, @interac_present, @klarna, @konbini, @link, @oxxo, @p24, @paynow, @pix, @promptpay, @sepa_debit, @sofort, @us_bank_account, @wechat_pay)
  end
end
