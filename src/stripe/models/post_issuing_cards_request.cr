#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostIssuingCardsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The currency for the card.
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # The type of card to issue. Possible values are `physical` or `virtual`.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["physical", "virtual"])

    # Optional properties
    # The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
    @[JSON::Field(key: "cardholder", type: String?, presence: true, ignore_serialize: cardholder.nil? && !cardholder_present?)]
    getter cardholder : String?

    @[JSON::Field(ignore: true)]
    property? cardholder_present : Bool = false

    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    @[JSON::Field(key: "financial_account", type: String?, presence: true, ignore_serialize: financial_account.nil? && !financial_account_present?)]
    property financial_account : String?

    @[JSON::Field(ignore: true)]
    property? financial_account_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The card this is meant to be a replacement for (if any).
    @[JSON::Field(key: "replacement_for", type: String?, presence: true, ignore_serialize: replacement_for.nil? && !replacement_for_present?)]
    getter replacement_for : String?

    @[JSON::Field(ignore: true)]
    property? replacement_for_present : Bool = false

    # If `replacement_for` is specified, this should indicate why that card is being replaced.
    @[JSON::Field(key: "replacement_reason", type: String?, presence: true, ignore_serialize: replacement_reason.nil? && !replacement_reason_present?)]
    getter replacement_reason : String?

    @[JSON::Field(ignore: true)]
    property? replacement_reason_present : Bool = false

    ENUM_VALIDATOR_FOR_REPLACEMENT_REASON = EnumValidator.new("replacement_reason", "String", ["damaged", "expired", "lost", "stolen"])

    @[JSON::Field(key: "shipping", type: ShippingSpecs?, presence: true, ignore_serialize: shipping.nil? && !shipping_present?)]
    property shipping : ShippingSpecs?

    @[JSON::Field(ignore: true)]
    property? shipping_present : Bool = false

    @[JSON::Field(key: "spending_controls", type: AuthorizationControlsParam?, presence: true, ignore_serialize: spending_controls.nil? && !spending_controls_present?)]
    property spending_controls : AuthorizationControlsParam?

    @[JSON::Field(ignore: true)]
    property? spending_controls_present : Bool = false

    # Whether authorizations can be approved on this card. Defaults to `inactive`.
    @[JSON::Field(key: "status", type: String?, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String?

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["active", "inactive"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @currency : String, @_type : String, @cardholder : String? = nil, @expand : Array(String)? = nil, @financial_account : String? = nil, @metadata : Hash(String, String)? = nil, @replacement_for : String? = nil, @replacement_reason : String? = nil, @shipping : ShippingSpecs? = nil, @spending_controls : AuthorizationControlsParam? = nil, @status : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@cardholder.nil? && @cardholder.to_s.size > 5000
        invalid_properties.push("invalid value for \"cardholder\", the character length must be smaller than or equal to 5000.")
      end

      if !@replacement_for.nil? && @replacement_for.to_s.size > 5000
        invalid_properties.push("invalid value for \"replacement_for\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_REPLACEMENT_REASON.error_message) unless ENUM_VALIDATOR_FOR_REPLACEMENT_REASON.valid?(@replacement_reason)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@cardholder.nil? && @cardholder.to_s.size > 5000
      return false if !@replacement_for.nil? && @replacement_for.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_REPLACEMENT_REASON.valid?(@replacement_reason)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cardholder Value to be assigned
    def cardholder=(cardholder)
      if !cardholder.nil? && cardholder.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder\", the character length must be smaller than or equal to 5000.")
      end

      @cardholder = cardholder
    end

    # Custom attribute writer method with validation
    # @param [Object] replacement_for Value to be assigned
    def replacement_for=(replacement_for)
      if !replacement_for.nil? && replacement_for.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"replacement_for\", the character length must be smaller than or equal to 5000.")
      end

      @replacement_for = replacement_for
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replacement_reason Object to be assigned
    def replacement_reason=(replacement_reason)
      ENUM_VALIDATOR_FOR_REPLACEMENT_REASON.valid!(replacement_reason)
      @replacement_reason = replacement_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status)
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        cardholder == o.cardholder &&
        currency == o.currency &&
        expand == o.expand &&
        financial_account == o.financial_account &&
        metadata == o.metadata &&
        replacement_for == o.replacement_for &&
        replacement_reason == o.replacement_reason &&
        shipping == o.shipping &&
        spending_controls == o.spending_controls &&
        status == o.status &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@cardholder, @currency, @expand, @financial_account, @metadata, @replacement_for, @replacement_reason, @shipping, @spending_controls, @status, @_type)
  end
end
