#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostAccountLinksRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # The identifier of the account to create an account link for.
    @[JSON::Field(key: "account", type: String)]
    getter account : String

    # The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["account_onboarding", "account_update"])

    # Optional properties

    # Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
    @[JSON::Field(key: "collect", type: String?, presence: true, ignore_serialize: collect.nil? && !collect_present?)]
    getter collect : String?

    @[JSON::Field(ignore: true)]
    property? collect_present : Bool = false

    ENUM_VALIDATOR_FOR_COLLECT = EnumValidator.new("collect", "String", ["currently_due", "eventually_due"])

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.
    @[JSON::Field(key: "refresh_url", type: String?, presence: true, ignore_serialize: refresh_url.nil? && !refresh_url_present?)]
    property refresh_url : String?

    @[JSON::Field(ignore: true)]
    property? refresh_url_present : Bool = false

    # The URL that the user will be redirected to upon leaving or completing the linked flow.
    @[JSON::Field(key: "return_url", type: String?, presence: true, ignore_serialize: return_url.nil? && !return_url_present?)]
    property return_url : String?

    @[JSON::Field(ignore: true)]
    property? return_url_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account : String,
      @_type : String,
      # Optional properties
      @collect : String? = nil,
      @expand : Array(String)? = nil,
      @refresh_url : String? = nil,
      @return_url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @account.to_s.size > 5000
        invalid_properties.push("invalid value for \"account\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECT.error_message) unless ENUM_VALIDATOR_FOR_COLLECT.valid?(@collect)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      return false unless ENUM_VALIDATOR_FOR_COLLECT.valid?(@collect)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account Value to be assigned
    def account=(account)
      if account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\", the character length must be smaller than or equal to 5000.")
      end

      @account = account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collect Object to be assigned
    def collect=(collect)
      ENUM_VALIDATOR_FOR_COLLECT.valid!(collect)
      @collect = collect
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @_type, @collect, @expand, @refresh_url, @return_url)
  end
end
