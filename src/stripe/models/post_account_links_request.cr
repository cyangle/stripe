#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostAccountLinksRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The identifier of the account to create an account link for.
    @[JSON::Field(key: "account", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account : String? = nil
    MAX_LENGTH_FOR_ACCOUNT = 5000

    # The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [account_onboarding, account_update]."
    VALID_VALUES_FOR__TYPE  = String.static_array("account_onboarding", "account_update")

    # End of Required Properties

    # Optional Properties

    # Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
    @[JSON::Field(key: "collect", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter collect : String? = nil
    ERROR_MESSAGE_FOR_COLLECT = "invalid value for \"collect\", must be one of [currently_due, eventually_due]."
    VALID_VALUES_FOR_COLLECT  = String.static_array("currently_due", "eventually_due")

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.
    @[JSON::Field(key: "refresh_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter refresh_url : String? = nil

    # The URL that the user will be redirected to upon leaving or completing the linked flow.
    @[JSON::Field(key: "return_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter return_url : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @collect : String? = nil,
      @expand : Array(String)? = nil,
      @refresh_url : String? = nil,
      @return_url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account\" is required and cannot be null") if @account.nil?

      unless (_account = @account).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account", _account.to_s.size, MAX_LENGTH_FOR_ACCOUNT)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_collect = @collect).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_COLLECT) unless OpenApi::EnumValidator.valid?(_collect, VALID_VALUES_FOR_COLLECT)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account.nil?
      unless (_account = @account).nil?
        return false if _account.to_s.size > MAX_LENGTH_FOR_ACCOUNT
      end

      unless (_collect = @collect).nil?
        return false unless OpenApi::EnumValidator.valid?(_collect, VALID_VALUES_FOR_COLLECT)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account Object to be assigned
    def account=(account : String?)
      if account.nil?
        raise ArgumentError.new("\"account\" is required and cannot be null")
      end
      _account = account.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("account", _account.to_s.size, MAX_LENGTH_FOR_ACCOUNT)
      @account = _account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collect Object to be assigned
    def collect=(collect : String?)
      if collect.nil?
        return @collect = nil
      end
      _collect = collect.not_nil!
      OpenApi::EnumValidator.validate("collect", _collect, VALID_VALUES_FOR_COLLECT)
      @collect = _collect
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      _expand = expand.not_nil!
      @expand = _expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refresh_url Object to be assigned
    def refresh_url=(refresh_url : String?)
      if refresh_url.nil?
        return @refresh_url = nil
      end
      _refresh_url = refresh_url.not_nil!
      @refresh_url = _refresh_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_url Object to be assigned
    def return_url=(return_url : String?)
      if return_url.nil?
        return @return_url = nil
      end
      _return_url = return_url.not_nil!
      @return_url = _return_url
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @_type, @collect, @expand, @refresh_url, @return_url)
  end
end
