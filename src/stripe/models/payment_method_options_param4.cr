#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PaymentMethodOptionsParam4
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "installments", type: Stripe::InstallmentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter installments : Stripe::InstallmentsParam? = nil

    @[JSON::Field(key: "setup_future_usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_future_usage : String? = nil

    ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE = EnumValidator.new("setup_future_usage", "String", ["off_session", "on_session"])

    @[JSON::Field(key: "statement_descriptor_suffix_kana", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kana : String? = nil

    @[JSON::Field(key: "statement_descriptor_suffix_kanji", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kanji : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @installments : Stripe::InstallmentsParam? = nil,
      @setup_future_usage : String? = nil,
      @statement_descriptor_suffix_kana : String? = nil,
      @statement_descriptor_suffix_kanji : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _installments = @installments
        if _installments.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_installments.list_invalid_properties_for("installments"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.error_message) unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)
      if _statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana
        if _statement_descriptor_suffix_kana.to_s.size > 22
          invalid_properties.push("invalid value for \"statement_descriptor_suffix_kana\", the character length must be smaller than or equal to 22.")
        end
      end
      if _statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji
        if _statement_descriptor_suffix_kanji.to_s.size > 17
          invalid_properties.push("invalid value for \"statement_descriptor_suffix_kanji\", the character length must be smaller than or equal to 17.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _installments = @installments
        if _installments.is_a?(OpenApi::Validatable)
          return false unless _installments.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)
      if _statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana
        return false if _statement_descriptor_suffix_kana.to_s.size > 22
      end
      if _statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji
        return false if _statement_descriptor_suffix_kanji.to_s.size > 17
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] installments Object to be assigned
    def installments=(installments : Stripe::InstallmentsParam?)
      if installments.nil?
        return @installments = nil
      end
      _installments = installments.not_nil!
      if _installments.is_a?(OpenApi::Validatable)
        _installments.validate
      end
      @installments = _installments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(setup_future_usage : String?)
      if setup_future_usage.nil?
        return @setup_future_usage = nil
      end
      _setup_future_usage = setup_future_usage.not_nil!
      ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid!(_setup_future_usage)
      @setup_future_usage = _setup_future_usage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kana Object to be assigned
    def statement_descriptor_suffix_kana=(statement_descriptor_suffix_kana : String?)
      if statement_descriptor_suffix_kana.nil?
        return @statement_descriptor_suffix_kana = nil
      end
      _statement_descriptor_suffix_kana = statement_descriptor_suffix_kana.not_nil!
      if _statement_descriptor_suffix_kana.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix_kana\", the character length must be smaller than or equal to 22.")
      end

      @statement_descriptor_suffix_kana = _statement_descriptor_suffix_kana
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kanji Object to be assigned
    def statement_descriptor_suffix_kanji=(statement_descriptor_suffix_kanji : String?)
      if statement_descriptor_suffix_kanji.nil?
        return @statement_descriptor_suffix_kanji = nil
      end
      _statement_descriptor_suffix_kanji = statement_descriptor_suffix_kanji.not_nil!
      if _statement_descriptor_suffix_kanji.to_s.size > 17
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix_kanji\", the character length must be smaller than or equal to 17.")
      end

      @statement_descriptor_suffix_kanji = _statement_descriptor_suffix_kanji
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@installments, @setup_future_usage, @statement_descriptor_suffix_kana, @statement_descriptor_suffix_kanji)
  end
end
