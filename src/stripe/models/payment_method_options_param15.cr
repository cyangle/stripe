#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Payment-method-specific configuration for this PaymentIntent.
  class PaymentMethodOptionsParam15
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "acss_debit", type: Stripe::UpdateParams1AcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::UpdateParams1AcssDebit? = nil

    @[JSON::Field(key: "affirm", type: Stripe::PaymentMethodOptionsParam15Affirm?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm : Stripe::PaymentMethodOptionsParam15Affirm? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::PaymentMethodOptionsParam15AfterpayClearpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::PaymentMethodOptionsParam15AfterpayClearpay? = nil

    @[JSON::Field(key: "alipay", type: Stripe::UpdateParams1Alipay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::UpdateParams1Alipay? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::PaymentMethodOptionsParam15AuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::PaymentMethodOptionsParam15AuBecsDebit? = nil

    @[JSON::Field(key: "bacs_debit", type: Stripe::PaymentMethodOptionsParam15BacsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit : Stripe::PaymentMethodOptionsParam15BacsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::UpdateParams1Bancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::UpdateParams1Bancontact? = nil

    @[JSON::Field(key: "blik", type: Stripe::PaymentMethodOptionsParam15Blik?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik : Stripe::PaymentMethodOptionsParam15Blik? = nil

    @[JSON::Field(key: "boleto", type: Stripe::PaymentMethodOptionsParam15Boleto?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto : Stripe::PaymentMethodOptionsParam15Boleto? = nil

    @[JSON::Field(key: "card", type: Stripe::PaymentMethodOptionsParam15Card?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PaymentMethodOptionsParam15Card? = nil

    @[JSON::Field(key: "card_present", type: Stripe::PaymentMethodOptionsParam15CardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::PaymentMethodOptionsParam15CardPresent? = nil

    @[JSON::Field(key: "customer_balance", type: Stripe::UpdateParams1CustomerBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : Stripe::UpdateParams1CustomerBalance? = nil

    @[JSON::Field(key: "eps", type: Stripe::PaymentMethodOptionsParam15Eps?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::PaymentMethodOptionsParam15Eps? = nil

    @[JSON::Field(key: "fpx", type: Stripe::PaymentMethodOptionsParam15Fpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx : Stripe::PaymentMethodOptionsParam15Fpx? = nil

    @[JSON::Field(key: "giropay", type: Stripe::PaymentMethodOptionsParam15Fpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::PaymentMethodOptionsParam15Fpx? = nil

    @[JSON::Field(key: "grabpay", type: Stripe::PaymentMethodOptionsParam15Fpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay : Stripe::PaymentMethodOptionsParam15Fpx? = nil

    @[JSON::Field(key: "ideal", type: Stripe::UpdateParams1Alipay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::UpdateParams1Alipay? = nil

    @[JSON::Field(key: "interac_present", type: Stripe::PaymentMethodOptionsParam15InteracPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interac_present : Stripe::PaymentMethodOptionsParam15InteracPresent? = nil

    @[JSON::Field(key: "klarna", type: Stripe::UpdateParams1Klarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::UpdateParams1Klarna? = nil

    @[JSON::Field(key: "konbini", type: Stripe::PaymentMethodOptionsParam15Konbini?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : Stripe::PaymentMethodOptionsParam15Konbini? = nil

    @[JSON::Field(key: "link", type: Stripe::UpdateParams1Link?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : Stripe::UpdateParams1Link? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::UpdateParams1Oxxo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::UpdateParams1Oxxo? = nil

    @[JSON::Field(key: "p24", type: Stripe::UpdateParams1P24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::UpdateParams1P24? = nil

    @[JSON::Field(key: "paynow", type: Stripe::PaymentMethodOptionsParam15Fpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow : Stripe::PaymentMethodOptionsParam15Fpx? = nil

    @[JSON::Field(key: "pix", type: Stripe::PaymentMethodOptionsParam15Pix?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix : Stripe::PaymentMethodOptionsParam15Pix? = nil

    @[JSON::Field(key: "promptpay", type: Stripe::PaymentMethodOptionsParam15Fpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay : Stripe::PaymentMethodOptionsParam15Fpx? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::UpdateParams1SepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::UpdateParams1SepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::UpdateParams1Sofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::UpdateParams1Sofort? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::PaymentMethodOptionsParam15UsBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::PaymentMethodOptionsParam15UsBankAccount? = nil

    @[JSON::Field(key: "wechat_pay", type: Stripe::UpdateParams1WechatPay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::UpdateParams1WechatPay? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit : Stripe::UpdateParams1AcssDebit? = nil,
      @affirm : Stripe::PaymentMethodOptionsParam15Affirm? = nil,
      @afterpay_clearpay : Stripe::PaymentMethodOptionsParam15AfterpayClearpay? = nil,
      @alipay : Stripe::UpdateParams1Alipay? = nil,
      @au_becs_debit : Stripe::PaymentMethodOptionsParam15AuBecsDebit? = nil,
      @bacs_debit : Stripe::PaymentMethodOptionsParam15BacsDebit? = nil,
      @bancontact : Stripe::UpdateParams1Bancontact? = nil,
      @blik : Stripe::PaymentMethodOptionsParam15Blik? = nil,
      @boleto : Stripe::PaymentMethodOptionsParam15Boleto? = nil,
      @card : Stripe::PaymentMethodOptionsParam15Card? = nil,
      @card_present2 : Stripe::PaymentMethodOptionsParam15CardPresent? = nil,
      @customer_balance : Stripe::UpdateParams1CustomerBalance? = nil,
      @eps : Stripe::PaymentMethodOptionsParam15Eps? = nil,
      @fpx : Stripe::PaymentMethodOptionsParam15Fpx? = nil,
      @giropay : Stripe::PaymentMethodOptionsParam15Fpx? = nil,
      @grabpay : Stripe::PaymentMethodOptionsParam15Fpx? = nil,
      @ideal : Stripe::UpdateParams1Alipay? = nil,
      @interac_present : Stripe::PaymentMethodOptionsParam15InteracPresent? = nil,
      @klarna : Stripe::UpdateParams1Klarna? = nil,
      @konbini : Stripe::PaymentMethodOptionsParam15Konbini? = nil,
      @link : Stripe::UpdateParams1Link? = nil,
      @oxxo : Stripe::UpdateParams1Oxxo? = nil,
      @p24 : Stripe::UpdateParams1P24? = nil,
      @paynow : Stripe::PaymentMethodOptionsParam15Fpx? = nil,
      @pix : Stripe::PaymentMethodOptionsParam15Pix? = nil,
      @promptpay : Stripe::PaymentMethodOptionsParam15Fpx? = nil,
      @sepa_debit : Stripe::UpdateParams1SepaDebit? = nil,
      @sofort : Stripe::UpdateParams1Sofort? = nil,
      @us_bank_account : Stripe::PaymentMethodOptionsParam15UsBankAccount? = nil,
      @wechat_pay : Stripe::UpdateParams1WechatPay? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model acss_debit : Stripe::UpdateParams1AcssDebit?
      # This is a model affirm : Stripe::PaymentMethodOptionsParam15Affirm?
      # This is a model afterpay_clearpay : Stripe::PaymentMethodOptionsParam15AfterpayClearpay?
      # This is a model alipay : Stripe::UpdateParams1Alipay?
      # This is a model au_becs_debit : Stripe::PaymentMethodOptionsParam15AuBecsDebit?
      # This is a model bacs_debit : Stripe::PaymentMethodOptionsParam15BacsDebit?
      # This is a model bancontact : Stripe::UpdateParams1Bancontact?
      # This is a model blik : Stripe::PaymentMethodOptionsParam15Blik?
      # This is a model boleto : Stripe::PaymentMethodOptionsParam15Boleto?
      # This is a model card : Stripe::PaymentMethodOptionsParam15Card?
      # This is a model card_present : Stripe::PaymentMethodOptionsParam15CardPresent?
      # This is a model customer_balance : Stripe::UpdateParams1CustomerBalance?
      # This is a model eps : Stripe::PaymentMethodOptionsParam15Eps?
      # This is a model fpx : Stripe::PaymentMethodOptionsParam15Fpx?
      # This is a model giropay : Stripe::PaymentMethodOptionsParam15Fpx?
      # This is a model grabpay : Stripe::PaymentMethodOptionsParam15Fpx?
      # This is a model ideal : Stripe::UpdateParams1Alipay?
      # This is a model interac_present : Stripe::PaymentMethodOptionsParam15InteracPresent?
      # This is a model klarna : Stripe::UpdateParams1Klarna?
      # This is a model konbini : Stripe::PaymentMethodOptionsParam15Konbini?
      # This is a model link : Stripe::UpdateParams1Link?
      # This is a model oxxo : Stripe::UpdateParams1Oxxo?
      # This is a model p24 : Stripe::UpdateParams1P24?
      # This is a model paynow : Stripe::PaymentMethodOptionsParam15Fpx?
      # This is a model pix : Stripe::PaymentMethodOptionsParam15Pix?
      # This is a model promptpay : Stripe::PaymentMethodOptionsParam15Fpx?
      # This is a model sepa_debit : Stripe::UpdateParams1SepaDebit?
      # This is a model sofort : Stripe::UpdateParams1Sofort?
      # This is a model us_bank_account : Stripe::PaymentMethodOptionsParam15UsBankAccount?
      # This is a model wechat_pay : Stripe::UpdateParams1WechatPay?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::UpdateParams1AcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      @acss_debit = acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm Object to be assigned
    def affirm=(affirm : Stripe::PaymentMethodOptionsParam15Affirm?)
      if affirm.nil?
        return @affirm = nil
      end
      @affirm = affirm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(afterpay_clearpay : Stripe::PaymentMethodOptionsParam15AfterpayClearpay?)
      if afterpay_clearpay.nil?
        return @afterpay_clearpay = nil
      end
      @afterpay_clearpay = afterpay_clearpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(alipay : Stripe::UpdateParams1Alipay?)
      if alipay.nil?
        return @alipay = nil
      end
      @alipay = alipay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(au_becs_debit : Stripe::PaymentMethodOptionsParam15AuBecsDebit?)
      if au_becs_debit.nil?
        return @au_becs_debit = nil
      end
      @au_becs_debit = au_becs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit Object to be assigned
    def bacs_debit=(bacs_debit : Stripe::PaymentMethodOptionsParam15BacsDebit?)
      if bacs_debit.nil?
        return @bacs_debit = nil
      end
      @bacs_debit = bacs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::UpdateParams1Bancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      @bancontact = bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik Object to be assigned
    def blik=(blik : Stripe::PaymentMethodOptionsParam15Blik?)
      if blik.nil?
        return @blik = nil
      end
      @blik = blik
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto Object to be assigned
    def boleto=(boleto : Stripe::PaymentMethodOptionsParam15Boleto?)
      if boleto.nil?
        return @boleto = nil
      end
      @boleto = boleto
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::PaymentMethodOptionsParam15Card?)
      if card.nil?
        return @card = nil
      end
      @card = card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(card_present : Stripe::PaymentMethodOptionsParam15CardPresent?)
      if card_present.nil?
        return @card_present2 = nil
      end
      @card_present2 = card_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : Stripe::UpdateParams1CustomerBalance?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      @customer_balance = customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(eps : Stripe::PaymentMethodOptionsParam15Eps?)
      if eps.nil?
        return @eps = nil
      end
      @eps = eps
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx Object to be assigned
    def fpx=(fpx : Stripe::PaymentMethodOptionsParam15Fpx?)
      if fpx.nil?
        return @fpx = nil
      end
      @fpx = fpx
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(giropay : Stripe::PaymentMethodOptionsParam15Fpx?)
      if giropay.nil?
        return @giropay = nil
      end
      @giropay = giropay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay Object to be assigned
    def grabpay=(grabpay : Stripe::PaymentMethodOptionsParam15Fpx?)
      if grabpay.nil?
        return @grabpay = nil
      end
      @grabpay = grabpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(ideal : Stripe::UpdateParams1Alipay?)
      if ideal.nil?
        return @ideal = nil
      end
      @ideal = ideal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interac_present Object to be assigned
    def interac_present=(interac_present : Stripe::PaymentMethodOptionsParam15InteracPresent?)
      if interac_present.nil?
        return @interac_present = nil
      end
      @interac_present = interac_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(klarna : Stripe::UpdateParams1Klarna?)
      if klarna.nil?
        return @klarna = nil
      end
      @klarna = klarna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(konbini : Stripe::PaymentMethodOptionsParam15Konbini?)
      if konbini.nil?
        return @konbini = nil
      end
      @konbini = konbini
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(link : Stripe::UpdateParams1Link?)
      if link.nil?
        return @link = nil
      end
      @link = link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(oxxo : Stripe::UpdateParams1Oxxo?)
      if oxxo.nil?
        return @oxxo = nil
      end
      @oxxo = oxxo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(p24 : Stripe::UpdateParams1P24?)
      if p24.nil?
        return @p24 = nil
      end
      @p24 = p24
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow Object to be assigned
    def paynow=(paynow : Stripe::PaymentMethodOptionsParam15Fpx?)
      if paynow.nil?
        return @paynow = nil
      end
      @paynow = paynow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix Object to be assigned
    def pix=(pix : Stripe::PaymentMethodOptionsParam15Pix?)
      if pix.nil?
        return @pix = nil
      end
      @pix = pix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay Object to be assigned
    def promptpay=(promptpay : Stripe::PaymentMethodOptionsParam15Fpx?)
      if promptpay.nil?
        return @promptpay = nil
      end
      @promptpay = promptpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(sepa_debit : Stripe::UpdateParams1SepaDebit?)
      if sepa_debit.nil?
        return @sepa_debit = nil
      end
      @sepa_debit = sepa_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(sofort : Stripe::UpdateParams1Sofort?)
      if sofort.nil?
        return @sofort = nil
      end
      @sofort = sofort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(us_bank_account : Stripe::PaymentMethodOptionsParam15UsBankAccount?)
      if us_bank_account.nil?
        return @us_bank_account = nil
      end
      @us_bank_account = us_bank_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(wechat_pay : Stripe::UpdateParams1WechatPay?)
      if wechat_pay.nil?
        return @wechat_pay = nil
      end
      @wechat_pay = wechat_pay
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit, @affirm, @afterpay_clearpay, @alipay, @au_becs_debit, @bacs_debit, @bancontact, @blik, @boleto, @card, @card_present2, @customer_balance, @eps, @fpx, @giropay, @grabpay, @ideal, @interac_present, @klarna, @konbini, @link, @oxxo, @p24, @paynow, @pix, @promptpay, @sepa_debit, @sofort, @us_bank_account, @wechat_pay)
  end
end
