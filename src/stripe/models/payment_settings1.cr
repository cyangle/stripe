#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Configuration settings for the PaymentIntent that is generated when the invoice is finalized.
  class PaymentSettings1
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "default_mandate", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_mandate : String? = nil

    @[JSON::Field(key: "payment_method_options", type: Stripe::PaymentMethodOptions1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_options : Stripe::PaymentMethodOptions1? = nil

    @[JSON::Field(key: "payment_method_types", type: Stripe::PaymentSettingsPaymentMethodTypes?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_types : Stripe::PaymentSettingsPaymentMethodTypes? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @default_mandate : String? = nil,
      @payment_method_options : Stripe::PaymentMethodOptions1? = nil,
      @payment_method_types : Stripe::PaymentSettingsPaymentMethodTypes? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _default_mandate = @default_mandate
        if _default_mandate.to_s.size > 5000
          invalid_properties.push("invalid value for \"default_mandate\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model payment_method_options : Stripe::PaymentMethodOptions1?
      # This is a model payment_method_types : Stripe::PaymentSettingsPaymentMethodTypes?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _default_mandate = @default_mandate
        return false if _default_mandate.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_mandate Object to be assigned
    def default_mandate=(default_mandate : String?)
      if default_mandate.nil?
        return @default_mandate = nil
      end
      _default_mandate = default_mandate.not_nil!
      if _default_mandate.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_mandate\", the character length must be smaller than or equal to 5000.")
      end

      @default_mandate = default_mandate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(payment_method_options : Stripe::PaymentMethodOptions1?)
      if payment_method_options.nil?
        return @payment_method_options = nil
      end
      @payment_method_options = payment_method_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(payment_method_types : Stripe::PaymentSettingsPaymentMethodTypes?)
      if payment_method_types.nil?
        return @payment_method_types = nil
      end
      @payment_method_types = payment_method_types
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@default_mandate, @payment_method_options, @payment_method_types)
  end
end
