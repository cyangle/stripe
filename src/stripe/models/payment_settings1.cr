#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Payment settings to pass to invoices created by the subscription.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentSettings1
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "payment_method_options", type: PaymentMethodOptions1?, presence: true, ignore_serialize: payment_method_options.nil? && !payment_method_options_present?)]
    property payment_method_options : PaymentMethodOptions1?

    @[JSON::Field(ignore: true)]
    property? payment_method_options_present : Bool = false

    @[JSON::Field(key: "payment_method_types", type: PaymentSettingsPaymentMethodTypes?, presence: true, ignore_serialize: payment_method_types.nil? && !payment_method_types_present?)]
    property payment_method_types : PaymentSettingsPaymentMethodTypes?

    @[JSON::Field(ignore: true)]
    property? payment_method_types_present : Bool = false

    # Either `off`, or `on_subscription`. With `on_subscription` Stripe updates `subscription.default_payment_method` when a subscription payment succeeds.
    @[JSON::Field(key: "save_default_payment_method", type: String?, presence: true, ignore_serialize: save_default_payment_method.nil? && !save_default_payment_method_present?)]
    getter save_default_payment_method : String?

    @[JSON::Field(ignore: true)]
    property? save_default_payment_method_present : Bool = false

    ENUM_VALIDATOR_FOR_SAVE_DEFAULT_PAYMENT_METHOD = EnumValidator.new("save_default_payment_method", "String", ["off", "on_subscription"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @payment_method_options : PaymentMethodOptions1? = nil, @payment_method_types : PaymentSettingsPaymentMethodTypes? = nil, @save_default_payment_method : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_SAVE_DEFAULT_PAYMENT_METHOD.error_message) unless ENUM_VALIDATOR_FOR_SAVE_DEFAULT_PAYMENT_METHOD.valid?(@save_default_payment_method)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_SAVE_DEFAULT_PAYMENT_METHOD.valid?(@save_default_payment_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] save_default_payment_method Object to be assigned
    def save_default_payment_method=(save_default_payment_method)
      ENUM_VALIDATOR_FOR_SAVE_DEFAULT_PAYMENT_METHOD.valid!(save_default_payment_method)
      @save_default_payment_method = save_default_payment_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        payment_method_options == o.payment_method_options &&
        payment_method_types == o.payment_method_types &&
        save_default_payment_method == o.save_default_payment_method
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@payment_method_options, @payment_method_types, @save_default_payment_method)
  end
end
