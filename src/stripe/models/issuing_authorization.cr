#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization` object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the purchase to be completed successfully.  Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
  class IssuingAuthorization
    include NASON::Serializable

    # Required properties
    # The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Whether the authorization has been approved.
    @[NASON::Field(key: "approved", type: Bool)]
    property approved : Bool

    # How the card details were provided.
    @[NASON::Field(key: "authorization_method", type: String)]
    property authorization_method : String

    # List of balance transactions associated with this authorization.
    @[NASON::Field(key: "balance_transactions", type: Array(BalanceTransaction))]
    property balance_transactions : Array(BalanceTransaction)

    @[NASON::Field(key: "card", type: IssuingCard)]
    property card : IssuingCard

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[NASON::Field(key: "merchant_amount", type: Int64)]
    property merchant_amount : Int64

    # The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "merchant_currency", type: String)]
    property merchant_currency : String

    @[NASON::Field(key: "merchant_data", type: IssuingAuthorizationMerchantData)]
    property merchant_data : IssuingAuthorizationMerchantData

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
    @[NASON::Field(key: "request_history", type: Array(IssuingAuthorizationRequest))]
    property request_history : Array(IssuingAuthorizationRequest)

    # The current status of the authorization in its lifecycle.
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    @[NASON::Field(key: "transactions", type: Array(IssuingTransaction))]
    property transactions : Array(IssuingTransaction)

    @[NASON::Field(key: "verification_data", type: IssuingAuthorizationVerificationData)]
    property verification_data : IssuingAuthorizationVerificationData

    # Optional properties
    # Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[NASON::Field(key: "amount_details", type: IssuingAuthorizationAmountDetails? | Null, nillable: true)]
    property amount_details : IssuingAuthorizationAmountDetails? | Null

    # The cardholder to whom this authorization belongs.
    @[NASON::Field(key: "cardholder", type: String | IssuingCardholder? | Null, nillable: true)]
    property cardholder : String | IssuingCardholder? | Null

    # The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
    @[NASON::Field(key: "pending_request", type: IssuingAuthorizationPendingRequest? | Null, nillable: true)]
    property pending_request : IssuingAuthorizationPendingRequest? | Null

    # The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    @[NASON::Field(key: "wallet", type: String? | Null, nillable: true)]
    property wallet : String? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @approved : Bool, @authorization_method : String, @balance_transactions : Array(BalanceTransaction), @card : IssuingCard, @created : Int64, @currency : String, @id : String, @livemode : Bool, @merchant_amount : Int64, @merchant_currency : String, @merchant_data : IssuingAuthorizationMerchantData, @metadata : Hash(String, String), @object : String, @request_history : Array(IssuingAuthorizationRequest), @status : String, @transactions : Array(IssuingTransaction), @verification_data : IssuingAuthorizationVerificationData, @amount_details : IssuingAuthorizationAmountDetails? | Null = nil, @cardholder : String | IssuingCardholder? | Null = nil, @pending_request : IssuingAuthorizationPendingRequest? | Null = nil, @wallet : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@wallet.nil? && !@wallet.null? && @wallet.to_s.size > 5000
        invalid_properties.push("invalid value for \"wallet\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      authorization_method_validator = EnumAttributeValidator.new("String", ["chip", "contactless", "keyed_in", "online", "swipe"])
      return false unless authorization_method_validator.valid?(@authorization_method)
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["issuing.authorization"])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new("String", ["closed", "pending", "reversed"])
      return false unless status_validator.valid?(@status)
      return false if !@wallet.nil? && !@wallet.null? && @wallet.to_s.size > 5000
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_method Object to be assigned
    def authorization_method=(authorization_method)
      validator = EnumAttributeValidator.new("String", ["chip", "contactless", "keyed_in", "online", "swipe"])
      unless validator.valid?(authorization_method)
        raise ArgumentError.new("invalid value for \"authorization_method\", must be one of #{validator.allowable_values}.")
      end
      @authorization_method = authorization_method
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["issuing.authorization"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["closed", "pending", "reversed"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] wallet Value to be assigned
    def wallet=(wallet)
      if !wallet.nil? && !@wallet.null? && wallet.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"wallet\", the character length must be smaller than or equal to 5000.")
      end

      @wallet = wallet
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        amount_details == o.amount_details &&
        approved == o.approved &&
        authorization_method == o.authorization_method &&
        balance_transactions == o.balance_transactions &&
        card == o.card &&
        cardholder == o.cardholder &&
        created == o.created &&
        currency == o.currency &&
        id == o.id &&
        livemode == o.livemode &&
        merchant_amount == o.merchant_amount &&
        merchant_currency == o.merchant_currency &&
        merchant_data == o.merchant_data &&
        metadata == o.metadata &&
        object == o.object &&
        pending_request == o.pending_request &&
        request_history == o.request_history &&
        status == o.status &&
        transactions == o.transactions &&
        verification_data == o.verification_data &&
        wallet == o.wallet
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, amount_details, approved, authorization_method, balance_transactions, card, cardholder, created, currency, id, livemode, merchant_amount, merchant_currency, merchant_data, metadata, object, pending_request, request_history, status, transactions, verification_data, wallet].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
