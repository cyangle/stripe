#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./balance_transaction"
require "./issuing_authorization_amount_details"
require "./issuing_authorization_cardholder"
require "./issuing_authorization_fleet_data"
require "./issuing_authorization_fuel_data"
require "./issuing_authorization_merchant_data"
require "./issuing_authorization_network_data"
require "./issuing_authorization_pending_request"
require "./issuing_authorization_request"
require "./issuing_authorization_token"
require "./issuing_authorization_treasury"
require "./issuing_authorization_verification_data"
require "./issuing_card"
require "./issuing_transaction"

module Stripe
  # When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization` object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the purchase to be completed successfully.  Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
  class IssuingAuthorization
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    @[JSON::Field(key: "amount_details", type: Stripe::IssuingAuthorizationAmountDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_details : Stripe::IssuingAuthorizationAmountDetails? = nil

    # Whether the authorization has been approved.
    @[JSON::Field(key: "approved", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter approved : Bool? = nil

    # How the card details were provided.
    @[JSON::Field(key: "authorization_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter authorization_method : String? = nil
    ERROR_MESSAGE_FOR_AUTHORIZATION_METHOD = "invalid value for \"authorization_method\", must be one of [chip, contactless, keyed_in, online, swipe]."
    VALID_VALUES_FOR_AUTHORIZATION_METHOD  = String.static_array("chip", "contactless", "keyed_in", "online", "swipe")

    # List of balance transactions associated with this authorization.
    @[JSON::Field(key: "balance_transactions", type: Array(Stripe::BalanceTransaction)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter balance_transactions : Array(Stripe::BalanceTransaction)? = nil

    @[JSON::Field(key: "card", type: Stripe::IssuingCard?, default: nil, required: true, nullable: false, emit_null: false)]
    getter card : Stripe::IssuingCard? = nil

    @[JSON::Field(key: "cardholder", type: Stripe::IssuingAuthorizationCardholder?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cardholder : Stripe::IssuingAuthorizationCardholder? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    @[JSON::Field(key: "fleet", type: Stripe::IssuingAuthorizationFleetData?, default: nil, required: true, nullable: true, emit_null: true)]
    getter fleet : Stripe::IssuingAuthorizationFleetData? = nil

    @[JSON::Field(key: "fuel", type: Stripe::IssuingAuthorizationFuelData?, default: nil, required: true, nullable: true, emit_null: true)]
    getter fuel : Stripe::IssuingAuthorizationFuelData? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different.
    @[JSON::Field(key: "merchant_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter merchant_amount : Int64? = nil

    # The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "merchant_currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter merchant_currency : String? = nil

    @[JSON::Field(key: "merchant_data", type: Stripe::IssuingAuthorizationMerchantData?, default: nil, required: true, nullable: false, emit_null: false)]
    getter merchant_data : Stripe::IssuingAuthorizationMerchantData? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "network_data", type: Stripe::IssuingAuthorizationNetworkData?, default: nil, required: true, nullable: true, emit_null: true)]
    getter network_data : Stripe::IssuingAuthorizationNetworkData? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [issuing.authorization]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("issuing.authorization")

    @[JSON::Field(key: "pending_request", type: Stripe::IssuingAuthorizationPendingRequest?, default: nil, required: true, nullable: true, emit_null: true)]
    getter pending_request : Stripe::IssuingAuthorizationPendingRequest? = nil

    # History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
    @[JSON::Field(key: "request_history", type: Array(Stripe::IssuingAuthorizationRequest)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_history : Array(Stripe::IssuingAuthorizationRequest)? = nil

    # The current status of the authorization in its lifecycle.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [closed, pending, reversed]."
    VALID_VALUES_FOR_STATUS  = String.static_array("closed", "pending", "reversed")

    # List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    @[JSON::Field(key: "transactions", type: Array(Stripe::IssuingTransaction)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transactions : Array(Stripe::IssuingTransaction)? = nil

    @[JSON::Field(key: "verification_data", type: Stripe::IssuingAuthorizationVerificationData?, default: nil, required: true, nullable: false, emit_null: false)]
    getter verification_data : Stripe::IssuingAuthorizationVerificationData? = nil

    # The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
    @[JSON::Field(key: "wallet", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter wallet : String? = nil
    MAX_LENGTH_FOR_WALLET = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "token", type: Stripe::IssuingAuthorizationToken?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: token.nil? && !token_present?)]
    getter token : Stripe::IssuingAuthorizationToken? = nil

    @[JSON::Field(ignore: true)]
    property? token_present : Bool = false

    @[JSON::Field(key: "treasury", type: Stripe::IssuingAuthorizationTreasury?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: treasury.nil? && !treasury_present?)]
    getter treasury : Stripe::IssuingAuthorizationTreasury? = nil

    @[JSON::Field(ignore: true)]
    property? treasury_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_details : Stripe::IssuingAuthorizationAmountDetails? = nil,
      @approved : Bool? = nil,
      @authorization_method : String? = nil,
      @balance_transactions : Array(Stripe::BalanceTransaction)? = nil,
      @card : Stripe::IssuingCard? = nil,
      @cardholder : Stripe::IssuingAuthorizationCardholder? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @fleet : Stripe::IssuingAuthorizationFleetData? = nil,
      @fuel : Stripe::IssuingAuthorizationFuelData? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @merchant_amount : Int64? = nil,
      @merchant_currency : String? = nil,
      @merchant_data : Stripe::IssuingAuthorizationMerchantData? = nil,
      @metadata : Hash(String, String)? = nil,
      @network_data : Stripe::IssuingAuthorizationNetworkData? = nil,
      @object : String? = nil,
      @pending_request : Stripe::IssuingAuthorizationPendingRequest? = nil,
      @request_history : Array(Stripe::IssuingAuthorizationRequest)? = nil,
      @status : String? = nil,
      @transactions : Array(Stripe::IssuingTransaction)? = nil,
      @verification_data : Stripe::IssuingAuthorizationVerificationData? = nil,
      @wallet : String? = nil,
      # Optional properties
      @token : Stripe::IssuingAuthorizationToken? = nil,
      @treasury : Stripe::IssuingAuthorizationTreasury? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount_details = @amount_details).nil?
        invalid_properties.concat(_amount_details.list_invalid_properties_for("amount_details")) if _amount_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"approved\" is required and cannot be null") if @approved.nil?

      invalid_properties.push("\"authorization_method\" is required and cannot be null") if @authorization_method.nil?

      unless (_authorization_method = @authorization_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_AUTHORIZATION_METHOD) unless OpenApi::EnumValidator.valid?(_authorization_method, VALID_VALUES_FOR_AUTHORIZATION_METHOD)
      end
      invalid_properties.push("\"balance_transactions\" is required and cannot be null") if @balance_transactions.nil?

      unless (_balance_transactions = @balance_transactions).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "balance_transactions", container: _balance_transactions)) if _balance_transactions.is_a?(Array)
      end
      invalid_properties.push("\"card\" is required and cannot be null") if @card.nil?

      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      unless (_cardholder = @cardholder).nil?
        invalid_properties.concat(_cardholder.list_invalid_properties_for("cardholder")) if _cardholder.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_fleet = @fleet).nil?
        invalid_properties.concat(_fleet.list_invalid_properties_for("fleet")) if _fleet.is_a?(OpenApi::Validatable)
      end
      unless (_fuel = @fuel).nil?
        invalid_properties.concat(_fuel.list_invalid_properties_for("fuel")) if _fuel.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"merchant_amount\" is required and cannot be null") if @merchant_amount.nil?

      invalid_properties.push("\"merchant_currency\" is required and cannot be null") if @merchant_currency.nil?

      invalid_properties.push("\"merchant_data\" is required and cannot be null") if @merchant_data.nil?

      unless (_merchant_data = @merchant_data).nil?
        invalid_properties.concat(_merchant_data.list_invalid_properties_for("merchant_data")) if _merchant_data.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      unless (_network_data = @network_data).nil?
        invalid_properties.concat(_network_data.list_invalid_properties_for("network_data")) if _network_data.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_pending_request = @pending_request).nil?
        invalid_properties.concat(_pending_request.list_invalid_properties_for("pending_request")) if _pending_request.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"request_history\" is required and cannot be null") if @request_history.nil?

      unless (_request_history = @request_history).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "request_history", container: _request_history)) if _request_history.is_a?(Array)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"transactions\" is required and cannot be null") if @transactions.nil?

      unless (_transactions = @transactions).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "transactions", container: _transactions)) if _transactions.is_a?(Array)
      end
      invalid_properties.push("\"verification_data\" is required and cannot be null") if @verification_data.nil?

      unless (_verification_data = @verification_data).nil?
        invalid_properties.concat(_verification_data.list_invalid_properties_for("verification_data")) if _verification_data.is_a?(OpenApi::Validatable)
      end
      unless (_wallet = @wallet).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("wallet", _wallet.to_s.size, MAX_LENGTH_FOR_WALLET)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_token = @token).nil?
        invalid_properties.concat(_token.list_invalid_properties_for("token")) if _token.is_a?(OpenApi::Validatable)
      end
      unless (_treasury = @treasury).nil?
        invalid_properties.concat(_treasury.list_invalid_properties_for("treasury")) if _treasury.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      unless (_amount_details = @amount_details).nil?
        return false if _amount_details.is_a?(OpenApi::Validatable) && !_amount_details.valid?
      end

      return false if @approved.nil?

      return false if @authorization_method.nil?
      unless (_authorization_method = @authorization_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_authorization_method, VALID_VALUES_FOR_AUTHORIZATION_METHOD)
      end

      return false if @balance_transactions.nil?
      unless (_balance_transactions = @balance_transactions).nil?
        return false if _balance_transactions.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _balance_transactions)
      end

      return false if @card.nil?
      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      unless (_cardholder = @cardholder).nil?
        return false if _cardholder.is_a?(OpenApi::Validatable) && !_cardholder.valid?
      end

      return false if @created.nil?

      return false if @currency.nil?

      unless (_fleet = @fleet).nil?
        return false if _fleet.is_a?(OpenApi::Validatable) && !_fleet.valid?
      end

      unless (_fuel = @fuel).nil?
        return false if _fuel.is_a?(OpenApi::Validatable) && !_fuel.valid?
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @merchant_amount.nil?

      return false if @merchant_currency.nil?

      return false if @merchant_data.nil?
      unless (_merchant_data = @merchant_data).nil?
        return false if _merchant_data.is_a?(OpenApi::Validatable) && !_merchant_data.valid?
      end

      return false if @metadata.nil?

      unless (_network_data = @network_data).nil?
        return false if _network_data.is_a?(OpenApi::Validatable) && !_network_data.valid?
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_pending_request = @pending_request).nil?
        return false if _pending_request.is_a?(OpenApi::Validatable) && !_pending_request.valid?
      end

      return false if @request_history.nil?
      unless (_request_history = @request_history).nil?
        return false if _request_history.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _request_history)
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @transactions.nil?
      unless (_transactions = @transactions).nil?
        return false if _transactions.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _transactions)
      end

      return false if @verification_data.nil?
      unless (_verification_data = @verification_data).nil?
        return false if _verification_data.is_a?(OpenApi::Validatable) && !_verification_data.valid?
      end

      unless (_wallet = @wallet).nil?
        return false if _wallet.to_s.size > MAX_LENGTH_FOR_WALLET
      end

      unless (_token = @token).nil?
        return false if _token.is_a?(OpenApi::Validatable) && !_token.valid?
      end

      unless (_treasury = @treasury).nil?
        return false if _treasury.is_a?(OpenApi::Validatable) && !_treasury.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_details Object to be assigned
    def amount_details=(new_value : Stripe::IssuingAuthorizationAmountDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amount_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] approved Object to be assigned
    def approved=(new_value : Bool?)
      raise ArgumentError.new("\"approved\" is required and cannot be null") if new_value.nil?

      @approved = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_method Object to be assigned
    def authorization_method=(new_value : String?)
      raise ArgumentError.new("\"authorization_method\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("authorization_method", new_value, VALID_VALUES_FOR_AUTHORIZATION_METHOD)
      end

      @authorization_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_transactions Object to be assigned
    def balance_transactions=(new_value : Array(Stripe::BalanceTransaction)?)
      raise ArgumentError.new("\"balance_transactions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @balance_transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : Stripe::IssuingCard?)
      raise ArgumentError.new("\"card\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cardholder Object to be assigned
    def cardholder=(new_value : Stripe::IssuingAuthorizationCardholder?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cardholder = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fleet Object to be assigned
    def fleet=(new_value : Stripe::IssuingAuthorizationFleetData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fleet = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fuel Object to be assigned
    def fuel=(new_value : Stripe::IssuingAuthorizationFuelData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fuel = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_amount Object to be assigned
    def merchant_amount=(new_value : Int64?)
      raise ArgumentError.new("\"merchant_amount\" is required and cannot be null") if new_value.nil?

      @merchant_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_currency Object to be assigned
    def merchant_currency=(new_value : String?)
      raise ArgumentError.new("\"merchant_currency\" is required and cannot be null") if new_value.nil?

      @merchant_currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_data Object to be assigned
    def merchant_data=(new_value : Stripe::IssuingAuthorizationMerchantData?)
      raise ArgumentError.new("\"merchant_data\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @merchant_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"metadata\" is required and cannot be null") if new_value.nil?

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_data Object to be assigned
    def network_data=(new_value : Stripe::IssuingAuthorizationNetworkData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @network_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending_request Object to be assigned
    def pending_request=(new_value : Stripe::IssuingAuthorizationPendingRequest?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pending_request = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_history Object to be assigned
    def request_history=(new_value : Array(Stripe::IssuingAuthorizationRequest)?)
      raise ArgumentError.new("\"request_history\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @request_history = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions Object to be assigned
    def transactions=(new_value : Array(Stripe::IssuingTransaction)?)
      raise ArgumentError.new("\"transactions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_data Object to be assigned
    def verification_data=(new_value : Stripe::IssuingAuthorizationVerificationData?)
      raise ArgumentError.new("\"verification_data\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @verification_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet Object to be assigned
    def wallet=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("wallet", new_value.to_s.size, MAX_LENGTH_FOR_WALLET)
      end

      @wallet = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] token Object to be assigned
    def token=(new_value : Stripe::IssuingAuthorizationToken?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treasury Object to be assigned
    def treasury=(new_value : Stripe::IssuingAuthorizationTreasury?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @treasury = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_details, @approved, @authorization_method, @balance_transactions, @card, @cardholder, @created, @currency, @fleet, @fuel, @id, @livemode, @merchant_amount, @merchant_currency, @merchant_data, @metadata, @network_data, @object, @pending_request, @request_history, @status, @transactions, @verification_data, @wallet, @token, @token_present, @treasury, @treasury_present)
  end
end
