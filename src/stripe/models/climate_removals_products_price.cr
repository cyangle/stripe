#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class ClimateRemovalsProductsPrice
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Fees for one metric ton of carbon removal in the currency's smallest unit.
    @[JSON::Field(key: "amount_fees", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_fees : Int64? = nil

    # Subtotal for one metric ton of carbon removal (excluding fees) in the currency's smallest unit.
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_subtotal : Int64? = nil

    # Total for one metric ton of carbon removal (including fees) in the currency's smallest unit.
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_total : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_fees : Int64? = nil,
      @amount_subtotal : Int64? = nil,
      @amount_total : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount_fees\" is required and cannot be null") if @amount_fees.nil?

      invalid_properties.push("\"amount_subtotal\" is required and cannot be null") if @amount_subtotal.nil?

      invalid_properties.push("\"amount_total\" is required and cannot be null") if @amount_total.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount_fees.nil?

      return false if @amount_subtotal.nil?

      return false if @amount_total.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_fees Object to be assigned
    def amount_fees=(new_value : Int64?)
      raise ArgumentError.new("\"amount_fees\" is required and cannot be null") if new_value.nil?

      @amount_fees = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(new_value : Int64?)
      raise ArgumentError.new("\"amount_subtotal\" is required and cannot be null") if new_value.nil?

      @amount_subtotal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(new_value : Int64?)
      raise ArgumentError.new("\"amount_total\" is required and cannot be null") if new_value.nil?

      @amount_total = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_fees, @amount_subtotal, @amount_total)
  end
end
