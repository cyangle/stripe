#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostQuotesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "application_fee_amount", type: Stripe::PostQuotesRequestApplicationFeeAmount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil

    @[JSON::Field(key: "application_fee_percent", type: Stripe::PostQuotesRequestApplicationFeePercent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTaxParam2?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTaxParam2? = nil

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter collection_method : String? = nil

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    # The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil

    @[JSON::Field(key: "default_tax_rates", type: Stripe::PostQuotesRequestDefaultTaxRates?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil

    # A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "discounts", type: Stripe::PostQuotesRequestDiscounts?, default: nil, required: false, nullable: false, emit_null: false)]
    getter discounts : Stripe::PostQuotesRequestDiscounts? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
    @[JSON::Field(key: "expires_at", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expires_at : Int64? = nil

    # A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
    @[JSON::Field(key: "footer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter footer : String? = nil

    @[JSON::Field(key: "from_quote", type: Stripe::FromQuoteParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter from_quote : Stripe::FromQuoteParams? = nil

    # A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
    @[JSON::Field(key: "header", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter header : String? = nil

    @[JSON::Field(key: "invoice_settings", type: Stripe::QuoteParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_settings : Stripe::QuoteParam? = nil

    # A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    @[JSON::Field(key: "line_items", type: Array(Stripe::LineItemCreateParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter line_items : Array(Stripe::LineItemCreateParams)? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "on_behalf_of", type: Stripe::PostQuotesRequestOnBehalfOf?, default: nil, required: false, nullable: false, emit_null: false)]
    getter on_behalf_of : Stripe::PostQuotesRequestOnBehalfOf? = nil

    @[JSON::Field(key: "subscription_data", type: Stripe::SubscriptionDataCreateParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_data : Stripe::SubscriptionDataCreateParams? = nil

    # ID of the test clock to attach to the quote.
    @[JSON::Field(key: "test_clock", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter test_clock : String? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::PostQuotesRequestTransferData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfer_data : Stripe::PostQuotesRequestTransferData? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount? = nil,
      @application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent? = nil,
      @automatic_tax : Stripe::AutomaticTaxParam2? = nil,
      @collection_method : String? = nil,
      @customer : String? = nil,
      @default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates? = nil,
      @description : String? = nil,
      @discounts : Stripe::PostQuotesRequestDiscounts? = nil,
      @expand : Array(String)? = nil,
      @expires_at : Int64? = nil,
      @footer : String? = nil,
      @from_quote : Stripe::FromQuoteParams? = nil,
      @header : String? = nil,
      @invoice_settings : Stripe::QuoteParam? = nil,
      @line_items : Array(Stripe::LineItemCreateParams)? = nil,
      @metadata : Hash(String, String)? = nil,
      @on_behalf_of : Stripe::PostQuotesRequestOnBehalfOf? = nil,
      @subscription_data : Stripe::SubscriptionDataCreateParams? = nil,
      @test_clock : String? = nil,
      @transfer_data : Stripe::PostQuotesRequestTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount?
      # This is a model application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent?
      # This is a model automatic_tax : Stripe::AutomaticTaxParam2?

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      if _customer = @customer
        if _customer.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates?
      if _description = @description
        if _description.to_s.size > 500
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 500.")
        end
      end
      # This is a model discounts : Stripe::PostQuotesRequestDiscounts?
      if _footer = @footer
        if _footer.to_s.size > 500
          invalid_properties.push("invalid value for \"footer\", the character length must be smaller than or equal to 500.")
        end
      end
      # This is a model from_quote : Stripe::FromQuoteParams?
      if _header = @header
        if _header.to_s.size > 50
          invalid_properties.push("invalid value for \"header\", the character length must be smaller than or equal to 50.")
        end
      end
      # This is a model invoice_settings : Stripe::QuoteParam?
      # Container line_items array has values of Stripe::LineItemCreateParams
      # This is a model on_behalf_of : Stripe::PostQuotesRequestOnBehalfOf?
      # This is a model subscription_data : Stripe::SubscriptionDataCreateParams?
      if _test_clock = @test_clock
        if _test_clock.to_s.size > 5000
          invalid_properties.push("invalid value for \"test_clock\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model transfer_data : Stripe::PostQuotesRequestTransferData?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      if _customer = @customer
        return false if _customer.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 500
      end
      if _footer = @footer
        return false if _footer.to_s.size > 500
      end
      if _header = @header
        return false if _header.to_s.size > 50
      end
      if _test_clock = @test_clock
        return false if _test_clock.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_amount Object to be assigned
    def application_fee_amount=(application_fee_amount : Stripe::PostQuotesRequestApplicationFeeAmount?)
      if application_fee_amount.nil?
        return @application_fee_amount = nil
      end
      @application_fee_amount = application_fee_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_percent Object to be assigned
    def application_fee_percent=(application_fee_percent : Stripe::PostQuotesRequestApplicationFeePercent?)
      if application_fee_percent.nil?
        return @application_fee_percent = nil
      end
      @application_fee_percent = application_fee_percent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::AutomaticTaxParam2?)
      if automatic_tax.nil?
        return @automatic_tax = nil
      end
      @automatic_tax = automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method : String?)
      if collection_method.nil?
        return @collection_method = nil
      end
      _collection_method = collection_method.not_nil!
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(_collection_method)
      @collection_method = collection_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      if _customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_tax_rates Object to be assigned
    def default_tax_rates=(default_tax_rates : Stripe::PostQuotesRequestDefaultTaxRates?)
      if default_tax_rates.nil?
        return @default_tax_rates = nil
      end
      @default_tax_rates = default_tax_rates
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 500
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 500.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(discounts : Stripe::PostQuotesRequestDiscounts?)
      if discounts.nil?
        return @discounts = nil
      end
      @discounts = discounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_at Object to be assigned
    def expires_at=(expires_at : Int64?)
      if expires_at.nil?
        return @expires_at = nil
      end
      @expires_at = expires_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] footer Object to be assigned
    def footer=(footer : String?)
      if footer.nil?
        return @footer = nil
      end
      _footer = footer.not_nil!
      if _footer.to_s.size > 500
        raise ArgumentError.new("invalid value for \"footer\", the character length must be smaller than or equal to 500.")
      end

      @footer = footer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] from_quote Object to be assigned
    def from_quote=(from_quote : Stripe::FromQuoteParams?)
      if from_quote.nil?
        return @from_quote = nil
      end
      @from_quote = from_quote
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] header Object to be assigned
    def header=(header : String?)
      if header.nil?
        return @header = nil
      end
      _header = header.not_nil!
      if _header.to_s.size > 50
        raise ArgumentError.new("invalid value for \"header\", the character length must be smaller than or equal to 50.")
      end

      @header = header
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_settings Object to be assigned
    def invoice_settings=(invoice_settings : Stripe::QuoteParam?)
      if invoice_settings.nil?
        return @invoice_settings = nil
      end
      @invoice_settings = invoice_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(line_items : Array(Stripe::LineItemCreateParams)?)
      if line_items.nil?
        return @line_items = nil
      end
      @line_items = line_items
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(on_behalf_of : Stripe::PostQuotesRequestOnBehalfOf?)
      if on_behalf_of.nil?
        return @on_behalf_of = nil
      end
      @on_behalf_of = on_behalf_of
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_data Object to be assigned
    def subscription_data=(subscription_data : Stripe::SubscriptionDataCreateParams?)
      if subscription_data.nil?
        return @subscription_data = nil
      end
      @subscription_data = subscription_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock Object to be assigned
    def test_clock=(test_clock : String?)
      if test_clock.nil?
        return @test_clock = nil
      end
      _test_clock = test_clock.not_nil!
      if _test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\", the character length must be smaller than or equal to 5000.")
      end

      @test_clock = test_clock
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(transfer_data : Stripe::PostQuotesRequestTransferData?)
      if transfer_data.nil?
        return @transfer_data = nil
      end
      @transfer_data = transfer_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@application_fee_amount, @application_fee_percent, @automatic_tax, @collection_method, @customer, @default_tax_rates, @description, @discounts, @expand, @expires_at, @footer, @from_quote, @header, @invoice_settings, @line_items, @metadata, @on_behalf_of, @subscription_data, @test_clock, @transfer_data)
  end
end
