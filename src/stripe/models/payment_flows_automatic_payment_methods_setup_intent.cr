#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class PaymentFlowsAutomaticPaymentMethodsSetupIntent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Automatically calculates compatible payment methods
    @[JSON::Field(key: "enabled", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter enabled : Bool? = nil

    # End of Required Properties

    # Optional Properties

    # Controls whether this SetupIntent will accept redirect-based payment methods.  Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup.
    @[JSON::Field(key: "allow_redirects", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter allow_redirects : String? = nil
    ERROR_MESSAGE_FOR_ALLOW_REDIRECTS = "invalid value for \"allow_redirects\", must be one of [always, never]."
    VALID_VALUES_FOR_ALLOW_REDIRECTS  = String.static_array("always", "never")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @enabled : Bool? = nil,
      # Optional properties
      @allow_redirects : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_allow_redirects = @allow_redirects).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ALLOW_REDIRECTS) unless OpenApi::EnumValidator.valid?(_allow_redirects, VALID_VALUES_FOR_ALLOW_REDIRECTS)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_allow_redirects = @allow_redirects).nil?
        return false unless OpenApi::EnumValidator.valid?(_allow_redirects, VALID_VALUES_FOR_ALLOW_REDIRECTS)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enabled Object to be assigned
    def enabled=(new_value : Bool?)
      @enabled = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_redirects Object to be assigned
    def allow_redirects=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("allow_redirects", new_value, VALID_VALUES_FOR_ALLOW_REDIRECTS)
      end

      @allow_redirects = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@enabled, @allow_redirects)
  end
end
