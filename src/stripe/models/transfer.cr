#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A `Transfer` object is created when you move funds between Stripe accounts as part of Connect.  Before April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://stripe.com/docs/transfer-payout-split).  Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Transfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Amount in %s to be transferred.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
    @[JSON::Field(key: "amount_reversed", type: Int64)]
    property amount_reversed : Int64

    # Time that this record of the transfer was first created.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["transfer"])

    @[JSON::Field(key: "reversals", type: TransferReversalList1)]
    property reversals : TransferReversalList1

    # Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
    @[JSON::Field(key: "reversed", type: Bool)]
    property reversed : Bool

    # Optional properties

    @[JSON::Field(key: "balance_transaction", type: TransferBalanceTransaction?, presence: true, ignore_serialize: balance_transaction.nil? && !balance_transaction_present?)]
    property balance_transaction : TransferBalanceTransaction?

    @[JSON::Field(ignore: true)]
    property? balance_transaction_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "destination", type: TransferDestination?, presence: true, ignore_serialize: destination.nil? && !destination_present?)]
    property destination : TransferDestination?

    @[JSON::Field(ignore: true)]
    property? destination_present : Bool = false

    @[JSON::Field(key: "destination_payment", type: TransferDestinationPayment?, presence: true, ignore_serialize: destination_payment.nil? && !destination_payment_present?)]
    property destination_payment : TransferDestinationPayment?

    @[JSON::Field(ignore: true)]
    property? destination_payment_present : Bool = false

    @[JSON::Field(key: "source_transaction", type: TransferSourceTransaction?, presence: true, ignore_serialize: source_transaction.nil? && !source_transaction_present?)]
    property source_transaction : TransferSourceTransaction?

    @[JSON::Field(ignore: true)]
    property? source_transaction_present : Bool = false

    # The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
    @[JSON::Field(key: "source_type", type: String?, presence: true, ignore_serialize: source_type.nil? && !source_type_present?)]
    getter source_type : String?

    @[JSON::Field(ignore: true)]
    property? source_type_present : Bool = false

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    @[JSON::Field(key: "transfer_group", type: String?, presence: true, ignore_serialize: transfer_group.nil? && !transfer_group_present?)]
    getter transfer_group : String?

    @[JSON::Field(ignore: true)]
    property? transfer_group_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @amount : Int64, 
      @amount_reversed : Int64, 
      @created : Int64, 
      @currency : String, 
      @id : String, 
      @livemode : Bool, 
      @metadata : Hash(String, String), 
      @object : String, 
      @reversals : TransferReversalList1, 
      @reversed : Bool, 
      # Optional properties
      @balance_transaction : TransferBalanceTransaction? = nil, 
      @description : String? = nil, 
      @destination : TransferDestination? = nil, 
      @destination_payment : TransferDestinationPayment? = nil, 
      @source_transaction : TransferSourceTransaction? = nil, 
      @source_type : String? = nil, 
      @transfer_group : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@source_type.nil? && @source_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      if !@transfer_group.nil? && @transfer_group.to_s.size > 5000
        invalid_properties.push("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@source_type.nil? && @source_type.to_s.size > 5000
      return false if !@transfer_group.nil? && @transfer_group.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] source_type Value to be assigned
    def source_type=(source_type)
      if !source_type.nil? && source_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      @source_type = source_type
    end

    # Custom attribute writer method with validation
    # @param [Object] transfer_group Value to be assigned
    def transfer_group=(transfer_group)
      if !transfer_group.nil? && transfer_group.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      @transfer_group = transfer_group
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_reversed, @created, @currency, @id, @livemode, @metadata, @object, @reversals, @reversed, @balance_transaction, @description, @destination, @destination_payment, @source_transaction, @source_type, @transfer_group)
  end
end
