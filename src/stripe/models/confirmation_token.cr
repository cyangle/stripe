#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./confirmation_tokens_resource_mandate_data"
require "./confirmation_tokens_resource_payment_method_options"
require "./confirmation_tokens_resource_payment_method_preview"
require "./confirmation_tokens_resource_shipping"

module Stripe
  # ConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.  To learn more about how to use ConfirmationToken, visit the related guides: - [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server) - [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).
  class ConfirmationToken
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent.
    @[JSON::Field(key: "expires_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter expires_at : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [confirmation_token]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("confirmation_token")

    # ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.
    @[JSON::Field(key: "payment_intent", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_intent : String? = nil
    MAX_LENGTH_FOR_PAYMENT_INTENT = 5000

    @[JSON::Field(key: "payment_method_options", type: Stripe::ConfirmationTokensResourcePaymentMethodOptions?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method_options : Stripe::ConfirmationTokensResourcePaymentMethodOptions? = nil

    @[JSON::Field(key: "payment_method_preview", type: Stripe::ConfirmationTokensResourcePaymentMethodPreview?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method_preview : Stripe::ConfirmationTokensResourcePaymentMethodPreview? = nil

    # Return URL used to confirm the Intent.
    @[JSON::Field(key: "return_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter return_url : String? = nil
    MAX_LENGTH_FOR_RETURN_URL = 5000

    # Indicates that you intend to make future payments with this ConfirmationToken's payment method.  The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
    @[JSON::Field(key: "setup_future_usage", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter setup_future_usage : String? = nil
    ERROR_MESSAGE_FOR_SETUP_FUTURE_USAGE = "invalid value for \"setup_future_usage\", must be one of [off_session, on_session]."
    VALID_VALUES_FOR_SETUP_FUTURE_USAGE  = String.static_array("off_session", "on_session")

    # ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.
    @[JSON::Field(key: "setup_intent", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter setup_intent : String? = nil
    MAX_LENGTH_FOR_SETUP_INTENT = 5000

    @[JSON::Field(key: "shipping", type: Stripe::ConfirmationTokensResourceShipping?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping : Stripe::ConfirmationTokensResourceShipping? = nil

    # Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken.
    @[JSON::Field(key: "use_stripe_sdk", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter use_stripe_sdk : Bool? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "mandate_data", type: Stripe::ConfirmationTokensResourceMandateData?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: mandate_data.nil? && !mandate_data_present?)]
    getter mandate_data : Stripe::ConfirmationTokensResourceMandateData? = nil

    @[JSON::Field(ignore: true)]
    property? mandate_data_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @expires_at : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @payment_intent : String? = nil,
      @payment_method_options : Stripe::ConfirmationTokensResourcePaymentMethodOptions? = nil,
      @payment_method_preview : Stripe::ConfirmationTokensResourcePaymentMethodPreview? = nil,
      @return_url : String? = nil,
      @setup_future_usage : String? = nil,
      @setup_intent : String? = nil,
      @shipping : Stripe::ConfirmationTokensResourceShipping? = nil,
      @use_stripe_sdk : Bool? = nil,
      # Optional properties
      @mandate_data : Stripe::ConfirmationTokensResourceMandateData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_payment_intent = @payment_intent).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_intent", _payment_intent.to_s.size, MAX_LENGTH_FOR_PAYMENT_INTENT)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_payment_method_options = @payment_method_options).nil?
        invalid_properties.concat(_payment_method_options.list_invalid_properties_for("payment_method_options")) if _payment_method_options.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_preview = @payment_method_preview).nil?
        invalid_properties.concat(_payment_method_preview.list_invalid_properties_for("payment_method_preview")) if _payment_method_preview.is_a?(OpenApi::Validatable)
      end
      unless (_return_url = @return_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("return_url", _return_url.to_s.size, MAX_LENGTH_FOR_RETURN_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_setup_future_usage = @setup_future_usage).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SETUP_FUTURE_USAGE) unless OpenApi::EnumValidator.valid?(_setup_future_usage, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end
      unless (_setup_intent = @setup_intent).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("setup_intent", _setup_intent.to_s.size, MAX_LENGTH_FOR_SETUP_INTENT)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_shipping = @shipping).nil?
        invalid_properties.concat(_shipping.list_invalid_properties_for("shipping")) if _shipping.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"use_stripe_sdk\" is required and cannot be null") if @use_stripe_sdk.nil?

      unless (_mandate_data = @mandate_data).nil?
        invalid_properties.concat(_mandate_data.list_invalid_properties_for("mandate_data")) if _mandate_data.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.to_s.size > MAX_LENGTH_FOR_PAYMENT_INTENT
      end

      unless (_payment_method_options = @payment_method_options).nil?
        return false if _payment_method_options.is_a?(OpenApi::Validatable) && !_payment_method_options.valid?
      end

      unless (_payment_method_preview = @payment_method_preview).nil?
        return false if _payment_method_preview.is_a?(OpenApi::Validatable) && !_payment_method_preview.valid?
      end

      unless (_return_url = @return_url).nil?
        return false if _return_url.to_s.size > MAX_LENGTH_FOR_RETURN_URL
      end

      unless (_setup_future_usage = @setup_future_usage).nil?
        return false unless OpenApi::EnumValidator.valid?(_setup_future_usage, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end

      unless (_setup_intent = @setup_intent).nil?
        return false if _setup_intent.to_s.size > MAX_LENGTH_FOR_SETUP_INTENT
      end

      unless (_shipping = @shipping).nil?
        return false if _shipping.is_a?(OpenApi::Validatable) && !_shipping.valid?
      end

      return false if @use_stripe_sdk.nil?

      unless (_mandate_data = @mandate_data).nil?
        return false if _mandate_data.is_a?(OpenApi::Validatable) && !_mandate_data.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_at Object to be assigned
    def expires_at=(new_value : Int64?)
      @expires_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("payment_intent", new_value.to_s.size, MAX_LENGTH_FOR_PAYMENT_INTENT)
      end

      @payment_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(new_value : Stripe::ConfirmationTokensResourcePaymentMethodOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_preview Object to be assigned
    def payment_method_preview=(new_value : Stripe::ConfirmationTokensResourcePaymentMethodPreview?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_preview = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_url Object to be assigned
    def return_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("return_url", new_value.to_s.size, MAX_LENGTH_FOR_RETURN_URL)
      end

      @return_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("setup_future_usage", new_value, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end

      @setup_future_usage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_intent Object to be assigned
    def setup_intent=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("setup_intent", new_value.to_s.size, MAX_LENGTH_FOR_SETUP_INTENT)
      end

      @setup_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping Object to be assigned
    def shipping=(new_value : Stripe::ConfirmationTokensResourceShipping?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] use_stripe_sdk Object to be assigned
    def use_stripe_sdk=(new_value : Bool?)
      raise ArgumentError.new("\"use_stripe_sdk\" is required and cannot be null") if new_value.nil?

      @use_stripe_sdk = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate_data Object to be assigned
    def mandate_data=(new_value : Stripe::ConfirmationTokensResourceMandateData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mandate_data = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @expires_at, @id, @livemode, @object, @payment_intent, @payment_method_options, @payment_method_preview, @return_url, @setup_future_usage, @setup_intent, @shipping, @use_stripe_sdk, @mandate_data, @mandate_data_present)
  end
end
