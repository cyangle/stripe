#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./automatic_tax"
require "./connect_account_reference"
require "./discounts_resource_discount_amount"
require "./invoice_account_tax_ids_inner"
require "./invoice_application"
require "./invoice_charge"
require "./invoice_customer"
require "./invoice_customer_address"
require "./invoice_customer_shipping"
require "./invoice_default_payment_method"
require "./invoice_default_source"
require "./invoice_discount"
require "./invoice_discounts_inner"
require "./invoice_from_invoice"
require "./invoice_last_finalization_error"
require "./invoice_latest_revision"
require "./invoice_lines_list"
require "./invoice_on_behalf_of"
require "./invoice_payment_intent"
require "./invoice_quote"
require "./invoice_rendering"
require "./invoice_setting_custom_field"
require "./invoice_shipping_cost"
require "./invoice_shipping_details"
require "./invoice_subscription"
require "./invoice_subscription_details"
require "./invoice_tax_amount"
require "./invoice_test_clock"
require "./invoice_threshold_reason"
require "./invoice_transfer_data1"
require "./invoices_payment_settings"
require "./invoices_resource_invoice_tax_id"
require "./invoices_resource_status_transitions"
require "./tax_rate"

module Stripe
  # Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.  They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).  If your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.  If your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.  Stripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer's credit balance which is applied to the next invoice.  More details on the customer's credit balance are [here](https://stripe.com/docs/billing/customer/balance).  Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
  class Invoice
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The country of the business associated with this invoice, most often the business creating the invoice.
    @[JSON::Field(key: "account_country", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_country : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_COUNTRY = 5000

    # The public name of the business associated with this invoice, most often the business creating the invoice.
    @[JSON::Field(key: "account_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_name : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_NAME = 5000

    # The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
    @[JSON::Field(key: "account_tax_ids", type: Array(Stripe::InvoiceAccountTaxIdsInner)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_tax_ids : Array(Stripe::InvoiceAccountTaxIdsInner)? = nil

    # Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
    @[JSON::Field(key: "amount_due", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_due : Int64? = nil

    # The amount, in cents (or local equivalent), that was paid.
    @[JSON::Field(key: "amount_paid", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_paid : Int64? = nil

    # The difference between amount_due and amount_paid, in cents (or local equivalent).
    @[JSON::Field(key: "amount_remaining", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_remaining : Int64? = nil

    # This is the sum of all the shipping amounts.
    @[JSON::Field(key: "amount_shipping", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_shipping : Int64? = nil

    @[JSON::Field(key: "application", type: Stripe::InvoiceApplication?, default: nil, required: true, nullable: true, emit_null: true)]
    getter application : Stripe::InvoiceApplication? = nil

    # The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter application_fee_amount : Int64? = nil

    # Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained.
    @[JSON::Field(key: "attempt_count", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter attempt_count : Int64? = nil

    # Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
    @[JSON::Field(key: "attempted", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter attempted : Bool? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTax?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTax? = nil

    # Indicates the reason why the invoice was created.  * `manual`: Unrelated to a subscription, for example, created via the invoice editor. * `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds. * `subscription_create`: A new subscription was created. * `subscription_cycle`: A subscription advanced into a new period. * `subscription_threshold`: A subscription reached a billing threshold. * `subscription_update`: A subscription was updated. * `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
    @[JSON::Field(key: "billing_reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter billing_reason : String? = nil
    ERROR_MESSAGE_FOR_BILLING_REASON = "invalid value for \"billing_reason\", must be one of [automatic_pending_invoice_item_invoice, manual, quote_accept, subscription, subscription_create, subscription_cycle, subscription_threshold, subscription_update, upcoming]."
    VALID_VALUES_FOR_BILLING_REASON  = String.static_array("automatic_pending_invoice_item_invoice", "manual", "quote_accept", "subscription", "subscription_create", "subscription_cycle", "subscription_threshold", "subscription_update", "upcoming")

    @[JSON::Field(key: "charge", type: Stripe::InvoiceCharge?, default: nil, required: true, nullable: true, emit_null: true)]
    getter charge : Stripe::InvoiceCharge? = nil

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter collection_method : String? = nil
    ERROR_MESSAGE_FOR_COLLECTION_METHOD = "invalid value for \"collection_method\", must be one of [charge_automatically, send_invoice]."
    VALID_VALUES_FOR_COLLECTION_METHOD  = String.static_array("charge_automatically", "send_invoice")

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Custom fields displayed on the invoice.
    @[JSON::Field(key: "custom_fields", type: Array(Stripe::InvoiceSettingCustomField)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter custom_fields : Array(Stripe::InvoiceSettingCustomField)? = nil

    @[JSON::Field(key: "customer", type: Stripe::InvoiceCustomer?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer : Stripe::InvoiceCustomer? = nil

    @[JSON::Field(key: "customer_address", type: Stripe::InvoiceCustomerAddress?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_address : Stripe::InvoiceCustomerAddress? = nil

    # The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_email", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_email : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_EMAIL = 5000

    # The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_name : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_NAME = 5000

    # The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_phone", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_phone : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_PHONE = 5000

    @[JSON::Field(key: "customer_shipping", type: Stripe::InvoiceCustomerShipping?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_shipping : Stripe::InvoiceCustomerShipping? = nil

    # The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_tax_exempt", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_tax_exempt : String? = nil
    ERROR_MESSAGE_FOR_CUSTOMER_TAX_EXEMPT = "invalid value for \"customer_tax_exempt\", must be one of [exempt, none, reverse]."
    VALID_VALUES_FOR_CUSTOMER_TAX_EXEMPT  = String.static_array("exempt", "none", "reverse")

    @[JSON::Field(key: "default_payment_method", type: Stripe::InvoiceDefaultPaymentMethod?, default: nil, required: true, nullable: true, emit_null: true)]
    getter default_payment_method : Stripe::InvoiceDefaultPaymentMethod? = nil

    @[JSON::Field(key: "default_source", type: Stripe::InvoiceDefaultSource?, default: nil, required: true, nullable: true, emit_null: true)]
    getter default_source : Stripe::InvoiceDefaultSource? = nil

    # The tax rates applied to this invoice, if any.
    @[JSON::Field(key: "default_tax_rates", type: Array(Stripe::TaxRate)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter default_tax_rates : Array(Stripe::TaxRate)? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    @[JSON::Field(key: "discount", type: Stripe::InvoiceDiscount?, default: nil, required: true, nullable: true, emit_null: true)]
    getter discount : Stripe::InvoiceDiscount? = nil

    # The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    @[JSON::Field(key: "discounts", type: Array(Stripe::InvoiceDiscountsInner)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter discounts : Array(Stripe::InvoiceDiscountsInner)? = nil

    # The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
    @[JSON::Field(key: "due_date", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter due_date : Int64? = nil

    # The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
    @[JSON::Field(key: "effective_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter effective_at : Int64? = nil

    # Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
    @[JSON::Field(key: "ending_balance", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ending_balance : Int64? = nil

    # Footer displayed on the invoice.
    @[JSON::Field(key: "footer", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter footer : String? = nil
    MAX_LENGTH_FOR_FOOTER = 5000

    @[JSON::Field(key: "from_invoice", type: Stripe::InvoiceFromInvoice?, default: nil, required: true, nullable: true, emit_null: true)]
    getter from_invoice : Stripe::InvoiceFromInvoice? = nil

    @[JSON::Field(key: "issuer", type: Stripe::ConnectAccountReference?, default: nil, required: true, nullable: false, emit_null: false)]
    getter issuer : Stripe::ConnectAccountReference? = nil

    @[JSON::Field(key: "last_finalization_error", type: Stripe::InvoiceLastFinalizationError?, default: nil, required: true, nullable: true, emit_null: true)]
    getter last_finalization_error : Stripe::InvoiceLastFinalizationError? = nil

    @[JSON::Field(key: "latest_revision", type: Stripe::InvoiceLatestRevision?, default: nil, required: true, nullable: true, emit_null: true)]
    getter latest_revision : Stripe::InvoiceLatestRevision? = nil

    @[JSON::Field(key: "lines", type: Stripe::InvoiceLinesList?, default: nil, required: true, nullable: false, emit_null: false)]
    getter lines : Stripe::InvoiceLinesList? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter metadata : Hash(String, String)? = nil

    # The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
    @[JSON::Field(key: "next_payment_attempt", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter next_payment_attempt : Int64? = nil

    # A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
    @[JSON::Field(key: "number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter number : String? = nil
    MAX_LENGTH_FOR_NUMBER = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [invoice]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("invoice")

    @[JSON::Field(key: "on_behalf_of", type: Stripe::InvoiceOnBehalfOf?, default: nil, required: true, nullable: true, emit_null: true)]
    getter on_behalf_of : Stripe::InvoiceOnBehalfOf? = nil

    # Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
    @[JSON::Field(key: "paid", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter paid : Bool? = nil

    # Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe.
    @[JSON::Field(key: "paid_out_of_band", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter paid_out_of_band : Bool? = nil

    @[JSON::Field(key: "payment_intent", type: Stripe::InvoicePaymentIntent?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_intent : Stripe::InvoicePaymentIntent? = nil

    @[JSON::Field(key: "payment_settings", type: Stripe::InvoicesPaymentSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_settings : Stripe::InvoicesPaymentSettings? = nil

    # End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
    @[JSON::Field(key: "period_end", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter period_end : Int64? = nil

    # Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
    @[JSON::Field(key: "period_start", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter period_start : Int64? = nil

    # Total amount of all post-payment credit notes issued for this invoice.
    @[JSON::Field(key: "post_payment_credit_notes_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter post_payment_credit_notes_amount : Int64? = nil

    # Total amount of all pre-payment credit notes issued for this invoice.
    @[JSON::Field(key: "pre_payment_credit_notes_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pre_payment_credit_notes_amount : Int64? = nil

    @[JSON::Field(key: "quote", type: Stripe::InvoiceQuote?, default: nil, required: true, nullable: true, emit_null: true)]
    getter quote : Stripe::InvoiceQuote? = nil

    # This is the transaction number that appears on email receipts sent for this invoice.
    @[JSON::Field(key: "receipt_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter receipt_number : String? = nil
    MAX_LENGTH_FOR_RECEIPT_NUMBER = 5000

    @[JSON::Field(key: "rendering", type: Stripe::InvoiceRendering?, default: nil, required: true, nullable: true, emit_null: true)]
    getter rendering : Stripe::InvoiceRendering? = nil

    @[JSON::Field(key: "shipping_cost", type: Stripe::InvoiceShippingCost?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_cost : Stripe::InvoiceShippingCost? = nil

    @[JSON::Field(key: "shipping_details", type: Stripe::InvoiceShippingDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_details : Stripe::InvoiceShippingDetails? = nil

    # Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice.
    @[JSON::Field(key: "starting_balance", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter starting_balance : Int64? = nil

    # Extra information about an invoice for the customer's credit card statement.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [draft, open, paid, uncollectible, void]."
    VALID_VALUES_FOR_STATUS  = String.static_array("draft", "open", "paid", "uncollectible", "void")

    @[JSON::Field(key: "status_transitions", type: Stripe::InvoicesResourceStatusTransitions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status_transitions : Stripe::InvoicesResourceStatusTransitions? = nil

    @[JSON::Field(key: "subscription", type: Stripe::InvoiceSubscription?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subscription : Stripe::InvoiceSubscription? = nil

    @[JSON::Field(key: "subscription_details", type: Stripe::InvoiceSubscriptionDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subscription_details : Stripe::InvoiceSubscriptionDetails? = nil

    # Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated
    @[JSON::Field(key: "subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter subtotal : Int64? = nil

    # The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
    @[JSON::Field(key: "subtotal_excluding_tax", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subtotal_excluding_tax : Int64? = nil

    # The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
    @[JSON::Field(key: "tax", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter tax : Int64? = nil

    @[JSON::Field(key: "test_clock", type: Stripe::InvoiceTestClock?, default: nil, required: true, nullable: true, emit_null: true)]
    getter test_clock : Stripe::InvoiceTestClock? = nil

    # Total after discounts and taxes.
    @[JSON::Field(key: "total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total : Int64? = nil

    # The aggregate amounts calculated per discount across all line items.
    @[JSON::Field(key: "total_discount_amounts", type: Array(Stripe::DiscountsResourceDiscountAmount)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter total_discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil

    # The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax.
    @[JSON::Field(key: "total_excluding_tax", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter total_excluding_tax : Int64? = nil

    # The aggregate amounts calculated per tax rate for all line items.
    @[JSON::Field(key: "total_tax_amounts", type: Array(Stripe::InvoiceTaxAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total_tax_amounts : Array(Stripe::InvoiceTaxAmount)? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::InvoiceTransferData1?, default: nil, required: true, nullable: true, emit_null: true)]
    getter transfer_data : Stripe::InvoiceTransferData1? = nil

    # Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
    @[JSON::Field(key: "webhooks_delivered_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter webhooks_delivered_at : Int64? = nil

    # End of Required Properties

    # Optional Properties

    # Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
    @[JSON::Field(key: "auto_advance", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter auto_advance : Bool? = nil

    # The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_tax_ids", type: Array(Stripe::InvoicesResourceInvoiceTaxId)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_tax_ids.nil? && !customer_tax_ids_present?)]
    getter customer_tax_ids : Array(Stripe::InvoicesResourceInvoiceTaxId)? = nil

    @[JSON::Field(ignore: true)]
    property? customer_tax_ids_present : Bool = false

    # The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
    @[JSON::Field(key: "hosted_invoice_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: hosted_invoice_url.nil? && !hosted_invoice_url_present?)]
    getter hosted_invoice_url : String? = nil
    MAX_LENGTH_FOR_HOSTED_INVOICE_URL = 5000

    @[JSON::Field(ignore: true)]
    property? hosted_invoice_url_present : Bool = false

    # Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
    @[JSON::Field(key: "invoice_pdf", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: invoice_pdf.nil? && !invoice_pdf_present?)]
    getter invoice_pdf : String? = nil
    MAX_LENGTH_FOR_INVOICE_PDF = 5000

    @[JSON::Field(ignore: true)]
    property? invoice_pdf_present : Bool = false

    # Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
    @[JSON::Field(key: "subscription_proration_date", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_proration_date : Int64? = nil

    @[JSON::Field(key: "threshold_reason", type: Stripe::InvoiceThresholdReason?, default: nil, required: false, nullable: false, emit_null: false)]
    getter threshold_reason : Stripe::InvoiceThresholdReason? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_country : String? = nil,
      @account_name : String? = nil,
      @account_tax_ids : Array(Stripe::InvoiceAccountTaxIdsInner)? = nil,
      @amount_due : Int64? = nil,
      @amount_paid : Int64? = nil,
      @amount_remaining : Int64? = nil,
      @amount_shipping : Int64? = nil,
      @application : Stripe::InvoiceApplication? = nil,
      @application_fee_amount : Int64? = nil,
      @attempt_count : Int64? = nil,
      @attempted : Bool? = nil,
      @automatic_tax : Stripe::AutomaticTax? = nil,
      @billing_reason : String? = nil,
      @charge : Stripe::InvoiceCharge? = nil,
      @collection_method : String? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @custom_fields : Array(Stripe::InvoiceSettingCustomField)? = nil,
      @customer : Stripe::InvoiceCustomer? = nil,
      @customer_address : Stripe::InvoiceCustomerAddress? = nil,
      @customer_email : String? = nil,
      @customer_name : String? = nil,
      @customer_phone : String? = nil,
      @customer_shipping : Stripe::InvoiceCustomerShipping? = nil,
      @customer_tax_exempt : String? = nil,
      @default_payment_method : Stripe::InvoiceDefaultPaymentMethod? = nil,
      @default_source : Stripe::InvoiceDefaultSource? = nil,
      @default_tax_rates : Array(Stripe::TaxRate)? = nil,
      @description : String? = nil,
      @discount : Stripe::InvoiceDiscount? = nil,
      @discounts : Array(Stripe::InvoiceDiscountsInner)? = nil,
      @due_date : Int64? = nil,
      @effective_at : Int64? = nil,
      @ending_balance : Int64? = nil,
      @footer : String? = nil,
      @from_invoice : Stripe::InvoiceFromInvoice? = nil,
      @issuer : Stripe::ConnectAccountReference? = nil,
      @last_finalization_error : Stripe::InvoiceLastFinalizationError? = nil,
      @latest_revision : Stripe::InvoiceLatestRevision? = nil,
      @lines : Stripe::InvoiceLinesList? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @next_payment_attempt : Int64? = nil,
      @number : String? = nil,
      @object : String? = nil,
      @on_behalf_of : Stripe::InvoiceOnBehalfOf? = nil,
      @paid : Bool? = nil,
      @paid_out_of_band : Bool? = nil,
      @payment_intent : Stripe::InvoicePaymentIntent? = nil,
      @payment_settings : Stripe::InvoicesPaymentSettings? = nil,
      @period_end : Int64? = nil,
      @period_start : Int64? = nil,
      @post_payment_credit_notes_amount : Int64? = nil,
      @pre_payment_credit_notes_amount : Int64? = nil,
      @quote : Stripe::InvoiceQuote? = nil,
      @receipt_number : String? = nil,
      @rendering : Stripe::InvoiceRendering? = nil,
      @shipping_cost : Stripe::InvoiceShippingCost? = nil,
      @shipping_details : Stripe::InvoiceShippingDetails? = nil,
      @starting_balance : Int64? = nil,
      @statement_descriptor : String? = nil,
      @status : String? = nil,
      @status_transitions : Stripe::InvoicesResourceStatusTransitions? = nil,
      @subscription : Stripe::InvoiceSubscription? = nil,
      @subscription_details : Stripe::InvoiceSubscriptionDetails? = nil,
      @subtotal : Int64? = nil,
      @subtotal_excluding_tax : Int64? = nil,
      @tax : Int64? = nil,
      @test_clock : Stripe::InvoiceTestClock? = nil,
      @total : Int64? = nil,
      @total_discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil,
      @total_excluding_tax : Int64? = nil,
      @total_tax_amounts : Array(Stripe::InvoiceTaxAmount)? = nil,
      @transfer_data : Stripe::InvoiceTransferData1? = nil,
      @webhooks_delivered_at : Int64? = nil,
      # Optional properties
      @auto_advance : Bool? = nil,
      @customer_tax_ids : Array(Stripe::InvoicesResourceInvoiceTaxId)? = nil,
      @hosted_invoice_url : String? = nil,
      @id : String? = nil,
      @invoice_pdf : String? = nil,
      @subscription_proration_date : Int64? = nil,
      @threshold_reason : Stripe::InvoiceThresholdReason? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_country = @account_country).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_country", _account_country.to_s.size, MAX_LENGTH_FOR_ACCOUNT_COUNTRY)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_account_name = @account_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_name", _account_name.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_account_tax_ids = @account_tax_ids).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "account_tax_ids", container: _account_tax_ids)) if _account_tax_ids.is_a?(Array)
      end
      invalid_properties.push("\"amount_due\" is required and cannot be null") if @amount_due.nil?

      invalid_properties.push("\"amount_paid\" is required and cannot be null") if @amount_paid.nil?

      invalid_properties.push("\"amount_remaining\" is required and cannot be null") if @amount_remaining.nil?

      invalid_properties.push("\"amount_shipping\" is required and cannot be null") if @amount_shipping.nil?

      unless (_application = @application).nil?
        invalid_properties.concat(_application.list_invalid_properties_for("application")) if _application.is_a?(OpenApi::Validatable)
      end

      invalid_properties.push("\"attempt_count\" is required and cannot be null") if @attempt_count.nil?

      invalid_properties.push("\"attempted\" is required and cannot be null") if @attempted.nil?

      invalid_properties.push("\"automatic_tax\" is required and cannot be null") if @automatic_tax.nil?

      unless (_automatic_tax = @automatic_tax).nil?
        invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax")) if _automatic_tax.is_a?(OpenApi::Validatable)
      end
      unless (_billing_reason = @billing_reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BILLING_REASON) unless OpenApi::EnumValidator.valid?(_billing_reason, VALID_VALUES_FOR_BILLING_REASON)
      end
      unless (_charge = @charge).nil?
        invalid_properties.concat(_charge.list_invalid_properties_for("charge")) if _charge.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"collection_method\" is required and cannot be null") if @collection_method.nil?

      unless (_collection_method = @collection_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_COLLECTION_METHOD) unless OpenApi::EnumValidator.valid?(_collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_custom_fields = @custom_fields).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "custom_fields", container: _custom_fields)) if _custom_fields.is_a?(Array)
      end
      unless (_customer = @customer).nil?
        invalid_properties.concat(_customer.list_invalid_properties_for("customer")) if _customer.is_a?(OpenApi::Validatable)
      end
      unless (_customer_address = @customer_address).nil?
        invalid_properties.concat(_customer_address.list_invalid_properties_for("customer_address")) if _customer_address.is_a?(OpenApi::Validatable)
      end
      unless (_customer_email = @customer_email).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_email", _customer_email.to_s.size, MAX_LENGTH_FOR_CUSTOMER_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_name = @customer_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_name", _customer_name.to_s.size, MAX_LENGTH_FOR_CUSTOMER_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_phone = @customer_phone).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_phone", _customer_phone.to_s.size, MAX_LENGTH_FOR_CUSTOMER_PHONE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_shipping = @customer_shipping).nil?
        invalid_properties.concat(_customer_shipping.list_invalid_properties_for("customer_shipping")) if _customer_shipping.is_a?(OpenApi::Validatable)
      end
      unless (_customer_tax_exempt = @customer_tax_exempt).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CUSTOMER_TAX_EXEMPT) unless OpenApi::EnumValidator.valid?(_customer_tax_exempt, VALID_VALUES_FOR_CUSTOMER_TAX_EXEMPT)
      end
      unless (_default_payment_method = @default_payment_method).nil?
        invalid_properties.concat(_default_payment_method.list_invalid_properties_for("default_payment_method")) if _default_payment_method.is_a?(OpenApi::Validatable)
      end
      unless (_default_source = @default_source).nil?
        invalid_properties.concat(_default_source.list_invalid_properties_for("default_source")) if _default_source.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"default_tax_rates\" is required and cannot be null") if @default_tax_rates.nil?

      unless (_default_tax_rates = @default_tax_rates).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "default_tax_rates", container: _default_tax_rates)) if _default_tax_rates.is_a?(Array)
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_discount = @discount).nil?
        invalid_properties.concat(_discount.list_invalid_properties_for("discount")) if _discount.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"discounts\" is required and cannot be null") if @discounts.nil?

      unless (_discounts = @discounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "discounts", container: _discounts)) if _discounts.is_a?(Array)
      end

      unless (_footer = @footer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("footer", _footer.to_s.size, MAX_LENGTH_FOR_FOOTER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_from_invoice = @from_invoice).nil?
        invalid_properties.concat(_from_invoice.list_invalid_properties_for("from_invoice")) if _from_invoice.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"issuer\" is required and cannot be null") if @issuer.nil?

      unless (_issuer = @issuer).nil?
        invalid_properties.concat(_issuer.list_invalid_properties_for("issuer")) if _issuer.is_a?(OpenApi::Validatable)
      end
      unless (_last_finalization_error = @last_finalization_error).nil?
        invalid_properties.concat(_last_finalization_error.list_invalid_properties_for("last_finalization_error")) if _last_finalization_error.is_a?(OpenApi::Validatable)
      end
      unless (_latest_revision = @latest_revision).nil?
        invalid_properties.concat(_latest_revision.list_invalid_properties_for("latest_revision")) if _latest_revision.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"lines\" is required and cannot be null") if @lines.nil?

      unless (_lines = @lines).nil?
        invalid_properties.concat(_lines.list_invalid_properties_for("lines")) if _lines.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      unless (_number = @number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("number", _number.to_s.size, MAX_LENGTH_FOR_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_on_behalf_of = @on_behalf_of).nil?
        invalid_properties.concat(_on_behalf_of.list_invalid_properties_for("on_behalf_of")) if _on_behalf_of.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"paid\" is required and cannot be null") if @paid.nil?

      invalid_properties.push("\"paid_out_of_band\" is required and cannot be null") if @paid_out_of_band.nil?

      unless (_payment_intent = @payment_intent).nil?
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"payment_settings\" is required and cannot be null") if @payment_settings.nil?

      unless (_payment_settings = @payment_settings).nil?
        invalid_properties.concat(_payment_settings.list_invalid_properties_for("payment_settings")) if _payment_settings.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"period_end\" is required and cannot be null") if @period_end.nil?

      invalid_properties.push("\"period_start\" is required and cannot be null") if @period_start.nil?

      invalid_properties.push("\"post_payment_credit_notes_amount\" is required and cannot be null") if @post_payment_credit_notes_amount.nil?

      invalid_properties.push("\"pre_payment_credit_notes_amount\" is required and cannot be null") if @pre_payment_credit_notes_amount.nil?

      unless (_quote = @quote).nil?
        invalid_properties.concat(_quote.list_invalid_properties_for("quote")) if _quote.is_a?(OpenApi::Validatable)
      end
      unless (_receipt_number = @receipt_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_number", _receipt_number.to_s.size, MAX_LENGTH_FOR_RECEIPT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_rendering = @rendering).nil?
        invalid_properties.concat(_rendering.list_invalid_properties_for("rendering")) if _rendering.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_cost = @shipping_cost).nil?
        invalid_properties.concat(_shipping_cost.list_invalid_properties_for("shipping_cost")) if _shipping_cost.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_details = @shipping_details).nil?
        invalid_properties.concat(_shipping_details.list_invalid_properties_for("shipping_details")) if _shipping_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"starting_balance\" is required and cannot be null") if @starting_balance.nil?

      unless (_statement_descriptor = @statement_descriptor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"status_transitions\" is required and cannot be null") if @status_transitions.nil?

      unless (_status_transitions = @status_transitions).nil?
        invalid_properties.concat(_status_transitions.list_invalid_properties_for("status_transitions")) if _status_transitions.is_a?(OpenApi::Validatable)
      end
      unless (_subscription = @subscription).nil?
        invalid_properties.concat(_subscription.list_invalid_properties_for("subscription")) if _subscription.is_a?(OpenApi::Validatable)
      end
      unless (_subscription_details = @subscription_details).nil?
        invalid_properties.concat(_subscription_details.list_invalid_properties_for("subscription_details")) if _subscription_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"subtotal\" is required and cannot be null") if @subtotal.nil?

      unless (_test_clock = @test_clock).nil?
        invalid_properties.concat(_test_clock.list_invalid_properties_for("test_clock")) if _test_clock.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"total\" is required and cannot be null") if @total.nil?

      unless (_total_discount_amounts = @total_discount_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "total_discount_amounts", container: _total_discount_amounts)) if _total_discount_amounts.is_a?(Array)
      end

      invalid_properties.push("\"total_tax_amounts\" is required and cannot be null") if @total_tax_amounts.nil?

      unless (_total_tax_amounts = @total_tax_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "total_tax_amounts", container: _total_tax_amounts)) if _total_tax_amounts.is_a?(Array)
      end
      unless (_transfer_data = @transfer_data).nil?
        invalid_properties.concat(_transfer_data.list_invalid_properties_for("transfer_data")) if _transfer_data.is_a?(OpenApi::Validatable)
      end

      unless (_customer_tax_ids = @customer_tax_ids).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "customer_tax_ids", container: _customer_tax_ids)) if _customer_tax_ids.is_a?(Array)
      end
      unless (_hosted_invoice_url = @hosted_invoice_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("hosted_invoice_url", _hosted_invoice_url.to_s.size, MAX_LENGTH_FOR_HOSTED_INVOICE_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_invoice_pdf = @invoice_pdf).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("invoice_pdf", _invoice_pdf.to_s.size, MAX_LENGTH_FOR_INVOICE_PDF)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_threshold_reason = @threshold_reason).nil?
        invalid_properties.concat(_threshold_reason.list_invalid_properties_for("threshold_reason")) if _threshold_reason.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_country = @account_country).nil?
        return false if _account_country.to_s.size > MAX_LENGTH_FOR_ACCOUNT_COUNTRY
      end

      unless (_account_name = @account_name).nil?
        return false if _account_name.to_s.size > MAX_LENGTH_FOR_ACCOUNT_NAME
      end

      unless (_account_tax_ids = @account_tax_ids).nil?
        return false if _account_tax_ids.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _account_tax_ids)
      end

      return false if @amount_due.nil?

      return false if @amount_paid.nil?

      return false if @amount_remaining.nil?

      return false if @amount_shipping.nil?

      unless (_application = @application).nil?
        return false if _application.is_a?(OpenApi::Validatable) && !_application.valid?
      end

      return false if @attempt_count.nil?

      return false if @attempted.nil?

      return false if @automatic_tax.nil?
      unless (_automatic_tax = @automatic_tax).nil?
        return false if _automatic_tax.is_a?(OpenApi::Validatable) && !_automatic_tax.valid?
      end

      unless (_billing_reason = @billing_reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_billing_reason, VALID_VALUES_FOR_BILLING_REASON)
      end

      unless (_charge = @charge).nil?
        return false if _charge.is_a?(OpenApi::Validatable) && !_charge.valid?
      end

      return false if @collection_method.nil?
      unless (_collection_method = @collection_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      end

      return false if @created.nil?

      return false if @currency.nil?

      unless (_custom_fields = @custom_fields).nil?
        return false if _custom_fields.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _custom_fields)
      end

      unless (_customer = @customer).nil?
        return false if _customer.is_a?(OpenApi::Validatable) && !_customer.valid?
      end

      unless (_customer_address = @customer_address).nil?
        return false if _customer_address.is_a?(OpenApi::Validatable) && !_customer_address.valid?
      end

      unless (_customer_email = @customer_email).nil?
        return false if _customer_email.to_s.size > MAX_LENGTH_FOR_CUSTOMER_EMAIL
      end

      unless (_customer_name = @customer_name).nil?
        return false if _customer_name.to_s.size > MAX_LENGTH_FOR_CUSTOMER_NAME
      end

      unless (_customer_phone = @customer_phone).nil?
        return false if _customer_phone.to_s.size > MAX_LENGTH_FOR_CUSTOMER_PHONE
      end

      unless (_customer_shipping = @customer_shipping).nil?
        return false if _customer_shipping.is_a?(OpenApi::Validatable) && !_customer_shipping.valid?
      end

      unless (_customer_tax_exempt = @customer_tax_exempt).nil?
        return false unless OpenApi::EnumValidator.valid?(_customer_tax_exempt, VALID_VALUES_FOR_CUSTOMER_TAX_EXEMPT)
      end

      unless (_default_payment_method = @default_payment_method).nil?
        return false if _default_payment_method.is_a?(OpenApi::Validatable) && !_default_payment_method.valid?
      end

      unless (_default_source = @default_source).nil?
        return false if _default_source.is_a?(OpenApi::Validatable) && !_default_source.valid?
      end

      return false if @default_tax_rates.nil?
      unless (_default_tax_rates = @default_tax_rates).nil?
        return false if _default_tax_rates.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _default_tax_rates)
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_discount = @discount).nil?
        return false if _discount.is_a?(OpenApi::Validatable) && !_discount.valid?
      end

      return false if @discounts.nil?
      unless (_discounts = @discounts).nil?
        return false if _discounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _discounts)
      end

      unless (_footer = @footer).nil?
        return false if _footer.to_s.size > MAX_LENGTH_FOR_FOOTER
      end

      unless (_from_invoice = @from_invoice).nil?
        return false if _from_invoice.is_a?(OpenApi::Validatable) && !_from_invoice.valid?
      end

      return false if @issuer.nil?
      unless (_issuer = @issuer).nil?
        return false if _issuer.is_a?(OpenApi::Validatable) && !_issuer.valid?
      end

      unless (_last_finalization_error = @last_finalization_error).nil?
        return false if _last_finalization_error.is_a?(OpenApi::Validatable) && !_last_finalization_error.valid?
      end

      unless (_latest_revision = @latest_revision).nil?
        return false if _latest_revision.is_a?(OpenApi::Validatable) && !_latest_revision.valid?
      end

      return false if @lines.nil?
      unless (_lines = @lines).nil?
        return false if _lines.is_a?(OpenApi::Validatable) && !_lines.valid?
      end

      return false if @livemode.nil?

      unless (_number = @number).nil?
        return false if _number.to_s.size > MAX_LENGTH_FOR_NUMBER
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_on_behalf_of = @on_behalf_of).nil?
        return false if _on_behalf_of.is_a?(OpenApi::Validatable) && !_on_behalf_of.valid?
      end

      return false if @paid.nil?

      return false if @paid_out_of_band.nil?

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      return false if @payment_settings.nil?
      unless (_payment_settings = @payment_settings).nil?
        return false if _payment_settings.is_a?(OpenApi::Validatable) && !_payment_settings.valid?
      end

      return false if @period_end.nil?

      return false if @period_start.nil?

      return false if @post_payment_credit_notes_amount.nil?

      return false if @pre_payment_credit_notes_amount.nil?

      unless (_quote = @quote).nil?
        return false if _quote.is_a?(OpenApi::Validatable) && !_quote.valid?
      end

      unless (_receipt_number = @receipt_number).nil?
        return false if _receipt_number.to_s.size > MAX_LENGTH_FOR_RECEIPT_NUMBER
      end

      unless (_rendering = @rendering).nil?
        return false if _rendering.is_a?(OpenApi::Validatable) && !_rendering.valid?
      end

      unless (_shipping_cost = @shipping_cost).nil?
        return false if _shipping_cost.is_a?(OpenApi::Validatable) && !_shipping_cost.valid?
      end

      unless (_shipping_details = @shipping_details).nil?
        return false if _shipping_details.is_a?(OpenApi::Validatable) && !_shipping_details.valid?
      end

      return false if @starting_balance.nil?

      unless (_statement_descriptor = @statement_descriptor).nil?
        return false if _statement_descriptor.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR
      end

      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @status_transitions.nil?
      unless (_status_transitions = @status_transitions).nil?
        return false if _status_transitions.is_a?(OpenApi::Validatable) && !_status_transitions.valid?
      end

      unless (_subscription = @subscription).nil?
        return false if _subscription.is_a?(OpenApi::Validatable) && !_subscription.valid?
      end

      unless (_subscription_details = @subscription_details).nil?
        return false if _subscription_details.is_a?(OpenApi::Validatable) && !_subscription_details.valid?
      end

      return false if @subtotal.nil?

      unless (_test_clock = @test_clock).nil?
        return false if _test_clock.is_a?(OpenApi::Validatable) && !_test_clock.valid?
      end

      return false if @total.nil?

      unless (_total_discount_amounts = @total_discount_amounts).nil?
        return false if _total_discount_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _total_discount_amounts)
      end

      return false if @total_tax_amounts.nil?
      unless (_total_tax_amounts = @total_tax_amounts).nil?
        return false if _total_tax_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _total_tax_amounts)
      end

      unless (_transfer_data = @transfer_data).nil?
        return false if _transfer_data.is_a?(OpenApi::Validatable) && !_transfer_data.valid?
      end

      unless (_customer_tax_ids = @customer_tax_ids).nil?
        return false if _customer_tax_ids.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _customer_tax_ids)
      end

      unless (_hosted_invoice_url = @hosted_invoice_url).nil?
        return false if _hosted_invoice_url.to_s.size > MAX_LENGTH_FOR_HOSTED_INVOICE_URL
      end

      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      unless (_invoice_pdf = @invoice_pdf).nil?
        return false if _invoice_pdf.to_s.size > MAX_LENGTH_FOR_INVOICE_PDF
      end

      unless (_threshold_reason = @threshold_reason).nil?
        return false if _threshold_reason.is_a?(OpenApi::Validatable) && !_threshold_reason.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_country Object to be assigned
    def account_country=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_country", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_COUNTRY)
      end

      @account_country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_name Object to be assigned
    def account_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_name", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NAME)
      end

      @account_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_tax_ids Object to be assigned
    def account_tax_ids=(new_value : Array(Stripe::InvoiceAccountTaxIdsInner)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @account_tax_ids = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_due Object to be assigned
    def amount_due=(new_value : Int64?)
      raise ArgumentError.new("\"amount_due\" is required and cannot be null") if new_value.nil?

      @amount_due = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_paid Object to be assigned
    def amount_paid=(new_value : Int64?)
      raise ArgumentError.new("\"amount_paid\" is required and cannot be null") if new_value.nil?

      @amount_paid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_remaining Object to be assigned
    def amount_remaining=(new_value : Int64?)
      raise ArgumentError.new("\"amount_remaining\" is required and cannot be null") if new_value.nil?

      @amount_remaining = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_shipping Object to be assigned
    def amount_shipping=(new_value : Int64?)
      raise ArgumentError.new("\"amount_shipping\" is required and cannot be null") if new_value.nil?

      @amount_shipping = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(new_value : Stripe::InvoiceApplication?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @application = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_amount Object to be assigned
    def application_fee_amount=(new_value : Int64?)
      @application_fee_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attempt_count Object to be assigned
    def attempt_count=(new_value : Int64?)
      raise ArgumentError.new("\"attempt_count\" is required and cannot be null") if new_value.nil?

      @attempt_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attempted Object to be assigned
    def attempted=(new_value : Bool?)
      raise ArgumentError.new("\"attempted\" is required and cannot be null") if new_value.nil?

      @attempted = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(new_value : Stripe::AutomaticTax?)
      raise ArgumentError.new("\"automatic_tax\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @automatic_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_reason Object to be assigned
    def billing_reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("billing_reason", new_value, VALID_VALUES_FOR_BILLING_REASON)
      end

      @billing_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(new_value : Stripe::InvoiceCharge?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @charge = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(new_value : String?)
      raise ArgumentError.new("\"collection_method\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("collection_method", new_value, VALID_VALUES_FOR_COLLECTION_METHOD)
      end

      @collection_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(new_value : Array(Stripe::InvoiceSettingCustomField)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @custom_fields = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : Stripe::InvoiceCustomer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_address Object to be assigned
    def customer_address=(new_value : Stripe::InvoiceCustomerAddress?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_email Object to be assigned
    def customer_email=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer_email", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER_EMAIL)
      end

      @customer_email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_name Object to be assigned
    def customer_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer_name", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER_NAME)
      end

      @customer_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_phone Object to be assigned
    def customer_phone=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer_phone", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER_PHONE)
      end

      @customer_phone = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_shipping Object to be assigned
    def customer_shipping=(new_value : Stripe::InvoiceCustomerShipping?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_shipping = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_tax_exempt Object to be assigned
    def customer_tax_exempt=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("customer_tax_exempt", new_value, VALID_VALUES_FOR_CUSTOMER_TAX_EXEMPT)
      end

      @customer_tax_exempt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(new_value : Stripe::InvoiceDefaultPaymentMethod?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @default_payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_source Object to be assigned
    def default_source=(new_value : Stripe::InvoiceDefaultSource?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @default_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_tax_rates Object to be assigned
    def default_tax_rates=(new_value : Array(Stripe::TaxRate)?)
      raise ArgumentError.new("\"default_tax_rates\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @default_tax_rates = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount Object to be assigned
    def discount=(new_value : Stripe::InvoiceDiscount?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @discount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(new_value : Array(Stripe::InvoiceDiscountsInner)?)
      raise ArgumentError.new("\"discounts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @discounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] due_date Object to be assigned
    def due_date=(new_value : Int64?)
      @due_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] effective_at Object to be assigned
    def effective_at=(new_value : Int64?)
      @effective_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ending_balance Object to be assigned
    def ending_balance=(new_value : Int64?)
      @ending_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] footer Object to be assigned
    def footer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("footer", new_value.to_s.size, MAX_LENGTH_FOR_FOOTER)
      end

      @footer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] from_invoice Object to be assigned
    def from_invoice=(new_value : Stripe::InvoiceFromInvoice?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @from_invoice = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuer Object to be assigned
    def issuer=(new_value : Stripe::ConnectAccountReference?)
      raise ArgumentError.new("\"issuer\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @issuer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_finalization_error Object to be assigned
    def last_finalization_error=(new_value : Stripe::InvoiceLastFinalizationError?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @last_finalization_error = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] latest_revision Object to be assigned
    def latest_revision=(new_value : Stripe::InvoiceLatestRevision?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @latest_revision = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lines Object to be assigned
    def lines=(new_value : Stripe::InvoiceLinesList?)
      raise ArgumentError.new("\"lines\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @lines = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_payment_attempt Object to be assigned
    def next_payment_attempt=(new_value : Int64?)
      @next_payment_attempt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number Object to be assigned
    def number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("number", new_value.to_s.size, MAX_LENGTH_FOR_NUMBER)
      end

      @number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(new_value : Stripe::InvoiceOnBehalfOf?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @on_behalf_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paid Object to be assigned
    def paid=(new_value : Bool?)
      raise ArgumentError.new("\"paid\" is required and cannot be null") if new_value.nil?

      @paid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paid_out_of_band Object to be assigned
    def paid_out_of_band=(new_value : Bool?)
      raise ArgumentError.new("\"paid_out_of_band\" is required and cannot be null") if new_value.nil?

      @paid_out_of_band = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(new_value : Stripe::InvoicePaymentIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_settings Object to be assigned
    def payment_settings=(new_value : Stripe::InvoicesPaymentSettings?)
      raise ArgumentError.new("\"payment_settings\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_settings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] period_end Object to be assigned
    def period_end=(new_value : Int64?)
      raise ArgumentError.new("\"period_end\" is required and cannot be null") if new_value.nil?

      @period_end = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] period_start Object to be assigned
    def period_start=(new_value : Int64?)
      raise ArgumentError.new("\"period_start\" is required and cannot be null") if new_value.nil?

      @period_start = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] post_payment_credit_notes_amount Object to be assigned
    def post_payment_credit_notes_amount=(new_value : Int64?)
      raise ArgumentError.new("\"post_payment_credit_notes_amount\" is required and cannot be null") if new_value.nil?

      @post_payment_credit_notes_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pre_payment_credit_notes_amount Object to be assigned
    def pre_payment_credit_notes_amount=(new_value : Int64?)
      raise ArgumentError.new("\"pre_payment_credit_notes_amount\" is required and cannot be null") if new_value.nil?

      @pre_payment_credit_notes_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quote Object to be assigned
    def quote=(new_value : Stripe::InvoiceQuote?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @quote = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_number Object to be assigned
    def receipt_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("receipt_number", new_value.to_s.size, MAX_LENGTH_FOR_RECEIPT_NUMBER)
      end

      @receipt_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rendering Object to be assigned
    def rendering=(new_value : Stripe::InvoiceRendering?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @rendering = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_cost Object to be assigned
    def shipping_cost=(new_value : Stripe::InvoiceShippingCost?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_cost = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_details Object to be assigned
    def shipping_details=(new_value : Stripe::InvoiceShippingDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] starting_balance Object to be assigned
    def starting_balance=(new_value : Int64?)
      raise ArgumentError.new("\"starting_balance\" is required and cannot be null") if new_value.nil?

      @starting_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
      end

      @statement_descriptor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_transitions Object to be assigned
    def status_transitions=(new_value : Stripe::InvoicesResourceStatusTransitions?)
      raise ArgumentError.new("\"status_transitions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @status_transitions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription Object to be assigned
    def subscription=(new_value : Stripe::InvoiceSubscription?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_details Object to be assigned
    def subscription_details=(new_value : Stripe::InvoiceSubscriptionDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtotal Object to be assigned
    def subtotal=(new_value : Int64?)
      raise ArgumentError.new("\"subtotal\" is required and cannot be null") if new_value.nil?

      @subtotal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtotal_excluding_tax Object to be assigned
    def subtotal_excluding_tax=(new_value : Int64?)
      @subtotal_excluding_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax Object to be assigned
    def tax=(new_value : Int64?)
      @tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock Object to be assigned
    def test_clock=(new_value : Stripe::InvoiceTestClock?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @test_clock = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total Object to be assigned
    def total=(new_value : Int64?)
      raise ArgumentError.new("\"total\" is required and cannot be null") if new_value.nil?

      @total = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_discount_amounts Object to be assigned
    def total_discount_amounts=(new_value : Array(Stripe::DiscountsResourceDiscountAmount)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @total_discount_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_excluding_tax Object to be assigned
    def total_excluding_tax=(new_value : Int64?)
      @total_excluding_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_tax_amounts Object to be assigned
    def total_tax_amounts=(new_value : Array(Stripe::InvoiceTaxAmount)?)
      raise ArgumentError.new("\"total_tax_amounts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @total_tax_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(new_value : Stripe::InvoiceTransferData1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfer_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhooks_delivered_at Object to be assigned
    def webhooks_delivered_at=(new_value : Int64?)
      @webhooks_delivered_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auto_advance Object to be assigned
    def auto_advance=(new_value : Bool?)
      @auto_advance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_tax_ids Object to be assigned
    def customer_tax_ids=(new_value : Array(Stripe::InvoicesResourceInvoiceTaxId)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @customer_tax_ids = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_invoice_url Object to be assigned
    def hosted_invoice_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("hosted_invoice_url", new_value.to_s.size, MAX_LENGTH_FOR_HOSTED_INVOICE_URL)
      end

      @hosted_invoice_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_pdf Object to be assigned
    def invoice_pdf=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("invoice_pdf", new_value.to_s.size, MAX_LENGTH_FOR_INVOICE_PDF)
      end

      @invoice_pdf = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_proration_date Object to be assigned
    def subscription_proration_date=(new_value : Int64?)
      @subscription_proration_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] threshold_reason Object to be assigned
    def threshold_reason=(new_value : Stripe::InvoiceThresholdReason?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @threshold_reason = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_country, @account_name, @account_tax_ids, @amount_due, @amount_paid, @amount_remaining, @amount_shipping, @application, @application_fee_amount, @attempt_count, @attempted, @automatic_tax, @billing_reason, @charge, @collection_method, @created, @currency, @custom_fields, @customer, @customer_address, @customer_email, @customer_name, @customer_phone, @customer_shipping, @customer_tax_exempt, @default_payment_method, @default_source, @default_tax_rates, @description, @discount, @discounts, @due_date, @effective_at, @ending_balance, @footer, @from_invoice, @issuer, @last_finalization_error, @latest_revision, @lines, @livemode, @metadata, @next_payment_attempt, @number, @object, @on_behalf_of, @paid, @paid_out_of_band, @payment_intent, @payment_settings, @period_end, @period_start, @post_payment_credit_notes_amount, @pre_payment_credit_notes_amount, @quote, @receipt_number, @rendering, @shipping_cost, @shipping_details, @starting_balance, @statement_descriptor, @status, @status_transitions, @subscription, @subscription_details, @subtotal, @subtotal_excluding_tax, @tax, @test_clock, @total, @total_discount_amounts, @total_excluding_tax, @total_tax_amounts, @transfer_data, @webhooks_delivered_at, @auto_advance, @customer_tax_ids, @customer_tax_ids_present, @hosted_invoice_url, @hosted_invoice_url_present, @id, @invoice_pdf, @invoice_pdf_present, @subscription_proration_date, @threshold_reason)
  end
end
