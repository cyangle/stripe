#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.  They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).  If your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.  If your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.  Stripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer's credit balance which is applied to the next invoice.  More details on the customer's credit balance are [here](https://stripe.com/docs/billing/customer/balance).  Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
  class Invoice
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
    @[JSON::Field(key: "amount_due", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_due : Int64? = nil

    # The amount, in %s, that was paid.
    @[JSON::Field(key: "amount_paid", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_paid : Int64? = nil

    # The difference between amount_due and amount_paid, in %s.
    @[JSON::Field(key: "amount_remaining", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_remaining : Int64? = nil

    # Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
    @[JSON::Field(key: "attempt_count", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter attempt_count : Int64? = nil

    # Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
    @[JSON::Field(key: "attempted", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter attempted : Bool? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTax?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTax? = nil

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter collection_method : String? = nil
    ERROR_MESSAGE_FOR_COLLECTION_METHOD = "invalid value for \"collection_method\", must be one of [charge_automatically, send_invoice]."
    VALID_VALUES_FOR_COLLECTION_METHOD  = String.static_array("charge_automatically", "send_invoice")

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # The tax rates applied to this invoice, if any.
    @[JSON::Field(key: "default_tax_rates", type: Array(Stripe::TaxRate)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter default_tax_rates : Array(Stripe::TaxRate)? = nil

    @[JSON::Field(key: "lines", type: Stripe::InvoiceLinesList1?, default: nil, required: true, nullable: false, emit_null: false)]
    getter lines : Stripe::InvoiceLinesList1? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [invoice]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("invoice")

    # Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
    @[JSON::Field(key: "paid", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter paid : Bool? = nil

    # Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe.
    @[JSON::Field(key: "paid_out_of_band", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter paid_out_of_band : Bool? = nil

    @[JSON::Field(key: "payment_settings", type: Stripe::InvoicesPaymentSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_settings : Stripe::InvoicesPaymentSettings? = nil

    # End of the usage period during which invoice items were added to this invoice.
    @[JSON::Field(key: "period_end", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter period_end : Int64? = nil

    # Start of the usage period during which invoice items were added to this invoice.
    @[JSON::Field(key: "period_start", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter period_start : Int64? = nil

    # Total amount of all post-payment credit notes issued for this invoice.
    @[JSON::Field(key: "post_payment_credit_notes_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter post_payment_credit_notes_amount : Int64? = nil

    # Total amount of all pre-payment credit notes issued for this invoice.
    @[JSON::Field(key: "pre_payment_credit_notes_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pre_payment_credit_notes_amount : Int64? = nil

    # Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
    @[JSON::Field(key: "starting_balance", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter starting_balance : Int64? = nil

    @[JSON::Field(key: "status_transitions", type: Stripe::InvoicesStatusTransitions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status_transitions : Stripe::InvoicesStatusTransitions? = nil

    # Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated
    @[JSON::Field(key: "subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter subtotal : Int64? = nil

    # Total after discounts and taxes.
    @[JSON::Field(key: "total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total : Int64? = nil

    # The aggregate amounts calculated per tax rate for all line items.
    @[JSON::Field(key: "total_tax_amounts", type: Array(Stripe::InvoiceTaxAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total_tax_amounts : Array(Stripe::InvoiceTaxAmount)? = nil

    # End of Required Properties

    # Optional Properties

    # The country of the business associated with this invoice, most often the business creating the invoice.
    @[JSON::Field(key: "account_country", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_country.nil? && !account_country_present?)]
    getter account_country : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_COUNTRY = 5000

    @[JSON::Field(ignore: true)]
    property? account_country_present : Bool = false

    # The public name of the business associated with this invoice, most often the business creating the invoice.
    @[JSON::Field(key: "account_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_name.nil? && !account_name_present?)]
    getter account_name : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_NAME = 5000

    @[JSON::Field(ignore: true)]
    property? account_name_present : Bool = false

    # The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
    @[JSON::Field(key: "account_tax_ids", type: Array(Stripe::InvoiceAccountTaxIdsInner)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_tax_ids.nil? && !account_tax_ids_present?)]
    getter account_tax_ids : Array(Stripe::InvoiceAccountTaxIdsInner)? = nil

    @[JSON::Field(ignore: true)]
    property? account_tax_ids_present : Bool = false

    @[JSON::Field(key: "application", type: Stripe::InvoiceApplication?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : Stripe::InvoiceApplication? = nil

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    # The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application_fee_amount.nil? && !application_fee_amount_present?)]
    getter application_fee_amount : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? application_fee_amount_present : Bool = false

    # Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
    @[JSON::Field(key: "auto_advance", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter auto_advance : Bool? = nil

    # Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
    @[JSON::Field(key: "billing_reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_reason.nil? && !billing_reason_present?)]
    getter billing_reason : String? = nil
    ERROR_MESSAGE_FOR_BILLING_REASON = "invalid value for \"billing_reason\", must be one of [automatic_pending_invoice_item_invoice, manual, quote_accept, subscription, subscription_create, subscription_cycle, subscription_threshold, subscription_update, upcoming]."
    VALID_VALUES_FOR_BILLING_REASON  = String.static_array("automatic_pending_invoice_item_invoice", "manual", "quote_accept", "subscription", "subscription_create", "subscription_cycle", "subscription_threshold", "subscription_update", "upcoming")

    @[JSON::Field(ignore: true)]
    property? billing_reason_present : Bool = false

    @[JSON::Field(key: "charge", type: Stripe::InvoiceCharge?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: charge.nil? && !charge_present?)]
    getter charge : Stripe::InvoiceCharge? = nil

    @[JSON::Field(ignore: true)]
    property? charge_present : Bool = false

    # Custom fields displayed on the invoice.
    @[JSON::Field(key: "custom_fields", type: Array(Stripe::InvoiceSettingCustomField)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: custom_fields.nil? && !custom_fields_present?)]
    getter custom_fields : Array(Stripe::InvoiceSettingCustomField)? = nil

    @[JSON::Field(ignore: true)]
    property? custom_fields_present : Bool = false

    @[JSON::Field(key: "customer", type: Stripe::InvoiceCustomer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : Stripe::InvoiceCustomer? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    @[JSON::Field(key: "customer_address", type: Stripe::InvoiceCustomerAddress?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_address.nil? && !customer_address_present?)]
    getter customer_address : Stripe::InvoiceCustomerAddress? = nil

    @[JSON::Field(ignore: true)]
    property? customer_address_present : Bool = false

    # The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_email.nil? && !customer_email_present?)]
    getter customer_email : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_EMAIL = 5000

    @[JSON::Field(ignore: true)]
    property? customer_email_present : Bool = false

    # The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_name.nil? && !customer_name_present?)]
    getter customer_name : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_NAME = 5000

    @[JSON::Field(ignore: true)]
    property? customer_name_present : Bool = false

    # The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_phone", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_phone.nil? && !customer_phone_present?)]
    getter customer_phone : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_PHONE = 5000

    @[JSON::Field(ignore: true)]
    property? customer_phone_present : Bool = false

    @[JSON::Field(key: "customer_shipping", type: Stripe::InvoiceCustomerShipping?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_shipping.nil? && !customer_shipping_present?)]
    getter customer_shipping : Stripe::InvoiceCustomerShipping? = nil

    @[JSON::Field(ignore: true)]
    property? customer_shipping_present : Bool = false

    # The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_tax_exempt", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_tax_exempt.nil? && !customer_tax_exempt_present?)]
    getter customer_tax_exempt : String? = nil
    ERROR_MESSAGE_FOR_CUSTOMER_TAX_EXEMPT = "invalid value for \"customer_tax_exempt\", must be one of [exempt, none, reverse]."
    VALID_VALUES_FOR_CUSTOMER_TAX_EXEMPT  = String.static_array("exempt", "none", "reverse")

    @[JSON::Field(ignore: true)]
    property? customer_tax_exempt_present : Bool = false

    # The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
    @[JSON::Field(key: "customer_tax_ids", type: Array(Stripe::InvoicesResourceInvoiceTaxId)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_tax_ids.nil? && !customer_tax_ids_present?)]
    getter customer_tax_ids : Array(Stripe::InvoicesResourceInvoiceTaxId)? = nil

    @[JSON::Field(ignore: true)]
    property? customer_tax_ids_present : Bool = false

    @[JSON::Field(key: "default_payment_method", type: Stripe::InvoiceDefaultPaymentMethod?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    getter default_payment_method : Stripe::InvoiceDefaultPaymentMethod? = nil

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    @[JSON::Field(key: "default_source", type: Stripe::InvoiceDefaultSource?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_source.nil? && !default_source_present?)]
    getter default_source : Stripe::InvoiceDefaultSource? = nil

    @[JSON::Field(ignore: true)]
    property? default_source_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "discount", type: Stripe::InvoiceDiscount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: discount.nil? && !discount_present?)]
    getter discount : Stripe::InvoiceDiscount? = nil

    @[JSON::Field(ignore: true)]
    property? discount_present : Bool = false

    # The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    @[JSON::Field(key: "discounts", type: Array(Stripe::InvoiceDiscountsInner)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: discounts.nil? && !discounts_present?)]
    getter discounts : Array(Stripe::InvoiceDiscountsInner)? = nil

    @[JSON::Field(ignore: true)]
    property? discounts_present : Bool = false

    # The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
    @[JSON::Field(key: "due_date", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: due_date.nil? && !due_date_present?)]
    getter due_date : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? due_date_present : Bool = false

    # Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
    @[JSON::Field(key: "ending_balance", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ending_balance.nil? && !ending_balance_present?)]
    getter ending_balance : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? ending_balance_present : Bool = false

    # Footer displayed on the invoice.
    @[JSON::Field(key: "footer", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: footer.nil? && !footer_present?)]
    getter footer : String? = nil
    MAX_LENGTH_FOR_FOOTER = 5000

    @[JSON::Field(ignore: true)]
    property? footer_present : Bool = false

    @[JSON::Field(key: "from_invoice", type: Stripe::InvoiceFromInvoice?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: from_invoice.nil? && !from_invoice_present?)]
    getter from_invoice : Stripe::InvoiceFromInvoice? = nil

    @[JSON::Field(ignore: true)]
    property? from_invoice_present : Bool = false

    # The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
    @[JSON::Field(key: "hosted_invoice_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: hosted_invoice_url.nil? && !hosted_invoice_url_present?)]
    getter hosted_invoice_url : String? = nil
    MAX_LENGTH_FOR_HOSTED_INVOICE_URL = 5000

    @[JSON::Field(ignore: true)]
    property? hosted_invoice_url_present : Bool = false

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
    @[JSON::Field(key: "invoice_pdf", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: invoice_pdf.nil? && !invoice_pdf_present?)]
    getter invoice_pdf : String? = nil
    MAX_LENGTH_FOR_INVOICE_PDF = 5000

    @[JSON::Field(ignore: true)]
    property? invoice_pdf_present : Bool = false

    @[JSON::Field(key: "last_finalization_error", type: Stripe::InvoiceLastFinalizationError?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last_finalization_error.nil? && !last_finalization_error_present?)]
    getter last_finalization_error : Stripe::InvoiceLastFinalizationError? = nil

    @[JSON::Field(ignore: true)]
    property? last_finalization_error_present : Bool = false

    @[JSON::Field(key: "latest_revision", type: Stripe::InvoiceLatestRevision?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: latest_revision.nil? && !latest_revision_present?)]
    getter latest_revision : Stripe::InvoiceLatestRevision? = nil

    @[JSON::Field(ignore: true)]
    property? latest_revision_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
    @[JSON::Field(key: "next_payment_attempt", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: next_payment_attempt.nil? && !next_payment_attempt_present?)]
    getter next_payment_attempt : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? next_payment_attempt_present : Bool = false

    # A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
    @[JSON::Field(key: "number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: number.nil? && !number_present?)]
    getter number : String? = nil
    MAX_LENGTH_FOR_NUMBER = 5000

    @[JSON::Field(ignore: true)]
    property? number_present : Bool = false

    @[JSON::Field(key: "on_behalf_of", type: Stripe::InvoiceOnBehalfOf?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    getter on_behalf_of : Stripe::InvoiceOnBehalfOf? = nil

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "payment_intent", type: Stripe::InvoicePaymentIntent?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_intent.nil? && !payment_intent_present?)]
    getter payment_intent : Stripe::InvoicePaymentIntent? = nil

    @[JSON::Field(ignore: true)]
    property? payment_intent_present : Bool = false

    @[JSON::Field(key: "quote", type: Stripe::InvoiceQuote?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: quote.nil? && !quote_present?)]
    getter quote : Stripe::InvoiceQuote? = nil

    @[JSON::Field(ignore: true)]
    property? quote_present : Bool = false

    # This is the transaction number that appears on email receipts sent for this invoice.
    @[JSON::Field(key: "receipt_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: receipt_number.nil? && !receipt_number_present?)]
    getter receipt_number : String? = nil
    MAX_LENGTH_FOR_RECEIPT_NUMBER = 5000

    @[JSON::Field(ignore: true)]
    property? receipt_number_present : Bool = false

    @[JSON::Field(key: "rendering_options", type: Stripe::InvoiceRenderingOptions?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: rendering_options.nil? && !rendering_options_present?)]
    getter rendering_options : Stripe::InvoiceRenderingOptions? = nil

    @[JSON::Field(ignore: true)]
    property? rendering_options_present : Bool = false

    # Extra information about an invoice for the customer's credit card statement.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [deleted, draft, open, paid, uncollectible, void]."
    VALID_VALUES_FOR_STATUS  = String.static_array("deleted", "draft", "open", "paid", "uncollectible", "void")

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    @[JSON::Field(key: "subscription", type: Stripe::InvoiceSubscription?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: subscription.nil? && !subscription_present?)]
    getter subscription : Stripe::InvoiceSubscription? = nil

    @[JSON::Field(ignore: true)]
    property? subscription_present : Bool = false

    # Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
    @[JSON::Field(key: "subscription_proration_date", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_proration_date : Int64? = nil

    # The integer amount in %s representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
    @[JSON::Field(key: "subtotal_excluding_tax", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: subtotal_excluding_tax.nil? && !subtotal_excluding_tax_present?)]
    getter subtotal_excluding_tax : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? subtotal_excluding_tax_present : Bool = false

    # The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
    @[JSON::Field(key: "tax", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tax.nil? && !tax_present?)]
    getter tax : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? tax_present : Bool = false

    @[JSON::Field(key: "test_clock", type: Stripe::InvoiceTestClock?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: test_clock.nil? && !test_clock_present?)]
    getter test_clock : Stripe::InvoiceTestClock? = nil

    @[JSON::Field(ignore: true)]
    property? test_clock_present : Bool = false

    @[JSON::Field(key: "threshold_reason", type: Stripe::InvoiceThresholdReason?, default: nil, required: false, nullable: false, emit_null: false)]
    getter threshold_reason : Stripe::InvoiceThresholdReason? = nil

    # The aggregate amounts calculated per discount across all line items.
    @[JSON::Field(key: "total_discount_amounts", type: Array(Stripe::DiscountsResourceDiscountAmount)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: total_discount_amounts.nil? && !total_discount_amounts_present?)]
    getter total_discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil

    @[JSON::Field(ignore: true)]
    property? total_discount_amounts_present : Bool = false

    # The integer amount in %s representing the total amount of the invoice including all discounts but excluding all tax.
    @[JSON::Field(key: "total_excluding_tax", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: total_excluding_tax.nil? && !total_excluding_tax_present?)]
    getter total_excluding_tax : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? total_excluding_tax_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: Stripe::InvoiceTransferData1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    getter transfer_data : Stripe::InvoiceTransferData1? = nil

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
    @[JSON::Field(key: "webhooks_delivered_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: webhooks_delivered_at.nil? && !webhooks_delivered_at_present?)]
    getter webhooks_delivered_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? webhooks_delivered_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_due : Int64? = nil,
      @amount_paid : Int64? = nil,
      @amount_remaining : Int64? = nil,
      @attempt_count : Int64? = nil,
      @attempted : Bool? = nil,
      @automatic_tax : Stripe::AutomaticTax? = nil,
      @collection_method : String? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @default_tax_rates : Array(Stripe::TaxRate)? = nil,
      @lines : Stripe::InvoiceLinesList1? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @paid : Bool? = nil,
      @paid_out_of_band : Bool? = nil,
      @payment_settings : Stripe::InvoicesPaymentSettings? = nil,
      @period_end : Int64? = nil,
      @period_start : Int64? = nil,
      @post_payment_credit_notes_amount : Int64? = nil,
      @pre_payment_credit_notes_amount : Int64? = nil,
      @starting_balance : Int64? = nil,
      @status_transitions : Stripe::InvoicesStatusTransitions? = nil,
      @subtotal : Int64? = nil,
      @total : Int64? = nil,
      @total_tax_amounts : Array(Stripe::InvoiceTaxAmount)? = nil,
      # Optional properties
      @account_country : String? = nil,
      @account_name : String? = nil,
      @account_tax_ids : Array(Stripe::InvoiceAccountTaxIdsInner)? = nil,
      @application : Stripe::InvoiceApplication? = nil,
      @application_fee_amount : Int64? = nil,
      @auto_advance : Bool? = nil,
      @billing_reason : String? = nil,
      @charge : Stripe::InvoiceCharge? = nil,
      @custom_fields : Array(Stripe::InvoiceSettingCustomField)? = nil,
      @customer : Stripe::InvoiceCustomer? = nil,
      @customer_address : Stripe::InvoiceCustomerAddress? = nil,
      @customer_email : String? = nil,
      @customer_name : String? = nil,
      @customer_phone : String? = nil,
      @customer_shipping : Stripe::InvoiceCustomerShipping? = nil,
      @customer_tax_exempt : String? = nil,
      @customer_tax_ids : Array(Stripe::InvoicesResourceInvoiceTaxId)? = nil,
      @default_payment_method : Stripe::InvoiceDefaultPaymentMethod? = nil,
      @default_source : Stripe::InvoiceDefaultSource? = nil,
      @description : String? = nil,
      @discount : Stripe::InvoiceDiscount? = nil,
      @discounts : Array(Stripe::InvoiceDiscountsInner)? = nil,
      @due_date : Int64? = nil,
      @ending_balance : Int64? = nil,
      @footer : String? = nil,
      @from_invoice : Stripe::InvoiceFromInvoice? = nil,
      @hosted_invoice_url : String? = nil,
      @id : String? = nil,
      @invoice_pdf : String? = nil,
      @last_finalization_error : Stripe::InvoiceLastFinalizationError? = nil,
      @latest_revision : Stripe::InvoiceLatestRevision? = nil,
      @metadata : Hash(String, String)? = nil,
      @next_payment_attempt : Int64? = nil,
      @number : String? = nil,
      @on_behalf_of : Stripe::InvoiceOnBehalfOf? = nil,
      @payment_intent : Stripe::InvoicePaymentIntent? = nil,
      @quote : Stripe::InvoiceQuote? = nil,
      @receipt_number : String? = nil,
      @rendering_options : Stripe::InvoiceRenderingOptions? = nil,
      @statement_descriptor : String? = nil,
      @status : String? = nil,
      @subscription : Stripe::InvoiceSubscription? = nil,
      @subscription_proration_date : Int64? = nil,
      @subtotal_excluding_tax : Int64? = nil,
      @tax : Int64? = nil,
      @test_clock : Stripe::InvoiceTestClock? = nil,
      @threshold_reason : Stripe::InvoiceThresholdReason? = nil,
      @total_discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil,
      @total_excluding_tax : Int64? = nil,
      @transfer_data : Stripe::InvoiceTransferData1? = nil,
      @webhooks_delivered_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount_due\" is required and cannot be null") if @amount_due.nil?

      invalid_properties.push("\"amount_paid\" is required and cannot be null") if @amount_paid.nil?

      invalid_properties.push("\"amount_remaining\" is required and cannot be null") if @amount_remaining.nil?

      invalid_properties.push("\"attempt_count\" is required and cannot be null") if @attempt_count.nil?

      invalid_properties.push("\"attempted\" is required and cannot be null") if @attempted.nil?

      invalid_properties.push("\"automatic_tax\" is required and cannot be null") if @automatic_tax.nil?

      unless (_automatic_tax = @automatic_tax).nil?
        invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax")) if _automatic_tax.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"collection_method\" is required and cannot be null") if @collection_method.nil?

      unless (_collection_method = @collection_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_COLLECTION_METHOD) unless OpenApi::EnumValidator.valid?(_collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"default_tax_rates\" is required and cannot be null") if @default_tax_rates.nil?

      unless (_default_tax_rates = @default_tax_rates).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "default_tax_rates", container: _default_tax_rates)) if _default_tax_rates.is_a?(Array)
      end
      invalid_properties.push("\"lines\" is required and cannot be null") if @lines.nil?

      unless (_lines = @lines).nil?
        invalid_properties.concat(_lines.list_invalid_properties_for("lines")) if _lines.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"paid\" is required and cannot be null") if @paid.nil?

      invalid_properties.push("\"paid_out_of_band\" is required and cannot be null") if @paid_out_of_band.nil?

      invalid_properties.push("\"payment_settings\" is required and cannot be null") if @payment_settings.nil?

      unless (_payment_settings = @payment_settings).nil?
        invalid_properties.concat(_payment_settings.list_invalid_properties_for("payment_settings")) if _payment_settings.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"period_end\" is required and cannot be null") if @period_end.nil?

      invalid_properties.push("\"period_start\" is required and cannot be null") if @period_start.nil?

      invalid_properties.push("\"post_payment_credit_notes_amount\" is required and cannot be null") if @post_payment_credit_notes_amount.nil?

      invalid_properties.push("\"pre_payment_credit_notes_amount\" is required and cannot be null") if @pre_payment_credit_notes_amount.nil?

      invalid_properties.push("\"starting_balance\" is required and cannot be null") if @starting_balance.nil?

      invalid_properties.push("\"status_transitions\" is required and cannot be null") if @status_transitions.nil?

      unless (_status_transitions = @status_transitions).nil?
        invalid_properties.concat(_status_transitions.list_invalid_properties_for("status_transitions")) if _status_transitions.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"subtotal\" is required and cannot be null") if @subtotal.nil?

      invalid_properties.push("\"total\" is required and cannot be null") if @total.nil?

      invalid_properties.push("\"total_tax_amounts\" is required and cannot be null") if @total_tax_amounts.nil?

      unless (_total_tax_amounts = @total_tax_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "total_tax_amounts", container: _total_tax_amounts)) if _total_tax_amounts.is_a?(Array)
      end
      unless (_account_country = @account_country).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_country", _account_country.to_s.size, MAX_LENGTH_FOR_ACCOUNT_COUNTRY)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_account_name = @account_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_name", _account_name.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_account_tax_ids = @account_tax_ids).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "account_tax_ids", container: _account_tax_ids)) if _account_tax_ids.is_a?(Array)
      end
      unless (_application = @application).nil?
        invalid_properties.concat(_application.list_invalid_properties_for("application")) if _application.is_a?(OpenApi::Validatable)
      end

      unless (_billing_reason = @billing_reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BILLING_REASON) unless OpenApi::EnumValidator.valid?(_billing_reason, VALID_VALUES_FOR_BILLING_REASON)
      end
      unless (_charge = @charge).nil?
        invalid_properties.concat(_charge.list_invalid_properties_for("charge")) if _charge.is_a?(OpenApi::Validatable)
      end
      unless (_custom_fields = @custom_fields).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "custom_fields", container: _custom_fields)) if _custom_fields.is_a?(Array)
      end
      unless (_customer = @customer).nil?
        invalid_properties.concat(_customer.list_invalid_properties_for("customer")) if _customer.is_a?(OpenApi::Validatable)
      end
      unless (_customer_address = @customer_address).nil?
        invalid_properties.concat(_customer_address.list_invalid_properties_for("customer_address")) if _customer_address.is_a?(OpenApi::Validatable)
      end
      unless (_customer_email = @customer_email).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_email", _customer_email.to_s.size, MAX_LENGTH_FOR_CUSTOMER_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_name = @customer_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_name", _customer_name.to_s.size, MAX_LENGTH_FOR_CUSTOMER_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_phone = @customer_phone).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_phone", _customer_phone.to_s.size, MAX_LENGTH_FOR_CUSTOMER_PHONE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_shipping = @customer_shipping).nil?
        invalid_properties.concat(_customer_shipping.list_invalid_properties_for("customer_shipping")) if _customer_shipping.is_a?(OpenApi::Validatable)
      end
      unless (_customer_tax_exempt = @customer_tax_exempt).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CUSTOMER_TAX_EXEMPT) unless OpenApi::EnumValidator.valid?(_customer_tax_exempt, VALID_VALUES_FOR_CUSTOMER_TAX_EXEMPT)
      end
      unless (_customer_tax_ids = @customer_tax_ids).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "customer_tax_ids", container: _customer_tax_ids)) if _customer_tax_ids.is_a?(Array)
      end
      unless (_default_payment_method = @default_payment_method).nil?
        invalid_properties.concat(_default_payment_method.list_invalid_properties_for("default_payment_method")) if _default_payment_method.is_a?(OpenApi::Validatable)
      end
      unless (_default_source = @default_source).nil?
        invalid_properties.concat(_default_source.list_invalid_properties_for("default_source")) if _default_source.is_a?(OpenApi::Validatable)
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_discount = @discount).nil?
        invalid_properties.concat(_discount.list_invalid_properties_for("discount")) if _discount.is_a?(OpenApi::Validatable)
      end
      unless (_discounts = @discounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "discounts", container: _discounts)) if _discounts.is_a?(Array)
      end

      unless (_footer = @footer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("footer", _footer.to_s.size, MAX_LENGTH_FOR_FOOTER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_from_invoice = @from_invoice).nil?
        invalid_properties.concat(_from_invoice.list_invalid_properties_for("from_invoice")) if _from_invoice.is_a?(OpenApi::Validatable)
      end
      unless (_hosted_invoice_url = @hosted_invoice_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("hosted_invoice_url", _hosted_invoice_url.to_s.size, MAX_LENGTH_FOR_HOSTED_INVOICE_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_invoice_pdf = @invoice_pdf).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("invoice_pdf", _invoice_pdf.to_s.size, MAX_LENGTH_FOR_INVOICE_PDF)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_last_finalization_error = @last_finalization_error).nil?
        invalid_properties.concat(_last_finalization_error.list_invalid_properties_for("last_finalization_error")) if _last_finalization_error.is_a?(OpenApi::Validatable)
      end
      unless (_latest_revision = @latest_revision).nil?
        invalid_properties.concat(_latest_revision.list_invalid_properties_for("latest_revision")) if _latest_revision.is_a?(OpenApi::Validatable)
      end

      unless (_number = @number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("number", _number.to_s.size, MAX_LENGTH_FOR_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_on_behalf_of = @on_behalf_of).nil?
        invalid_properties.concat(_on_behalf_of.list_invalid_properties_for("on_behalf_of")) if _on_behalf_of.is_a?(OpenApi::Validatable)
      end
      unless (_payment_intent = @payment_intent).nil?
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      unless (_quote = @quote).nil?
        invalid_properties.concat(_quote.list_invalid_properties_for("quote")) if _quote.is_a?(OpenApi::Validatable)
      end
      unless (_receipt_number = @receipt_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_number", _receipt_number.to_s.size, MAX_LENGTH_FOR_RECEIPT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_rendering_options = @rendering_options).nil?
        invalid_properties.concat(_rendering_options.list_invalid_properties_for("rendering_options")) if _rendering_options.is_a?(OpenApi::Validatable)
      end
      unless (_statement_descriptor = @statement_descriptor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      unless (_subscription = @subscription).nil?
        invalid_properties.concat(_subscription.list_invalid_properties_for("subscription")) if _subscription.is_a?(OpenApi::Validatable)
      end

      unless (_test_clock = @test_clock).nil?
        invalid_properties.concat(_test_clock.list_invalid_properties_for("test_clock")) if _test_clock.is_a?(OpenApi::Validatable)
      end
      unless (_threshold_reason = @threshold_reason).nil?
        invalid_properties.concat(_threshold_reason.list_invalid_properties_for("threshold_reason")) if _threshold_reason.is_a?(OpenApi::Validatable)
      end
      unless (_total_discount_amounts = @total_discount_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "total_discount_amounts", container: _total_discount_amounts)) if _total_discount_amounts.is_a?(Array)
      end

      unless (_transfer_data = @transfer_data).nil?
        invalid_properties.concat(_transfer_data.list_invalid_properties_for("transfer_data")) if _transfer_data.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount_due.nil?

      return false if @amount_paid.nil?

      return false if @amount_remaining.nil?

      return false if @attempt_count.nil?

      return false if @attempted.nil?

      return false if @automatic_tax.nil?
      unless (_automatic_tax = @automatic_tax).nil?
        return false if _automatic_tax.is_a?(OpenApi::Validatable) && !_automatic_tax.valid?
      end

      return false if @collection_method.nil?
      unless (_collection_method = @collection_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      end

      return false if @created.nil?

      return false if @currency.nil?

      return false if @default_tax_rates.nil?
      unless (_default_tax_rates = @default_tax_rates).nil?
        return false if _default_tax_rates.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _default_tax_rates)
      end

      return false if @lines.nil?
      unless (_lines = @lines).nil?
        return false if _lines.is_a?(OpenApi::Validatable) && !_lines.valid?
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @paid.nil?

      return false if @paid_out_of_band.nil?

      return false if @payment_settings.nil?
      unless (_payment_settings = @payment_settings).nil?
        return false if _payment_settings.is_a?(OpenApi::Validatable) && !_payment_settings.valid?
      end

      return false if @period_end.nil?

      return false if @period_start.nil?

      return false if @post_payment_credit_notes_amount.nil?

      return false if @pre_payment_credit_notes_amount.nil?

      return false if @starting_balance.nil?

      return false if @status_transitions.nil?
      unless (_status_transitions = @status_transitions).nil?
        return false if _status_transitions.is_a?(OpenApi::Validatable) && !_status_transitions.valid?
      end

      return false if @subtotal.nil?

      return false if @total.nil?

      return false if @total_tax_amounts.nil?
      unless (_total_tax_amounts = @total_tax_amounts).nil?
        return false if _total_tax_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _total_tax_amounts)
      end

      unless (_account_country = @account_country).nil?
        return false if _account_country.to_s.size > MAX_LENGTH_FOR_ACCOUNT_COUNTRY
      end

      unless (_account_name = @account_name).nil?
        return false if _account_name.to_s.size > MAX_LENGTH_FOR_ACCOUNT_NAME
      end

      unless (_account_tax_ids = @account_tax_ids).nil?
        return false if _account_tax_ids.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _account_tax_ids)
      end

      unless (_application = @application).nil?
        return false if _application.is_a?(OpenApi::Validatable) && !_application.valid?
      end

      unless (_billing_reason = @billing_reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_billing_reason, VALID_VALUES_FOR_BILLING_REASON)
      end

      unless (_charge = @charge).nil?
        return false if _charge.is_a?(OpenApi::Validatable) && !_charge.valid?
      end

      unless (_custom_fields = @custom_fields).nil?
        return false if _custom_fields.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _custom_fields)
      end

      unless (_customer = @customer).nil?
        return false if _customer.is_a?(OpenApi::Validatable) && !_customer.valid?
      end

      unless (_customer_address = @customer_address).nil?
        return false if _customer_address.is_a?(OpenApi::Validatable) && !_customer_address.valid?
      end

      unless (_customer_email = @customer_email).nil?
        return false if _customer_email.to_s.size > MAX_LENGTH_FOR_CUSTOMER_EMAIL
      end

      unless (_customer_name = @customer_name).nil?
        return false if _customer_name.to_s.size > MAX_LENGTH_FOR_CUSTOMER_NAME
      end

      unless (_customer_phone = @customer_phone).nil?
        return false if _customer_phone.to_s.size > MAX_LENGTH_FOR_CUSTOMER_PHONE
      end

      unless (_customer_shipping = @customer_shipping).nil?
        return false if _customer_shipping.is_a?(OpenApi::Validatable) && !_customer_shipping.valid?
      end

      unless (_customer_tax_exempt = @customer_tax_exempt).nil?
        return false unless OpenApi::EnumValidator.valid?(_customer_tax_exempt, VALID_VALUES_FOR_CUSTOMER_TAX_EXEMPT)
      end

      unless (_customer_tax_ids = @customer_tax_ids).nil?
        return false if _customer_tax_ids.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _customer_tax_ids)
      end

      unless (_default_payment_method = @default_payment_method).nil?
        return false if _default_payment_method.is_a?(OpenApi::Validatable) && !_default_payment_method.valid?
      end

      unless (_default_source = @default_source).nil?
        return false if _default_source.is_a?(OpenApi::Validatable) && !_default_source.valid?
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_discount = @discount).nil?
        return false if _discount.is_a?(OpenApi::Validatable) && !_discount.valid?
      end

      unless (_discounts = @discounts).nil?
        return false if _discounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _discounts)
      end

      unless (_footer = @footer).nil?
        return false if _footer.to_s.size > MAX_LENGTH_FOR_FOOTER
      end

      unless (_from_invoice = @from_invoice).nil?
        return false if _from_invoice.is_a?(OpenApi::Validatable) && !_from_invoice.valid?
      end

      unless (_hosted_invoice_url = @hosted_invoice_url).nil?
        return false if _hosted_invoice_url.to_s.size > MAX_LENGTH_FOR_HOSTED_INVOICE_URL
      end

      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      unless (_invoice_pdf = @invoice_pdf).nil?
        return false if _invoice_pdf.to_s.size > MAX_LENGTH_FOR_INVOICE_PDF
      end

      unless (_last_finalization_error = @last_finalization_error).nil?
        return false if _last_finalization_error.is_a?(OpenApi::Validatable) && !_last_finalization_error.valid?
      end

      unless (_latest_revision = @latest_revision).nil?
        return false if _latest_revision.is_a?(OpenApi::Validatable) && !_latest_revision.valid?
      end

      unless (_number = @number).nil?
        return false if _number.to_s.size > MAX_LENGTH_FOR_NUMBER
      end

      unless (_on_behalf_of = @on_behalf_of).nil?
        return false if _on_behalf_of.is_a?(OpenApi::Validatable) && !_on_behalf_of.valid?
      end

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      unless (_quote = @quote).nil?
        return false if _quote.is_a?(OpenApi::Validatable) && !_quote.valid?
      end

      unless (_receipt_number = @receipt_number).nil?
        return false if _receipt_number.to_s.size > MAX_LENGTH_FOR_RECEIPT_NUMBER
      end

      unless (_rendering_options = @rendering_options).nil?
        return false if _rendering_options.is_a?(OpenApi::Validatable) && !_rendering_options.valid?
      end

      unless (_statement_descriptor = @statement_descriptor).nil?
        return false if _statement_descriptor.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR
      end

      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      unless (_subscription = @subscription).nil?
        return false if _subscription.is_a?(OpenApi::Validatable) && !_subscription.valid?
      end

      unless (_test_clock = @test_clock).nil?
        return false if _test_clock.is_a?(OpenApi::Validatable) && !_test_clock.valid?
      end

      unless (_threshold_reason = @threshold_reason).nil?
        return false if _threshold_reason.is_a?(OpenApi::Validatable) && !_threshold_reason.valid?
      end

      unless (_total_discount_amounts = @total_discount_amounts).nil?
        return false if _total_discount_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _total_discount_amounts)
      end

      unless (_transfer_data = @transfer_data).nil?
        return false if _transfer_data.is_a?(OpenApi::Validatable) && !_transfer_data.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_due Object to be assigned
    def amount_due=(amount_due : Int64?)
      if amount_due.nil?
        raise ArgumentError.new("\"amount_due\" is required and cannot be null")
      end
      _amount_due = amount_due.not_nil!
      @amount_due = _amount_due
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_paid Object to be assigned
    def amount_paid=(amount_paid : Int64?)
      if amount_paid.nil?
        raise ArgumentError.new("\"amount_paid\" is required and cannot be null")
      end
      _amount_paid = amount_paid.not_nil!
      @amount_paid = _amount_paid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_remaining Object to be assigned
    def amount_remaining=(amount_remaining : Int64?)
      if amount_remaining.nil?
        raise ArgumentError.new("\"amount_remaining\" is required and cannot be null")
      end
      _amount_remaining = amount_remaining.not_nil!
      @amount_remaining = _amount_remaining
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attempt_count Object to be assigned
    def attempt_count=(attempt_count : Int64?)
      if attempt_count.nil?
        raise ArgumentError.new("\"attempt_count\" is required and cannot be null")
      end
      _attempt_count = attempt_count.not_nil!
      @attempt_count = _attempt_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attempted Object to be assigned
    def attempted=(attempted : Bool?)
      if attempted.nil?
        raise ArgumentError.new("\"attempted\" is required and cannot be null")
      end
      _attempted = attempted.not_nil!
      @attempted = _attempted
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::AutomaticTax?)
      if automatic_tax.nil?
        raise ArgumentError.new("\"automatic_tax\" is required and cannot be null")
      end
      _automatic_tax = automatic_tax.not_nil!
      _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
      @automatic_tax = _automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method : String?)
      if collection_method.nil?
        raise ArgumentError.new("\"collection_method\" is required and cannot be null")
      end
      _collection_method = collection_method.not_nil!
      OpenApi::EnumValidator.validate("collection_method", _collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      @collection_method = _collection_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_tax_rates Object to be assigned
    def default_tax_rates=(default_tax_rates : Array(Stripe::TaxRate)?)
      if default_tax_rates.nil?
        raise ArgumentError.new("\"default_tax_rates\" is required and cannot be null")
      end
      _default_tax_rates = default_tax_rates.not_nil!
      OpenApi::ContainerValidator.validate(container: _default_tax_rates) if _default_tax_rates.is_a?(Array)
      @default_tax_rates = _default_tax_rates
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lines Object to be assigned
    def lines=(lines : Stripe::InvoiceLinesList1?)
      if lines.nil?
        raise ArgumentError.new("\"lines\" is required and cannot be null")
      end
      _lines = lines.not_nil!
      _lines.validate if _lines.is_a?(OpenApi::Validatable)
      @lines = _lines
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paid Object to be assigned
    def paid=(paid : Bool?)
      if paid.nil?
        raise ArgumentError.new("\"paid\" is required and cannot be null")
      end
      _paid = paid.not_nil!
      @paid = _paid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paid_out_of_band Object to be assigned
    def paid_out_of_band=(paid_out_of_band : Bool?)
      if paid_out_of_band.nil?
        raise ArgumentError.new("\"paid_out_of_band\" is required and cannot be null")
      end
      _paid_out_of_band = paid_out_of_band.not_nil!
      @paid_out_of_band = _paid_out_of_band
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_settings Object to be assigned
    def payment_settings=(payment_settings : Stripe::InvoicesPaymentSettings?)
      if payment_settings.nil?
        raise ArgumentError.new("\"payment_settings\" is required and cannot be null")
      end
      _payment_settings = payment_settings.not_nil!
      _payment_settings.validate if _payment_settings.is_a?(OpenApi::Validatable)
      @payment_settings = _payment_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] period_end Object to be assigned
    def period_end=(period_end : Int64?)
      if period_end.nil?
        raise ArgumentError.new("\"period_end\" is required and cannot be null")
      end
      _period_end = period_end.not_nil!
      @period_end = _period_end
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] period_start Object to be assigned
    def period_start=(period_start : Int64?)
      if period_start.nil?
        raise ArgumentError.new("\"period_start\" is required and cannot be null")
      end
      _period_start = period_start.not_nil!
      @period_start = _period_start
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] post_payment_credit_notes_amount Object to be assigned
    def post_payment_credit_notes_amount=(post_payment_credit_notes_amount : Int64?)
      if post_payment_credit_notes_amount.nil?
        raise ArgumentError.new("\"post_payment_credit_notes_amount\" is required and cannot be null")
      end
      _post_payment_credit_notes_amount = post_payment_credit_notes_amount.not_nil!
      @post_payment_credit_notes_amount = _post_payment_credit_notes_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pre_payment_credit_notes_amount Object to be assigned
    def pre_payment_credit_notes_amount=(pre_payment_credit_notes_amount : Int64?)
      if pre_payment_credit_notes_amount.nil?
        raise ArgumentError.new("\"pre_payment_credit_notes_amount\" is required and cannot be null")
      end
      _pre_payment_credit_notes_amount = pre_payment_credit_notes_amount.not_nil!
      @pre_payment_credit_notes_amount = _pre_payment_credit_notes_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] starting_balance Object to be assigned
    def starting_balance=(starting_balance : Int64?)
      if starting_balance.nil?
        raise ArgumentError.new("\"starting_balance\" is required and cannot be null")
      end
      _starting_balance = starting_balance.not_nil!
      @starting_balance = _starting_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_transitions Object to be assigned
    def status_transitions=(status_transitions : Stripe::InvoicesStatusTransitions?)
      if status_transitions.nil?
        raise ArgumentError.new("\"status_transitions\" is required and cannot be null")
      end
      _status_transitions = status_transitions.not_nil!
      _status_transitions.validate if _status_transitions.is_a?(OpenApi::Validatable)
      @status_transitions = _status_transitions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtotal Object to be assigned
    def subtotal=(subtotal : Int64?)
      if subtotal.nil?
        raise ArgumentError.new("\"subtotal\" is required and cannot be null")
      end
      _subtotal = subtotal.not_nil!
      @subtotal = _subtotal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total Object to be assigned
    def total=(total : Int64?)
      if total.nil?
        raise ArgumentError.new("\"total\" is required and cannot be null")
      end
      _total = total.not_nil!
      @total = _total
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_tax_amounts Object to be assigned
    def total_tax_amounts=(total_tax_amounts : Array(Stripe::InvoiceTaxAmount)?)
      if total_tax_amounts.nil?
        raise ArgumentError.new("\"total_tax_amounts\" is required and cannot be null")
      end
      _total_tax_amounts = total_tax_amounts.not_nil!
      OpenApi::ContainerValidator.validate(container: _total_tax_amounts) if _total_tax_amounts.is_a?(Array)
      @total_tax_amounts = _total_tax_amounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_country Object to be assigned
    def account_country=(account_country : String?)
      if account_country.nil?
        return @account_country = nil
      end
      _account_country = account_country.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("account_country", _account_country.to_s.size, MAX_LENGTH_FOR_ACCOUNT_COUNTRY)
      @account_country = _account_country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_name Object to be assigned
    def account_name=(account_name : String?)
      if account_name.nil?
        return @account_name = nil
      end
      _account_name = account_name.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("account_name", _account_name.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NAME)
      @account_name = _account_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_tax_ids Object to be assigned
    def account_tax_ids=(account_tax_ids : Array(Stripe::InvoiceAccountTaxIdsInner)?)
      if account_tax_ids.nil?
        return @account_tax_ids = nil
      end
      _account_tax_ids = account_tax_ids.not_nil!
      OpenApi::ContainerValidator.validate(container: _account_tax_ids) if _account_tax_ids.is_a?(Array)
      @account_tax_ids = _account_tax_ids
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(application : Stripe::InvoiceApplication?)
      if application.nil?
        return @application = nil
      end
      _application = application.not_nil!
      _application.validate if _application.is_a?(OpenApi::Validatable)
      @application = _application
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_amount Object to be assigned
    def application_fee_amount=(application_fee_amount : Int64?)
      if application_fee_amount.nil?
        return @application_fee_amount = nil
      end
      _application_fee_amount = application_fee_amount.not_nil!
      @application_fee_amount = _application_fee_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auto_advance Object to be assigned
    def auto_advance=(auto_advance : Bool?)
      if auto_advance.nil?
        return @auto_advance = nil
      end
      _auto_advance = auto_advance.not_nil!
      @auto_advance = _auto_advance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_reason Object to be assigned
    def billing_reason=(billing_reason : String?)
      if billing_reason.nil?
        return @billing_reason = nil
      end
      _billing_reason = billing_reason.not_nil!
      OpenApi::EnumValidator.validate("billing_reason", _billing_reason, VALID_VALUES_FOR_BILLING_REASON)
      @billing_reason = _billing_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(charge : Stripe::InvoiceCharge?)
      if charge.nil?
        return @charge = nil
      end
      _charge = charge.not_nil!
      _charge.validate if _charge.is_a?(OpenApi::Validatable)
      @charge = _charge
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(custom_fields : Array(Stripe::InvoiceSettingCustomField)?)
      if custom_fields.nil?
        return @custom_fields = nil
      end
      _custom_fields = custom_fields.not_nil!
      OpenApi::ContainerValidator.validate(container: _custom_fields) if _custom_fields.is_a?(Array)
      @custom_fields = _custom_fields
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : Stripe::InvoiceCustomer?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      _customer.validate if _customer.is_a?(OpenApi::Validatable)
      @customer = _customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_address Object to be assigned
    def customer_address=(customer_address : Stripe::InvoiceCustomerAddress?)
      if customer_address.nil?
        return @customer_address = nil
      end
      _customer_address = customer_address.not_nil!
      _customer_address.validate if _customer_address.is_a?(OpenApi::Validatable)
      @customer_address = _customer_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_email Object to be assigned
    def customer_email=(customer_email : String?)
      if customer_email.nil?
        return @customer_email = nil
      end
      _customer_email = customer_email.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("customer_email", _customer_email.to_s.size, MAX_LENGTH_FOR_CUSTOMER_EMAIL)
      @customer_email = _customer_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_name Object to be assigned
    def customer_name=(customer_name : String?)
      if customer_name.nil?
        return @customer_name = nil
      end
      _customer_name = customer_name.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("customer_name", _customer_name.to_s.size, MAX_LENGTH_FOR_CUSTOMER_NAME)
      @customer_name = _customer_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_phone Object to be assigned
    def customer_phone=(customer_phone : String?)
      if customer_phone.nil?
        return @customer_phone = nil
      end
      _customer_phone = customer_phone.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("customer_phone", _customer_phone.to_s.size, MAX_LENGTH_FOR_CUSTOMER_PHONE)
      @customer_phone = _customer_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_shipping Object to be assigned
    def customer_shipping=(customer_shipping : Stripe::InvoiceCustomerShipping?)
      if customer_shipping.nil?
        return @customer_shipping = nil
      end
      _customer_shipping = customer_shipping.not_nil!
      _customer_shipping.validate if _customer_shipping.is_a?(OpenApi::Validatable)
      @customer_shipping = _customer_shipping
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_tax_exempt Object to be assigned
    def customer_tax_exempt=(customer_tax_exempt : String?)
      if customer_tax_exempt.nil?
        return @customer_tax_exempt = nil
      end
      _customer_tax_exempt = customer_tax_exempt.not_nil!
      OpenApi::EnumValidator.validate("customer_tax_exempt", _customer_tax_exempt, VALID_VALUES_FOR_CUSTOMER_TAX_EXEMPT)
      @customer_tax_exempt = _customer_tax_exempt
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_tax_ids Object to be assigned
    def customer_tax_ids=(customer_tax_ids : Array(Stripe::InvoicesResourceInvoiceTaxId)?)
      if customer_tax_ids.nil?
        return @customer_tax_ids = nil
      end
      _customer_tax_ids = customer_tax_ids.not_nil!
      OpenApi::ContainerValidator.validate(container: _customer_tax_ids) if _customer_tax_ids.is_a?(Array)
      @customer_tax_ids = _customer_tax_ids
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(default_payment_method : Stripe::InvoiceDefaultPaymentMethod?)
      if default_payment_method.nil?
        return @default_payment_method = nil
      end
      _default_payment_method = default_payment_method.not_nil!
      _default_payment_method.validate if _default_payment_method.is_a?(OpenApi::Validatable)
      @default_payment_method = _default_payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_source Object to be assigned
    def default_source=(default_source : Stripe::InvoiceDefaultSource?)
      if default_source.nil?
        return @default_source = nil
      end
      _default_source = default_source.not_nil!
      _default_source.validate if _default_source.is_a?(OpenApi::Validatable)
      @default_source = _default_source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount Object to be assigned
    def discount=(discount : Stripe::InvoiceDiscount?)
      if discount.nil?
        return @discount = nil
      end
      _discount = discount.not_nil!
      _discount.validate if _discount.is_a?(OpenApi::Validatable)
      @discount = _discount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(discounts : Array(Stripe::InvoiceDiscountsInner)?)
      if discounts.nil?
        return @discounts = nil
      end
      _discounts = discounts.not_nil!
      OpenApi::ContainerValidator.validate(container: _discounts) if _discounts.is_a?(Array)
      @discounts = _discounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] due_date Object to be assigned
    def due_date=(due_date : Int64?)
      if due_date.nil?
        return @due_date = nil
      end
      _due_date = due_date.not_nil!
      @due_date = _due_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ending_balance Object to be assigned
    def ending_balance=(ending_balance : Int64?)
      if ending_balance.nil?
        return @ending_balance = nil
      end
      _ending_balance = ending_balance.not_nil!
      @ending_balance = _ending_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] footer Object to be assigned
    def footer=(footer : String?)
      if footer.nil?
        return @footer = nil
      end
      _footer = footer.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("footer", _footer.to_s.size, MAX_LENGTH_FOR_FOOTER)
      @footer = _footer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] from_invoice Object to be assigned
    def from_invoice=(from_invoice : Stripe::InvoiceFromInvoice?)
      if from_invoice.nil?
        return @from_invoice = nil
      end
      _from_invoice = from_invoice.not_nil!
      _from_invoice.validate if _from_invoice.is_a?(OpenApi::Validatable)
      @from_invoice = _from_invoice
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_invoice_url Object to be assigned
    def hosted_invoice_url=(hosted_invoice_url : String?)
      if hosted_invoice_url.nil?
        return @hosted_invoice_url = nil
      end
      _hosted_invoice_url = hosted_invoice_url.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("hosted_invoice_url", _hosted_invoice_url.to_s.size, MAX_LENGTH_FOR_HOSTED_INVOICE_URL)
      @hosted_invoice_url = _hosted_invoice_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        return @id = nil
      end
      _id = id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_pdf Object to be assigned
    def invoice_pdf=(invoice_pdf : String?)
      if invoice_pdf.nil?
        return @invoice_pdf = nil
      end
      _invoice_pdf = invoice_pdf.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("invoice_pdf", _invoice_pdf.to_s.size, MAX_LENGTH_FOR_INVOICE_PDF)
      @invoice_pdf = _invoice_pdf
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_finalization_error Object to be assigned
    def last_finalization_error=(last_finalization_error : Stripe::InvoiceLastFinalizationError?)
      if last_finalization_error.nil?
        return @last_finalization_error = nil
      end
      _last_finalization_error = last_finalization_error.not_nil!
      _last_finalization_error.validate if _last_finalization_error.is_a?(OpenApi::Validatable)
      @last_finalization_error = _last_finalization_error
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] latest_revision Object to be assigned
    def latest_revision=(latest_revision : Stripe::InvoiceLatestRevision?)
      if latest_revision.nil?
        return @latest_revision = nil
      end
      _latest_revision = latest_revision.not_nil!
      _latest_revision.validate if _latest_revision.is_a?(OpenApi::Validatable)
      @latest_revision = _latest_revision
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_payment_attempt Object to be assigned
    def next_payment_attempt=(next_payment_attempt : Int64?)
      if next_payment_attempt.nil?
        return @next_payment_attempt = nil
      end
      _next_payment_attempt = next_payment_attempt.not_nil!
      @next_payment_attempt = _next_payment_attempt
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number Object to be assigned
    def number=(number : String?)
      if number.nil?
        return @number = nil
      end
      _number = number.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("number", _number.to_s.size, MAX_LENGTH_FOR_NUMBER)
      @number = _number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(on_behalf_of : Stripe::InvoiceOnBehalfOf?)
      if on_behalf_of.nil?
        return @on_behalf_of = nil
      end
      _on_behalf_of = on_behalf_of.not_nil!
      _on_behalf_of.validate if _on_behalf_of.is_a?(OpenApi::Validatable)
      @on_behalf_of = _on_behalf_of
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(payment_intent : Stripe::InvoicePaymentIntent?)
      if payment_intent.nil?
        return @payment_intent = nil
      end
      _payment_intent = payment_intent.not_nil!
      _payment_intent.validate if _payment_intent.is_a?(OpenApi::Validatable)
      @payment_intent = _payment_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quote Object to be assigned
    def quote=(quote : Stripe::InvoiceQuote?)
      if quote.nil?
        return @quote = nil
      end
      _quote = quote.not_nil!
      _quote.validate if _quote.is_a?(OpenApi::Validatable)
      @quote = _quote
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_number Object to be assigned
    def receipt_number=(receipt_number : String?)
      if receipt_number.nil?
        return @receipt_number = nil
      end
      _receipt_number = receipt_number.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("receipt_number", _receipt_number.to_s.size, MAX_LENGTH_FOR_RECEIPT_NUMBER)
      @receipt_number = _receipt_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rendering_options Object to be assigned
    def rendering_options=(rendering_options : Stripe::InvoiceRenderingOptions?)
      if rendering_options.nil?
        return @rendering_options = nil
      end
      _rendering_options = rendering_options.not_nil!
      _rendering_options.validate if _rendering_options.is_a?(OpenApi::Validatable)
      @rendering_options = _rendering_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        return @statement_descriptor = nil
      end
      _statement_descriptor = statement_descriptor.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
      @statement_descriptor = _statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      OpenApi::EnumValidator.validate("status", _status, VALID_VALUES_FOR_STATUS)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription Object to be assigned
    def subscription=(subscription : Stripe::InvoiceSubscription?)
      if subscription.nil?
        return @subscription = nil
      end
      _subscription = subscription.not_nil!
      _subscription.validate if _subscription.is_a?(OpenApi::Validatable)
      @subscription = _subscription
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_proration_date Object to be assigned
    def subscription_proration_date=(subscription_proration_date : Int64?)
      if subscription_proration_date.nil?
        return @subscription_proration_date = nil
      end
      _subscription_proration_date = subscription_proration_date.not_nil!
      @subscription_proration_date = _subscription_proration_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtotal_excluding_tax Object to be assigned
    def subtotal_excluding_tax=(subtotal_excluding_tax : Int64?)
      if subtotal_excluding_tax.nil?
        return @subtotal_excluding_tax = nil
      end
      _subtotal_excluding_tax = subtotal_excluding_tax.not_nil!
      @subtotal_excluding_tax = _subtotal_excluding_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax Object to be assigned
    def tax=(tax : Int64?)
      if tax.nil?
        return @tax = nil
      end
      _tax = tax.not_nil!
      @tax = _tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock Object to be assigned
    def test_clock=(test_clock : Stripe::InvoiceTestClock?)
      if test_clock.nil?
        return @test_clock = nil
      end
      _test_clock = test_clock.not_nil!
      _test_clock.validate if _test_clock.is_a?(OpenApi::Validatable)
      @test_clock = _test_clock
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] threshold_reason Object to be assigned
    def threshold_reason=(threshold_reason : Stripe::InvoiceThresholdReason?)
      if threshold_reason.nil?
        return @threshold_reason = nil
      end
      _threshold_reason = threshold_reason.not_nil!
      _threshold_reason.validate if _threshold_reason.is_a?(OpenApi::Validatable)
      @threshold_reason = _threshold_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_discount_amounts Object to be assigned
    def total_discount_amounts=(total_discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)?)
      if total_discount_amounts.nil?
        return @total_discount_amounts = nil
      end
      _total_discount_amounts = total_discount_amounts.not_nil!
      OpenApi::ContainerValidator.validate(container: _total_discount_amounts) if _total_discount_amounts.is_a?(Array)
      @total_discount_amounts = _total_discount_amounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_excluding_tax Object to be assigned
    def total_excluding_tax=(total_excluding_tax : Int64?)
      if total_excluding_tax.nil?
        return @total_excluding_tax = nil
      end
      _total_excluding_tax = total_excluding_tax.not_nil!
      @total_excluding_tax = _total_excluding_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(transfer_data : Stripe::InvoiceTransferData1?)
      if transfer_data.nil?
        return @transfer_data = nil
      end
      _transfer_data = transfer_data.not_nil!
      _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
      @transfer_data = _transfer_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhooks_delivered_at Object to be assigned
    def webhooks_delivered_at=(webhooks_delivered_at : Int64?)
      if webhooks_delivered_at.nil?
        return @webhooks_delivered_at = nil
      end
      _webhooks_delivered_at = webhooks_delivered_at.not_nil!
      @webhooks_delivered_at = _webhooks_delivered_at
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_due, @amount_paid, @amount_remaining, @attempt_count, @attempted, @automatic_tax, @collection_method, @created, @currency, @default_tax_rates, @lines, @livemode, @object, @paid, @paid_out_of_band, @payment_settings, @period_end, @period_start, @post_payment_credit_notes_amount, @pre_payment_credit_notes_amount, @starting_balance, @status_transitions, @subtotal, @total, @total_tax_amounts, @account_country, @account_country_present, @account_name, @account_name_present, @account_tax_ids, @account_tax_ids_present, @application, @application_present, @application_fee_amount, @application_fee_amount_present, @auto_advance, @billing_reason, @billing_reason_present, @charge, @charge_present, @custom_fields, @custom_fields_present, @customer, @customer_present, @customer_address, @customer_address_present, @customer_email, @customer_email_present, @customer_name, @customer_name_present, @customer_phone, @customer_phone_present, @customer_shipping, @customer_shipping_present, @customer_tax_exempt, @customer_tax_exempt_present, @customer_tax_ids, @customer_tax_ids_present, @default_payment_method, @default_payment_method_present, @default_source, @default_source_present, @description, @description_present, @discount, @discount_present, @discounts, @discounts_present, @due_date, @due_date_present, @ending_balance, @ending_balance_present, @footer, @footer_present, @from_invoice, @from_invoice_present, @hosted_invoice_url, @hosted_invoice_url_present, @id, @invoice_pdf, @invoice_pdf_present, @last_finalization_error, @last_finalization_error_present, @latest_revision, @latest_revision_present, @metadata, @metadata_present, @next_payment_attempt, @next_payment_attempt_present, @number, @number_present, @on_behalf_of, @on_behalf_of_present, @payment_intent, @payment_intent_present, @quote, @quote_present, @receipt_number, @receipt_number_present, @rendering_options, @rendering_options_present, @statement_descriptor, @statement_descriptor_present, @status, @status_present, @subscription, @subscription_present, @subscription_proration_date, @subtotal_excluding_tax, @subtotal_excluding_tax_present, @tax, @tax_present, @test_clock, @test_clock_present, @threshold_reason, @total_discount_amounts, @total_discount_amounts_present, @total_excluding_tax, @total_excluding_tax_present, @transfer_data, @transfer_data_present, @webhooks_delivered_at, @webhooks_delivered_at_present)
  end
end
