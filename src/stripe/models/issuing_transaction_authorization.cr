#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./balance_transaction"
require "./issuing_authorization"
require "./issuing_authorization_amount_details"
require "./issuing_authorization_cardholder"
require "./issuing_authorization_fleet_data"
require "./issuing_authorization_fuel_data"
require "./issuing_authorization_merchant_data"
require "./issuing_authorization_network_data"
require "./issuing_authorization_pending_request"
require "./issuing_authorization_request"
require "./issuing_authorization_token"
require "./issuing_authorization_treasury"
require "./issuing_authorization_verification_data"
require "./issuing_card"
require "./issuing_transaction"

module Stripe
  # The `Authorization` object that led to this transaction.
  class IssuingTransactionAuthorization
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    @[JSON::Field(key: "amount_details", type: Stripe::IssuingAuthorizationAmountDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount_details : Stripe::IssuingAuthorizationAmountDetails? = nil

    # Whether the authorization has been approved.
    @[JSON::Field(key: "approved", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property approved : Bool? = nil

    # How the card details were provided.
    @[JSON::Field(key: "authorization_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property authorization_method : String? = nil
    ERROR_MESSAGE_FOR_AUTHORIZATION_METHOD = "invalid value for \"authorization_method\", must be one of [chip, contactless, keyed_in, online, swipe]."
    VALID_VALUES_FOR_AUTHORIZATION_METHOD  = String.static_array("chip", "contactless", "keyed_in", "online", "swipe")

    # List of balance transactions associated with this authorization.
    @[JSON::Field(key: "balance_transactions", type: Array(Stripe::BalanceTransaction)?, default: nil, required: true, nullable: false, emit_null: false)]
    property balance_transactions : Array(Stripe::BalanceTransaction)? = nil

    @[JSON::Field(key: "card", type: Stripe::IssuingCard?, default: nil, required: true, nullable: false, emit_null: false)]
    property card : Stripe::IssuingCard? = nil

    @[JSON::Field(key: "cardholder", type: Stripe::IssuingAuthorizationCardholder?, default: nil, required: true, nullable: true, emit_null: true)]
    property cardholder : Stripe::IssuingAuthorizationCardholder? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    @[JSON::Field(key: "fleet", type: Stripe::IssuingAuthorizationFleetData?, default: nil, required: true, nullable: false, emit_null: false)]
    property fleet : Stripe::IssuingAuthorizationFleetData? = nil

    @[JSON::Field(key: "fuel", type: Stripe::IssuingAuthorizationFuelData?, default: nil, required: true, nullable: false, emit_null: false)]
    property fuel : Stripe::IssuingAuthorizationFuelData? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different.
    @[JSON::Field(key: "merchant_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_amount : Int64? = nil

    # The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "merchant_currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_currency : String? = nil

    @[JSON::Field(key: "merchant_data", type: Stripe::IssuingAuthorizationMerchantData?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_data : Stripe::IssuingAuthorizationMerchantData? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    property metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "network_data", type: Stripe::IssuingAuthorizationNetworkData?, default: nil, required: true, nullable: false, emit_null: false)]
    property network_data : Stripe::IssuingAuthorizationNetworkData? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [issuing.authorization]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("issuing.authorization")

    @[JSON::Field(key: "pending_request", type: Stripe::IssuingAuthorizationPendingRequest?, default: nil, required: true, nullable: false, emit_null: false)]
    property pending_request : Stripe::IssuingAuthorizationPendingRequest? = nil

    # History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
    @[JSON::Field(key: "request_history", type: Array(Stripe::IssuingAuthorizationRequest)?, default: nil, required: true, nullable: false, emit_null: false)]
    property request_history : Array(Stripe::IssuingAuthorizationRequest)? = nil

    # The current status of the authorization in its lifecycle.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [closed, pending, reversed]."
    VALID_VALUES_FOR_STATUS  = String.static_array("closed", "pending", "reversed")

    # List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    @[JSON::Field(key: "transactions", type: Array(Stripe::IssuingTransaction)?, default: nil, required: true, nullable: false, emit_null: false)]
    property transactions : Array(Stripe::IssuingTransaction)? = nil

    @[JSON::Field(key: "verification_data", type: Stripe::IssuingAuthorizationVerificationData?, default: nil, required: true, nullable: false, emit_null: false)]
    property verification_data : Stripe::IssuingAuthorizationVerificationData? = nil

    # The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
    @[JSON::Field(key: "wallet", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property wallet : String? = nil
    MAX_LENGTH_FOR_WALLET = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "token", type: Stripe::IssuingAuthorizationToken?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: token.nil? && !token_present?)]
    property token : Stripe::IssuingAuthorizationToken? = nil

    @[JSON::Field(ignore: true)]
    property? token_present : Bool = false

    @[JSON::Field(key: "treasury", type: Stripe::IssuingAuthorizationTreasury?, default: nil, required: false, nullable: false, emit_null: false)]
    property treasury : Stripe::IssuingAuthorizationTreasury? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::IssuingAuthorization,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_details : Stripe::IssuingAuthorizationAmountDetails? = nil,
      @approved : Bool? = nil,
      @authorization_method : String? = nil,
      @balance_transactions : Array(Stripe::BalanceTransaction)? = nil,
      @card : Stripe::IssuingCard? = nil,
      @cardholder : Stripe::IssuingAuthorizationCardholder? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @fleet : Stripe::IssuingAuthorizationFleetData? = nil,
      @fuel : Stripe::IssuingAuthorizationFuelData? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @merchant_amount : Int64? = nil,
      @merchant_currency : String? = nil,
      @merchant_data : Stripe::IssuingAuthorizationMerchantData? = nil,
      @metadata : Hash(String, String)? = nil,
      @network_data : Stripe::IssuingAuthorizationNetworkData? = nil,
      @object : String? = nil,
      @pending_request : Stripe::IssuingAuthorizationPendingRequest? = nil,
      @request_history : Array(Stripe::IssuingAuthorizationRequest)? = nil,
      @status : String? = nil,
      @transactions : Array(Stripe::IssuingTransaction)? = nil,
      @verification_data : Stripe::IssuingAuthorizationVerificationData? = nil,
      @wallet : String? = nil,
      # Optional properties
      @token : Stripe::IssuingAuthorizationToken? = nil,
      @treasury : Stripe::IssuingAuthorizationTreasury? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_details, @approved, @authorization_method, @balance_transactions, @card, @cardholder, @created, @currency, @fleet, @fuel, @id, @livemode, @merchant_amount, @merchant_currency, @merchant_data, @metadata, @network_data, @object, @pending_request, @request_history, @status, @transactions, @verification_data, @wallet, @token, @token_present, @treasury)
  end
end
