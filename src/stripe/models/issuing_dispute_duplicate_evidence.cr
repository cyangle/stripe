#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class IssuingDisputeDuplicateEvidence
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "additional_documentation", type: Stripe::IssuingDisputeCanceledEvidenceAdditionalDocumentation?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: additional_documentation.nil? && !additional_documentation_present?)]
    getter additional_documentation : Stripe::IssuingDisputeCanceledEvidenceAdditionalDocumentation? = nil

    @[JSON::Field(ignore: true)]
    property? additional_documentation_present : Bool = false

    @[JSON::Field(key: "card_statement", type: Stripe::IssuingDisputeDuplicateEvidenceCardStatement?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: card_statement.nil? && !card_statement_present?)]
    getter card_statement : Stripe::IssuingDisputeDuplicateEvidenceCardStatement? = nil

    @[JSON::Field(ignore: true)]
    property? card_statement_present : Bool = false

    @[JSON::Field(key: "cash_receipt", type: Stripe::IssuingDisputeDuplicateEvidenceCashReceipt?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cash_receipt.nil? && !cash_receipt_present?)]
    getter cash_receipt : Stripe::IssuingDisputeDuplicateEvidenceCashReceipt? = nil

    @[JSON::Field(ignore: true)]
    property? cash_receipt_present : Bool = false

    @[JSON::Field(key: "check_image", type: Stripe::IssuingDisputeDuplicateEvidenceCheckImage?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: check_image.nil? && !check_image_present?)]
    getter check_image : Stripe::IssuingDisputeDuplicateEvidenceCheckImage? = nil

    @[JSON::Field(ignore: true)]
    property? check_image_present : Bool = false

    # Explanation of why the cardholder is disputing this transaction.
    @[JSON::Field(key: "explanation", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: explanation.nil? && !explanation_present?)]
    getter explanation : String? = nil

    @[JSON::Field(ignore: true)]
    property? explanation_present : Bool = false

    # Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
    @[JSON::Field(key: "original_transaction", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: original_transaction.nil? && !original_transaction_present?)]
    getter original_transaction : String? = nil

    @[JSON::Field(ignore: true)]
    property? original_transaction_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @additional_documentation : Stripe::IssuingDisputeCanceledEvidenceAdditionalDocumentation? = nil,
      @card_statement : Stripe::IssuingDisputeDuplicateEvidenceCardStatement? = nil,
      @cash_receipt : Stripe::IssuingDisputeDuplicateEvidenceCashReceipt? = nil,
      @check_image : Stripe::IssuingDisputeDuplicateEvidenceCheckImage? = nil,
      @explanation : String? = nil,
      @original_transaction : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _additional_documentation = @additional_documentation
        invalid_properties.concat(_additional_documentation.list_invalid_properties_for("additional_documentation")) if _additional_documentation.is_a?(OpenApi::Validatable)
      end
      if _card_statement = @card_statement
        invalid_properties.concat(_card_statement.list_invalid_properties_for("card_statement")) if _card_statement.is_a?(OpenApi::Validatable)
      end
      if _cash_receipt = @cash_receipt
        invalid_properties.concat(_cash_receipt.list_invalid_properties_for("cash_receipt")) if _cash_receipt.is_a?(OpenApi::Validatable)
      end
      if _check_image = @check_image
        invalid_properties.concat(_check_image.list_invalid_properties_for("check_image")) if _check_image.is_a?(OpenApi::Validatable)
      end
      if _explanation = @explanation
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("explanation", _explanation.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _original_transaction = @original_transaction
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("original_transaction", _original_transaction.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _additional_documentation = @additional_documentation
        return false if _additional_documentation.is_a?(OpenApi::Validatable) && !_additional_documentation.valid?
      end

      if _card_statement = @card_statement
        return false if _card_statement.is_a?(OpenApi::Validatable) && !_card_statement.valid?
      end

      if _cash_receipt = @cash_receipt
        return false if _cash_receipt.is_a?(OpenApi::Validatable) && !_cash_receipt.valid?
      end

      if _check_image = @check_image
        return false if _check_image.is_a?(OpenApi::Validatable) && !_check_image.valid?
      end

      if _explanation = @explanation
        return false if _explanation.to_s.size > 5000
      end

      if _original_transaction = @original_transaction
        return false if _original_transaction.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] additional_documentation Object to be assigned
    def additional_documentation=(additional_documentation : Stripe::IssuingDisputeCanceledEvidenceAdditionalDocumentation?)
      if additional_documentation.nil?
        return @additional_documentation = nil
      end
      _additional_documentation = additional_documentation.not_nil!
      _additional_documentation.validate if _additional_documentation.is_a?(OpenApi::Validatable)
      @additional_documentation = _additional_documentation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_statement Object to be assigned
    def card_statement=(card_statement : Stripe::IssuingDisputeDuplicateEvidenceCardStatement?)
      if card_statement.nil?
        return @card_statement = nil
      end
      _card_statement = card_statement.not_nil!
      _card_statement.validate if _card_statement.is_a?(OpenApi::Validatable)
      @card_statement = _card_statement
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cash_receipt Object to be assigned
    def cash_receipt=(cash_receipt : Stripe::IssuingDisputeDuplicateEvidenceCashReceipt?)
      if cash_receipt.nil?
        return @cash_receipt = nil
      end
      _cash_receipt = cash_receipt.not_nil!
      _cash_receipt.validate if _cash_receipt.is_a?(OpenApi::Validatable)
      @cash_receipt = _cash_receipt
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] check_image Object to be assigned
    def check_image=(check_image : Stripe::IssuingDisputeDuplicateEvidenceCheckImage?)
      if check_image.nil?
        return @check_image = nil
      end
      _check_image = check_image.not_nil!
      _check_image.validate if _check_image.is_a?(OpenApi::Validatable)
      @check_image = _check_image
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] explanation Object to be assigned
    def explanation=(explanation : String?)
      if explanation.nil?
        return @explanation = nil
      end
      _explanation = explanation.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("explanation", _explanation.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @explanation = _explanation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_transaction Object to be assigned
    def original_transaction=(original_transaction : String?)
      if original_transaction.nil?
        return @original_transaction = nil
      end
      _original_transaction = original_transaction.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("original_transaction", _original_transaction.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @original_transaction = _original_transaction
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@additional_documentation, @additional_documentation_present, @card_statement, @card_statement_present, @cash_receipt, @cash_receipt_present, @check_image, @check_image_present, @explanation, @explanation_present, @original_transaction, @original_transaction_present)
  end
end
