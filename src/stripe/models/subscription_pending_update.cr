#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SubscriptionPendingUpdate
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
    @[JSON::Field(key: "billing_cycle_anchor", type: Int64, presence: true, ignore_serialize: billing_cycle_anchor.nil? && !billing_cycle_anchor_present?)]
    property billing_cycle_anchor : Int64

    @[JSON::Field(ignore: true)]
    property? billing_cycle_anchor_present : Bool = false

    # The point after which the changes reflected by this update will be discarded and no longer applied.
    @[JSON::Field(key: "expires_at", type: Int64?)]
    property expires_at : Int64?

    # List of subscription items, each with an attached plan, that will be set if the update is applied.
    @[JSON::Field(key: "subscription_items", type: Array(SubscriptionItem), presence: true, ignore_serialize: subscription_items.nil? && !subscription_items_present?)]
    property subscription_items : Array(SubscriptionItem)

    @[JSON::Field(ignore: true)]
    property? subscription_items_present : Bool = false

    # Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
    @[JSON::Field(key: "trial_end", type: Int64, presence: true, ignore_serialize: trial_end.nil? && !trial_end_present?)]
    property trial_end : Int64

    @[JSON::Field(ignore: true)]
    property? trial_end_present : Bool = false

    # Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    @[JSON::Field(key: "trial_from_plan", type: Bool, presence: true, ignore_serialize: trial_from_plan.nil? && !trial_from_plan_present?)]
    property trial_from_plan : Bool

    @[JSON::Field(ignore: true)]
    property? trial_from_plan_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::SubscriptionsResourcePendingUpdate,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @billing_cycle_anchor : Int64?, @expires_at : Int64, @subscription_items : Array(SubscriptionItem)?, @trial_end : Int64?, @trial_from_plan : Bool?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        billing_cycle_anchor == o.billing_cycle_anchor &&
        expires_at == o.expires_at &&
        subscription_items == o.subscription_items &&
        trial_end == o.trial_end &&
        trial_from_plan == o.trial_from_plan
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@billing_cycle_anchor, @expires_at, @subscription_items, @trial_end, @trial_from_plan)
  end
end
