#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class RefundNextAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Type of the next action to perform.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Optional properties

    @[JSON::Field(key: "display_details", type: Stripe::RefundNextActionDisplayDetails1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: display_details.nil? && !display_details_present?)]
    getter display_details : Stripe::RefundNextActionDisplayDetails1? = nil

    @[JSON::Field(ignore: true)]
    property? display_details_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @display_details : Stripe::RefundNextActionDisplayDetails1? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      if __type = @_type
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _display_details = @display_details
        invalid_properties.concat(_display_details.list_invalid_properties_for("display_details")) if _display_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      if __type = @_type
        return false if __type.to_s.size > 5000
      end

      if _display_details = @display_details
        return false if _display_details.is_a?(OpenApi::Validatable) && !_display_details.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_details Object to be assigned
    def display_details=(display_details : Stripe::RefundNextActionDisplayDetails1?)
      if display_details.nil?
        return @display_details = nil
      end
      _display_details = display_details.not_nil!
      _display_details.validate if _display_details.is_a?(OpenApi::Validatable)
      @display_details = _display_details
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @display_details, @display_details_present)
  end
end
