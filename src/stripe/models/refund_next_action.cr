#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class RefundNextAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "display_details", type: RefundNextActionDisplayDetails1?, presence: true, ignore_serialize: display_details.nil? && !display_details_present?)]
    property display_details : RefundNextActionDisplayDetails1?

    @[JSON::Field(ignore: true)]
    property? display_details_present : Bool = false

    # Type of the next action to perform.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @display_details : RefundNextActionDisplayDetails1?, @_type : String)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @_type.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] _type Value to be assigned
    def _type=(_type)
      if _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        display_details == o.display_details &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@display_details, @_type)
  end
end
