#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Some payment methods have no required amount that a customer must send. Customers can be instructed to send any amount, and it can be made up of multiple transactions. As such, sources can have multiple associated transactions.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SourceTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["source_transaction"])

    # The ID of the source this transaction is attached to.
    @[JSON::Field(key: "source", type: String)]
    getter source : String

    # The status of the transaction, one of `succeeded`, `pending`, or `failed`.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    # The type of source this transaction is attached to.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["ach_credit_transfer", "ach_debit", "alipay", "bancontact", "card", "card_present", "eps", "giropay", "ideal", "klarna", "multibanco", "p24", "sepa_debit", "sofort", "three_d_secure", "wechat"])

    # Optional properties

    @[JSON::Field(key: "ach_credit_transfer", type: SourceTransactionAchCreditTransferData?, presence: true, ignore_serialize: ach_credit_transfer.nil? && !ach_credit_transfer_present?)]
    property ach_credit_transfer : SourceTransactionAchCreditTransferData?

    @[JSON::Field(ignore: true)]
    property? ach_credit_transfer_present : Bool = false

    @[JSON::Field(key: "chf_credit_transfer", type: SourceTransactionChfCreditTransferData?, presence: true, ignore_serialize: chf_credit_transfer.nil? && !chf_credit_transfer_present?)]
    property chf_credit_transfer : SourceTransactionChfCreditTransferData?

    @[JSON::Field(ignore: true)]
    property? chf_credit_transfer_present : Bool = false

    @[JSON::Field(key: "gbp_credit_transfer", type: SourceTransactionGbpCreditTransferData?, presence: true, ignore_serialize: gbp_credit_transfer.nil? && !gbp_credit_transfer_present?)]
    property gbp_credit_transfer : SourceTransactionGbpCreditTransferData?

    @[JSON::Field(ignore: true)]
    property? gbp_credit_transfer_present : Bool = false

    @[JSON::Field(key: "paper_check", type: SourceTransactionPaperCheckData?, presence: true, ignore_serialize: paper_check.nil? && !paper_check_present?)]
    property paper_check : SourceTransactionPaperCheckData?

    @[JSON::Field(ignore: true)]
    property? paper_check_present : Bool = false

    @[JSON::Field(key: "sepa_credit_transfer", type: SourceTransactionSepaCreditTransferData?, presence: true, ignore_serialize: sepa_credit_transfer.nil? && !sepa_credit_transfer_present?)]
    property sepa_credit_transfer : SourceTransactionSepaCreditTransferData?

    @[JSON::Field(ignore: true)]
    property? sepa_credit_transfer_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @amount : Int64, 
      @created : Int64, 
      @currency : String, 
      @id : String, 
      @livemode : Bool, 
      @object : String, 
      @source : String, 
      @status : String, 
      @_type : String, 
      # Optional properties
      @ach_credit_transfer : SourceTransactionAchCreditTransferData? = nil, 
      @chf_credit_transfer : SourceTransactionChfCreditTransferData? = nil, 
      @gbp_credit_transfer : SourceTransactionGbpCreditTransferData? = nil, 
      @paper_check : SourceTransactionPaperCheckData? = nil, 
      @sepa_credit_transfer : SourceTransactionSepaCreditTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @source.to_s.size > 5000
        invalid_properties.push("invalid value for \"source\", the character length must be smaller than or equal to 5000.")
      end

      if @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @source.to_s.size > 5000
      return false if @status.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] source Value to be assigned
    def source=(source)
      if source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\", the character length must be smaller than or equal to 5000.")
      end

      @source = source
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @created, @currency, @id, @livemode, @object, @source, @status, @_type, @ach_credit_transfer, @chf_credit_transfer, @gbp_credit_transfer, @paper_check, @sepa_credit_transfer)
  end
end
