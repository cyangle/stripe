#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./source_transaction_ach_credit_transfer_data"
require "./source_transaction_chf_credit_transfer_data"
require "./source_transaction_gbp_credit_transfer_data"
require "./source_transaction_paper_check_data"
require "./source_transaction_sepa_credit_transfer_data"

module Stripe
  # Some payment methods have no required amount that a customer must send. Customers can be instructed to send any amount, and it can be made up of multiple transactions. As such, sources can have multiple associated transactions.
  class SourceTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [source_transaction]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("source_transaction")

    # The ID of the source this transaction is attached to.
    @[JSON::Field(key: "source", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter source : String? = nil
    MAX_LENGTH_FOR_SOURCE = 5000

    # The status of the transaction, one of `succeeded`, `pending`, or `failed`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    # The type of source this transaction is attached to.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [ach_credit_transfer, ach_debit, alipay, bancontact, card, card_present, eps, giropay, ideal, klarna, multibanco, p24, sepa_debit, sofort, three_d_secure, wechat]."
    VALID_VALUES_FOR__TYPE  = String.static_array("ach_credit_transfer", "ach_debit", "alipay", "bancontact", "card", "card_present", "eps", "giropay", "ideal", "klarna", "multibanco", "p24", "sepa_debit", "sofort", "three_d_secure", "wechat")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "ach_credit_transfer", type: Stripe::SourceTransactionAchCreditTransferData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_credit_transfer : Stripe::SourceTransactionAchCreditTransferData? = nil

    @[JSON::Field(key: "chf_credit_transfer", type: Stripe::SourceTransactionChfCreditTransferData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter chf_credit_transfer : Stripe::SourceTransactionChfCreditTransferData? = nil

    @[JSON::Field(key: "gbp_credit_transfer", type: Stripe::SourceTransactionGbpCreditTransferData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter gbp_credit_transfer : Stripe::SourceTransactionGbpCreditTransferData? = nil

    @[JSON::Field(key: "paper_check", type: Stripe::SourceTransactionPaperCheckData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paper_check : Stripe::SourceTransactionPaperCheckData? = nil

    @[JSON::Field(key: "sepa_credit_transfer", type: Stripe::SourceTransactionSepaCreditTransferData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_credit_transfer : Stripe::SourceTransactionSepaCreditTransferData? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @source : String? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @ach_credit_transfer : Stripe::SourceTransactionAchCreditTransferData? = nil,
      @chf_credit_transfer : Stripe::SourceTransactionChfCreditTransferData? = nil,
      @gbp_credit_transfer : Stripe::SourceTransactionGbpCreditTransferData? = nil,
      @paper_check : Stripe::SourceTransactionPaperCheckData? = nil,
      @sepa_credit_transfer : Stripe::SourceTransactionSepaCreditTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"source\" is required and cannot be null") if @source.nil?

      unless (_source = @source).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("source", _source.to_s.size, MAX_LENGTH_FOR_SOURCE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("status", _status.to_s.size, MAX_LENGTH_FOR_STATUS)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_ach_credit_transfer = @ach_credit_transfer).nil?
        invalid_properties.concat(_ach_credit_transfer.list_invalid_properties_for("ach_credit_transfer")) if _ach_credit_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_chf_credit_transfer = @chf_credit_transfer).nil?
        invalid_properties.concat(_chf_credit_transfer.list_invalid_properties_for("chf_credit_transfer")) if _chf_credit_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_gbp_credit_transfer = @gbp_credit_transfer).nil?
        invalid_properties.concat(_gbp_credit_transfer.list_invalid_properties_for("gbp_credit_transfer")) if _gbp_credit_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_paper_check = @paper_check).nil?
        invalid_properties.concat(_paper_check.list_invalid_properties_for("paper_check")) if _paper_check.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_credit_transfer = @sepa_credit_transfer).nil?
        invalid_properties.concat(_sepa_credit_transfer.list_invalid_properties_for("sepa_credit_transfer")) if _sepa_credit_transfer.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @created.nil?

      return false if @currency.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @source.nil?
      unless (_source = @source).nil?
        return false if _source.to_s.size > MAX_LENGTH_FOR_SOURCE
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if _status.to_s.size > MAX_LENGTH_FOR_STATUS
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_ach_credit_transfer = @ach_credit_transfer).nil?
        return false if _ach_credit_transfer.is_a?(OpenApi::Validatable) && !_ach_credit_transfer.valid?
      end

      unless (_chf_credit_transfer = @chf_credit_transfer).nil?
        return false if _chf_credit_transfer.is_a?(OpenApi::Validatable) && !_chf_credit_transfer.valid?
      end

      unless (_gbp_credit_transfer = @gbp_credit_transfer).nil?
        return false if _gbp_credit_transfer.is_a?(OpenApi::Validatable) && !_gbp_credit_transfer.valid?
      end

      unless (_paper_check = @paper_check).nil?
        return false if _paper_check.is_a?(OpenApi::Validatable) && !_paper_check.valid?
      end

      unless (_sepa_credit_transfer = @sepa_credit_transfer).nil?
        return false if _sepa_credit_transfer.is_a?(OpenApi::Validatable) && !_sepa_credit_transfer.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(new_value : String?)
      raise ArgumentError.new("\"source\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("source", new_value.to_s.size, MAX_LENGTH_FOR_SOURCE)
      end

      @source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("status", new_value.to_s.size, MAX_LENGTH_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_credit_transfer Object to be assigned
    def ach_credit_transfer=(new_value : Stripe::SourceTransactionAchCreditTransferData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ach_credit_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] chf_credit_transfer Object to be assigned
    def chf_credit_transfer=(new_value : Stripe::SourceTransactionChfCreditTransferData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @chf_credit_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gbp_credit_transfer Object to be assigned
    def gbp_credit_transfer=(new_value : Stripe::SourceTransactionGbpCreditTransferData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @gbp_credit_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paper_check Object to be assigned
    def paper_check=(new_value : Stripe::SourceTransactionPaperCheckData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paper_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_credit_transfer Object to be assigned
    def sepa_credit_transfer=(new_value : Stripe::SourceTransactionSepaCreditTransferData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_credit_transfer = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @created, @currency, @id, @livemode, @object, @source, @status, @_type, @ach_credit_transfer, @chf_credit_transfer, @gbp_credit_transfer, @paper_check, @sepa_credit_transfer)
  end
end
