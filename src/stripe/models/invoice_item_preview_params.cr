#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class InvoiceItemPreviewParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The integer amount in cents (or local equivalent) of previewed invoice item.
    @[JSON::Field(key: "amount", type: Int64?, presence: true, ignore_serialize: amount.nil? && !amount_present?)]
    property amount : Int64?

    @[JSON::Field(ignore: true)]
    property? amount_present : Bool = false

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). Only applicable to new invoice items.
    @[JSON::Field(key: "currency", type: String?, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    property currency : String?

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # Explicitly controls whether discounts apply to this invoice item. Defaults to true, except for negative invoice items.
    @[JSON::Field(key: "discountable", type: Bool?, presence: true, ignore_serialize: discountable.nil? && !discountable_present?)]
    property discountable : Bool?

    @[JSON::Field(ignore: true)]
    property? discountable_present : Bool = false

    @[JSON::Field(key: "discounts", type: InvoiceItemPreviewParamsDiscounts?, presence: true, ignore_serialize: discounts.nil? && !discounts_present?)]
    property discounts : InvoiceItemPreviewParamsDiscounts?

    @[JSON::Field(ignore: true)]
    property? discounts_present : Bool = false

    # The ID of the invoice item to update in preview. If not specified, a new invoice item will be added to the preview of the upcoming invoice.
    @[JSON::Field(key: "invoiceitem", type: String?, presence: true, ignore_serialize: invoiceitem.nil? && !invoiceitem_present?)]
    getter invoiceitem : String?

    @[JSON::Field(ignore: true)]
    property? invoiceitem_present : Bool = false

    @[JSON::Field(key: "metadata", type: IndividualSpecsMetadata?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : IndividualSpecsMetadata?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "period", type: Period1?, presence: true, ignore_serialize: period.nil? && !period_present?)]
    property period : Period1?

    @[JSON::Field(ignore: true)]
    property? period_present : Bool = false

    # The ID of the price object.
    @[JSON::Field(key: "price", type: String?, presence: true, ignore_serialize: price.nil? && !price_present?)]
    getter price : String?

    @[JSON::Field(ignore: true)]
    property? price_present : Bool = false

    @[JSON::Field(key: "price_data", type: OneTimePriceData?, presence: true, ignore_serialize: price_data.nil? && !price_data_present?)]
    property price_data : OneTimePriceData?

    @[JSON::Field(ignore: true)]
    property? price_data_present : Bool = false

    # Non-negative integer. The quantity of units for the invoice item.
    @[JSON::Field(key: "quantity", type: Int64?, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    property quantity : Int64?

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    @[JSON::Field(key: "tax_rates", type: InvoiceItemPreviewParamsTaxRates?, presence: true, ignore_serialize: tax_rates.nil? && !tax_rates_present?)]
    property tax_rates : InvoiceItemPreviewParamsTaxRates?

    @[JSON::Field(ignore: true)]
    property? tax_rates_present : Bool = false

    # The integer unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount.
    @[JSON::Field(key: "unit_amount", type: Int64?, presence: true, ignore_serialize: unit_amount.nil? && !unit_amount_present?)]
    property unit_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? unit_amount_present : Bool = false

    # Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
    @[JSON::Field(key: "unit_amount_decimal", type: String?, presence: true, ignore_serialize: unit_amount_decimal.nil? && !unit_amount_decimal_present?)]
    property unit_amount_decimal : String?

    @[JSON::Field(ignore: true)]
    property? unit_amount_decimal_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64? = nil, @currency : String? = nil, @description : String? = nil, @discountable : Bool? = nil, @discounts : InvoiceItemPreviewParamsDiscounts? = nil, @invoiceitem : String? = nil, @metadata : IndividualSpecsMetadata? = nil, @period : Period1? = nil, @price : String? = nil, @price_data : OneTimePriceData? = nil, @quantity : Int64? = nil, @tax_rates : InvoiceItemPreviewParamsTaxRates? = nil, @unit_amount : Int64? = nil, @unit_amount_decimal : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@invoiceitem.nil? && @invoiceitem.to_s.size > 5000
        invalid_properties.push("invalid value for \"invoiceitem\", the character length must be smaller than or equal to 5000.")
      end

      if !@price.nil? && @price.to_s.size > 5000
        invalid_properties.push("invalid value for \"price\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@invoiceitem.nil? && @invoiceitem.to_s.size > 5000
      return false if !@price.nil? && @price.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] invoiceitem Value to be assigned
    def invoiceitem=(invoiceitem)
      if !invoiceitem.nil? && invoiceitem.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoiceitem\", the character length must be smaller than or equal to 5000.")
      end

      @invoiceitem = invoiceitem
    end

    # Custom attribute writer method with validation
    # @param [Object] price Value to be assigned
    def price=(price)
      if !price.nil? && price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\", the character length must be smaller than or equal to 5000.")
      end

      @price = price
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        currency == o.currency &&
        description == o.description &&
        discountable == o.discountable &&
        discounts == o.discounts &&
        invoiceitem == o.invoiceitem &&
        metadata == o.metadata &&
        period == o.period &&
        price == o.price &&
        price_data == o.price_data &&
        quantity == o.quantity &&
        tax_rates == o.tax_rates &&
        unit_amount == o.unit_amount &&
        unit_amount_decimal == o.unit_amount_decimal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amount, @currency, @description, @discountable, @discounts, @invoiceitem, @metadata, @period, @price, @price_data, @quantity, @tax_rates, @unit_amount, @unit_amount_decimal)
  end
end
