#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./address"
require "./gelato_data_verified_outputs_date"

module Stripe
  #
  class GelatoVerifiedOutputs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "address", type: Stripe::Address?, default: nil, required: true, nullable: true, emit_null: true)]
    getter address : Stripe::Address? = nil

    # The user's verified email address
    @[JSON::Field(key: "email", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter email : String? = nil
    MAX_LENGTH_FOR_EMAIL = 5000

    # The user's verified first name.
    @[JSON::Field(key: "first_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter first_name : String? = nil
    MAX_LENGTH_FOR_FIRST_NAME = 5000

    # The user's verified id number type.
    @[JSON::Field(key: "id_number_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter id_number_type : String? = nil
    ERROR_MESSAGE_FOR_ID_NUMBER_TYPE = "invalid value for \"id_number_type\", must be one of [br_cpf, sg_nric, us_ssn]."
    VALID_VALUES_FOR_ID_NUMBER_TYPE  = String.static_array("br_cpf", "sg_nric", "us_ssn")

    # The user's verified last name.
    @[JSON::Field(key: "last_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter last_name : String? = nil
    MAX_LENGTH_FOR_LAST_NAME = 5000

    # The user's verified phone number
    @[JSON::Field(key: "phone", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter phone : String? = nil
    MAX_LENGTH_FOR_PHONE = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "dob", type: Stripe::GelatoDataVerifiedOutputsDate?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: dob.nil? && !dob_present?)]
    getter dob : Stripe::GelatoDataVerifiedOutputsDate? = nil

    @[JSON::Field(ignore: true)]
    property? dob_present : Bool = false

    # The user's verified id number.
    @[JSON::Field(key: "id_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: id_number.nil? && !id_number_present?)]
    getter id_number : String? = nil
    MAX_LENGTH_FOR_ID_NUMBER = 5000

    @[JSON::Field(ignore: true)]
    property? id_number_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @address : Stripe::Address? = nil,
      @email : String? = nil,
      @first_name : String? = nil,
      @id_number_type : String? = nil,
      @last_name : String? = nil,
      @phone : String? = nil,
      # Optional properties
      @dob : Stripe::GelatoDataVerifiedOutputsDate? = nil,
      @id_number : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_address = @address).nil?
        invalid_properties.concat(_address.list_invalid_properties_for("address")) if _address.is_a?(OpenApi::Validatable)
      end
      unless (_email = @email).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("email", _email.to_s.size, MAX_LENGTH_FOR_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_first_name = @first_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("first_name", _first_name.to_s.size, MAX_LENGTH_FOR_FIRST_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_id_number_type = @id_number_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ID_NUMBER_TYPE) unless OpenApi::EnumValidator.valid?(_id_number_type, VALID_VALUES_FOR_ID_NUMBER_TYPE)
      end
      unless (_last_name = @last_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("last_name", _last_name.to_s.size, MAX_LENGTH_FOR_LAST_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_phone = @phone).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("phone", _phone.to_s.size, MAX_LENGTH_FOR_PHONE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_dob = @dob).nil?
        invalid_properties.concat(_dob.list_invalid_properties_for("dob")) if _dob.is_a?(OpenApi::Validatable)
      end
      unless (_id_number = @id_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id_number", _id_number.to_s.size, MAX_LENGTH_FOR_ID_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_address = @address).nil?
        return false if _address.is_a?(OpenApi::Validatable) && !_address.valid?
      end

      unless (_email = @email).nil?
        return false if _email.to_s.size > MAX_LENGTH_FOR_EMAIL
      end

      unless (_first_name = @first_name).nil?
        return false if _first_name.to_s.size > MAX_LENGTH_FOR_FIRST_NAME
      end

      unless (_id_number_type = @id_number_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_id_number_type, VALID_VALUES_FOR_ID_NUMBER_TYPE)
      end

      unless (_last_name = @last_name).nil?
        return false if _last_name.to_s.size > MAX_LENGTH_FOR_LAST_NAME
      end

      unless (_phone = @phone).nil?
        return false if _phone.to_s.size > MAX_LENGTH_FOR_PHONE
      end

      unless (_dob = @dob).nil?
        return false if _dob.is_a?(OpenApi::Validatable) && !_dob.valid?
      end

      unless (_id_number = @id_number).nil?
        return false if _id_number.to_s.size > MAX_LENGTH_FOR_ID_NUMBER
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : Stripe::Address?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("email", new_value.to_s.size, MAX_LENGTH_FOR_EMAIL)
      end

      @email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("first_name", new_value.to_s.size, MAX_LENGTH_FOR_FIRST_NAME)
      end

      @first_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_number_type Object to be assigned
    def id_number_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("id_number_type", new_value, VALID_VALUES_FOR_ID_NUMBER_TYPE)
      end

      @id_number_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("last_name", new_value.to_s.size, MAX_LENGTH_FOR_LAST_NAME)
      end

      @last_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone Object to be assigned
    def phone=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("phone", new_value.to_s.size, MAX_LENGTH_FOR_PHONE)
      end

      @phone = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dob Object to be assigned
    def dob=(new_value : Stripe::GelatoDataVerifiedOutputsDate?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @dob = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_number Object to be assigned
    def id_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id_number", new_value.to_s.size, MAX_LENGTH_FOR_ID_NUMBER)
      end

      @id_number = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address, @email, @first_name, @id_number_type, @last_name, @phone, @dob, @dob_present, @id_number, @id_number_present)
  end
end
