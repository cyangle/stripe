#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Represents a reader action to set the reader display
  class TerminalReaderReaderResourceSetReaderDisplayAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Type of information to be displayed by the reader.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["cart"])

    # Optional properties

    @[JSON::Field(key: "cart", type: Stripe::TerminalReaderReaderResourceSetReaderDisplayActionCart?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cart.nil? && !cart_present?)]
    getter cart : Stripe::TerminalReaderReaderResourceSetReaderDisplayActionCart? = nil

    @[JSON::Field(ignore: true)]
    property? cart_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @cart : Stripe::TerminalReaderReaderResourceSetReaderDisplayActionCart? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _cart = @cart
        if _cart.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_cart.list_invalid_properties_for("cart"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _cart = @cart
        if _cart.is_a?(OpenApi::Validatable)
          return false unless _cart.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cart Object to be assigned
    def cart=(cart : Stripe::TerminalReaderReaderResourceSetReaderDisplayActionCart?)
      if cart.nil?
        return @cart = nil
      end
      _cart = cart.not_nil!
      if _cart.is_a?(OpenApi::Validatable)
        _cart.validate
      end
      @cart = _cart
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @cart, @cart_present)
  end
end
