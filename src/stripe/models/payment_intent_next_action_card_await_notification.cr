#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentNextActionCardAwaitNotification
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
    @[JSON::Field(key: "charge_attempt_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: charge_attempt_at.nil? && !charge_attempt_at_present?)]
    getter charge_attempt_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? charge_attempt_at_present : Bool = false

    # For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.
    @[JSON::Field(key: "customer_approval_required", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_approval_required.nil? && !customer_approval_required_present?)]
    getter customer_approval_required : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? customer_approval_required_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @charge_attempt_at : Int64? = nil,
      @customer_approval_required : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge_attempt_at Object to be assigned
    def charge_attempt_at=(charge_attempt_at : Int64?)
      if charge_attempt_at.nil?
        return @charge_attempt_at = nil
      end
      @charge_attempt_at = charge_attempt_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_approval_required Object to be assigned
    def customer_approval_required=(customer_approval_required : Bool?)
      if customer_approval_required.nil?
        return @customer_approval_required = nil
      end
      @customer_approval_required = customer_approval_required
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@charge_attempt_at, @charge_attempt_at_present, @customer_approval_required, @customer_approval_required_present)
  end
end
