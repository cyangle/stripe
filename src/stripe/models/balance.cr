#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./balance_amount"
require "./balance_amount_net"
require "./balance_detail"

module Stripe
  # This is an object representing your Stripe balance. You can retrieve it to see the balance currently on your Stripe account.  You can also retrieve the balance history, which contains a list of [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance (charges, payouts, and so forth).  The available and pending amounts for each currency are broken down further by payment source types.  Related guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
  class Balance
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). You can find the available balance for each currency and payment type in the `source_types` property.
    @[JSON::Field(key: "available", type: Array(Stripe::BalanceAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter available : Array(Stripe::BalanceAmount)? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [balance]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("balance")

    # Funds that aren't available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property.
    @[JSON::Field(key: "pending", type: Array(Stripe::BalanceAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pending : Array(Stripe::BalanceAmount)? = nil

    # End of Required Properties

    # Optional Properties

    # Funds held due to negative balances on connected accounts where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. You can find the connect reserve balance for each currency and payment type in the `source_types` property.
    @[JSON::Field(key: "connect_reserved", type: Array(Stripe::BalanceAmount)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter connect_reserved : Array(Stripe::BalanceAmount)? = nil

    # Funds that you can pay out using Instant Payouts.
    @[JSON::Field(key: "instant_available", type: Array(Stripe::BalanceAmountNet)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter instant_available : Array(Stripe::BalanceAmountNet)? = nil

    @[JSON::Field(key: "issuing", type: Stripe::BalanceDetail?, default: nil, required: false, nullable: false, emit_null: false)]
    getter issuing : Stripe::BalanceDetail? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @available : Array(Stripe::BalanceAmount)? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @pending : Array(Stripe::BalanceAmount)? = nil,
      # Optional properties
      @connect_reserved : Array(Stripe::BalanceAmount)? = nil,
      @instant_available : Array(Stripe::BalanceAmountNet)? = nil,
      @issuing : Stripe::BalanceDetail? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"available\" is required and cannot be null") if @available.nil?

      unless (_available = @available).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "available", container: _available)) if _available.is_a?(Array)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"pending\" is required and cannot be null") if @pending.nil?

      unless (_pending = @pending).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "pending", container: _pending)) if _pending.is_a?(Array)
      end
      unless (_connect_reserved = @connect_reserved).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "connect_reserved", container: _connect_reserved)) if _connect_reserved.is_a?(Array)
      end
      unless (_instant_available = @instant_available).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "instant_available", container: _instant_available)) if _instant_available.is_a?(Array)
      end
      unless (_issuing = @issuing).nil?
        invalid_properties.concat(_issuing.list_invalid_properties_for("issuing")) if _issuing.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @available.nil?
      unless (_available = @available).nil?
        return false if _available.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _available)
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @pending.nil?
      unless (_pending = @pending).nil?
        return false if _pending.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _pending)
      end

      unless (_connect_reserved = @connect_reserved).nil?
        return false if _connect_reserved.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _connect_reserved)
      end

      unless (_instant_available = @instant_available).nil?
        return false if _instant_available.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _instant_available)
      end

      unless (_issuing = @issuing).nil?
        return false if _issuing.is_a?(OpenApi::Validatable) && !_issuing.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] available Object to be assigned
    def available=(new_value : Array(Stripe::BalanceAmount)?)
      raise ArgumentError.new("\"available\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @available = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending Object to be assigned
    def pending=(new_value : Array(Stripe::BalanceAmount)?)
      raise ArgumentError.new("\"pending\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @pending = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] connect_reserved Object to be assigned
    def connect_reserved=(new_value : Array(Stripe::BalanceAmount)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @connect_reserved = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instant_available Object to be assigned
    def instant_available=(new_value : Array(Stripe::BalanceAmountNet)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @instant_available = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuing Object to be assigned
    def issuing=(new_value : Stripe::BalanceDetail?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @issuing = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@available, @livemode, @object, @pending, @connect_reserved, @instant_available, @issuing)
  end
end
