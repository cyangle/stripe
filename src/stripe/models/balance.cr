#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # This is an object representing your Stripe balance. You can retrieve it to see the balance currently on your Stripe account.  You can also retrieve the balance history, which contains a list of [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance (charges, payouts, and so forth).  The available and pending amounts for each currency are broken down further by payment source types.  Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
  class Balance
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property.
    @[JSON::Field(key: "available", type: Array(Stripe::BalanceAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter available : Array(Stripe::BalanceAmount)? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = OpenApi::EnumValidator.new("object", "String", ["balance"])

    # Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property.
    @[JSON::Field(key: "pending", type: Array(Stripe::BalanceAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pending : Array(Stripe::BalanceAmount)? = nil

    # Optional properties

    # Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property.
    @[JSON::Field(key: "connect_reserved", type: Array(Stripe::BalanceAmount)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter connect_reserved : Array(Stripe::BalanceAmount)? = nil

    # Funds that can be paid out using Instant Payouts.
    @[JSON::Field(key: "instant_available", type: Array(Stripe::BalanceAmount)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter instant_available : Array(Stripe::BalanceAmount)? = nil

    @[JSON::Field(key: "issuing", type: Stripe::BalanceDetail?, default: nil, required: false, nullable: false, emit_null: false)]
    getter issuing : Stripe::BalanceDetail? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @available : Array(Stripe::BalanceAmount)? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @pending : Array(Stripe::BalanceAmount)? = nil,
      # Optional properties
      @connect_reserved : Array(Stripe::BalanceAmount)? = nil,
      @instant_available : Array(Stripe::BalanceAmount)? = nil,
      @issuing : Stripe::BalanceDetail? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"available\" is required and cannot be null") if @available.nil?
      if _available = @available
        invalid_properties.concat(OpenApi::ArrayValidator.list_invalid_properties_for(key: "available", array: _available)) if _available.is_a?(Array)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"pending\" is required and cannot be null") if @pending.nil?
      if _pending = @pending
        invalid_properties.concat(OpenApi::ArrayValidator.list_invalid_properties_for(key: "pending", array: _pending)) if _pending.is_a?(Array)
      end
      if _connect_reserved = @connect_reserved
        invalid_properties.concat(OpenApi::ArrayValidator.list_invalid_properties_for(key: "connect_reserved", array: _connect_reserved)) if _connect_reserved.is_a?(Array)
      end
      if _instant_available = @instant_available
        invalid_properties.concat(OpenApi::ArrayValidator.list_invalid_properties_for(key: "instant_available", array: _instant_available)) if _instant_available.is_a?(Array)
      end
      if _issuing = @issuing
        invalid_properties.concat(_issuing.list_invalid_properties_for("issuing")) if _issuing.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @available.nil?
      if _available = @available
        return false if _available.is_a?(Array) && !OpenApi::ArrayValidator.valid?(array: _available)
      end
      return false if @livemode.nil?

      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @pending.nil?
      if _pending = @pending
        return false if _pending.is_a?(Array) && !OpenApi::ArrayValidator.valid?(array: _pending)
      end
      if _connect_reserved = @connect_reserved
        return false if _connect_reserved.is_a?(Array) && !OpenApi::ArrayValidator.valid?(array: _connect_reserved)
      end
      if _instant_available = @instant_available
        return false if _instant_available.is_a?(Array) && !OpenApi::ArrayValidator.valid?(array: _instant_available)
      end
      if _issuing = @issuing
        return false if _issuing.is_a?(OpenApi::Validatable) && !_issuing.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] available Object to be assigned
    def available=(available : Array(Stripe::BalanceAmount)?)
      if available.nil?
        raise ArgumentError.new("\"available\" is required and cannot be null")
      end
      _available = available.not_nil!
      OpenApi::ArrayValidator.validate(array: _available) if _available.is_a?(Array)
      @available = _available
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending Object to be assigned
    def pending=(pending : Array(Stripe::BalanceAmount)?)
      if pending.nil?
        raise ArgumentError.new("\"pending\" is required and cannot be null")
      end
      _pending = pending.not_nil!
      OpenApi::ArrayValidator.validate(array: _pending) if _pending.is_a?(Array)
      @pending = _pending
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] connect_reserved Object to be assigned
    def connect_reserved=(connect_reserved : Array(Stripe::BalanceAmount)?)
      if connect_reserved.nil?
        return @connect_reserved = nil
      end
      _connect_reserved = connect_reserved.not_nil!
      OpenApi::ArrayValidator.validate(array: _connect_reserved) if _connect_reserved.is_a?(Array)
      @connect_reserved = _connect_reserved
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instant_available Object to be assigned
    def instant_available=(instant_available : Array(Stripe::BalanceAmount)?)
      if instant_available.nil?
        return @instant_available = nil
      end
      _instant_available = instant_available.not_nil!
      OpenApi::ArrayValidator.validate(array: _instant_available) if _instant_available.is_a?(Array)
      @instant_available = _instant_available
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuing Object to be assigned
    def issuing=(issuing : Stripe::BalanceDetail?)
      if issuing.nil?
        return @issuing = nil
      end
      _issuing = issuing.not_nil!
      _issuing.validate if _issuing.is_a?(OpenApi::Validatable)
      @issuing = _issuing
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@available, @livemode, @object, @pending, @connect_reserved, @instant_available, @issuing)
  end
end
