#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  # SPEI Records contain Mexico bank account details per the SPEI format.
  class FundingInstructionsBankTransferSpeiRecord
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The three-digit bank code
    @[JSON::Field(key: "bank_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_code : String? = nil
    MAX_LENGTH_FOR_BANK_CODE = 5000

    # The short banking institution name
    @[JSON::Field(key: "bank_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_name : String? = nil
    MAX_LENGTH_FOR_BANK_NAME = 5000

    # The CLABE number
    @[JSON::Field(key: "clabe", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter clabe : String? = nil
    MAX_LENGTH_FOR_CLABE = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @bank_code : String? = nil,
      @bank_name : String? = nil,
      @clabe : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"bank_code\" is required and cannot be null") if @bank_code.nil?

      unless (_bank_code = @bank_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("bank_code", _bank_code.to_s.size, MAX_LENGTH_FOR_BANK_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"bank_name\" is required and cannot be null") if @bank_name.nil?

      unless (_bank_name = @bank_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("bank_name", _bank_name.to_s.size, MAX_LENGTH_FOR_BANK_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"clabe\" is required and cannot be null") if @clabe.nil?

      unless (_clabe = @clabe).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("clabe", _clabe.to_s.size, MAX_LENGTH_FOR_CLABE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @bank_code.nil?
      unless (_bank_code = @bank_code).nil?
        return false if _bank_code.to_s.size > MAX_LENGTH_FOR_BANK_CODE
      end

      return false if @bank_name.nil?
      unless (_bank_name = @bank_name).nil?
        return false if _bank_name.to_s.size > MAX_LENGTH_FOR_BANK_NAME
      end

      return false if @clabe.nil?
      unless (_clabe = @clabe).nil?
        return false if _clabe.to_s.size > MAX_LENGTH_FOR_CLABE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_code Object to be assigned
    def bank_code=(new_value : String?)
      raise ArgumentError.new("\"bank_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("bank_code", new_value.to_s.size, MAX_LENGTH_FOR_BANK_CODE)
      end

      @bank_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_name Object to be assigned
    def bank_name=(new_value : String?)
      raise ArgumentError.new("\"bank_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("bank_name", new_value.to_s.size, MAX_LENGTH_FOR_BANK_NAME)
      end

      @bank_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] clabe Object to be assigned
    def clabe=(new_value : String?)
      raise ArgumentError.new("\"clabe\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("clabe", new_value.to_s.size, MAX_LENGTH_FOR_CLABE)
      end

      @clabe = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bank_code, @bank_name, @clabe)
  end
end
