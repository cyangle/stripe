#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_network_token_address"

module Stripe
  #
  class IssuingNetworkTokenWalletProvider
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The wallet provider-given account ID of the digital wallet the token belongs to.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_id : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_ID = 5000

    # An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy.
    @[JSON::Field(key: "account_trust_score", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_trust_score : Int64? = nil

    # The method used for tokenizing a card.
    @[JSON::Field(key: "card_number_source", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_number_source : String? = nil
    ERROR_MESSAGE_FOR_CARD_NUMBER_SOURCE = "invalid value for \"card_number_source\", must be one of [app, manual, on_file, other]."
    VALID_VALUES_FOR_CARD_NUMBER_SOURCE  = String.static_array("app", "manual", "on_file", "other")

    @[JSON::Field(key: "cardholder_address", type: Stripe::IssuingNetworkTokenAddress?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cardholder_address : Stripe::IssuingNetworkTokenAddress? = nil

    # The name of the cardholder tokenizing the card.
    @[JSON::Field(key: "cardholder_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cardholder_name : String? = nil
    MAX_LENGTH_FOR_CARDHOLDER_NAME = 5000

    # An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy.
    @[JSON::Field(key: "device_trust_score", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter device_trust_score : Int64? = nil

    # The hashed email address of the cardholder's account with the wallet provider.
    @[JSON::Field(key: "hashed_account_email_address", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter hashed_account_email_address : String? = nil
    MAX_LENGTH_FOR_HASHED_ACCOUNT_EMAIL_ADDRESS = 5000

    # The reasons for suggested tokenization given by the card network.
    @[JSON::Field(key: "reason_codes", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter reason_codes : Array(String)? = nil
    ERROR_MESSAGE_FOR_REASON_CODES = "invalid value for \"reason_codes\", must be one of [account_card_too_new, account_recently_changed, account_too_new, account_too_new_since_launch, additional_device, data_expired, defer_id_v_decision, device_recently_lost, good_activity_history, has_suspended_tokens, high_risk, inactive_account, long_account_tenure, low_account_score, low_device_score, low_phone_number_score, network_service_error, outside_home_territory, provisioning_cardholder_mismatch, provisioning_device_and_cardholder_mismatch, provisioning_device_mismatch, same_device_no_prior_authentication, same_device_successful_prior_authentication, software_update, suspicious_activity, too_many_different_cardholders, too_many_recent_attempts, too_many_recent_tokens]."
    VALID_VALUES_FOR_REASON_CODES  = String.static_array("account_card_too_new", "account_recently_changed", "account_too_new", "account_too_new_since_launch", "additional_device", "data_expired", "defer_id_v_decision", "device_recently_lost", "good_activity_history", "has_suspended_tokens", "high_risk", "inactive_account", "long_account_tenure", "low_account_score", "low_device_score", "low_phone_number_score", "network_service_error", "outside_home_territory", "provisioning_cardholder_mismatch", "provisioning_device_and_cardholder_mismatch", "provisioning_device_mismatch", "same_device_no_prior_authentication", "same_device_successful_prior_authentication", "software_update", "suspicious_activity", "too_many_different_cardholders", "too_many_recent_attempts", "too_many_recent_tokens")

    # The recommendation on responding to the tokenization request.
    @[JSON::Field(key: "suggested_decision", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter suggested_decision : String? = nil
    ERROR_MESSAGE_FOR_SUGGESTED_DECISION = "invalid value for \"suggested_decision\", must be one of [approve, decline, require_auth]."
    VALID_VALUES_FOR_SUGGESTED_DECISION  = String.static_array("approve", "decline", "require_auth")

    # The version of the standard for mapping reason codes followed by the wallet provider.
    @[JSON::Field(key: "suggested_decision_version", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter suggested_decision_version : String? = nil
    MAX_LENGTH_FOR_SUGGESTED_DECISION_VERSION = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_id : String? = nil,
      @account_trust_score : Int64? = nil,
      @card_number_source : String? = nil,
      @cardholder_address : Stripe::IssuingNetworkTokenAddress? = nil,
      @cardholder_name : String? = nil,
      @device_trust_score : Int64? = nil,
      @hashed_account_email_address : String? = nil,
      @reason_codes : Array(String)? = nil,
      @suggested_decision : String? = nil,
      @suggested_decision_version : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_id = @account_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_id", _account_id.to_s.size, MAX_LENGTH_FOR_ACCOUNT_ID)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_card_number_source = @card_number_source).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARD_NUMBER_SOURCE) unless OpenApi::EnumValidator.valid?(_card_number_source, VALID_VALUES_FOR_CARD_NUMBER_SOURCE)
      end
      unless (_cardholder_address = @cardholder_address).nil?
        invalid_properties.concat(_cardholder_address.list_invalid_properties_for("cardholder_address")) if _cardholder_address.is_a?(OpenApi::Validatable)
      end
      unless (_cardholder_name = @cardholder_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cardholder_name", _cardholder_name.to_s.size, MAX_LENGTH_FOR_CARDHOLDER_NAME)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_hashed_account_email_address = @hashed_account_email_address).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("hashed_account_email_address", _hashed_account_email_address.to_s.size, MAX_LENGTH_FOR_HASHED_ACCOUNT_EMAIL_ADDRESS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_reason_codes = @reason_codes).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REASON_CODES) unless OpenApi::EnumValidator.valid?(_reason_codes, VALID_VALUES_FOR_REASON_CODES)
      end
      unless (_suggested_decision = @suggested_decision).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SUGGESTED_DECISION) unless OpenApi::EnumValidator.valid?(_suggested_decision, VALID_VALUES_FOR_SUGGESTED_DECISION)
      end
      unless (_suggested_decision_version = @suggested_decision_version).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("suggested_decision_version", _suggested_decision_version.to_s.size, MAX_LENGTH_FOR_SUGGESTED_DECISION_VERSION)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_id = @account_id).nil?
        return false if _account_id.to_s.size > MAX_LENGTH_FOR_ACCOUNT_ID
      end

      unless (_card_number_source = @card_number_source).nil?
        return false unless OpenApi::EnumValidator.valid?(_card_number_source, VALID_VALUES_FOR_CARD_NUMBER_SOURCE)
      end

      unless (_cardholder_address = @cardholder_address).nil?
        return false if _cardholder_address.is_a?(OpenApi::Validatable) && !_cardholder_address.valid?
      end

      unless (_cardholder_name = @cardholder_name).nil?
        return false if _cardholder_name.to_s.size > MAX_LENGTH_FOR_CARDHOLDER_NAME
      end

      unless (_hashed_account_email_address = @hashed_account_email_address).nil?
        return false if _hashed_account_email_address.to_s.size > MAX_LENGTH_FOR_HASHED_ACCOUNT_EMAIL_ADDRESS
      end

      unless (_reason_codes = @reason_codes).nil?
        return false unless OpenApi::EnumValidator.valid?(_reason_codes, VALID_VALUES_FOR_REASON_CODES)
      end

      unless (_suggested_decision = @suggested_decision).nil?
        return false unless OpenApi::EnumValidator.valid?(_suggested_decision, VALID_VALUES_FOR_SUGGESTED_DECISION)
      end

      unless (_suggested_decision_version = @suggested_decision_version).nil?
        return false if _suggested_decision_version.to_s.size > MAX_LENGTH_FOR_SUGGESTED_DECISION_VERSION
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_id", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_ID)
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_trust_score Object to be assigned
    def account_trust_score=(new_value : Int64?)
      @account_trust_score = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_number_source Object to be assigned
    def card_number_source=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("card_number_source", new_value, VALID_VALUES_FOR_CARD_NUMBER_SOURCE)
      end

      @card_number_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cardholder_address Object to be assigned
    def cardholder_address=(new_value : Stripe::IssuingNetworkTokenAddress?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cardholder_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cardholder_name Object to be assigned
    def cardholder_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cardholder_name", new_value.to_s.size, MAX_LENGTH_FOR_CARDHOLDER_NAME)
      end

      @cardholder_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_trust_score Object to be assigned
    def device_trust_score=(new_value : Int64?)
      @device_trust_score = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hashed_account_email_address Object to be assigned
    def hashed_account_email_address=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("hashed_account_email_address", new_value.to_s.size, MAX_LENGTH_FOR_HASHED_ACCOUNT_EMAIL_ADDRESS)
      end

      @hashed_account_email_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason_codes Object to be assigned
    def reason_codes=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("reason_codes", new_value, VALID_VALUES_FOR_REASON_CODES)
      end

      @reason_codes = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] suggested_decision Object to be assigned
    def suggested_decision=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("suggested_decision", new_value, VALID_VALUES_FOR_SUGGESTED_DECISION)
      end

      @suggested_decision = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] suggested_decision_version Object to be assigned
    def suggested_decision_version=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("suggested_decision_version", new_value.to_s.size, MAX_LENGTH_FOR_SUGGESTED_DECISION_VERSION)
      end

      @suggested_decision_version = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @account_trust_score, @card_number_source, @cardholder_address, @cardholder_name, @device_trust_score, @hashed_account_email_address, @reason_codes, @suggested_decision, @suggested_decision_version)
  end
end
