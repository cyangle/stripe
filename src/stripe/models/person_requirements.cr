#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PersonRequirements
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    @[JSON::Field(key: "alternatives", type: Array(AccountRequirementsAlternative)?, presence: true, ignore_serialize: alternatives.nil? && !alternatives_present?)]
    property alternatives : Array(AccountRequirementsAlternative)?

    @[JSON::Field(ignore: true)]
    property? alternatives_present : Bool = false

    @[JSON::Field(key: "currently_due", type: Array(String))]
    property currently_due : Array(String)

    # Fields that are `currently_due` and need to be collected again because validation or verification failed.
    @[JSON::Field(key: "errors", type: Array(AccountRequirementsError))]
    property errors : Array(AccountRequirementsError)

    @[JSON::Field(key: "eventually_due", type: Array(String))]
    property eventually_due : Array(String)

    @[JSON::Field(key: "past_due", type: Array(String))]
    property past_due : Array(String)

    @[JSON::Field(key: "pending_verification", type: Array(String))]
    property pending_verification : Array(String)

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @alternatives : Array(AccountRequirementsAlternative)?, @currently_due : Array(String), @errors : Array(AccountRequirementsError), @eventually_due : Array(String), @past_due : Array(String), @pending_verification : Array(String))
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        alternatives == o.alternatives &&
        currently_due == o.currently_due &&
        errors == o.errors &&
        eventually_due == o.eventually_due &&
        past_due == o.past_due &&
        pending_verification == o.pending_verification
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@alternatives, @currently_due, @errors, @eventually_due, @past_due, @pending_verification)
  end
end
