#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Result from a selfie check
  @[JSON::Serializable::Options(emit_nulls: true)]
  class GelatoSelfieReport
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.
    @[JSON::Field(key: "document", type: String?, presence: true, ignore_serialize: document.nil? && !document_present?)]
    getter document : String?

    @[JSON::Field(ignore: true)]
    property? document_present : Bool = false

    @[JSON::Field(key: "error", type: GelatoSelfieReportError1?, presence: true, ignore_serialize: error.nil? && !error_present?)]
    property error : GelatoSelfieReportError1?

    @[JSON::Field(ignore: true)]
    property? error_present : Bool = false

    # ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.
    @[JSON::Field(key: "selfie", type: String?, presence: true, ignore_serialize: selfie.nil? && !selfie_present?)]
    getter selfie : String?

    @[JSON::Field(ignore: true)]
    property? selfie_present : Bool = false

    # Status of this `selfie` check.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["unverified", "verified"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @document : String?, @error : GelatoSelfieReportError1?, @selfie : String?, @status : String)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @document.to_s.size > 5000
        invalid_properties.push("invalid value for \"document\", the character length must be smaller than or equal to 5000.")
      end

      if @selfie.to_s.size > 5000
        invalid_properties.push("invalid value for \"selfie\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @document.to_s.size > 5000
      return false if @selfie.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] document Value to be assigned
    def document=(document)
      if document.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"document\", the character length must be smaller than or equal to 5000.")
      end

      @document = document
    end

    # Custom attribute writer method with validation
    # @param [Object] selfie Value to be assigned
    def selfie=(selfie)
      if selfie.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"selfie\", the character length must be smaller than or equal to 5000.")
      end

      @selfie = selfie
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        document == o.document &&
        error == o.error &&
        selfie == o.selfie &&
        status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@document, @error, @selfie, @status)
  end
end
