#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Result from a selfie check
  class GelatoSelfieReport
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Status of this `selfie` check.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    VALID_VALUES_FOR_STATUS = StaticArray["unverified", "verified"]

    # Optional properties

    # ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.
    @[JSON::Field(key: "document", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: document.nil? && !document_present?)]
    getter document : String? = nil

    @[JSON::Field(ignore: true)]
    property? document_present : Bool = false

    @[JSON::Field(key: "error", type: Stripe::GelatoSelfieReportError1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: error.nil? && !error_present?)]
    getter error : Stripe::GelatoSelfieReportError1? = nil

    @[JSON::Field(ignore: true)]
    property? error_present : Bool = false

    # ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.
    @[JSON::Field(key: "selfie", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: selfie.nil? && !selfie_present?)]
    getter selfie : String? = nil

    @[JSON::Field(ignore: true)]
    property? selfie_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @status : String? = nil,
      # Optional properties
      @document : String? = nil,
      @error : Stripe::GelatoSelfieReportError1? = nil,
      @selfie : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      if _status = @status
        invalid_properties.push(OpenApi::EnumValidator.error_message("status", VALID_VALUES_FOR_STATUS)) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      if _document = @document
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("document", _document.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _error = @error
        invalid_properties.concat(_error.list_invalid_properties_for("error")) if _error.is_a?(OpenApi::Validatable)
      end
      if _selfie = @selfie
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("selfie", _selfie.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @status.nil?
      if _status = @status
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      if _document = @document
        return false if _document.to_s.size > 5000
      end

      if _error = @error
        return false if _error.is_a?(OpenApi::Validatable) && !_error.valid?
      end

      if _selfie = @selfie
        return false if _selfie.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      OpenApi::EnumValidator.validate("status", _status, VALID_VALUES_FOR_STATUS)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document Object to be assigned
    def document=(document : String?)
      if document.nil?
        return @document = nil
      end
      _document = document.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("document", _document.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @document = _document
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error Object to be assigned
    def error=(error : Stripe::GelatoSelfieReportError1?)
      if error.nil?
        return @error = nil
      end
      _error = error.not_nil!
      _error.validate if _error.is_a?(OpenApi::Validatable)
      @error = _error
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] selfie Object to be assigned
    def selfie=(selfie : String?)
      if selfie.nil?
        return @selfie = nil
      end
      _selfie = selfie.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("selfie", _selfie.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @selfie = _selfie
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @document, @document_present, @error, @error_present, @selfie, @selfie_present)
  end
end
