#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Represents an action performed by the reader
  class TerminalReaderReaderResourceReaderAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Status of the action performed by the reader.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [failed, in_progress, succeeded]."
    VALID_VALUES_FOR_STATUS  = StaticArray["failed", "in_progress", "succeeded"]

    # Type of action performed by the reader.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [process_payment_intent, process_setup_intent, set_reader_display]."
    VALID_VALUES_FOR__TYPE  = StaticArray["process_payment_intent", "process_setup_intent", "set_reader_display"]

    # Optional properties

    # Failure code, only set if status is `failed`.
    @[JSON::Field(key: "failure_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_code.nil? && !failure_code_present?)]
    getter failure_code : String? = nil
    MAX_LENGTH_FOR_FAILURE_CODE = 5000

    @[JSON::Field(ignore: true)]
    property? failure_code_present : Bool = false

    # Detailed failure message, only set if status is `failed`.
    @[JSON::Field(key: "failure_message", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_message.nil? && !failure_message_present?)]
    getter failure_message : String? = nil
    MAX_LENGTH_FOR_FAILURE_MESSAGE = 5000

    @[JSON::Field(ignore: true)]
    property? failure_message_present : Bool = false

    @[JSON::Field(key: "process_payment_intent", type: Stripe::TerminalReaderReaderResourceProcessPaymentIntentAction?, default: nil, required: false, nullable: false, emit_null: false)]
    getter process_payment_intent : Stripe::TerminalReaderReaderResourceProcessPaymentIntentAction? = nil

    @[JSON::Field(key: "process_setup_intent", type: Stripe::TerminalReaderReaderResourceProcessSetupIntentAction?, default: nil, required: false, nullable: false, emit_null: false)]
    getter process_setup_intent : Stripe::TerminalReaderReaderResourceProcessSetupIntentAction? = nil

    @[JSON::Field(key: "set_reader_display", type: Stripe::TerminalReaderReaderResourceSetReaderDisplayAction?, default: nil, required: false, nullable: false, emit_null: false)]
    getter set_reader_display : Stripe::TerminalReaderReaderResourceSetReaderDisplayAction? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @failure_code : String? = nil,
      @failure_message : String? = nil,
      @process_payment_intent : Stripe::TerminalReaderReaderResourceProcessPaymentIntentAction? = nil,
      @process_setup_intent : Stripe::TerminalReaderReaderResourceProcessSetupIntentAction? = nil,
      @set_reader_display : Stripe::TerminalReaderReaderResourceSetReaderDisplayAction? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      if _status = @status
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      if __type = @_type
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      if _failure_code = @failure_code
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_code", _failure_code.to_s.size, MAX_LENGTH_FOR_FAILURE_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      if _failure_message = @failure_message
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_message", _failure_message.to_s.size, MAX_LENGTH_FOR_FAILURE_MESSAGE)
          invalid_properties.push(max_length_error)
        end
      end
      if _process_payment_intent = @process_payment_intent
        invalid_properties.concat(_process_payment_intent.list_invalid_properties_for("process_payment_intent")) if _process_payment_intent.is_a?(OpenApi::Validatable)
      end
      if _process_setup_intent = @process_setup_intent
        invalid_properties.concat(_process_setup_intent.list_invalid_properties_for("process_setup_intent")) if _process_setup_intent.is_a?(OpenApi::Validatable)
      end
      if _set_reader_display = @set_reader_display
        invalid_properties.concat(_set_reader_display.list_invalid_properties_for("set_reader_display")) if _set_reader_display.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @status.nil?
      if _status = @status
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @_type.nil?
      if __type = @_type
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      if _failure_code = @failure_code
        return false if _failure_code.to_s.size > MAX_LENGTH_FOR_FAILURE_CODE
      end

      if _failure_message = @failure_message
        return false if _failure_message.to_s.size > MAX_LENGTH_FOR_FAILURE_MESSAGE
      end

      if _process_payment_intent = @process_payment_intent
        return false if _process_payment_intent.is_a?(OpenApi::Validatable) && !_process_payment_intent.valid?
      end

      if _process_setup_intent = @process_setup_intent
        return false if _process_setup_intent.is_a?(OpenApi::Validatable) && !_process_setup_intent.valid?
      end

      if _set_reader_display = @set_reader_display
        return false if _set_reader_display.is_a?(OpenApi::Validatable) && !_set_reader_display.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      OpenApi::EnumValidator.validate("status", _status, VALID_VALUES_FOR_STATUS)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      OpenApi::EnumValidator.validate("_type", __type, VALID_VALUES_FOR__TYPE)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_code Object to be assigned
    def failure_code=(failure_code : String?)
      if failure_code.nil?
        return @failure_code = nil
      end
      _failure_code = failure_code.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("failure_code", _failure_code.to_s.size, MAX_LENGTH_FOR_FAILURE_CODE)
      @failure_code = _failure_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_message Object to be assigned
    def failure_message=(failure_message : String?)
      if failure_message.nil?
        return @failure_message = nil
      end
      _failure_message = failure_message.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("failure_message", _failure_message.to_s.size, MAX_LENGTH_FOR_FAILURE_MESSAGE)
      @failure_message = _failure_message
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] process_payment_intent Object to be assigned
    def process_payment_intent=(process_payment_intent : Stripe::TerminalReaderReaderResourceProcessPaymentIntentAction?)
      if process_payment_intent.nil?
        return @process_payment_intent = nil
      end
      _process_payment_intent = process_payment_intent.not_nil!
      _process_payment_intent.validate if _process_payment_intent.is_a?(OpenApi::Validatable)
      @process_payment_intent = _process_payment_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] process_setup_intent Object to be assigned
    def process_setup_intent=(process_setup_intent : Stripe::TerminalReaderReaderResourceProcessSetupIntentAction?)
      if process_setup_intent.nil?
        return @process_setup_intent = nil
      end
      _process_setup_intent = process_setup_intent.not_nil!
      _process_setup_intent.validate if _process_setup_intent.is_a?(OpenApi::Validatable)
      @process_setup_intent = _process_setup_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] set_reader_display Object to be assigned
    def set_reader_display=(set_reader_display : Stripe::TerminalReaderReaderResourceSetReaderDisplayAction?)
      if set_reader_display.nil?
        return @set_reader_display = nil
      end
      _set_reader_display = set_reader_display.not_nil!
      _set_reader_display.validate if _set_reader_display.is_a?(OpenApi::Validatable)
      @set_reader_display = _set_reader_display
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @_type, @failure_code, @failure_code_present, @failure_message, @failure_message_present, @process_payment_intent, @process_setup_intent, @set_reader_display)
  end
end
