#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Represents an action performed by the reader
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TerminalReaderReaderResourceReaderAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Failure code, only set if status is `failed`.
    @[JSON::Field(key: "failure_code", type: String?, presence: true, ignore_serialize: failure_code.nil? && !failure_code_present?)]
    getter failure_code : String?

    @[JSON::Field(ignore: true)]
    property? failure_code_present : Bool = false

    # Detailed failure message, only set if status is `failed`.
    @[JSON::Field(key: "failure_message", type: String?, presence: true, ignore_serialize: failure_message.nil? && !failure_message_present?)]
    getter failure_message : String?

    @[JSON::Field(ignore: true)]
    property? failure_message_present : Bool = false

    # Status of the action performed by the reader.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["failed", "in_progress", "succeeded"])

    # Type of action performed by the reader.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["process_payment_intent", "process_setup_intent", "set_reader_display"])

    # Optional properties
    @[JSON::Field(key: "process_payment_intent", type: TerminalReaderReaderResourceProcessPaymentIntentAction?, presence: true, ignore_serialize: process_payment_intent.nil? && !process_payment_intent_present?)]
    property process_payment_intent : TerminalReaderReaderResourceProcessPaymentIntentAction?

    @[JSON::Field(ignore: true)]
    property? process_payment_intent_present : Bool = false

    @[JSON::Field(key: "process_setup_intent", type: TerminalReaderReaderResourceProcessSetupIntentAction?, presence: true, ignore_serialize: process_setup_intent.nil? && !process_setup_intent_present?)]
    property process_setup_intent : TerminalReaderReaderResourceProcessSetupIntentAction?

    @[JSON::Field(ignore: true)]
    property? process_setup_intent_present : Bool = false

    @[JSON::Field(key: "set_reader_display", type: TerminalReaderReaderResourceSetReaderDisplayAction?, presence: true, ignore_serialize: set_reader_display.nil? && !set_reader_display_present?)]
    property set_reader_display : TerminalReaderReaderResourceSetReaderDisplayAction?

    @[JSON::Field(ignore: true)]
    property? set_reader_display_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @failure_code : String?, @failure_message : String?, @status : String, @_type : String, @process_payment_intent : TerminalReaderReaderResourceProcessPaymentIntentAction? = nil, @process_setup_intent : TerminalReaderReaderResourceProcessSetupIntentAction? = nil, @set_reader_display : TerminalReaderReaderResourceSetReaderDisplayAction? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @failure_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      if @failure_message.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @failure_code.to_s.size > 5000
      return false if @failure_message.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_code Value to be assigned
    def failure_code=(failure_code)
      if failure_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      @failure_code = failure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_message Value to be assigned
    def failure_message=(failure_message)
      if failure_message.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      @failure_message = failure_message
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        failure_code == o.failure_code &&
        failure_message == o.failure_message &&
        process_payment_intent == o.process_payment_intent &&
        process_setup_intent == o.process_setup_intent &&
        set_reader_display == o.set_reader_display &&
        status == o.status &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@failure_code, @failure_message, @process_payment_intent, @process_setup_intent, @set_reader_display, @status, @_type)
  end
end
