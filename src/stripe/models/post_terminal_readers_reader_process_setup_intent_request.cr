#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./process_setup_config"

module Stripe
  class PostTerminalReadersReaderProcessSetupIntentRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Customer Consent Collected
    @[JSON::Field(key: "customer_consent_collected", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter customer_consent_collected : Bool? = nil

    # SetupIntent ID
    @[JSON::Field(key: "setup_intent", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter setup_intent : String? = nil
    MAX_LENGTH_FOR_SETUP_INTENT = 5000

    # End of Required Properties

    # Optional Properties

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    @[JSON::Field(key: "process_config", type: Stripe::ProcessSetupConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter process_config : Stripe::ProcessSetupConfig? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @customer_consent_collected : Bool? = nil,
      @setup_intent : String? = nil,
      # Optional properties
      @expand : Array(String)? = nil,
      @process_config : Stripe::ProcessSetupConfig? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"customer_consent_collected\" is required and cannot be null") if @customer_consent_collected.nil?

      invalid_properties.push("\"setup_intent\" is required and cannot be null") if @setup_intent.nil?

      unless (_setup_intent = @setup_intent).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("setup_intent", _setup_intent.to_s.size, MAX_LENGTH_FOR_SETUP_INTENT)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_process_config = @process_config).nil?
        invalid_properties.concat(_process_config.list_invalid_properties_for("process_config")) if _process_config.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @customer_consent_collected.nil?

      return false if @setup_intent.nil?
      unless (_setup_intent = @setup_intent).nil?
        return false if _setup_intent.to_s.size > MAX_LENGTH_FOR_SETUP_INTENT
      end

      unless (_process_config = @process_config).nil?
        return false if _process_config.is_a?(OpenApi::Validatable) && !_process_config.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_consent_collected Object to be assigned
    def customer_consent_collected=(new_value : Bool?)
      raise ArgumentError.new("\"customer_consent_collected\" is required and cannot be null") if new_value.nil?

      @customer_consent_collected = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_intent Object to be assigned
    def setup_intent=(new_value : String?)
      raise ArgumentError.new("\"setup_intent\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("setup_intent", new_value.to_s.size, MAX_LENGTH_FOR_SETUP_INTENT)
      end

      @setup_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] process_config Object to be assigned
    def process_config=(new_value : Stripe::ProcessSetupConfig?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @process_config = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@customer_consent_collected, @setup_intent, @expand, @process_config)
  end
end
