#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CustomerAcceptance
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["offline", "online"])

    # Optional properties

    # The time at which the customer accepted the Mandate.
    @[JSON::Field(key: "accepted_at", type: Int64?, presence: true, ignore_serialize: accepted_at.nil? && !accepted_at_present?)]
    property accepted_at : Int64?

    @[JSON::Field(ignore: true)]
    property? accepted_at_present : Bool = false

    #
    @[JSON::Field(key: "offline", type: JSON::Any?, presence: true, ignore_serialize: offline.nil? && !offline_present?)]
    property offline : JSON::Any?

    @[JSON::Field(ignore: true)]
    property? offline_present : Bool = false

    @[JSON::Field(key: "online", type: OnlineAcceptance?, presence: true, ignore_serialize: online.nil? && !online_present?)]
    property online : OnlineAcceptance?

    @[JSON::Field(ignore: true)]
    property? online_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String,
      # Optional properties
      @accepted_at : Int64? = nil,
      @offline : JSON::Any? = nil,
      @online : OnlineAcceptance? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @accepted_at, @accepted_at_present, @offline, @offline_present, @online, @online_present)
  end
end
