#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class UfaResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "billing_details", type: Stripe::UfaResourceBillingDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter billing_details : Stripe::UfaResourceBillingDetails? = nil

    # Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["balance", "financial_account", "issuing_card", "stripe", "us_bank_account"])

    # Optional properties

    # Set when `type` is `balance`.
    @[JSON::Field(key: "balance", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter balance : String? = nil

    ENUM_VALIDATOR_FOR_BALANCE = EnumValidator.new("balance", "String", ["payments"])

    @[JSON::Field(key: "financial_account", type: Stripe::ReceivedPaymentMethodDetailsFinancialAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_account : Stripe::ReceivedPaymentMethodDetailsFinancialAccount? = nil

    # Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID.
    @[JSON::Field(key: "issuing_card", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter issuing_card : String? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::UfaResourceInitiatingPaymentMethodDetailsUsBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::UfaResourceInitiatingPaymentMethodDetailsUsBankAccount? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @billing_details : Stripe::UfaResourceBillingDetails? = nil,
      @_type : String? = nil,
      # Optional properties
      @balance : String? = nil,
      @financial_account : Stripe::ReceivedPaymentMethodDetailsFinancialAccount? = nil,
      @issuing_card : String? = nil,
      @us_bank_account : Stripe::UfaResourceInitiatingPaymentMethodDetailsUsBankAccount? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"billing_details\" is required and cannot be null") if @billing_details.nil?
      # This is a model billing_details : Stripe::UfaResourceBillingDetails?

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BALANCE.error_message) unless ENUM_VALIDATOR_FOR_BALANCE.valid?(@balance)
      # This is a model financial_account : Stripe::ReceivedPaymentMethodDetailsFinancialAccount?
      if _issuing_card = @issuing_card
        if _issuing_card.to_s.size > 5000
          invalid_properties.push("invalid value for \"issuing_card\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model us_bank_account : Stripe::UfaResourceInitiatingPaymentMethodDetailsUsBankAccount?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @billing_details.nil?
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      return false unless ENUM_VALIDATOR_FOR_BALANCE.valid?(@balance)
      if _issuing_card = @issuing_card
        return false if _issuing_card.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_details Object to be assigned
    def billing_details=(billing_details : Stripe::UfaResourceBillingDetails?)
      if billing_details.nil?
        raise ArgumentError.new("\"billing_details\" is required and cannot be null")
      end
      @billing_details = billing_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance Object to be assigned
    def balance=(balance : String?)
      if balance.nil?
        return @balance = nil
      end
      _balance = balance.not_nil!
      ENUM_VALIDATOR_FOR_BALANCE.valid!(_balance)
      @balance = balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_account Object to be assigned
    def financial_account=(financial_account : Stripe::ReceivedPaymentMethodDetailsFinancialAccount?)
      if financial_account.nil?
        return @financial_account = nil
      end
      @financial_account = financial_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuing_card Object to be assigned
    def issuing_card=(issuing_card : String?)
      if issuing_card.nil?
        return @issuing_card = nil
      end
      _issuing_card = issuing_card.not_nil!
      if _issuing_card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"issuing_card\", the character length must be smaller than or equal to 5000.")
      end

      @issuing_card = issuing_card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(us_bank_account : Stripe::UfaResourceInitiatingPaymentMethodDetailsUsBankAccount?)
      if us_bank_account.nil?
        return @us_bank_account = nil
      end
      @us_bank_account = us_bank_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@billing_details, @_type, @balance, @financial_account, @issuing_card, @us_bank_account)
  end
end
