#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class UfaResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "billing_details", type: UfaResourceBillingDetails)]
    property billing_details : UfaResourceBillingDetails

    # Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["balance", "financial_account", "issuing_card", "stripe", "us_bank_account"])

    # Optional properties
    # Set when `type` is `balance`.
    @[JSON::Field(key: "balance", type: String?, presence: true, ignore_serialize: balance.nil? && !balance_present?)]
    getter balance : String?

    @[JSON::Field(ignore: true)]
    property? balance_present : Bool = false

    ENUM_VALIDATOR_FOR_BALANCE = EnumValidator.new("balance", "String", ["payments"])

    @[JSON::Field(key: "financial_account", type: ReceivedPaymentMethodDetailsFinancialAccount?, presence: true, ignore_serialize: financial_account.nil? && !financial_account_present?)]
    property financial_account : ReceivedPaymentMethodDetailsFinancialAccount?

    @[JSON::Field(ignore: true)]
    property? financial_account_present : Bool = false

    # Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID.
    @[JSON::Field(key: "issuing_card", type: String?, presence: true, ignore_serialize: issuing_card.nil? && !issuing_card_present?)]
    getter issuing_card : String?

    @[JSON::Field(ignore: true)]
    property? issuing_card_present : Bool = false

    @[JSON::Field(key: "us_bank_account", type: UfaResourceInitiatingPaymentMethodDetailsUsBankAccount?, presence: true, ignore_serialize: us_bank_account.nil? && !us_bank_account_present?)]
    property us_bank_account : UfaResourceInitiatingPaymentMethodDetailsUsBankAccount?

    @[JSON::Field(ignore: true)]
    property? us_bank_account_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @billing_details : UfaResourceBillingDetails, @_type : String, @balance : String? = nil, @financial_account : ReceivedPaymentMethodDetailsFinancialAccount? = nil, @issuing_card : String? = nil, @us_bank_account : UfaResourceInitiatingPaymentMethodDetailsUsBankAccount? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push(ENUM_VALIDATOR_FOR_BALANCE.error_message) unless ENUM_VALIDATOR_FOR_BALANCE.valid?(@balance)

      if !@issuing_card.nil? && @issuing_card.to_s.size > 5000
        invalid_properties.push("invalid value for \"issuing_card\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BALANCE.valid?(@balance)
      return false if !@issuing_card.nil? && @issuing_card.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance Object to be assigned
    def balance=(balance)
      ENUM_VALIDATOR_FOR_BALANCE.valid!(balance)
      @balance = balance
    end

    # Custom attribute writer method with validation
    # @param [Object] issuing_card Value to be assigned
    def issuing_card=(issuing_card)
      if !issuing_card.nil? && issuing_card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"issuing_card\", the character length must be smaller than or equal to 5000.")
      end

      @issuing_card = issuing_card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        balance == o.balance &&
        billing_details == o.billing_details &&
        financial_account == o.financial_account &&
        issuing_card == o.issuing_card &&
        _type == o._type &&
        us_bank_account == o.us_bank_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@balance, @billing_details, @financial_account, @issuing_card, @_type, @us_bank_account)
  end
end
