#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AccountCapabilityRequirements
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.
    @[JSON::Field(key: "currently_due", type: Array(String))]
    property currently_due : Array(String)

    # Fields that are `currently_due` and need to be collected again because validation or verification failed.
    @[JSON::Field(key: "errors", type: Array(AccountRequirementsError))]
    property errors : Array(AccountRequirementsError)

    # Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
    @[JSON::Field(key: "eventually_due", type: Array(String))]
    property eventually_due : Array(String)

    # Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account.
    @[JSON::Field(key: "past_due", type: Array(String))]
    property past_due : Array(String)

    # Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
    @[JSON::Field(key: "pending_verification", type: Array(String))]
    property pending_verification : Array(String)

    # Optional properties

    # Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    @[JSON::Field(key: "alternatives", type: Array(AccountRequirementsAlternative)?, presence: true, ignore_serialize: alternatives.nil? && !alternatives_present?)]
    property alternatives : Array(AccountRequirementsAlternative)?

    @[JSON::Field(ignore: true)]
    property? alternatives_present : Bool = false

    # Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.
    @[JSON::Field(key: "current_deadline", type: Int64?, presence: true, ignore_serialize: current_deadline.nil? && !current_deadline_present?)]
    property current_deadline : Int64?

    @[JSON::Field(ignore: true)]
    property? current_deadline_present : Bool = false

    # If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.  `rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:  - [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)  If you believe that the rejection is in error, please contact support at https://support.stripe.com/contact/ for assistance.
    @[JSON::Field(key: "disabled_reason", type: String?, presence: true, ignore_serialize: disabled_reason.nil? && !disabled_reason_present?)]
    getter disabled_reason : String?

    @[JSON::Field(ignore: true)]
    property? disabled_reason_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @currently_due : Array(String),
      @errors : Array(AccountRequirementsError),
      @eventually_due : Array(String),
      @past_due : Array(String),
      @pending_verification : Array(String),
      # Optional properties
      @alternatives : Array(AccountRequirementsAlternative)? = nil,
      @current_deadline : Int64? = nil,
      @disabled_reason : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@disabled_reason.nil? && @disabled_reason.to_s.size > 5000
        invalid_properties.push("invalid value for \"disabled_reason\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@disabled_reason.nil? && @disabled_reason.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] disabled_reason Value to be assigned
    def disabled_reason=(disabled_reason : String?)
      if !disabled_reason.nil? && disabled_reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"disabled_reason\", the character length must be smaller than or equal to 5000.")
      end

      @disabled_reason = disabled_reason
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@currently_due, @errors, @eventually_due, @past_due, @pending_verification, @alternatives, @alternatives_present, @current_deadline, @current_deadline_present, @disabled_reason, @disabled_reason_present)
  end
end
