#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft"
require "./customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction"
require "./customer_balance_resource_cash_balance_transaction_resource_funded_transaction"
require "./customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction"
require "./customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance"
require "./customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction"
require "./customer_cash_balance_transaction"
require "./customer_cash_balance_transaction_customer"

module Stripe
  # The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds.
  class CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftLinkedTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil
    MAX_LENGTH_FOR_CURRENCY = 5000

    @[JSON::Field(key: "customer", type: Stripe::CustomerCashBalanceTransactionCustomer?, default: nil, required: true, nullable: false, emit_null: false)]
    property customer : Stripe::CustomerCashBalanceTransactionCustomer? = nil

    # The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "ending_balance", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property ending_balance : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.
    @[JSON::Field(key: "net_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property net_amount : Int64? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [customer_cash_balance_transaction]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("customer_cash_balance_transaction")

    # The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [adjusted_for_overdraft, applied_to_payment, funded, funding_reversed, refunded_from_payment, return_canceled, return_initiated, transferred_to_balance, unapplied_from_payment]."
    VALID_VALUES_FOR__TYPE  = String.static_array("adjusted_for_overdraft", "applied_to_payment", "funded", "funding_reversed", "refunded_from_payment", "return_canceled", "return_initiated", "transferred_to_balance", "unapplied_from_payment")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "adjusted_for_overdraft", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft?, default: nil, required: false, nullable: false, emit_null: false)]
    property adjusted_for_overdraft : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft? = nil

    @[JSON::Field(key: "applied_to_payment", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property applied_to_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction? = nil

    @[JSON::Field(key: "funded", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property funded : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction? = nil

    @[JSON::Field(key: "refunded_from_payment", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property refunded_from_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction? = nil

    @[JSON::Field(key: "transferred_to_balance", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    property transferred_to_balance : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance? = nil

    @[JSON::Field(key: "unapplied_from_payment", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    property unapplied_from_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::CustomerCashBalanceTransaction,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @currency : String? = nil,
      @customer : Stripe::CustomerCashBalanceTransactionCustomer? = nil,
      @ending_balance : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @net_amount : Int64? = nil,
      @object : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @adjusted_for_overdraft : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft? = nil,
      @applied_to_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction? = nil,
      @funded : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction? = nil,
      @refunded_from_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction? = nil,
      @transferred_to_balance : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance? = nil,
      @unapplied_from_payment : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @currency, @customer, @ending_balance, @id, @livemode, @net_amount, @object, @_type, @adjusted_for_overdraft, @applied_to_payment, @funded, @refunded_from_payment, @transferred_to_balance, @unapplied_from_payment)
  end
end
