#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments. For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment. Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.  Create a SetupIntent as soon as you're ready to collect your customer's payment credentials. Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid. The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides you through the setup process.  Successful SetupIntents result in payment credentials that are optimized for future payments. For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents). If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success, it will automatically attach the resulting payment method to that Customer. We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.  By using SetupIntents, you ensure that your customers experience the minimum set of required friction, even as regulations change over time.  Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
  class SetupIntent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["setup_intent"])

    # The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_method_types : Array(String)? = nil

    # [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["canceled", "processing", "requires_action", "requires_confirmation", "requires_payment_method", "succeeded"])

    # Indicates how the payment method is intended to be used in the future.  Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
    @[JSON::Field(key: "usage", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter usage : String? = nil

    # Optional properties

    @[JSON::Field(key: "application", type: Stripe::SetupIntentApplication?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : Stripe::SetupIntentApplication? = nil

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    # If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Accountâ€™s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    @[JSON::Field(key: "attach_to_self", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter attach_to_self : Bool? = nil

    # Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
    @[JSON::Field(key: "cancellation_reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cancellation_reason.nil? && !cancellation_reason_present?)]
    getter cancellation_reason : String? = nil

    @[JSON::Field(ignore: true)]
    property? cancellation_reason_present : Bool = false

    ENUM_VALIDATOR_FOR_CANCELLATION_REASON = EnumValidator.new("cancellation_reason", "String", ["abandoned", "duplicate", "requested_by_customer"])

    # The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.  The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: client_secret.nil? && !client_secret_present?)]
    getter client_secret : String? = nil

    @[JSON::Field(ignore: true)]
    property? client_secret_present : Bool = false

    @[JSON::Field(key: "customer", type: Stripe::SetupIntentCustomer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : Stripe::SetupIntentCustomer? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    @[JSON::Field(key: "flow_directions", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: flow_directions.nil? && !flow_directions_present?)]
    getter flow_directions : Array(String)? = nil

    @[JSON::Field(ignore: true)]
    property? flow_directions_present : Bool = false

    ENUM_VALIDATOR_FOR_FLOW_DIRECTIONS = EnumValidator.new("flow_directions", "Array(String)", ["inbound", "outbound"])

    @[JSON::Field(key: "last_setup_error", type: Stripe::SetupIntentLastSetupError?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last_setup_error.nil? && !last_setup_error_present?)]
    getter last_setup_error : Stripe::SetupIntentLastSetupError? = nil

    @[JSON::Field(ignore: true)]
    property? last_setup_error_present : Bool = false

    @[JSON::Field(key: "latest_attempt", type: Stripe::SetupIntentLatestAttempt?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: latest_attempt.nil? && !latest_attempt_present?)]
    getter latest_attempt : Stripe::SetupIntentLatestAttempt? = nil

    @[JSON::Field(ignore: true)]
    property? latest_attempt_present : Bool = false

    @[JSON::Field(key: "mandate", type: Stripe::SetupIntentMandate?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: mandate.nil? && !mandate_present?)]
    getter mandate : Stripe::SetupIntentMandate? = nil

    @[JSON::Field(ignore: true)]
    property? mandate_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "next_action", type: Stripe::SetupIntentNextAction1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: next_action.nil? && !next_action_present?)]
    getter next_action : Stripe::SetupIntentNextAction1? = nil

    @[JSON::Field(ignore: true)]
    property? next_action_present : Bool = false

    @[JSON::Field(key: "on_behalf_of", type: Stripe::SetupIntentOnBehalfOf?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    getter on_behalf_of : Stripe::SetupIntentOnBehalfOf? = nil

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "payment_method", type: Stripe::SetupIntentPaymentMethod?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method.nil? && !payment_method_present?)]
    getter payment_method : Stripe::SetupIntentPaymentMethod? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_present : Bool = false

    @[JSON::Field(key: "payment_method_options", type: Stripe::SetupIntentPaymentMethodOptions1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method_options.nil? && !payment_method_options_present?)]
    getter payment_method_options : Stripe::SetupIntentPaymentMethodOptions1? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_options_present : Bool = false

    @[JSON::Field(key: "single_use_mandate", type: Stripe::SetupIntentSingleUseMandate?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: single_use_mandate.nil? && !single_use_mandate_present?)]
    getter single_use_mandate : Stripe::SetupIntentSingleUseMandate? = nil

    @[JSON::Field(ignore: true)]
    property? single_use_mandate_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @payment_method_types : Array(String)? = nil,
      @status : String? = nil,
      @usage : String? = nil,
      # Optional properties
      @application : Stripe::SetupIntentApplication? = nil,
      @attach_to_self : Bool? = nil,
      @cancellation_reason : String? = nil,
      @client_secret : String? = nil,
      @customer : Stripe::SetupIntentCustomer? = nil,
      @description : String? = nil,
      @flow_directions : Array(String)? = nil,
      @last_setup_error : Stripe::SetupIntentLastSetupError? = nil,
      @latest_attempt : Stripe::SetupIntentLatestAttempt? = nil,
      @mandate : Stripe::SetupIntentMandate? = nil,
      @metadata : Hash(String, String)? = nil,
      @next_action : Stripe::SetupIntentNextAction1? = nil,
      @on_behalf_of : Stripe::SetupIntentOnBehalfOf? = nil,
      @payment_method : Stripe::SetupIntentPaymentMethod? = nil,
      @payment_method_options : Stripe::SetupIntentPaymentMethodOptions1? = nil,
      @single_use_mandate : Stripe::SetupIntentSingleUseMandate? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"payment_method_types\" is required and cannot be null") if @payment_method_types.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      invalid_properties.push("\"usage\" is required and cannot be null") if @usage.nil?
      if _usage = @usage
        if _usage.to_s.size > 5000
          invalid_properties.push("invalid value for \"usage\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model application : Stripe::SetupIntentApplication?

      invalid_properties.push(ENUM_VALIDATOR_FOR_CANCELLATION_REASON.error_message) unless ENUM_VALIDATOR_FOR_CANCELLATION_REASON.valid?(@cancellation_reason)
      if _client_secret = @client_secret
        if _client_secret.to_s.size > 5000
          invalid_properties.push("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model customer : Stripe::SetupIntentCustomer?
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_FLOW_DIRECTIONS.error_message) unless ENUM_VALIDATOR_FOR_FLOW_DIRECTIONS.all_valid?(@flow_directions)
      # This is a model last_setup_error : Stripe::SetupIntentLastSetupError?
      # This is a model latest_attempt : Stripe::SetupIntentLatestAttempt?
      # This is a model mandate : Stripe::SetupIntentMandate?
      # This is a model next_action : Stripe::SetupIntentNextAction1?
      # This is a model on_behalf_of : Stripe::SetupIntentOnBehalfOf?
      # This is a model payment_method : Stripe::SetupIntentPaymentMethod?
      # This is a model payment_method_options : Stripe::SetupIntentPaymentMethodOptions1?
      # This is a model single_use_mandate : Stripe::SetupIntentSingleUseMandate?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @created.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @payment_method_types.nil?
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false if @usage.nil?
      if _usage = @usage
        return false if _usage.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_CANCELLATION_REASON.valid?(@cancellation_reason)
      if _client_secret = @client_secret
        return false if _client_secret.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_FLOW_DIRECTIONS.all_valid?(@flow_directions)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(payment_method_types : Array(String)?)
      if payment_method_types.nil?
        raise ArgumentError.new("\"payment_method_types\" is required and cannot be null")
      end
      @payment_method_types = payment_method_types
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage Object to be assigned
    def usage=(usage : String?)
      if usage.nil?
        raise ArgumentError.new("\"usage\" is required and cannot be null")
      end
      _usage = usage.not_nil!
      if _usage.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"usage\", the character length must be smaller than or equal to 5000.")
      end

      @usage = usage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(application : Stripe::SetupIntentApplication?)
      if application.nil?
        return @application = nil
      end
      @application = application
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attach_to_self Object to be assigned
    def attach_to_self=(attach_to_self : Bool?)
      if attach_to_self.nil?
        return @attach_to_self = nil
      end
      @attach_to_self = attach_to_self
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_reason Object to be assigned
    def cancellation_reason=(cancellation_reason : String?)
      if cancellation_reason.nil?
        return @cancellation_reason = nil
      end
      _cancellation_reason = cancellation_reason.not_nil!
      ENUM_VALIDATOR_FOR_CANCELLATION_REASON.valid!(_cancellation_reason)
      @cancellation_reason = cancellation_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_secret Object to be assigned
    def client_secret=(client_secret : String?)
      if client_secret.nil?
        return @client_secret = nil
      end
      _client_secret = client_secret.not_nil!
      if _client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      @client_secret = client_secret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : Stripe::SetupIntentCustomer?)
      if customer.nil?
        return @customer = nil
      end
      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow_directions Object to be assigned
    def flow_directions=(flow_directions : Array(String)?)
      if flow_directions.nil?
        return @flow_directions = nil
      end
      _flow_directions = flow_directions.not_nil!
      ENUM_VALIDATOR_FOR_FLOW_DIRECTIONS.all_valid!(_flow_directions)
      @flow_directions = flow_directions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_setup_error Object to be assigned
    def last_setup_error=(last_setup_error : Stripe::SetupIntentLastSetupError?)
      if last_setup_error.nil?
        return @last_setup_error = nil
      end
      @last_setup_error = last_setup_error
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] latest_attempt Object to be assigned
    def latest_attempt=(latest_attempt : Stripe::SetupIntentLatestAttempt?)
      if latest_attempt.nil?
        return @latest_attempt = nil
      end
      @latest_attempt = latest_attempt
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate Object to be assigned
    def mandate=(mandate : Stripe::SetupIntentMandate?)
      if mandate.nil?
        return @mandate = nil
      end
      @mandate = mandate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_action Object to be assigned
    def next_action=(next_action : Stripe::SetupIntentNextAction1?)
      if next_action.nil?
        return @next_action = nil
      end
      @next_action = next_action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(on_behalf_of : Stripe::SetupIntentOnBehalfOf?)
      if on_behalf_of.nil?
        return @on_behalf_of = nil
      end
      @on_behalf_of = on_behalf_of
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(payment_method : Stripe::SetupIntentPaymentMethod?)
      if payment_method.nil?
        return @payment_method = nil
      end
      @payment_method = payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(payment_method_options : Stripe::SetupIntentPaymentMethodOptions1?)
      if payment_method_options.nil?
        return @payment_method_options = nil
      end
      @payment_method_options = payment_method_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] single_use_mandate Object to be assigned
    def single_use_mandate=(single_use_mandate : Stripe::SetupIntentSingleUseMandate?)
      if single_use_mandate.nil?
        return @single_use_mandate = nil
      end
      @single_use_mandate = single_use_mandate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @id, @livemode, @object, @payment_method_types, @status, @usage, @application, @application_present, @attach_to_self, @cancellation_reason, @cancellation_reason_present, @client_secret, @client_secret_present, @customer, @customer_present, @description, @description_present, @flow_directions, @flow_directions_present, @last_setup_error, @last_setup_error_present, @latest_attempt, @latest_attempt_present, @mandate, @mandate_present, @metadata, @metadata_present, @next_action, @next_action_present, @on_behalf_of, @on_behalf_of_present, @payment_method, @payment_method_present, @payment_method_options, @payment_method_options_present, @single_use_mandate, @single_use_mandate_present)
  end
end
