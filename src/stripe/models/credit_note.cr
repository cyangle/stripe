#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # Issue a credit note to adjust an invoice's amount after the invoice is finalized.  Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
  class CreditNote
    include NASON::Serializable

    # Required properties
    # The integer amount in %s representing the total amount of the credit note, including tax.
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # ID of the customer.
    @[NASON::Field(key: "customer", type: String | Customer | Null, nillable: false)]
    property customer : String | Customer | Null

    # The integer amount in %s representing the total amount of discount that was credited.
    @[NASON::Field(key: "discount_amount", type: Int64)]
    property discount_amount : Int64

    # The aggregate amounts calculated per discount for all line items.
    @[NASON::Field(key: "discount_amounts", type: Array(DiscountsResourceDiscountAmount))]
    property discount_amounts : Array(DiscountsResourceDiscountAmount)

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # ID of the invoice.
    @[NASON::Field(key: "invoice", type: String | Invoice | Null, nillable: false)]
    property invoice : String | Invoice | Null

    @[NASON::Field(key: "lines", type: CreditNoteLinesList1)]
    property lines : CreditNoteLinesList1

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
    @[NASON::Field(key: "number", type: String)]
    property number : String

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # The link to download the PDF of the credit note.
    @[NASON::Field(key: "pdf", type: String)]
    property pdf : String

    # Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # The integer amount in %s representing the amount of the credit note, excluding tax and invoice level discounts.
    @[NASON::Field(key: "subtotal", type: Int64)]
    property subtotal : Int64

    # The aggregate amounts calculated per tax rate for all line items.
    @[NASON::Field(key: "tax_amounts", type: Array(CreditNoteTaxAmount))]
    property tax_amounts : Array(CreditNoteTaxAmount)

    # The integer amount in %s representing the total amount of the credit note, including tax and all discount.
    @[NASON::Field(key: "total", type: Int64)]
    property total : Int64

    # Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
    @[NASON::Field(key: "type", type: String)]
    property _type : String

    # Optional properties
    # Customer balance transaction related to this credit note.
    @[NASON::Field(key: "customer_balance_transaction", type: String | CustomerBalanceTransaction | Nil | Null, nillable: true)]
    property customer_balance_transaction : String | CustomerBalanceTransaction | Nil | Null

    # Customer-facing text that appears on the credit note PDF.
    @[NASON::Field(key: "memo", type: String? | Null, nillable: true)]
    property memo : String? | Null

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    # Amount that was credited outside of Stripe.
    @[NASON::Field(key: "out_of_band_amount", type: Int64? | Null, nillable: true)]
    property out_of_band_amount : Int64? | Null

    # Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    @[NASON::Field(key: "reason", type: String? | Null, nillable: true)]
    property reason : String? | Null

    # Refund related to this credit note.
    @[NASON::Field(key: "refund", type: String | Refund? | Null, nillable: true)]
    property refund : String | Refund? | Null

    # The time that the credit note was voided.
    @[NASON::Field(key: "voided_at", type: Int64? | Null, nillable: true)]
    property voided_at : Int64? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @created : Int64, @currency : String, @customer : String | Customer | Null, @discount_amount : Int64, @discount_amounts : Array(DiscountsResourceDiscountAmount), @id : String, @invoice : String | Invoice | Null, @lines : CreditNoteLinesList1, @livemode : Bool, @number : String, @object : String, @pdf : String, @status : String, @subtotal : Int64, @tax_amounts : Array(CreditNoteTaxAmount), @total : Int64, @_type : String, @customer_balance_transaction : String | CustomerBalanceTransaction | Nil | Null = nil, @memo : String? | Null = nil, @metadata : Hash(String, String)? | Null = nil, @out_of_band_amount : Int64? | Null = nil, @reason : String? | Null = nil, @refund : String | Refund? | Null = nil, @voided_at : Int64? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@memo.nil? && !@memo.null? && @memo.to_s.size > 5000
        invalid_properties.push("invalid value for \"memo\", the character length must be smaller than or equal to 5000.")
      end

      if @number.to_s.size > 5000
        invalid_properties.push("invalid value for \"number\", the character length must be smaller than or equal to 5000.")
      end

      if @pdf.to_s.size > 5000
        invalid_properties.push("invalid value for \"pdf\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false if !@memo.nil? && !@memo.null? && @memo.to_s.size > 5000
      return false if @number.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["credit_note"])
      return false unless object_validator.valid?(@object)
      return false if @pdf.to_s.size > 5000
      reason_validator = EnumAttributeValidator.new("String", ["duplicate", "fraudulent", "order_change", "product_unsatisfactory"])
      return false unless reason_validator.valid?(@reason)
      status_validator = EnumAttributeValidator.new("String", ["issued", "void"])
      return false unless status_validator.valid?(@status)
      _type_validator = EnumAttributeValidator.new("String", ["post_payment", "pre_payment"])
      return false unless _type_validator.valid?(@_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] memo Value to be assigned
    def memo=(memo)
      if !memo.nil? && !@memo.null? && memo.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"memo\", the character length must be smaller than or equal to 5000.")
      end

      @memo = memo
    end

    # Custom attribute writer method with validation
    # @param [Object] number Value to be assigned
    def number=(number)
      if number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"number\", the character length must be smaller than or equal to 5000.")
      end

      @number = number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["credit_note"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] pdf Value to be assigned
    def pdf=(pdf)
      if pdf.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"pdf\", the character length must be smaller than or equal to 5000.")
      end

      @pdf = pdf
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason)
      validator = EnumAttributeValidator.new("String", ["duplicate", "fraudulent", "order_change", "product_unsatisfactory"])
      unless validator.valid?(reason)
        raise ArgumentError.new("invalid value for \"reason\", must be one of #{validator.allowable_values}.")
      end
      @reason = reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["issued", "void"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      validator = EnumAttributeValidator.new("String", ["post_payment", "pre_payment"])
      unless validator.valid?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{validator.allowable_values}.")
      end
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        created == o.created &&
        currency == o.currency &&
        customer == o.customer &&
        customer_balance_transaction == o.customer_balance_transaction &&
        discount_amount == o.discount_amount &&
        discount_amounts == o.discount_amounts &&
        id == o.id &&
        invoice == o.invoice &&
        lines == o.lines &&
        livemode == o.livemode &&
        memo == o.memo &&
        metadata == o.metadata &&
        number == o.number &&
        object == o.object &&
        out_of_band_amount == o.out_of_band_amount &&
        pdf == o.pdf &&
        reason == o.reason &&
        refund == o.refund &&
        status == o.status &&
        subtotal == o.subtotal &&
        tax_amounts == o.tax_amounts &&
        total == o.total &&
        _type == o._type &&
        voided_at == o.voided_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, created, currency, customer, customer_balance_transaction, discount_amount, discount_amounts, id, invoice, lines, livemode, memo, metadata, number, object, out_of_band_amount, pdf, reason, refund, status, subtotal, tax_amounts, total, _type, voided_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
