#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_note_customer"
require "./credit_note_customer_balance_transaction"
require "./credit_note_invoice"
require "./credit_note_lines_list"
require "./credit_note_refund"
require "./credit_note_shipping_cost1"
require "./credit_note_tax_amount"
require "./discounts_resource_discount_amount"

module Stripe
  # Issue a credit note to adjust an invoice's amount after the invoice is finalized.  Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
  class CreditNote
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # This is the sum of all the shipping amounts.
    @[JSON::Field(key: "amount_shipping", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_shipping : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    @[JSON::Field(key: "customer", type: Stripe::CreditNoteCustomer?, default: nil, required: true, nullable: false, emit_null: false)]
    getter customer : Stripe::CreditNoteCustomer? = nil

    @[JSON::Field(key: "customer_balance_transaction", type: Stripe::CreditNoteCustomerBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_balance_transaction : Stripe::CreditNoteCustomerBalanceTransaction? = nil

    # The integer amount in cents (or local equivalent) representing the total amount of discount that was credited.
    @[JSON::Field(key: "discount_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter discount_amount : Int64? = nil

    # The aggregate amounts calculated per discount for all line items.
    @[JSON::Field(key: "discount_amounts", type: Array(Stripe::DiscountsResourceDiscountAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil

    # The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
    @[JSON::Field(key: "effective_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter effective_at : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "invoice", type: Stripe::CreditNoteInvoice?, default: nil, required: true, nullable: false, emit_null: false)]
    getter invoice : Stripe::CreditNoteInvoice? = nil

    @[JSON::Field(key: "lines", type: Stripe::CreditNoteLinesList?, default: nil, required: true, nullable: false, emit_null: false)]
    getter lines : Stripe::CreditNoteLinesList? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Customer-facing text that appears on the credit note PDF.
    @[JSON::Field(key: "memo", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter memo : String? = nil
    MAX_LENGTH_FOR_MEMO = 5000

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter metadata : Hash(String, String)? = nil

    # A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
    @[JSON::Field(key: "number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter number : String? = nil
    MAX_LENGTH_FOR_NUMBER = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [credit_note]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("credit_note")

    # Amount that was credited outside of Stripe.
    @[JSON::Field(key: "out_of_band_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter out_of_band_amount : Int64? = nil

    # The link to download the PDF of the credit note.
    @[JSON::Field(key: "pdf", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pdf : String? = nil
    MAX_LENGTH_FOR_PDF = 5000

    # Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter reason : String? = nil
    ERROR_MESSAGE_FOR_REASON = "invalid value for \"reason\", must be one of [duplicate, fraudulent, order_change, product_unsatisfactory]."
    VALID_VALUES_FOR_REASON  = String.static_array("duplicate", "fraudulent", "order_change", "product_unsatisfactory")

    @[JSON::Field(key: "refund", type: Stripe::CreditNoteRefund?, default: nil, required: true, nullable: true, emit_null: true)]
    getter refund : Stripe::CreditNoteRefund? = nil

    @[JSON::Field(key: "shipping_cost", type: Stripe::CreditNoteShippingCost1?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_cost : Stripe::CreditNoteShippingCost1? = nil

    # Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [issued, void]."
    VALID_VALUES_FOR_STATUS  = String.static_array("issued", "void")

    # The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts.
    @[JSON::Field(key: "subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter subtotal : Int64? = nil

    # The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts.
    @[JSON::Field(key: "subtotal_excluding_tax", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subtotal_excluding_tax : Int64? = nil

    # The aggregate amounts calculated per tax rate for all line items.
    @[JSON::Field(key: "tax_amounts", type: Array(Stripe::CreditNoteTaxAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_amounts : Array(Stripe::CreditNoteTaxAmount)? = nil

    # The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount.
    @[JSON::Field(key: "total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total : Int64? = nil

    # The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts.
    @[JSON::Field(key: "total_excluding_tax", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter total_excluding_tax : Int64? = nil

    # Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [post_payment, pre_payment]."
    VALID_VALUES_FOR__TYPE  = String.static_array("post_payment", "pre_payment")

    # The time that the credit note was voided.
    @[JSON::Field(key: "voided_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter voided_at : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_shipping : Int64? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @customer : Stripe::CreditNoteCustomer? = nil,
      @customer_balance_transaction : Stripe::CreditNoteCustomerBalanceTransaction? = nil,
      @discount_amount : Int64? = nil,
      @discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil,
      @effective_at : Int64? = nil,
      @id : String? = nil,
      @invoice : Stripe::CreditNoteInvoice? = nil,
      @lines : Stripe::CreditNoteLinesList? = nil,
      @livemode : Bool? = nil,
      @memo : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @number : String? = nil,
      @object : String? = nil,
      @out_of_band_amount : Int64? = nil,
      @pdf : String? = nil,
      @reason : String? = nil,
      @refund : Stripe::CreditNoteRefund? = nil,
      @shipping_cost : Stripe::CreditNoteShippingCost1? = nil,
      @status : String? = nil,
      @subtotal : Int64? = nil,
      @subtotal_excluding_tax : Int64? = nil,
      @tax_amounts : Array(Stripe::CreditNoteTaxAmount)? = nil,
      @total : Int64? = nil,
      @total_excluding_tax : Int64? = nil,
      @_type : String? = nil,
      @voided_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"amount_shipping\" is required and cannot be null") if @amount_shipping.nil?

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"customer\" is required and cannot be null") if @customer.nil?

      unless (_customer = @customer).nil?
        invalid_properties.concat(_customer.list_invalid_properties_for("customer")) if _customer.is_a?(OpenApi::Validatable)
      end
      unless (_customer_balance_transaction = @customer_balance_transaction).nil?
        invalid_properties.concat(_customer_balance_transaction.list_invalid_properties_for("customer_balance_transaction")) if _customer_balance_transaction.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"discount_amount\" is required and cannot be null") if @discount_amount.nil?

      invalid_properties.push("\"discount_amounts\" is required and cannot be null") if @discount_amounts.nil?

      unless (_discount_amounts = @discount_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "discount_amounts", container: _discount_amounts)) if _discount_amounts.is_a?(Array)
      end

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"invoice\" is required and cannot be null") if @invoice.nil?

      unless (_invoice = @invoice).nil?
        invalid_properties.concat(_invoice.list_invalid_properties_for("invoice")) if _invoice.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"lines\" is required and cannot be null") if @lines.nil?

      unless (_lines = @lines).nil?
        invalid_properties.concat(_lines.list_invalid_properties_for("lines")) if _lines.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      unless (_memo = @memo).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("memo", _memo.to_s.size, MAX_LENGTH_FOR_MEMO)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties.push("\"number\" is required and cannot be null") if @number.nil?

      unless (_number = @number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("number", _number.to_s.size, MAX_LENGTH_FOR_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      invalid_properties.push("\"pdf\" is required and cannot be null") if @pdf.nil?

      unless (_pdf = @pdf).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("pdf", _pdf.to_s.size, MAX_LENGTH_FOR_PDF)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_reason = @reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REASON) unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end
      unless (_refund = @refund).nil?
        invalid_properties.concat(_refund.list_invalid_properties_for("refund")) if _refund.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_cost = @shipping_cost).nil?
        invalid_properties.concat(_shipping_cost.list_invalid_properties_for("shipping_cost")) if _shipping_cost.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"subtotal\" is required and cannot be null") if @subtotal.nil?

      invalid_properties.push("\"tax_amounts\" is required and cannot be null") if @tax_amounts.nil?

      unless (_tax_amounts = @tax_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "tax_amounts", container: _tax_amounts)) if _tax_amounts.is_a?(Array)
      end
      invalid_properties.push("\"total\" is required and cannot be null") if @total.nil?

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @amount_shipping.nil?

      return false if @created.nil?

      return false if @currency.nil?

      return false if @customer.nil?
      unless (_customer = @customer).nil?
        return false if _customer.is_a?(OpenApi::Validatable) && !_customer.valid?
      end

      unless (_customer_balance_transaction = @customer_balance_transaction).nil?
        return false if _customer_balance_transaction.is_a?(OpenApi::Validatable) && !_customer_balance_transaction.valid?
      end

      return false if @discount_amount.nil?

      return false if @discount_amounts.nil?
      unless (_discount_amounts = @discount_amounts).nil?
        return false if _discount_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _discount_amounts)
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @invoice.nil?
      unless (_invoice = @invoice).nil?
        return false if _invoice.is_a?(OpenApi::Validatable) && !_invoice.valid?
      end

      return false if @lines.nil?
      unless (_lines = @lines).nil?
        return false if _lines.is_a?(OpenApi::Validatable) && !_lines.valid?
      end

      return false if @livemode.nil?

      unless (_memo = @memo).nil?
        return false if _memo.to_s.size > MAX_LENGTH_FOR_MEMO
      end

      return false if @number.nil?
      unless (_number = @number).nil?
        return false if _number.to_s.size > MAX_LENGTH_FOR_NUMBER
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @pdf.nil?
      unless (_pdf = @pdf).nil?
        return false if _pdf.to_s.size > MAX_LENGTH_FOR_PDF
      end

      unless (_reason = @reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end

      unless (_refund = @refund).nil?
        return false if _refund.is_a?(OpenApi::Validatable) && !_refund.valid?
      end

      unless (_shipping_cost = @shipping_cost).nil?
        return false if _shipping_cost.is_a?(OpenApi::Validatable) && !_shipping_cost.valid?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @subtotal.nil?

      return false if @tax_amounts.nil?
      unless (_tax_amounts = @tax_amounts).nil?
        return false if _tax_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _tax_amounts)
      end

      return false if @total.nil?

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_shipping Object to be assigned
    def amount_shipping=(new_value : Int64?)
      raise ArgumentError.new("\"amount_shipping\" is required and cannot be null") if new_value.nil?

      @amount_shipping = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : Stripe::CreditNoteCustomer?)
      raise ArgumentError.new("\"customer\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance_transaction Object to be assigned
    def customer_balance_transaction=(new_value : Stripe::CreditNoteCustomerBalanceTransaction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_balance_transaction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount_amount Object to be assigned
    def discount_amount=(new_value : Int64?)
      raise ArgumentError.new("\"discount_amount\" is required and cannot be null") if new_value.nil?

      @discount_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount_amounts Object to be assigned
    def discount_amounts=(new_value : Array(Stripe::DiscountsResourceDiscountAmount)?)
      raise ArgumentError.new("\"discount_amounts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @discount_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] effective_at Object to be assigned
    def effective_at=(new_value : Int64?)
      @effective_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice Object to be assigned
    def invoice=(new_value : Stripe::CreditNoteInvoice?)
      raise ArgumentError.new("\"invoice\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lines Object to be assigned
    def lines=(new_value : Stripe::CreditNoteLinesList?)
      raise ArgumentError.new("\"lines\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @lines = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] memo Object to be assigned
    def memo=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("memo", new_value.to_s.size, MAX_LENGTH_FOR_MEMO)
      end

      @memo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number Object to be assigned
    def number=(new_value : String?)
      raise ArgumentError.new("\"number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("number", new_value.to_s.size, MAX_LENGTH_FOR_NUMBER)
      end

      @number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] out_of_band_amount Object to be assigned
    def out_of_band_amount=(new_value : Int64?)
      @out_of_band_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pdf Object to be assigned
    def pdf=(new_value : String?)
      raise ArgumentError.new("\"pdf\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("pdf", new_value.to_s.size, MAX_LENGTH_FOR_PDF)
      end

      @pdf = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("reason", new_value, VALID_VALUES_FOR_REASON)
      end

      @reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund Object to be assigned
    def refund=(new_value : Stripe::CreditNoteRefund?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @refund = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_cost Object to be assigned
    def shipping_cost=(new_value : Stripe::CreditNoteShippingCost1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_cost = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtotal Object to be assigned
    def subtotal=(new_value : Int64?)
      raise ArgumentError.new("\"subtotal\" is required and cannot be null") if new_value.nil?

      @subtotal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtotal_excluding_tax Object to be assigned
    def subtotal_excluding_tax=(new_value : Int64?)
      @subtotal_excluding_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_amounts Object to be assigned
    def tax_amounts=(new_value : Array(Stripe::CreditNoteTaxAmount)?)
      raise ArgumentError.new("\"tax_amounts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @tax_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total Object to be assigned
    def total=(new_value : Int64?)
      raise ArgumentError.new("\"total\" is required and cannot be null") if new_value.nil?

      @total = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_excluding_tax Object to be assigned
    def total_excluding_tax=(new_value : Int64?)
      @total_excluding_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] voided_at Object to be assigned
    def voided_at=(new_value : Int64?)
      @voided_at = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_shipping, @created, @currency, @customer, @customer_balance_transaction, @discount_amount, @discount_amounts, @effective_at, @id, @invoice, @lines, @livemode, @memo, @metadata, @number, @object, @out_of_band_amount, @pdf, @reason, @refund, @shipping_cost, @status, @subtotal, @subtotal_excluding_tax, @tax_amounts, @total, @total_excluding_tax, @_type, @voided_at)
  end
end
