#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AccountTosAcceptance
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The Unix timestamp marking when the account representative accepted their service agreement
    @[JSON::Field(key: "date", type: Int64?, presence: true, ignore_serialize: date.nil? && !date_present?)]
    property date : Int64?

    @[JSON::Field(ignore: true)]
    property? date_present : Bool = false

    # The IP address from which the account representative accepted their service agreement
    @[JSON::Field(key: "ip", type: String?, presence: true, ignore_serialize: ip.nil? && !ip_present?)]
    getter ip : String?

    @[JSON::Field(ignore: true)]
    property? ip_present : Bool = false

    # The user's service agreement type
    @[JSON::Field(key: "service_agreement", type: String?, presence: true, ignore_serialize: service_agreement.nil? && !service_agreement_present?)]
    getter service_agreement : String?

    @[JSON::Field(ignore: true)]
    property? service_agreement_present : Bool = false

    # The user agent of the browser from which the account representative accepted their service agreement
    @[JSON::Field(key: "user_agent", type: String?, presence: true, ignore_serialize: user_agent.nil? && !user_agent_present?)]
    getter user_agent : String?

    @[JSON::Field(ignore: true)]
    property? user_agent_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @date : Int64? = nil, @ip : String? = nil, @service_agreement : String? = nil, @user_agent : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@ip.nil? && @ip.to_s.size > 5000
        invalid_properties.push("invalid value for \"ip\", the character length must be smaller than or equal to 5000.")
      end

      if !@service_agreement.nil? && @service_agreement.to_s.size > 5000
        invalid_properties.push("invalid value for \"service_agreement\", the character length must be smaller than or equal to 5000.")
      end

      if !@user_agent.nil? && @user_agent.to_s.size > 5000
        invalid_properties.push("invalid value for \"user_agent\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@ip.nil? && @ip.to_s.size > 5000
      return false if !@service_agreement.nil? && @service_agreement.to_s.size > 5000
      return false if !@user_agent.nil? && @user_agent.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ip Value to be assigned
    def ip=(ip)
      if !ip.nil? && ip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ip\", the character length must be smaller than or equal to 5000.")
      end

      @ip = ip
    end

    # Custom attribute writer method with validation
    # @param [Object] service_agreement Value to be assigned
    def service_agreement=(service_agreement)
      if !service_agreement.nil? && service_agreement.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"service_agreement\", the character length must be smaller than or equal to 5000.")
      end

      @service_agreement = service_agreement
    end

    # Custom attribute writer method with validation
    # @param [Object] user_agent Value to be assigned
    def user_agent=(user_agent)
      if !user_agent.nil? && user_agent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"user_agent\", the character length must be smaller than or equal to 5000.")
      end

      @user_agent = user_agent
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        date == o.date &&
        ip == o.ip &&
        service_agreement == o.service_agreement &&
        user_agent == o.user_agent
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@date, @ip, @service_agreement, @user_agent)
  end
end
