#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Information on fraud assessments for the charge.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ChargeFraudDetails1
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Assessments from Stripe. If set, the value is `fraudulent`.
    @[JSON::Field(key: "stripe_report", type: String?, presence: true, ignore_serialize: stripe_report.nil? && !stripe_report_present?)]
    getter stripe_report : String?

    @[JSON::Field(ignore: true)]
    property? stripe_report_present : Bool = false

    # Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
    @[JSON::Field(key: "user_report", type: String?, presence: true, ignore_serialize: user_report.nil? && !user_report_present?)]
    getter user_report : String?

    @[JSON::Field(ignore: true)]
    property? user_report_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::ChargeFraudDetails,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @stripe_report : String? = nil, @user_report : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@stripe_report.nil? && @stripe_report.to_s.size > 5000
        invalid_properties.push("invalid value for \"stripe_report\", the character length must be smaller than or equal to 5000.")
      end

      if !@user_report.nil? && @user_report.to_s.size > 5000
        invalid_properties.push("invalid value for \"user_report\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@stripe_report.nil? && @stripe_report.to_s.size > 5000
      return false if !@user_report.nil? && @user_report.to_s.size > 5000
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] stripe_report Value to be assigned
    def stripe_report=(stripe_report)
      if !stripe_report.nil? && stripe_report.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"stripe_report\", the character length must be smaller than or equal to 5000.")
      end

      @stripe_report = stripe_report
    end

    # Custom attribute writer method with validation
    # @param [Object] user_report Value to be assigned
    def user_report=(user_report)
      if !user_report.nil? && user_report.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"user_report\", the character length must be smaller than or equal to 5000.")
      end

      @user_report = user_report
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        stripe_report == o.stripe_report &&
        user_report == o.user_report
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@stripe_report, @user_report)
  end
end
