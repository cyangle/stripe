#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class OrdersV2ResourcePaymentMethodOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentIntentPaymentMethodOptionsAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::OrdersPaymentMethodOptionsAfterpayClearpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::OrdersPaymentMethodOptionsAfterpayClearpay? = nil

    @[JSON::Field(key: "alipay", type: Stripe::PaymentMethodOptionsAlipay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::PaymentMethodOptionsAlipay? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentMethodOptionsBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentMethodOptionsBancontact? = nil

    @[JSON::Field(key: "card", type: Stripe::OrdersV2ResourceCardPaymentMethodOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::OrdersV2ResourceCardPaymentMethodOptions? = nil

    @[JSON::Field(key: "customer_balance", type: Stripe::PaymentMethodOptionsCustomerBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : Stripe::PaymentMethodOptionsCustomerBalance? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentMethodOptionsIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentMethodOptionsIdeal? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentMethodOptionsKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentMethodOptionsKlarna? = nil

    @[JSON::Field(key: "link", type: Stripe::PaymentIntentPaymentMethodOptionsLink?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : Stripe::PaymentIntentPaymentMethodOptionsLink? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::PaymentMethodOptionsOxxo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::PaymentMethodOptionsOxxo? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentMethodOptionsP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentMethodOptionsP24? = nil

    @[JSON::Field(key: "paypal", type: Stripe::PaymentMethodOptionsPaypal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paypal : Stripe::PaymentMethodOptionsPaypal? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::PaymentIntentPaymentMethodOptionsSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::PaymentMethodOptionsSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentMethodOptionsSofort? = nil

    @[JSON::Field(key: "wechat_pay", type: Stripe::PaymentMethodOptionsWechatPay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::PaymentMethodOptionsWechatPay? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit? = nil,
      @afterpay_clearpay : Stripe::OrdersPaymentMethodOptionsAfterpayClearpay? = nil,
      @alipay : Stripe::PaymentMethodOptionsAlipay? = nil,
      @bancontact : Stripe::PaymentMethodOptionsBancontact? = nil,
      @card : Stripe::OrdersV2ResourceCardPaymentMethodOptions? = nil,
      @customer_balance : Stripe::PaymentMethodOptionsCustomerBalance? = nil,
      @ideal : Stripe::PaymentMethodOptionsIdeal? = nil,
      @klarna : Stripe::PaymentMethodOptionsKlarna? = nil,
      @link : Stripe::PaymentIntentPaymentMethodOptionsLink? = nil,
      @oxxo : Stripe::PaymentMethodOptionsOxxo? = nil,
      @p24 : Stripe::PaymentMethodOptionsP24? = nil,
      @paypal : Stripe::PaymentMethodOptionsPaypal? = nil,
      @sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit? = nil,
      @sofort : Stripe::PaymentMethodOptionsSofort? = nil,
      @wechat_pay : Stripe::PaymentMethodOptionsWechatPay? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _acss_debit = @acss_debit
        if _acss_debit.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit"))
        end
      end
      if _afterpay_clearpay = @afterpay_clearpay
        if _afterpay_clearpay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_afterpay_clearpay.list_invalid_properties_for("afterpay_clearpay"))
        end
      end
      if _alipay = @alipay
        if _alipay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_alipay.list_invalid_properties_for("alipay"))
        end
      end
      if _bancontact = @bancontact
        if _bancontact.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact"))
        end
      end
      if _card = @card
        if _card.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_card.list_invalid_properties_for("card"))
        end
      end
      if _customer_balance = @customer_balance
        if _customer_balance.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_customer_balance.list_invalid_properties_for("customer_balance"))
        end
      end
      if _ideal = @ideal
        if _ideal.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_ideal.list_invalid_properties_for("ideal"))
        end
      end
      if _klarna = @klarna
        if _klarna.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_klarna.list_invalid_properties_for("klarna"))
        end
      end
      if _link = @link
        if _link.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_link.list_invalid_properties_for("link"))
        end
      end
      if _oxxo = @oxxo
        if _oxxo.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_oxxo.list_invalid_properties_for("oxxo"))
        end
      end
      if _p24 = @p24
        if _p24.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_p24.list_invalid_properties_for("p24"))
        end
      end
      if _paypal = @paypal
        if _paypal.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_paypal.list_invalid_properties_for("paypal"))
        end
      end
      if _sepa_debit = @sepa_debit
        if _sepa_debit.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_sepa_debit.list_invalid_properties_for("sepa_debit"))
        end
      end
      if _sofort = @sofort
        if _sofort.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_sofort.list_invalid_properties_for("sofort"))
        end
      end
      if _wechat_pay = @wechat_pay
        if _wechat_pay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_wechat_pay.list_invalid_properties_for("wechat_pay"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _acss_debit = @acss_debit
        if _acss_debit.is_a?(OpenApi::Validatable)
          return false unless _acss_debit.valid?
        end
      end
      if _afterpay_clearpay = @afterpay_clearpay
        if _afterpay_clearpay.is_a?(OpenApi::Validatable)
          return false unless _afterpay_clearpay.valid?
        end
      end
      if _alipay = @alipay
        if _alipay.is_a?(OpenApi::Validatable)
          return false unless _alipay.valid?
        end
      end
      if _bancontact = @bancontact
        if _bancontact.is_a?(OpenApi::Validatable)
          return false unless _bancontact.valid?
        end
      end
      if _card = @card
        if _card.is_a?(OpenApi::Validatable)
          return false unless _card.valid?
        end
      end
      if _customer_balance = @customer_balance
        if _customer_balance.is_a?(OpenApi::Validatable)
          return false unless _customer_balance.valid?
        end
      end
      if _ideal = @ideal
        if _ideal.is_a?(OpenApi::Validatable)
          return false unless _ideal.valid?
        end
      end
      if _klarna = @klarna
        if _klarna.is_a?(OpenApi::Validatable)
          return false unless _klarna.valid?
        end
      end
      if _link = @link
        if _link.is_a?(OpenApi::Validatable)
          return false unless _link.valid?
        end
      end
      if _oxxo = @oxxo
        if _oxxo.is_a?(OpenApi::Validatable)
          return false unless _oxxo.valid?
        end
      end
      if _p24 = @p24
        if _p24.is_a?(OpenApi::Validatable)
          return false unless _p24.valid?
        end
      end
      if _paypal = @paypal
        if _paypal.is_a?(OpenApi::Validatable)
          return false unless _paypal.valid?
        end
      end
      if _sepa_debit = @sepa_debit
        if _sepa_debit.is_a?(OpenApi::Validatable)
          return false unless _sepa_debit.valid?
        end
      end
      if _sofort = @sofort
        if _sofort.is_a?(OpenApi::Validatable)
          return false unless _sofort.valid?
        end
      end
      if _wechat_pay = @wechat_pay
        if _wechat_pay.is_a?(OpenApi::Validatable)
          return false unless _wechat_pay.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      _acss_debit = acss_debit.not_nil!
      if _acss_debit.is_a?(OpenApi::Validatable)
        _acss_debit.validate
      end
      @acss_debit = _acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(afterpay_clearpay : Stripe::OrdersPaymentMethodOptionsAfterpayClearpay?)
      if afterpay_clearpay.nil?
        return @afterpay_clearpay = nil
      end
      _afterpay_clearpay = afterpay_clearpay.not_nil!
      if _afterpay_clearpay.is_a?(OpenApi::Validatable)
        _afterpay_clearpay.validate
      end
      @afterpay_clearpay = _afterpay_clearpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(alipay : Stripe::PaymentMethodOptionsAlipay?)
      if alipay.nil?
        return @alipay = nil
      end
      _alipay = alipay.not_nil!
      if _alipay.is_a?(OpenApi::Validatable)
        _alipay.validate
      end
      @alipay = _alipay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::PaymentMethodOptionsBancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      _bancontact = bancontact.not_nil!
      if _bancontact.is_a?(OpenApi::Validatable)
        _bancontact.validate
      end
      @bancontact = _bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::OrdersV2ResourceCardPaymentMethodOptions?)
      if card.nil?
        return @card = nil
      end
      _card = card.not_nil!
      if _card.is_a?(OpenApi::Validatable)
        _card.validate
      end
      @card = _card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : Stripe::PaymentMethodOptionsCustomerBalance?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      _customer_balance = customer_balance.not_nil!
      if _customer_balance.is_a?(OpenApi::Validatable)
        _customer_balance.validate
      end
      @customer_balance = _customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(ideal : Stripe::PaymentMethodOptionsIdeal?)
      if ideal.nil?
        return @ideal = nil
      end
      _ideal = ideal.not_nil!
      if _ideal.is_a?(OpenApi::Validatable)
        _ideal.validate
      end
      @ideal = _ideal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(klarna : Stripe::PaymentMethodOptionsKlarna?)
      if klarna.nil?
        return @klarna = nil
      end
      _klarna = klarna.not_nil!
      if _klarna.is_a?(OpenApi::Validatable)
        _klarna.validate
      end
      @klarna = _klarna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(link : Stripe::PaymentIntentPaymentMethodOptionsLink?)
      if link.nil?
        return @link = nil
      end
      _link = link.not_nil!
      if _link.is_a?(OpenApi::Validatable)
        _link.validate
      end
      @link = _link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(oxxo : Stripe::PaymentMethodOptionsOxxo?)
      if oxxo.nil?
        return @oxxo = nil
      end
      _oxxo = oxxo.not_nil!
      if _oxxo.is_a?(OpenApi::Validatable)
        _oxxo.validate
      end
      @oxxo = _oxxo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(p24 : Stripe::PaymentMethodOptionsP24?)
      if p24.nil?
        return @p24 = nil
      end
      _p24 = p24.not_nil!
      if _p24.is_a?(OpenApi::Validatable)
        _p24.validate
      end
      @p24 = _p24
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paypal Object to be assigned
    def paypal=(paypal : Stripe::PaymentMethodOptionsPaypal?)
      if paypal.nil?
        return @paypal = nil
      end
      _paypal = paypal.not_nil!
      if _paypal.is_a?(OpenApi::Validatable)
        _paypal.validate
      end
      @paypal = _paypal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit?)
      if sepa_debit.nil?
        return @sepa_debit = nil
      end
      _sepa_debit = sepa_debit.not_nil!
      if _sepa_debit.is_a?(OpenApi::Validatable)
        _sepa_debit.validate
      end
      @sepa_debit = _sepa_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(sofort : Stripe::PaymentMethodOptionsSofort?)
      if sofort.nil?
        return @sofort = nil
      end
      _sofort = sofort.not_nil!
      if _sofort.is_a?(OpenApi::Validatable)
        _sofort.validate
      end
      @sofort = _sofort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(wechat_pay : Stripe::PaymentMethodOptionsWechatPay?)
      if wechat_pay.nil?
        return @wechat_pay = nil
      end
      _wechat_pay = wechat_pay.not_nil!
      if _wechat_pay.is_a?(OpenApi::Validatable)
        _wechat_pay.validate
      end
      @wechat_pay = _wechat_pay
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit, @afterpay_clearpay, @alipay, @bancontact, @card, @customer_balance, @ideal, @klarna, @link, @oxxo, @p24, @paypal, @sepa_debit, @sofort, @wechat_pay)
  end
end
