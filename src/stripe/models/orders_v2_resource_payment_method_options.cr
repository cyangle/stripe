#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class OrdersV2ResourcePaymentMethodOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentIntentPaymentMethodOptionsAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::OrdersPaymentMethodOptionsAfterpayClearpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::OrdersPaymentMethodOptionsAfterpayClearpay? = nil

    @[JSON::Field(key: "alipay", type: Stripe::PaymentMethodOptionsAlipay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::PaymentMethodOptionsAlipay? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentMethodOptionsBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentMethodOptionsBancontact? = nil

    @[JSON::Field(key: "card", type: Stripe::OrdersV2ResourceCardPaymentMethodOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::OrdersV2ResourceCardPaymentMethodOptions? = nil

    @[JSON::Field(key: "customer_balance", type: Stripe::PaymentMethodOptionsCustomerBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : Stripe::PaymentMethodOptionsCustomerBalance? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentMethodOptionsIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentMethodOptionsIdeal? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentMethodOptionsKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentMethodOptionsKlarna? = nil

    @[JSON::Field(key: "link", type: Stripe::PaymentIntentPaymentMethodOptionsLink?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : Stripe::PaymentIntentPaymentMethodOptionsLink? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::PaymentMethodOptionsOxxo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::PaymentMethodOptionsOxxo? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentMethodOptionsP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentMethodOptionsP24? = nil

    @[JSON::Field(key: "paypal", type: Stripe::PaymentMethodOptionsPaypal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paypal : Stripe::PaymentMethodOptionsPaypal? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::PaymentIntentPaymentMethodOptionsSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::PaymentMethodOptionsSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentMethodOptionsSofort? = nil

    @[JSON::Field(key: "wechat_pay", type: Stripe::PaymentMethodOptionsWechatPay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::PaymentMethodOptionsWechatPay? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit? = nil,
      @afterpay_clearpay : Stripe::OrdersPaymentMethodOptionsAfterpayClearpay? = nil,
      @alipay : Stripe::PaymentMethodOptionsAlipay? = nil,
      @bancontact : Stripe::PaymentMethodOptionsBancontact? = nil,
      @card : Stripe::OrdersV2ResourceCardPaymentMethodOptions? = nil,
      @customer_balance : Stripe::PaymentMethodOptionsCustomerBalance? = nil,
      @ideal : Stripe::PaymentMethodOptionsIdeal? = nil,
      @klarna : Stripe::PaymentMethodOptionsKlarna? = nil,
      @link : Stripe::PaymentIntentPaymentMethodOptionsLink? = nil,
      @oxxo : Stripe::PaymentMethodOptionsOxxo? = nil,
      @p24 : Stripe::PaymentMethodOptionsP24? = nil,
      @paypal : Stripe::PaymentMethodOptionsPaypal? = nil,
      @sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit? = nil,
      @sofort : Stripe::PaymentMethodOptionsSofort? = nil,
      @wechat_pay : Stripe::PaymentMethodOptionsWechatPay? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit?
      # This is a model afterpay_clearpay : Stripe::OrdersPaymentMethodOptionsAfterpayClearpay?
      # This is a model alipay : Stripe::PaymentMethodOptionsAlipay?
      # This is a model bancontact : Stripe::PaymentMethodOptionsBancontact?
      # This is a model card : Stripe::OrdersV2ResourceCardPaymentMethodOptions?
      # This is a model customer_balance : Stripe::PaymentMethodOptionsCustomerBalance?
      # This is a model ideal : Stripe::PaymentMethodOptionsIdeal?
      # This is a model klarna : Stripe::PaymentMethodOptionsKlarna?
      # This is a model link : Stripe::PaymentIntentPaymentMethodOptionsLink?
      # This is a model oxxo : Stripe::PaymentMethodOptionsOxxo?
      # This is a model p24 : Stripe::PaymentMethodOptionsP24?
      # This is a model paypal : Stripe::PaymentMethodOptionsPaypal?
      # This is a model sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit?
      # This is a model sofort : Stripe::PaymentMethodOptionsSofort?
      # This is a model wechat_pay : Stripe::PaymentMethodOptionsWechatPay?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::PaymentIntentPaymentMethodOptionsAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      @acss_debit = acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(afterpay_clearpay : Stripe::OrdersPaymentMethodOptionsAfterpayClearpay?)
      if afterpay_clearpay.nil?
        return @afterpay_clearpay = nil
      end
      @afterpay_clearpay = afterpay_clearpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(alipay : Stripe::PaymentMethodOptionsAlipay?)
      if alipay.nil?
        return @alipay = nil
      end
      @alipay = alipay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::PaymentMethodOptionsBancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      @bancontact = bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::OrdersV2ResourceCardPaymentMethodOptions?)
      if card.nil?
        return @card = nil
      end
      @card = card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : Stripe::PaymentMethodOptionsCustomerBalance?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      @customer_balance = customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(ideal : Stripe::PaymentMethodOptionsIdeal?)
      if ideal.nil?
        return @ideal = nil
      end
      @ideal = ideal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(klarna : Stripe::PaymentMethodOptionsKlarna?)
      if klarna.nil?
        return @klarna = nil
      end
      @klarna = klarna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(link : Stripe::PaymentIntentPaymentMethodOptionsLink?)
      if link.nil?
        return @link = nil
      end
      @link = link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(oxxo : Stripe::PaymentMethodOptionsOxxo?)
      if oxxo.nil?
        return @oxxo = nil
      end
      @oxxo = oxxo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(p24 : Stripe::PaymentMethodOptionsP24?)
      if p24.nil?
        return @p24 = nil
      end
      @p24 = p24
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paypal Object to be assigned
    def paypal=(paypal : Stripe::PaymentMethodOptionsPaypal?)
      if paypal.nil?
        return @paypal = nil
      end
      @paypal = paypal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(sepa_debit : Stripe::PaymentIntentPaymentMethodOptionsSepaDebit?)
      if sepa_debit.nil?
        return @sepa_debit = nil
      end
      @sepa_debit = sepa_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(sofort : Stripe::PaymentMethodOptionsSofort?)
      if sofort.nil?
        return @sofort = nil
      end
      @sofort = sofort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(wechat_pay : Stripe::PaymentMethodOptionsWechatPay?)
      if wechat_pay.nil?
        return @wechat_pay = nil
      end
      @wechat_pay = wechat_pay
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit, @afterpay_clearpay, @alipay, @bancontact, @card, @customer_balance, @ideal, @klarna, @link, @oxxo, @p24, @paypal, @sepa_debit, @sofort, @wechat_pay)
  end
end
