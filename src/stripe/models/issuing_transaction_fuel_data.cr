#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class IssuingTransactionFuelData
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    # The units for `volume_decimal`. One of `us_gallon` or `liter`.
    @[JSON::Field(key: "unit", type: String)]
    getter unit : String

    # The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
    @[JSON::Field(key: "unit_cost_decimal", type: String)]
    property unit_cost_decimal : String

    # The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
    @[JSON::Field(key: "volume_decimal", type: String?, presence: true, ignore_serialize: volume_decimal.nil? && !volume_decimal_present?)]
    property volume_decimal : String?

    @[JSON::Field(ignore: true)]
    property? volume_decimal_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @_type : String, @unit : String, @unit_cost_decimal : String, @volume_decimal : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      if @unit.to_s.size > 5000
        invalid_properties.push("invalid value for \"unit\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @_type.to_s.size > 5000
      return false if @unit.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] _type Value to be assigned
    def _type=(_type)
      if _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] unit Value to be assigned
    def unit=(unit)
      if unit.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"unit\", the character length must be smaller than or equal to 5000.")
      end

      @unit = unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        _type == o._type &&
        unit == o.unit &&
        unit_cost_decimal == o.unit_cost_decimal &&
        volume_decimal == o.volume_decimal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@_type, @unit, @unit_cost_decimal, @volume_decimal)
  end
end
