#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentIntentLastPaymentError
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
    @[JSON::Field(key: "type", type: String?)]
    getter _type : String?

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["api_error", "card_error", "idempotency_error", "invalid_request_error"])

    # Optional properties
    # For card errors, the ID of the failed charge.
    @[JSON::Field(key: "charge", type: String?, presence: true, ignore_serialize: charge.nil? && !charge_present?)]
    getter charge : String?

    @[JSON::Field(ignore: true)]
    property? charge_present : Bool = false

    # For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
    @[JSON::Field(key: "code", type: String?, presence: true, ignore_serialize: code.nil? && !code_present?)]
    getter code : String?

    @[JSON::Field(ignore: true)]
    property? code_present : Bool = false

    # For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
    @[JSON::Field(key: "decline_code", type: String?, presence: true, ignore_serialize: decline_code.nil? && !decline_code_present?)]
    getter decline_code : String?

    @[JSON::Field(ignore: true)]
    property? decline_code_present : Bool = false

    # A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
    @[JSON::Field(key: "doc_url", type: String?, presence: true, ignore_serialize: doc_url.nil? && !doc_url_present?)]
    getter doc_url : String?

    @[JSON::Field(ignore: true)]
    property? doc_url_present : Bool = false

    # A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
    @[JSON::Field(key: "message", type: String?, presence: true, ignore_serialize: message.nil? && !message_present?)]
    getter message : String?

    @[JSON::Field(ignore: true)]
    property? message_present : Bool = false

    # If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
    @[JSON::Field(key: "param", type: String?, presence: true, ignore_serialize: param.nil? && !param_present?)]
    getter param : String?

    @[JSON::Field(ignore: true)]
    property? param_present : Bool = false

    @[JSON::Field(key: "payment_intent", type: PaymentIntent?, presence: true, ignore_serialize: payment_intent.nil? && !payment_intent_present?)]
    property payment_intent : PaymentIntent?

    @[JSON::Field(ignore: true)]
    property? payment_intent_present : Bool = false

    @[JSON::Field(key: "payment_method", type: PaymentMethod?, presence: true, ignore_serialize: payment_method.nil? && !payment_method_present?)]
    property payment_method : PaymentMethod?

    @[JSON::Field(ignore: true)]
    property? payment_method_present : Bool = false

    # If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
    @[JSON::Field(key: "payment_method_type", type: String?, presence: true, ignore_serialize: payment_method_type.nil? && !payment_method_type_present?)]
    getter payment_method_type : String?

    @[JSON::Field(ignore: true)]
    property? payment_method_type_present : Bool = false

    @[JSON::Field(key: "setup_intent", type: SetupIntent?, presence: true, ignore_serialize: setup_intent.nil? && !setup_intent_present?)]
    property setup_intent : SetupIntent?

    @[JSON::Field(ignore: true)]
    property? setup_intent_present : Bool = false

    @[JSON::Field(key: "source", type: PaymentSource?, presence: true, ignore_serialize: source.nil? && !source_present?)]
    property source : PaymentSource?

    @[JSON::Field(ignore: true)]
    property? source_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::ApiErrors,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @_type : String, @charge : String? = nil, @code : String? = nil, @decline_code : String? = nil, @doc_url : String? = nil, @message : String? = nil, @param : String? = nil, @payment_intent : PaymentIntent? = nil, @payment_method : PaymentMethod? = nil, @payment_method_type : String? = nil, @setup_intent : SetupIntent? = nil, @source : PaymentSource? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@charge.nil? && @charge.to_s.size > 5000
        invalid_properties.push("invalid value for \"charge\", the character length must be smaller than or equal to 5000.")
      end

      if !@code.nil? && @code.to_s.size > 5000
        invalid_properties.push("invalid value for \"code\", the character length must be smaller than or equal to 5000.")
      end

      if !@decline_code.nil? && @decline_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"decline_code\", the character length must be smaller than or equal to 5000.")
      end

      if !@doc_url.nil? && @doc_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"doc_url\", the character length must be smaller than or equal to 5000.")
      end

      if !@message.nil? && @message.to_s.size > 40000
        invalid_properties.push("invalid value for \"message\", the character length must be smaller than or equal to 40000.")
      end

      if !@param.nil? && @param.to_s.size > 5000
        invalid_properties.push("invalid value for \"param\", the character length must be smaller than or equal to 5000.")
      end

      if !@payment_method_type.nil? && @payment_method_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"payment_method_type\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@charge.nil? && @charge.to_s.size > 5000
      return false if !@code.nil? && @code.to_s.size > 5000
      return false if !@decline_code.nil? && @decline_code.to_s.size > 5000
      return false if !@doc_url.nil? && @doc_url.to_s.size > 5000
      return false if !@message.nil? && @message.to_s.size > 40000
      return false if !@param.nil? && @param.to_s.size > 5000
      return false if !@payment_method_type.nil? && @payment_method_type.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] charge Value to be assigned
    def charge=(charge)
      if !charge.nil? && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\", the character length must be smaller than or equal to 5000.")
      end

      @charge = charge
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if !code.nil? && code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"code\", the character length must be smaller than or equal to 5000.")
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] decline_code Value to be assigned
    def decline_code=(decline_code)
      if !decline_code.nil? && decline_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"decline_code\", the character length must be smaller than or equal to 5000.")
      end

      @decline_code = decline_code
    end

    # Custom attribute writer method with validation
    # @param [Object] doc_url Value to be assigned
    def doc_url=(doc_url)
      if !doc_url.nil? && doc_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"doc_url\", the character length must be smaller than or equal to 5000.")
      end

      @doc_url = doc_url
    end

    # Custom attribute writer method with validation
    # @param [Object] message Value to be assigned
    def message=(message)
      if !message.nil? && message.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"message\", the character length must be smaller than or equal to 40000.")
      end

      @message = message
    end

    # Custom attribute writer method with validation
    # @param [Object] param Value to be assigned
    def param=(param)
      if !param.nil? && param.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"param\", the character length must be smaller than or equal to 5000.")
      end

      @param = param
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method_type Value to be assigned
    def payment_method_type=(payment_method_type)
      if !payment_method_type.nil? && payment_method_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method_type\", the character length must be smaller than or equal to 5000.")
      end

      @payment_method_type = payment_method_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        charge == o.charge &&
        code == o.code &&
        decline_code == o.decline_code &&
        doc_url == o.doc_url &&
        message == o.message &&
        param == o.param &&
        payment_intent == o.payment_intent &&
        payment_method == o.payment_method &&
        payment_method_type == o.payment_method_type &&
        setup_intent == o.setup_intent &&
        source == o.source &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@charge, @code, @decline_code, @doc_url, @message, @param, @payment_intent, @payment_method, @payment_method_type, @setup_intent, @source, @_type)
  end
end
