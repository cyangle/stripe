#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # FinancialAddresses contain identifying information that resolves to a FinancialAccount.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AccountServiceResourceFinancialAddress
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The type of financial address
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["aba"])

    # Optional properties
    @[JSON::Field(key: "aba", type: AccountServiceResourceAbaRecord?, presence: true, ignore_serialize: aba.nil? && !aba_present?)]
    property aba : AccountServiceResourceAbaRecord?

    @[JSON::Field(ignore: true)]
    property? aba_present : Bool = false

    # The list of networks that the address supports
    @[JSON::Field(key: "supported_networks", type: Array(String)?, presence: true, ignore_serialize: supported_networks.nil? && !supported_networks_present?)]
    getter supported_networks : Array(String)?

    @[JSON::Field(ignore: true)]
    property? supported_networks_present : Bool = false

    ENUM_VALIDATOR_FOR_SUPPORTED_NETWORKS = EnumValidator.new("supported_networks", "String", ["ach", "us_domestic_wire"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @_type : String, @aba : AccountServiceResourceAbaRecord? = nil, @supported_networks : Array(String)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUPPORTED_NETWORKS.error_message) unless ENUM_VALIDATOR_FOR_SUPPORTED_NETWORKS.all_valid?(@supported_networks)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_SUPPORTED_NETWORKS.all_valid?(@supported_networks)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supported_networks Object to be assigned
    def supported_networks=(supported_networks)
      ENUM_VALIDATOR_FOR_SUPPORTED_NETWORKS.all_valid!(supported_networks)
      @supported_networks = supported_networks
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        aba == o.aba &&
        supported_networks == o.supported_networks &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@aba, @supported_networks, @_type)
  end
end
