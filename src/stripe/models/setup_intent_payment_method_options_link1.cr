#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SetupIntentPaymentMethodOptionsLink1
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # Token used for persistent Link logins.
    @[JSON::Field(key: "persistent_token", type: String?, presence: true, ignore_serialize: persistent_token.nil? && !persistent_token_present?)]
    getter persistent_token : String?

    @[JSON::Field(ignore: true)]
    property? persistent_token_present : Bool = false

    # Bank account verification method.
    @[JSON::Field(key: "verification_method", type: String?, presence: true, ignore_serialize: verification_method.nil? && !verification_method_present?)]
    getter verification_method : String?

    @[JSON::Field(ignore: true)]
    property? verification_method_present : Bool = false

    ENUM_VALIDATOR_FOR_VERIFICATION_METHOD = EnumValidator.new("verification_method", "String", ["automatic", "instant", "microdeposits"])

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::SetupIntentPaymentMethodOptionsLink,
        Stripe::SetupIntentTypeSpecificPaymentMethodOptionsClient,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @persistent_token : String? = nil,
      @verification_method : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@persistent_token.nil? && @persistent_token.to_s.size > 5000
        invalid_properties.push("invalid value for \"persistent_token\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_VERIFICATION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_VERIFICATION_METHOD.valid?(@verification_method)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@persistent_token.nil? && @persistent_token.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_VERIFICATION_METHOD.valid?(@verification_method)

      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] persistent_token Value to be assigned
    def persistent_token=(persistent_token)
      if !persistent_token.nil? && persistent_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"persistent_token\", the character length must be smaller than or equal to 5000.")
      end

      @persistent_token = persistent_token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_method Object to be assigned
    def verification_method=(verification_method)
      ENUM_VALIDATOR_FOR_VERIFICATION_METHOD.valid!(verification_method)
      @verification_method = verification_method
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@persistent_token, @verification_method)
  end
end
