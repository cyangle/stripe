#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class InvoiceTaxAmount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The amount, in %s, of the tax.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Whether this tax amount is inclusive or exclusive.
    @[JSON::Field(key: "inclusive", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter inclusive : Bool? = nil

    @[JSON::Field(key: "tax_rate", type: Stripe::CreditNoteTaxAmountTaxRate?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_rate : Stripe::CreditNoteTaxAmountTaxRate? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @inclusive : Bool? = nil,
      @tax_rate : Stripe::CreditNoteTaxAmountTaxRate? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?
      invalid_properties.push("\"inclusive\" is required and cannot be null") if @inclusive.nil?
      invalid_properties.push("\"tax_rate\" is required and cannot be null") if @tax_rate.nil?
      # This is a model tax_rate : Stripe::CreditNoteTaxAmountTaxRate?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @amount.nil?
      return false if @inclusive.nil?
      return false if @tax_rate.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        raise ArgumentError.new("\"amount\" is required and cannot be null")
      end
      @amount = amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inclusive Object to be assigned
    def inclusive=(inclusive : Bool?)
      if inclusive.nil?
        raise ArgumentError.new("\"inclusive\" is required and cannot be null")
      end
      @inclusive = inclusive
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_rate Object to be assigned
    def tax_rate=(tax_rate : Stripe::CreditNoteTaxAmountTaxRate?)
      if tax_rate.nil?
        raise ArgumentError.new("\"tax_rate\" is required and cannot be null")
      end
      @tax_rate = tax_rate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @inclusive, @tax_rate)
  end
end
