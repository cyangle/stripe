#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./treasury_transaction"
require "./treasury_transactions_resource_abstract_transaction_resource_status_transitions"
require "./treasury_transactions_resource_balance_impact"
require "./treasury_transactions_resource_flow_details"
require "./treasury_transactions_resource_transaction_entry_list"

module Stripe
  # The Transaction associated with this object.
  class TreasuryOutboundPaymentTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount (in cents) transferred.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    @[JSON::Field(key: "balance_impact", type: Stripe::TreasuryTransactionsResourceBalanceImpact?, default: nil, required: true, nullable: false, emit_null: false)]
    property balance_impact : Stripe::TreasuryTransactionsResourceBalanceImpact? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # The FinancialAccount associated with this object.
    @[JSON::Field(key: "financial_account", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property financial_account : String? = nil
    MAX_LENGTH_FOR_FINANCIAL_ACCOUNT = 5000

    # ID of the flow that created the Transaction.
    @[JSON::Field(key: "flow", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property flow : String? = nil
    MAX_LENGTH_FOR_FLOW = 5000

    # Type of the flow that created the Transaction.
    @[JSON::Field(key: "flow_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property flow_type : String? = nil
    ERROR_MESSAGE_FOR_FLOW_TYPE = "invalid value for \"flow_type\", must be one of [credit_reversal, debit_reversal, inbound_transfer, issuing_authorization, other, outbound_payment, outbound_transfer, received_credit, received_debit]."
    VALID_VALUES_FOR_FLOW_TYPE  = String.static_array("credit_reversal", "debit_reversal", "inbound_transfer", "issuing_authorization", "other", "outbound_payment", "outbound_transfer", "received_credit", "received_debit")

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [treasury.transaction]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("treasury.transaction")

    # Status of the Transaction.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [open, posted, void]."
    VALID_VALUES_FOR_STATUS  = String.static_array("open", "posted", "void")

    @[JSON::Field(key: "status_transitions", type: Stripe::TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions?, default: nil, required: true, nullable: false, emit_null: false)]
    property status_transitions : Stripe::TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "entries", type: Stripe::TreasuryTransactionsResourceTransactionEntryList?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: entries.nil? && !entries_present?)]
    property entries : Stripe::TreasuryTransactionsResourceTransactionEntryList? = nil

    @[JSON::Field(ignore: true)]
    property? entries_present : Bool = false

    @[JSON::Field(key: "flow_details", type: Stripe::TreasuryTransactionsResourceFlowDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    property flow_details : Stripe::TreasuryTransactionsResourceFlowDetails? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        String,
        Stripe::TreasuryTransaction,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @balance_impact : Stripe::TreasuryTransactionsResourceBalanceImpact? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @description : String? = nil,
      @financial_account : String? = nil,
      @flow : String? = nil,
      @flow_type : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @status_transitions : Stripe::TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions? = nil,
      # Optional properties
      @entries : Stripe::TreasuryTransactionsResourceTransactionEntryList? = nil,
      @flow_details : Stripe::TreasuryTransactionsResourceFlowDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @balance_impact, @created, @currency, @description, @financial_account, @flow, @flow_type, @id, @livemode, @object, @status, @status_transitions, @entries, @entries_present, @flow_details)
  end
end
