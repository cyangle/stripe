#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class DisputePaymentMethodDetailsCard
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    @[JSON::Field(key: "brand", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter brand : String? = nil
    MAX_LENGTH_FOR_BRAND = 5000

    # The type of dispute opened. Different case types may have varying fees and financial impact.
    @[JSON::Field(key: "case_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter case_type : String? = nil
    ERROR_MESSAGE_FOR_CASE_TYPE = "invalid value for \"case_type\", must be one of [chargeback, inquiry]."
    VALID_VALUES_FOR_CASE_TYPE  = String.static_array("chargeback", "inquiry")

    # The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network.
    @[JSON::Field(key: "network_reason_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter network_reason_code : String? = nil
    MAX_LENGTH_FOR_NETWORK_REASON_CODE = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @brand : String? = nil,
      @case_type : String? = nil,
      @network_reason_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"brand\" is required and cannot be null") if @brand.nil?

      unless (_brand = @brand).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("brand", _brand.to_s.size, MAX_LENGTH_FOR_BRAND)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"case_type\" is required and cannot be null") if @case_type.nil?

      unless (_case_type = @case_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CASE_TYPE) unless OpenApi::EnumValidator.valid?(_case_type, VALID_VALUES_FOR_CASE_TYPE)
      end
      unless (_network_reason_code = @network_reason_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("network_reason_code", _network_reason_code.to_s.size, MAX_LENGTH_FOR_NETWORK_REASON_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @brand.nil?
      unless (_brand = @brand).nil?
        return false if _brand.to_s.size > MAX_LENGTH_FOR_BRAND
      end

      return false if @case_type.nil?
      unless (_case_type = @case_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_case_type, VALID_VALUES_FOR_CASE_TYPE)
      end

      unless (_network_reason_code = @network_reason_code).nil?
        return false if _network_reason_code.to_s.size > MAX_LENGTH_FOR_NETWORK_REASON_CODE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] brand Object to be assigned
    def brand=(new_value : String?)
      raise ArgumentError.new("\"brand\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("brand", new_value.to_s.size, MAX_LENGTH_FOR_BRAND)
      end

      @brand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] case_type Object to be assigned
    def case_type=(new_value : String?)
      raise ArgumentError.new("\"case_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("case_type", new_value, VALID_VALUES_FOR_CASE_TYPE)
      end

      @case_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_reason_code Object to be assigned
    def network_reason_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("network_reason_code", new_value.to_s.size, MAX_LENGTH_FOR_NETWORK_REASON_CODE)
      end

      @network_reason_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@brand, @case_type, @network_reason_code)
  end
end
