#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./add_invoice_item_entry"
require "./automatic_tax_config"
require "./cancellation_details_param"
require "./invoice_settings_param"
require "./payment_settings"
require "./post_accounts_request_metadata"
require "./post_subscriptions_request_application_fee_percent"
require "./post_subscriptions_request_billing_thresholds"
require "./post_subscriptions_request_discounts"
require "./post_subscriptions_request_pending_invoice_item_interval"
require "./post_subscriptions_subscription_exposed_id_request_cancel_at"
require "./post_subscriptions_subscription_exposed_id_request_default_tax_rates"
require "./post_subscriptions_subscription_exposed_id_request_pause_collection"
require "./post_subscriptions_subscription_exposed_id_request_transfer_data"
require "./post_subscriptions_subscription_exposed_id_request_trial_end"
require "./subscription_item_update_params"
require "./trial_settings_config"

module Stripe
  class PostSubscriptionsSubscriptionExposedIdRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
    @[JSON::Field(key: "add_invoice_items", type: Array(Stripe::AddInvoiceItemEntry)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil

    @[JSON::Field(key: "application_fee_percent", type: Stripe::PostSubscriptionsRequestApplicationFeePercent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTaxConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTaxConfig? = nil

    # Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    @[JSON::Field(key: "billing_cycle_anchor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_cycle_anchor : String? = nil
    MAX_LENGTH_FOR_BILLING_CYCLE_ANCHOR    = 5000
    ERROR_MESSAGE_FOR_BILLING_CYCLE_ANCHOR = "invalid value for \"billing_cycle_anchor\", must be one of [now, unchanged]."
    VALID_VALUES_FOR_BILLING_CYCLE_ANCHOR  = String.static_array("now", "unchanged")

    @[JSON::Field(key: "billing_thresholds", type: Stripe::PostSubscriptionsRequestBillingThresholds?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil

    @[JSON::Field(key: "cancel_at", type: Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cancel_at : Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil

    # Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
    @[JSON::Field(key: "cancel_at_period_end", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cancel_at_period_end : Bool? = nil

    @[JSON::Field(key: "cancellation_details", type: Stripe::CancellationDetailsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cancellation_details : Stripe::CancellationDetailsParam? = nil

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter collection_method : String? = nil
    ERROR_MESSAGE_FOR_COLLECTION_METHOD = "invalid value for \"collection_method\", must be one of [charge_automatically, send_invoice]."
    VALID_VALUES_FOR_COLLECTION_METHOD  = String.static_array("charge_automatically", "send_invoice")

    # The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    @[JSON::Field(key: "coupon", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter coupon : String? = nil
    MAX_LENGTH_FOR_COUPON = 5000

    # Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
    @[JSON::Field(key: "days_until_due", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter days_until_due : Int64? = nil

    # ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    @[JSON::Field(key: "default_payment_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_payment_method : String? = nil
    MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD = 5000

    @[JSON::Field(key: "default_source", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_source : String? = nil
    ERROR_MESSAGE_FOR_DEFAULT_SOURCE = "invalid value for \"default_source\", must be one of []."
    VALID_VALUES_FOR_DEFAULT_SOURCE  = String.static_array("")

    @[JSON::Field(key: "default_tax_rates", type: Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_tax_rates : Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil

    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil
    ERROR_MESSAGE_FOR_DESCRIPTION = "invalid value for \"description\", must be one of []."
    VALID_VALUES_FOR_DESCRIPTION  = String.static_array("")

    @[JSON::Field(key: "discounts", type: Stripe::PostSubscriptionsRequestDiscounts?, default: nil, required: false, nullable: false, emit_null: false)]
    getter discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    @[JSON::Field(key: "invoice_settings", type: Stripe::InvoiceSettingsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_settings : Stripe::InvoiceSettingsParam? = nil

    # A list of up to 20 subscription items, each with an attached price.
    @[JSON::Field(key: "items", type: Array(Stripe::SubscriptionItemUpdateParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter items : Array(Stripe::SubscriptionItemUpdateParams)? = nil

    @[JSON::Field(key: "metadata", type: Stripe::PostAccountsRequestMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::PostAccountsRequestMetadata? = nil

    # Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
    @[JSON::Field(key: "off_session", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter off_session : Bool? = nil

    @[JSON::Field(key: "on_behalf_of", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter on_behalf_of : String? = nil
    ERROR_MESSAGE_FOR_ON_BEHALF_OF = "invalid value for \"on_behalf_of\", must be one of []."
    VALID_VALUES_FOR_ON_BEHALF_OF  = String.static_array("")

    @[JSON::Field(key: "pause_collection", type: Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pause_collection : Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil

    # Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
    @[JSON::Field(key: "payment_behavior", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_behavior : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_BEHAVIOR = "invalid value for \"payment_behavior\", must be one of [allow_incomplete, default_incomplete, error_if_incomplete, pending_if_incomplete]."
    VALID_VALUES_FOR_PAYMENT_BEHAVIOR  = String.static_array("allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete")

    @[JSON::Field(key: "payment_settings", type: Stripe::PaymentSettings?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_settings : Stripe::PaymentSettings? = nil

    @[JSON::Field(key: "pending_invoice_item_interval", type: Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil

    # The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    @[JSON::Field(key: "promotion_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promotion_code : String? = nil
    MAX_LENGTH_FOR_PROMOTION_CODE = 5000

    # Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
    @[JSON::Field(key: "proration_behavior", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter proration_behavior : String? = nil
    ERROR_MESSAGE_FOR_PRORATION_BEHAVIOR = "invalid value for \"proration_behavior\", must be one of [always_invoice, create_prorations, none]."
    VALID_VALUES_FOR_PRORATION_BEHAVIOR  = String.static_array("always_invoice", "create_prorations", "none")

    # If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#upcoming_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
    @[JSON::Field(key: "proration_date", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter proration_date : Int64? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfer_data : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData? = nil

    @[JSON::Field(key: "trial_end", type: Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trial_end : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd? = nil

    # Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    @[JSON::Field(key: "trial_from_plan", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trial_from_plan : Bool? = nil

    @[JSON::Field(key: "trial_settings", type: Stripe::TrialSettingsConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trial_settings : Stripe::TrialSettingsConfig? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      @application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      @automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      @billing_cycle_anchor : String? = nil,
      @billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      @cancel_at : Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil,
      @cancel_at_period_end : Bool? = nil,
      @cancellation_details : Stripe::CancellationDetailsParam? = nil,
      @collection_method : String? = nil,
      @coupon : String? = nil,
      @days_until_due : Int64? = nil,
      @default_payment_method : String? = nil,
      @default_source : String? = nil,
      @default_tax_rates : Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil,
      @description : String? = nil,
      @discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      @expand : Array(String)? = nil,
      @invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      @items : Array(Stripe::SubscriptionItemUpdateParams)? = nil,
      @metadata : Stripe::PostAccountsRequestMetadata? = nil,
      @off_session : Bool? = nil,
      @on_behalf_of : String? = nil,
      @pause_collection : Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil,
      @payment_behavior : String? = nil,
      @payment_settings : Stripe::PaymentSettings? = nil,
      @pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      @promotion_code : String? = nil,
      @proration_behavior : String? = nil,
      @proration_date : Int64? = nil,
      @transfer_data : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData? = nil,
      @trial_end : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd? = nil,
      @trial_from_plan : Bool? = nil,
      @trial_settings : Stripe::TrialSettingsConfig? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_add_invoice_items = @add_invoice_items).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "add_invoice_items", container: _add_invoice_items)) if _add_invoice_items.is_a?(Array)
      end
      unless (_application_fee_percent = @application_fee_percent).nil?
        invalid_properties.concat(_application_fee_percent.list_invalid_properties_for("application_fee_percent")) if _application_fee_percent.is_a?(OpenApi::Validatable)
      end
      unless (_automatic_tax = @automatic_tax).nil?
        invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax")) if _automatic_tax.is_a?(OpenApi::Validatable)
      end
      unless (_billing_cycle_anchor = @billing_cycle_anchor).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BILLING_CYCLE_ANCHOR) unless OpenApi::EnumValidator.valid?(_billing_cycle_anchor, VALID_VALUES_FOR_BILLING_CYCLE_ANCHOR)
      end
      unless (_billing_thresholds = @billing_thresholds).nil?
        invalid_properties.concat(_billing_thresholds.list_invalid_properties_for("billing_thresholds")) if _billing_thresholds.is_a?(OpenApi::Validatable)
      end
      unless (_cancel_at = @cancel_at).nil?
        invalid_properties.concat(_cancel_at.list_invalid_properties_for("cancel_at")) if _cancel_at.is_a?(OpenApi::Validatable)
      end

      unless (_cancellation_details = @cancellation_details).nil?
        invalid_properties.concat(_cancellation_details.list_invalid_properties_for("cancellation_details")) if _cancellation_details.is_a?(OpenApi::Validatable)
      end
      unless (_collection_method = @collection_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_COLLECTION_METHOD) unless OpenApi::EnumValidator.valid?(_collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      end
      unless (_coupon = @coupon).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("coupon", _coupon.to_s.size, MAX_LENGTH_FOR_COUPON)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_default_payment_method = @default_payment_method).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("default_payment_method", _default_payment_method.to_s.size, MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_default_source = @default_source).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_DEFAULT_SOURCE) unless OpenApi::EnumValidator.valid?(_default_source, VALID_VALUES_FOR_DEFAULT_SOURCE)
      end
      unless (_default_tax_rates = @default_tax_rates).nil?
        invalid_properties.concat(_default_tax_rates.list_invalid_properties_for("default_tax_rates")) if _default_tax_rates.is_a?(OpenApi::Validatable)
      end
      unless (_description = @description).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_DESCRIPTION) unless OpenApi::EnumValidator.valid?(_description, VALID_VALUES_FOR_DESCRIPTION)
      end
      unless (_discounts = @discounts).nil?
        invalid_properties.concat(_discounts.list_invalid_properties_for("discounts")) if _discounts.is_a?(OpenApi::Validatable)
      end

      unless (_invoice_settings = @invoice_settings).nil?
        invalid_properties.concat(_invoice_settings.list_invalid_properties_for("invoice_settings")) if _invoice_settings.is_a?(OpenApi::Validatable)
      end
      unless (_items = @items).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "items", container: _items)) if _items.is_a?(Array)
      end
      unless (_metadata = @metadata).nil?
        invalid_properties.concat(_metadata.list_invalid_properties_for("metadata")) if _metadata.is_a?(OpenApi::Validatable)
      end

      unless (_on_behalf_of = @on_behalf_of).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ON_BEHALF_OF) unless OpenApi::EnumValidator.valid?(_on_behalf_of, VALID_VALUES_FOR_ON_BEHALF_OF)
      end
      unless (_pause_collection = @pause_collection).nil?
        invalid_properties.concat(_pause_collection.list_invalid_properties_for("pause_collection")) if _pause_collection.is_a?(OpenApi::Validatable)
      end
      unless (_payment_behavior = @payment_behavior).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_BEHAVIOR) unless OpenApi::EnumValidator.valid?(_payment_behavior, VALID_VALUES_FOR_PAYMENT_BEHAVIOR)
      end
      unless (_payment_settings = @payment_settings).nil?
        invalid_properties.concat(_payment_settings.list_invalid_properties_for("payment_settings")) if _payment_settings.is_a?(OpenApi::Validatable)
      end
      unless (_pending_invoice_item_interval = @pending_invoice_item_interval).nil?
        invalid_properties.concat(_pending_invoice_item_interval.list_invalid_properties_for("pending_invoice_item_interval")) if _pending_invoice_item_interval.is_a?(OpenApi::Validatable)
      end
      unless (_promotion_code = @promotion_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("promotion_code", _promotion_code.to_s.size, MAX_LENGTH_FOR_PROMOTION_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_proration_behavior = @proration_behavior).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PRORATION_BEHAVIOR) unless OpenApi::EnumValidator.valid?(_proration_behavior, VALID_VALUES_FOR_PRORATION_BEHAVIOR)
      end

      unless (_transfer_data = @transfer_data).nil?
        invalid_properties.concat(_transfer_data.list_invalid_properties_for("transfer_data")) if _transfer_data.is_a?(OpenApi::Validatable)
      end
      unless (_trial_end = @trial_end).nil?
        invalid_properties.concat(_trial_end.list_invalid_properties_for("trial_end")) if _trial_end.is_a?(OpenApi::Validatable)
      end

      unless (_trial_settings = @trial_settings).nil?
        invalid_properties.concat(_trial_settings.list_invalid_properties_for("trial_settings")) if _trial_settings.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_add_invoice_items = @add_invoice_items).nil?
        return false if _add_invoice_items.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _add_invoice_items)
      end

      unless (_application_fee_percent = @application_fee_percent).nil?
        return false if _application_fee_percent.is_a?(OpenApi::Validatable) && !_application_fee_percent.valid?
      end

      unless (_automatic_tax = @automatic_tax).nil?
        return false if _automatic_tax.is_a?(OpenApi::Validatable) && !_automatic_tax.valid?
      end

      unless (_billing_cycle_anchor = @billing_cycle_anchor).nil?
        return false unless OpenApi::EnumValidator.valid?(_billing_cycle_anchor, VALID_VALUES_FOR_BILLING_CYCLE_ANCHOR)
      end

      unless (_billing_thresholds = @billing_thresholds).nil?
        return false if _billing_thresholds.is_a?(OpenApi::Validatable) && !_billing_thresholds.valid?
      end

      unless (_cancel_at = @cancel_at).nil?
        return false if _cancel_at.is_a?(OpenApi::Validatable) && !_cancel_at.valid?
      end

      unless (_cancellation_details = @cancellation_details).nil?
        return false if _cancellation_details.is_a?(OpenApi::Validatable) && !_cancellation_details.valid?
      end

      unless (_collection_method = @collection_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_collection_method, VALID_VALUES_FOR_COLLECTION_METHOD)
      end

      unless (_coupon = @coupon).nil?
        return false if _coupon.to_s.size > MAX_LENGTH_FOR_COUPON
      end

      unless (_default_payment_method = @default_payment_method).nil?
        return false if _default_payment_method.to_s.size > MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD
      end

      unless (_default_source = @default_source).nil?
        return false unless OpenApi::EnumValidator.valid?(_default_source, VALID_VALUES_FOR_DEFAULT_SOURCE)
      end

      unless (_default_tax_rates = @default_tax_rates).nil?
        return false if _default_tax_rates.is_a?(OpenApi::Validatable) && !_default_tax_rates.valid?
      end

      unless (_description = @description).nil?
        return false unless OpenApi::EnumValidator.valid?(_description, VALID_VALUES_FOR_DESCRIPTION)
      end

      unless (_discounts = @discounts).nil?
        return false if _discounts.is_a?(OpenApi::Validatable) && !_discounts.valid?
      end

      unless (_invoice_settings = @invoice_settings).nil?
        return false if _invoice_settings.is_a?(OpenApi::Validatable) && !_invoice_settings.valid?
      end

      unless (_items = @items).nil?
        return false if _items.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _items)
      end

      unless (_metadata = @metadata).nil?
        return false if _metadata.is_a?(OpenApi::Validatable) && !_metadata.valid?
      end

      unless (_on_behalf_of = @on_behalf_of).nil?
        return false unless OpenApi::EnumValidator.valid?(_on_behalf_of, VALID_VALUES_FOR_ON_BEHALF_OF)
      end

      unless (_pause_collection = @pause_collection).nil?
        return false if _pause_collection.is_a?(OpenApi::Validatable) && !_pause_collection.valid?
      end

      unless (_payment_behavior = @payment_behavior).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_behavior, VALID_VALUES_FOR_PAYMENT_BEHAVIOR)
      end

      unless (_payment_settings = @payment_settings).nil?
        return false if _payment_settings.is_a?(OpenApi::Validatable) && !_payment_settings.valid?
      end

      unless (_pending_invoice_item_interval = @pending_invoice_item_interval).nil?
        return false if _pending_invoice_item_interval.is_a?(OpenApi::Validatable) && !_pending_invoice_item_interval.valid?
      end

      unless (_promotion_code = @promotion_code).nil?
        return false if _promotion_code.to_s.size > MAX_LENGTH_FOR_PROMOTION_CODE
      end

      unless (_proration_behavior = @proration_behavior).nil?
        return false unless OpenApi::EnumValidator.valid?(_proration_behavior, VALID_VALUES_FOR_PRORATION_BEHAVIOR)
      end

      unless (_transfer_data = @transfer_data).nil?
        return false if _transfer_data.is_a?(OpenApi::Validatable) && !_transfer_data.valid?
      end

      unless (_trial_end = @trial_end).nil?
        return false if _trial_end.is_a?(OpenApi::Validatable) && !_trial_end.valid?
      end

      unless (_trial_settings = @trial_settings).nil?
        return false if _trial_settings.is_a?(OpenApi::Validatable) && !_trial_settings.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] add_invoice_items Object to be assigned
    def add_invoice_items=(new_value : Array(Stripe::AddInvoiceItemEntry)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @add_invoice_items = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_percent Object to be assigned
    def application_fee_percent=(new_value : Stripe::PostSubscriptionsRequestApplicationFeePercent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @application_fee_percent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(new_value : Stripe::AutomaticTaxConfig?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @automatic_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("billing_cycle_anchor", new_value, VALID_VALUES_FOR_BILLING_CYCLE_ANCHOR)
      end

      @billing_cycle_anchor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_thresholds Object to be assigned
    def billing_thresholds=(new_value : Stripe::PostSubscriptionsRequestBillingThresholds?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @billing_thresholds = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_at Object to be assigned
    def cancel_at=(new_value : Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cancel_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_at_period_end Object to be assigned
    def cancel_at_period_end=(new_value : Bool?)
      @cancel_at_period_end = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_details Object to be assigned
    def cancellation_details=(new_value : Stripe::CancellationDetailsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cancellation_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("collection_method", new_value, VALID_VALUES_FOR_COLLECTION_METHOD)
      end

      @collection_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] coupon Object to be assigned
    def coupon=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("coupon", new_value.to_s.size, MAX_LENGTH_FOR_COUPON)
      end

      @coupon = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_until_due Object to be assigned
    def days_until_due=(new_value : Int64?)
      @days_until_due = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("default_payment_method", new_value.to_s.size, MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD)
      end

      @default_payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_source Object to be assigned
    def default_source=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("default_source", new_value, VALID_VALUES_FOR_DEFAULT_SOURCE)
      end

      @default_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_tax_rates Object to be assigned
    def default_tax_rates=(new_value : Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @default_tax_rates = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("description", new_value, VALID_VALUES_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(new_value : Stripe::PostSubscriptionsRequestDiscounts?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @discounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_settings Object to be assigned
    def invoice_settings=(new_value : Stripe::InvoiceSettingsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice_settings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] items Object to be assigned
    def items=(new_value : Array(Stripe::SubscriptionItemUpdateParams)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @items = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Stripe::PostAccountsRequestMetadata?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] off_session Object to be assigned
    def off_session=(new_value : Bool?)
      @off_session = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("on_behalf_of", new_value, VALID_VALUES_FOR_ON_BEHALF_OF)
      end

      @on_behalf_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pause_collection Object to be assigned
    def pause_collection=(new_value : Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pause_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_behavior Object to be assigned
    def payment_behavior=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_behavior", new_value, VALID_VALUES_FOR_PAYMENT_BEHAVIOR)
      end

      @payment_behavior = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_settings Object to be assigned
    def payment_settings=(new_value : Stripe::PaymentSettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_settings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending_invoice_item_interval Object to be assigned
    def pending_invoice_item_interval=(new_value : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pending_invoice_item_interval = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promotion_code Object to be assigned
    def promotion_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("promotion_code", new_value.to_s.size, MAX_LENGTH_FOR_PROMOTION_CODE)
      end

      @promotion_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_behavior Object to be assigned
    def proration_behavior=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("proration_behavior", new_value, VALID_VALUES_FOR_PRORATION_BEHAVIOR)
      end

      @proration_behavior = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_date Object to be assigned
    def proration_date=(new_value : Int64?)
      @proration_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(new_value : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfer_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_end Object to be assigned
    def trial_end=(new_value : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @trial_end = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_from_plan Object to be assigned
    def trial_from_plan=(new_value : Bool?)
      @trial_from_plan = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_settings Object to be assigned
    def trial_settings=(new_value : Stripe::TrialSettingsConfig?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @trial_settings = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@add_invoice_items, @application_fee_percent, @automatic_tax, @billing_cycle_anchor, @billing_thresholds, @cancel_at, @cancel_at_period_end, @cancellation_details, @collection_method, @coupon, @days_until_due, @default_payment_method, @default_source, @default_tax_rates, @description, @discounts, @expand, @invoice_settings, @items, @metadata, @off_session, @on_behalf_of, @pause_collection, @payment_behavior, @payment_settings, @pending_invoice_item_interval, @promotion_code, @proration_behavior, @proration_date, @transfer_data, @trial_end, @trial_from_plan, @trial_settings)
  end
end
