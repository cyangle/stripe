#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_authorization_merchant_data"
require "./issuing_transaction"
require "./issuing_transaction_amount_details"
require "./issuing_transaction_authorization"
require "./issuing_transaction_balance_transaction"
require "./issuing_transaction_card"
require "./issuing_transaction_cardholder"
require "./issuing_transaction_dispute"
require "./issuing_transaction_network_data"
require "./issuing_transaction_purchase_details"
require "./issuing_transaction_token"
require "./issuing_transaction_treasury"

module Stripe
  # The transaction being disputed.
  class IssuingDisputeTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    @[JSON::Field(key: "amount_details", type: Stripe::IssuingTransactionAmountDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount_details : Stripe::IssuingTransactionAmountDetails? = nil

    @[JSON::Field(key: "authorization", type: Stripe::IssuingTransactionAuthorization?, default: nil, required: true, nullable: true, emit_null: true)]
    property authorization : Stripe::IssuingTransactionAuthorization? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::IssuingTransactionBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property balance_transaction : Stripe::IssuingTransactionBalanceTransaction? = nil

    @[JSON::Field(key: "card", type: Stripe::IssuingTransactionCard?, default: nil, required: true, nullable: false, emit_null: false)]
    property card : Stripe::IssuingTransactionCard? = nil

    @[JSON::Field(key: "cardholder", type: Stripe::IssuingTransactionCardholder?, default: nil, required: true, nullable: true, emit_null: true)]
    property cardholder : Stripe::IssuingTransactionCardholder? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    @[JSON::Field(key: "dispute", type: Stripe::IssuingTransactionDispute?, default: nil, required: true, nullable: true, emit_null: true)]
    property dispute : Stripe::IssuingTransactionDispute? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
    @[JSON::Field(key: "merchant_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_amount : Int64? = nil

    # The currency with which the merchant is taking payment.
    @[JSON::Field(key: "merchant_currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_currency : String? = nil

    @[JSON::Field(key: "merchant_data", type: Stripe::IssuingAuthorizationMerchantData?, default: nil, required: true, nullable: false, emit_null: false)]
    property merchant_data : Stripe::IssuingAuthorizationMerchantData? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    property metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "network_data", type: Stripe::IssuingTransactionNetworkData?, default: nil, required: true, nullable: false, emit_null: false)]
    property network_data : Stripe::IssuingTransactionNetworkData? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [issuing.transaction]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("issuing.transaction")

    # The nature of the transaction.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [capture, refund]."
    VALID_VALUES_FOR__TYPE  = String.static_array("capture", "refund")

    # The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    @[JSON::Field(key: "wallet", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property wallet : String? = nil
    ERROR_MESSAGE_FOR_WALLET = "invalid value for \"wallet\", must be one of [apple_pay, google_pay, samsung_pay]."
    VALID_VALUES_FOR_WALLET  = String.static_array("apple_pay", "google_pay", "samsung_pay")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "purchase_details", type: Stripe::IssuingTransactionPurchaseDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    property purchase_details : Stripe::IssuingTransactionPurchaseDetails? = nil

    @[JSON::Field(key: "token", type: Stripe::IssuingTransactionToken?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: token.nil? && !token_present?)]
    property token : Stripe::IssuingTransactionToken? = nil

    @[JSON::Field(ignore: true)]
    property? token_present : Bool = false

    @[JSON::Field(key: "treasury", type: Stripe::IssuingTransactionTreasury?, default: nil, required: false, nullable: false, emit_null: false)]
    property treasury : Stripe::IssuingTransactionTreasury? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::IssuingTransaction,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_details : Stripe::IssuingTransactionAmountDetails? = nil,
      @authorization : Stripe::IssuingTransactionAuthorization? = nil,
      @balance_transaction : Stripe::IssuingTransactionBalanceTransaction? = nil,
      @card : Stripe::IssuingTransactionCard? = nil,
      @cardholder : Stripe::IssuingTransactionCardholder? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @dispute : Stripe::IssuingTransactionDispute? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @merchant_amount : Int64? = nil,
      @merchant_currency : String? = nil,
      @merchant_data : Stripe::IssuingAuthorizationMerchantData? = nil,
      @metadata : Hash(String, String)? = nil,
      @network_data : Stripe::IssuingTransactionNetworkData? = nil,
      @object : String? = nil,
      @_type : String? = nil,
      @wallet : String? = nil,
      # Optional properties
      @purchase_details : Stripe::IssuingTransactionPurchaseDetails? = nil,
      @token : Stripe::IssuingTransactionToken? = nil,
      @treasury : Stripe::IssuingTransactionTreasury? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_details, @authorization, @balance_transaction, @card, @cardholder, @created, @currency, @dispute, @id, @livemode, @merchant_amount, @merchant_currency, @merchant_data, @metadata, @network_data, @object, @_type, @wallet, @purchase_details, @token, @token_present, @treasury)
  end
end
