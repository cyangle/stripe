#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_authorization_amount_details"

module Stripe
  #
  class IssuingAuthorizationRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    @[JSON::Field(key: "amount_details", type: Stripe::IssuingAuthorizationAmountDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_details : Stripe::IssuingAuthorizationAmountDetails? = nil

    # Whether this request was approved.
    @[JSON::Field(key: "approved", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter approved : Bool? = nil

    # A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter \"S\", followed by a six-digit number. For example, \"S498162\". Please note that the code is not guaranteed to be unique across authorizations.
    @[JSON::Field(key: "authorization_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter authorization_code : String? = nil
    MAX_LENGTH_FOR_AUTHORIZATION_CODE = 5000

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil
    MAX_LENGTH_FOR_CURRENCY = 5000

    # The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "merchant_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter merchant_amount : Int64? = nil

    # The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "merchant_currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter merchant_currency : String? = nil
    MAX_LENGTH_FOR_MERCHANT_CURRENCY = 5000

    # The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
    @[JSON::Field(key: "network_risk_score", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter network_risk_score : Int64? = nil

    # When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reason : String? = nil
    ERROR_MESSAGE_FOR_REASON = "invalid value for \"reason\", must be one of [account_disabled, card_active, card_canceled, card_expired, card_inactive, cardholder_blocked, cardholder_inactive, cardholder_verification_required, insecure_authorization_method, insufficient_funds, not_allowed, pin_blocked, spending_controls, suspected_fraud, verification_failed, webhook_approved, webhook_declined, webhook_error, webhook_timeout]."
    VALID_VALUES_FOR_REASON  = String.static_array("account_disabled", "card_active", "card_canceled", "card_expired", "card_inactive", "cardholder_blocked", "cardholder_inactive", "cardholder_verification_required", "insecure_authorization_method", "insufficient_funds", "not_allowed", "pin_blocked", "spending_controls", "suspected_fraud", "verification_failed", "webhook_approved", "webhook_declined", "webhook_error", "webhook_timeout")

    # If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field.
    @[JSON::Field(key: "reason_message", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter reason_message : String? = nil
    MAX_LENGTH_FOR_REASON_MESSAGE = 5000

    # Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time.
    @[JSON::Field(key: "requested_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter requested_at : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_details : Stripe::IssuingAuthorizationAmountDetails? = nil,
      @approved : Bool? = nil,
      @authorization_code : String? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @merchant_amount : Int64? = nil,
      @merchant_currency : String? = nil,
      @network_risk_score : Int64? = nil,
      @reason : String? = nil,
      @reason_message : String? = nil,
      @requested_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount_details = @amount_details).nil?
        invalid_properties.concat(_amount_details.list_invalid_properties_for("amount_details")) if _amount_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"approved\" is required and cannot be null") if @approved.nil?

      unless (_authorization_code = @authorization_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("authorization_code", _authorization_code.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_currency = @currency).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("currency", _currency.to_s.size, MAX_LENGTH_FOR_CURRENCY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"merchant_amount\" is required and cannot be null") if @merchant_amount.nil?

      invalid_properties.push("\"merchant_currency\" is required and cannot be null") if @merchant_currency.nil?

      unless (_merchant_currency = @merchant_currency).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("merchant_currency", _merchant_currency.to_s.size, MAX_LENGTH_FOR_MERCHANT_CURRENCY)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties.push("\"reason\" is required and cannot be null") if @reason.nil?

      unless (_reason = @reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REASON) unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end
      unless (_reason_message = @reason_message).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reason_message", _reason_message.to_s.size, MAX_LENGTH_FOR_REASON_MESSAGE)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      unless (_amount_details = @amount_details).nil?
        return false if _amount_details.is_a?(OpenApi::Validatable) && !_amount_details.valid?
      end

      return false if @approved.nil?

      unless (_authorization_code = @authorization_code).nil?
        return false if _authorization_code.to_s.size > MAX_LENGTH_FOR_AUTHORIZATION_CODE
      end

      return false if @created.nil?

      return false if @currency.nil?
      unless (_currency = @currency).nil?
        return false if _currency.to_s.size > MAX_LENGTH_FOR_CURRENCY
      end

      return false if @merchant_amount.nil?

      return false if @merchant_currency.nil?
      unless (_merchant_currency = @merchant_currency).nil?
        return false if _merchant_currency.to_s.size > MAX_LENGTH_FOR_MERCHANT_CURRENCY
      end

      return false if @reason.nil?
      unless (_reason = @reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end

      unless (_reason_message = @reason_message).nil?
        return false if _reason_message.to_s.size > MAX_LENGTH_FOR_REASON_MESSAGE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_details Object to be assigned
    def amount_details=(new_value : Stripe::IssuingAuthorizationAmountDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amount_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] approved Object to be assigned
    def approved=(new_value : Bool?)
      raise ArgumentError.new("\"approved\" is required and cannot be null") if new_value.nil?

      @approved = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_code Object to be assigned
    def authorization_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("authorization_code", new_value.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_CODE)
      end

      @authorization_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("currency", new_value.to_s.size, MAX_LENGTH_FOR_CURRENCY)
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_amount Object to be assigned
    def merchant_amount=(new_value : Int64?)
      raise ArgumentError.new("\"merchant_amount\" is required and cannot be null") if new_value.nil?

      @merchant_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_currency Object to be assigned
    def merchant_currency=(new_value : String?)
      raise ArgumentError.new("\"merchant_currency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("merchant_currency", new_value.to_s.size, MAX_LENGTH_FOR_MERCHANT_CURRENCY)
      end

      @merchant_currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_risk_score Object to be assigned
    def network_risk_score=(new_value : Int64?)
      @network_risk_score = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(new_value : String?)
      raise ArgumentError.new("\"reason\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("reason", new_value, VALID_VALUES_FOR_REASON)
      end

      @reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason_message Object to be assigned
    def reason_message=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("reason_message", new_value.to_s.size, MAX_LENGTH_FOR_REASON_MESSAGE)
      end

      @reason_message = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] requested_at Object to be assigned
    def requested_at=(new_value : Int64?)
      @requested_at = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_details, @approved, @authorization_code, @created, @currency, @merchant_amount, @merchant_currency, @network_risk_score, @reason, @reason_message, @requested_at)
  end
end
