#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class IssuingAuthorizationRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Whether this request was approved.
    @[JSON::Field(key: "approved", type: Bool)]
    property approved : Bool

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    getter currency : String

    # The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "merchant_amount", type: Int64)]
    property merchant_amount : Int64

    # The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "merchant_currency", type: String)]
    getter merchant_currency : String

    # The reason for the approval or decline.
    @[JSON::Field(key: "reason", type: String)]
    getter reason : String

    ENUM_VALIDATOR_FOR_REASON = EnumValidator.new("reason", "String", ["account_disabled", "card_active", "card_inactive", "cardholder_inactive", "cardholder_verification_required", "insufficient_funds", "not_allowed", "spending_controls", "suspected_fraud", "verification_failed", "webhook_approved", "webhook_declined", "webhook_timeout"])

    # Optional properties

    @[JSON::Field(key: "amount_details", type: IssuingAuthorizationAmountDetails1?, presence: true, ignore_serialize: amount_details.nil? && !amount_details_present?)]
    property amount_details : IssuingAuthorizationAmountDetails1?

    @[JSON::Field(ignore: true)]
    property? amount_details_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @amount : Int64, 
      @approved : Bool, 
      @created : Int64, 
      @currency : String, 
      @merchant_amount : Int64, 
      @merchant_currency : String, 
      @reason : String, 
      # Optional properties
      @amount_details : IssuingAuthorizationAmountDetails1? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @currency.to_s.size > 5000
        invalid_properties.push("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      if @merchant_currency.to_s.size > 5000
        invalid_properties.push("invalid value for \"merchant_currency\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_REASON.error_message) unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @currency.to_s.size > 5000
      return false if @merchant_currency.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason, false)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if currency.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] merchant_currency Value to be assigned
    def merchant_currency=(merchant_currency)
      if merchant_currency.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"merchant_currency\", the character length must be smaller than or equal to 5000.")
      end

      @merchant_currency = merchant_currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason)
      ENUM_VALIDATOR_FOR_REASON.valid!(reason, false)
      @reason = reason
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @approved, @created, @currency, @merchant_amount, @merchant_currency, @reason, @amount_details)
  end
end
