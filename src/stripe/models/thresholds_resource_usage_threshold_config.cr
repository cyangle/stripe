#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./thresholds_resource_usage_threshold_config_meter"

module Stripe
  # The usage threshold alert configuration enables setting up alerts for when a certain usage threshold on a specific meter is crossed.
  class ThresholdsResourceUsageThresholdConfig
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The value at which this alert will trigger.
    @[JSON::Field(key: "gte", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter gte : Int64? = nil

    @[JSON::Field(key: "meter", type: Stripe::ThresholdsResourceUsageThresholdConfigMeter?, default: nil, required: true, nullable: false, emit_null: false)]
    getter meter : Stripe::ThresholdsResourceUsageThresholdConfigMeter? = nil

    # Defines how the alert will behave.
    @[JSON::Field(key: "recurrence", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter recurrence : String? = nil
    ERROR_MESSAGE_FOR_RECURRENCE = "invalid value for \"recurrence\", must be one of [one_time]."
    VALID_VALUES_FOR_RECURRENCE  = String.static_array("one_time")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @gte : Int64? = nil,
      @meter : Stripe::ThresholdsResourceUsageThresholdConfigMeter? = nil,
      @recurrence : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"gte\" is required and cannot be null") if @gte.nil?

      invalid_properties.push("\"meter\" is required and cannot be null") if @meter.nil?

      unless (_meter = @meter).nil?
        invalid_properties.concat(_meter.list_invalid_properties_for("meter")) if _meter.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"recurrence\" is required and cannot be null") if @recurrence.nil?

      unless (_recurrence = @recurrence).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_RECURRENCE) unless OpenApi::EnumValidator.valid?(_recurrence, VALID_VALUES_FOR_RECURRENCE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @gte.nil?

      return false if @meter.nil?
      unless (_meter = @meter).nil?
        return false if _meter.is_a?(OpenApi::Validatable) && !_meter.valid?
      end

      return false if @recurrence.nil?
      unless (_recurrence = @recurrence).nil?
        return false unless OpenApi::EnumValidator.valid?(_recurrence, VALID_VALUES_FOR_RECURRENCE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gte Object to be assigned
    def gte=(new_value : Int64?)
      raise ArgumentError.new("\"gte\" is required and cannot be null") if new_value.nil?

      @gte = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] meter Object to be assigned
    def meter=(new_value : Stripe::ThresholdsResourceUsageThresholdConfigMeter?)
      raise ArgumentError.new("\"meter\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @meter = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recurrence Object to be assigned
    def recurrence=(new_value : String?)
      raise ArgumentError.new("\"recurrence\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("recurrence", new_value, VALID_VALUES_FOR_RECURRENCE)
      end

      @recurrence = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@gte, @meter, @recurrence)
  end
end
