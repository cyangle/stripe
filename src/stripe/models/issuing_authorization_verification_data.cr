#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  class IssuingAuthorizationVerificationData
    include NASON::Serializable

    # Required properties
    # Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
    @[NASON::Field(key: "address_line1_check", type: String)]
    property address_line1_check : String

    # Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
    @[NASON::Field(key: "address_postal_code_check", type: String)]
    property address_postal_code_check : String

    # Whether the cardholder provided a CVC and if it matched Stripe’s record.
    @[NASON::Field(key: "cvc_check", type: String)]
    property cvc_check : String

    # Whether the cardholder provided an expiry date and if it matched Stripe’s record.
    @[NASON::Field(key: "expiry_check", type: String)]
    property expiry_check : String

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @address_line1_check : String, @address_postal_code_check : String, @cvc_check : String, @expiry_check : String)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      address_line1_check_validator = EnumAttributeValidator.new("String", ["match", "mismatch", "not_provided"])
      return false unless address_line1_check_validator.valid?(@address_line1_check)
      address_postal_code_check_validator = EnumAttributeValidator.new("String", ["match", "mismatch", "not_provided"])
      return false unless address_postal_code_check_validator.valid?(@address_postal_code_check)
      cvc_check_validator = EnumAttributeValidator.new("String", ["match", "mismatch", "not_provided"])
      return false unless cvc_check_validator.valid?(@cvc_check)
      expiry_check_validator = EnumAttributeValidator.new("String", ["match", "mismatch", "not_provided"])
      return false unless expiry_check_validator.valid?(@expiry_check)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_line1_check Object to be assigned
    def address_line1_check=(address_line1_check)
      validator = EnumAttributeValidator.new("String", ["match", "mismatch", "not_provided"])
      unless validator.valid?(address_line1_check)
        raise ArgumentError.new("invalid value for \"address_line1_check\", must be one of #{validator.allowable_values}.")
      end
      @address_line1_check = address_line1_check
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_postal_code_check Object to be assigned
    def address_postal_code_check=(address_postal_code_check)
      validator = EnumAttributeValidator.new("String", ["match", "mismatch", "not_provided"])
      unless validator.valid?(address_postal_code_check)
        raise ArgumentError.new("invalid value for \"address_postal_code_check\", must be one of #{validator.allowable_values}.")
      end
      @address_postal_code_check = address_postal_code_check
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc_check Object to be assigned
    def cvc_check=(cvc_check)
      validator = EnumAttributeValidator.new("String", ["match", "mismatch", "not_provided"])
      unless validator.valid?(cvc_check)
        raise ArgumentError.new("invalid value for \"cvc_check\", must be one of #{validator.allowable_values}.")
      end
      @cvc_check = cvc_check
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expiry_check Object to be assigned
    def expiry_check=(expiry_check)
      validator = EnumAttributeValidator.new("String", ["match", "mismatch", "not_provided"])
      unless validator.valid?(expiry_check)
        raise ArgumentError.new("invalid value for \"expiry_check\", must be one of #{validator.allowable_values}.")
      end
      @expiry_check = expiry_check
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        address_line1_check == o.address_line1_check &&
        address_postal_code_check == o.address_postal_code_check &&
        cvc_check == o.cvc_check &&
        expiry_check == o.expiry_check
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address_line1_check, address_postal_code_check, cvc_check, expiry_check].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
