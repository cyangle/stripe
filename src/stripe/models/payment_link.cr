#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.  When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.  Related guide: [Payment Links API](https://stripe.com/docs/payments/payment-links/api)
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentLink
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
    @[JSON::Field(key: "active", type: Bool)]
    property active : Bool

    @[JSON::Field(key: "after_completion", type: PaymentLinksResourceAfterCompletion)]
    property after_completion : PaymentLinksResourceAfterCompletion

    # Whether user redeemable promotion codes are enabled.
    @[JSON::Field(key: "allow_promotion_codes", type: Bool)]
    property allow_promotion_codes : Bool

    @[JSON::Field(key: "automatic_tax", type: PaymentLinksResourceAutomaticTax)]
    property automatic_tax : PaymentLinksResourceAutomaticTax

    # Configuration for collecting the customer's billing address.
    @[JSON::Field(key: "billing_address_collection", type: String)]
    getter billing_address_collection : String

    ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION = EnumValidator.new("billing_address_collection", "String", ["auto", "required"])

    # Configuration for Customer creation during checkout.
    @[JSON::Field(key: "customer_creation", type: String)]
    getter customer_creation : String

    ENUM_VALIDATOR_FOR_CUSTOMER_CREATION = EnumValidator.new("customer_creation", "String", ["always", "if_required"])

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["payment_link"])

    @[JSON::Field(key: "phone_number_collection", type: PaymentLinksResourcePhoneNumberCollection)]
    property phone_number_collection : PaymentLinksResourcePhoneNumberCollection

    # The shipping rate options applied to the session.
    @[JSON::Field(key: "shipping_options", type: Array(PaymentLinksResourceShippingOption))]
    property shipping_options : Array(PaymentLinksResourceShippingOption)

    # Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button.
    @[JSON::Field(key: "submit_type", type: String)]
    getter submit_type : String

    ENUM_VALIDATOR_FOR_SUBMIT_TYPE = EnumValidator.new("submit_type", "String", ["auto", "book", "donate", "pay"])

    @[JSON::Field(key: "tax_id_collection", type: PaymentLinksResourceTaxIdCollection)]
    property tax_id_collection : PaymentLinksResourceTaxIdCollection

    # The public URL that can be shared with customers.
    @[JSON::Field(key: "url", type: String)]
    getter url : String

    # Optional properties

    # The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, presence: true, ignore_serialize: application_fee_amount.nil? && !application_fee_amount_present?)]
    property application_fee_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? application_fee_amount_present : Bool = false

    # This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
    @[JSON::Field(key: "application_fee_percent", type: Float64?, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    property application_fee_percent : Float64?

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    @[JSON::Field(key: "consent_collection", type: PaymentLinkConsentCollection?, presence: true, ignore_serialize: consent_collection.nil? && !consent_collection_present?)]
    property consent_collection : PaymentLinkConsentCollection?

    @[JSON::Field(ignore: true)]
    property? consent_collection_present : Bool = false

    @[JSON::Field(key: "line_items", type: PaymentLinksResourceListLineItems1?, presence: true, ignore_serialize: line_items.nil? && !line_items_present?)]
    property line_items : PaymentLinksResourceListLineItems1?

    @[JSON::Field(ignore: true)]
    property? line_items_present : Bool = false

    @[JSON::Field(key: "on_behalf_of", type: PaymentLinkOnBehalfOf?, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    property on_behalf_of : PaymentLinkOnBehalfOf?

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "payment_intent_data", type: PaymentLinkPaymentIntentData?, presence: true, ignore_serialize: payment_intent_data.nil? && !payment_intent_data_present?)]
    property payment_intent_data : PaymentLinkPaymentIntentData?

    @[JSON::Field(ignore: true)]
    property? payment_intent_data_present : Bool = false

    # The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, presence: true, ignore_serialize: payment_method_types.nil? && !payment_method_types_present?)]
    getter payment_method_types : Array(String)?

    @[JSON::Field(ignore: true)]
    property? payment_method_types_present : Bool = false

    ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES = EnumValidator.new("payment_method_types", "String", ["card"])

    @[JSON::Field(key: "shipping_address_collection", type: PaymentLinkShippingAddressCollection?, presence: true, ignore_serialize: shipping_address_collection.nil? && !shipping_address_collection_present?)]
    property shipping_address_collection : PaymentLinkShippingAddressCollection?

    @[JSON::Field(ignore: true)]
    property? shipping_address_collection_present : Bool = false

    @[JSON::Field(key: "subscription_data", type: PaymentLinkSubscriptionData?, presence: true, ignore_serialize: subscription_data.nil? && !subscription_data_present?)]
    property subscription_data : PaymentLinkSubscriptionData?

    @[JSON::Field(ignore: true)]
    property? subscription_data_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: PaymentLinkTransferData?, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    property transfer_data : PaymentLinkTransferData?

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @active : Bool,
      @after_completion : PaymentLinksResourceAfterCompletion,
      @allow_promotion_codes : Bool,
      @automatic_tax : PaymentLinksResourceAutomaticTax,
      @billing_address_collection : String,
      @customer_creation : String,
      @id : String,
      @livemode : Bool,
      @metadata : Hash(String, String),
      @object : String,
      @phone_number_collection : PaymentLinksResourcePhoneNumberCollection,
      @shipping_options : Array(PaymentLinksResourceShippingOption),
      @submit_type : String,
      @tax_id_collection : PaymentLinksResourceTaxIdCollection,
      @url : String,
      # Optional properties
      @application_fee_amount : Int64? = nil,
      @application_fee_percent : Float64? = nil,
      @consent_collection : PaymentLinkConsentCollection? = nil,
      @line_items : PaymentLinksResourceListLineItems1? = nil,
      @on_behalf_of : PaymentLinkOnBehalfOf? = nil,
      @payment_intent_data : PaymentLinkPaymentIntentData? = nil,
      @payment_method_types : Array(String)? = nil,
      @shipping_address_collection : PaymentLinkShippingAddressCollection? = nil,
      @subscription_data : PaymentLinkSubscriptionData? = nil,
      @transfer_data : PaymentLinkTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.error_message) unless ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid?(@billing_address_collection, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.error_message) unless ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid?(@customer_creation, false)

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUBMIT_TYPE.error_message) unless ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid?(@submit_type, false)

      if @url.to_s.size > 5000
        invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.error_message) unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid?(@payment_method_types)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid?(@billing_address_collection, false)
      return false unless ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid?(@customer_creation, false)
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid?(@submit_type, false)
      return false if @url.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid?(@payment_method_types)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address_collection Object to be assigned
    def billing_address_collection=(billing_address_collection)
      ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid!(billing_address_collection, false)
      @billing_address_collection = billing_address_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_creation Object to be assigned
    def customer_creation=(customer_creation)
      ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid!(customer_creation, false)
      @customer_creation = customer_creation
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submit_type Object to be assigned
    def submit_type=(submit_type)
      ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid!(submit_type, false)
      @submit_type = submit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(payment_method_types)
      ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid!(payment_method_types)
      @payment_method_types = payment_method_types
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @after_completion, @allow_promotion_codes, @automatic_tax, @billing_address_collection, @customer_creation, @id, @livemode, @metadata, @object, @phone_number_collection, @shipping_options, @submit_type, @tax_id_collection, @url, @application_fee_amount, @application_fee_percent, @consent_collection, @line_items, @on_behalf_of, @payment_intent_data, @payment_method_types, @shipping_address_collection, @subscription_data, @transfer_data)
  end
end
