#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostIssuingDisputesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If not set, defaults to the full transaction amount.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    @[JSON::Field(key: "evidence", type: Stripe::EvidenceParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter evidence : Stripe::EvidenceParam? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`.
    @[JSON::Field(key: "transaction", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transaction : String? = nil
    MAX_LENGTH_FOR_TRANSACTION = 5000

    @[JSON::Field(key: "treasury", type: Stripe::TreasuryParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter treasury : Stripe::TreasuryParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount : Int64? = nil,
      @evidence : Stripe::EvidenceParam? = nil,
      @expand : Array(String)? = nil,
      @metadata : Hash(String, String)? = nil,
      @transaction : String? = nil,
      @treasury : Stripe::TreasuryParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _evidence = @evidence
        invalid_properties.concat(_evidence.list_invalid_properties_for("evidence")) if _evidence.is_a?(OpenApi::Validatable)
      end

      if _transaction = @transaction
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transaction", _transaction.to_s.size, MAX_LENGTH_FOR_TRANSACTION)
          invalid_properties.push(max_length_error)
        end
      end
      if _treasury = @treasury
        invalid_properties.concat(_treasury.list_invalid_properties_for("treasury")) if _treasury.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _evidence = @evidence
        return false if _evidence.is_a?(OpenApi::Validatable) && !_evidence.valid?
      end

      if _transaction = @transaction
        return false if _transaction.to_s.size > MAX_LENGTH_FOR_TRANSACTION
      end

      if _treasury = @treasury
        return false if _treasury.is_a?(OpenApi::Validatable) && !_treasury.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        return @amount = nil
      end
      _amount = amount.not_nil!
      @amount = _amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] evidence Object to be assigned
    def evidence=(evidence : Stripe::EvidenceParam?)
      if evidence.nil?
        return @evidence = nil
      end
      _evidence = evidence.not_nil!
      _evidence.validate if _evidence.is_a?(OpenApi::Validatable)
      @evidence = _evidence
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      _expand = expand.not_nil!
      @expand = _expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction Object to be assigned
    def transaction=(transaction : String?)
      if transaction.nil?
        return @transaction = nil
      end
      _transaction = transaction.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("transaction", _transaction.to_s.size, MAX_LENGTH_FOR_TRANSACTION)
      @transaction = _transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treasury Object to be assigned
    def treasury=(treasury : Stripe::TreasuryParam?)
      if treasury.nil?
        return @treasury = nil
      end
      _treasury = treasury.not_nil!
      _treasury.validate if _treasury.is_a?(OpenApi::Validatable)
      @treasury = _treasury
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @evidence, @expand, @metadata, @transaction, @treasury)
  end
end
