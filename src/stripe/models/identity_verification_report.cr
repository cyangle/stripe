#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./gelato_document_report"
require "./gelato_email_report"
require "./gelato_id_number_report"
require "./gelato_phone_report"
require "./gelato_selfie_report"
require "./gelato_verification_report_options"

module Stripe
  # A VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.  Each VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.  Related guide: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
  class IdentityVerificationReport
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    @[JSON::Field(key: "client_reference_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter client_reference_id : String? = nil
    MAX_LENGTH_FOR_CLIENT_REFERENCE_ID = 5000

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [identity.verification_report]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("identity.verification_report")

    # Type of report.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [document, id_number, verification_flow]."
    VALID_VALUES_FOR__TYPE  = String.static_array("document", "id_number", "verification_flow")

    # ID of the VerificationSession that created this report.
    @[JSON::Field(key: "verification_session", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter verification_session : String? = nil
    MAX_LENGTH_FOR_VERIFICATION_SESSION = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "document", type: Stripe::GelatoDocumentReport?, default: nil, required: false, nullable: false, emit_null: false)]
    getter document : Stripe::GelatoDocumentReport? = nil

    @[JSON::Field(key: "email", type: Stripe::GelatoEmailReport?, default: nil, required: false, nullable: false, emit_null: false)]
    getter email : Stripe::GelatoEmailReport? = nil

    @[JSON::Field(key: "id_number", type: Stripe::GelatoIdNumberReport?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id_number : Stripe::GelatoIdNumberReport? = nil

    @[JSON::Field(key: "options", type: Stripe::GelatoVerificationReportOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter options : Stripe::GelatoVerificationReportOptions? = nil

    @[JSON::Field(key: "phone", type: Stripe::GelatoPhoneReport?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone : Stripe::GelatoPhoneReport? = nil

    @[JSON::Field(key: "selfie", type: Stripe::GelatoSelfieReport?, default: nil, required: false, nullable: false, emit_null: false)]
    getter selfie : Stripe::GelatoSelfieReport? = nil

    # The configuration token of a Verification Flow from the dashboard.
    @[JSON::Field(key: "verification_flow", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verification_flow : String? = nil
    MAX_LENGTH_FOR_VERIFICATION_FLOW = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @client_reference_id : String? = nil,
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @_type : String? = nil,
      @verification_session : String? = nil,
      # Optional properties
      @document : Stripe::GelatoDocumentReport? = nil,
      @email : Stripe::GelatoEmailReport? = nil,
      @id_number : Stripe::GelatoIdNumberReport? = nil,
      @options : Stripe::GelatoVerificationReportOptions? = nil,
      @phone : Stripe::GelatoPhoneReport? = nil,
      @selfie : Stripe::GelatoSelfieReport? = nil,
      @verification_flow : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_client_reference_id = @client_reference_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_reference_id", _client_reference_id.to_s.size, MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_verification_session = @verification_session).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("verification_session", _verification_session.to_s.size, MAX_LENGTH_FOR_VERIFICATION_SESSION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_document = @document).nil?
        invalid_properties.concat(_document.list_invalid_properties_for("document")) if _document.is_a?(OpenApi::Validatable)
      end
      unless (_email = @email).nil?
        invalid_properties.concat(_email.list_invalid_properties_for("email")) if _email.is_a?(OpenApi::Validatable)
      end
      unless (_id_number = @id_number).nil?
        invalid_properties.concat(_id_number.list_invalid_properties_for("id_number")) if _id_number.is_a?(OpenApi::Validatable)
      end
      unless (_options = @options).nil?
        invalid_properties.concat(_options.list_invalid_properties_for("options")) if _options.is_a?(OpenApi::Validatable)
      end
      unless (_phone = @phone).nil?
        invalid_properties.concat(_phone.list_invalid_properties_for("phone")) if _phone.is_a?(OpenApi::Validatable)
      end
      unless (_selfie = @selfie).nil?
        invalid_properties.concat(_selfie.list_invalid_properties_for("selfie")) if _selfie.is_a?(OpenApi::Validatable)
      end
      unless (_verification_flow = @verification_flow).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("verification_flow", _verification_flow.to_s.size, MAX_LENGTH_FOR_VERIFICATION_FLOW)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_client_reference_id = @client_reference_id).nil?
        return false if _client_reference_id.to_s.size > MAX_LENGTH_FOR_CLIENT_REFERENCE_ID
      end

      return false if @created.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_verification_session = @verification_session).nil?
        return false if _verification_session.to_s.size > MAX_LENGTH_FOR_VERIFICATION_SESSION
      end

      unless (_document = @document).nil?
        return false if _document.is_a?(OpenApi::Validatable) && !_document.valid?
      end

      unless (_email = @email).nil?
        return false if _email.is_a?(OpenApi::Validatable) && !_email.valid?
      end

      unless (_id_number = @id_number).nil?
        return false if _id_number.is_a?(OpenApi::Validatable) && !_id_number.valid?
      end

      unless (_options = @options).nil?
        return false if _options.is_a?(OpenApi::Validatable) && !_options.valid?
      end

      unless (_phone = @phone).nil?
        return false if _phone.is_a?(OpenApi::Validatable) && !_phone.valid?
      end

      unless (_selfie = @selfie).nil?
        return false if _selfie.is_a?(OpenApi::Validatable) && !_selfie.valid?
      end

      unless (_verification_flow = @verification_flow).nil?
        return false if _verification_flow.to_s.size > MAX_LENGTH_FOR_VERIFICATION_FLOW
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_reference_id Object to be assigned
    def client_reference_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_reference_id", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
      end

      @client_reference_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_session Object to be assigned
    def verification_session=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("verification_session", new_value.to_s.size, MAX_LENGTH_FOR_VERIFICATION_SESSION)
      end

      @verification_session = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document Object to be assigned
    def document=(new_value : Stripe::GelatoDocumentReport?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @document = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(new_value : Stripe::GelatoEmailReport?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_number Object to be assigned
    def id_number=(new_value : Stripe::GelatoIdNumberReport?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @id_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] options Object to be assigned
    def options=(new_value : Stripe::GelatoVerificationReportOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone Object to be assigned
    def phone=(new_value : Stripe::GelatoPhoneReport?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @phone = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] selfie Object to be assigned
    def selfie=(new_value : Stripe::GelatoSelfieReport?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @selfie = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_flow Object to be assigned
    def verification_flow=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("verification_flow", new_value.to_s.size, MAX_LENGTH_FOR_VERIFICATION_FLOW)
      end

      @verification_flow = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@client_reference_id, @created, @id, @livemode, @object, @_type, @verification_session, @document, @email, @id_number, @options, @phone, @selfie, @verification_flow)
  end
end
