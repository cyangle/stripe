#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.  Each VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.  Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class IdentityVerificationReport
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["identity.verification_report"])

    @[JSON::Field(key: "options", type: GelatoVerificationReportOptions)]
    property options : GelatoVerificationReportOptions

    # Type of report.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["document", "id_number"])

    # Optional properties

    @[JSON::Field(key: "document", type: GelatoDocumentReport?, presence: true, ignore_serialize: document.nil? && !document_present?)]
    property document : GelatoDocumentReport?

    @[JSON::Field(ignore: true)]
    property? document_present : Bool = false

    @[JSON::Field(key: "id_number", type: GelatoIdNumberReport?, presence: true, ignore_serialize: id_number.nil? && !id_number_present?)]
    property id_number : GelatoIdNumberReport?

    @[JSON::Field(ignore: true)]
    property? id_number_present : Bool = false

    @[JSON::Field(key: "selfie", type: GelatoSelfieReport?, presence: true, ignore_serialize: selfie.nil? && !selfie_present?)]
    property selfie : GelatoSelfieReport?

    @[JSON::Field(ignore: true)]
    property? selfie_present : Bool = false

    # ID of the VerificationSession that created this report.
    @[JSON::Field(key: "verification_session", type: String?, presence: true, ignore_serialize: verification_session.nil? && !verification_session_present?)]
    getter verification_session : String?

    @[JSON::Field(ignore: true)]
    property? verification_session_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64,
      @id : String,
      @livemode : Bool,
      @object : String,
      @options : GelatoVerificationReportOptions,
      @_type : String,
      # Optional properties
      @document : GelatoDocumentReport? = nil,
      @id_number : GelatoIdNumberReport? = nil,
      @selfie : GelatoSelfieReport? = nil,
      @verification_session : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      if !@verification_session.nil? && @verification_session.to_s.size > 5000
        invalid_properties.push("invalid value for \"verification_session\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      return false if !@verification_session.nil? && @verification_session.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] verification_session Value to be assigned
    def verification_session=(verification_session : String?)
      if !verification_session.nil? && verification_session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"verification_session\", the character length must be smaller than or equal to 5000.")
      end

      @verification_session = verification_session
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @id, @livemode, @object, @options, @_type, @document, @document_present, @id_number, @id_number_present, @selfie, @selfie_present, @verification_session, @verification_session_present)
  end
end
