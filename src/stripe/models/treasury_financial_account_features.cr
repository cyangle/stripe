#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`. Stripe or the platform can control Features via the requested field.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TreasuryFinancialAccountFeatures
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["treasury.financial_account_features"])

    # Optional properties
    @[JSON::Field(key: "card_issuing", type: AccountServiceResourceToggleSettings?, presence: true, ignore_serialize: card_issuing.nil? && !card_issuing_present?)]
    property card_issuing : AccountServiceResourceToggleSettings?

    @[JSON::Field(ignore: true)]
    property? card_issuing_present : Bool = false

    @[JSON::Field(key: "deposit_insurance", type: AccountServiceResourceToggleSettings?, presence: true, ignore_serialize: deposit_insurance.nil? && !deposit_insurance_present?)]
    property deposit_insurance : AccountServiceResourceToggleSettings?

    @[JSON::Field(ignore: true)]
    property? deposit_insurance_present : Bool = false

    @[JSON::Field(key: "financial_addresses", type: AccountServiceResourceFinancialAddressesFeatures?, presence: true, ignore_serialize: financial_addresses.nil? && !financial_addresses_present?)]
    property financial_addresses : AccountServiceResourceFinancialAddressesFeatures?

    @[JSON::Field(ignore: true)]
    property? financial_addresses_present : Bool = false

    @[JSON::Field(key: "inbound_transfers", type: AccountServiceResourceInboundTransfers?, presence: true, ignore_serialize: inbound_transfers.nil? && !inbound_transfers_present?)]
    property inbound_transfers : AccountServiceResourceInboundTransfers?

    @[JSON::Field(ignore: true)]
    property? inbound_transfers_present : Bool = false

    @[JSON::Field(key: "intra_stripe_flows", type: AccountServiceResourceToggleSettings?, presence: true, ignore_serialize: intra_stripe_flows.nil? && !intra_stripe_flows_present?)]
    property intra_stripe_flows : AccountServiceResourceToggleSettings?

    @[JSON::Field(ignore: true)]
    property? intra_stripe_flows_present : Bool = false

    @[JSON::Field(key: "outbound_payments", type: AccountServiceResourceOutboundPayments?, presence: true, ignore_serialize: outbound_payments.nil? && !outbound_payments_present?)]
    property outbound_payments : AccountServiceResourceOutboundPayments?

    @[JSON::Field(ignore: true)]
    property? outbound_payments_present : Bool = false

    @[JSON::Field(key: "outbound_transfers", type: AccountServiceResourceOutboundTransfers?, presence: true, ignore_serialize: outbound_transfers.nil? && !outbound_transfers_present?)]
    property outbound_transfers : AccountServiceResourceOutboundTransfers?

    @[JSON::Field(ignore: true)]
    property? outbound_transfers_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @object : String, @card_issuing : AccountServiceResourceToggleSettings? = nil, @deposit_insurance : AccountServiceResourceToggleSettings? = nil, @financial_addresses : AccountServiceResourceFinancialAddressesFeatures? = nil, @inbound_transfers : AccountServiceResourceInboundTransfers? = nil, @intra_stripe_flows : AccountServiceResourceToggleSettings? = nil, @outbound_payments : AccountServiceResourceOutboundPayments? = nil, @outbound_transfers : AccountServiceResourceOutboundTransfers? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        card_issuing == o.card_issuing &&
        deposit_insurance == o.deposit_insurance &&
        financial_addresses == o.financial_addresses &&
        inbound_transfers == o.inbound_transfers &&
        intra_stripe_flows == o.intra_stripe_flows &&
        object == o.object &&
        outbound_payments == o.outbound_payments &&
        outbound_transfers == o.outbound_transfers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@card_issuing, @deposit_insurance, @financial_addresses, @inbound_transfers, @intra_stripe_flows, @object, @outbound_payments, @outbound_transfers)
  end
end
