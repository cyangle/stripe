#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./linked_account_options_param"
require "./mandate_options_param"
require "./network_options_param"
require "./networks_options_param"

module Stripe
  class SetupIntentPaymentMethodOptionsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The `transStatus` returned from the card Issuerâ€™s ACS in the ARes.
    @[JSON::Field(key: "ares_trans_status", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ares_trans_status : String? = nil
    ERROR_MESSAGE_FOR_ARES_TRANS_STATUS = "invalid value for \"ares_trans_status\", must be one of [A, C, I, N, R, U, Y]."
    VALID_VALUES_FOR_ARES_TRANS_STATUS  = String.static_array("A", "C", "I", "N", "R", "U", "Y")

    # The cryptogram, also known as the \"authentication value\" (AAV, CAVV or AEVV). This value is 20 bytes, base64-encoded into a 28-character string. (Most 3D Secure providers will return the base64-encoded version, which is what you should specify here.)
    @[JSON::Field(key: "cryptogram", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cryptogram : String? = nil
    MAX_LENGTH_FOR_CRYPTOGRAM = 5000

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil
    ERROR_MESSAGE_FOR_CURRENCY = "invalid value for \"currency\", must be one of [cad, usd]."
    VALID_VALUES_FOR_CURRENCY  = String.static_array("cad", "usd")

    # The Electronic Commerce Indicator (ECI) is returned by your 3D Secure provider and indicates what degree of authentication was performed.
    @[JSON::Field(key: "electronic_commerce_indicator", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter electronic_commerce_indicator : String? = nil
    ERROR_MESSAGE_FOR_ELECTRONIC_COMMERCE_INDICATOR = "invalid value for \"electronic_commerce_indicator\", must be one of [01, 02, 05, 06, 07]."
    VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR  = String.static_array("01", "02", "05", "06", "07")

    @[JSON::Field(key: "financial_connections", type: Stripe::LinkedAccountOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_connections : Stripe::LinkedAccountOptionsParam? = nil

    @[JSON::Field(key: "mandate_options", type: Stripe::MandateOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mandate_options : Stripe::MandateOptionsParam? = nil

    @[JSON::Field(key: "network_options", type: Stripe::NetworkOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter network_options : Stripe::NetworkOptionsParam? = nil

    @[JSON::Field(key: "networks", type: Stripe::NetworksOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter networks : Stripe::NetworksOptionsParam? = nil

    # [Deprecated] This is a legacy parameter that no longer has any function.
    @[JSON::Field(key: "persistent_token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter persistent_token : String? = nil
    MAX_LENGTH_FOR_PERSISTENT_TOKEN = 5000

    # The challenge indicator (`threeDSRequestorChallengeInd`) which was requested in the AReq sent to the card Issuer's ACS. A string containing 2 digits from 01-99.
    @[JSON::Field(key: "requestor_challenge_indicator", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter requestor_challenge_indicator : String? = nil
    MAX_LENGTH_FOR_REQUESTOR_CHALLENGE_INDICATOR = 2

    # For 3D Secure 1, the XID. For 3D Secure 2, the Directory Server Transaction ID (dsTransID).
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transaction_id : String? = nil
    MAX_LENGTH_FOR_TRANSACTION_ID = 5000

    # Bank account verification method.
    @[JSON::Field(key: "verification_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verification_method : String? = nil
    ERROR_MESSAGE_FOR_VERIFICATION_METHOD = "invalid value for \"verification_method\", must be one of [automatic, instant, microdeposits]."
    VALID_VALUES_FOR_VERIFICATION_METHOD  = String.static_array("automatic", "instant", "microdeposits")

    # The version of 3D Secure that was performed.
    @[JSON::Field(key: "version", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter version : String? = nil
    ERROR_MESSAGE_FOR_VERSION = "invalid value for \"version\", must be one of [1.0.2, 2.1.0, 2.2.0]."
    VALID_VALUES_FOR_VERSION  = String.static_array("1.0.2", "2.1.0", "2.2.0")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @ares_trans_status : String? = nil,
      @cryptogram : String? = nil,
      @currency : String? = nil,
      @electronic_commerce_indicator : String? = nil,
      @financial_connections : Stripe::LinkedAccountOptionsParam? = nil,
      @mandate_options : Stripe::MandateOptionsParam? = nil,
      @network_options : Stripe::NetworkOptionsParam? = nil,
      @networks : Stripe::NetworksOptionsParam? = nil,
      @persistent_token : String? = nil,
      @requestor_challenge_indicator : String? = nil,
      @transaction_id : String? = nil,
      @verification_method : String? = nil,
      @version : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_ares_trans_status = @ares_trans_status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ARES_TRANS_STATUS) unless OpenApi::EnumValidator.valid?(_ares_trans_status, VALID_VALUES_FOR_ARES_TRANS_STATUS)
      end
      unless (_cryptogram = @cryptogram).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cryptogram", _cryptogram.to_s.size, MAX_LENGTH_FOR_CRYPTOGRAM)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_currency = @currency).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CURRENCY) unless OpenApi::EnumValidator.valid?(_currency, VALID_VALUES_FOR_CURRENCY)
      end
      unless (_electronic_commerce_indicator = @electronic_commerce_indicator).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ELECTRONIC_COMMERCE_INDICATOR) unless OpenApi::EnumValidator.valid?(_electronic_commerce_indicator, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end
      unless (_financial_connections = @financial_connections).nil?
        invalid_properties.concat(_financial_connections.list_invalid_properties_for("financial_connections")) if _financial_connections.is_a?(OpenApi::Validatable)
      end
      unless (_mandate_options = @mandate_options).nil?
        invalid_properties.concat(_mandate_options.list_invalid_properties_for("mandate_options")) if _mandate_options.is_a?(OpenApi::Validatable)
      end
      unless (_network_options = @network_options).nil?
        invalid_properties.concat(_network_options.list_invalid_properties_for("network_options")) if _network_options.is_a?(OpenApi::Validatable)
      end
      unless (_networks = @networks).nil?
        invalid_properties.concat(_networks.list_invalid_properties_for("networks")) if _networks.is_a?(OpenApi::Validatable)
      end
      unless (_persistent_token = @persistent_token).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("persistent_token", _persistent_token.to_s.size, MAX_LENGTH_FOR_PERSISTENT_TOKEN)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_requestor_challenge_indicator = @requestor_challenge_indicator).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("requestor_challenge_indicator", _requestor_challenge_indicator.to_s.size, MAX_LENGTH_FOR_REQUESTOR_CHALLENGE_INDICATOR)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_transaction_id = @transaction_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transaction_id", _transaction_id.to_s.size, MAX_LENGTH_FOR_TRANSACTION_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_verification_method = @verification_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_VERIFICATION_METHOD) unless OpenApi::EnumValidator.valid?(_verification_method, VALID_VALUES_FOR_VERIFICATION_METHOD)
      end
      unless (_version = @version).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_VERSION) unless OpenApi::EnumValidator.valid?(_version, VALID_VALUES_FOR_VERSION)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_ares_trans_status = @ares_trans_status).nil?
        return false unless OpenApi::EnumValidator.valid?(_ares_trans_status, VALID_VALUES_FOR_ARES_TRANS_STATUS)
      end

      unless (_cryptogram = @cryptogram).nil?
        return false if _cryptogram.to_s.size > MAX_LENGTH_FOR_CRYPTOGRAM
      end

      unless (_currency = @currency).nil?
        return false unless OpenApi::EnumValidator.valid?(_currency, VALID_VALUES_FOR_CURRENCY)
      end

      unless (_electronic_commerce_indicator = @electronic_commerce_indicator).nil?
        return false unless OpenApi::EnumValidator.valid?(_electronic_commerce_indicator, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end

      unless (_financial_connections = @financial_connections).nil?
        return false if _financial_connections.is_a?(OpenApi::Validatable) && !_financial_connections.valid?
      end

      unless (_mandate_options = @mandate_options).nil?
        return false if _mandate_options.is_a?(OpenApi::Validatable) && !_mandate_options.valid?
      end

      unless (_network_options = @network_options).nil?
        return false if _network_options.is_a?(OpenApi::Validatable) && !_network_options.valid?
      end

      unless (_networks = @networks).nil?
        return false if _networks.is_a?(OpenApi::Validatable) && !_networks.valid?
      end

      unless (_persistent_token = @persistent_token).nil?
        return false if _persistent_token.to_s.size > MAX_LENGTH_FOR_PERSISTENT_TOKEN
      end

      unless (_requestor_challenge_indicator = @requestor_challenge_indicator).nil?
        return false if _requestor_challenge_indicator.to_s.size > MAX_LENGTH_FOR_REQUESTOR_CHALLENGE_INDICATOR
      end

      unless (_transaction_id = @transaction_id).nil?
        return false if _transaction_id.to_s.size > MAX_LENGTH_FOR_TRANSACTION_ID
      end

      unless (_verification_method = @verification_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_verification_method, VALID_VALUES_FOR_VERIFICATION_METHOD)
      end

      unless (_version = @version).nil?
        return false unless OpenApi::EnumValidator.valid?(_version, VALID_VALUES_FOR_VERSION)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ares_trans_status Object to be assigned
    def ares_trans_status=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("ares_trans_status", new_value, VALID_VALUES_FOR_ARES_TRANS_STATUS)
      end

      @ares_trans_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cryptogram Object to be assigned
    def cryptogram=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cryptogram", new_value.to_s.size, MAX_LENGTH_FOR_CRYPTOGRAM)
      end

      @cryptogram = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("currency", new_value, VALID_VALUES_FOR_CURRENCY)
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] electronic_commerce_indicator Object to be assigned
    def electronic_commerce_indicator=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("electronic_commerce_indicator", new_value, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end

      @electronic_commerce_indicator = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_connections Object to be assigned
    def financial_connections=(new_value : Stripe::LinkedAccountOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @financial_connections = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate_options Object to be assigned
    def mandate_options=(new_value : Stripe::MandateOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mandate_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_options Object to be assigned
    def network_options=(new_value : Stripe::NetworkOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @network_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] networks Object to be assigned
    def networks=(new_value : Stripe::NetworksOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @networks = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] persistent_token Object to be assigned
    def persistent_token=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("persistent_token", new_value.to_s.size, MAX_LENGTH_FOR_PERSISTENT_TOKEN)
      end

      @persistent_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] requestor_challenge_indicator Object to be assigned
    def requestor_challenge_indicator=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("requestor_challenge_indicator", new_value.to_s.size, MAX_LENGTH_FOR_REQUESTOR_CHALLENGE_INDICATOR)
      end

      @requestor_challenge_indicator = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("transaction_id", new_value.to_s.size, MAX_LENGTH_FOR_TRANSACTION_ID)
      end

      @transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_method Object to be assigned
    def verification_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("verification_method", new_value, VALID_VALUES_FOR_VERIFICATION_METHOD)
      end

      @verification_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("version", new_value, VALID_VALUES_FOR_VERSION)
      end

      @version = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@ares_trans_status, @cryptogram, @currency, @electronic_commerce_indicator, @financial_connections, @mandate_options, @network_options, @networks, @persistent_token, @requestor_challenge_indicator, @transaction_id, @verification_method, @version)
  end
end
