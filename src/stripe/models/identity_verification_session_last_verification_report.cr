#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./gelato_document_report"
require "./gelato_email_report"
require "./gelato_id_number_report"
require "./gelato_phone_report"
require "./gelato_selfie_report"
require "./gelato_verification_report_options"
require "./identity_verification_report"

module Stripe
  # ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
  class IdentityVerificationSessionLastVerificationReport
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    @[JSON::Field(key: "client_reference_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property client_reference_id : String? = nil
    MAX_LENGTH_FOR_CLIENT_REFERENCE_ID = 5000

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [identity.verification_report]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("identity.verification_report")

    # Type of report.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [document, id_number, verification_flow]."
    VALID_VALUES_FOR__TYPE  = String.static_array("document", "id_number", "verification_flow")

    # ID of the VerificationSession that created this report.
    @[JSON::Field(key: "verification_session", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property verification_session : String? = nil
    MAX_LENGTH_FOR_VERIFICATION_SESSION = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "document", type: Stripe::GelatoDocumentReport?, default: nil, required: false, nullable: false, emit_null: false)]
    property document : Stripe::GelatoDocumentReport? = nil

    @[JSON::Field(key: "email", type: Stripe::GelatoEmailReport?, default: nil, required: false, nullable: false, emit_null: false)]
    property email : Stripe::GelatoEmailReport? = nil

    @[JSON::Field(key: "id_number", type: Stripe::GelatoIdNumberReport?, default: nil, required: false, nullable: false, emit_null: false)]
    property id_number : Stripe::GelatoIdNumberReport? = nil

    @[JSON::Field(key: "options", type: Stripe::GelatoVerificationReportOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    property options : Stripe::GelatoVerificationReportOptions? = nil

    @[JSON::Field(key: "phone", type: Stripe::GelatoPhoneReport?, default: nil, required: false, nullable: false, emit_null: false)]
    property phone : Stripe::GelatoPhoneReport? = nil

    @[JSON::Field(key: "selfie", type: Stripe::GelatoSelfieReport?, default: nil, required: false, nullable: false, emit_null: false)]
    property selfie : Stripe::GelatoSelfieReport? = nil

    # The configuration token of a Verification Flow from the dashboard.
    @[JSON::Field(key: "verification_flow", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property verification_flow : String? = nil
    MAX_LENGTH_FOR_VERIFICATION_FLOW = 5000

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::IdentityVerificationReport,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @client_reference_id : String? = nil,
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @_type : String? = nil,
      @verification_session : String? = nil,
      # Optional properties
      @document : Stripe::GelatoDocumentReport? = nil,
      @email : Stripe::GelatoEmailReport? = nil,
      @id_number : Stripe::GelatoIdNumberReport? = nil,
      @options : Stripe::GelatoVerificationReportOptions? = nil,
      @phone : Stripe::GelatoPhoneReport? = nil,
      @selfie : Stripe::GelatoSelfieReport? = nil,
      @verification_flow : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@client_reference_id, @created, @id, @livemode, @object, @_type, @verification_session, @document, @email, @id_number, @options, @phone, @selfie, @verification_flow)
  end
end
