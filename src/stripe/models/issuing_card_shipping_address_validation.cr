#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./address"

module Stripe
  #
  class IssuingCardShippingAddressValidation
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The address validation capabilities to use.
    @[JSON::Field(key: "mode", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter mode : String? = nil
    ERROR_MESSAGE_FOR_MODE = "invalid value for \"mode\", must be one of [disabled, normalization_only, validation_and_normalization]."
    VALID_VALUES_FOR_MODE  = String.static_array("disabled", "normalization_only", "validation_and_normalization")

    @[JSON::Field(key: "normalized_address", type: Stripe::Address?, default: nil, required: true, nullable: true, emit_null: true)]
    getter normalized_address : Stripe::Address? = nil

    # The validation result for the shipping address.
    @[JSON::Field(key: "result", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter result : String? = nil
    ERROR_MESSAGE_FOR_RESULT = "invalid value for \"result\", must be one of [indeterminate, likely_deliverable, likely_undeliverable]."
    VALID_VALUES_FOR_RESULT  = String.static_array("indeterminate", "likely_deliverable", "likely_undeliverable")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @mode : String? = nil,
      @normalized_address : Stripe::Address? = nil,
      @result : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"mode\" is required and cannot be null") if @mode.nil?

      unless (_mode = @mode).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_MODE) unless OpenApi::EnumValidator.valid?(_mode, VALID_VALUES_FOR_MODE)
      end
      unless (_normalized_address = @normalized_address).nil?
        invalid_properties.concat(_normalized_address.list_invalid_properties_for("normalized_address")) if _normalized_address.is_a?(OpenApi::Validatable)
      end
      unless (_result = @result).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_RESULT) unless OpenApi::EnumValidator.valid?(_result, VALID_VALUES_FOR_RESULT)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @mode.nil?
      unless (_mode = @mode).nil?
        return false unless OpenApi::EnumValidator.valid?(_mode, VALID_VALUES_FOR_MODE)
      end

      unless (_normalized_address = @normalized_address).nil?
        return false if _normalized_address.is_a?(OpenApi::Validatable) && !_normalized_address.valid?
      end

      unless (_result = @result).nil?
        return false unless OpenApi::EnumValidator.valid?(_result, VALID_VALUES_FOR_RESULT)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(new_value : String?)
      raise ArgumentError.new("\"mode\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("mode", new_value, VALID_VALUES_FOR_MODE)
      end

      @mode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] normalized_address Object to be assigned
    def normalized_address=(new_value : Stripe::Address?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @normalized_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result Object to be assigned
    def result=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("result", new_value, VALID_VALUES_FOR_RESULT)
      end

      @result = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@mode, @normalized_address, @result)
  end
end
