#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Level3LineItems
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "discount_amount", type: Int64?, presence: true, ignore_serialize: discount_amount.nil? && !discount_amount_present?)]
    property discount_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? discount_amount_present : Bool = false

    @[JSON::Field(key: "product_code", type: String)]
    getter product_code : String

    @[JSON::Field(key: "product_description", type: String)]
    getter product_description : String

    @[JSON::Field(key: "quantity", type: Int64?, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    property quantity : Int64?

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    @[JSON::Field(key: "tax_amount", type: Int64?, presence: true, ignore_serialize: tax_amount.nil? && !tax_amount_present?)]
    property tax_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? tax_amount_present : Bool = false

    @[JSON::Field(key: "unit_cost", type: Int64?, presence: true, ignore_serialize: unit_cost.nil? && !unit_cost_present?)]
    property unit_cost : Int64?

    @[JSON::Field(ignore: true)]
    property? unit_cost_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @discount_amount : Int64?, @product_code : String, @product_description : String, @quantity : Int64?, @tax_amount : Int64?, @unit_cost : Int64?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @product_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"product_code\", the character length must be smaller than or equal to 5000.")
      end

      if @product_description.to_s.size > 5000
        invalid_properties.push("invalid value for \"product_description\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @product_code.to_s.size > 5000
      return false if @product_description.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] product_code Value to be assigned
    def product_code=(product_code)
      if product_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product_code\", the character length must be smaller than or equal to 5000.")
      end

      @product_code = product_code
    end

    # Custom attribute writer method with validation
    # @param [Object] product_description Value to be assigned
    def product_description=(product_description)
      if product_description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product_description\", the character length must be smaller than or equal to 5000.")
      end

      @product_description = product_description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        discount_amount == o.discount_amount &&
        product_code == o.product_code &&
        product_description == o.product_description &&
        quantity == o.quantity &&
        tax_amount == o.tax_amount &&
        unit_cost == o.unit_cost
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@discount_amount, @product_code, @product_description, @quantity, @tax_amount, @unit_cost)
  end
end
