#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_authorization_amount_details"

module Stripe
  #
  class IssuingAuthorizationPendingRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    @[JSON::Field(key: "amount_details", type: Stripe::IssuingAuthorizationAmountDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_details : Stripe::IssuingAuthorizationAmountDetails? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    @[JSON::Field(key: "is_amount_controllable", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_amount_controllable : Bool? = nil

    # The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "merchant_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter merchant_amount : Int64? = nil

    # The local currency the merchant is requesting to authorize.
    @[JSON::Field(key: "merchant_currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter merchant_currency : String? = nil

    # The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
    @[JSON::Field(key: "network_risk_score", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter network_risk_score : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_details : Stripe::IssuingAuthorizationAmountDetails? = nil,
      @currency : String? = nil,
      @is_amount_controllable : Bool? = nil,
      @merchant_amount : Int64? = nil,
      @merchant_currency : String? = nil,
      @network_risk_score : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount_details = @amount_details).nil?
        invalid_properties.concat(_amount_details.list_invalid_properties_for("amount_details")) if _amount_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"is_amount_controllable\" is required and cannot be null") if @is_amount_controllable.nil?

      invalid_properties.push("\"merchant_amount\" is required and cannot be null") if @merchant_amount.nil?

      invalid_properties.push("\"merchant_currency\" is required and cannot be null") if @merchant_currency.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      unless (_amount_details = @amount_details).nil?
        return false if _amount_details.is_a?(OpenApi::Validatable) && !_amount_details.valid?
      end

      return false if @currency.nil?

      return false if @is_amount_controllable.nil?

      return false if @merchant_amount.nil?

      return false if @merchant_currency.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_details Object to be assigned
    def amount_details=(new_value : Stripe::IssuingAuthorizationAmountDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amount_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_amount_controllable Object to be assigned
    def is_amount_controllable=(new_value : Bool?)
      raise ArgumentError.new("\"is_amount_controllable\" is required and cannot be null") if new_value.nil?

      @is_amount_controllable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_amount Object to be assigned
    def merchant_amount=(new_value : Int64?)
      raise ArgumentError.new("\"merchant_amount\" is required and cannot be null") if new_value.nil?

      @merchant_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_currency Object to be assigned
    def merchant_currency=(new_value : String?)
      raise ArgumentError.new("\"merchant_currency\" is required and cannot be null") if new_value.nil?

      @merchant_currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_risk_score Object to be assigned
    def network_risk_score=(new_value : Int64?)
      @network_risk_score = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_details, @currency, @is_amount_controllable, @merchant_amount, @merchant_currency, @network_risk_score)
  end
end
