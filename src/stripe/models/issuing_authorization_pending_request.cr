#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class IssuingAuthorizationPendingRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    @[JSON::Field(key: "is_amount_controllable", type: Bool)]
    property is_amount_controllable : Bool

    # The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    @[JSON::Field(key: "merchant_amount", type: Int64)]
    property merchant_amount : Int64

    # The local currency the merchant is requesting to authorize.
    @[JSON::Field(key: "merchant_currency", type: String)]
    property merchant_currency : String

    # Optional properties

    @[JSON::Field(key: "amount_details", type: IssuingAuthorizationAmountDetails1?, presence: true, ignore_serialize: amount_details.nil? && !amount_details_present?)]
    property amount_details : IssuingAuthorizationAmountDetails1?

    @[JSON::Field(ignore: true)]
    property? amount_details_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64,
      @currency : String,
      @is_amount_controllable : Bool,
      @merchant_amount : Int64,
      @merchant_currency : String,
      # Optional properties
      @amount_details : IssuingAuthorizationAmountDetails1? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @is_amount_controllable, @merchant_amount, @merchant_currency, @amount_details, @amount_details_present)
  end
end
