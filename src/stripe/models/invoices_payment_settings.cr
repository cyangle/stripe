#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class InvoicesPaymentSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set.
    @[JSON::Field(key: "default_mandate", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_mandate.nil? && !default_mandate_present?)]
    getter default_mandate : String? = nil

    @[JSON::Field(ignore: true)]
    property? default_mandate_present : Bool = false

    @[JSON::Field(key: "payment_method_options", type: Stripe::InvoicesPaymentSettingsPaymentMethodOptions?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method_options.nil? && !payment_method_options_present?)]
    getter payment_method_options : Stripe::InvoicesPaymentSettingsPaymentMethodOptions? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_options_present : Bool = false

    # The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method_types.nil? && !payment_method_types_present?)]
    getter payment_method_types : Array(String)? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_types_present : Bool = false

    ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES = EnumValidator.new("payment_method_types", "Array(String)", ["ach_credit_transfer", "ach_debit", "acss_debit", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "customer_balance", "fpx", "giropay", "grabpay", "ideal", "konbini", "link", "paynow", "promptpay", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @default_mandate : String? = nil,
      @payment_method_options : Stripe::InvoicesPaymentSettingsPaymentMethodOptions? = nil,
      @payment_method_types : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _default_mandate = @default_mandate
        if _default_mandate.to_s.size > 5000
          invalid_properties.push("invalid value for \"default_mandate\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _payment_method_options = @payment_method_options
        if _payment_method_options.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_payment_method_options.list_invalid_properties_for("payment_method_options"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.error_message) unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid?(@payment_method_types)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _default_mandate = @default_mandate
        return false if _default_mandate.to_s.size > 5000
      end
      if _payment_method_options = @payment_method_options
        if _payment_method_options.is_a?(OpenApi::Validatable)
          return false unless _payment_method_options.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid?(@payment_method_types)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_mandate Object to be assigned
    def default_mandate=(default_mandate : String?)
      if default_mandate.nil?
        return @default_mandate = nil
      end
      _default_mandate = default_mandate.not_nil!
      if _default_mandate.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_mandate\", the character length must be smaller than or equal to 5000.")
      end

      @default_mandate = _default_mandate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(payment_method_options : Stripe::InvoicesPaymentSettingsPaymentMethodOptions?)
      if payment_method_options.nil?
        return @payment_method_options = nil
      end
      _payment_method_options = payment_method_options.not_nil!
      if _payment_method_options.is_a?(OpenApi::Validatable)
        _payment_method_options.validate
      end
      @payment_method_options = _payment_method_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(payment_method_types : Array(String)?)
      if payment_method_types.nil?
        return @payment_method_types = nil
      end
      _payment_method_types = payment_method_types.not_nil!
      ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid!(_payment_method_types)
      @payment_method_types = _payment_method_types
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@default_mandate, @default_mandate_present, @payment_method_options, @payment_method_options_present, @payment_method_types, @payment_method_types_present)
  end
end
