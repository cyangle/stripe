#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class DisputePaymentMethodDetailsPaypal
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the dispute in PayPal.
    @[JSON::Field(key: "case_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter case_id : String? = nil
    MAX_LENGTH_FOR_CASE_ID = 5000

    # The reason for the dispute as defined by PayPal
    @[JSON::Field(key: "reason_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter reason_code : String? = nil
    MAX_LENGTH_FOR_REASON_CODE = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @case_id : String? = nil,
      @reason_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_case_id = @case_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("case_id", _case_id.to_s.size, MAX_LENGTH_FOR_CASE_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_reason_code = @reason_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reason_code", _reason_code.to_s.size, MAX_LENGTH_FOR_REASON_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_case_id = @case_id).nil?
        return false if _case_id.to_s.size > MAX_LENGTH_FOR_CASE_ID
      end

      unless (_reason_code = @reason_code).nil?
        return false if _reason_code.to_s.size > MAX_LENGTH_FOR_REASON_CODE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] case_id Object to be assigned
    def case_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("case_id", new_value.to_s.size, MAX_LENGTH_FOR_CASE_ID)
      end

      @case_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason_code Object to be assigned
    def reason_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("reason_code", new_value.to_s.size, MAX_LENGTH_FOR_REASON_CODE)
      end

      @reason_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@case_id, @reason_code)
  end
end
