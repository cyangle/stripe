#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./fleet_cardholder_prompt_data_specs"
require "./fleet_reported_breakdown_specs"

module Stripe
  class FleetSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "cardholder_prompt_data", type: Stripe::FleetCardholderPromptDataSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cardholder_prompt_data : Stripe::FleetCardholderPromptDataSpecs? = nil

    # The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`.
    @[JSON::Field(key: "purchase_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter purchase_type : String? = nil
    MAX_LENGTH_FOR_PURCHASE_TYPE    = 5000
    ERROR_MESSAGE_FOR_PURCHASE_TYPE = "invalid value for \"purchase_type\", must be one of [fuel_and_non_fuel_purchase, fuel_purchase, non_fuel_purchase]."
    VALID_VALUES_FOR_PURCHASE_TYPE  = String.static_array("fuel_and_non_fuel_purchase", "fuel_purchase", "non_fuel_purchase")

    @[JSON::Field(key: "reported_breakdown", type: Stripe::FleetReportedBreakdownSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter reported_breakdown : Stripe::FleetReportedBreakdownSpecs? = nil

    # The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`.
    @[JSON::Field(key: "service_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter service_type : String? = nil
    MAX_LENGTH_FOR_SERVICE_TYPE    = 5000
    ERROR_MESSAGE_FOR_SERVICE_TYPE = "invalid value for \"service_type\", must be one of [full_service, non_fuel_transaction, self_service]."
    VALID_VALUES_FOR_SERVICE_TYPE  = String.static_array("full_service", "non_fuel_transaction", "self_service")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @cardholder_prompt_data : Stripe::FleetCardholderPromptDataSpecs? = nil,
      @purchase_type : String? = nil,
      @reported_breakdown : Stripe::FleetReportedBreakdownSpecs? = nil,
      @service_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_cardholder_prompt_data = @cardholder_prompt_data).nil?
        invalid_properties.concat(_cardholder_prompt_data.list_invalid_properties_for("cardholder_prompt_data")) if _cardholder_prompt_data.is_a?(OpenApi::Validatable)
      end
      unless (_purchase_type = @purchase_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PURCHASE_TYPE) unless OpenApi::EnumValidator.valid?(_purchase_type, VALID_VALUES_FOR_PURCHASE_TYPE)
      end
      unless (_reported_breakdown = @reported_breakdown).nil?
        invalid_properties.concat(_reported_breakdown.list_invalid_properties_for("reported_breakdown")) if _reported_breakdown.is_a?(OpenApi::Validatable)
      end
      unless (_service_type = @service_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SERVICE_TYPE) unless OpenApi::EnumValidator.valid?(_service_type, VALID_VALUES_FOR_SERVICE_TYPE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_cardholder_prompt_data = @cardholder_prompt_data).nil?
        return false if _cardholder_prompt_data.is_a?(OpenApi::Validatable) && !_cardholder_prompt_data.valid?
      end

      unless (_purchase_type = @purchase_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_purchase_type, VALID_VALUES_FOR_PURCHASE_TYPE)
      end

      unless (_reported_breakdown = @reported_breakdown).nil?
        return false if _reported_breakdown.is_a?(OpenApi::Validatable) && !_reported_breakdown.valid?
      end

      unless (_service_type = @service_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_service_type, VALID_VALUES_FOR_SERVICE_TYPE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cardholder_prompt_data Object to be assigned
    def cardholder_prompt_data=(new_value : Stripe::FleetCardholderPromptDataSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cardholder_prompt_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] purchase_type Object to be assigned
    def purchase_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("purchase_type", new_value, VALID_VALUES_FOR_PURCHASE_TYPE)
      end

      @purchase_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reported_breakdown Object to be assigned
    def reported_breakdown=(new_value : Stripe::FleetReportedBreakdownSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @reported_breakdown = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_type Object to be assigned
    def service_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("service_type", new_value, VALID_VALUES_FOR_SERVICE_TYPE)
      end

      @service_type = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@cardholder_prompt_data, @purchase_type, @reported_breakdown, @service_type)
  end
end
