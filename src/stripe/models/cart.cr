#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Cart
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Cart
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # Array of line items that were purchased.
    @[JSON::Field(key: "line_items", type: Array(LineItem1))]
    property line_items : Array(LineItem1)

    # Total balance of cart due in cents.
    @[JSON::Field(key: "total", type: Int64)]
    property total : Int64

    # Optional properties
    # The amount of tax in cents.
    @[JSON::Field(key: "tax", type: Int64?, presence: true, ignore_serialize: tax.nil? && !tax_present?)]
    property tax : Int64?

    @[JSON::Field(ignore: true)]
    property? tax_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @currency : String, @line_items : Array(LineItem1), @total : Int64, @tax : Int64? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        currency == o.currency &&
        line_items == o.line_items &&
        tax == o.tax &&
        total == o.total
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@currency, @line_items, @tax, @total)
  end
end
