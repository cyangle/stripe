#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentNextActionPromptpayDisplayQrCode
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # The raw data string used to generate QR code, it should be used together with QR code library.
    @[JSON::Field(key: "data", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter data : String? = nil

    # The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code.
    @[JSON::Field(key: "hosted_instructions_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter hosted_instructions_url : String? = nil

    # The image_url_png string used to render QR code, can be used as <img src=\"…\" />
    @[JSON::Field(key: "image_url_png", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter image_url_png : String? = nil

    # The image_url_svg string used to render QR code, can be used as <img src=\"…\" />
    @[JSON::Field(key: "image_url_svg", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter image_url_svg : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @data : String? = nil,
      @hosted_instructions_url : String? = nil,
      @image_url_png : String? = nil,
      @image_url_svg : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"data\" is required and cannot be null") if @data.nil?
      if _data = @data
        if _data.to_s.size > 5000
          invalid_properties.push("invalid value for \"data\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"hosted_instructions_url\" is required and cannot be null") if @hosted_instructions_url.nil?
      if _hosted_instructions_url = @hosted_instructions_url
        if _hosted_instructions_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"hosted_instructions_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"image_url_png\" is required and cannot be null") if @image_url_png.nil?
      if _image_url_png = @image_url_png
        if _image_url_png.to_s.size > 5000
          invalid_properties.push("invalid value for \"image_url_png\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"image_url_svg\" is required and cannot be null") if @image_url_svg.nil?
      if _image_url_svg = @image_url_svg
        if _image_url_svg.to_s.size > 5000
          invalid_properties.push("invalid value for \"image_url_svg\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @data.nil?
      if _data = @data
        return false if _data.to_s.size > 5000
      end
      return false if @hosted_instructions_url.nil?
      if _hosted_instructions_url = @hosted_instructions_url
        return false if _hosted_instructions_url.to_s.size > 5000
      end
      return false if @image_url_png.nil?
      if _image_url_png = @image_url_png
        return false if _image_url_png.to_s.size > 5000
      end
      return false if @image_url_svg.nil?
      if _image_url_svg = @image_url_svg
        return false if _image_url_svg.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data Object to be assigned
    def data=(data : String?)
      if data.nil?
        raise ArgumentError.new("\"data\" is required and cannot be null")
      end
      _data = data.not_nil!
      if _data.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"data\", the character length must be smaller than or equal to 5000.")
      end

      @data = _data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_instructions_url Object to be assigned
    def hosted_instructions_url=(hosted_instructions_url : String?)
      if hosted_instructions_url.nil?
        raise ArgumentError.new("\"hosted_instructions_url\" is required and cannot be null")
      end
      _hosted_instructions_url = hosted_instructions_url.not_nil!
      if _hosted_instructions_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"hosted_instructions_url\", the character length must be smaller than or equal to 5000.")
      end

      @hosted_instructions_url = _hosted_instructions_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] image_url_png Object to be assigned
    def image_url_png=(image_url_png : String?)
      if image_url_png.nil?
        raise ArgumentError.new("\"image_url_png\" is required and cannot be null")
      end
      _image_url_png = image_url_png.not_nil!
      if _image_url_png.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"image_url_png\", the character length must be smaller than or equal to 5000.")
      end

      @image_url_png = _image_url_png
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] image_url_svg Object to be assigned
    def image_url_svg=(image_url_svg : String?)
      if image_url_svg.nil?
        raise ArgumentError.new("\"image_url_svg\" is required and cannot be null")
      end
      _image_url_svg = image_url_svg.not_nil!
      if _image_url_svg.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"image_url_svg\", the character length must be smaller than or equal to 5000.")
      end

      @image_url_svg = _image_url_svg
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@data, @hosted_instructions_url, @image_url_png, @image_url_svg)
  end
end
