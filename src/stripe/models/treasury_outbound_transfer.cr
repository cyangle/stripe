#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Use OutboundTransfers to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.  Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
  class TreasuryOutboundTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Amount (in cents) transferred.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Returns `true` if the object can be canceled, and `false` otherwise.
    @[JSON::Field(key: "cancelable", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cancelable : Bool? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    @[JSON::Field(key: "destination_payment_method_details", type: Stripe::OutboundTransfersPaymentMethodDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter destination_payment_method_details : Stripe::OutboundTransfersPaymentMethodDetails? = nil

    # The date when funds are expected to arrive in the destination account.
    @[JSON::Field(key: "expected_arrival_date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expected_arrival_date : Int64? = nil

    # The FinancialAccount that funds were pulled from.
    @[JSON::Field(key: "financial_account", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter financial_account : String? = nil
    MAX_LENGTH_FOR_FINANCIAL_ACCOUNT = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [treasury.outbound_transfer]."
    VALID_VALUES_FOR_OBJECT  = StaticArray["treasury.outbound_transfer"]

    # Information about the OutboundTransfer to be sent to the recipient account.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been \"confirmed\" and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [canceled, failed, posted, processing, returned]."
    VALID_VALUES_FOR_STATUS  = StaticArray["canceled", "failed", "posted", "processing", "returned"]

    @[JSON::Field(key: "status_transitions", type: Stripe::TreasuryOutboundTransfersResourceStatusTransitions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status_transitions : Stripe::TreasuryOutboundTransfersResourceStatusTransitions? = nil

    @[JSON::Field(key: "transaction", type: Stripe::TreasuryOutboundPaymentTransaction?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction : Stripe::TreasuryOutboundPaymentTransaction? = nil

    # Optional properties

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The PaymentMethod used as the payment instrument for an OutboundTransfer.
    @[JSON::Field(key: "destination_payment_method", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: destination_payment_method.nil? && !destination_payment_method_present?)]
    getter destination_payment_method : String? = nil
    MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD = 5000

    @[JSON::Field(ignore: true)]
    property? destination_payment_method_present : Bool = false

    # A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
    @[JSON::Field(key: "hosted_regulatory_receipt_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: hosted_regulatory_receipt_url.nil? && !hosted_regulatory_receipt_url_present?)]
    getter hosted_regulatory_receipt_url : String? = nil
    MAX_LENGTH_FOR_HOSTED_REGULATORY_RECEIPT_URL = 5000

    @[JSON::Field(ignore: true)]
    property? hosted_regulatory_receipt_url_present : Bool = false

    @[JSON::Field(key: "returned_details", type: Stripe::TreasuryOutboundTransferReturnedDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: returned_details.nil? && !returned_details_present?)]
    getter returned_details : Stripe::TreasuryOutboundTransferReturnedDetails? = nil

    @[JSON::Field(ignore: true)]
    property? returned_details_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @cancelable : Bool? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @destination_payment_method_details : Stripe::OutboundTransfersPaymentMethodDetails? = nil,
      @expected_arrival_date : Int64? = nil,
      @financial_account : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @statement_descriptor : String? = nil,
      @status : String? = nil,
      @status_transitions : Stripe::TreasuryOutboundTransfersResourceStatusTransitions? = nil,
      @transaction : Stripe::TreasuryOutboundPaymentTransaction? = nil,
      # Optional properties
      @description : String? = nil,
      @destination_payment_method : String? = nil,
      @hosted_regulatory_receipt_url : String? = nil,
      @returned_details : Stripe::TreasuryOutboundTransferReturnedDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"cancelable\" is required and cannot be null") if @cancelable.nil?

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"destination_payment_method_details\" is required and cannot be null") if @destination_payment_method_details.nil?

      if _destination_payment_method_details = @destination_payment_method_details
        invalid_properties.concat(_destination_payment_method_details.list_invalid_properties_for("destination_payment_method_details")) if _destination_payment_method_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"expected_arrival_date\" is required and cannot be null") if @expected_arrival_date.nil?

      invalid_properties.push("\"financial_account\" is required and cannot be null") if @financial_account.nil?

      if _financial_account = @financial_account
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("financial_account", _financial_account.to_s.size, MAX_LENGTH_FOR_FINANCIAL_ACCOUNT)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      if _id = @id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      if _object = @object
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"statement_descriptor\" is required and cannot be null") if @statement_descriptor.nil?

      if _statement_descriptor = @statement_descriptor
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      if _status = @status
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"status_transitions\" is required and cannot be null") if @status_transitions.nil?

      if _status_transitions = @status_transitions
        invalid_properties.concat(_status_transitions.list_invalid_properties_for("status_transitions")) if _status_transitions.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"transaction\" is required and cannot be null") if @transaction.nil?

      if _transaction = @transaction
        invalid_properties.concat(_transaction.list_invalid_properties_for("transaction")) if _transaction.is_a?(OpenApi::Validatable)
      end
      if _description = @description
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      if _destination_payment_method = @destination_payment_method
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("destination_payment_method", _destination_payment_method.to_s.size, MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD)
          invalid_properties.push(max_length_error)
        end
      end
      if _hosted_regulatory_receipt_url = @hosted_regulatory_receipt_url
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("hosted_regulatory_receipt_url", _hosted_regulatory_receipt_url.to_s.size, MAX_LENGTH_FOR_HOSTED_REGULATORY_RECEIPT_URL)
          invalid_properties.push(max_length_error)
        end
      end
      if _returned_details = @returned_details
        invalid_properties.concat(_returned_details.list_invalid_properties_for("returned_details")) if _returned_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @cancelable.nil?

      return false if @created.nil?

      return false if @currency.nil?

      return false if @destination_payment_method_details.nil?
      if _destination_payment_method_details = @destination_payment_method_details
        return false if _destination_payment_method_details.is_a?(OpenApi::Validatable) && !_destination_payment_method_details.valid?
      end

      return false if @expected_arrival_date.nil?

      return false if @financial_account.nil?
      if _financial_account = @financial_account
        return false if _financial_account.to_s.size > MAX_LENGTH_FOR_FINANCIAL_ACCOUNT
      end

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      if _object = @object
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @statement_descriptor.nil?
      if _statement_descriptor = @statement_descriptor
        return false if _statement_descriptor.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR
      end

      return false if @status.nil?
      if _status = @status
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @status_transitions.nil?
      if _status_transitions = @status_transitions
        return false if _status_transitions.is_a?(OpenApi::Validatable) && !_status_transitions.valid?
      end

      return false if @transaction.nil?
      if _transaction = @transaction
        return false if _transaction.is_a?(OpenApi::Validatable) && !_transaction.valid?
      end

      if _description = @description
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      if _destination_payment_method = @destination_payment_method
        return false if _destination_payment_method.to_s.size > MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD
      end

      if _hosted_regulatory_receipt_url = @hosted_regulatory_receipt_url
        return false if _hosted_regulatory_receipt_url.to_s.size > MAX_LENGTH_FOR_HOSTED_REGULATORY_RECEIPT_URL
      end

      if _returned_details = @returned_details
        return false if _returned_details.is_a?(OpenApi::Validatable) && !_returned_details.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        raise ArgumentError.new("\"amount\" is required and cannot be null")
      end
      _amount = amount.not_nil!
      @amount = _amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancelable Object to be assigned
    def cancelable=(cancelable : Bool?)
      if cancelable.nil?
        raise ArgumentError.new("\"cancelable\" is required and cannot be null")
      end
      _cancelable = cancelable.not_nil!
      @cancelable = _cancelable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination_payment_method_details Object to be assigned
    def destination_payment_method_details=(destination_payment_method_details : Stripe::OutboundTransfersPaymentMethodDetails?)
      if destination_payment_method_details.nil?
        raise ArgumentError.new("\"destination_payment_method_details\" is required and cannot be null")
      end
      _destination_payment_method_details = destination_payment_method_details.not_nil!
      _destination_payment_method_details.validate if _destination_payment_method_details.is_a?(OpenApi::Validatable)
      @destination_payment_method_details = _destination_payment_method_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_arrival_date Object to be assigned
    def expected_arrival_date=(expected_arrival_date : Int64?)
      if expected_arrival_date.nil?
        raise ArgumentError.new("\"expected_arrival_date\" is required and cannot be null")
      end
      _expected_arrival_date = expected_arrival_date.not_nil!
      @expected_arrival_date = _expected_arrival_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_account Object to be assigned
    def financial_account=(financial_account : String?)
      if financial_account.nil?
        raise ArgumentError.new("\"financial_account\" is required and cannot be null")
      end
      _financial_account = financial_account.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("financial_account", _financial_account.to_s.size, MAX_LENGTH_FOR_FINANCIAL_ACCOUNT)
      @financial_account = _financial_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        raise ArgumentError.new("\"statement_descriptor\" is required and cannot be null")
      end
      _statement_descriptor = statement_descriptor.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
      @statement_descriptor = _statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      OpenApi::EnumValidator.validate("status", _status, VALID_VALUES_FOR_STATUS)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_transitions Object to be assigned
    def status_transitions=(status_transitions : Stripe::TreasuryOutboundTransfersResourceStatusTransitions?)
      if status_transitions.nil?
        raise ArgumentError.new("\"status_transitions\" is required and cannot be null")
      end
      _status_transitions = status_transitions.not_nil!
      _status_transitions.validate if _status_transitions.is_a?(OpenApi::Validatable)
      @status_transitions = _status_transitions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction Object to be assigned
    def transaction=(transaction : Stripe::TreasuryOutboundPaymentTransaction?)
      if transaction.nil?
        raise ArgumentError.new("\"transaction\" is required and cannot be null")
      end
      _transaction = transaction.not_nil!
      _transaction.validate if _transaction.is_a?(OpenApi::Validatable)
      @transaction = _transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination_payment_method Object to be assigned
    def destination_payment_method=(destination_payment_method : String?)
      if destination_payment_method.nil?
        return @destination_payment_method = nil
      end
      _destination_payment_method = destination_payment_method.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("destination_payment_method", _destination_payment_method.to_s.size, MAX_LENGTH_FOR_DESTINATION_PAYMENT_METHOD)
      @destination_payment_method = _destination_payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_regulatory_receipt_url Object to be assigned
    def hosted_regulatory_receipt_url=(hosted_regulatory_receipt_url : String?)
      if hosted_regulatory_receipt_url.nil?
        return @hosted_regulatory_receipt_url = nil
      end
      _hosted_regulatory_receipt_url = hosted_regulatory_receipt_url.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("hosted_regulatory_receipt_url", _hosted_regulatory_receipt_url.to_s.size, MAX_LENGTH_FOR_HOSTED_REGULATORY_RECEIPT_URL)
      @hosted_regulatory_receipt_url = _hosted_regulatory_receipt_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] returned_details Object to be assigned
    def returned_details=(returned_details : Stripe::TreasuryOutboundTransferReturnedDetails?)
      if returned_details.nil?
        return @returned_details = nil
      end
      _returned_details = returned_details.not_nil!
      _returned_details.validate if _returned_details.is_a?(OpenApi::Validatable)
      @returned_details = _returned_details
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @cancelable, @created, @currency, @destination_payment_method_details, @expected_arrival_date, @financial_account, @id, @livemode, @metadata, @object, @statement_descriptor, @status, @status_transitions, @transaction, @description, @description_present, @destination_payment_method, @destination_payment_method_present, @hosted_regulatory_receipt_url, @hosted_regulatory_receipt_url_present, @returned_details, @returned_details_present)
  end
end
