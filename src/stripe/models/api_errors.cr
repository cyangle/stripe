#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_intent"
require "./payment_method"
require "./payment_source"
require "./setup_intent"

module Stripe
  #
  class ApiErrors
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [api_error, card_error, idempotency_error, invalid_request_error]."
    VALID_VALUES_FOR__TYPE  = String.static_array("api_error", "card_error", "idempotency_error", "invalid_request_error")

    # End of Required Properties

    # Optional Properties

    # For card errors, the ID of the failed charge.
    @[JSON::Field(key: "charge", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter charge : String? = nil
    MAX_LENGTH_FOR_CHARGE = 5000

    # For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
    @[JSON::Field(key: "code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter code : String? = nil
    MAX_LENGTH_FOR_CODE    = 5000
    ERROR_MESSAGE_FOR_CODE = "invalid value for \"code\", must be one of [account_closed, account_country_invalid_address, account_error_country_change_requires_additional_steps, account_information_mismatch, account_invalid, account_number_invalid, acss_debit_session_incomplete, alipay_upgrade_required, amount_too_large, amount_too_small, api_key_expired, application_fees_not_allowed, authentication_required, balance_insufficient, balance_invalid_parameter, bank_account_bad_routing_numbers, bank_account_declined, bank_account_exists, bank_account_restricted, bank_account_unusable, bank_account_unverified, bank_account_verification_failed, billing_invalid_mandate, bitcoin_upgrade_required, capture_charge_authorization_expired, capture_unauthorized_payment, card_decline_rate_limit_exceeded, card_declined, cardholder_phone_number_required, charge_already_captured, charge_already_refunded, charge_disputed, charge_exceeds_source_limit, charge_exceeds_transaction_limit, charge_expired_for_capture, charge_invalid_parameter, charge_not_refundable, clearing_code_unsupported, country_code_invalid, country_unsupported, coupon_expired, customer_max_payment_methods, customer_max_subscriptions, customer_tax_location_invalid, debit_not_authorized, email_invalid, expired_card, financial_connections_account_inactive, financial_connections_no_successful_transaction_refresh, forwarding_api_inactive, forwarding_api_invalid_parameter, forwarding_api_upstream_connection_error, forwarding_api_upstream_connection_timeout, idempotency_key_in_use, incorrect_address, incorrect_cvc, incorrect_number, incorrect_zip, instant_payouts_config_disabled, instant_payouts_currency_disabled, instant_payouts_limit_exceeded, instant_payouts_unsupported, insufficient_funds, intent_invalid_state, intent_verification_method_missing, invalid_card_type, invalid_characters, invalid_charge_amount, invalid_cvc, invalid_expiry_month, invalid_expiry_year, invalid_mandate_reference_prefix_format, invalid_number, invalid_source_usage, invalid_tax_location, invoice_no_customer_line_items, invoice_no_payment_method_types, invoice_no_subscription_line_items, invoice_not_editable, invoice_on_behalf_of_not_editable, invoice_payment_intent_requires_action, invoice_upcoming_none, livemode_mismatch, lock_timeout, missing, no_account, not_allowed_on_standard_account, out_of_inventory, ownership_declaration_not_allowed, parameter_invalid_empty, parameter_invalid_integer, parameter_invalid_string_blank, parameter_invalid_string_empty, parameter_missing, parameter_unknown, parameters_exclusive, payment_intent_action_required, payment_intent_authentication_failure, payment_intent_incompatible_payment_method, payment_intent_invalid_parameter, payment_intent_konbini_rejected_confirmation_number, payment_intent_mandate_invalid, payment_intent_payment_attempt_expired, payment_intent_payment_attempt_failed, payment_intent_unexpected_state, payment_method_bank_account_already_verified, payment_method_bank_account_blocked, payment_method_billing_details_address_missing, payment_method_configuration_failures, payment_method_currency_mismatch, payment_method_customer_decline, payment_method_invalid_parameter, payment_method_invalid_parameter_testmode, payment_method_microdeposit_failed, payment_method_microdeposit_verification_amounts_invalid, payment_method_microdeposit_verification_amounts_mismatch, payment_method_microdeposit_verification_attempts_exceeded, payment_method_microdeposit_verification_descriptor_code_mismatch, payment_method_microdeposit_verification_timeout, payment_method_not_available, payment_method_provider_decline, payment_method_provider_timeout, payment_method_unactivated, payment_method_unexpected_state, payment_method_unsupported_type, payout_reconciliation_not_ready, payouts_limit_exceeded, payouts_not_allowed, platform_account_required, platform_api_key_expired, postal_code_invalid, processing_error, product_inactive, progressive_onboarding_limit_exceeded, rate_limit, refer_to_customer, refund_disputed_payment, resource_already_exists, resource_missing, return_intent_already_processed, routing_number_invalid, secret_key_required, sepa_unsupported_account, setup_attempt_failed, setup_intent_authentication_failure, setup_intent_invalid_parameter, setup_intent_mandate_invalid, setup_intent_setup_attempt_expired, setup_intent_unexpected_state, shipping_address_invalid, shipping_calculation_failed, sku_inactive, state_unsupported, status_transition_invalid, stripe_tax_inactive, tax_id_invalid, taxes_calculation_failed, terminal_location_country_unsupported, terminal_reader_busy, terminal_reader_hardware_fault, terminal_reader_invalid_location_for_payment, terminal_reader_offline, terminal_reader_timeout, testmode_charges_only, tls_version_unsupported, token_already_used, token_card_network_invalid, token_in_use, transfer_source_balance_parameters_mismatch, transfers_not_allowed, url_invalid]."
    VALID_VALUES_FOR_CODE  = String.static_array("account_closed", "account_country_invalid_address", "account_error_country_change_requires_additional_steps", "account_information_mismatch", "account_invalid", "account_number_invalid", "acss_debit_session_incomplete", "alipay_upgrade_required", "amount_too_large", "amount_too_small", "api_key_expired", "application_fees_not_allowed", "authentication_required", "balance_insufficient", "balance_invalid_parameter", "bank_account_bad_routing_numbers", "bank_account_declined", "bank_account_exists", "bank_account_restricted", "bank_account_unusable", "bank_account_unverified", "bank_account_verification_failed", "billing_invalid_mandate", "bitcoin_upgrade_required", "capture_charge_authorization_expired", "capture_unauthorized_payment", "card_decline_rate_limit_exceeded", "card_declined", "cardholder_phone_number_required", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_exceeds_transaction_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "customer_tax_location_invalid", "debit_not_authorized", "email_invalid", "expired_card", "financial_connections_account_inactive", "financial_connections_no_successful_transaction_refresh", "forwarding_api_inactive", "forwarding_api_invalid_parameter", "forwarding_api_upstream_connection_error", "forwarding_api_upstream_connection_timeout", "idempotency_key_in_use", "incorrect_address", "incorrect_cvc", "incorrect_number", "incorrect_zip", "instant_payouts_config_disabled", "instant_payouts_currency_disabled", "instant_payouts_limit_exceeded", "instant_payouts_unsupported", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_card_type", "invalid_characters", "invalid_charge_amount", "invalid_cvc", "invalid_expiry_month", "invalid_expiry_year", "invalid_mandate_reference_prefix_format", "invalid_number", "invalid_source_usage", "invalid_tax_location", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "not_allowed_on_standard_account", "out_of_inventory", "ownership_declaration_not_allowed", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_konbini_rejected_confirmation_number", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_bank_account_already_verified", "payment_method_bank_account_blocked", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_microdeposit_failed", "payment_method_microdeposit_verification_amounts_invalid", "payment_method_microdeposit_verification_amounts_mismatch", "payment_method_microdeposit_verification_attempts_exceeded", "payment_method_microdeposit_verification_descriptor_code_mismatch", "payment_method_microdeposit_verification_timeout", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "platform_account_required", "platform_api_key_expired", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "sepa_unsupported_account", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_address_invalid", "shipping_calculation_failed", "sku_inactive", "state_unsupported", "status_transition_invalid", "stripe_tax_inactive", "tax_id_invalid", "taxes_calculation_failed", "terminal_location_country_unsupported", "terminal_reader_busy", "terminal_reader_hardware_fault", "terminal_reader_invalid_location_for_payment", "terminal_reader_offline", "terminal_reader_timeout", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_card_network_invalid", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid")

    # For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
    @[JSON::Field(key: "decline_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter decline_code : String? = nil
    MAX_LENGTH_FOR_DECLINE_CODE = 5000

    # A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
    @[JSON::Field(key: "doc_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter doc_url : String? = nil
    MAX_LENGTH_FOR_DOC_URL = 5000

    # A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
    @[JSON::Field(key: "message", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter message : String? = nil
    MAX_LENGTH_FOR_MESSAGE = 40000

    # If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
    @[JSON::Field(key: "param", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter param : String? = nil
    MAX_LENGTH_FOR_PARAM = 5000

    @[JSON::Field(key: "payment_intent", type: Stripe::PaymentIntent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_intent : Stripe::PaymentIntent? = nil

    @[JSON::Field(key: "payment_method", type: Stripe::PaymentMethod?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method : Stripe::PaymentMethod? = nil

    # If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
    @[JSON::Field(key: "payment_method_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_type : String? = nil
    MAX_LENGTH_FOR_PAYMENT_METHOD_TYPE = 5000

    # A URL to the request log entry in your dashboard.
    @[JSON::Field(key: "request_log_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_log_url : String? = nil
    MAX_LENGTH_FOR_REQUEST_LOG_URL = 5000

    @[JSON::Field(key: "setup_intent", type: Stripe::SetupIntent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_intent : Stripe::SetupIntent? = nil

    @[JSON::Field(key: "source", type: Stripe::PaymentSource?, default: nil, required: false, nullable: false, emit_null: false)]
    getter source : Stripe::PaymentSource? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @charge : String? = nil,
      @code : String? = nil,
      @decline_code : String? = nil,
      @doc_url : String? = nil,
      @message : String? = nil,
      @param : String? = nil,
      @payment_intent : Stripe::PaymentIntent? = nil,
      @payment_method : Stripe::PaymentMethod? = nil,
      @payment_method_type : String? = nil,
      @request_log_url : String? = nil,
      @setup_intent : Stripe::SetupIntent? = nil,
      @source : Stripe::PaymentSource? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_charge = @charge).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("charge", _charge.to_s.size, MAX_LENGTH_FOR_CHARGE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_code = @code).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CODE) unless OpenApi::EnumValidator.valid?(_code, VALID_VALUES_FOR_CODE)
      end
      unless (_decline_code = @decline_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("decline_code", _decline_code.to_s.size, MAX_LENGTH_FOR_DECLINE_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_doc_url = @doc_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("doc_url", _doc_url.to_s.size, MAX_LENGTH_FOR_DOC_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_message = @message).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("message", _message.to_s.size, MAX_LENGTH_FOR_MESSAGE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_param = @param).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("param", _param.to_s.size, MAX_LENGTH_FOR_PARAM)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_payment_intent = @payment_intent).nil?
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method = @payment_method).nil?
        invalid_properties.concat(_payment_method.list_invalid_properties_for("payment_method")) if _payment_method.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_type = @payment_method_type).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_method_type", _payment_method_type.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD_TYPE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_request_log_url = @request_log_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("request_log_url", _request_log_url.to_s.size, MAX_LENGTH_FOR_REQUEST_LOG_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_setup_intent = @setup_intent).nil?
        invalid_properties.concat(_setup_intent.list_invalid_properties_for("setup_intent")) if _setup_intent.is_a?(OpenApi::Validatable)
      end
      unless (_source = @source).nil?
        invalid_properties.concat(_source.list_invalid_properties_for("source")) if _source.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_charge = @charge).nil?
        return false if _charge.to_s.size > MAX_LENGTH_FOR_CHARGE
      end

      unless (_code = @code).nil?
        return false unless OpenApi::EnumValidator.valid?(_code, VALID_VALUES_FOR_CODE)
      end

      unless (_decline_code = @decline_code).nil?
        return false if _decline_code.to_s.size > MAX_LENGTH_FOR_DECLINE_CODE
      end

      unless (_doc_url = @doc_url).nil?
        return false if _doc_url.to_s.size > MAX_LENGTH_FOR_DOC_URL
      end

      unless (_message = @message).nil?
        return false if _message.to_s.size > MAX_LENGTH_FOR_MESSAGE
      end

      unless (_param = @param).nil?
        return false if _param.to_s.size > MAX_LENGTH_FOR_PARAM
      end

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      unless (_payment_method = @payment_method).nil?
        return false if _payment_method.is_a?(OpenApi::Validatable) && !_payment_method.valid?
      end

      unless (_payment_method_type = @payment_method_type).nil?
        return false if _payment_method_type.to_s.size > MAX_LENGTH_FOR_PAYMENT_METHOD_TYPE
      end

      unless (_request_log_url = @request_log_url).nil?
        return false if _request_log_url.to_s.size > MAX_LENGTH_FOR_REQUEST_LOG_URL
      end

      unless (_setup_intent = @setup_intent).nil?
        return false if _setup_intent.is_a?(OpenApi::Validatable) && !_setup_intent.valid?
      end

      unless (_source = @source).nil?
        return false if _source.is_a?(OpenApi::Validatable) && !_source.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("charge", new_value.to_s.size, MAX_LENGTH_FOR_CHARGE)
      end

      @charge = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] code Object to be assigned
    def code=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("code", new_value, VALID_VALUES_FOR_CODE)
      end

      @code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decline_code Object to be assigned
    def decline_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("decline_code", new_value.to_s.size, MAX_LENGTH_FOR_DECLINE_CODE)
      end

      @decline_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] doc_url Object to be assigned
    def doc_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("doc_url", new_value.to_s.size, MAX_LENGTH_FOR_DOC_URL)
      end

      @doc_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] message Object to be assigned
    def message=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("message", new_value.to_s.size, MAX_LENGTH_FOR_MESSAGE)
      end

      @message = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] param Object to be assigned
    def param=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("param", new_value.to_s.size, MAX_LENGTH_FOR_PARAM)
      end

      @param = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(new_value : Stripe::PaymentIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(new_value : Stripe::PaymentMethod?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_type Object to be assigned
    def payment_method_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("payment_method_type", new_value.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD_TYPE)
      end

      @payment_method_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_log_url Object to be assigned
    def request_log_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("request_log_url", new_value.to_s.size, MAX_LENGTH_FOR_REQUEST_LOG_URL)
      end

      @request_log_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_intent Object to be assigned
    def setup_intent=(new_value : Stripe::SetupIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @setup_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(new_value : Stripe::PaymentSource?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @source = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @charge, @code, @decline_code, @doc_url, @message, @param, @payment_intent, @payment_method, @payment_method_type, @request_log_url, @setup_intent, @source)
  end
end
