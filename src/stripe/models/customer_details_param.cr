#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class CustomerDetailsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "address", type: Stripe::CustomerDetailsParamAddress?, default: nil, required: false, nullable: false, emit_null: false)]
    getter address : Stripe::CustomerDetailsParamAddress? = nil

    @[JSON::Field(key: "shipping", type: Stripe::CustomerDetailsParamShipping?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping : Stripe::CustomerDetailsParamShipping? = nil

    @[JSON::Field(key: "tax", type: Stripe::TaxParam1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax : Stripe::TaxParam1? = nil

    @[JSON::Field(key: "tax_exempt", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_exempt : String? = nil

    ENUM_VALIDATOR_FOR_TAX_EXEMPT = EnumValidator.new("tax_exempt", "String", ["", "exempt", "none", "reverse"])

    @[JSON::Field(key: "tax_ids", type: Array(Stripe::DataParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_ids : Array(Stripe::DataParams)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @address : Stripe::CustomerDetailsParamAddress? = nil,
      @shipping : Stripe::CustomerDetailsParamShipping? = nil,
      @tax : Stripe::TaxParam1? = nil,
      @tax_exempt : String? = nil,
      @tax_ids : Array(Stripe::DataParams)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model address : Stripe::CustomerDetailsParamAddress?
      # This is a model shipping : Stripe::CustomerDetailsParamShipping?
      # This is a model tax : Stripe::TaxParam1?

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_EXEMPT.error_message) unless ENUM_VALIDATOR_FOR_TAX_EXEMPT.valid?(@tax_exempt)
      # Container tax_ids array has values of Stripe::DataParams

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_TAX_EXEMPT.valid?(@tax_exempt)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(address : Stripe::CustomerDetailsParamAddress?)
      if address.nil?
        return @address = nil
      end
      @address = address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping Object to be assigned
    def shipping=(shipping : Stripe::CustomerDetailsParamShipping?)
      if shipping.nil?
        return @shipping = nil
      end
      @shipping = shipping
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax Object to be assigned
    def tax=(tax : Stripe::TaxParam1?)
      if tax.nil?
        return @tax = nil
      end
      @tax = tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_exempt Object to be assigned
    def tax_exempt=(tax_exempt : String?)
      if tax_exempt.nil?
        return @tax_exempt = nil
      end
      _tax_exempt = tax_exempt.not_nil!
      ENUM_VALIDATOR_FOR_TAX_EXEMPT.valid!(_tax_exempt)
      @tax_exempt = tax_exempt
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_ids Object to be assigned
    def tax_ids=(tax_ids : Array(Stripe::DataParams)?)
      if tax_ids.nil?
        return @tax_ids = nil
      end
      @tax_ids = tax_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address, @shipping, @tax, @tax_exempt, @tax_ids)
  end
end
