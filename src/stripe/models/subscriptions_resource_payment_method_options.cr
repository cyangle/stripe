#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class SubscriptionsResourcePaymentMethodOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "acss_debit", type: Stripe::SubscriptionsResourcePaymentMethodOptionsAcssDebit?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: acss_debit.nil? && !acss_debit_present?)]
    getter acss_debit : Stripe::SubscriptionsResourcePaymentMethodOptionsAcssDebit? = nil

    @[JSON::Field(ignore: true)]
    property? acss_debit_present : Bool = false

    @[JSON::Field(key: "bancontact", type: Stripe::SubscriptionsResourcePaymentMethodOptionsBancontact?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: bancontact.nil? && !bancontact_present?)]
    getter bancontact : Stripe::SubscriptionsResourcePaymentMethodOptionsBancontact? = nil

    @[JSON::Field(ignore: true)]
    property? bancontact_present : Bool = false

    @[JSON::Field(key: "card", type: Stripe::SubscriptionsResourcePaymentMethodOptionsCard?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: card.nil? && !card_present?)]
    getter card : Stripe::SubscriptionsResourcePaymentMethodOptionsCard? = nil

    @[JSON::Field(ignore: true)]
    property? card_present : Bool = false

    @[JSON::Field(key: "customer_balance", type: Stripe::SubscriptionsResourcePaymentMethodOptionsCustomerBalance?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_balance.nil? && !customer_balance_present?)]
    getter customer_balance : Stripe::SubscriptionsResourcePaymentMethodOptionsCustomerBalance? = nil

    @[JSON::Field(ignore: true)]
    property? customer_balance_present : Bool = false

    @[JSON::Field(key: "konbini", type: Stripe::SubscriptionsResourcePaymentMethodOptionsKonbini?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: konbini.nil? && !konbini_present?)]
    getter konbini : Stripe::SubscriptionsResourcePaymentMethodOptionsKonbini? = nil

    @[JSON::Field(ignore: true)]
    property? konbini_present : Bool = false

    @[JSON::Field(key: "us_bank_account", type: Stripe::SubscriptionsResourcePaymentMethodOptionsUsBankAccount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: us_bank_account.nil? && !us_bank_account_present?)]
    getter us_bank_account : Stripe::SubscriptionsResourcePaymentMethodOptionsUsBankAccount? = nil

    @[JSON::Field(ignore: true)]
    property? us_bank_account_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit : Stripe::SubscriptionsResourcePaymentMethodOptionsAcssDebit? = nil,
      @bancontact : Stripe::SubscriptionsResourcePaymentMethodOptionsBancontact? = nil,
      @card : Stripe::SubscriptionsResourcePaymentMethodOptionsCard? = nil,
      @customer_balance : Stripe::SubscriptionsResourcePaymentMethodOptionsCustomerBalance? = nil,
      @konbini : Stripe::SubscriptionsResourcePaymentMethodOptionsKonbini? = nil,
      @us_bank_account : Stripe::SubscriptionsResourcePaymentMethodOptionsUsBankAccount? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _acss_debit = @acss_debit
        invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit")) if _acss_debit.is_a?(OpenApi::Validatable)
      end
      if _bancontact = @bancontact
        invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact")) if _bancontact.is_a?(OpenApi::Validatable)
      end
      if _card = @card
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      if _customer_balance = @customer_balance
        invalid_properties.concat(_customer_balance.list_invalid_properties_for("customer_balance")) if _customer_balance.is_a?(OpenApi::Validatable)
      end
      if _konbini = @konbini
        invalid_properties.concat(_konbini.list_invalid_properties_for("konbini")) if _konbini.is_a?(OpenApi::Validatable)
      end
      if _us_bank_account = @us_bank_account
        invalid_properties.concat(_us_bank_account.list_invalid_properties_for("us_bank_account")) if _us_bank_account.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _acss_debit = @acss_debit
        return false if _acss_debit.is_a?(OpenApi::Validatable) && !_acss_debit.valid?
      end

      if _bancontact = @bancontact
        return false if _bancontact.is_a?(OpenApi::Validatable) && !_bancontact.valid?
      end

      if _card = @card
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      if _customer_balance = @customer_balance
        return false if _customer_balance.is_a?(OpenApi::Validatable) && !_customer_balance.valid?
      end

      if _konbini = @konbini
        return false if _konbini.is_a?(OpenApi::Validatable) && !_konbini.valid?
      end

      if _us_bank_account = @us_bank_account
        return false if _us_bank_account.is_a?(OpenApi::Validatable) && !_us_bank_account.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::SubscriptionsResourcePaymentMethodOptionsAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      _acss_debit = acss_debit.not_nil!
      _acss_debit.validate if _acss_debit.is_a?(OpenApi::Validatable)
      @acss_debit = _acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::SubscriptionsResourcePaymentMethodOptionsBancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      _bancontact = bancontact.not_nil!
      _bancontact.validate if _bancontact.is_a?(OpenApi::Validatable)
      @bancontact = _bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::SubscriptionsResourcePaymentMethodOptionsCard?)
      if card.nil?
        return @card = nil
      end
      _card = card.not_nil!
      _card.validate if _card.is_a?(OpenApi::Validatable)
      @card = _card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : Stripe::SubscriptionsResourcePaymentMethodOptionsCustomerBalance?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      _customer_balance = customer_balance.not_nil!
      _customer_balance.validate if _customer_balance.is_a?(OpenApi::Validatable)
      @customer_balance = _customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(konbini : Stripe::SubscriptionsResourcePaymentMethodOptionsKonbini?)
      if konbini.nil?
        return @konbini = nil
      end
      _konbini = konbini.not_nil!
      _konbini.validate if _konbini.is_a?(OpenApi::Validatable)
      @konbini = _konbini
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(us_bank_account : Stripe::SubscriptionsResourcePaymentMethodOptionsUsBankAccount?)
      if us_bank_account.nil?
        return @us_bank_account = nil
      end
      _us_bank_account = us_bank_account.not_nil!
      _us_bank_account.validate if _us_bank_account.is_a?(OpenApi::Validatable)
      @us_bank_account = _us_bank_account
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit, @acss_debit_present, @bancontact, @bancontact_present, @card, @card_present2, @customer_balance, @customer_balance_present, @konbini, @konbini_present, @us_bank_account, @us_bank_account_present)
  end
end
