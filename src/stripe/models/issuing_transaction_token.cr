#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_network_token_network_data"
require "./issuing_token"
require "./issuing_token_card"

module Stripe
  # [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null.
  class IssuingTransactionToken
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "card", type: Stripe::IssuingTokenCard?, default: nil, required: true, nullable: false, emit_null: false)]
    property card : Stripe::IssuingTokenCard? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # The hashed ID derived from the device ID from the card network associated with the token.
    @[JSON::Field(key: "device_fingerprint", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property device_fingerprint : String? = nil
    MAX_LENGTH_FOR_DEVICE_FINGERPRINT = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # The token service provider / card network associated with the token.
    @[JSON::Field(key: "network", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property network : String? = nil
    ERROR_MESSAGE_FOR_NETWORK = "invalid value for \"network\", must be one of [mastercard, visa]."
    VALID_VALUES_FOR_NETWORK  = String.static_array("mastercard", "visa")

    # Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "network_updated_at", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property network_updated_at : Int64? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [issuing.token]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("issuing.token")

    # The usage state of the token.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, deleted, requested, suspended]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "deleted", "requested", "suspended")

    # End of Required Properties

    # Optional Properties

    # The last four digits of the token.
    @[JSON::Field(key: "last4", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property last4 : String? = nil
    MAX_LENGTH_FOR_LAST4 = 5000

    @[JSON::Field(key: "network_data", type: Stripe::IssuingNetworkTokenNetworkData?, default: nil, required: false, nullable: false, emit_null: false)]
    property network_data : Stripe::IssuingNetworkTokenNetworkData? = nil

    # The digital wallet for this token, if one was used.
    @[JSON::Field(key: "wallet_provider", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property wallet_provider : String? = nil
    ERROR_MESSAGE_FOR_WALLET_PROVIDER = "invalid value for \"wallet_provider\", must be one of [apple_pay, google_pay, samsung_pay]."
    VALID_VALUES_FOR_WALLET_PROVIDER  = String.static_array("apple_pay", "google_pay", "samsung_pay")

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::IssuingToken,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @card : Stripe::IssuingTokenCard? = nil,
      @created : Int64? = nil,
      @device_fingerprint : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @network : String? = nil,
      @network_updated_at : Int64? = nil,
      @object : String? = nil,
      @status : String? = nil,
      # Optional properties
      @last4 : String? = nil,
      @network_data : Stripe::IssuingNetworkTokenNetworkData? = nil,
      @wallet_provider : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@card, @created, @device_fingerprint, @id, @livemode, @network, @network_updated_at, @object, @status, @last4, @network_data, @wallet_provider)
  end
end
