#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # An Order describes a purchase being made by a customer, including the products & quantities being purchased, the order status, the payment information, and the billing/shipping details.  Related guide: [Orders overview](https://stripe.com/docs/orders)
  class Order
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Order cost before any discounts or taxes are applied. A positive integer representing the subtotal of the order in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency).
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_subtotal : Int64? = nil

    # Total order cost after discounts and taxes are applied. A positive integer representing the cost of the order in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). To submit an order, the total must be either 0 or at least $0.50 USD or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts).
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_total : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["order"])

    @[JSON::Field(key: "payment", type: Stripe::OrdersV2ResourcePayment?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment : Stripe::OrdersV2ResourcePayment? = nil

    # The overall status of the order.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["canceled", "complete", "open", "processing", "submitted"])

    @[JSON::Field(key: "total_details", type: Stripe::OrdersV2ResourceTotalDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total_details : Stripe::OrdersV2ResourceTotalDetails? = nil

    # Optional properties

    @[JSON::Field(key: "application", type: Stripe::OrderApplication?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : Stripe::OrderApplication? = nil

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    @[JSON::Field(key: "automatic_tax", type: Stripe::OrdersV2ResourceAutomaticTax?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::OrdersV2ResourceAutomaticTax? = nil

    @[JSON::Field(key: "billing_details", type: Stripe::OrderBillingDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_details.nil? && !billing_details_present?)]
    getter billing_details : Stripe::OrderBillingDetails? = nil

    @[JSON::Field(ignore: true)]
    property? billing_details_present : Bool = false

    @[JSON::Field(key: "client_permissions", type: Stripe::OrderClientPermissions?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: client_permissions.nil? && !client_permissions_present?)]
    getter client_permissions : Stripe::OrderClientPermissions? = nil

    @[JSON::Field(ignore: true)]
    property? client_permissions_present : Bool = false

    # The client secret of this Order. Used for client-side retrieval using a publishable key.   The client secret can be used to complete a payment for an Order from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.   Refer to our docs for [creating and processing an order](https://stripe.com/docs/orders-beta/create-and-process) to learn about how client_secret should be handled.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: client_secret.nil? && !client_secret_present?)]
    getter client_secret : String? = nil

    @[JSON::Field(ignore: true)]
    property? client_secret_present : Bool = false

    @[JSON::Field(key: "customer", type: Stripe::OrderCustomer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : Stripe::OrderCustomer? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The discounts applied to the order. Use `expand[]=discounts` to expand each discount.
    @[JSON::Field(key: "discounts", type: Array(Stripe::InvoiceitemDiscountsInner)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: discounts.nil? && !discounts_present?)]
    getter discounts : Array(Stripe::InvoiceitemDiscountsInner)? = nil

    @[JSON::Field(ignore: true)]
    property? discounts_present : Bool = false

    # A recent IP address of the purchaser used for tax reporting and tax location inference.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "line_items", type: Stripe::OrdersV2ResourceLineItemList1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter line_items : Stripe::OrdersV2ResourceLineItemList1? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "shipping_cost", type: Stripe::OrderShippingCost?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_cost.nil? && !shipping_cost_present?)]
    getter shipping_cost : Stripe::OrderShippingCost? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_cost_present : Bool = false

    @[JSON::Field(key: "shipping_details", type: Stripe::OrderShippingDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_details.nil? && !shipping_details_present?)]
    getter shipping_details : Stripe::OrderShippingDetails? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_details_present : Bool = false

    @[JSON::Field(key: "tax_details", type: Stripe::OrdersV2ResourceTaxDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_details : Stripe::OrdersV2ResourceTaxDetails? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_subtotal : Int64? = nil,
      @amount_total : Int64? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @payment : Stripe::OrdersV2ResourcePayment? = nil,
      @status : String? = nil,
      @total_details : Stripe::OrdersV2ResourceTotalDetails? = nil,
      # Optional properties
      @application : Stripe::OrderApplication? = nil,
      @automatic_tax : Stripe::OrdersV2ResourceAutomaticTax? = nil,
      @billing_details : Stripe::OrderBillingDetails? = nil,
      @client_permissions : Stripe::OrderClientPermissions? = nil,
      @client_secret : String? = nil,
      @customer : Stripe::OrderCustomer? = nil,
      @description : String? = nil,
      @discounts : Array(Stripe::InvoiceitemDiscountsInner)? = nil,
      @ip_address : String? = nil,
      @line_items : Stripe::OrdersV2ResourceLineItemList1? = nil,
      @metadata : Hash(String, String)? = nil,
      @shipping_cost : Stripe::OrderShippingCost? = nil,
      @shipping_details : Stripe::OrderShippingDetails? = nil,
      @tax_details : Stripe::OrdersV2ResourceTaxDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"amount_subtotal\" is required and cannot be null") if @amount_subtotal.nil?
      invalid_properties.push("\"amount_total\" is required and cannot be null") if @amount_total.nil?
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"payment\" is required and cannot be null") if @payment.nil?
      # This is a model payment : Stripe::OrdersV2ResourcePayment?

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      invalid_properties.push("\"total_details\" is required and cannot be null") if @total_details.nil?
      # This is a model total_details : Stripe::OrdersV2ResourceTotalDetails?
      # This is a model application : Stripe::OrderApplication?
      # This is a model automatic_tax : Stripe::OrdersV2ResourceAutomaticTax?
      # This is a model billing_details : Stripe::OrderBillingDetails?
      # This is a model client_permissions : Stripe::OrderClientPermissions?
      if _client_secret = @client_secret
        if _client_secret.to_s.size > 5000
          invalid_properties.push("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model customer : Stripe::OrderCustomer?
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      # Container discounts array has values of Stripe::InvoiceitemDiscountsInner
      if _ip_address = @ip_address
        if _ip_address.to_s.size > 5000
          invalid_properties.push("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model line_items : Stripe::OrdersV2ResourceLineItemList1?
      # This is a model shipping_cost : Stripe::OrderShippingCost?
      # This is a model shipping_details : Stripe::OrderShippingDetails?
      # This is a model tax_details : Stripe::OrdersV2ResourceTaxDetails?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @amount_subtotal.nil?
      return false if @amount_total.nil?
      return false if @created.nil?
      return false if @currency.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @payment.nil?
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false if @total_details.nil?
      if _client_secret = @client_secret
        return false if _client_secret.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      if _ip_address = @ip_address
        return false if _ip_address.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(amount_subtotal : Int64?)
      if amount_subtotal.nil?
        raise ArgumentError.new("\"amount_subtotal\" is required and cannot be null")
      end
      @amount_subtotal = amount_subtotal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(amount_total : Int64?)
      if amount_total.nil?
        raise ArgumentError.new("\"amount_total\" is required and cannot be null")
      end
      @amount_total = amount_total
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment Object to be assigned
    def payment=(payment : Stripe::OrdersV2ResourcePayment?)
      if payment.nil?
        raise ArgumentError.new("\"payment\" is required and cannot be null")
      end
      @payment = payment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_details Object to be assigned
    def total_details=(total_details : Stripe::OrdersV2ResourceTotalDetails?)
      if total_details.nil?
        raise ArgumentError.new("\"total_details\" is required and cannot be null")
      end
      @total_details = total_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(application : Stripe::OrderApplication?)
      if application.nil?
        return @application = nil
      end
      @application = application
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::OrdersV2ResourceAutomaticTax?)
      if automatic_tax.nil?
        return @automatic_tax = nil
      end
      @automatic_tax = automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_details Object to be assigned
    def billing_details=(billing_details : Stripe::OrderBillingDetails?)
      if billing_details.nil?
        return @billing_details = nil
      end
      @billing_details = billing_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_permissions Object to be assigned
    def client_permissions=(client_permissions : Stripe::OrderClientPermissions?)
      if client_permissions.nil?
        return @client_permissions = nil
      end
      @client_permissions = client_permissions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_secret Object to be assigned
    def client_secret=(client_secret : String?)
      if client_secret.nil?
        return @client_secret = nil
      end
      _client_secret = client_secret.not_nil!
      if _client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      @client_secret = client_secret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : Stripe::OrderCustomer?)
      if customer.nil?
        return @customer = nil
      end
      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(discounts : Array(Stripe::InvoiceitemDiscountsInner)?)
      if discounts.nil?
        return @discounts = nil
      end
      @discounts = discounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(ip_address : String?)
      if ip_address.nil?
        return @ip_address = nil
      end
      _ip_address = ip_address.not_nil!
      if _ip_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
      end

      @ip_address = ip_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(line_items : Stripe::OrdersV2ResourceLineItemList1?)
      if line_items.nil?
        return @line_items = nil
      end
      @line_items = line_items
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_cost Object to be assigned
    def shipping_cost=(shipping_cost : Stripe::OrderShippingCost?)
      if shipping_cost.nil?
        return @shipping_cost = nil
      end
      @shipping_cost = shipping_cost
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_details Object to be assigned
    def shipping_details=(shipping_details : Stripe::OrderShippingDetails?)
      if shipping_details.nil?
        return @shipping_details = nil
      end
      @shipping_details = shipping_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_details Object to be assigned
    def tax_details=(tax_details : Stripe::OrdersV2ResourceTaxDetails?)
      if tax_details.nil?
        return @tax_details = nil
      end
      @tax_details = tax_details
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_subtotal, @amount_total, @created, @currency, @id, @livemode, @object, @payment, @status, @total_details, @application, @application_present, @automatic_tax, @billing_details, @billing_details_present, @client_permissions, @client_permissions_present, @client_secret, @client_secret_present, @customer, @customer_present, @description, @description_present, @discounts, @discounts_present, @ip_address, @ip_address_present, @line_items, @metadata, @metadata_present, @shipping_cost, @shipping_cost_present, @shipping_details, @shipping_details_present, @tax_details)
  end
end
