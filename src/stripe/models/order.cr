#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # An Order describes a purchase being made by a customer, including the products & quantities being purchased, the order status, the payment information, and the billing/shipping details.  Related guide: [Orders overview](https://stripe.com/docs/orders)
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Order
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Order cost before any discounts or taxes are applied. A positive integer representing the subtotal of the order in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency).
    @[JSON::Field(key: "amount_subtotal", type: Int64)]
    property amount_subtotal : Int64

    # Total order cost after discounts and taxes are applied. A positive integer representing the cost of the order in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). To submit an order, the total must be either 0 or at least $0.50 USD or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts).
    @[JSON::Field(key: "amount_total", type: Int64)]
    property amount_total : Int64

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["order"])

    @[JSON::Field(key: "payment", type: OrdersV2ResourcePayment)]
    property payment : OrdersV2ResourcePayment

    # The overall status of the order.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["canceled", "complete", "open", "processing", "submitted"])

    @[JSON::Field(key: "total_details", type: OrdersV2ResourceTotalDetails)]
    property total_details : OrdersV2ResourceTotalDetails

    # Optional properties

    @[JSON::Field(key: "application", type: OrderApplication?, presence: true, ignore_serialize: application.nil? && !application_present?)]
    property application : OrderApplication?

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    @[JSON::Field(key: "automatic_tax", type: OrdersV2ResourceAutomaticTax?, presence: true, ignore_serialize: automatic_tax.nil? && !automatic_tax_present?)]
    property automatic_tax : OrdersV2ResourceAutomaticTax?

    @[JSON::Field(ignore: true)]
    property? automatic_tax_present : Bool = false

    @[JSON::Field(key: "billing_details", type: OrderBillingDetails?, presence: true, ignore_serialize: billing_details.nil? && !billing_details_present?)]
    property billing_details : OrderBillingDetails?

    @[JSON::Field(ignore: true)]
    property? billing_details_present : Bool = false

    # The client secret of this Order. Used for client-side retrieval using a publishable key.   The client secret can be used to complete a payment for an Order from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.   Refer to our docs for [creating and processing an order](https://stripe.com/docs/orders-beta/create-and-process) to learn about how client_secret should be handled.
    @[JSON::Field(key: "client_secret", type: String?, presence: true, ignore_serialize: client_secret.nil? && !client_secret_present?)]
    getter client_secret : String?

    @[JSON::Field(ignore: true)]
    property? client_secret_present : Bool = false

    @[JSON::Field(key: "customer", type: OrderCustomer?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    property customer : OrderCustomer?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The discounts applied to the order. Use `expand[]=discounts` to expand each discount.
    @[JSON::Field(key: "discounts", type: Array(InvoiceitemDiscountsInner)?, presence: true, ignore_serialize: discounts.nil? && !discounts_present?)]
    property discounts : Array(InvoiceitemDiscountsInner)?

    @[JSON::Field(ignore: true)]
    property? discounts_present : Bool = false

    # A recent IP address of the purchaser used for tax reporting and tax location inference.
    @[JSON::Field(key: "ip_address", type: String?, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String?

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "line_items", type: OrdersV2ResourceLineItemList1?, presence: true, ignore_serialize: line_items.nil? && !line_items_present?)]
    property line_items : OrdersV2ResourceLineItemList1?

    @[JSON::Field(ignore: true)]
    property? line_items_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "shipping_cost", type: OrderShippingCost?, presence: true, ignore_serialize: shipping_cost.nil? && !shipping_cost_present?)]
    property shipping_cost : OrderShippingCost?

    @[JSON::Field(ignore: true)]
    property? shipping_cost_present : Bool = false

    @[JSON::Field(key: "shipping_details", type: OrderShippingDetails?, presence: true, ignore_serialize: shipping_details.nil? && !shipping_details_present?)]
    property shipping_details : OrderShippingDetails?

    @[JSON::Field(ignore: true)]
    property? shipping_details_present : Bool = false

    @[JSON::Field(key: "tax_details", type: OrdersV2ResourceTaxDetails?, presence: true, ignore_serialize: tax_details.nil? && !tax_details_present?)]
    property tax_details : OrdersV2ResourceTaxDetails?

    @[JSON::Field(ignore: true)]
    property? tax_details_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @amount_subtotal : Int64, 
      @amount_total : Int64, 
      @created : Int64, 
      @currency : String, 
      @id : String, 
      @livemode : Bool, 
      @object : String, 
      @payment : OrdersV2ResourcePayment, 
      @status : String, 
      @total_details : OrdersV2ResourceTotalDetails, 
      # Optional properties
      @application : OrderApplication? = nil, 
      @automatic_tax : OrdersV2ResourceAutomaticTax? = nil, 
      @billing_details : OrderBillingDetails? = nil, 
      @client_secret : String? = nil, 
      @customer : OrderCustomer? = nil, 
      @description : String? = nil, 
      @discounts : Array(InvoiceitemDiscountsInner)? = nil, 
      @ip_address : String? = nil, 
      @line_items : OrdersV2ResourceLineItemList1? = nil, 
      @metadata : Hash(String, String)? = nil, 
      @shipping_cost : OrderShippingCost? = nil, 
      @shipping_details : OrderShippingDetails? = nil, 
      @tax_details : OrdersV2ResourceTaxDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      if !@client_secret.nil? && @client_secret.to_s.size > 5000
        invalid_properties.push("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@ip_address.nil? && @ip_address.to_s.size > 5000
        invalid_properties.push("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false if !@client_secret.nil? && @client_secret.to_s.size > 5000
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@ip_address.nil? && @ip_address.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] client_secret Value to be assigned
    def client_secret=(client_secret)
      if !client_secret.nil? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      @client_secret = client_secret
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address Value to be assigned
    def ip_address=(ip_address)
      if !ip_address.nil? && ip_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
      end

      @ip_address = ip_address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_subtotal, @amount_total, @created, @currency, @id, @livemode, @object, @payment, @status, @total_details, @application, @automatic_tax, @billing_details, @client_secret, @customer, @description, @discounts, @ip_address, @line_items, @metadata, @shipping_cost, @shipping_details, @tax_details)
  end
end
