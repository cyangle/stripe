#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # Order objects are created to handle end customers' purchases of previously defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well as list all orders. Orders are identified by a unique, random ID.  Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
  class Order
    include NASON::Serializable

    # Required properties
    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # List of items constituting the order. An order can have up to 25 items.
    @[NASON::Field(key: "items", type: Array(OrderItem))]
    property items : Array(OrderItem)

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # Optional properties
    # The total amount that was returned to the customer.
    @[NASON::Field(key: "amount_returned", type: Int64? | Null, nillable: true)]
    property amount_returned : Int64? | Null

    # ID of the Connect Application that created the order.
    @[NASON::Field(key: "application", type: String? | Null, nillable: true)]
    property application : String? | Null

    # A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation.
    @[NASON::Field(key: "application_fee", type: Int64? | Null, nillable: true)]
    property application_fee : Int64? | Null

    # The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`.
    @[NASON::Field(key: "charge", type: String | Charge? | Null, nillable: true)]
    property charge : String | Charge? | Null

    # The customer used for the order.
    @[NASON::Field(key: "customer", type: String | Customer | Nil | Null, nillable: true)]
    property customer : String | Customer | Nil | Null

    # The email address of the customer placing the order.
    @[NASON::Field(key: "email", type: String? | Null, nillable: true)]
    property email : String? | Null

    # External coupon code to load for this order.
    @[NASON::Field(key: "external_coupon_code", type: String?, nillable: true)]
    property external_coupon_code : String?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    @[NASON::Field(key: "returns", type: OrdersResourceOrderReturnList? | Null, nillable: true)]
    property returns : OrdersResourceOrderReturnList? | Null

    # The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
    @[NASON::Field(key: "selected_shipping_method", type: String? | Null, nillable: true)]
    property selected_shipping_method : String? | Null

    # The shipping address for the order. Present if the order is for goods to be shipped.
    @[NASON::Field(key: "shipping", type: Shipping? | Null, nillable: true)]
    property shipping : Shipping? | Null

    # A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
    @[NASON::Field(key: "shipping_methods", type: Array(ShippingMethod)? | Null, nillable: true)]
    property shipping_methods : Array(ShippingMethod)? | Null

    # The timestamps at which the order status was updated.
    @[NASON::Field(key: "status_transitions", type: StatusTransitions? | Null, nillable: true)]
    property status_transitions : StatusTransitions? | Null

    # Time at which the object was last updated. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "updated", type: Int64? | Null, nillable: true)]
    property updated : Int64? | Null

    # The user's order ID if it is different from the Stripe order ID.
    @[NASON::Field(key: "upstream_id", type: String?, nillable: true)]
    property upstream_id : String?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @created : Int64, @currency : String, @id : String, @items : Array(OrderItem), @livemode : Bool, @object : String, @status : String, @amount_returned : Int64? | Null = nil, @application : String? | Null = nil, @application_fee : Int64? | Null = nil, @charge : String | Charge? | Null = nil, @customer : String | Customer | Nil | Null = nil, @email : String? | Null = nil, @external_coupon_code : String? = nil, @metadata : Hash(String, String)? | Null = nil, @returns : OrdersResourceOrderReturnList? | Null = nil, @selected_shipping_method : String? | Null = nil, @shipping : Shipping? | Null = nil, @shipping_methods : Array(ShippingMethod)? | Null = nil, @status_transitions : StatusTransitions? | Null = nil, @updated : Int64? | Null = nil, @upstream_id : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@application.nil? && !@application.null? && @application.to_s.size > 5000
        invalid_properties.push("invalid value for \"application\", the character length must be smaller than or equal to 5000.")
      end

      if !@email.nil? && !@email.null? && @email.to_s.size > 5000
        invalid_properties.push("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      if !@external_coupon_code.nil? && @external_coupon_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"external_coupon_code\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@selected_shipping_method.nil? && !@selected_shipping_method.null? && @selected_shipping_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"selected_shipping_method\", the character length must be smaller than or equal to 5000.")
      end

      if @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      if !@upstream_id.nil? && @upstream_id.to_s.size > 5000
        invalid_properties.push("invalid value for \"upstream_id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@application.nil? && !@application.null? && @application.to_s.size > 5000
      return false if !@email.nil? && !@email.null? && @email.to_s.size > 5000
      return false if !@external_coupon_code.nil? && @external_coupon_code.to_s.size > 5000
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["order"])
      return false unless object_validator.valid?(@object)
      return false if !@selected_shipping_method.nil? && !@selected_shipping_method.null? && @selected_shipping_method.to_s.size > 5000
      return false if @status.to_s.size > 5000
      return false if !@upstream_id.nil? && @upstream_id.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] application Value to be assigned
    def application=(application)
      if !application.nil? && !@application.null? && application.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"application\", the character length must be smaller than or equal to 5000.")
      end

      @application = application
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && !@email.null? && email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] external_coupon_code Value to be assigned
    def external_coupon_code=(external_coupon_code)
      if !external_coupon_code.nil? && external_coupon_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_coupon_code\", the character length must be smaller than or equal to 5000.")
      end

      @external_coupon_code = external_coupon_code
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["order"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] selected_shipping_method Value to be assigned
    def selected_shipping_method=(selected_shipping_method)
      if !selected_shipping_method.nil? && !@selected_shipping_method.null? && selected_shipping_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"selected_shipping_method\", the character length must be smaller than or equal to 5000.")
      end

      @selected_shipping_method = selected_shipping_method
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] upstream_id Value to be assigned
    def upstream_id=(upstream_id)
      if !upstream_id.nil? && upstream_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"upstream_id\", the character length must be smaller than or equal to 5000.")
      end

      @upstream_id = upstream_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        amount_returned == o.amount_returned &&
        application == o.application &&
        application_fee == o.application_fee &&
        charge == o.charge &&
        created == o.created &&
        currency == o.currency &&
        customer == o.customer &&
        email == o.email &&
        external_coupon_code == o.external_coupon_code &&
        id == o.id &&
        items == o.items &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        object == o.object &&
        returns == o.returns &&
        selected_shipping_method == o.selected_shipping_method &&
        shipping == o.shipping &&
        shipping_methods == o.shipping_methods &&
        status == o.status &&
        status_transitions == o.status_transitions &&
        updated == o.updated &&
        upstream_id == o.upstream_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, amount_returned, application, application_fee, charge, created, currency, customer, email, external_coupon_code, id, items, livemode, metadata, object, returns, selected_shipping_method, shipping, shipping_methods, status, status_transitions, updated, upstream_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
