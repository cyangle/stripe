#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_method_config_resource_payment_method_properties"

module Stripe
  # PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.  There are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):  **Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.  **Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.  Child configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected accountâ€™s associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.  Related guides: - [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations) - [Multiple configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs) - [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)
  class PaymentMethodConfiguration
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Whether the configuration can be used for new payments.
    @[JSON::Field(key: "active", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter active : Bool? = nil

    # For child configs, the Connect application associated with the configuration.
    @[JSON::Field(key: "application", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter application : String? = nil
    MAX_LENGTH_FOR_APPLICATION = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The default configuration is used whenever a payment method configuration is not specified.
    @[JSON::Field(key: "is_default", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_default : Bool? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The configuration's name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [payment_method_configuration]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("payment_method_configuration")

    # For child configs, the configuration's parent configuration.
    @[JSON::Field(key: "parent", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter parent : String? = nil
    MAX_LENGTH_FOR_PARENT = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "affirm", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "alipay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "amazon_pay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amazon_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "apple_pay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter apple_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "bacs_debit", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "blik", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "boleto", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "card", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "cartes_bancaires", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cartes_bancaires : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "cashapp", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cashapp : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "customer_balance", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "eps", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "fpx", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "giropay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "google_pay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter google_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "grabpay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "jcb", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jcb : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "konbini", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "link", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "mobilepay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mobilepay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "multibanco", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "paynow", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "paypal", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paypal : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "promptpay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "revolut_pay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter revolut_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "sofort", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "swish", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter swish : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "twint", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter twint : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "wechat_pay", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    @[JSON::Field(key: "zip", type: Stripe::PaymentMethodConfigResourcePaymentMethodProperties?, default: nil, required: false, nullable: false, emit_null: false)]
    getter zip : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @active : Bool? = nil,
      @application : String? = nil,
      @id : String? = nil,
      @is_default : Bool? = nil,
      @livemode : Bool? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @parent : String? = nil,
      # Optional properties
      @acss_debit : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @affirm : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @afterpay_clearpay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @alipay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @amazon_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @apple_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @au_becs_debit : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @bacs_debit : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @bancontact : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @blik : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @boleto : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @card : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @cartes_bancaires : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @cashapp : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @customer_balance : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @eps : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @fpx : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @giropay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @google_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @grabpay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @ideal : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @jcb : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @klarna : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @konbini : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @link : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @mobilepay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @multibanco : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @oxxo : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @p24 : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @paynow : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @paypal : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @promptpay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @revolut_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @sepa_debit : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @sofort : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @swish : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @twint : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @us_bank_account : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @wechat_pay : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil,
      @zip : Stripe::PaymentMethodConfigResourcePaymentMethodProperties? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"active\" is required and cannot be null") if @active.nil?

      unless (_application = @application).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("application", _application.to_s.size, MAX_LENGTH_FOR_APPLICATION)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"is_default\" is required and cannot be null") if @is_default.nil?

      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_parent = @parent).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("parent", _parent.to_s.size, MAX_LENGTH_FOR_PARENT)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_acss_debit = @acss_debit).nil?
        invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit")) if _acss_debit.is_a?(OpenApi::Validatable)
      end
      unless (_affirm = @affirm).nil?
        invalid_properties.concat(_affirm.list_invalid_properties_for("affirm")) if _affirm.is_a?(OpenApi::Validatable)
      end
      unless (_afterpay_clearpay = @afterpay_clearpay).nil?
        invalid_properties.concat(_afterpay_clearpay.list_invalid_properties_for("afterpay_clearpay")) if _afterpay_clearpay.is_a?(OpenApi::Validatable)
      end
      unless (_alipay = @alipay).nil?
        invalid_properties.concat(_alipay.list_invalid_properties_for("alipay")) if _alipay.is_a?(OpenApi::Validatable)
      end
      unless (_amazon_pay = @amazon_pay).nil?
        invalid_properties.concat(_amazon_pay.list_invalid_properties_for("amazon_pay")) if _amazon_pay.is_a?(OpenApi::Validatable)
      end
      unless (_apple_pay = @apple_pay).nil?
        invalid_properties.concat(_apple_pay.list_invalid_properties_for("apple_pay")) if _apple_pay.is_a?(OpenApi::Validatable)
      end
      unless (_au_becs_debit = @au_becs_debit).nil?
        invalid_properties.concat(_au_becs_debit.list_invalid_properties_for("au_becs_debit")) if _au_becs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bacs_debit = @bacs_debit).nil?
        invalid_properties.concat(_bacs_debit.list_invalid_properties_for("bacs_debit")) if _bacs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bancontact = @bancontact).nil?
        invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact")) if _bancontact.is_a?(OpenApi::Validatable)
      end
      unless (_blik = @blik).nil?
        invalid_properties.concat(_blik.list_invalid_properties_for("blik")) if _blik.is_a?(OpenApi::Validatable)
      end
      unless (_boleto = @boleto).nil?
        invalid_properties.concat(_boleto.list_invalid_properties_for("boleto")) if _boleto.is_a?(OpenApi::Validatable)
      end
      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      unless (_cartes_bancaires = @cartes_bancaires).nil?
        invalid_properties.concat(_cartes_bancaires.list_invalid_properties_for("cartes_bancaires")) if _cartes_bancaires.is_a?(OpenApi::Validatable)
      end
      unless (_cashapp = @cashapp).nil?
        invalid_properties.concat(_cashapp.list_invalid_properties_for("cashapp")) if _cashapp.is_a?(OpenApi::Validatable)
      end
      unless (_customer_balance = @customer_balance).nil?
        invalid_properties.concat(_customer_balance.list_invalid_properties_for("customer_balance")) if _customer_balance.is_a?(OpenApi::Validatable)
      end
      unless (_eps = @eps).nil?
        invalid_properties.concat(_eps.list_invalid_properties_for("eps")) if _eps.is_a?(OpenApi::Validatable)
      end
      unless (_fpx = @fpx).nil?
        invalid_properties.concat(_fpx.list_invalid_properties_for("fpx")) if _fpx.is_a?(OpenApi::Validatable)
      end
      unless (_giropay = @giropay).nil?
        invalid_properties.concat(_giropay.list_invalid_properties_for("giropay")) if _giropay.is_a?(OpenApi::Validatable)
      end
      unless (_google_pay = @google_pay).nil?
        invalid_properties.concat(_google_pay.list_invalid_properties_for("google_pay")) if _google_pay.is_a?(OpenApi::Validatable)
      end
      unless (_grabpay = @grabpay).nil?
        invalid_properties.concat(_grabpay.list_invalid_properties_for("grabpay")) if _grabpay.is_a?(OpenApi::Validatable)
      end
      unless (_ideal = @ideal).nil?
        invalid_properties.concat(_ideal.list_invalid_properties_for("ideal")) if _ideal.is_a?(OpenApi::Validatable)
      end
      unless (_jcb = @jcb).nil?
        invalid_properties.concat(_jcb.list_invalid_properties_for("jcb")) if _jcb.is_a?(OpenApi::Validatable)
      end
      unless (_klarna = @klarna).nil?
        invalid_properties.concat(_klarna.list_invalid_properties_for("klarna")) if _klarna.is_a?(OpenApi::Validatable)
      end
      unless (_konbini = @konbini).nil?
        invalid_properties.concat(_konbini.list_invalid_properties_for("konbini")) if _konbini.is_a?(OpenApi::Validatable)
      end
      unless (_link = @link).nil?
        invalid_properties.concat(_link.list_invalid_properties_for("link")) if _link.is_a?(OpenApi::Validatable)
      end
      unless (_mobilepay = @mobilepay).nil?
        invalid_properties.concat(_mobilepay.list_invalid_properties_for("mobilepay")) if _mobilepay.is_a?(OpenApi::Validatable)
      end
      unless (_multibanco = @multibanco).nil?
        invalid_properties.concat(_multibanco.list_invalid_properties_for("multibanco")) if _multibanco.is_a?(OpenApi::Validatable)
      end
      unless (_oxxo = @oxxo).nil?
        invalid_properties.concat(_oxxo.list_invalid_properties_for("oxxo")) if _oxxo.is_a?(OpenApi::Validatable)
      end
      unless (_p24 = @p24).nil?
        invalid_properties.concat(_p24.list_invalid_properties_for("p24")) if _p24.is_a?(OpenApi::Validatable)
      end
      unless (_paynow = @paynow).nil?
        invalid_properties.concat(_paynow.list_invalid_properties_for("paynow")) if _paynow.is_a?(OpenApi::Validatable)
      end
      unless (_paypal = @paypal).nil?
        invalid_properties.concat(_paypal.list_invalid_properties_for("paypal")) if _paypal.is_a?(OpenApi::Validatable)
      end
      unless (_promptpay = @promptpay).nil?
        invalid_properties.concat(_promptpay.list_invalid_properties_for("promptpay")) if _promptpay.is_a?(OpenApi::Validatable)
      end
      unless (_revolut_pay = @revolut_pay).nil?
        invalid_properties.concat(_revolut_pay.list_invalid_properties_for("revolut_pay")) if _revolut_pay.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_debit = @sepa_debit).nil?
        invalid_properties.concat(_sepa_debit.list_invalid_properties_for("sepa_debit")) if _sepa_debit.is_a?(OpenApi::Validatable)
      end
      unless (_sofort = @sofort).nil?
        invalid_properties.concat(_sofort.list_invalid_properties_for("sofort")) if _sofort.is_a?(OpenApi::Validatable)
      end
      unless (_swish = @swish).nil?
        invalid_properties.concat(_swish.list_invalid_properties_for("swish")) if _swish.is_a?(OpenApi::Validatable)
      end
      unless (_twint = @twint).nil?
        invalid_properties.concat(_twint.list_invalid_properties_for("twint")) if _twint.is_a?(OpenApi::Validatable)
      end
      unless (_us_bank_account = @us_bank_account).nil?
        invalid_properties.concat(_us_bank_account.list_invalid_properties_for("us_bank_account")) if _us_bank_account.is_a?(OpenApi::Validatable)
      end
      unless (_wechat_pay = @wechat_pay).nil?
        invalid_properties.concat(_wechat_pay.list_invalid_properties_for("wechat_pay")) if _wechat_pay.is_a?(OpenApi::Validatable)
      end
      unless (_zip = @zip).nil?
        invalid_properties.concat(_zip.list_invalid_properties_for("zip")) if _zip.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @active.nil?

      unless (_application = @application).nil?
        return false if _application.to_s.size > MAX_LENGTH_FOR_APPLICATION
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @is_default.nil?

      return false if @livemode.nil?

      return false if @name.nil?
      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_parent = @parent).nil?
        return false if _parent.to_s.size > MAX_LENGTH_FOR_PARENT
      end

      unless (_acss_debit = @acss_debit).nil?
        return false if _acss_debit.is_a?(OpenApi::Validatable) && !_acss_debit.valid?
      end

      unless (_affirm = @affirm).nil?
        return false if _affirm.is_a?(OpenApi::Validatable) && !_affirm.valid?
      end

      unless (_afterpay_clearpay = @afterpay_clearpay).nil?
        return false if _afterpay_clearpay.is_a?(OpenApi::Validatable) && !_afterpay_clearpay.valid?
      end

      unless (_alipay = @alipay).nil?
        return false if _alipay.is_a?(OpenApi::Validatable) && !_alipay.valid?
      end

      unless (_amazon_pay = @amazon_pay).nil?
        return false if _amazon_pay.is_a?(OpenApi::Validatable) && !_amazon_pay.valid?
      end

      unless (_apple_pay = @apple_pay).nil?
        return false if _apple_pay.is_a?(OpenApi::Validatable) && !_apple_pay.valid?
      end

      unless (_au_becs_debit = @au_becs_debit).nil?
        return false if _au_becs_debit.is_a?(OpenApi::Validatable) && !_au_becs_debit.valid?
      end

      unless (_bacs_debit = @bacs_debit).nil?
        return false if _bacs_debit.is_a?(OpenApi::Validatable) && !_bacs_debit.valid?
      end

      unless (_bancontact = @bancontact).nil?
        return false if _bancontact.is_a?(OpenApi::Validatable) && !_bancontact.valid?
      end

      unless (_blik = @blik).nil?
        return false if _blik.is_a?(OpenApi::Validatable) && !_blik.valid?
      end

      unless (_boleto = @boleto).nil?
        return false if _boleto.is_a?(OpenApi::Validatable) && !_boleto.valid?
      end

      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      unless (_cartes_bancaires = @cartes_bancaires).nil?
        return false if _cartes_bancaires.is_a?(OpenApi::Validatable) && !_cartes_bancaires.valid?
      end

      unless (_cashapp = @cashapp).nil?
        return false if _cashapp.is_a?(OpenApi::Validatable) && !_cashapp.valid?
      end

      unless (_customer_balance = @customer_balance).nil?
        return false if _customer_balance.is_a?(OpenApi::Validatable) && !_customer_balance.valid?
      end

      unless (_eps = @eps).nil?
        return false if _eps.is_a?(OpenApi::Validatable) && !_eps.valid?
      end

      unless (_fpx = @fpx).nil?
        return false if _fpx.is_a?(OpenApi::Validatable) && !_fpx.valid?
      end

      unless (_giropay = @giropay).nil?
        return false if _giropay.is_a?(OpenApi::Validatable) && !_giropay.valid?
      end

      unless (_google_pay = @google_pay).nil?
        return false if _google_pay.is_a?(OpenApi::Validatable) && !_google_pay.valid?
      end

      unless (_grabpay = @grabpay).nil?
        return false if _grabpay.is_a?(OpenApi::Validatable) && !_grabpay.valid?
      end

      unless (_ideal = @ideal).nil?
        return false if _ideal.is_a?(OpenApi::Validatable) && !_ideal.valid?
      end

      unless (_jcb = @jcb).nil?
        return false if _jcb.is_a?(OpenApi::Validatable) && !_jcb.valid?
      end

      unless (_klarna = @klarna).nil?
        return false if _klarna.is_a?(OpenApi::Validatable) && !_klarna.valid?
      end

      unless (_konbini = @konbini).nil?
        return false if _konbini.is_a?(OpenApi::Validatable) && !_konbini.valid?
      end

      unless (_link = @link).nil?
        return false if _link.is_a?(OpenApi::Validatable) && !_link.valid?
      end

      unless (_mobilepay = @mobilepay).nil?
        return false if _mobilepay.is_a?(OpenApi::Validatable) && !_mobilepay.valid?
      end

      unless (_multibanco = @multibanco).nil?
        return false if _multibanco.is_a?(OpenApi::Validatable) && !_multibanco.valid?
      end

      unless (_oxxo = @oxxo).nil?
        return false if _oxxo.is_a?(OpenApi::Validatable) && !_oxxo.valid?
      end

      unless (_p24 = @p24).nil?
        return false if _p24.is_a?(OpenApi::Validatable) && !_p24.valid?
      end

      unless (_paynow = @paynow).nil?
        return false if _paynow.is_a?(OpenApi::Validatable) && !_paynow.valid?
      end

      unless (_paypal = @paypal).nil?
        return false if _paypal.is_a?(OpenApi::Validatable) && !_paypal.valid?
      end

      unless (_promptpay = @promptpay).nil?
        return false if _promptpay.is_a?(OpenApi::Validatable) && !_promptpay.valid?
      end

      unless (_revolut_pay = @revolut_pay).nil?
        return false if _revolut_pay.is_a?(OpenApi::Validatable) && !_revolut_pay.valid?
      end

      unless (_sepa_debit = @sepa_debit).nil?
        return false if _sepa_debit.is_a?(OpenApi::Validatable) && !_sepa_debit.valid?
      end

      unless (_sofort = @sofort).nil?
        return false if _sofort.is_a?(OpenApi::Validatable) && !_sofort.valid?
      end

      unless (_swish = @swish).nil?
        return false if _swish.is_a?(OpenApi::Validatable) && !_swish.valid?
      end

      unless (_twint = @twint).nil?
        return false if _twint.is_a?(OpenApi::Validatable) && !_twint.valid?
      end

      unless (_us_bank_account = @us_bank_account).nil?
        return false if _us_bank_account.is_a?(OpenApi::Validatable) && !_us_bank_account.valid?
      end

      unless (_wechat_pay = @wechat_pay).nil?
        return false if _wechat_pay.is_a?(OpenApi::Validatable) && !_wechat_pay.valid?
      end

      unless (_zip = @zip).nil?
        return false if _zip.is_a?(OpenApi::Validatable) && !_zip.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] active Object to be assigned
    def active=(new_value : Bool?)
      raise ArgumentError.new("\"active\" is required and cannot be null") if new_value.nil?

      @active = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("application", new_value.to_s.size, MAX_LENGTH_FOR_APPLICATION)
      end

      @application = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_default Object to be assigned
    def is_default=(new_value : Bool?)
      raise ArgumentError.new("\"is_default\" is required and cannot be null") if new_value.nil?

      @is_default = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("name", new_value.to_s.size, MAX_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] parent Object to be assigned
    def parent=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("parent", new_value.to_s.size, MAX_LENGTH_FOR_PARENT)
      end

      @parent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @acss_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm Object to be assigned
    def affirm=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @affirm = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @afterpay_clearpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @alipay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amazon_pay Object to be assigned
    def amazon_pay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amazon_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] apple_pay Object to be assigned
    def apple_pay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @apple_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @au_becs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit Object to be assigned
    def bacs_debit=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bancontact = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik Object to be assigned
    def blik=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @blik = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto Object to be assigned
    def boleto=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @boleto = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cartes_bancaires Object to be assigned
    def cartes_bancaires=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cartes_bancaires = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cashapp Object to be assigned
    def cashapp=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cashapp = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eps = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx Object to be assigned
    def fpx=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fpx = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @giropay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] google_pay Object to be assigned
    def google_pay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @google_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay Object to be assigned
    def grabpay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @grabpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ideal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jcb Object to be assigned
    def jcb=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @jcb = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @klarna = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @konbini = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mobilepay Object to be assigned
    def mobilepay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mobilepay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco Object to be assigned
    def multibanco=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @multibanco = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @oxxo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @p24 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow Object to be assigned
    def paynow=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paynow = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paypal Object to be assigned
    def paypal=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paypal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay Object to be assigned
    def promptpay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @promptpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] revolut_pay Object to be assigned
    def revolut_pay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @revolut_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sofort = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swish Object to be assigned
    def swish=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @swish = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] twint Object to be assigned
    def twint=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @twint = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @us_bank_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wechat_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] zip Object to be assigned
    def zip=(new_value : Stripe::PaymentMethodConfigResourcePaymentMethodProperties?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @zip = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @application, @id, @is_default, @livemode, @name, @object, @parent, @acss_debit, @affirm, @afterpay_clearpay, @alipay, @amazon_pay, @apple_pay, @au_becs_debit, @bacs_debit, @bancontact, @blik, @boleto, @card, @cartes_bancaires, @cashapp, @customer_balance, @eps, @fpx, @giropay, @google_pay, @grabpay, @ideal, @jcb, @klarna, @konbini, @link, @mobilepay, @multibanco, @oxxo, @p24, @paynow, @paypal, @promptpay, @revolut_pay, @sepa_debit, @sofort, @swish, @twint, @us_bank_account, @wechat_pay, @zip)
  end
end
