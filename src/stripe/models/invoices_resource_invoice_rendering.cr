#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./invoice_rendering_pdf"

module Stripe
  #
  class InvoicesResourceInvoiceRendering
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
    @[JSON::Field(key: "amount_tax_display", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_tax_display : String? = nil
    MAX_LENGTH_FOR_AMOUNT_TAX_DISPLAY = 5000

    @[JSON::Field(key: "pdf", type: Stripe::InvoiceRenderingPdf?, default: nil, required: true, nullable: true, emit_null: true)]
    getter pdf : Stripe::InvoiceRenderingPdf? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_tax_display : String? = nil,
      @pdf : Stripe::InvoiceRenderingPdf? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_amount_tax_display = @amount_tax_display).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("amount_tax_display", _amount_tax_display.to_s.size, MAX_LENGTH_FOR_AMOUNT_TAX_DISPLAY)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_pdf = @pdf).nil?
        invalid_properties.concat(_pdf.list_invalid_properties_for("pdf")) if _pdf.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_amount_tax_display = @amount_tax_display).nil?
        return false if _amount_tax_display.to_s.size > MAX_LENGTH_FOR_AMOUNT_TAX_DISPLAY
      end

      unless (_pdf = @pdf).nil?
        return false if _pdf.is_a?(OpenApi::Validatable) && !_pdf.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_tax_display Object to be assigned
    def amount_tax_display=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("amount_tax_display", new_value.to_s.size, MAX_LENGTH_FOR_AMOUNT_TAX_DISPLAY)
      end

      @amount_tax_display = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pdf Object to be assigned
    def pdf=(new_value : Stripe::InvoiceRenderingPdf?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pdf = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_tax_display, @pdf)
  end
end
