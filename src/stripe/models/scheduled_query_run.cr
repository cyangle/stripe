#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ScheduledQueryRun
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # When the query was run, Sigma contained a snapshot of your Stripe data at this time.
    @[JSON::Field(key: "data_load_time", type: Int64)]
    property data_load_time : Int64

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["scheduled_query_run"])

    # Time at which the result expires and is no longer available for download.
    @[JSON::Field(key: "result_available_until", type: Int64)]
    property result_available_until : Int64

    # SQL for the query.
    @[JSON::Field(key: "sql", type: String)]
    getter sql : String

    # The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    # Title of the query.
    @[JSON::Field(key: "title", type: String)]
    getter title : String

    # Optional properties

    @[JSON::Field(key: "error", type: SigmaScheduledQueryRunError?, presence: true, ignore_serialize: error.nil? && !error_present?)]
    property error : SigmaScheduledQueryRunError?

    @[JSON::Field(ignore: true)]
    property? error_present : Bool = false

    @[JSON::Field(key: "file", type: ScheduledQueryRunFile?, presence: true, ignore_serialize: file.nil? && !file_present?)]
    property file : ScheduledQueryRunFile?

    @[JSON::Field(ignore: true)]
    property? file_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64,
      @data_load_time : Int64,
      @id : String,
      @livemode : Bool,
      @object : String,
      @result_available_until : Int64,
      @sql : String,
      @status : String,
      @title : String,
      # Optional properties
      @error : SigmaScheduledQueryRunError? = nil,
      @file : ScheduledQueryRunFile? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @sql.to_s.size > 100000
        invalid_properties.push("invalid value for \"sql\", the character length must be smaller than or equal to 100000.")
      end

      if @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      if @title.to_s.size > 5000
        invalid_properties.push("invalid value for \"title\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @sql.to_s.size > 100000
      return false if @status.to_s.size > 5000
      return false if @title.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] sql Value to be assigned
    def sql=(sql : String)
      if sql.to_s.size > 100000
        raise ArgumentError.new("invalid value for \"sql\", the character length must be smaller than or equal to 100000.")
      end

      @sql = sql
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status : String)
      if status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title : String)
      if title.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"title\", the character length must be smaller than or equal to 5000.")
      end

      @title = title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @data_load_time, @id, @livemode, @object, @result_available_until, @sql, @status, @title, @error, @error_present, @file, @file_present)
  end
end
