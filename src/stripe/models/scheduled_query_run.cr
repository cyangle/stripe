#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.
  class ScheduledQueryRun
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # When the query was run, Sigma contained a snapshot of your Stripe data at this time.
    @[JSON::Field(key: "data_load_time", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter data_load_time : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["scheduled_query_run"])

    # Time at which the result expires and is no longer available for download.
    @[JSON::Field(key: "result_available_until", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter result_available_until : Int64? = nil

    # SQL for the query.
    @[JSON::Field(key: "sql", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter sql : String? = nil

    # The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    # Title of the query.
    @[JSON::Field(key: "title", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter title : String? = nil

    # Optional properties

    @[JSON::Field(key: "error", type: Stripe::SigmaScheduledQueryRunError?, default: nil, required: false, nullable: false, emit_null: false)]
    getter error : Stripe::SigmaScheduledQueryRunError? = nil

    @[JSON::Field(key: "file", type: Stripe::ScheduledQueryRunFile?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: file.nil? && !file_present?)]
    getter file : Stripe::ScheduledQueryRunFile? = nil

    @[JSON::Field(ignore: true)]
    property? file_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @data_load_time : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @result_available_until : Int64? = nil,
      @sql : String? = nil,
      @status : String? = nil,
      @title : String? = nil,
      # Optional properties
      @error : Stripe::SigmaScheduledQueryRunError? = nil,
      @file : Stripe::ScheduledQueryRunFile? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"data_load_time\" is required and cannot be null") if @data_load_time.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"result_available_until\" is required and cannot be null") if @result_available_until.nil?
      invalid_properties.push("\"sql\" is required and cannot be null") if @sql.nil?
      if _sql = @sql
        if _sql.to_s.size > 100000
          invalid_properties.push("invalid value for \"sql\", the character length must be smaller than or equal to 100000.")
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?
      if _status = @status
        if _status.to_s.size > 5000
          invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"title\" is required and cannot be null") if @title.nil?
      if _title = @title
        if _title.to_s.size > 5000
          invalid_properties.push("invalid value for \"title\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model error : Stripe::SigmaScheduledQueryRunError?
      # This is a model file : Stripe::ScheduledQueryRunFile?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @created.nil?
      return false if @data_load_time.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @result_available_until.nil?
      return false if @sql.nil?
      if _sql = @sql
        return false if _sql.to_s.size > 100000
      end
      return false if @status.nil?
      if _status = @status
        return false if _status.to_s.size > 5000
      end
      return false if @title.nil?
      if _title = @title
        return false if _title.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data_load_time Object to be assigned
    def data_load_time=(data_load_time : Int64?)
      if data_load_time.nil?
        raise ArgumentError.new("\"data_load_time\" is required and cannot be null")
      end
      @data_load_time = data_load_time
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result_available_until Object to be assigned
    def result_available_until=(result_available_until : Int64?)
      if result_available_until.nil?
        raise ArgumentError.new("\"result_available_until\" is required and cannot be null")
      end
      @result_available_until = result_available_until
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sql Object to be assigned
    def sql=(sql : String?)
      if sql.nil?
        raise ArgumentError.new("\"sql\" is required and cannot be null")
      end
      _sql = sql.not_nil!
      if _sql.to_s.size > 100000
        raise ArgumentError.new("invalid value for \"sql\", the character length must be smaller than or equal to 100000.")
      end

      @sql = sql
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      if _status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] title Object to be assigned
    def title=(title : String?)
      if title.nil?
        raise ArgumentError.new("\"title\" is required and cannot be null")
      end
      _title = title.not_nil!
      if _title.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"title\", the character length must be smaller than or equal to 5000.")
      end

      @title = title
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error Object to be assigned
    def error=(error : Stripe::SigmaScheduledQueryRunError?)
      if error.nil?
        return @error = nil
      end
      @error = error
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] file Object to be assigned
    def file=(file : Stripe::ScheduledQueryRunFile?)
      if file.nil?
        return @file = nil
      end
      @file = file
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @data_load_time, @id, @livemode, @object, @result_available_until, @sql, @status, @title, @error, @file, @file_present)
  end
end
