#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Shipping rates describe the price of shipping presented to your customers and can be applied to [Checkout Sessions](https://stripe.com/docs/payments/checkout/shipping) and [Orders](https://stripe.com/docs/orders/shipping) to collect shipping costs.
  class ShippingRate
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Whether the shipping rate can be used for new purchases. Defaults to `true`.
    @[JSON::Field(key: "active", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter active : Bool? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["shipping_rate"])

    # The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["fixed_amount"])

    # Optional properties

    @[JSON::Field(key: "delivery_estimate", type: Stripe::ShippingRateDeliveryEstimate1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: delivery_estimate.nil? && !delivery_estimate_present?)]
    getter delivery_estimate : Stripe::ShippingRateDeliveryEstimate1? = nil

    @[JSON::Field(ignore: true)]
    property? delivery_estimate_present : Bool = false

    # The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    @[JSON::Field(key: "display_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: display_name.nil? && !display_name_present?)]
    getter display_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? display_name_present : Bool = false

    @[JSON::Field(key: "fixed_amount", type: Stripe::ShippingRateFixedAmount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fixed_amount : Stripe::ShippingRateFixedAmount? = nil

    # Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    @[JSON::Field(key: "tax_behavior", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tax_behavior.nil? && !tax_behavior_present?)]
    getter tax_behavior : String? = nil

    @[JSON::Field(ignore: true)]
    property? tax_behavior_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_BEHAVIOR = EnumValidator.new("tax_behavior", "String", ["exclusive", "inclusive", "unspecified"])

    @[JSON::Field(key: "tax_code", type: Stripe::ShippingRateTaxCode?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tax_code.nil? && !tax_code_present?)]
    getter tax_code : Stripe::ShippingRateTaxCode? = nil

    @[JSON::Field(ignore: true)]
    property? tax_code_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @active : Bool? = nil,
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @delivery_estimate : Stripe::ShippingRateDeliveryEstimate1? = nil,
      @display_name : String? = nil,
      @fixed_amount : Stripe::ShippingRateFixedAmount? = nil,
      @tax_behavior : String? = nil,
      @tax_code : Stripe::ShippingRateTaxCode? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"active\" is required and cannot be null") if @active.nil?
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?
      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      # This is a model delivery_estimate : Stripe::ShippingRateDeliveryEstimate1?
      if _display_name = @display_name
        if _display_name.to_s.size > 5000
          invalid_properties.push("invalid value for \"display_name\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model fixed_amount : Stripe::ShippingRateFixedAmount?

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)
      # This is a model tax_code : Stripe::ShippingRateTaxCode?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @active.nil?
      return false if @created.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false if @metadata.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _display_name = @display_name
        return false if _display_name.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] active Object to be assigned
    def active=(active : Bool?)
      if active.nil?
        raise ArgumentError.new("\"active\" is required and cannot be null")
      end
      @active = active
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delivery_estimate Object to be assigned
    def delivery_estimate=(delivery_estimate : Stripe::ShippingRateDeliveryEstimate1?)
      if delivery_estimate.nil?
        return @delivery_estimate = nil
      end
      @delivery_estimate = delivery_estimate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_name Object to be assigned
    def display_name=(display_name : String?)
      if display_name.nil?
        return @display_name = nil
      end
      _display_name = display_name.not_nil!
      if _display_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"display_name\", the character length must be smaller than or equal to 5000.")
      end

      @display_name = display_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fixed_amount Object to be assigned
    def fixed_amount=(fixed_amount : Stripe::ShippingRateFixedAmount?)
      if fixed_amount.nil?
        return @fixed_amount = nil
      end
      @fixed_amount = fixed_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_behavior Object to be assigned
    def tax_behavior=(tax_behavior : String?)
      if tax_behavior.nil?
        return @tax_behavior = nil
      end
      _tax_behavior = tax_behavior.not_nil!
      ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid!(_tax_behavior)
      @tax_behavior = tax_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_code Object to be assigned
    def tax_code=(tax_code : Stripe::ShippingRateTaxCode?)
      if tax_code.nil?
        return @tax_code = nil
      end
      @tax_code = tax_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @created, @id, @livemode, @metadata, @object, @_type, @delivery_estimate, @delivery_estimate_present, @display_name, @display_name_present, @fixed_amount, @tax_behavior, @tax_behavior_present, @tax_code, @tax_code_present)
  end
end
