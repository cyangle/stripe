#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./coupon"
require "./coupon_applies_to"
require "./coupon_currency_option"

module Stripe
  # ID of the coupon to create a new discount for.
  class DiscountsResourceStackableDiscountCoupon
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
    @[JSON::Field(key: "amount_off", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property amount_off : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property currency : String? = nil

    # One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
    @[JSON::Field(key: "duration", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property duration : String? = nil
    ERROR_MESSAGE_FOR_DURATION = "invalid value for \"duration\", must be one of [forever, once, repeating]."
    VALID_VALUES_FOR_DURATION  = String.static_array("forever", "once", "repeating")

    # If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
    @[JSON::Field(key: "duration_in_months", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property duration_in_months : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
    @[JSON::Field(key: "max_redemptions", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property max_redemptions : Int64? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property metadata : Hash(String, String)? = nil

    # Name of the coupon displayed to customers on for instance invoices or receipts.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [coupon]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("coupon")

    # Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.
    @[JSON::Field(key: "percent_off", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    property percent_off : Float64? = nil

    # Date after which the coupon can no longer be redeemed.
    @[JSON::Field(key: "redeem_by", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property redeem_by : Int64? = nil

    # Number of times this coupon has been applied to a customer.
    @[JSON::Field(key: "times_redeemed", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property times_redeemed : Int64? = nil

    # Taking account of the above properties, whether this coupon can still be applied to a customer.
    @[JSON::Field(key: "valid", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property valid : Bool? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "applies_to", type: Stripe::CouponAppliesTo?, default: nil, required: false, nullable: false, emit_null: false)]
    property applies_to : Stripe::CouponAppliesTo? = nil

    @[JSON::Field(key: "currency_options", type: Hash(String, Stripe::CouponCurrencyOption)?, default: nil, required: false, nullable: false, emit_null: false)]
    property currency_options : Hash(String, Stripe::CouponCurrencyOption)? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Coupon,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_off : Int64? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @duration : String? = nil,
      @duration_in_months : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @max_redemptions : Int64? = nil,
      @metadata : Hash(String, String)? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @percent_off : Float64? = nil,
      @redeem_by : Int64? = nil,
      @times_redeemed : Int64? = nil,
      @valid : Bool? = nil,
      # Optional properties
      @applies_to : Stripe::CouponAppliesTo? = nil,
      @currency_options : Hash(String, Stripe::CouponCurrencyOption)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_off, @created, @currency, @duration, @duration_in_months, @id, @livemode, @max_redemptions, @metadata, @name, @object, @percent_off, @redeem_by, @times_redeemed, @valid, @applies_to, @currency_options)
  end
end
