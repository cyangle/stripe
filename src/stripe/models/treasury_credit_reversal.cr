#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TreasuryCreditReversal
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Amount (in cents) transferred.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # The FinancialAccount to reverse funds from.
    @[JSON::Field(key: "financial_account", type: String)]
    getter financial_account : String

    # A hosted transaction receipt URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
    @[JSON::Field(key: "hosted_regulatory_receipt_url", type: String?, presence: true, ignore_serialize: hosted_regulatory_receipt_url.nil? && !hosted_regulatory_receipt_url_present?)]
    getter hosted_regulatory_receipt_url : String?

    @[JSON::Field(ignore: true)]
    property? hosted_regulatory_receipt_url_present : Bool = false

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # The rails used to reverse the funds.
    @[JSON::Field(key: "network", type: String)]
    getter network : String

    ENUM_VALIDATOR_FOR_NETWORK = EnumValidator.new("network", "String", ["ach", "stripe"])

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["treasury.credit_reversal"])

    # The ReceivedCredit being reversed.
    @[JSON::Field(key: "received_credit", type: String)]
    getter received_credit : String

    # Status of the CreditReversal
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["canceled", "posted", "processing"])

    @[JSON::Field(key: "status_transitions", type: ReceivedCreditsResourceStatusTransitions)]
    property status_transitions : ReceivedCreditsResourceStatusTransitions

    @[JSON::Field(key: "transaction", type: TreasuryCreditReversalTransaction?, presence: true, ignore_serialize: transaction.nil? && !transaction_present?)]
    property transaction : TreasuryCreditReversalTransaction?

    @[JSON::Field(ignore: true)]
    property? transaction_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @currency : String, @financial_account : String, @hosted_regulatory_receipt_url : String?, @id : String, @livemode : Bool, @metadata : Hash(String, String), @network : String, @object : String, @received_credit : String, @status : String, @status_transitions : ReceivedCreditsResourceStatusTransitions, @transaction : TreasuryCreditReversalTransaction?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @financial_account.to_s.size > 5000
        invalid_properties.push("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      if @hosted_regulatory_receipt_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"hosted_regulatory_receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_NETWORK.error_message) unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @received_credit.to_s.size > 5000
        invalid_properties.push("invalid value for \"received_credit\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @financial_account.to_s.size > 5000
      return false if @hosted_regulatory_receipt_url.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network, false)
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @received_credit.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] financial_account Value to be assigned
    def financial_account=(financial_account)
      if financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      @financial_account = financial_account
    end

    # Custom attribute writer method with validation
    # @param [Object] hosted_regulatory_receipt_url Value to be assigned
    def hosted_regulatory_receipt_url=(hosted_regulatory_receipt_url)
      if hosted_regulatory_receipt_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"hosted_regulatory_receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      @hosted_regulatory_receipt_url = hosted_regulatory_receipt_url
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network)
      ENUM_VALIDATOR_FOR_NETWORK.valid!(network, false)
      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] received_credit Value to be assigned
    def received_credit=(received_credit)
      if received_credit.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"received_credit\", the character length must be smaller than or equal to 5000.")
      end

      @received_credit = received_credit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        currency == o.currency &&
        financial_account == o.financial_account &&
        hosted_regulatory_receipt_url == o.hosted_regulatory_receipt_url &&
        id == o.id &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        network == o.network &&
        object == o.object &&
        received_credit == o.received_credit &&
        status == o.status &&
        status_transitions == o.status_transitions &&
        transaction == o.transaction
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amount, @currency, @financial_account, @hosted_regulatory_receipt_url, @id, @livemode, @metadata, @network, @object, @received_credit, @status, @status_transitions, @transaction)
  end
end
