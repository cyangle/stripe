#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Fee
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Amount of the fee, in cents.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # ID of the Connect application that earned the fee.
    @[JSON::Field(key: "application", type: String?, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : String?

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @application : String?, @currency : String, @description : String?, @_type : String)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @application.to_s.size > 5000
        invalid_properties.push("invalid value for \"application\", the character length must be smaller than or equal to 5000.")
      end

      if @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @application.to_s.size > 5000
      return false if @description.to_s.size > 5000
      return false if @_type.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] application Value to be assigned
    def application=(application)
      if application.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"application\", the character length must be smaller than or equal to 5000.")
      end

      @application = application
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] _type Value to be assigned
    def _type=(_type)
      if _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        application == o.application &&
        currency == o.currency &&
        description == o.description &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amount, @application, @currency, @description, @_type)
  end
end
