#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # PaymentMethod objects represent your customer's payment instruments. You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to Customer objects to store instrument details for future payments.  Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  class PaymentMethod
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "billing_details", type: Stripe::BillingDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter billing_details : Stripe::BillingDetails? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["payment_method"])

    # The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "card_present", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "interac_present", "klarna", "konbini", "link", "oxxo", "p24", "paynow", "pix", "promptpay", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"])

    # Optional properties

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentMethodAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentMethodAcssDebit? = nil

    #
    @[JSON::Field(key: "affirm", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm : JSON::Any? = nil

    #
    @[JSON::Field(key: "afterpay_clearpay", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : JSON::Any? = nil

    #
    @[JSON::Field(key: "alipay", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : JSON::Any? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::PaymentMethodAuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::PaymentMethodAuBecsDebit? = nil

    @[JSON::Field(key: "bacs_debit", type: Stripe::PaymentMethodBacsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit : Stripe::PaymentMethodBacsDebit? = nil

    #
    @[JSON::Field(key: "bancontact", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : JSON::Any? = nil

    #
    @[JSON::Field(key: "blik", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik : JSON::Any? = nil

    @[JSON::Field(key: "boleto", type: Stripe::PaymentMethodBoleto?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto : Stripe::PaymentMethodBoleto? = nil

    @[JSON::Field(key: "card", type: Stripe::PaymentMethodCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PaymentMethodCard? = nil

    #
    @[JSON::Field(key: "card_present", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : JSON::Any? = nil

    @[JSON::Field(key: "customer", type: Stripe::PaymentMethodCustomer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : Stripe::PaymentMethodCustomer? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    #
    @[JSON::Field(key: "customer_balance", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : JSON::Any? = nil

    @[JSON::Field(key: "eps", type: Stripe::PaymentMethodEps?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::PaymentMethodEps? = nil

    @[JSON::Field(key: "fpx", type: Stripe::PaymentMethodFpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx : Stripe::PaymentMethodFpx? = nil

    #
    @[JSON::Field(key: "giropay", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : JSON::Any? = nil

    #
    @[JSON::Field(key: "grabpay", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay : JSON::Any? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentMethodIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentMethodIdeal? = nil

    #
    @[JSON::Field(key: "interac_present", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interac_present : JSON::Any? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentMethodKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentMethodKlarna? = nil

    #
    @[JSON::Field(key: "konbini", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : JSON::Any? = nil

    @[JSON::Field(key: "link", type: Stripe::PaymentMethodLink?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : Stripe::PaymentMethodLink? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    #
    @[JSON::Field(key: "oxxo", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : JSON::Any? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentMethodP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentMethodP24? = nil

    #
    @[JSON::Field(key: "paynow", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow : JSON::Any? = nil

    #
    @[JSON::Field(key: "pix", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix : JSON::Any? = nil

    #
    @[JSON::Field(key: "promptpay", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay : JSON::Any? = nil

    @[JSON::Field(key: "radar_options", type: Stripe::RadarRadarOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter radar_options : Stripe::RadarRadarOptions? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::PaymentMethodSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::PaymentMethodSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::PaymentMethodSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentMethodSofort? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::PaymentMethodUsBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::PaymentMethodUsBankAccount? = nil

    #
    @[JSON::Field(key: "wechat_pay", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : JSON::Any? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @billing_details : Stripe::BillingDetails? = nil,
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @acss_debit : Stripe::PaymentMethodAcssDebit? = nil,
      @affirm : JSON::Any? = nil,
      @afterpay_clearpay : JSON::Any? = nil,
      @alipay : JSON::Any? = nil,
      @au_becs_debit : Stripe::PaymentMethodAuBecsDebit? = nil,
      @bacs_debit : Stripe::PaymentMethodBacsDebit? = nil,
      @bancontact : JSON::Any? = nil,
      @blik : JSON::Any? = nil,
      @boleto : Stripe::PaymentMethodBoleto? = nil,
      @card : Stripe::PaymentMethodCard? = nil,
      @card_present2 : JSON::Any? = nil,
      @customer : Stripe::PaymentMethodCustomer? = nil,
      @customer_balance : JSON::Any? = nil,
      @eps : Stripe::PaymentMethodEps? = nil,
      @fpx : Stripe::PaymentMethodFpx? = nil,
      @giropay : JSON::Any? = nil,
      @grabpay : JSON::Any? = nil,
      @ideal : Stripe::PaymentMethodIdeal? = nil,
      @interac_present : JSON::Any? = nil,
      @klarna : Stripe::PaymentMethodKlarna? = nil,
      @konbini : JSON::Any? = nil,
      @link : Stripe::PaymentMethodLink? = nil,
      @metadata : Hash(String, String)? = nil,
      @oxxo : JSON::Any? = nil,
      @p24 : Stripe::PaymentMethodP24? = nil,
      @paynow : JSON::Any? = nil,
      @pix : JSON::Any? = nil,
      @promptpay : JSON::Any? = nil,
      @radar_options : Stripe::RadarRadarOptions? = nil,
      @sepa_debit : Stripe::PaymentMethodSepaDebit? = nil,
      @sofort : Stripe::PaymentMethodSofort? = nil,
      @us_bank_account : Stripe::PaymentMethodUsBankAccount? = nil,
      @wechat_pay : JSON::Any? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"billing_details\" is required and cannot be null") if @billing_details.nil?
      # This is a model billing_details : Stripe::BillingDetails?
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      # This is a model acss_debit : Stripe::PaymentMethodAcssDebit?
      # This is a model au_becs_debit : Stripe::PaymentMethodAuBecsDebit?
      # This is a model bacs_debit : Stripe::PaymentMethodBacsDebit?
      # This is a model boleto : Stripe::PaymentMethodBoleto?
      # This is a model card : Stripe::PaymentMethodCard?
      # This is a model customer : Stripe::PaymentMethodCustomer?
      # This is a model eps : Stripe::PaymentMethodEps?
      # This is a model fpx : Stripe::PaymentMethodFpx?
      # This is a model ideal : Stripe::PaymentMethodIdeal?
      # This is a model klarna : Stripe::PaymentMethodKlarna?
      # This is a model link : Stripe::PaymentMethodLink?
      # This is a model p24 : Stripe::PaymentMethodP24?
      # This is a model radar_options : Stripe::RadarRadarOptions?
      # This is a model sepa_debit : Stripe::PaymentMethodSepaDebit?
      # This is a model sofort : Stripe::PaymentMethodSofort?
      # This is a model us_bank_account : Stripe::PaymentMethodUsBankAccount?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @billing_details.nil?
      return false if @created.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_details Object to be assigned
    def billing_details=(billing_details : Stripe::BillingDetails?)
      if billing_details.nil?
        raise ArgumentError.new("\"billing_details\" is required and cannot be null")
      end
      @billing_details = billing_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::PaymentMethodAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      @acss_debit = acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm Object to be assigned
    def affirm=(affirm : JSON::Any?)
      if affirm.nil?
        return @affirm = nil
      end
      @affirm = affirm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(afterpay_clearpay : JSON::Any?)
      if afterpay_clearpay.nil?
        return @afterpay_clearpay = nil
      end
      @afterpay_clearpay = afterpay_clearpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(alipay : JSON::Any?)
      if alipay.nil?
        return @alipay = nil
      end
      @alipay = alipay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(au_becs_debit : Stripe::PaymentMethodAuBecsDebit?)
      if au_becs_debit.nil?
        return @au_becs_debit = nil
      end
      @au_becs_debit = au_becs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit Object to be assigned
    def bacs_debit=(bacs_debit : Stripe::PaymentMethodBacsDebit?)
      if bacs_debit.nil?
        return @bacs_debit = nil
      end
      @bacs_debit = bacs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : JSON::Any?)
      if bancontact.nil?
        return @bancontact = nil
      end
      @bancontact = bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik Object to be assigned
    def blik=(blik : JSON::Any?)
      if blik.nil?
        return @blik = nil
      end
      @blik = blik
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto Object to be assigned
    def boleto=(boleto : Stripe::PaymentMethodBoleto?)
      if boleto.nil?
        return @boleto = nil
      end
      @boleto = boleto
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::PaymentMethodCard?)
      if card.nil?
        return @card = nil
      end
      @card = card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(card_present : JSON::Any?)
      if card_present.nil?
        return @card_present2 = nil
      end
      @card_present2 = card_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : Stripe::PaymentMethodCustomer?)
      if customer.nil?
        return @customer = nil
      end
      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : JSON::Any?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      @customer_balance = customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(eps : Stripe::PaymentMethodEps?)
      if eps.nil?
        return @eps = nil
      end
      @eps = eps
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx Object to be assigned
    def fpx=(fpx : Stripe::PaymentMethodFpx?)
      if fpx.nil?
        return @fpx = nil
      end
      @fpx = fpx
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(giropay : JSON::Any?)
      if giropay.nil?
        return @giropay = nil
      end
      @giropay = giropay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay Object to be assigned
    def grabpay=(grabpay : JSON::Any?)
      if grabpay.nil?
        return @grabpay = nil
      end
      @grabpay = grabpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(ideal : Stripe::PaymentMethodIdeal?)
      if ideal.nil?
        return @ideal = nil
      end
      @ideal = ideal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interac_present Object to be assigned
    def interac_present=(interac_present : JSON::Any?)
      if interac_present.nil?
        return @interac_present = nil
      end
      @interac_present = interac_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(klarna : Stripe::PaymentMethodKlarna?)
      if klarna.nil?
        return @klarna = nil
      end
      @klarna = klarna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(konbini : JSON::Any?)
      if konbini.nil?
        return @konbini = nil
      end
      @konbini = konbini
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(link : Stripe::PaymentMethodLink?)
      if link.nil?
        return @link = nil
      end
      @link = link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(oxxo : JSON::Any?)
      if oxxo.nil?
        return @oxxo = nil
      end
      @oxxo = oxxo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(p24 : Stripe::PaymentMethodP24?)
      if p24.nil?
        return @p24 = nil
      end
      @p24 = p24
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow Object to be assigned
    def paynow=(paynow : JSON::Any?)
      if paynow.nil?
        return @paynow = nil
      end
      @paynow = paynow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix Object to be assigned
    def pix=(pix : JSON::Any?)
      if pix.nil?
        return @pix = nil
      end
      @pix = pix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay Object to be assigned
    def promptpay=(promptpay : JSON::Any?)
      if promptpay.nil?
        return @promptpay = nil
      end
      @promptpay = promptpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] radar_options Object to be assigned
    def radar_options=(radar_options : Stripe::RadarRadarOptions?)
      if radar_options.nil?
        return @radar_options = nil
      end
      @radar_options = radar_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(sepa_debit : Stripe::PaymentMethodSepaDebit?)
      if sepa_debit.nil?
        return @sepa_debit = nil
      end
      @sepa_debit = sepa_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(sofort : Stripe::PaymentMethodSofort?)
      if sofort.nil?
        return @sofort = nil
      end
      @sofort = sofort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(us_bank_account : Stripe::PaymentMethodUsBankAccount?)
      if us_bank_account.nil?
        return @us_bank_account = nil
      end
      @us_bank_account = us_bank_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(wechat_pay : JSON::Any?)
      if wechat_pay.nil?
        return @wechat_pay = nil
      end
      @wechat_pay = wechat_pay
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@billing_details, @created, @id, @livemode, @object, @_type, @acss_debit, @affirm, @afterpay_clearpay, @alipay, @au_becs_debit, @bacs_debit, @bancontact, @blik, @boleto, @card, @card_present2, @customer, @customer_present, @customer_balance, @eps, @fpx, @giropay, @grabpay, @ideal, @interac_present, @klarna, @konbini, @link, @metadata, @metadata_present, @oxxo, @p24, @paynow, @pix, @promptpay, @radar_options, @sepa_debit, @sofort, @us_bank_account, @wechat_pay)
  end
end
