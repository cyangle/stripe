#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # PaymentMethod objects represent your customer's payment instruments. They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to Customer objects to store instrument details for future payments.  Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  class PaymentMethod
    include NASON::Serializable

    # Required properties
    @[NASON::Field(key: "billing_details", type: BillingDetails)]
    property billing_details : BillingDetails

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    @[NASON::Field(key: "type", type: String)]
    property _type : String

    # Optional properties
    @[NASON::Field(key: "acss_debit", type: PaymentMethodAcssDebit?, nillable: true)]
    property acss_debit : PaymentMethodAcssDebit?

    @[NASON::Field(key: "afterpay_clearpay", type: NASON::Any?, nillable: true)]
    property afterpay_clearpay : NASON::Any?

    @[NASON::Field(key: "alipay", type: NASON::Any?, nillable: true)]
    property alipay : NASON::Any?

    @[NASON::Field(key: "au_becs_debit", type: PaymentMethodAuBecsDebit?, nillable: true)]
    property au_becs_debit : PaymentMethodAuBecsDebit?

    @[NASON::Field(key: "bacs_debit", type: PaymentMethodBacsDebit?, nillable: true)]
    property bacs_debit : PaymentMethodBacsDebit?

    @[NASON::Field(key: "bancontact", type: NASON::Any?, nillable: true)]
    property bancontact : NASON::Any?

    @[NASON::Field(key: "boleto", type: PaymentMethodBoleto?, nillable: true)]
    property boleto : PaymentMethodBoleto?

    @[NASON::Field(key: "card", type: PaymentMethodCard?, nillable: true)]
    property card : PaymentMethodCard?

    @[NASON::Field(key: "card_present", type: NASON::Any?, nillable: true)]
    property card_present : NASON::Any?

    # The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
    @[NASON::Field(key: "customer", type: String | Customer? | Null, nillable: true)]
    property customer : String | Customer? | Null

    @[NASON::Field(key: "eps", type: PaymentMethodEps?, nillable: true)]
    property eps : PaymentMethodEps?

    @[NASON::Field(key: "fpx", type: PaymentMethodFpx?, nillable: true)]
    property fpx : PaymentMethodFpx?

    @[NASON::Field(key: "giropay", type: NASON::Any?, nillable: true)]
    property giropay : NASON::Any?

    @[NASON::Field(key: "grabpay", type: NASON::Any?, nillable: true)]
    property grabpay : NASON::Any?

    @[NASON::Field(key: "ideal", type: PaymentMethodIdeal?, nillable: true)]
    property ideal : PaymentMethodIdeal?

    @[NASON::Field(key: "interac_present", type: NASON::Any?, nillable: true)]
    property interac_present : NASON::Any?

    @[NASON::Field(key: "klarna", type: PaymentMethodKlarna?, nillable: true)]
    property klarna : PaymentMethodKlarna?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    @[NASON::Field(key: "oxxo", type: NASON::Any?, nillable: true)]
    property oxxo : NASON::Any?

    @[NASON::Field(key: "p24", type: PaymentMethodP24?, nillable: true)]
    property p24 : PaymentMethodP24?

    @[NASON::Field(key: "sepa_debit", type: PaymentMethodSepaDebit?, nillable: true)]
    property sepa_debit : PaymentMethodSepaDebit?

    @[NASON::Field(key: "sofort", type: PaymentMethodSofort?, nillable: true)]
    property sofort : PaymentMethodSofort?

    @[NASON::Field(key: "wechat_pay", type: NASON::Any?, nillable: true)]
    property wechat_pay : NASON::Any?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @billing_details : BillingDetails, @created : Int64, @id : String, @livemode : Bool, @object : String, @_type : String, @acss_debit : PaymentMethodAcssDebit? = nil, @afterpay_clearpay : NASON::Any? = nil, @alipay : NASON::Any? = nil, @au_becs_debit : PaymentMethodAuBecsDebit? = nil, @bacs_debit : PaymentMethodBacsDebit? = nil, @bancontact : NASON::Any? = nil, @boleto : PaymentMethodBoleto? = nil, @card : PaymentMethodCard? = nil, @card_present : NASON::Any? = nil, @customer : String | Customer? | Null = nil, @eps : PaymentMethodEps? = nil, @fpx : PaymentMethodFpx? = nil, @giropay : NASON::Any? = nil, @grabpay : NASON::Any? = nil, @ideal : PaymentMethodIdeal? = nil, @interac_present : NASON::Any? = nil, @klarna : PaymentMethodKlarna? = nil, @metadata : Hash(String, String)? | Null = nil, @oxxo : NASON::Any? = nil, @p24 : PaymentMethodP24? = nil, @sepa_debit : PaymentMethodSepaDebit? = nil, @sofort : PaymentMethodSofort? = nil, @wechat_pay : NASON::Any? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["payment_method"])
      return false unless object_validator.valid?(@object)
      _type_validator = EnumAttributeValidator.new("String", ["acss_debit", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "card_present", "eps", "fpx", "giropay", "grabpay", "ideal", "interac_present", "klarna", "oxxo", "p24", "sepa_debit", "sofort", "wechat_pay"])
      return false unless _type_validator.valid?(@_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["payment_method"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      validator = EnumAttributeValidator.new("String", ["acss_debit", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "card_present", "eps", "fpx", "giropay", "grabpay", "ideal", "interac_present", "klarna", "oxxo", "p24", "sepa_debit", "sofort", "wechat_pay"])
      unless validator.valid?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{validator.allowable_values}.")
      end
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        acss_debit == o.acss_debit &&
        afterpay_clearpay == o.afterpay_clearpay &&
        alipay == o.alipay &&
        au_becs_debit == o.au_becs_debit &&
        bacs_debit == o.bacs_debit &&
        bancontact == o.bancontact &&
        billing_details == o.billing_details &&
        boleto == o.boleto &&
        card == o.card &&
        card_present == o.card_present &&
        created == o.created &&
        customer == o.customer &&
        eps == o.eps &&
        fpx == o.fpx &&
        giropay == o.giropay &&
        grabpay == o.grabpay &&
        id == o.id &&
        ideal == o.ideal &&
        interac_present == o.interac_present &&
        klarna == o.klarna &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        object == o.object &&
        oxxo == o.oxxo &&
        p24 == o.p24 &&
        sepa_debit == o.sepa_debit &&
        sofort == o.sofort &&
        _type == o._type &&
        wechat_pay == o.wechat_pay
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [acss_debit, afterpay_clearpay, alipay, au_becs_debit, bacs_debit, bancontact, billing_details, boleto, card, card_present, created, customer, eps, fpx, giropay, grabpay, id, ideal, interac_present, klarna, livemode, metadata, object, oxxo, p24, sepa_debit, sofort, _type, wechat_pay].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
