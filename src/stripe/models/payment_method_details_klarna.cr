#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class PaymentMethodDetailsKlarna
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The Klarna payment method used for this transaction. Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
    @[JSON::Field(key: "payment_method_category", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method_category : String? = nil
    MAX_LENGTH_FOR_PAYMENT_METHOD_CATEGORY = 5000

    # Preferred language of the Klarna authorization page that the customer is redirected to. Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `ro-RO`, `en-RO`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`
    @[JSON::Field(key: "preferred_locale", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter preferred_locale : String? = nil
    MAX_LENGTH_FOR_PREFERRED_LOCALE = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @payment_method_category : String? = nil,
      @preferred_locale : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_payment_method_category = @payment_method_category).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_method_category", _payment_method_category.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD_CATEGORY)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_preferred_locale = @preferred_locale).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("preferred_locale", _preferred_locale.to_s.size, MAX_LENGTH_FOR_PREFERRED_LOCALE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_payment_method_category = @payment_method_category).nil?
        return false if _payment_method_category.to_s.size > MAX_LENGTH_FOR_PAYMENT_METHOD_CATEGORY
      end

      unless (_preferred_locale = @preferred_locale).nil?
        return false if _preferred_locale.to_s.size > MAX_LENGTH_FOR_PREFERRED_LOCALE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_category Object to be assigned
    def payment_method_category=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("payment_method_category", new_value.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD_CATEGORY)
      end

      @payment_method_category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preferred_locale Object to be assigned
    def preferred_locale=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("preferred_locale", new_value.to_s.size, MAX_LENGTH_FOR_PREFERRED_LOCALE)
      end

      @preferred_locale = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@payment_method_category, @preferred_locale)
  end
end
