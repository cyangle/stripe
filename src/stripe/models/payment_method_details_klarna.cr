#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentMethodDetailsKlarna
    include JSON::Serializable
    include JSON::Serializable::Unmapped


    # Optional properties

    # The Klarna payment method used for this transaction. Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
    @[JSON::Field(key: "payment_method_category", type: String?, presence: true, ignore_serialize: payment_method_category.nil? && !payment_method_category_present?)]
    getter payment_method_category : String?

    @[JSON::Field(ignore: true)]
    property? payment_method_category_present : Bool = false

    # Preferred language of the Klarna authorization page that the customer is redirected to. Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `en-AU`, or `en-NZ`
    @[JSON::Field(key: "preferred_locale", type: String?, presence: true, ignore_serialize: preferred_locale.nil? && !preferred_locale_present?)]
    getter preferred_locale : String?

    @[JSON::Field(ignore: true)]
    property? preferred_locale_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Optional properties
      @payment_method_category : String? = nil, 
      @preferred_locale : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@payment_method_category.nil? && @payment_method_category.to_s.size > 5000
        invalid_properties.push("invalid value for \"payment_method_category\", the character length must be smaller than or equal to 5000.")
      end

      if !@preferred_locale.nil? && @preferred_locale.to_s.size > 5000
        invalid_properties.push("invalid value for \"preferred_locale\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@payment_method_category.nil? && @payment_method_category.to_s.size > 5000
      return false if !@preferred_locale.nil? && @preferred_locale.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method_category Value to be assigned
    def payment_method_category=(payment_method_category)
      if !payment_method_category.nil? && payment_method_category.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method_category\", the character length must be smaller than or equal to 5000.")
      end

      @payment_method_category = payment_method_category
    end

    # Custom attribute writer method with validation
    # @param [Object] preferred_locale Value to be assigned
    def preferred_locale=(preferred_locale)
      if !preferred_locale.nil? && preferred_locale.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"preferred_locale\", the character length must be smaller than or equal to 5000.")
      end

      @preferred_locale = preferred_locale
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@payment_method_category, @preferred_locale)
  end
end
