#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentMethodDetailsAchCreditTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Account number to transfer funds to.
    @[JSON::Field(key: "account_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_number.nil? && !account_number_present?)]
    getter account_number : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_NUMBER = 5000

    @[JSON::Field(ignore: true)]
    property? account_number_present : Bool = false

    # Name of the bank associated with the routing number.
    @[JSON::Field(key: "bank_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: bank_name.nil? && !bank_name_present?)]
    getter bank_name : String? = nil
    MAX_LENGTH_FOR_BANK_NAME = 5000

    @[JSON::Field(ignore: true)]
    property? bank_name_present : Bool = false

    # Routing transit number for the bank account to transfer funds to.
    @[JSON::Field(key: "routing_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: routing_number.nil? && !routing_number_present?)]
    getter routing_number : String? = nil
    MAX_LENGTH_FOR_ROUTING_NUMBER = 5000

    @[JSON::Field(ignore: true)]
    property? routing_number_present : Bool = false

    # SWIFT code of the bank associated with the routing number.
    @[JSON::Field(key: "swift_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: swift_code.nil? && !swift_code_present?)]
    getter swift_code : String? = nil
    MAX_LENGTH_FOR_SWIFT_CODE = 5000

    @[JSON::Field(ignore: true)]
    property? swift_code_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_number : String? = nil,
      @bank_name : String? = nil,
      @routing_number : String? = nil,
      @swift_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_number = @account_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_number", _account_number.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_bank_name = @bank_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("bank_name", _bank_name.to_s.size, MAX_LENGTH_FOR_BANK_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_routing_number = @routing_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("routing_number", _routing_number.to_s.size, MAX_LENGTH_FOR_ROUTING_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_swift_code = @swift_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("swift_code", _swift_code.to_s.size, MAX_LENGTH_FOR_SWIFT_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_number = @account_number).nil?
        return false if _account_number.to_s.size > MAX_LENGTH_FOR_ACCOUNT_NUMBER
      end

      unless (_bank_name = @bank_name).nil?
        return false if _bank_name.to_s.size > MAX_LENGTH_FOR_BANK_NAME
      end

      unless (_routing_number = @routing_number).nil?
        return false if _routing_number.to_s.size > MAX_LENGTH_FOR_ROUTING_NUMBER
      end

      unless (_swift_code = @swift_code).nil?
        return false if _swift_code.to_s.size > MAX_LENGTH_FOR_SWIFT_CODE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_number Object to be assigned
    def account_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_number", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NUMBER)
      end

      @account_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_name Object to be assigned
    def bank_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("bank_name", new_value.to_s.size, MAX_LENGTH_FOR_BANK_NAME)
      end

      @bank_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] routing_number Object to be assigned
    def routing_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("routing_number", new_value.to_s.size, MAX_LENGTH_FOR_ROUTING_NUMBER)
      end

      @routing_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swift_code Object to be assigned
    def swift_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("swift_code", new_value.to_s.size, MAX_LENGTH_FOR_SWIFT_CODE)
      end

      @swift_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_number, @account_number_present, @bank_name, @bank_name_present, @routing_number, @routing_number_present, @swift_code, @swift_code_present)
  end
end
