#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Object representing the subscription schedule's default settings.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class DefaultSettingsParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "application_fee_percent", type: Float64?, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    property application_fee_percent : Float64?

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    @[JSON::Field(key: "automatic_tax", type: AutomaticTaxConfig1?, presence: true, ignore_serialize: automatic_tax.nil? && !automatic_tax_present?)]
    property automatic_tax : AutomaticTaxConfig1?

    @[JSON::Field(ignore: true)]
    property? automatic_tax_present : Bool = false

    @[JSON::Field(key: "billing_cycle_anchor", type: String?, presence: true, ignore_serialize: billing_cycle_anchor.nil? && !billing_cycle_anchor_present?)]
    getter billing_cycle_anchor : String?

    @[JSON::Field(ignore: true)]
    property? billing_cycle_anchor_present : Bool = false

    ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR = EnumValidator.new("billing_cycle_anchor", "String", ["automatic", "phase_start"])

    @[JSON::Field(key: "billing_thresholds", type: DefaultSettingsParamsBillingThresholds?, presence: true, ignore_serialize: billing_thresholds.nil? && !billing_thresholds_present?)]
    property billing_thresholds : DefaultSettingsParamsBillingThresholds?

    @[JSON::Field(ignore: true)]
    property? billing_thresholds_present : Bool = false

    @[JSON::Field(key: "collection_method", type: String?, presence: true, ignore_serialize: collection_method.nil? && !collection_method_present?)]
    getter collection_method : String?

    @[JSON::Field(ignore: true)]
    property? collection_method_present : Bool = false

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    @[JSON::Field(key: "default_payment_method", type: String?, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    getter default_payment_method : String?

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    @[JSON::Field(key: "invoice_settings", type: SubscriptionSchedulesParam?, presence: true, ignore_serialize: invoice_settings.nil? && !invoice_settings_present?)]
    property invoice_settings : SubscriptionSchedulesParam?

    @[JSON::Field(ignore: true)]
    property? invoice_settings_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: DefaultSettingsParamsTransferData?, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    property transfer_data : DefaultSettingsParamsTransferData?

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @application_fee_percent : Float64? = nil,
      @automatic_tax : AutomaticTaxConfig1? = nil,
      @billing_cycle_anchor : String? = nil,
      @billing_thresholds : DefaultSettingsParamsBillingThresholds? = nil,
      @collection_method : String? = nil,
      @default_payment_method : String? = nil,
      @invoice_settings : SubscriptionSchedulesParam? = nil,
      @transfer_data : DefaultSettingsParamsTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.error_message) unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor)

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)

      if !@default_payment_method.nil? && @default_payment_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"default_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor)
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      return false if !@default_payment_method.nil? && @default_payment_method.to_s.size > 5000

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(billing_cycle_anchor)
      ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid!(billing_cycle_anchor)
      @billing_cycle_anchor = billing_cycle_anchor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method)
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(collection_method)
      @collection_method = collection_method
    end

    # Custom attribute writer method with validation
    # @param [Object] default_payment_method Value to be assigned
    def default_payment_method=(default_payment_method)
      if !default_payment_method.nil? && default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @default_payment_method = default_payment_method
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@application_fee_percent, @automatic_tax, @billing_cycle_anchor, @billing_thresholds, @collection_method, @default_payment_method, @invoice_settings, @transfer_data)
  end
end
