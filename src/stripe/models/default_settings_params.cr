#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Object representing the subscription schedule's default settings.
  class DefaultSettingsParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "application_fee_percent", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter application_fee_percent : Float64? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTaxConfig1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTaxConfig1? = nil

    @[JSON::Field(key: "billing_cycle_anchor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_cycle_anchor : String? = nil

    ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR = EnumValidator.new("billing_cycle_anchor", "String", ["automatic", "phase_start"])

    @[JSON::Field(key: "billing_thresholds", type: Stripe::DefaultSettingsParamsBillingThresholds?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_thresholds : Stripe::DefaultSettingsParamsBillingThresholds? = nil

    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter collection_method : String? = nil

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    @[JSON::Field(key: "default_payment_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_payment_method : String? = nil

    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "invoice_settings", type: Stripe::SubscriptionSchedulesParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_settings : Stripe::SubscriptionSchedulesParam? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::DefaultSettingsParamsTransferData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfer_data : Stripe::DefaultSettingsParamsTransferData? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @application_fee_percent : Float64? = nil,
      @automatic_tax : Stripe::AutomaticTaxConfig1? = nil,
      @billing_cycle_anchor : String? = nil,
      @billing_thresholds : Stripe::DefaultSettingsParamsBillingThresholds? = nil,
      @collection_method : String? = nil,
      @default_payment_method : String? = nil,
      @description : String? = nil,
      @invoice_settings : Stripe::SubscriptionSchedulesParam? = nil,
      @transfer_data : Stripe::DefaultSettingsParamsTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _automatic_tax = @automatic_tax
        if _automatic_tax.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.error_message) unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor)
      if _billing_thresholds = @billing_thresholds
        if _billing_thresholds.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_billing_thresholds.list_invalid_properties_for("billing_thresholds"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      if _default_payment_method = @default_payment_method
        if _default_payment_method.to_s.size > 5000
          invalid_properties.push("invalid value for \"default_payment_method\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _description = @description
        if _description.to_s.size > 500
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 500.")
        end
      end
      if _invoice_settings = @invoice_settings
        if _invoice_settings.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_invoice_settings.list_invalid_properties_for("invoice_settings"))
        end
      end
      if _transfer_data = @transfer_data
        if _transfer_data.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_transfer_data.list_invalid_properties_for("transfer_data"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _automatic_tax = @automatic_tax
        if _automatic_tax.is_a?(OpenApi::Validatable)
          return false unless _automatic_tax.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor)
      if _billing_thresholds = @billing_thresholds
        if _billing_thresholds.is_a?(OpenApi::Validatable)
          return false unless _billing_thresholds.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      if _default_payment_method = @default_payment_method
        return false if _default_payment_method.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 500
      end
      if _invoice_settings = @invoice_settings
        if _invoice_settings.is_a?(OpenApi::Validatable)
          return false unless _invoice_settings.valid?
        end
      end
      if _transfer_data = @transfer_data
        if _transfer_data.is_a?(OpenApi::Validatable)
          return false unless _transfer_data.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_percent Object to be assigned
    def application_fee_percent=(application_fee_percent : Float64?)
      if application_fee_percent.nil?
        return @application_fee_percent = nil
      end
      _application_fee_percent = application_fee_percent.not_nil!
      @application_fee_percent = _application_fee_percent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::AutomaticTaxConfig1?)
      if automatic_tax.nil?
        return @automatic_tax = nil
      end
      _automatic_tax = automatic_tax.not_nil!
      if _automatic_tax.is_a?(OpenApi::Validatable)
        _automatic_tax.validate
      end
      @automatic_tax = _automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(billing_cycle_anchor : String?)
      if billing_cycle_anchor.nil?
        return @billing_cycle_anchor = nil
      end
      _billing_cycle_anchor = billing_cycle_anchor.not_nil!
      ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid!(_billing_cycle_anchor)
      @billing_cycle_anchor = _billing_cycle_anchor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_thresholds Object to be assigned
    def billing_thresholds=(billing_thresholds : Stripe::DefaultSettingsParamsBillingThresholds?)
      if billing_thresholds.nil?
        return @billing_thresholds = nil
      end
      _billing_thresholds = billing_thresholds.not_nil!
      if _billing_thresholds.is_a?(OpenApi::Validatable)
        _billing_thresholds.validate
      end
      @billing_thresholds = _billing_thresholds
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method : String?)
      if collection_method.nil?
        return @collection_method = nil
      end
      _collection_method = collection_method.not_nil!
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(_collection_method)
      @collection_method = _collection_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(default_payment_method : String?)
      if default_payment_method.nil?
        return @default_payment_method = nil
      end
      _default_payment_method = default_payment_method.not_nil!
      if _default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @default_payment_method = _default_payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 500
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 500.")
      end

      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_settings Object to be assigned
    def invoice_settings=(invoice_settings : Stripe::SubscriptionSchedulesParam?)
      if invoice_settings.nil?
        return @invoice_settings = nil
      end
      _invoice_settings = invoice_settings.not_nil!
      if _invoice_settings.is_a?(OpenApi::Validatable)
        _invoice_settings.validate
      end
      @invoice_settings = _invoice_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(transfer_data : Stripe::DefaultSettingsParamsTransferData?)
      if transfer_data.nil?
        return @transfer_data = nil
      end
      _transfer_data = transfer_data.not_nil!
      if _transfer_data.is_a?(OpenApi::Validatable)
        _transfer_data.validate
      end
      @transfer_data = _transfer_data
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@application_fee_percent, @automatic_tax, @billing_cycle_anchor, @billing_thresholds, @collection_method, @default_payment_method, @description, @invoice_settings, @transfer_data)
  end
end
