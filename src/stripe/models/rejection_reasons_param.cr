#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class RejectionReasonsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The reason(s) the card logo was rejected.
    @[JSON::Field(key: "card_logo", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_logo : Array(String)? = nil
    ERROR_MESSAGE_FOR_CARD_LOGO = "invalid value for \"card_logo\", must be one of [geographic_location, inappropriate, network_name, non_binary_image, non_fiat_currency, other, other_entity, promotional_material]."
    VALID_VALUES_FOR_CARD_LOGO  = String.static_array("geographic_location", "inappropriate", "network_name", "non_binary_image", "non_fiat_currency", "other", "other_entity", "promotional_material")

    # The reason(s) the carrier text was rejected.
    @[JSON::Field(key: "carrier_text", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter carrier_text : Array(String)? = nil
    ERROR_MESSAGE_FOR_CARRIER_TEXT = "invalid value for \"carrier_text\", must be one of [geographic_location, inappropriate, network_name, non_fiat_currency, other, other_entity, promotional_material]."
    VALID_VALUES_FOR_CARRIER_TEXT  = String.static_array("geographic_location", "inappropriate", "network_name", "non_fiat_currency", "other", "other_entity", "promotional_material")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @card_logo : Array(String)? = nil,
      @carrier_text : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_card_logo = @card_logo).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARD_LOGO) unless OpenApi::EnumValidator.valid?(_card_logo, VALID_VALUES_FOR_CARD_LOGO)
      end
      unless (_carrier_text = @carrier_text).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARRIER_TEXT) unless OpenApi::EnumValidator.valid?(_carrier_text, VALID_VALUES_FOR_CARRIER_TEXT)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_card_logo = @card_logo).nil?
        return false unless OpenApi::EnumValidator.valid?(_card_logo, VALID_VALUES_FOR_CARD_LOGO)
      end

      unless (_carrier_text = @carrier_text).nil?
        return false unless OpenApi::EnumValidator.valid?(_carrier_text, VALID_VALUES_FOR_CARRIER_TEXT)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_logo Object to be assigned
    def card_logo=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("card_logo", new_value, VALID_VALUES_FOR_CARD_LOGO)
      end

      @card_logo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] carrier_text Object to be assigned
    def carrier_text=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("carrier_text", new_value, VALID_VALUES_FOR_CARRIER_TEXT)
      end

      @carrier_text = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@card_logo, @carrier_text)
  end
end
