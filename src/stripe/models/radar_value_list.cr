#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Value lists allow you to group values together which can then be referenced in rules.  Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class RadarValueList
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # The name of the value list for use in rules.
    @[JSON::Field(key: "alias", type: String)]
    getter _alias : String

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # The name or email address of the user who created this value list.
    @[JSON::Field(key: "created_by", type: String)]
    getter created_by : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
    @[JSON::Field(key: "item_type", type: String)]
    getter item_type : String

    ENUM_VALIDATOR_FOR_ITEM_TYPE = EnumValidator.new("item_type", "String", ["card_bin", "card_fingerprint", "case_sensitive_string", "country", "customer_id", "email", "ip_address", "string"])

    @[JSON::Field(key: "list_items", type: RadarListListItemList)]
    property list_items : RadarListListItemList

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # The name of the value list.
    @[JSON::Field(key: "name", type: String)]
    getter name : String

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["radar.value_list"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_alias : String,
      @created : Int64,
      @created_by : String,
      @id : String,
      @item_type : String,
      @list_items : RadarListListItemList,
      @livemode : Bool,
      @metadata : Hash(String, String),
      @name : String,
      @object : String
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @_alias.to_s.size > 5000
        invalid_properties.push("invalid value for \"_alias\", the character length must be smaller than or equal to 5000.")
      end

      if @created_by.to_s.size > 5000
        invalid_properties.push("invalid value for \"created_by\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_ITEM_TYPE.error_message) unless ENUM_VALIDATOR_FOR_ITEM_TYPE.valid?(@item_type, false)

      if @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @_alias.to_s.size > 5000
      return false if @created_by.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_ITEM_TYPE.valid?(@item_type, false)
      return false if @name.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] _alias Value to be assigned
    def _alias=(_alias : String)
      if _alias.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_alias\", the character length must be smaller than or equal to 5000.")
      end

      @_alias = _alias
    end

    # Custom attribute writer method with validation
    # @param [Object] created_by Value to be assigned
    def created_by=(created_by : String)
      if created_by.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"created_by\", the character length must be smaller than or equal to 5000.")
      end

      @created_by = created_by
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_type Object to be assigned
    def item_type=(item_type : String)
      ENUM_VALIDATOR_FOR_ITEM_TYPE.valid!(item_type, false)
      @item_type = item_type
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name : String)
      if name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_alias, @created, @created_by, @id, @item_type, @list_items, @livemode, @metadata, @name, @object)
  end
end
