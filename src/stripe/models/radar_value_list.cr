#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Value lists allow you to group values together which can then be referenced in rules.  Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
  class RadarValueList
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The name of the value list for use in rules.
    @[JSON::Field(key: "alias", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _alias : String? = nil
    MAX_LENGTH_FOR__ALIAS = 5000

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # The name or email address of the user who created this value list.
    @[JSON::Field(key: "created_by", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created_by : String? = nil
    MAX_LENGTH_FOR_CREATED_BY = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
    @[JSON::Field(key: "item_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter item_type : String? = nil
    ERROR_MESSAGE_FOR_ITEM_TYPE = "invalid value for \"item_type\", must be one of [card_bin, card_fingerprint, case_sensitive_string, country, customer_id, email, ip_address, string]."
    VALID_VALUES_FOR_ITEM_TYPE  = StaticArray["card_bin", "card_fingerprint", "case_sensitive_string", "country", "customer_id", "email", "ip_address", "string"]

    @[JSON::Field(key: "list_items", type: Stripe::RadarListListItemList1?, default: nil, required: true, nullable: false, emit_null: false)]
    getter list_items : Stripe::RadarListListItemList1? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The name of the value list.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [radar.value_list]."
    VALID_VALUES_FOR_OBJECT  = StaticArray["radar.value_list"]

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_alias : String? = nil,
      @created : Int64? = nil,
      @created_by : String? = nil,
      @id : String? = nil,
      @item_type : String? = nil,
      @list_items : Stripe::RadarListListItemList1? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @name : String? = nil,
      @object : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_alias\" is required and cannot be null") if @_alias.nil?

      unless (__alias = @_alias).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_alias", __alias.to_s.size, MAX_LENGTH_FOR__ALIAS)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"created_by\" is required and cannot be null") if @created_by.nil?

      unless (_created_by = @created_by).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("created_by", _created_by.to_s.size, MAX_LENGTH_FOR_CREATED_BY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"item_type\" is required and cannot be null") if @item_type.nil?

      unless (_item_type = @item_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ITEM_TYPE) unless OpenApi::EnumValidator.valid?(_item_type, VALID_VALUES_FOR_ITEM_TYPE)
      end
      invalid_properties.push("\"list_items\" is required and cannot be null") if @list_items.nil?

      unless (_list_items = @list_items).nil?
        invalid_properties.concat(_list_items.list_invalid_properties_for("list_items")) if _list_items.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_alias.nil?
      unless (__alias = @_alias).nil?
        return false if __alias.to_s.size > MAX_LENGTH_FOR__ALIAS
      end

      return false if @created.nil?

      return false if @created_by.nil?
      unless (_created_by = @created_by).nil?
        return false if _created_by.to_s.size > MAX_LENGTH_FOR_CREATED_BY
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @item_type.nil?
      unless (_item_type = @item_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_item_type, VALID_VALUES_FOR_ITEM_TYPE)
      end

      return false if @list_items.nil?
      unless (_list_items = @list_items).nil?
        return false if _list_items.is_a?(OpenApi::Validatable) && !_list_items.valid?
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @name.nil?
      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _alias Object to be assigned
    def _alias=(_alias : String?)
      if _alias.nil?
        raise ArgumentError.new("\"_alias\" is required and cannot be null")
      end
      __alias = _alias.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("_alias", __alias.to_s.size, MAX_LENGTH_FOR__ALIAS)
      @_alias = __alias
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_by Object to be assigned
    def created_by=(created_by : String?)
      if created_by.nil?
        raise ArgumentError.new("\"created_by\" is required and cannot be null")
      end
      _created_by = created_by.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("created_by", _created_by.to_s.size, MAX_LENGTH_FOR_CREATED_BY)
      @created_by = _created_by
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_type Object to be assigned
    def item_type=(item_type : String?)
      if item_type.nil?
        raise ArgumentError.new("\"item_type\" is required and cannot be null")
      end
      _item_type = item_type.not_nil!
      OpenApi::EnumValidator.validate("item_type", _item_type, VALID_VALUES_FOR_ITEM_TYPE)
      @item_type = _item_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] list_items Object to be assigned
    def list_items=(list_items : Stripe::RadarListListItemList1?)
      if list_items.nil?
        raise ArgumentError.new("\"list_items\" is required and cannot be null")
      end
      _list_items = list_items.not_nil!
      _list_items.validate if _list_items.is_a?(OpenApi::Validatable)
      @list_items = _list_items
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        raise ArgumentError.new("\"name\" is required and cannot be null")
      end
      _name = name.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
      @name = _name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_alias, @created, @created_by, @id, @item_type, @list_items, @livemode, @metadata, @name, @object)
  end
end
