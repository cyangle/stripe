#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentNextActionAlipayHandleRedirect
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
    @[JSON::Field(key: "native_data", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: native_data.nil? && !native_data_present?)]
    getter native_data : String? = nil

    @[JSON::Field(ignore: true)]
    property? native_data_present : Bool = false

    # The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
    @[JSON::Field(key: "native_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: native_url.nil? && !native_url_present?)]
    getter native_url : String? = nil

    @[JSON::Field(ignore: true)]
    property? native_url_present : Bool = false

    # If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
    @[JSON::Field(key: "return_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: return_url.nil? && !return_url_present?)]
    getter return_url : String? = nil

    @[JSON::Field(ignore: true)]
    property? return_url_present : Bool = false

    # The URL you must redirect your customer to in order to authenticate the payment.
    @[JSON::Field(key: "url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: url.nil? && !url_present?)]
    getter url : String? = nil

    @[JSON::Field(ignore: true)]
    property? url_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @native_data : String? = nil,
      @native_url : String? = nil,
      @return_url : String? = nil,
      @url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _native_data = @native_data
        if _native_data.to_s.size > 5000
          invalid_properties.push("invalid value for \"native_data\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _native_url = @native_url
        if _native_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"native_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _return_url = @return_url
        if _return_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"return_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _url = @url
        if _url.to_s.size > 5000
          invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _native_data = @native_data
        return false if _native_data.to_s.size > 5000
      end
      if _native_url = @native_url
        return false if _native_url.to_s.size > 5000
      end
      if _return_url = @return_url
        return false if _return_url.to_s.size > 5000
      end
      if _url = @url
        return false if _url.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] native_data Object to be assigned
    def native_data=(native_data : String?)
      if native_data.nil?
        return @native_data = nil
      end
      _native_data = native_data.not_nil!
      if _native_data.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"native_data\", the character length must be smaller than or equal to 5000.")
      end

      @native_data = _native_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] native_url Object to be assigned
    def native_url=(native_url : String?)
      if native_url.nil?
        return @native_url = nil
      end
      _native_url = native_url.not_nil!
      if _native_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"native_url\", the character length must be smaller than or equal to 5000.")
      end

      @native_url = _native_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_url Object to be assigned
    def return_url=(return_url : String?)
      if return_url.nil?
        return @return_url = nil
      end
      _return_url = return_url.not_nil!
      if _return_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"return_url\", the character length must be smaller than or equal to 5000.")
      end

      @return_url = _return_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(url : String?)
      if url.nil?
        return @url = nil
      end
      _url = url.not_nil!
      if _url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = _url
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@native_data, @native_data_present, @native_url, @native_url_present, @return_url, @return_url_present, @url, @url_present)
  end
end
