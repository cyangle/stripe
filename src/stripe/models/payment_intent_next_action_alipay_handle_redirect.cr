#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentIntentNextActionAlipayHandleRedirect
    include JSON::Serializable
    include JSON::Serializable::Unmapped


    # Optional properties

    # The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
    @[JSON::Field(key: "native_data", type: String?, presence: true, ignore_serialize: native_data.nil? && !native_data_present?)]
    getter native_data : String?

    @[JSON::Field(ignore: true)]
    property? native_data_present : Bool = false

    # The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
    @[JSON::Field(key: "native_url", type: String?, presence: true, ignore_serialize: native_url.nil? && !native_url_present?)]
    getter native_url : String?

    @[JSON::Field(ignore: true)]
    property? native_url_present : Bool = false

    # If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
    @[JSON::Field(key: "return_url", type: String?, presence: true, ignore_serialize: return_url.nil? && !return_url_present?)]
    getter return_url : String?

    @[JSON::Field(ignore: true)]
    property? return_url_present : Bool = false

    # The URL you must redirect your customer to in order to authenticate the payment.
    @[JSON::Field(key: "url", type: String?, presence: true, ignore_serialize: url.nil? && !url_present?)]
    getter url : String?

    @[JSON::Field(ignore: true)]
    property? url_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Optional properties
      @native_data : String? = nil, 
      @native_url : String? = nil, 
      @return_url : String? = nil, 
      @url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@native_data.nil? && @native_data.to_s.size > 5000
        invalid_properties.push("invalid value for \"native_data\", the character length must be smaller than or equal to 5000.")
      end

      if !@native_url.nil? && @native_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"native_url\", the character length must be smaller than or equal to 5000.")
      end

      if !@return_url.nil? && @return_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"return_url\", the character length must be smaller than or equal to 5000.")
      end

      if !@url.nil? && @url.to_s.size > 5000
        invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@native_data.nil? && @native_data.to_s.size > 5000
      return false if !@native_url.nil? && @native_url.to_s.size > 5000
      return false if !@return_url.nil? && @return_url.to_s.size > 5000
      return false if !@url.nil? && @url.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] native_data Value to be assigned
    def native_data=(native_data)
      if !native_data.nil? && native_data.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"native_data\", the character length must be smaller than or equal to 5000.")
      end

      @native_data = native_data
    end

    # Custom attribute writer method with validation
    # @param [Object] native_url Value to be assigned
    def native_url=(native_url)
      if !native_url.nil? && native_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"native_url\", the character length must be smaller than or equal to 5000.")
      end

      @native_url = native_url
    end

    # Custom attribute writer method with validation
    # @param [Object] return_url Value to be assigned
    def return_url=(return_url)
      if !return_url.nil? && return_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"return_url\", the character length must be smaller than or equal to 5000.")
      end

      @return_url = return_url
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if !url.nil? && url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@native_data, @native_url, @return_url, @url)
  end
end
