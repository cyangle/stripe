#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class PaymentMethodReuseAgreementParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used. When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
    @[JSON::Field(key: "position", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter position : String? = nil
    ERROR_MESSAGE_FOR_POSITION = "invalid value for \"position\", must be one of [auto, hidden]."
    VALID_VALUES_FOR_POSITION  = String.static_array("auto", "hidden")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @position : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"position\" is required and cannot be null") if @position.nil?

      unless (_position = @position).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_POSITION) unless OpenApi::EnumValidator.valid?(_position, VALID_VALUES_FOR_POSITION)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @position.nil?
      unless (_position = @position).nil?
        return false unless OpenApi::EnumValidator.valid?(_position, VALID_VALUES_FOR_POSITION)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] position Object to be assigned
    def position=(new_value : String?)
      raise ArgumentError.new("\"position\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("position", new_value, VALID_VALUES_FOR_POSITION)
      end

      @position = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@position)
  end
end
