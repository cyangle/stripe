#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class CardPaymentsSettingsSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "decline_on", type: Stripe::DeclineChargeOnSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter decline_on : Stripe::DeclineChargeOnSpecs? = nil

    @[JSON::Field(key: "statement_descriptor_prefix", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_prefix : String? = nil

    @[JSON::Field(key: "statement_descriptor_prefix_kana", type: Stripe::CardPaymentsSettingsSpecsStatementDescriptorPrefixKana?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_prefix_kana : Stripe::CardPaymentsSettingsSpecsStatementDescriptorPrefixKana? = nil

    @[JSON::Field(key: "statement_descriptor_prefix_kanji", type: Stripe::CardPaymentsSettingsSpecsStatementDescriptorPrefixKana?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_prefix_kanji : Stripe::CardPaymentsSettingsSpecsStatementDescriptorPrefixKana? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @decline_on : Stripe::DeclineChargeOnSpecs? = nil,
      @statement_descriptor_prefix : String? = nil,
      @statement_descriptor_prefix_kana : Stripe::CardPaymentsSettingsSpecsStatementDescriptorPrefixKana? = nil,
      @statement_descriptor_prefix_kanji : Stripe::CardPaymentsSettingsSpecsStatementDescriptorPrefixKana? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _decline_on = @decline_on
        invalid_properties.concat(_decline_on.list_invalid_properties_for("decline_on")) if _decline_on.is_a?(OpenApi::Validatable)
      end
      if _statement_descriptor_prefix = @statement_descriptor_prefix
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_prefix", _statement_descriptor_prefix.to_s.size, 10)
          invalid_properties.push(max_length_error)
        end
      end
      if _statement_descriptor_prefix_kana = @statement_descriptor_prefix_kana
        invalid_properties.concat(_statement_descriptor_prefix_kana.list_invalid_properties_for("statement_descriptor_prefix_kana")) if _statement_descriptor_prefix_kana.is_a?(OpenApi::Validatable)
      end
      if _statement_descriptor_prefix_kanji = @statement_descriptor_prefix_kanji
        invalid_properties.concat(_statement_descriptor_prefix_kanji.list_invalid_properties_for("statement_descriptor_prefix_kanji")) if _statement_descriptor_prefix_kanji.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _decline_on = @decline_on
        return false if _decline_on.is_a?(OpenApi::Validatable) && !_decline_on.valid?
      end
      if _statement_descriptor_prefix = @statement_descriptor_prefix
        return false if _statement_descriptor_prefix.to_s.size > 10
      end
      if _statement_descriptor_prefix_kana = @statement_descriptor_prefix_kana
        return false if _statement_descriptor_prefix_kana.is_a?(OpenApi::Validatable) && !_statement_descriptor_prefix_kana.valid?
      end
      if _statement_descriptor_prefix_kanji = @statement_descriptor_prefix_kanji
        return false if _statement_descriptor_prefix_kanji.is_a?(OpenApi::Validatable) && !_statement_descriptor_prefix_kanji.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decline_on Object to be assigned
    def decline_on=(decline_on : Stripe::DeclineChargeOnSpecs?)
      if decline_on.nil?
        return @decline_on = nil
      end
      _decline_on = decline_on.not_nil!
      _decline_on.validate if _decline_on.is_a?(OpenApi::Validatable)
      @decline_on = _decline_on
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_prefix Object to be assigned
    def statement_descriptor_prefix=(statement_descriptor_prefix : String?)
      if statement_descriptor_prefix.nil?
        return @statement_descriptor_prefix = nil
      end
      _statement_descriptor_prefix = statement_descriptor_prefix.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_prefix", _statement_descriptor_prefix.to_s.size, 10)
        raise ArgumentError.new(max_length_error)
      end

      @statement_descriptor_prefix = _statement_descriptor_prefix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_prefix_kana Object to be assigned
    def statement_descriptor_prefix_kana=(statement_descriptor_prefix_kana : Stripe::CardPaymentsSettingsSpecsStatementDescriptorPrefixKana?)
      if statement_descriptor_prefix_kana.nil?
        return @statement_descriptor_prefix_kana = nil
      end
      _statement_descriptor_prefix_kana = statement_descriptor_prefix_kana.not_nil!
      _statement_descriptor_prefix_kana.validate if _statement_descriptor_prefix_kana.is_a?(OpenApi::Validatable)
      @statement_descriptor_prefix_kana = _statement_descriptor_prefix_kana
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_prefix_kanji Object to be assigned
    def statement_descriptor_prefix_kanji=(statement_descriptor_prefix_kanji : Stripe::CardPaymentsSettingsSpecsStatementDescriptorPrefixKana?)
      if statement_descriptor_prefix_kanji.nil?
        return @statement_descriptor_prefix_kanji = nil
      end
      _statement_descriptor_prefix_kanji = statement_descriptor_prefix_kanji.not_nil!
      _statement_descriptor_prefix_kanji.validate if _statement_descriptor_prefix_kanji.is_a?(OpenApi::Validatable)
      @statement_descriptor_prefix_kanji = _statement_descriptor_prefix_kanji
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@decline_on, @statement_descriptor_prefix, @statement_descriptor_prefix_kana, @statement_descriptor_prefix_kanji)
  end
end
