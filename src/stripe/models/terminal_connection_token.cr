#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Connection Token is used by the Stripe Terminal SDK to connect to a reader.  Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
  class TerminalConnectionToken
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [terminal.connection_token]."
    VALID_VALUES_FOR_OBJECT  = StaticArray["terminal.connection_token"]

    # Your application should pass this token to the Stripe Terminal SDK.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter secret : String? = nil
    MAX_LENGTH_FOR_SECRET = 5000

    # Optional properties

    # The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens).
    @[JSON::Field(key: "location", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter location : String? = nil
    MAX_LENGTH_FOR_LOCATION = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @object : String? = nil,
      @secret : String? = nil,
      # Optional properties
      @location : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      if _object = @object
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"secret\" is required and cannot be null") if @secret.nil?

      if _secret = @secret
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("secret", _secret.to_s.size, MAX_LENGTH_FOR_SECRET)
          invalid_properties.push(max_length_error)
        end
      end
      if _location = @location
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("location", _location.to_s.size, MAX_LENGTH_FOR_LOCATION)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @object.nil?
      if _object = @object
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @secret.nil?
      if _secret = @secret
        return false if _secret.to_s.size > MAX_LENGTH_FOR_SECRET
      end

      if _location = @location
        return false if _location.to_s.size > MAX_LENGTH_FOR_LOCATION
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(secret : String?)
      if secret.nil?
        raise ArgumentError.new("\"secret\" is required and cannot be null")
      end
      _secret = secret.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("secret", _secret.to_s.size, MAX_LENGTH_FOR_SECRET)
      @secret = _secret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(location : String?)
      if location.nil?
        return @location = nil
      end
      _location = location.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("location", _location.to_s.size, MAX_LENGTH_FOR_LOCATION)
      @location = _location
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@object, @secret, @location)
  end
end
