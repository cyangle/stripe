#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  # A billing meter event summary represents an aggregated view of a customer's billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.
  class BillingMeterEventSummary
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`.
    @[JSON::Field(key: "aggregated_value", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter aggregated_value : Float64? = nil

    # End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.
    @[JSON::Field(key: "end_time", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter end_time : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The meter associated with this event summary.
    @[JSON::Field(key: "meter", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter meter : String? = nil
    MAX_LENGTH_FOR_METER = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [billing.meter_event_summary]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("billing.meter_event_summary")

    # Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.
    @[JSON::Field(key: "start_time", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter start_time : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @aggregated_value : Float64? = nil,
      @end_time : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @meter : String? = nil,
      @object : String? = nil,
      @start_time : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"aggregated_value\" is required and cannot be null") if @aggregated_value.nil?

      invalid_properties.push("\"end_time\" is required and cannot be null") if @end_time.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"meter\" is required and cannot be null") if @meter.nil?

      unless (_meter = @meter).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("meter", _meter.to_s.size, MAX_LENGTH_FOR_METER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"start_time\" is required and cannot be null") if @start_time.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @aggregated_value.nil?

      return false if @end_time.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @meter.nil?
      unless (_meter = @meter).nil?
        return false if _meter.to_s.size > MAX_LENGTH_FOR_METER
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @start_time.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aggregated_value Object to be assigned
    def aggregated_value=(new_value : Float64?)
      raise ArgumentError.new("\"aggregated_value\" is required and cannot be null") if new_value.nil?

      @aggregated_value = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_time Object to be assigned
    def end_time=(new_value : Int64?)
      raise ArgumentError.new("\"end_time\" is required and cannot be null") if new_value.nil?

      @end_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] meter Object to be assigned
    def meter=(new_value : String?)
      raise ArgumentError.new("\"meter\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("meter", new_value.to_s.size, MAX_LENGTH_FOR_METER)
      end

      @meter = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_time Object to be assigned
    def start_time=(new_value : Int64?)
      raise ArgumentError.new("\"start_time\" is required and cannot be null") if new_value.nil?

      @start_time = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@aggregated_value, @end_time, @id, @livemode, @meter, @object, @start_time)
  end
end
