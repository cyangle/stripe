#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.
  class SubscriptionDataUpdateParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "effective_date", type: Stripe::SubscriptionDataCreateParamsEffectiveDate?, default: nil, required: false, nullable: false, emit_null: false)]
    getter effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate? = nil

    @[JSON::Field(key: "trial_period_days", type: Stripe::UpdateParams1ApplicationFeeAmount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trial_period_days : Stripe::UpdateParams1ApplicationFeeAmount? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @description : String? = nil,
      @effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate? = nil,
      @trial_period_days : Stripe::UpdateParams1ApplicationFeeAmount? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _description = @description
        if _description.to_s.size > 500
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 500.")
        end
      end
      # This is a model effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate?
      # This is a model trial_period_days : Stripe::UpdateParams1ApplicationFeeAmount?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _description = @description
        return false if _description.to_s.size > 500
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 500
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 500.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] effective_date Object to be assigned
    def effective_date=(effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate?)
      if effective_date.nil?
        return @effective_date = nil
      end
      @effective_date = effective_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_period_days Object to be assigned
    def trial_period_days=(trial_period_days : Stripe::UpdateParams1ApplicationFeeAmount?)
      if trial_period_days.nil?
        return @trial_period_days = nil
      end
      @trial_period_days = trial_period_days
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@description, @effective_date, @trial_period_days)
  end
end
