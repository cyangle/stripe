#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./subscription_data_create_params_effective_date"
require "./subscription_data_create_params_trial_period_days"
require "./subscription_data_invoice_settings_params"
require "./subscription_data_update_params_trial_settings"

module Stripe
  class SubscriptionDataUpdateParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil
    ERROR_MESSAGE_FOR_DESCRIPTION = "invalid value for \"description\", must be one of []."
    VALID_VALUES_FOR_DESCRIPTION  = String.static_array("")

    @[JSON::Field(key: "effective_date", type: Stripe::SubscriptionDataCreateParamsEffectiveDate?, default: nil, required: false, nullable: false, emit_null: false)]
    getter effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate? = nil

    @[JSON::Field(key: "invoice_settings", type: Stripe::SubscriptionDataInvoiceSettingsParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_settings : Stripe::SubscriptionDataInvoiceSettingsParams? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "trial_period_days", type: Stripe::SubscriptionDataCreateParamsTrialPeriodDays?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trial_period_days : Stripe::SubscriptionDataCreateParamsTrialPeriodDays? = nil

    @[JSON::Field(key: "trial_settings", type: Stripe::SubscriptionDataUpdateParamsTrialSettings?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trial_settings : Stripe::SubscriptionDataUpdateParamsTrialSettings? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @description : String? = nil,
      @effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate? = nil,
      @invoice_settings : Stripe::SubscriptionDataInvoiceSettingsParams? = nil,
      @metadata : Hash(String, String)? = nil,
      @trial_period_days : Stripe::SubscriptionDataCreateParamsTrialPeriodDays? = nil,
      @trial_settings : Stripe::SubscriptionDataUpdateParamsTrialSettings? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_description = @description).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_DESCRIPTION) unless OpenApi::EnumValidator.valid?(_description, VALID_VALUES_FOR_DESCRIPTION)
      end
      unless (_effective_date = @effective_date).nil?
        invalid_properties.concat(_effective_date.list_invalid_properties_for("effective_date")) if _effective_date.is_a?(OpenApi::Validatable)
      end
      unless (_invoice_settings = @invoice_settings).nil?
        invalid_properties.concat(_invoice_settings.list_invalid_properties_for("invoice_settings")) if _invoice_settings.is_a?(OpenApi::Validatable)
      end

      unless (_trial_period_days = @trial_period_days).nil?
        invalid_properties.concat(_trial_period_days.list_invalid_properties_for("trial_period_days")) if _trial_period_days.is_a?(OpenApi::Validatable)
      end
      unless (_trial_settings = @trial_settings).nil?
        invalid_properties.concat(_trial_settings.list_invalid_properties_for("trial_settings")) if _trial_settings.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_description = @description).nil?
        return false unless OpenApi::EnumValidator.valid?(_description, VALID_VALUES_FOR_DESCRIPTION)
      end

      unless (_effective_date = @effective_date).nil?
        return false if _effective_date.is_a?(OpenApi::Validatable) && !_effective_date.valid?
      end

      unless (_invoice_settings = @invoice_settings).nil?
        return false if _invoice_settings.is_a?(OpenApi::Validatable) && !_invoice_settings.valid?
      end

      unless (_trial_period_days = @trial_period_days).nil?
        return false if _trial_period_days.is_a?(OpenApi::Validatable) && !_trial_period_days.valid?
      end

      unless (_trial_settings = @trial_settings).nil?
        return false if _trial_settings.is_a?(OpenApi::Validatable) && !_trial_settings.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("description", new_value, VALID_VALUES_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] effective_date Object to be assigned
    def effective_date=(new_value : Stripe::SubscriptionDataCreateParamsEffectiveDate?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @effective_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_settings Object to be assigned
    def invoice_settings=(new_value : Stripe::SubscriptionDataInvoiceSettingsParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice_settings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_period_days Object to be assigned
    def trial_period_days=(new_value : Stripe::SubscriptionDataCreateParamsTrialPeriodDays?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @trial_period_days = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_settings Object to be assigned
    def trial_settings=(new_value : Stripe::SubscriptionDataUpdateParamsTrialSettings?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @trial_settings = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@description, @effective_date, @invoice_settings, @metadata, @trial_period_days, @trial_settings)
  end
end
