#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_dispute_canceled_evidence"
require "./issuing_dispute_duplicate_evidence"
require "./issuing_dispute_fraudulent_evidence"
require "./issuing_dispute_merchandise_not_as_described_evidence"
require "./issuing_dispute_no_valid_authorization_evidence"
require "./issuing_dispute_not_received_evidence"
require "./issuing_dispute_other_evidence"
require "./issuing_dispute_service_not_as_described_evidence"

module Stripe
  #
  class IssuingDisputeEvidence
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The reason for filing the dispute. Its value will match the field containing the evidence.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reason : String? = nil
    ERROR_MESSAGE_FOR_REASON = "invalid value for \"reason\", must be one of [canceled, duplicate, fraudulent, merchandise_not_as_described, no_valid_authorization, not_received, other, service_not_as_described]."
    VALID_VALUES_FOR_REASON  = String.static_array("canceled", "duplicate", "fraudulent", "merchandise_not_as_described", "no_valid_authorization", "not_received", "other", "service_not_as_described")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "canceled", type: Stripe::IssuingDisputeCanceledEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter canceled : Stripe::IssuingDisputeCanceledEvidence? = nil

    @[JSON::Field(key: "duplicate", type: Stripe::IssuingDisputeDuplicateEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter duplicate : Stripe::IssuingDisputeDuplicateEvidence? = nil

    @[JSON::Field(key: "fraudulent", type: Stripe::IssuingDisputeFraudulentEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fraudulent : Stripe::IssuingDisputeFraudulentEvidence? = nil

    @[JSON::Field(key: "merchandise_not_as_described", type: Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter merchandise_not_as_described : Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence? = nil

    @[JSON::Field(key: "no_valid_authorization", type: Stripe::IssuingDisputeNoValidAuthorizationEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter no_valid_authorization : Stripe::IssuingDisputeNoValidAuthorizationEvidence? = nil

    @[JSON::Field(key: "not_received", type: Stripe::IssuingDisputeNotReceivedEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter not_received : Stripe::IssuingDisputeNotReceivedEvidence? = nil

    @[JSON::Field(key: "other", type: Stripe::IssuingDisputeOtherEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter other : Stripe::IssuingDisputeOtherEvidence? = nil

    @[JSON::Field(key: "service_not_as_described", type: Stripe::IssuingDisputeServiceNotAsDescribedEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter service_not_as_described : Stripe::IssuingDisputeServiceNotAsDescribedEvidence? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @reason : String? = nil,
      # Optional properties
      @canceled : Stripe::IssuingDisputeCanceledEvidence? = nil,
      @duplicate : Stripe::IssuingDisputeDuplicateEvidence? = nil,
      @fraudulent : Stripe::IssuingDisputeFraudulentEvidence? = nil,
      @merchandise_not_as_described : Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence? = nil,
      @no_valid_authorization : Stripe::IssuingDisputeNoValidAuthorizationEvidence? = nil,
      @not_received : Stripe::IssuingDisputeNotReceivedEvidence? = nil,
      @other : Stripe::IssuingDisputeOtherEvidence? = nil,
      @service_not_as_described : Stripe::IssuingDisputeServiceNotAsDescribedEvidence? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"reason\" is required and cannot be null") if @reason.nil?

      unless (_reason = @reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REASON) unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end
      unless (_canceled = @canceled).nil?
        invalid_properties.concat(_canceled.list_invalid_properties_for("canceled")) if _canceled.is_a?(OpenApi::Validatable)
      end
      unless (_duplicate = @duplicate).nil?
        invalid_properties.concat(_duplicate.list_invalid_properties_for("duplicate")) if _duplicate.is_a?(OpenApi::Validatable)
      end
      unless (_fraudulent = @fraudulent).nil?
        invalid_properties.concat(_fraudulent.list_invalid_properties_for("fraudulent")) if _fraudulent.is_a?(OpenApi::Validatable)
      end
      unless (_merchandise_not_as_described = @merchandise_not_as_described).nil?
        invalid_properties.concat(_merchandise_not_as_described.list_invalid_properties_for("merchandise_not_as_described")) if _merchandise_not_as_described.is_a?(OpenApi::Validatable)
      end
      unless (_no_valid_authorization = @no_valid_authorization).nil?
        invalid_properties.concat(_no_valid_authorization.list_invalid_properties_for("no_valid_authorization")) if _no_valid_authorization.is_a?(OpenApi::Validatable)
      end
      unless (_not_received = @not_received).nil?
        invalid_properties.concat(_not_received.list_invalid_properties_for("not_received")) if _not_received.is_a?(OpenApi::Validatable)
      end
      unless (_other = @other).nil?
        invalid_properties.concat(_other.list_invalid_properties_for("other")) if _other.is_a?(OpenApi::Validatable)
      end
      unless (_service_not_as_described = @service_not_as_described).nil?
        invalid_properties.concat(_service_not_as_described.list_invalid_properties_for("service_not_as_described")) if _service_not_as_described.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @reason.nil?
      unless (_reason = @reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end

      unless (_canceled = @canceled).nil?
        return false if _canceled.is_a?(OpenApi::Validatable) && !_canceled.valid?
      end

      unless (_duplicate = @duplicate).nil?
        return false if _duplicate.is_a?(OpenApi::Validatable) && !_duplicate.valid?
      end

      unless (_fraudulent = @fraudulent).nil?
        return false if _fraudulent.is_a?(OpenApi::Validatable) && !_fraudulent.valid?
      end

      unless (_merchandise_not_as_described = @merchandise_not_as_described).nil?
        return false if _merchandise_not_as_described.is_a?(OpenApi::Validatable) && !_merchandise_not_as_described.valid?
      end

      unless (_no_valid_authorization = @no_valid_authorization).nil?
        return false if _no_valid_authorization.is_a?(OpenApi::Validatable) && !_no_valid_authorization.valid?
      end

      unless (_not_received = @not_received).nil?
        return false if _not_received.is_a?(OpenApi::Validatable) && !_not_received.valid?
      end

      unless (_other = @other).nil?
        return false if _other.is_a?(OpenApi::Validatable) && !_other.valid?
      end

      unless (_service_not_as_described = @service_not_as_described).nil?
        return false if _service_not_as_described.is_a?(OpenApi::Validatable) && !_service_not_as_described.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(new_value : String?)
      raise ArgumentError.new("\"reason\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("reason", new_value, VALID_VALUES_FOR_REASON)
      end

      @reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] canceled Object to be assigned
    def canceled=(new_value : Stripe::IssuingDisputeCanceledEvidence?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @canceled = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duplicate Object to be assigned
    def duplicate=(new_value : Stripe::IssuingDisputeDuplicateEvidence?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @duplicate = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fraudulent Object to be assigned
    def fraudulent=(new_value : Stripe::IssuingDisputeFraudulentEvidence?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fraudulent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchandise_not_as_described Object to be assigned
    def merchandise_not_as_described=(new_value : Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @merchandise_not_as_described = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] no_valid_authorization Object to be assigned
    def no_valid_authorization=(new_value : Stripe::IssuingDisputeNoValidAuthorizationEvidence?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @no_valid_authorization = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] not_received Object to be assigned
    def not_received=(new_value : Stripe::IssuingDisputeNotReceivedEvidence?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @not_received = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] other Object to be assigned
    def other=(new_value : Stripe::IssuingDisputeOtherEvidence?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @other = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_not_as_described Object to be assigned
    def service_not_as_described=(new_value : Stripe::IssuingDisputeServiceNotAsDescribedEvidence?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @service_not_as_described = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@reason, @canceled, @duplicate, @fraudulent, @merchandise_not_as_described, @no_valid_authorization, @not_received, @other, @service_not_as_described)
  end
end
