#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class IssuingDisputeEvidence
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The reason for filing the dispute. Its value will match the field containing the evidence.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reason : String? = nil

    ENUM_VALIDATOR_FOR_REASON = EnumValidator.new("reason", "String", ["canceled", "duplicate", "fraudulent", "merchandise_not_as_described", "not_received", "other", "service_not_as_described"])

    # Optional properties

    @[JSON::Field(key: "canceled", type: Stripe::IssuingDisputeCanceledEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter canceled : Stripe::IssuingDisputeCanceledEvidence? = nil

    @[JSON::Field(key: "duplicate", type: Stripe::IssuingDisputeDuplicateEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter duplicate : Stripe::IssuingDisputeDuplicateEvidence? = nil

    @[JSON::Field(key: "fraudulent", type: Stripe::IssuingDisputeFraudulentEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fraudulent : Stripe::IssuingDisputeFraudulentEvidence? = nil

    @[JSON::Field(key: "merchandise_not_as_described", type: Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter merchandise_not_as_described : Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence? = nil

    @[JSON::Field(key: "not_received", type: Stripe::IssuingDisputeNotReceivedEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter not_received : Stripe::IssuingDisputeNotReceivedEvidence? = nil

    @[JSON::Field(key: "other", type: Stripe::IssuingDisputeOtherEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter other : Stripe::IssuingDisputeOtherEvidence? = nil

    @[JSON::Field(key: "service_not_as_described", type: Stripe::IssuingDisputeServiceNotAsDescribedEvidence?, default: nil, required: false, nullable: false, emit_null: false)]
    getter service_not_as_described : Stripe::IssuingDisputeServiceNotAsDescribedEvidence? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @reason : String? = nil,
      # Optional properties
      @canceled : Stripe::IssuingDisputeCanceledEvidence? = nil,
      @duplicate : Stripe::IssuingDisputeDuplicateEvidence? = nil,
      @fraudulent : Stripe::IssuingDisputeFraudulentEvidence? = nil,
      @merchandise_not_as_described : Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence? = nil,
      @not_received : Stripe::IssuingDisputeNotReceivedEvidence? = nil,
      @other : Stripe::IssuingDisputeOtherEvidence? = nil,
      @service_not_as_described : Stripe::IssuingDisputeServiceNotAsDescribedEvidence? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_REASON.error_message) unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason, false)
      # This is a model canceled : Stripe::IssuingDisputeCanceledEvidence?
      # This is a model duplicate : Stripe::IssuingDisputeDuplicateEvidence?
      # This is a model fraudulent : Stripe::IssuingDisputeFraudulentEvidence?
      # This is a model merchandise_not_as_described : Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence?
      # This is a model not_received : Stripe::IssuingDisputeNotReceivedEvidence?
      # This is a model other : Stripe::IssuingDisputeOtherEvidence?
      # This is a model service_not_as_described : Stripe::IssuingDisputeServiceNotAsDescribedEvidence?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason, false)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason : String?)
      if reason.nil?
        raise ArgumentError.new("\"reason\" is required and cannot be null")
      end
      _reason = reason.not_nil!
      ENUM_VALIDATOR_FOR_REASON.valid!(_reason)
      @reason = reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] canceled Object to be assigned
    def canceled=(canceled : Stripe::IssuingDisputeCanceledEvidence?)
      if canceled.nil?
        return @canceled = nil
      end
      @canceled = canceled
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duplicate Object to be assigned
    def duplicate=(duplicate : Stripe::IssuingDisputeDuplicateEvidence?)
      if duplicate.nil?
        return @duplicate = nil
      end
      @duplicate = duplicate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fraudulent Object to be assigned
    def fraudulent=(fraudulent : Stripe::IssuingDisputeFraudulentEvidence?)
      if fraudulent.nil?
        return @fraudulent = nil
      end
      @fraudulent = fraudulent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchandise_not_as_described Object to be assigned
    def merchandise_not_as_described=(merchandise_not_as_described : Stripe::IssuingDisputeMerchandiseNotAsDescribedEvidence?)
      if merchandise_not_as_described.nil?
        return @merchandise_not_as_described = nil
      end
      @merchandise_not_as_described = merchandise_not_as_described
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] not_received Object to be assigned
    def not_received=(not_received : Stripe::IssuingDisputeNotReceivedEvidence?)
      if not_received.nil?
        return @not_received = nil
      end
      @not_received = not_received
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] other Object to be assigned
    def other=(other : Stripe::IssuingDisputeOtherEvidence?)
      if other.nil?
        return @other = nil
      end
      @other = other
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_not_as_described Object to be assigned
    def service_not_as_described=(service_not_as_described : Stripe::IssuingDisputeServiceNotAsDescribedEvidence?)
      if service_not_as_described.nil?
        return @service_not_as_described = nil
      end
      @service_not_as_described = service_not_as_described
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@reason, @canceled, @duplicate, @fraudulent, @merchandise_not_as_described, @not_received, @other, @service_not_as_described)
  end
end
