#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class DeleteSubscriptionsSubscriptionExposedIdRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items.
    @[JSON::Field(key: "invoice_now", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_now : Bool? = nil

    # Will generate a proration invoice item that credits remaining unused time until the subscription period end.
    @[JSON::Field(key: "prorate", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter prorate : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @expand : Array(String)? = nil,
      @invoice_now : Bool? = nil,
      @prorate : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      _expand = expand.not_nil!
      @expand = _expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_now Object to be assigned
    def invoice_now=(invoice_now : Bool?)
      if invoice_now.nil?
        return @invoice_now = nil
      end
      _invoice_now = invoice_now.not_nil!
      @invoice_now = _invoice_now
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prorate Object to be assigned
    def prorate=(prorate : Bool?)
      if prorate.nil?
        return @prorate = nil
      end
      _prorate = prorate.not_nil!
      @prorate = _prorate
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@expand, @invoice_now, @prorate)
  end
end
