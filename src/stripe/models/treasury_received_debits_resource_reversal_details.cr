#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class TreasuryReceivedDebitsResourceReversalDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time before which a ReceivedDebit can be reversed.
    @[JSON::Field(key: "deadline", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter deadline : Int64? = nil

    # Set if a ReceivedDebit can't be reversed.
    @[JSON::Field(key: "restricted_reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter restricted_reason : String? = nil
    ERROR_MESSAGE_FOR_RESTRICTED_REASON = "invalid value for \"restricted_reason\", must be one of [already_reversed, deadline_passed, network_restricted, other, source_flow_restricted]."
    VALID_VALUES_FOR_RESTRICTED_REASON  = String.static_array("already_reversed", "deadline_passed", "network_restricted", "other", "source_flow_restricted")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @deadline : Int64? = nil,
      @restricted_reason : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_restricted_reason = @restricted_reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_RESTRICTED_REASON) unless OpenApi::EnumValidator.valid?(_restricted_reason, VALID_VALUES_FOR_RESTRICTED_REASON)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_restricted_reason = @restricted_reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_restricted_reason, VALID_VALUES_FOR_RESTRICTED_REASON)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deadline Object to be assigned
    def deadline=(new_value : Int64?)
      @deadline = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] restricted_reason Object to be assigned
    def restricted_reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("restricted_reason", new_value, VALID_VALUES_FOR_RESTRICTED_REASON)
      end

      @restricted_reason = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@deadline, @restricted_reason)
  end
end
