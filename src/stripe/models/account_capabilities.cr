#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AccountCapabilities
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
    @[JSON::Field(key: "acss_debit_payments", type: String?, presence: true, ignore_serialize: acss_debit_payments.nil? && !acss_debit_payments_present?)]
    getter acss_debit_payments : String?

    @[JSON::Field(ignore: true)]
    property? acss_debit_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS = EnumValidator.new("acss_debit_payments", "String", ["active", "inactive", "pending"])

    # The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
    @[JSON::Field(key: "affirm_payments", type: String?, presence: true, ignore_serialize: affirm_payments.nil? && !affirm_payments_present?)]
    getter affirm_payments : String?

    @[JSON::Field(ignore: true)]
    property? affirm_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS = EnumValidator.new("affirm_payments", "String", ["active", "inactive", "pending"])

    # The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    @[JSON::Field(key: "afterpay_clearpay_payments", type: String?, presence: true, ignore_serialize: afterpay_clearpay_payments.nil? && !afterpay_clearpay_payments_present?)]
    getter afterpay_clearpay_payments : String?

    @[JSON::Field(ignore: true)]
    property? afterpay_clearpay_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS = EnumValidator.new("afterpay_clearpay_payments", "String", ["active", "inactive", "pending"])

    # The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    @[JSON::Field(key: "au_becs_debit_payments", type: String?, presence: true, ignore_serialize: au_becs_debit_payments.nil? && !au_becs_debit_payments_present?)]
    getter au_becs_debit_payments : String?

    @[JSON::Field(ignore: true)]
    property? au_becs_debit_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS = EnumValidator.new("au_becs_debit_payments", "String", ["active", "inactive", "pending"])

    # The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    @[JSON::Field(key: "bacs_debit_payments", type: String?, presence: true, ignore_serialize: bacs_debit_payments.nil? && !bacs_debit_payments_present?)]
    getter bacs_debit_payments : String?

    @[JSON::Field(ignore: true)]
    property? bacs_debit_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS = EnumValidator.new("bacs_debit_payments", "String", ["active", "inactive", "pending"])

    # The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    @[JSON::Field(key: "bancontact_payments", type: String?, presence: true, ignore_serialize: bancontact_payments.nil? && !bancontact_payments_present?)]
    getter bancontact_payments : String?

    @[JSON::Field(ignore: true)]
    property? bancontact_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS = EnumValidator.new("bancontact_payments", "String", ["active", "inactive", "pending"])

    # The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
    @[JSON::Field(key: "bank_transfer_payments", type: String?, presence: true, ignore_serialize: bank_transfer_payments.nil? && !bank_transfer_payments_present?)]
    getter bank_transfer_payments : String?

    @[JSON::Field(ignore: true)]
    property? bank_transfer_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS = EnumValidator.new("bank_transfer_payments", "String", ["active", "inactive", "pending"])

    # The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
    @[JSON::Field(key: "boleto_payments", type: String?, presence: true, ignore_serialize: boleto_payments.nil? && !boleto_payments_present?)]
    getter boleto_payments : String?

    @[JSON::Field(ignore: true)]
    property? boleto_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS = EnumValidator.new("boleto_payments", "String", ["active", "inactive", "pending"])

    # The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    @[JSON::Field(key: "card_issuing", type: String?, presence: true, ignore_serialize: card_issuing.nil? && !card_issuing_present?)]
    getter card_issuing : String?

    @[JSON::Field(ignore: true)]
    property? card_issuing_present : Bool = false

    ENUM_VALIDATOR_FOR_CARD_ISSUING = EnumValidator.new("card_issuing", "String", ["active", "inactive", "pending"])

    # The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    @[JSON::Field(key: "card_payments", type: String?, presence: true, ignore_serialize: card_payments.nil? && !card_payments_present?)]
    getter card_payments : String?

    @[JSON::Field(ignore: true)]
    property? card_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_CARD_PAYMENTS = EnumValidator.new("card_payments", "String", ["active", "inactive", "pending"])

    # The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    @[JSON::Field(key: "cartes_bancaires_payments", type: String?, presence: true, ignore_serialize: cartes_bancaires_payments.nil? && !cartes_bancaires_payments_present?)]
    getter cartes_bancaires_payments : String?

    @[JSON::Field(ignore: true)]
    property? cartes_bancaires_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS = EnumValidator.new("cartes_bancaires_payments", "String", ["active", "inactive", "pending"])

    # The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    @[JSON::Field(key: "eps_payments", type: String?, presence: true, ignore_serialize: eps_payments.nil? && !eps_payments_present?)]
    getter eps_payments : String?

    @[JSON::Field(ignore: true)]
    property? eps_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_EPS_PAYMENTS = EnumValidator.new("eps_payments", "String", ["active", "inactive", "pending"])

    # The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    @[JSON::Field(key: "fpx_payments", type: String?, presence: true, ignore_serialize: fpx_payments.nil? && !fpx_payments_present?)]
    getter fpx_payments : String?

    @[JSON::Field(ignore: true)]
    property? fpx_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_FPX_PAYMENTS = EnumValidator.new("fpx_payments", "String", ["active", "inactive", "pending"])

    # The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    @[JSON::Field(key: "giropay_payments", type: String?, presence: true, ignore_serialize: giropay_payments.nil? && !giropay_payments_present?)]
    getter giropay_payments : String?

    @[JSON::Field(ignore: true)]
    property? giropay_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS = EnumValidator.new("giropay_payments", "String", ["active", "inactive", "pending"])

    # The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    @[JSON::Field(key: "grabpay_payments", type: String?, presence: true, ignore_serialize: grabpay_payments.nil? && !grabpay_payments_present?)]
    getter grabpay_payments : String?

    @[JSON::Field(ignore: true)]
    property? grabpay_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS = EnumValidator.new("grabpay_payments", "String", ["active", "inactive", "pending"])

    # The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    @[JSON::Field(key: "ideal_payments", type: String?, presence: true, ignore_serialize: ideal_payments.nil? && !ideal_payments_present?)]
    getter ideal_payments : String?

    @[JSON::Field(ignore: true)]
    property? ideal_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS = EnumValidator.new("ideal_payments", "String", ["active", "inactive", "pending"])

    # The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    @[JSON::Field(key: "jcb_payments", type: String?, presence: true, ignore_serialize: jcb_payments.nil? && !jcb_payments_present?)]
    getter jcb_payments : String?

    @[JSON::Field(ignore: true)]
    property? jcb_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_JCB_PAYMENTS = EnumValidator.new("jcb_payments", "String", ["active", "inactive", "pending"])

    # The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
    @[JSON::Field(key: "klarna_payments", type: String?, presence: true, ignore_serialize: klarna_payments.nil? && !klarna_payments_present?)]
    getter klarna_payments : String?

    @[JSON::Field(ignore: true)]
    property? klarna_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS = EnumValidator.new("klarna_payments", "String", ["active", "inactive", "pending"])

    # The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
    @[JSON::Field(key: "konbini_payments", type: String?, presence: true, ignore_serialize: konbini_payments.nil? && !konbini_payments_present?)]
    getter konbini_payments : String?

    @[JSON::Field(ignore: true)]
    property? konbini_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS = EnumValidator.new("konbini_payments", "String", ["active", "inactive", "pending"])

    # The status of the legacy payments capability of the account.
    @[JSON::Field(key: "legacy_payments", type: String?, presence: true, ignore_serialize: legacy_payments.nil? && !legacy_payments_present?)]
    getter legacy_payments : String?

    @[JSON::Field(ignore: true)]
    property? legacy_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS = EnumValidator.new("legacy_payments", "String", ["active", "inactive", "pending"])

    # The status of the link_payments capability of the account, or whether the account can directly process Link charges.
    @[JSON::Field(key: "link_payments", type: String?, presence: true, ignore_serialize: link_payments.nil? && !link_payments_present?)]
    getter link_payments : String?

    @[JSON::Field(ignore: true)]
    property? link_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_LINK_PAYMENTS = EnumValidator.new("link_payments", "String", ["active", "inactive", "pending"])

    # The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    @[JSON::Field(key: "oxxo_payments", type: String?, presence: true, ignore_serialize: oxxo_payments.nil? && !oxxo_payments_present?)]
    getter oxxo_payments : String?

    @[JSON::Field(ignore: true)]
    property? oxxo_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_OXXO_PAYMENTS = EnumValidator.new("oxxo_payments", "String", ["active", "inactive", "pending"])

    # The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    @[JSON::Field(key: "p24_payments", type: String?, presence: true, ignore_serialize: p24_payments.nil? && !p24_payments_present?)]
    getter p24_payments : String?

    @[JSON::Field(ignore: true)]
    property? p24_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_P24_PAYMENTS = EnumValidator.new("p24_payments", "String", ["active", "inactive", "pending"])

    # The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
    @[JSON::Field(key: "paynow_payments", type: String?, presence: true, ignore_serialize: paynow_payments.nil? && !paynow_payments_present?)]
    getter paynow_payments : String?

    @[JSON::Field(ignore: true)]
    property? paynow_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS = EnumValidator.new("paynow_payments", "String", ["active", "inactive", "pending"])

    # The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    @[JSON::Field(key: "sepa_debit_payments", type: String?, presence: true, ignore_serialize: sepa_debit_payments.nil? && !sepa_debit_payments_present?)]
    getter sepa_debit_payments : String?

    @[JSON::Field(ignore: true)]
    property? sepa_debit_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS = EnumValidator.new("sepa_debit_payments", "String", ["active", "inactive", "pending"])

    # The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    @[JSON::Field(key: "sofort_payments", type: String?, presence: true, ignore_serialize: sofort_payments.nil? && !sofort_payments_present?)]
    getter sofort_payments : String?

    @[JSON::Field(ignore: true)]
    property? sofort_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS = EnumValidator.new("sofort_payments", "String", ["active", "inactive", "pending"])

    # The status of the tax reporting 1099-K (US) capability of the account.
    @[JSON::Field(key: "tax_reporting_us_1099_k", type: String?, presence: true, ignore_serialize: tax_reporting_us_1099_k.nil? && !tax_reporting_us_1099_k_present?)]
    getter tax_reporting_us_1099_k : String?

    @[JSON::Field(ignore: true)]
    property? tax_reporting_us_1099_k_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K = EnumValidator.new("tax_reporting_us_1099_k", "String", ["active", "inactive", "pending"])

    # The status of the tax reporting 1099-MISC (US) capability of the account.
    @[JSON::Field(key: "tax_reporting_us_1099_misc", type: String?, presence: true, ignore_serialize: tax_reporting_us_1099_misc.nil? && !tax_reporting_us_1099_misc_present?)]
    getter tax_reporting_us_1099_misc : String?

    @[JSON::Field(ignore: true)]
    property? tax_reporting_us_1099_misc_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC = EnumValidator.new("tax_reporting_us_1099_misc", "String", ["active", "inactive", "pending"])

    # The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    @[JSON::Field(key: "transfers", type: String?, presence: true, ignore_serialize: transfers.nil? && !transfers_present?)]
    getter transfers : String?

    @[JSON::Field(ignore: true)]
    property? transfers_present : Bool = false

    ENUM_VALIDATOR_FOR_TRANSFERS = EnumValidator.new("transfers", "String", ["active", "inactive", "pending"])

    # The status of the banking capability, or whether the account can have bank accounts.
    @[JSON::Field(key: "treasury", type: String?, presence: true, ignore_serialize: treasury.nil? && !treasury_present?)]
    getter treasury : String?

    @[JSON::Field(ignore: true)]
    property? treasury_present : Bool = false

    ENUM_VALIDATOR_FOR_TREASURY = EnumValidator.new("treasury", "String", ["active", "inactive", "pending"])

    # The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
    @[JSON::Field(key: "us_bank_account_ach_payments", type: String?, presence: true, ignore_serialize: us_bank_account_ach_payments.nil? && !us_bank_account_ach_payments_present?)]
    getter us_bank_account_ach_payments : String?

    @[JSON::Field(ignore: true)]
    property? us_bank_account_ach_payments_present : Bool = false

    ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS = EnumValidator.new("us_bank_account_ach_payments", "String", ["active", "inactive", "pending"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit_payments : String? = nil,
      @affirm_payments : String? = nil,
      @afterpay_clearpay_payments : String? = nil,
      @au_becs_debit_payments : String? = nil,
      @bacs_debit_payments : String? = nil,
      @bancontact_payments : String? = nil,
      @bank_transfer_payments : String? = nil,
      @boleto_payments : String? = nil,
      @card_issuing : String? = nil,
      @card_payments : String? = nil,
      @cartes_bancaires_payments : String? = nil,
      @eps_payments : String? = nil,
      @fpx_payments : String? = nil,
      @giropay_payments : String? = nil,
      @grabpay_payments : String? = nil,
      @ideal_payments : String? = nil,
      @jcb_payments : String? = nil,
      @klarna_payments : String? = nil,
      @konbini_payments : String? = nil,
      @legacy_payments : String? = nil,
      @link_payments : String? = nil,
      @oxxo_payments : String? = nil,
      @p24_payments : String? = nil,
      @paynow_payments : String? = nil,
      @sepa_debit_payments : String? = nil,
      @sofort_payments : String? = nil,
      @tax_reporting_us_1099_k : String? = nil,
      @tax_reporting_us_1099_misc : String? = nil,
      @transfers : String? = nil,
      @treasury : String? = nil,
      @us_bank_account_ach_payments : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS.valid?(@acss_debit_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS.valid?(@affirm_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS.valid?(@afterpay_clearpay_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS.valid?(@au_becs_debit_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS.valid?(@bacs_debit_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS.valid?(@bancontact_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS.valid?(@bank_transfer_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS.valid?(@boleto_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CARD_ISSUING.error_message) unless ENUM_VALIDATOR_FOR_CARD_ISSUING.valid?(@card_issuing)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CARD_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_CARD_PAYMENTS.valid?(@card_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS.valid?(@cartes_bancaires_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_EPS_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_EPS_PAYMENTS.valid?(@eps_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_FPX_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_FPX_PAYMENTS.valid?(@fpx_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS.valid?(@giropay_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS.valid?(@grabpay_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS.valid?(@ideal_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_JCB_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_JCB_PAYMENTS.valid?(@jcb_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS.valid?(@klarna_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS.valid?(@konbini_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS.valid?(@legacy_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_LINK_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_LINK_PAYMENTS.valid?(@link_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_OXXO_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_OXXO_PAYMENTS.valid?(@oxxo_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_P24_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_P24_PAYMENTS.valid?(@p24_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS.valid?(@paynow_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS.valid?(@sepa_debit_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS.valid?(@sofort_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K.error_message) unless ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K.valid?(@tax_reporting_us_1099_k)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC.error_message) unless ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC.valid?(@tax_reporting_us_1099_misc)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TRANSFERS.error_message) unless ENUM_VALIDATOR_FOR_TRANSFERS.valid?(@transfers)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TREASURY.error_message) unless ENUM_VALIDATOR_FOR_TREASURY.valid?(@treasury)

      invalid_properties.push(ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS.valid?(@us_bank_account_ach_payments)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS.valid?(@acss_debit_payments)
      return false unless ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS.valid?(@affirm_payments)
      return false unless ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS.valid?(@afterpay_clearpay_payments)
      return false unless ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS.valid?(@au_becs_debit_payments)
      return false unless ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS.valid?(@bacs_debit_payments)
      return false unless ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS.valid?(@bancontact_payments)
      return false unless ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS.valid?(@bank_transfer_payments)
      return false unless ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS.valid?(@boleto_payments)
      return false unless ENUM_VALIDATOR_FOR_CARD_ISSUING.valid?(@card_issuing)
      return false unless ENUM_VALIDATOR_FOR_CARD_PAYMENTS.valid?(@card_payments)
      return false unless ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS.valid?(@cartes_bancaires_payments)
      return false unless ENUM_VALIDATOR_FOR_EPS_PAYMENTS.valid?(@eps_payments)
      return false unless ENUM_VALIDATOR_FOR_FPX_PAYMENTS.valid?(@fpx_payments)
      return false unless ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS.valid?(@giropay_payments)
      return false unless ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS.valid?(@grabpay_payments)
      return false unless ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS.valid?(@ideal_payments)
      return false unless ENUM_VALIDATOR_FOR_JCB_PAYMENTS.valid?(@jcb_payments)
      return false unless ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS.valid?(@klarna_payments)
      return false unless ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS.valid?(@konbini_payments)
      return false unless ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS.valid?(@legacy_payments)
      return false unless ENUM_VALIDATOR_FOR_LINK_PAYMENTS.valid?(@link_payments)
      return false unless ENUM_VALIDATOR_FOR_OXXO_PAYMENTS.valid?(@oxxo_payments)
      return false unless ENUM_VALIDATOR_FOR_P24_PAYMENTS.valid?(@p24_payments)
      return false unless ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS.valid?(@paynow_payments)
      return false unless ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS.valid?(@sepa_debit_payments)
      return false unless ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS.valid?(@sofort_payments)
      return false unless ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K.valid?(@tax_reporting_us_1099_k)
      return false unless ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC.valid?(@tax_reporting_us_1099_misc)
      return false unless ENUM_VALIDATOR_FOR_TRANSFERS.valid?(@transfers)
      return false unless ENUM_VALIDATOR_FOR_TREASURY.valid?(@treasury)
      return false unless ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS.valid?(@us_bank_account_ach_payments)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit_payments Object to be assigned
    def acss_debit_payments=(acss_debit_payments : String?)
      ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS.valid!(acss_debit_payments)
      @acss_debit_payments = acss_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm_payments Object to be assigned
    def affirm_payments=(affirm_payments : String?)
      ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS.valid!(affirm_payments)
      @affirm_payments = affirm_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay_payments Object to be assigned
    def afterpay_clearpay_payments=(afterpay_clearpay_payments : String?)
      ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS.valid!(afterpay_clearpay_payments)
      @afterpay_clearpay_payments = afterpay_clearpay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit_payments Object to be assigned
    def au_becs_debit_payments=(au_becs_debit_payments : String?)
      ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS.valid!(au_becs_debit_payments)
      @au_becs_debit_payments = au_becs_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit_payments Object to be assigned
    def bacs_debit_payments=(bacs_debit_payments : String?)
      ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS.valid!(bacs_debit_payments)
      @bacs_debit_payments = bacs_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact_payments Object to be assigned
    def bancontact_payments=(bancontact_payments : String?)
      ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS.valid!(bancontact_payments)
      @bancontact_payments = bancontact_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_payments Object to be assigned
    def bank_transfer_payments=(bank_transfer_payments : String?)
      ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS.valid!(bank_transfer_payments)
      @bank_transfer_payments = bank_transfer_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto_payments Object to be assigned
    def boleto_payments=(boleto_payments : String?)
      ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS.valid!(boleto_payments)
      @boleto_payments = boleto_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_issuing Object to be assigned
    def card_issuing=(card_issuing : String?)
      ENUM_VALIDATOR_FOR_CARD_ISSUING.valid!(card_issuing)
      @card_issuing = card_issuing
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_payments Object to be assigned
    def card_payments=(card_payments : String?)
      ENUM_VALIDATOR_FOR_CARD_PAYMENTS.valid!(card_payments)
      @card_payments = card_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cartes_bancaires_payments Object to be assigned
    def cartes_bancaires_payments=(cartes_bancaires_payments : String?)
      ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS.valid!(cartes_bancaires_payments)
      @cartes_bancaires_payments = cartes_bancaires_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps_payments Object to be assigned
    def eps_payments=(eps_payments : String?)
      ENUM_VALIDATOR_FOR_EPS_PAYMENTS.valid!(eps_payments)
      @eps_payments = eps_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx_payments Object to be assigned
    def fpx_payments=(fpx_payments : String?)
      ENUM_VALIDATOR_FOR_FPX_PAYMENTS.valid!(fpx_payments)
      @fpx_payments = fpx_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay_payments Object to be assigned
    def giropay_payments=(giropay_payments : String?)
      ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS.valid!(giropay_payments)
      @giropay_payments = giropay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay_payments Object to be assigned
    def grabpay_payments=(grabpay_payments : String?)
      ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS.valid!(grabpay_payments)
      @grabpay_payments = grabpay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal_payments Object to be assigned
    def ideal_payments=(ideal_payments : String?)
      ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS.valid!(ideal_payments)
      @ideal_payments = ideal_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jcb_payments Object to be assigned
    def jcb_payments=(jcb_payments : String?)
      ENUM_VALIDATOR_FOR_JCB_PAYMENTS.valid!(jcb_payments)
      @jcb_payments = jcb_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna_payments Object to be assigned
    def klarna_payments=(klarna_payments : String?)
      ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS.valid!(klarna_payments)
      @klarna_payments = klarna_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini_payments Object to be assigned
    def konbini_payments=(konbini_payments : String?)
      ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS.valid!(konbini_payments)
      @konbini_payments = konbini_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] legacy_payments Object to be assigned
    def legacy_payments=(legacy_payments : String?)
      ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS.valid!(legacy_payments)
      @legacy_payments = legacy_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_payments Object to be assigned
    def link_payments=(link_payments : String?)
      ENUM_VALIDATOR_FOR_LINK_PAYMENTS.valid!(link_payments)
      @link_payments = link_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo_payments Object to be assigned
    def oxxo_payments=(oxxo_payments : String?)
      ENUM_VALIDATOR_FOR_OXXO_PAYMENTS.valid!(oxxo_payments)
      @oxxo_payments = oxxo_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24_payments Object to be assigned
    def p24_payments=(p24_payments : String?)
      ENUM_VALIDATOR_FOR_P24_PAYMENTS.valid!(p24_payments)
      @p24_payments = p24_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow_payments Object to be assigned
    def paynow_payments=(paynow_payments : String?)
      ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS.valid!(paynow_payments)
      @paynow_payments = paynow_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit_payments Object to be assigned
    def sepa_debit_payments=(sepa_debit_payments : String?)
      ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS.valid!(sepa_debit_payments)
      @sepa_debit_payments = sepa_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort_payments Object to be assigned
    def sofort_payments=(sofort_payments : String?)
      ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS.valid!(sofort_payments)
      @sofort_payments = sofort_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_k Object to be assigned
    def tax_reporting_us_1099_k=(tax_reporting_us_1099_k : String?)
      ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K.valid!(tax_reporting_us_1099_k)
      @tax_reporting_us_1099_k = tax_reporting_us_1099_k
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_misc Object to be assigned
    def tax_reporting_us_1099_misc=(tax_reporting_us_1099_misc : String?)
      ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC.valid!(tax_reporting_us_1099_misc)
      @tax_reporting_us_1099_misc = tax_reporting_us_1099_misc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfers Object to be assigned
    def transfers=(transfers : String?)
      ENUM_VALIDATOR_FOR_TRANSFERS.valid!(transfers)
      @transfers = transfers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treasury Object to be assigned
    def treasury=(treasury : String?)
      ENUM_VALIDATOR_FOR_TREASURY.valid!(treasury)
      @treasury = treasury
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account_ach_payments Object to be assigned
    def us_bank_account_ach_payments=(us_bank_account_ach_payments : String?)
      ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS.valid!(us_bank_account_ach_payments)
      @us_bank_account_ach_payments = us_bank_account_ach_payments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit_payments, @acss_debit_payments_present, @affirm_payments, @affirm_payments_present, @afterpay_clearpay_payments, @afterpay_clearpay_payments_present, @au_becs_debit_payments, @au_becs_debit_payments_present, @bacs_debit_payments, @bacs_debit_payments_present, @bancontact_payments, @bancontact_payments_present, @bank_transfer_payments, @bank_transfer_payments_present, @boleto_payments, @boleto_payments_present, @card_issuing, @card_issuing_present, @card_payments, @card_payments_present, @cartes_bancaires_payments, @cartes_bancaires_payments_present, @eps_payments, @eps_payments_present, @fpx_payments, @fpx_payments_present, @giropay_payments, @giropay_payments_present, @grabpay_payments, @grabpay_payments_present, @ideal_payments, @ideal_payments_present, @jcb_payments, @jcb_payments_present, @klarna_payments, @klarna_payments_present, @konbini_payments, @konbini_payments_present, @legacy_payments, @legacy_payments_present, @link_payments, @link_payments_present, @oxxo_payments, @oxxo_payments_present, @p24_payments, @p24_payments_present, @paynow_payments, @paynow_payments_present, @sepa_debit_payments, @sepa_debit_payments_present, @sofort_payments, @sofort_payments_present, @tax_reporting_us_1099_k, @tax_reporting_us_1099_k_present, @tax_reporting_us_1099_misc, @tax_reporting_us_1099_misc_present, @transfers, @transfers_present, @treasury, @treasury_present, @us_bank_account_ach_payments, @us_bank_account_ach_payments_present)
  end
end
