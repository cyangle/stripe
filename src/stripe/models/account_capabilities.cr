#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class AccountCapabilities
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
    @[JSON::Field(key: "acss_debit_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit_payments : String? = nil
    ERROR_MESSAGE_FOR_ACSS_DEBIT_PAYMENTS = "invalid value for \"acss_debit_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_ACSS_DEBIT_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
    @[JSON::Field(key: "affirm_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm_payments : String? = nil
    ERROR_MESSAGE_FOR_AFFIRM_PAYMENTS = "invalid value for \"affirm_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_AFFIRM_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    @[JSON::Field(key: "afterpay_clearpay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay_payments : String? = nil
    ERROR_MESSAGE_FOR_AFTERPAY_CLEARPAY_PAYMENTS = "invalid value for \"afterpay_clearpay_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_AFTERPAY_CLEARPAY_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments.
    @[JSON::Field(key: "amazon_pay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amazon_pay_payments : String? = nil
    ERROR_MESSAGE_FOR_AMAZON_PAY_PAYMENTS = "invalid value for \"amazon_pay_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_AMAZON_PAY_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    @[JSON::Field(key: "au_becs_debit_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit_payments : String? = nil
    ERROR_MESSAGE_FOR_AU_BECS_DEBIT_PAYMENTS = "invalid value for \"au_becs_debit_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_AU_BECS_DEBIT_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    @[JSON::Field(key: "bacs_debit_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit_payments : String? = nil
    ERROR_MESSAGE_FOR_BACS_DEBIT_PAYMENTS = "invalid value for \"bacs_debit_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_BACS_DEBIT_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    @[JSON::Field(key: "bancontact_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact_payments : String? = nil
    ERROR_MESSAGE_FOR_BANCONTACT_PAYMENTS = "invalid value for \"bancontact_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_BANCONTACT_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
    @[JSON::Field(key: "bank_transfer_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_transfer_payments : String? = nil
    ERROR_MESSAGE_FOR_BANK_TRANSFER_PAYMENTS = "invalid value for \"bank_transfer_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_BANK_TRANSFER_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the blik payments capability of the account, or whether the account can directly process blik charges.
    @[JSON::Field(key: "blik_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik_payments : String? = nil
    ERROR_MESSAGE_FOR_BLIK_PAYMENTS = "invalid value for \"blik_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_BLIK_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
    @[JSON::Field(key: "boleto_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto_payments : String? = nil
    ERROR_MESSAGE_FOR_BOLETO_PAYMENTS = "invalid value for \"boleto_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_BOLETO_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    @[JSON::Field(key: "card_issuing", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_issuing : String? = nil
    ERROR_MESSAGE_FOR_CARD_ISSUING = "invalid value for \"card_issuing\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_CARD_ISSUING  = String.static_array("active", "inactive", "pending")

    # The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    @[JSON::Field(key: "card_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_payments : String? = nil
    ERROR_MESSAGE_FOR_CARD_PAYMENTS = "invalid value for \"card_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_CARD_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    @[JSON::Field(key: "cartes_bancaires_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cartes_bancaires_payments : String? = nil
    ERROR_MESSAGE_FOR_CARTES_BANCAIRES_PAYMENTS = "invalid value for \"cartes_bancaires_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_CARTES_BANCAIRES_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.
    @[JSON::Field(key: "cashapp_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cashapp_payments : String? = nil
    ERROR_MESSAGE_FOR_CASHAPP_PAYMENTS = "invalid value for \"cashapp_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_CASHAPP_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    @[JSON::Field(key: "eps_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps_payments : String? = nil
    ERROR_MESSAGE_FOR_EPS_PAYMENTS = "invalid value for \"eps_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_EPS_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    @[JSON::Field(key: "fpx_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx_payments : String? = nil
    ERROR_MESSAGE_FOR_FPX_PAYMENTS = "invalid value for \"fpx_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_FPX_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges.
    @[JSON::Field(key: "gb_bank_transfer_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter gb_bank_transfer_payments : String? = nil
    ERROR_MESSAGE_FOR_GB_BANK_TRANSFER_PAYMENTS = "invalid value for \"gb_bank_transfer_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_GB_BANK_TRANSFER_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    @[JSON::Field(key: "giropay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay_payments : String? = nil
    ERROR_MESSAGE_FOR_GIROPAY_PAYMENTS = "invalid value for \"giropay_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_GIROPAY_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    @[JSON::Field(key: "grabpay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay_payments : String? = nil
    ERROR_MESSAGE_FOR_GRABPAY_PAYMENTS = "invalid value for \"grabpay_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_GRABPAY_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    @[JSON::Field(key: "ideal_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal_payments : String? = nil
    ERROR_MESSAGE_FOR_IDEAL_PAYMENTS = "invalid value for \"ideal_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_IDEAL_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.
    @[JSON::Field(key: "india_international_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter india_international_payments : String? = nil
    ERROR_MESSAGE_FOR_INDIA_INTERNATIONAL_PAYMENTS = "invalid value for \"india_international_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_INDIA_INTERNATIONAL_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    @[JSON::Field(key: "jcb_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jcb_payments : String? = nil
    ERROR_MESSAGE_FOR_JCB_PAYMENTS = "invalid value for \"jcb_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_JCB_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges.
    @[JSON::Field(key: "jp_bank_transfer_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jp_bank_transfer_payments : String? = nil
    ERROR_MESSAGE_FOR_JP_BANK_TRANSFER_PAYMENTS = "invalid value for \"jp_bank_transfer_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_JP_BANK_TRANSFER_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
    @[JSON::Field(key: "klarna_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna_payments : String? = nil
    ERROR_MESSAGE_FOR_KLARNA_PAYMENTS = "invalid value for \"klarna_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_KLARNA_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
    @[JSON::Field(key: "konbini_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini_payments : String? = nil
    ERROR_MESSAGE_FOR_KONBINI_PAYMENTS = "invalid value for \"konbini_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_KONBINI_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the legacy payments capability of the account.
    @[JSON::Field(key: "legacy_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter legacy_payments : String? = nil
    ERROR_MESSAGE_FOR_LEGACY_PAYMENTS = "invalid value for \"legacy_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_LEGACY_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the link_payments capability of the account, or whether the account can directly process Link charges.
    @[JSON::Field(key: "link_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link_payments : String? = nil
    ERROR_MESSAGE_FOR_LINK_PAYMENTS = "invalid value for \"link_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_LINK_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges.
    @[JSON::Field(key: "mobilepay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mobilepay_payments : String? = nil
    ERROR_MESSAGE_FOR_MOBILEPAY_PAYMENTS = "invalid value for \"mobilepay_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_MOBILEPAY_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges.
    @[JSON::Field(key: "multibanco_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco_payments : String? = nil
    ERROR_MESSAGE_FOR_MULTIBANCO_PAYMENTS = "invalid value for \"multibanco_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_MULTIBANCO_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges.
    @[JSON::Field(key: "mx_bank_transfer_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mx_bank_transfer_payments : String? = nil
    ERROR_MESSAGE_FOR_MX_BANK_TRANSFER_PAYMENTS = "invalid value for \"mx_bank_transfer_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_MX_BANK_TRANSFER_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    @[JSON::Field(key: "oxxo_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo_payments : String? = nil
    ERROR_MESSAGE_FOR_OXXO_PAYMENTS = "invalid value for \"oxxo_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_OXXO_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    @[JSON::Field(key: "p24_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24_payments : String? = nil
    ERROR_MESSAGE_FOR_P24_PAYMENTS = "invalid value for \"p24_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_P24_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
    @[JSON::Field(key: "paynow_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow_payments : String? = nil
    ERROR_MESSAGE_FOR_PAYNOW_PAYMENTS = "invalid value for \"paynow_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_PAYNOW_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
    @[JSON::Field(key: "promptpay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay_payments : String? = nil
    ERROR_MESSAGE_FOR_PROMPTPAY_PAYMENTS = "invalid value for \"promptpay_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_PROMPTPAY_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.
    @[JSON::Field(key: "revolut_pay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter revolut_pay_payments : String? = nil
    ERROR_MESSAGE_FOR_REVOLUT_PAY_PAYMENTS = "invalid value for \"revolut_pay_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_REVOLUT_PAY_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges.
    @[JSON::Field(key: "sepa_bank_transfer_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_bank_transfer_payments : String? = nil
    ERROR_MESSAGE_FOR_SEPA_BANK_TRANSFER_PAYMENTS = "invalid value for \"sepa_bank_transfer_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_SEPA_BANK_TRANSFER_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    @[JSON::Field(key: "sepa_debit_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit_payments : String? = nil
    ERROR_MESSAGE_FOR_SEPA_DEBIT_PAYMENTS = "invalid value for \"sepa_debit_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_SEPA_DEBIT_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    @[JSON::Field(key: "sofort_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort_payments : String? = nil
    ERROR_MESSAGE_FOR_SOFORT_PAYMENTS = "invalid value for \"sofort_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_SOFORT_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Swish capability of the account, or whether the account can directly process Swish payments.
    @[JSON::Field(key: "swish_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter swish_payments : String? = nil
    ERROR_MESSAGE_FOR_SWISH_PAYMENTS = "invalid value for \"swish_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_SWISH_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the tax reporting 1099-K (US) capability of the account.
    @[JSON::Field(key: "tax_reporting_us_1099_k", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_reporting_us_1099_k : String? = nil
    ERROR_MESSAGE_FOR_TAX_REPORTING_US_1099_K = "invalid value for \"tax_reporting_us_1099_k\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_TAX_REPORTING_US_1099_K  = String.static_array("active", "inactive", "pending")

    # The status of the tax reporting 1099-MISC (US) capability of the account.
    @[JSON::Field(key: "tax_reporting_us_1099_misc", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_reporting_us_1099_misc : String? = nil
    ERROR_MESSAGE_FOR_TAX_REPORTING_US_1099_MISC = "invalid value for \"tax_reporting_us_1099_misc\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_TAX_REPORTING_US_1099_MISC  = String.static_array("active", "inactive", "pending")

    # The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    @[JSON::Field(key: "transfers", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfers : String? = nil
    ERROR_MESSAGE_FOR_TRANSFERS = "invalid value for \"transfers\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_TRANSFERS  = String.static_array("active", "inactive", "pending")

    # The status of the banking capability, or whether the account can have bank accounts.
    @[JSON::Field(key: "treasury", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter treasury : String? = nil
    ERROR_MESSAGE_FOR_TREASURY = "invalid value for \"treasury\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_TREASURY  = String.static_array("active", "inactive", "pending")

    # The status of the TWINT capability of the account, or whether the account can directly process TWINT charges.
    @[JSON::Field(key: "twint_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter twint_payments : String? = nil
    ERROR_MESSAGE_FOR_TWINT_PAYMENTS = "invalid value for \"twint_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_TWINT_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
    @[JSON::Field(key: "us_bank_account_ach_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account_ach_payments : String? = nil
    ERROR_MESSAGE_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS = "invalid value for \"us_bank_account_ach_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges.
    @[JSON::Field(key: "us_bank_transfer_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_transfer_payments : String? = nil
    ERROR_MESSAGE_FOR_US_BANK_TRANSFER_PAYMENTS = "invalid value for \"us_bank_transfer_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_US_BANK_TRANSFER_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # The status of the Zip capability of the account, or whether the account can directly process Zip charges.
    @[JSON::Field(key: "zip_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter zip_payments : String? = nil
    ERROR_MESSAGE_FOR_ZIP_PAYMENTS = "invalid value for \"zip_payments\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_ZIP_PAYMENTS  = String.static_array("active", "inactive", "pending")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit_payments : String? = nil,
      @affirm_payments : String? = nil,
      @afterpay_clearpay_payments : String? = nil,
      @amazon_pay_payments : String? = nil,
      @au_becs_debit_payments : String? = nil,
      @bacs_debit_payments : String? = nil,
      @bancontact_payments : String? = nil,
      @bank_transfer_payments : String? = nil,
      @blik_payments : String? = nil,
      @boleto_payments : String? = nil,
      @card_issuing : String? = nil,
      @card_payments : String? = nil,
      @cartes_bancaires_payments : String? = nil,
      @cashapp_payments : String? = nil,
      @eps_payments : String? = nil,
      @fpx_payments : String? = nil,
      @gb_bank_transfer_payments : String? = nil,
      @giropay_payments : String? = nil,
      @grabpay_payments : String? = nil,
      @ideal_payments : String? = nil,
      @india_international_payments : String? = nil,
      @jcb_payments : String? = nil,
      @jp_bank_transfer_payments : String? = nil,
      @klarna_payments : String? = nil,
      @konbini_payments : String? = nil,
      @legacy_payments : String? = nil,
      @link_payments : String? = nil,
      @mobilepay_payments : String? = nil,
      @multibanco_payments : String? = nil,
      @mx_bank_transfer_payments : String? = nil,
      @oxxo_payments : String? = nil,
      @p24_payments : String? = nil,
      @paynow_payments : String? = nil,
      @promptpay_payments : String? = nil,
      @revolut_pay_payments : String? = nil,
      @sepa_bank_transfer_payments : String? = nil,
      @sepa_debit_payments : String? = nil,
      @sofort_payments : String? = nil,
      @swish_payments : String? = nil,
      @tax_reporting_us_1099_k : String? = nil,
      @tax_reporting_us_1099_misc : String? = nil,
      @transfers : String? = nil,
      @treasury : String? = nil,
      @twint_payments : String? = nil,
      @us_bank_account_ach_payments : String? = nil,
      @us_bank_transfer_payments : String? = nil,
      @zip_payments : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_acss_debit_payments = @acss_debit_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ACSS_DEBIT_PAYMENTS) unless OpenApi::EnumValidator.valid?(_acss_debit_payments, VALID_VALUES_FOR_ACSS_DEBIT_PAYMENTS)
      end
      unless (_affirm_payments = @affirm_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_AFFIRM_PAYMENTS) unless OpenApi::EnumValidator.valid?(_affirm_payments, VALID_VALUES_FOR_AFFIRM_PAYMENTS)
      end
      unless (_afterpay_clearpay_payments = @afterpay_clearpay_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_AFTERPAY_CLEARPAY_PAYMENTS) unless OpenApi::EnumValidator.valid?(_afterpay_clearpay_payments, VALID_VALUES_FOR_AFTERPAY_CLEARPAY_PAYMENTS)
      end
      unless (_amazon_pay_payments = @amazon_pay_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_AMAZON_PAY_PAYMENTS) unless OpenApi::EnumValidator.valid?(_amazon_pay_payments, VALID_VALUES_FOR_AMAZON_PAY_PAYMENTS)
      end
      unless (_au_becs_debit_payments = @au_becs_debit_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_AU_BECS_DEBIT_PAYMENTS) unless OpenApi::EnumValidator.valid?(_au_becs_debit_payments, VALID_VALUES_FOR_AU_BECS_DEBIT_PAYMENTS)
      end
      unless (_bacs_debit_payments = @bacs_debit_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BACS_DEBIT_PAYMENTS) unless OpenApi::EnumValidator.valid?(_bacs_debit_payments, VALID_VALUES_FOR_BACS_DEBIT_PAYMENTS)
      end
      unless (_bancontact_payments = @bancontact_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BANCONTACT_PAYMENTS) unless OpenApi::EnumValidator.valid?(_bancontact_payments, VALID_VALUES_FOR_BANCONTACT_PAYMENTS)
      end
      unless (_bank_transfer_payments = @bank_transfer_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BANK_TRANSFER_PAYMENTS) unless OpenApi::EnumValidator.valid?(_bank_transfer_payments, VALID_VALUES_FOR_BANK_TRANSFER_PAYMENTS)
      end
      unless (_blik_payments = @blik_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BLIK_PAYMENTS) unless OpenApi::EnumValidator.valid?(_blik_payments, VALID_VALUES_FOR_BLIK_PAYMENTS)
      end
      unless (_boleto_payments = @boleto_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BOLETO_PAYMENTS) unless OpenApi::EnumValidator.valid?(_boleto_payments, VALID_VALUES_FOR_BOLETO_PAYMENTS)
      end
      unless (_card_issuing = @card_issuing).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARD_ISSUING) unless OpenApi::EnumValidator.valid?(_card_issuing, VALID_VALUES_FOR_CARD_ISSUING)
      end
      unless (_card_payments = @card_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARD_PAYMENTS) unless OpenApi::EnumValidator.valid?(_card_payments, VALID_VALUES_FOR_CARD_PAYMENTS)
      end
      unless (_cartes_bancaires_payments = @cartes_bancaires_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARTES_BANCAIRES_PAYMENTS) unless OpenApi::EnumValidator.valid?(_cartes_bancaires_payments, VALID_VALUES_FOR_CARTES_BANCAIRES_PAYMENTS)
      end
      unless (_cashapp_payments = @cashapp_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CASHAPP_PAYMENTS) unless OpenApi::EnumValidator.valid?(_cashapp_payments, VALID_VALUES_FOR_CASHAPP_PAYMENTS)
      end
      unless (_eps_payments = @eps_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_EPS_PAYMENTS) unless OpenApi::EnumValidator.valid?(_eps_payments, VALID_VALUES_FOR_EPS_PAYMENTS)
      end
      unless (_fpx_payments = @fpx_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_FPX_PAYMENTS) unless OpenApi::EnumValidator.valid?(_fpx_payments, VALID_VALUES_FOR_FPX_PAYMENTS)
      end
      unless (_gb_bank_transfer_payments = @gb_bank_transfer_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_GB_BANK_TRANSFER_PAYMENTS) unless OpenApi::EnumValidator.valid?(_gb_bank_transfer_payments, VALID_VALUES_FOR_GB_BANK_TRANSFER_PAYMENTS)
      end
      unless (_giropay_payments = @giropay_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_GIROPAY_PAYMENTS) unless OpenApi::EnumValidator.valid?(_giropay_payments, VALID_VALUES_FOR_GIROPAY_PAYMENTS)
      end
      unless (_grabpay_payments = @grabpay_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_GRABPAY_PAYMENTS) unless OpenApi::EnumValidator.valid?(_grabpay_payments, VALID_VALUES_FOR_GRABPAY_PAYMENTS)
      end
      unless (_ideal_payments = @ideal_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_IDEAL_PAYMENTS) unless OpenApi::EnumValidator.valid?(_ideal_payments, VALID_VALUES_FOR_IDEAL_PAYMENTS)
      end
      unless (_india_international_payments = @india_international_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_INDIA_INTERNATIONAL_PAYMENTS) unless OpenApi::EnumValidator.valid?(_india_international_payments, VALID_VALUES_FOR_INDIA_INTERNATIONAL_PAYMENTS)
      end
      unless (_jcb_payments = @jcb_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_JCB_PAYMENTS) unless OpenApi::EnumValidator.valid?(_jcb_payments, VALID_VALUES_FOR_JCB_PAYMENTS)
      end
      unless (_jp_bank_transfer_payments = @jp_bank_transfer_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_JP_BANK_TRANSFER_PAYMENTS) unless OpenApi::EnumValidator.valid?(_jp_bank_transfer_payments, VALID_VALUES_FOR_JP_BANK_TRANSFER_PAYMENTS)
      end
      unless (_klarna_payments = @klarna_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_KLARNA_PAYMENTS) unless OpenApi::EnumValidator.valid?(_klarna_payments, VALID_VALUES_FOR_KLARNA_PAYMENTS)
      end
      unless (_konbini_payments = @konbini_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_KONBINI_PAYMENTS) unless OpenApi::EnumValidator.valid?(_konbini_payments, VALID_VALUES_FOR_KONBINI_PAYMENTS)
      end
      unless (_legacy_payments = @legacy_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_LEGACY_PAYMENTS) unless OpenApi::EnumValidator.valid?(_legacy_payments, VALID_VALUES_FOR_LEGACY_PAYMENTS)
      end
      unless (_link_payments = @link_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_LINK_PAYMENTS) unless OpenApi::EnumValidator.valid?(_link_payments, VALID_VALUES_FOR_LINK_PAYMENTS)
      end
      unless (_mobilepay_payments = @mobilepay_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_MOBILEPAY_PAYMENTS) unless OpenApi::EnumValidator.valid?(_mobilepay_payments, VALID_VALUES_FOR_MOBILEPAY_PAYMENTS)
      end
      unless (_multibanco_payments = @multibanco_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_MULTIBANCO_PAYMENTS) unless OpenApi::EnumValidator.valid?(_multibanco_payments, VALID_VALUES_FOR_MULTIBANCO_PAYMENTS)
      end
      unless (_mx_bank_transfer_payments = @mx_bank_transfer_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_MX_BANK_TRANSFER_PAYMENTS) unless OpenApi::EnumValidator.valid?(_mx_bank_transfer_payments, VALID_VALUES_FOR_MX_BANK_TRANSFER_PAYMENTS)
      end
      unless (_oxxo_payments = @oxxo_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OXXO_PAYMENTS) unless OpenApi::EnumValidator.valid?(_oxxo_payments, VALID_VALUES_FOR_OXXO_PAYMENTS)
      end
      unless (_p24_payments = @p24_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_P24_PAYMENTS) unless OpenApi::EnumValidator.valid?(_p24_payments, VALID_VALUES_FOR_P24_PAYMENTS)
      end
      unless (_paynow_payments = @paynow_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYNOW_PAYMENTS) unless OpenApi::EnumValidator.valid?(_paynow_payments, VALID_VALUES_FOR_PAYNOW_PAYMENTS)
      end
      unless (_promptpay_payments = @promptpay_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PROMPTPAY_PAYMENTS) unless OpenApi::EnumValidator.valid?(_promptpay_payments, VALID_VALUES_FOR_PROMPTPAY_PAYMENTS)
      end
      unless (_revolut_pay_payments = @revolut_pay_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REVOLUT_PAY_PAYMENTS) unless OpenApi::EnumValidator.valid?(_revolut_pay_payments, VALID_VALUES_FOR_REVOLUT_PAY_PAYMENTS)
      end
      unless (_sepa_bank_transfer_payments = @sepa_bank_transfer_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SEPA_BANK_TRANSFER_PAYMENTS) unless OpenApi::EnumValidator.valid?(_sepa_bank_transfer_payments, VALID_VALUES_FOR_SEPA_BANK_TRANSFER_PAYMENTS)
      end
      unless (_sepa_debit_payments = @sepa_debit_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SEPA_DEBIT_PAYMENTS) unless OpenApi::EnumValidator.valid?(_sepa_debit_payments, VALID_VALUES_FOR_SEPA_DEBIT_PAYMENTS)
      end
      unless (_sofort_payments = @sofort_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SOFORT_PAYMENTS) unless OpenApi::EnumValidator.valid?(_sofort_payments, VALID_VALUES_FOR_SOFORT_PAYMENTS)
      end
      unless (_swish_payments = @swish_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SWISH_PAYMENTS) unless OpenApi::EnumValidator.valid?(_swish_payments, VALID_VALUES_FOR_SWISH_PAYMENTS)
      end
      unless (_tax_reporting_us_1099_k = @tax_reporting_us_1099_k).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_TAX_REPORTING_US_1099_K) unless OpenApi::EnumValidator.valid?(_tax_reporting_us_1099_k, VALID_VALUES_FOR_TAX_REPORTING_US_1099_K)
      end
      unless (_tax_reporting_us_1099_misc = @tax_reporting_us_1099_misc).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_TAX_REPORTING_US_1099_MISC) unless OpenApi::EnumValidator.valid?(_tax_reporting_us_1099_misc, VALID_VALUES_FOR_TAX_REPORTING_US_1099_MISC)
      end
      unless (_transfers = @transfers).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_TRANSFERS) unless OpenApi::EnumValidator.valid?(_transfers, VALID_VALUES_FOR_TRANSFERS)
      end
      unless (_treasury = @treasury).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_TREASURY) unless OpenApi::EnumValidator.valid?(_treasury, VALID_VALUES_FOR_TREASURY)
      end
      unless (_twint_payments = @twint_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_TWINT_PAYMENTS) unless OpenApi::EnumValidator.valid?(_twint_payments, VALID_VALUES_FOR_TWINT_PAYMENTS)
      end
      unless (_us_bank_account_ach_payments = @us_bank_account_ach_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS) unless OpenApi::EnumValidator.valid?(_us_bank_account_ach_payments, VALID_VALUES_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS)
      end
      unless (_us_bank_transfer_payments = @us_bank_transfer_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_US_BANK_TRANSFER_PAYMENTS) unless OpenApi::EnumValidator.valid?(_us_bank_transfer_payments, VALID_VALUES_FOR_US_BANK_TRANSFER_PAYMENTS)
      end
      unless (_zip_payments = @zip_payments).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ZIP_PAYMENTS) unless OpenApi::EnumValidator.valid?(_zip_payments, VALID_VALUES_FOR_ZIP_PAYMENTS)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_acss_debit_payments = @acss_debit_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_acss_debit_payments, VALID_VALUES_FOR_ACSS_DEBIT_PAYMENTS)
      end

      unless (_affirm_payments = @affirm_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_affirm_payments, VALID_VALUES_FOR_AFFIRM_PAYMENTS)
      end

      unless (_afterpay_clearpay_payments = @afterpay_clearpay_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_afterpay_clearpay_payments, VALID_VALUES_FOR_AFTERPAY_CLEARPAY_PAYMENTS)
      end

      unless (_amazon_pay_payments = @amazon_pay_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_amazon_pay_payments, VALID_VALUES_FOR_AMAZON_PAY_PAYMENTS)
      end

      unless (_au_becs_debit_payments = @au_becs_debit_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_au_becs_debit_payments, VALID_VALUES_FOR_AU_BECS_DEBIT_PAYMENTS)
      end

      unless (_bacs_debit_payments = @bacs_debit_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_bacs_debit_payments, VALID_VALUES_FOR_BACS_DEBIT_PAYMENTS)
      end

      unless (_bancontact_payments = @bancontact_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_bancontact_payments, VALID_VALUES_FOR_BANCONTACT_PAYMENTS)
      end

      unless (_bank_transfer_payments = @bank_transfer_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_bank_transfer_payments, VALID_VALUES_FOR_BANK_TRANSFER_PAYMENTS)
      end

      unless (_blik_payments = @blik_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_blik_payments, VALID_VALUES_FOR_BLIK_PAYMENTS)
      end

      unless (_boleto_payments = @boleto_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_boleto_payments, VALID_VALUES_FOR_BOLETO_PAYMENTS)
      end

      unless (_card_issuing = @card_issuing).nil?
        return false unless OpenApi::EnumValidator.valid?(_card_issuing, VALID_VALUES_FOR_CARD_ISSUING)
      end

      unless (_card_payments = @card_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_card_payments, VALID_VALUES_FOR_CARD_PAYMENTS)
      end

      unless (_cartes_bancaires_payments = @cartes_bancaires_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_cartes_bancaires_payments, VALID_VALUES_FOR_CARTES_BANCAIRES_PAYMENTS)
      end

      unless (_cashapp_payments = @cashapp_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_cashapp_payments, VALID_VALUES_FOR_CASHAPP_PAYMENTS)
      end

      unless (_eps_payments = @eps_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_eps_payments, VALID_VALUES_FOR_EPS_PAYMENTS)
      end

      unless (_fpx_payments = @fpx_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_fpx_payments, VALID_VALUES_FOR_FPX_PAYMENTS)
      end

      unless (_gb_bank_transfer_payments = @gb_bank_transfer_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_gb_bank_transfer_payments, VALID_VALUES_FOR_GB_BANK_TRANSFER_PAYMENTS)
      end

      unless (_giropay_payments = @giropay_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_giropay_payments, VALID_VALUES_FOR_GIROPAY_PAYMENTS)
      end

      unless (_grabpay_payments = @grabpay_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_grabpay_payments, VALID_VALUES_FOR_GRABPAY_PAYMENTS)
      end

      unless (_ideal_payments = @ideal_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_ideal_payments, VALID_VALUES_FOR_IDEAL_PAYMENTS)
      end

      unless (_india_international_payments = @india_international_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_india_international_payments, VALID_VALUES_FOR_INDIA_INTERNATIONAL_PAYMENTS)
      end

      unless (_jcb_payments = @jcb_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_jcb_payments, VALID_VALUES_FOR_JCB_PAYMENTS)
      end

      unless (_jp_bank_transfer_payments = @jp_bank_transfer_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_jp_bank_transfer_payments, VALID_VALUES_FOR_JP_BANK_TRANSFER_PAYMENTS)
      end

      unless (_klarna_payments = @klarna_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_klarna_payments, VALID_VALUES_FOR_KLARNA_PAYMENTS)
      end

      unless (_konbini_payments = @konbini_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_konbini_payments, VALID_VALUES_FOR_KONBINI_PAYMENTS)
      end

      unless (_legacy_payments = @legacy_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_legacy_payments, VALID_VALUES_FOR_LEGACY_PAYMENTS)
      end

      unless (_link_payments = @link_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_link_payments, VALID_VALUES_FOR_LINK_PAYMENTS)
      end

      unless (_mobilepay_payments = @mobilepay_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_mobilepay_payments, VALID_VALUES_FOR_MOBILEPAY_PAYMENTS)
      end

      unless (_multibanco_payments = @multibanco_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_multibanco_payments, VALID_VALUES_FOR_MULTIBANCO_PAYMENTS)
      end

      unless (_mx_bank_transfer_payments = @mx_bank_transfer_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_mx_bank_transfer_payments, VALID_VALUES_FOR_MX_BANK_TRANSFER_PAYMENTS)
      end

      unless (_oxxo_payments = @oxxo_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_oxxo_payments, VALID_VALUES_FOR_OXXO_PAYMENTS)
      end

      unless (_p24_payments = @p24_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_p24_payments, VALID_VALUES_FOR_P24_PAYMENTS)
      end

      unless (_paynow_payments = @paynow_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_paynow_payments, VALID_VALUES_FOR_PAYNOW_PAYMENTS)
      end

      unless (_promptpay_payments = @promptpay_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_promptpay_payments, VALID_VALUES_FOR_PROMPTPAY_PAYMENTS)
      end

      unless (_revolut_pay_payments = @revolut_pay_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_revolut_pay_payments, VALID_VALUES_FOR_REVOLUT_PAY_PAYMENTS)
      end

      unless (_sepa_bank_transfer_payments = @sepa_bank_transfer_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_sepa_bank_transfer_payments, VALID_VALUES_FOR_SEPA_BANK_TRANSFER_PAYMENTS)
      end

      unless (_sepa_debit_payments = @sepa_debit_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_sepa_debit_payments, VALID_VALUES_FOR_SEPA_DEBIT_PAYMENTS)
      end

      unless (_sofort_payments = @sofort_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_sofort_payments, VALID_VALUES_FOR_SOFORT_PAYMENTS)
      end

      unless (_swish_payments = @swish_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_swish_payments, VALID_VALUES_FOR_SWISH_PAYMENTS)
      end

      unless (_tax_reporting_us_1099_k = @tax_reporting_us_1099_k).nil?
        return false unless OpenApi::EnumValidator.valid?(_tax_reporting_us_1099_k, VALID_VALUES_FOR_TAX_REPORTING_US_1099_K)
      end

      unless (_tax_reporting_us_1099_misc = @tax_reporting_us_1099_misc).nil?
        return false unless OpenApi::EnumValidator.valid?(_tax_reporting_us_1099_misc, VALID_VALUES_FOR_TAX_REPORTING_US_1099_MISC)
      end

      unless (_transfers = @transfers).nil?
        return false unless OpenApi::EnumValidator.valid?(_transfers, VALID_VALUES_FOR_TRANSFERS)
      end

      unless (_treasury = @treasury).nil?
        return false unless OpenApi::EnumValidator.valid?(_treasury, VALID_VALUES_FOR_TREASURY)
      end

      unless (_twint_payments = @twint_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_twint_payments, VALID_VALUES_FOR_TWINT_PAYMENTS)
      end

      unless (_us_bank_account_ach_payments = @us_bank_account_ach_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_us_bank_account_ach_payments, VALID_VALUES_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS)
      end

      unless (_us_bank_transfer_payments = @us_bank_transfer_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_us_bank_transfer_payments, VALID_VALUES_FOR_US_BANK_TRANSFER_PAYMENTS)
      end

      unless (_zip_payments = @zip_payments).nil?
        return false unless OpenApi::EnumValidator.valid?(_zip_payments, VALID_VALUES_FOR_ZIP_PAYMENTS)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit_payments Object to be assigned
    def acss_debit_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("acss_debit_payments", new_value, VALID_VALUES_FOR_ACSS_DEBIT_PAYMENTS)
      end

      @acss_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm_payments Object to be assigned
    def affirm_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("affirm_payments", new_value, VALID_VALUES_FOR_AFFIRM_PAYMENTS)
      end

      @affirm_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay_payments Object to be assigned
    def afterpay_clearpay_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("afterpay_clearpay_payments", new_value, VALID_VALUES_FOR_AFTERPAY_CLEARPAY_PAYMENTS)
      end

      @afterpay_clearpay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amazon_pay_payments Object to be assigned
    def amazon_pay_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("amazon_pay_payments", new_value, VALID_VALUES_FOR_AMAZON_PAY_PAYMENTS)
      end

      @amazon_pay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit_payments Object to be assigned
    def au_becs_debit_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("au_becs_debit_payments", new_value, VALID_VALUES_FOR_AU_BECS_DEBIT_PAYMENTS)
      end

      @au_becs_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit_payments Object to be assigned
    def bacs_debit_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("bacs_debit_payments", new_value, VALID_VALUES_FOR_BACS_DEBIT_PAYMENTS)
      end

      @bacs_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact_payments Object to be assigned
    def bancontact_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("bancontact_payments", new_value, VALID_VALUES_FOR_BANCONTACT_PAYMENTS)
      end

      @bancontact_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_payments Object to be assigned
    def bank_transfer_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("bank_transfer_payments", new_value, VALID_VALUES_FOR_BANK_TRANSFER_PAYMENTS)
      end

      @bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik_payments Object to be assigned
    def blik_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("blik_payments", new_value, VALID_VALUES_FOR_BLIK_PAYMENTS)
      end

      @blik_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto_payments Object to be assigned
    def boleto_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("boleto_payments", new_value, VALID_VALUES_FOR_BOLETO_PAYMENTS)
      end

      @boleto_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_issuing Object to be assigned
    def card_issuing=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("card_issuing", new_value, VALID_VALUES_FOR_CARD_ISSUING)
      end

      @card_issuing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_payments Object to be assigned
    def card_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("card_payments", new_value, VALID_VALUES_FOR_CARD_PAYMENTS)
      end

      @card_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cartes_bancaires_payments Object to be assigned
    def cartes_bancaires_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("cartes_bancaires_payments", new_value, VALID_VALUES_FOR_CARTES_BANCAIRES_PAYMENTS)
      end

      @cartes_bancaires_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cashapp_payments Object to be assigned
    def cashapp_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("cashapp_payments", new_value, VALID_VALUES_FOR_CASHAPP_PAYMENTS)
      end

      @cashapp_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps_payments Object to be assigned
    def eps_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("eps_payments", new_value, VALID_VALUES_FOR_EPS_PAYMENTS)
      end

      @eps_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx_payments Object to be assigned
    def fpx_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("fpx_payments", new_value, VALID_VALUES_FOR_FPX_PAYMENTS)
      end

      @fpx_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gb_bank_transfer_payments Object to be assigned
    def gb_bank_transfer_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("gb_bank_transfer_payments", new_value, VALID_VALUES_FOR_GB_BANK_TRANSFER_PAYMENTS)
      end

      @gb_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay_payments Object to be assigned
    def giropay_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("giropay_payments", new_value, VALID_VALUES_FOR_GIROPAY_PAYMENTS)
      end

      @giropay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay_payments Object to be assigned
    def grabpay_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("grabpay_payments", new_value, VALID_VALUES_FOR_GRABPAY_PAYMENTS)
      end

      @grabpay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal_payments Object to be assigned
    def ideal_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("ideal_payments", new_value, VALID_VALUES_FOR_IDEAL_PAYMENTS)
      end

      @ideal_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] india_international_payments Object to be assigned
    def india_international_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("india_international_payments", new_value, VALID_VALUES_FOR_INDIA_INTERNATIONAL_PAYMENTS)
      end

      @india_international_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jcb_payments Object to be assigned
    def jcb_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("jcb_payments", new_value, VALID_VALUES_FOR_JCB_PAYMENTS)
      end

      @jcb_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jp_bank_transfer_payments Object to be assigned
    def jp_bank_transfer_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("jp_bank_transfer_payments", new_value, VALID_VALUES_FOR_JP_BANK_TRANSFER_PAYMENTS)
      end

      @jp_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna_payments Object to be assigned
    def klarna_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("klarna_payments", new_value, VALID_VALUES_FOR_KLARNA_PAYMENTS)
      end

      @klarna_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini_payments Object to be assigned
    def konbini_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("konbini_payments", new_value, VALID_VALUES_FOR_KONBINI_PAYMENTS)
      end

      @konbini_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] legacy_payments Object to be assigned
    def legacy_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("legacy_payments", new_value, VALID_VALUES_FOR_LEGACY_PAYMENTS)
      end

      @legacy_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_payments Object to be assigned
    def link_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("link_payments", new_value, VALID_VALUES_FOR_LINK_PAYMENTS)
      end

      @link_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mobilepay_payments Object to be assigned
    def mobilepay_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("mobilepay_payments", new_value, VALID_VALUES_FOR_MOBILEPAY_PAYMENTS)
      end

      @mobilepay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco_payments Object to be assigned
    def multibanco_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("multibanco_payments", new_value, VALID_VALUES_FOR_MULTIBANCO_PAYMENTS)
      end

      @multibanco_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mx_bank_transfer_payments Object to be assigned
    def mx_bank_transfer_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("mx_bank_transfer_payments", new_value, VALID_VALUES_FOR_MX_BANK_TRANSFER_PAYMENTS)
      end

      @mx_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo_payments Object to be assigned
    def oxxo_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("oxxo_payments", new_value, VALID_VALUES_FOR_OXXO_PAYMENTS)
      end

      @oxxo_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24_payments Object to be assigned
    def p24_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("p24_payments", new_value, VALID_VALUES_FOR_P24_PAYMENTS)
      end

      @p24_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow_payments Object to be assigned
    def paynow_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("paynow_payments", new_value, VALID_VALUES_FOR_PAYNOW_PAYMENTS)
      end

      @paynow_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay_payments Object to be assigned
    def promptpay_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("promptpay_payments", new_value, VALID_VALUES_FOR_PROMPTPAY_PAYMENTS)
      end

      @promptpay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] revolut_pay_payments Object to be assigned
    def revolut_pay_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("revolut_pay_payments", new_value, VALID_VALUES_FOR_REVOLUT_PAY_PAYMENTS)
      end

      @revolut_pay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_bank_transfer_payments Object to be assigned
    def sepa_bank_transfer_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("sepa_bank_transfer_payments", new_value, VALID_VALUES_FOR_SEPA_BANK_TRANSFER_PAYMENTS)
      end

      @sepa_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit_payments Object to be assigned
    def sepa_debit_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("sepa_debit_payments", new_value, VALID_VALUES_FOR_SEPA_DEBIT_PAYMENTS)
      end

      @sepa_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort_payments Object to be assigned
    def sofort_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("sofort_payments", new_value, VALID_VALUES_FOR_SOFORT_PAYMENTS)
      end

      @sofort_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swish_payments Object to be assigned
    def swish_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("swish_payments", new_value, VALID_VALUES_FOR_SWISH_PAYMENTS)
      end

      @swish_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_k Object to be assigned
    def tax_reporting_us_1099_k=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("tax_reporting_us_1099_k", new_value, VALID_VALUES_FOR_TAX_REPORTING_US_1099_K)
      end

      @tax_reporting_us_1099_k = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_misc Object to be assigned
    def tax_reporting_us_1099_misc=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("tax_reporting_us_1099_misc", new_value, VALID_VALUES_FOR_TAX_REPORTING_US_1099_MISC)
      end

      @tax_reporting_us_1099_misc = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfers Object to be assigned
    def transfers=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("transfers", new_value, VALID_VALUES_FOR_TRANSFERS)
      end

      @transfers = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treasury Object to be assigned
    def treasury=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("treasury", new_value, VALID_VALUES_FOR_TREASURY)
      end

      @treasury = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] twint_payments Object to be assigned
    def twint_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("twint_payments", new_value, VALID_VALUES_FOR_TWINT_PAYMENTS)
      end

      @twint_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account_ach_payments Object to be assigned
    def us_bank_account_ach_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("us_bank_account_ach_payments", new_value, VALID_VALUES_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS)
      end

      @us_bank_account_ach_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_transfer_payments Object to be assigned
    def us_bank_transfer_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("us_bank_transfer_payments", new_value, VALID_VALUES_FOR_US_BANK_TRANSFER_PAYMENTS)
      end

      @us_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] zip_payments Object to be assigned
    def zip_payments=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("zip_payments", new_value, VALID_VALUES_FOR_ZIP_PAYMENTS)
      end

      @zip_payments = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit_payments, @affirm_payments, @afterpay_clearpay_payments, @amazon_pay_payments, @au_becs_debit_payments, @bacs_debit_payments, @bancontact_payments, @bank_transfer_payments, @blik_payments, @boleto_payments, @card_issuing, @card_payments, @cartes_bancaires_payments, @cashapp_payments, @eps_payments, @fpx_payments, @gb_bank_transfer_payments, @giropay_payments, @grabpay_payments, @ideal_payments, @india_international_payments, @jcb_payments, @jp_bank_transfer_payments, @klarna_payments, @konbini_payments, @legacy_payments, @link_payments, @mobilepay_payments, @multibanco_payments, @mx_bank_transfer_payments, @oxxo_payments, @p24_payments, @paynow_payments, @promptpay_payments, @revolut_pay_payments, @sepa_bank_transfer_payments, @sepa_debit_payments, @sofort_payments, @swish_payments, @tax_reporting_us_1099_k, @tax_reporting_us_1099_misc, @transfers, @treasury, @twint_payments, @us_bank_account_ach_payments, @us_bank_transfer_payments, @zip_payments)
  end
end
