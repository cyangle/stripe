#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class AccountCapabilities
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
    @[JSON::Field(key: "acss_debit_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit_payments : String? = nil

    ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS = OpenApi::EnumValidator.new("acss_debit_payments", "String", ["active", "inactive", "pending"])

    # The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
    @[JSON::Field(key: "affirm_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm_payments : String? = nil

    ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS = OpenApi::EnumValidator.new("affirm_payments", "String", ["active", "inactive", "pending"])

    # The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    @[JSON::Field(key: "afterpay_clearpay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay_payments : String? = nil

    ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS = OpenApi::EnumValidator.new("afterpay_clearpay_payments", "String", ["active", "inactive", "pending"])

    # The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    @[JSON::Field(key: "au_becs_debit_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit_payments : String? = nil

    ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS = OpenApi::EnumValidator.new("au_becs_debit_payments", "String", ["active", "inactive", "pending"])

    # The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    @[JSON::Field(key: "bacs_debit_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit_payments : String? = nil

    ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS = OpenApi::EnumValidator.new("bacs_debit_payments", "String", ["active", "inactive", "pending"])

    # The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    @[JSON::Field(key: "bancontact_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact_payments : String? = nil

    ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS = OpenApi::EnumValidator.new("bancontact_payments", "String", ["active", "inactive", "pending"])

    # The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
    @[JSON::Field(key: "bank_transfer_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_transfer_payments : String? = nil

    ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS = OpenApi::EnumValidator.new("bank_transfer_payments", "String", ["active", "inactive", "pending"])

    # The status of the blik payments capability of the account, or whether the account can directly process blik charges.
    @[JSON::Field(key: "blik_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik_payments : String? = nil

    ENUM_VALIDATOR_FOR_BLIK_PAYMENTS = OpenApi::EnumValidator.new("blik_payments", "String", ["active", "inactive", "pending"])

    # The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
    @[JSON::Field(key: "boleto_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto_payments : String? = nil

    ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS = OpenApi::EnumValidator.new("boleto_payments", "String", ["active", "inactive", "pending"])

    # The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    @[JSON::Field(key: "card_issuing", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_issuing : String? = nil

    ENUM_VALIDATOR_FOR_CARD_ISSUING = OpenApi::EnumValidator.new("card_issuing", "String", ["active", "inactive", "pending"])

    # The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    @[JSON::Field(key: "card_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_payments : String? = nil

    ENUM_VALIDATOR_FOR_CARD_PAYMENTS = OpenApi::EnumValidator.new("card_payments", "String", ["active", "inactive", "pending"])

    # The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    @[JSON::Field(key: "cartes_bancaires_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cartes_bancaires_payments : String? = nil

    ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS = OpenApi::EnumValidator.new("cartes_bancaires_payments", "String", ["active", "inactive", "pending"])

    # The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    @[JSON::Field(key: "eps_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps_payments : String? = nil

    ENUM_VALIDATOR_FOR_EPS_PAYMENTS = OpenApi::EnumValidator.new("eps_payments", "String", ["active", "inactive", "pending"])

    # The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    @[JSON::Field(key: "fpx_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx_payments : String? = nil

    ENUM_VALIDATOR_FOR_FPX_PAYMENTS = OpenApi::EnumValidator.new("fpx_payments", "String", ["active", "inactive", "pending"])

    # The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    @[JSON::Field(key: "giropay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay_payments : String? = nil

    ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS = OpenApi::EnumValidator.new("giropay_payments", "String", ["active", "inactive", "pending"])

    # The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    @[JSON::Field(key: "grabpay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay_payments : String? = nil

    ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS = OpenApi::EnumValidator.new("grabpay_payments", "String", ["active", "inactive", "pending"])

    # The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    @[JSON::Field(key: "ideal_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal_payments : String? = nil

    ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS = OpenApi::EnumValidator.new("ideal_payments", "String", ["active", "inactive", "pending"])

    # The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    @[JSON::Field(key: "jcb_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jcb_payments : String? = nil

    ENUM_VALIDATOR_FOR_JCB_PAYMENTS = OpenApi::EnumValidator.new("jcb_payments", "String", ["active", "inactive", "pending"])

    # The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
    @[JSON::Field(key: "klarna_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna_payments : String? = nil

    ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS = OpenApi::EnumValidator.new("klarna_payments", "String", ["active", "inactive", "pending"])

    # The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
    @[JSON::Field(key: "konbini_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini_payments : String? = nil

    ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS = OpenApi::EnumValidator.new("konbini_payments", "String", ["active", "inactive", "pending"])

    # The status of the legacy payments capability of the account.
    @[JSON::Field(key: "legacy_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter legacy_payments : String? = nil

    ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS = OpenApi::EnumValidator.new("legacy_payments", "String", ["active", "inactive", "pending"])

    # The status of the link_payments capability of the account, or whether the account can directly process Link charges.
    @[JSON::Field(key: "link_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link_payments : String? = nil

    ENUM_VALIDATOR_FOR_LINK_PAYMENTS = OpenApi::EnumValidator.new("link_payments", "String", ["active", "inactive", "pending"])

    # The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    @[JSON::Field(key: "oxxo_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo_payments : String? = nil

    ENUM_VALIDATOR_FOR_OXXO_PAYMENTS = OpenApi::EnumValidator.new("oxxo_payments", "String", ["active", "inactive", "pending"])

    # The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    @[JSON::Field(key: "p24_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24_payments : String? = nil

    ENUM_VALIDATOR_FOR_P24_PAYMENTS = OpenApi::EnumValidator.new("p24_payments", "String", ["active", "inactive", "pending"])

    # The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
    @[JSON::Field(key: "paynow_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow_payments : String? = nil

    ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS = OpenApi::EnumValidator.new("paynow_payments", "String", ["active", "inactive", "pending"])

    # The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
    @[JSON::Field(key: "promptpay_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay_payments : String? = nil

    ENUM_VALIDATOR_FOR_PROMPTPAY_PAYMENTS = OpenApi::EnumValidator.new("promptpay_payments", "String", ["active", "inactive", "pending"])

    # The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    @[JSON::Field(key: "sepa_debit_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit_payments : String? = nil

    ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS = OpenApi::EnumValidator.new("sepa_debit_payments", "String", ["active", "inactive", "pending"])

    # The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    @[JSON::Field(key: "sofort_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort_payments : String? = nil

    ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS = OpenApi::EnumValidator.new("sofort_payments", "String", ["active", "inactive", "pending"])

    # The status of the tax reporting 1099-K (US) capability of the account.
    @[JSON::Field(key: "tax_reporting_us_1099_k", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_reporting_us_1099_k : String? = nil

    ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K = OpenApi::EnumValidator.new("tax_reporting_us_1099_k", "String", ["active", "inactive", "pending"])

    # The status of the tax reporting 1099-MISC (US) capability of the account.
    @[JSON::Field(key: "tax_reporting_us_1099_misc", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_reporting_us_1099_misc : String? = nil

    ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC = OpenApi::EnumValidator.new("tax_reporting_us_1099_misc", "String", ["active", "inactive", "pending"])

    # The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    @[JSON::Field(key: "transfers", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfers : String? = nil

    ENUM_VALIDATOR_FOR_TRANSFERS = OpenApi::EnumValidator.new("transfers", "String", ["active", "inactive", "pending"])

    # The status of the banking capability, or whether the account can have bank accounts.
    @[JSON::Field(key: "treasury", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter treasury : String? = nil

    ENUM_VALIDATOR_FOR_TREASURY = OpenApi::EnumValidator.new("treasury", "String", ["active", "inactive", "pending"])

    # The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
    @[JSON::Field(key: "us_bank_account_ach_payments", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account_ach_payments : String? = nil

    ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS = OpenApi::EnumValidator.new("us_bank_account_ach_payments", "String", ["active", "inactive", "pending"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit_payments : String? = nil,
      @affirm_payments : String? = nil,
      @afterpay_clearpay_payments : String? = nil,
      @au_becs_debit_payments : String? = nil,
      @bacs_debit_payments : String? = nil,
      @bancontact_payments : String? = nil,
      @bank_transfer_payments : String? = nil,
      @blik_payments : String? = nil,
      @boleto_payments : String? = nil,
      @card_issuing : String? = nil,
      @card_payments : String? = nil,
      @cartes_bancaires_payments : String? = nil,
      @eps_payments : String? = nil,
      @fpx_payments : String? = nil,
      @giropay_payments : String? = nil,
      @grabpay_payments : String? = nil,
      @ideal_payments : String? = nil,
      @jcb_payments : String? = nil,
      @klarna_payments : String? = nil,
      @konbini_payments : String? = nil,
      @legacy_payments : String? = nil,
      @link_payments : String? = nil,
      @oxxo_payments : String? = nil,
      @p24_payments : String? = nil,
      @paynow_payments : String? = nil,
      @promptpay_payments : String? = nil,
      @sepa_debit_payments : String? = nil,
      @sofort_payments : String? = nil,
      @tax_reporting_us_1099_k : String? = nil,
      @tax_reporting_us_1099_misc : String? = nil,
      @transfers : String? = nil,
      @treasury : String? = nil,
      @us_bank_account_ach_payments : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS.valid?(@acss_debit_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS.valid?(@affirm_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS.valid?(@afterpay_clearpay_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS.valid?(@au_becs_debit_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS.valid?(@bacs_debit_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS.valid?(@bancontact_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS.valid?(@bank_transfer_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BLIK_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BLIK_PAYMENTS.valid?(@blik_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS.valid?(@boleto_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CARD_ISSUING.error_message) unless ENUM_VALIDATOR_FOR_CARD_ISSUING.valid?(@card_issuing)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CARD_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_CARD_PAYMENTS.valid?(@card_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS.valid?(@cartes_bancaires_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_EPS_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_EPS_PAYMENTS.valid?(@eps_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_FPX_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_FPX_PAYMENTS.valid?(@fpx_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS.valid?(@giropay_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS.valid?(@grabpay_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS.valid?(@ideal_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_JCB_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_JCB_PAYMENTS.valid?(@jcb_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS.valid?(@klarna_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS.valid?(@konbini_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS.valid?(@legacy_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_LINK_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_LINK_PAYMENTS.valid?(@link_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_OXXO_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_OXXO_PAYMENTS.valid?(@oxxo_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_P24_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_P24_PAYMENTS.valid?(@p24_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS.valid?(@paynow_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_PROMPTPAY_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_PROMPTPAY_PAYMENTS.valid?(@promptpay_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS.valid?(@sepa_debit_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS.valid?(@sofort_payments)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K.error_message) unless ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K.valid?(@tax_reporting_us_1099_k)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC.error_message) unless ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC.valid?(@tax_reporting_us_1099_misc)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TRANSFERS.error_message) unless ENUM_VALIDATOR_FOR_TRANSFERS.valid?(@transfers)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TREASURY.error_message) unless ENUM_VALIDATOR_FOR_TREASURY.valid?(@treasury)

      invalid_properties.push(ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS.error_message) unless ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS.valid?(@us_bank_account_ach_payments)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false unless ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS.valid?(@acss_debit_payments)
      return false unless ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS.valid?(@affirm_payments)
      return false unless ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS.valid?(@afterpay_clearpay_payments)
      return false unless ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS.valid?(@au_becs_debit_payments)
      return false unless ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS.valid?(@bacs_debit_payments)
      return false unless ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS.valid?(@bancontact_payments)
      return false unless ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS.valid?(@bank_transfer_payments)
      return false unless ENUM_VALIDATOR_FOR_BLIK_PAYMENTS.valid?(@blik_payments)
      return false unless ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS.valid?(@boleto_payments)
      return false unless ENUM_VALIDATOR_FOR_CARD_ISSUING.valid?(@card_issuing)
      return false unless ENUM_VALIDATOR_FOR_CARD_PAYMENTS.valid?(@card_payments)
      return false unless ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS.valid?(@cartes_bancaires_payments)
      return false unless ENUM_VALIDATOR_FOR_EPS_PAYMENTS.valid?(@eps_payments)
      return false unless ENUM_VALIDATOR_FOR_FPX_PAYMENTS.valid?(@fpx_payments)
      return false unless ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS.valid?(@giropay_payments)
      return false unless ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS.valid?(@grabpay_payments)
      return false unless ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS.valid?(@ideal_payments)
      return false unless ENUM_VALIDATOR_FOR_JCB_PAYMENTS.valid?(@jcb_payments)
      return false unless ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS.valid?(@klarna_payments)
      return false unless ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS.valid?(@konbini_payments)
      return false unless ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS.valid?(@legacy_payments)
      return false unless ENUM_VALIDATOR_FOR_LINK_PAYMENTS.valid?(@link_payments)
      return false unless ENUM_VALIDATOR_FOR_OXXO_PAYMENTS.valid?(@oxxo_payments)
      return false unless ENUM_VALIDATOR_FOR_P24_PAYMENTS.valid?(@p24_payments)
      return false unless ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS.valid?(@paynow_payments)
      return false unless ENUM_VALIDATOR_FOR_PROMPTPAY_PAYMENTS.valid?(@promptpay_payments)
      return false unless ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS.valid?(@sepa_debit_payments)
      return false unless ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS.valid?(@sofort_payments)
      return false unless ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K.valid?(@tax_reporting_us_1099_k)
      return false unless ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC.valid?(@tax_reporting_us_1099_misc)
      return false unless ENUM_VALIDATOR_FOR_TRANSFERS.valid?(@transfers)
      return false unless ENUM_VALIDATOR_FOR_TREASURY.valid?(@treasury)
      return false unless ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS.valid?(@us_bank_account_ach_payments)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit_payments Object to be assigned
    def acss_debit_payments=(acss_debit_payments : String?)
      if acss_debit_payments.nil?
        return @acss_debit_payments = nil
      end
      _acss_debit_payments = acss_debit_payments.not_nil!
      ENUM_VALIDATOR_FOR_ACSS_DEBIT_PAYMENTS.valid!(_acss_debit_payments)
      @acss_debit_payments = _acss_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm_payments Object to be assigned
    def affirm_payments=(affirm_payments : String?)
      if affirm_payments.nil?
        return @affirm_payments = nil
      end
      _affirm_payments = affirm_payments.not_nil!
      ENUM_VALIDATOR_FOR_AFFIRM_PAYMENTS.valid!(_affirm_payments)
      @affirm_payments = _affirm_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay_payments Object to be assigned
    def afterpay_clearpay_payments=(afterpay_clearpay_payments : String?)
      if afterpay_clearpay_payments.nil?
        return @afterpay_clearpay_payments = nil
      end
      _afterpay_clearpay_payments = afterpay_clearpay_payments.not_nil!
      ENUM_VALIDATOR_FOR_AFTERPAY_CLEARPAY_PAYMENTS.valid!(_afterpay_clearpay_payments)
      @afterpay_clearpay_payments = _afterpay_clearpay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit_payments Object to be assigned
    def au_becs_debit_payments=(au_becs_debit_payments : String?)
      if au_becs_debit_payments.nil?
        return @au_becs_debit_payments = nil
      end
      _au_becs_debit_payments = au_becs_debit_payments.not_nil!
      ENUM_VALIDATOR_FOR_AU_BECS_DEBIT_PAYMENTS.valid!(_au_becs_debit_payments)
      @au_becs_debit_payments = _au_becs_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit_payments Object to be assigned
    def bacs_debit_payments=(bacs_debit_payments : String?)
      if bacs_debit_payments.nil?
        return @bacs_debit_payments = nil
      end
      _bacs_debit_payments = bacs_debit_payments.not_nil!
      ENUM_VALIDATOR_FOR_BACS_DEBIT_PAYMENTS.valid!(_bacs_debit_payments)
      @bacs_debit_payments = _bacs_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact_payments Object to be assigned
    def bancontact_payments=(bancontact_payments : String?)
      if bancontact_payments.nil?
        return @bancontact_payments = nil
      end
      _bancontact_payments = bancontact_payments.not_nil!
      ENUM_VALIDATOR_FOR_BANCONTACT_PAYMENTS.valid!(_bancontact_payments)
      @bancontact_payments = _bancontact_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_payments Object to be assigned
    def bank_transfer_payments=(bank_transfer_payments : String?)
      if bank_transfer_payments.nil?
        return @bank_transfer_payments = nil
      end
      _bank_transfer_payments = bank_transfer_payments.not_nil!
      ENUM_VALIDATOR_FOR_BANK_TRANSFER_PAYMENTS.valid!(_bank_transfer_payments)
      @bank_transfer_payments = _bank_transfer_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik_payments Object to be assigned
    def blik_payments=(blik_payments : String?)
      if blik_payments.nil?
        return @blik_payments = nil
      end
      _blik_payments = blik_payments.not_nil!
      ENUM_VALIDATOR_FOR_BLIK_PAYMENTS.valid!(_blik_payments)
      @blik_payments = _blik_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto_payments Object to be assigned
    def boleto_payments=(boleto_payments : String?)
      if boleto_payments.nil?
        return @boleto_payments = nil
      end
      _boleto_payments = boleto_payments.not_nil!
      ENUM_VALIDATOR_FOR_BOLETO_PAYMENTS.valid!(_boleto_payments)
      @boleto_payments = _boleto_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_issuing Object to be assigned
    def card_issuing=(card_issuing : String?)
      if card_issuing.nil?
        return @card_issuing = nil
      end
      _card_issuing = card_issuing.not_nil!
      ENUM_VALIDATOR_FOR_CARD_ISSUING.valid!(_card_issuing)
      @card_issuing = _card_issuing
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_payments Object to be assigned
    def card_payments=(card_payments : String?)
      if card_payments.nil?
        return @card_payments = nil
      end
      _card_payments = card_payments.not_nil!
      ENUM_VALIDATOR_FOR_CARD_PAYMENTS.valid!(_card_payments)
      @card_payments = _card_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cartes_bancaires_payments Object to be assigned
    def cartes_bancaires_payments=(cartes_bancaires_payments : String?)
      if cartes_bancaires_payments.nil?
        return @cartes_bancaires_payments = nil
      end
      _cartes_bancaires_payments = cartes_bancaires_payments.not_nil!
      ENUM_VALIDATOR_FOR_CARTES_BANCAIRES_PAYMENTS.valid!(_cartes_bancaires_payments)
      @cartes_bancaires_payments = _cartes_bancaires_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps_payments Object to be assigned
    def eps_payments=(eps_payments : String?)
      if eps_payments.nil?
        return @eps_payments = nil
      end
      _eps_payments = eps_payments.not_nil!
      ENUM_VALIDATOR_FOR_EPS_PAYMENTS.valid!(_eps_payments)
      @eps_payments = _eps_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx_payments Object to be assigned
    def fpx_payments=(fpx_payments : String?)
      if fpx_payments.nil?
        return @fpx_payments = nil
      end
      _fpx_payments = fpx_payments.not_nil!
      ENUM_VALIDATOR_FOR_FPX_PAYMENTS.valid!(_fpx_payments)
      @fpx_payments = _fpx_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay_payments Object to be assigned
    def giropay_payments=(giropay_payments : String?)
      if giropay_payments.nil?
        return @giropay_payments = nil
      end
      _giropay_payments = giropay_payments.not_nil!
      ENUM_VALIDATOR_FOR_GIROPAY_PAYMENTS.valid!(_giropay_payments)
      @giropay_payments = _giropay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay_payments Object to be assigned
    def grabpay_payments=(grabpay_payments : String?)
      if grabpay_payments.nil?
        return @grabpay_payments = nil
      end
      _grabpay_payments = grabpay_payments.not_nil!
      ENUM_VALIDATOR_FOR_GRABPAY_PAYMENTS.valid!(_grabpay_payments)
      @grabpay_payments = _grabpay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal_payments Object to be assigned
    def ideal_payments=(ideal_payments : String?)
      if ideal_payments.nil?
        return @ideal_payments = nil
      end
      _ideal_payments = ideal_payments.not_nil!
      ENUM_VALIDATOR_FOR_IDEAL_PAYMENTS.valid!(_ideal_payments)
      @ideal_payments = _ideal_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jcb_payments Object to be assigned
    def jcb_payments=(jcb_payments : String?)
      if jcb_payments.nil?
        return @jcb_payments = nil
      end
      _jcb_payments = jcb_payments.not_nil!
      ENUM_VALIDATOR_FOR_JCB_PAYMENTS.valid!(_jcb_payments)
      @jcb_payments = _jcb_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna_payments Object to be assigned
    def klarna_payments=(klarna_payments : String?)
      if klarna_payments.nil?
        return @klarna_payments = nil
      end
      _klarna_payments = klarna_payments.not_nil!
      ENUM_VALIDATOR_FOR_KLARNA_PAYMENTS.valid!(_klarna_payments)
      @klarna_payments = _klarna_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini_payments Object to be assigned
    def konbini_payments=(konbini_payments : String?)
      if konbini_payments.nil?
        return @konbini_payments = nil
      end
      _konbini_payments = konbini_payments.not_nil!
      ENUM_VALIDATOR_FOR_KONBINI_PAYMENTS.valid!(_konbini_payments)
      @konbini_payments = _konbini_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] legacy_payments Object to be assigned
    def legacy_payments=(legacy_payments : String?)
      if legacy_payments.nil?
        return @legacy_payments = nil
      end
      _legacy_payments = legacy_payments.not_nil!
      ENUM_VALIDATOR_FOR_LEGACY_PAYMENTS.valid!(_legacy_payments)
      @legacy_payments = _legacy_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_payments Object to be assigned
    def link_payments=(link_payments : String?)
      if link_payments.nil?
        return @link_payments = nil
      end
      _link_payments = link_payments.not_nil!
      ENUM_VALIDATOR_FOR_LINK_PAYMENTS.valid!(_link_payments)
      @link_payments = _link_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo_payments Object to be assigned
    def oxxo_payments=(oxxo_payments : String?)
      if oxxo_payments.nil?
        return @oxxo_payments = nil
      end
      _oxxo_payments = oxxo_payments.not_nil!
      ENUM_VALIDATOR_FOR_OXXO_PAYMENTS.valid!(_oxxo_payments)
      @oxxo_payments = _oxxo_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24_payments Object to be assigned
    def p24_payments=(p24_payments : String?)
      if p24_payments.nil?
        return @p24_payments = nil
      end
      _p24_payments = p24_payments.not_nil!
      ENUM_VALIDATOR_FOR_P24_PAYMENTS.valid!(_p24_payments)
      @p24_payments = _p24_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow_payments Object to be assigned
    def paynow_payments=(paynow_payments : String?)
      if paynow_payments.nil?
        return @paynow_payments = nil
      end
      _paynow_payments = paynow_payments.not_nil!
      ENUM_VALIDATOR_FOR_PAYNOW_PAYMENTS.valid!(_paynow_payments)
      @paynow_payments = _paynow_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay_payments Object to be assigned
    def promptpay_payments=(promptpay_payments : String?)
      if promptpay_payments.nil?
        return @promptpay_payments = nil
      end
      _promptpay_payments = promptpay_payments.not_nil!
      ENUM_VALIDATOR_FOR_PROMPTPAY_PAYMENTS.valid!(_promptpay_payments)
      @promptpay_payments = _promptpay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit_payments Object to be assigned
    def sepa_debit_payments=(sepa_debit_payments : String?)
      if sepa_debit_payments.nil?
        return @sepa_debit_payments = nil
      end
      _sepa_debit_payments = sepa_debit_payments.not_nil!
      ENUM_VALIDATOR_FOR_SEPA_DEBIT_PAYMENTS.valid!(_sepa_debit_payments)
      @sepa_debit_payments = _sepa_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort_payments Object to be assigned
    def sofort_payments=(sofort_payments : String?)
      if sofort_payments.nil?
        return @sofort_payments = nil
      end
      _sofort_payments = sofort_payments.not_nil!
      ENUM_VALIDATOR_FOR_SOFORT_PAYMENTS.valid!(_sofort_payments)
      @sofort_payments = _sofort_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_k Object to be assigned
    def tax_reporting_us_1099_k=(tax_reporting_us_1099_k : String?)
      if tax_reporting_us_1099_k.nil?
        return @tax_reporting_us_1099_k = nil
      end
      _tax_reporting_us_1099_k = tax_reporting_us_1099_k.not_nil!
      ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_K.valid!(_tax_reporting_us_1099_k)
      @tax_reporting_us_1099_k = _tax_reporting_us_1099_k
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_misc Object to be assigned
    def tax_reporting_us_1099_misc=(tax_reporting_us_1099_misc : String?)
      if tax_reporting_us_1099_misc.nil?
        return @tax_reporting_us_1099_misc = nil
      end
      _tax_reporting_us_1099_misc = tax_reporting_us_1099_misc.not_nil!
      ENUM_VALIDATOR_FOR_TAX_REPORTING_US_1099_MISC.valid!(_tax_reporting_us_1099_misc)
      @tax_reporting_us_1099_misc = _tax_reporting_us_1099_misc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfers Object to be assigned
    def transfers=(transfers : String?)
      if transfers.nil?
        return @transfers = nil
      end
      _transfers = transfers.not_nil!
      ENUM_VALIDATOR_FOR_TRANSFERS.valid!(_transfers)
      @transfers = _transfers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treasury Object to be assigned
    def treasury=(treasury : String?)
      if treasury.nil?
        return @treasury = nil
      end
      _treasury = treasury.not_nil!
      ENUM_VALIDATOR_FOR_TREASURY.valid!(_treasury)
      @treasury = _treasury
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account_ach_payments Object to be assigned
    def us_bank_account_ach_payments=(us_bank_account_ach_payments : String?)
      if us_bank_account_ach_payments.nil?
        return @us_bank_account_ach_payments = nil
      end
      _us_bank_account_ach_payments = us_bank_account_ach_payments.not_nil!
      ENUM_VALIDATOR_FOR_US_BANK_ACCOUNT_ACH_PAYMENTS.valid!(_us_bank_account_ach_payments)
      @us_bank_account_ach_payments = _us_bank_account_ach_payments
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit_payments, @affirm_payments, @afterpay_clearpay_payments, @au_becs_debit_payments, @bacs_debit_payments, @bancontact_payments, @bank_transfer_payments, @blik_payments, @boleto_payments, @card_issuing, @card_payments, @cartes_bancaires_payments, @eps_payments, @fpx_payments, @giropay_payments, @grabpay_payments, @ideal_payments, @jcb_payments, @klarna_payments, @konbini_payments, @legacy_payments, @link_payments, @oxxo_payments, @p24_payments, @paynow_payments, @promptpay_payments, @sepa_debit_payments, @sofort_payments, @tax_reporting_us_1099_k, @tax_reporting_us_1099_misc, @transfers, @treasury, @us_bank_account_ach_payments)
  end
end
