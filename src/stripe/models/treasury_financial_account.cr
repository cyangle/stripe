#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance. FinancialAccounts serve as the source and destination of Treasuryâ€™s money movement APIs.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TreasuryFinancialAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The array of paths to active Features in the Features hash.
    @[JSON::Field(key: "active_features", type: Array(String))]
    getter active_features : Array(String)

    ENUM_VALIDATOR_FOR_ACTIVE_FEATURES = EnumValidator.new("active_features", "Array(String)", ["card_issuing", "deposit_insurance", "financial_addresses.aba", "inbound_transfers.ach", "intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire", "outbound_transfers.ach", "outbound_transfers.us_domestic_wire", "remote_deposit_capture"])

    @[JSON::Field(key: "balance", type: AccountServiceResourceBalance)]
    property balance : AccountServiceResourceBalance

    # Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    @[JSON::Field(key: "country", type: String)]
    getter country : String

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # The set of credentials that resolve to a FinancialAccount.
    @[JSON::Field(key: "financial_addresses", type: Array(AccountServiceResourceFinancialAddress))]
    property financial_addresses : Array(AccountServiceResourceFinancialAddress)

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["treasury.financial_account"])

    # The array of paths to pending Features in the Features hash.
    @[JSON::Field(key: "pending_features", type: Array(String))]
    getter pending_features : Array(String)

    ENUM_VALIDATOR_FOR_PENDING_FEATURES = EnumValidator.new("pending_features", "Array(String)", ["card_issuing", "deposit_insurance", "financial_addresses.aba", "inbound_transfers.ach", "intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire", "outbound_transfers.ach", "outbound_transfers.us_domestic_wire", "remote_deposit_capture"])

    @[JSON::Field(key: "platform_restrictions", type: TreasuryFinancialAccountPlatformRestrictions?, presence: true, ignore_serialize: platform_restrictions.nil? && !platform_restrictions_present?)]
    property platform_restrictions : TreasuryFinancialAccountPlatformRestrictions?

    @[JSON::Field(ignore: true)]
    property? platform_restrictions_present : Bool = false

    # The array of paths to restricted Features in the Features hash.
    @[JSON::Field(key: "restricted_features", type: Array(String))]
    getter restricted_features : Array(String)

    ENUM_VALIDATOR_FOR_RESTRICTED_FEATURES = EnumValidator.new("restricted_features", "Array(String)", ["card_issuing", "deposit_insurance", "financial_addresses.aba", "inbound_transfers.ach", "intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire", "outbound_transfers.ach", "outbound_transfers.us_domestic_wire", "remote_deposit_capture"])

    # The enum specifying what state the account is in.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["closed", "open"])

    @[JSON::Field(key: "status_details", type: AccountServiceResourceTreasuryStatusDetails)]
    property status_details : AccountServiceResourceTreasuryStatusDetails

    # The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
    @[JSON::Field(key: "supported_currencies", type: Array(String))]
    property supported_currencies : Array(String)

    # Optional properties
    @[JSON::Field(key: "features", type: TreasuryFinancialAccountFeatures?, presence: true, ignore_serialize: features.nil? && !features_present?)]
    property features : TreasuryFinancialAccountFeatures?

    @[JSON::Field(ignore: true)]
    property? features_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @active_features : Array(String), @balance : AccountServiceResourceBalance, @country : String, @created : Int64, @financial_addresses : Array(AccountServiceResourceFinancialAddress), @id : String, @livemode : Bool, @metadata : Hash(String, String)?, @object : String, @pending_features : Array(String), @platform_restrictions : TreasuryFinancialAccountPlatformRestrictions?, @restricted_features : Array(String), @status : String, @status_details : AccountServiceResourceTreasuryStatusDetails, @supported_currencies : Array(String), @features : TreasuryFinancialAccountFeatures? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push(ENUM_VALIDATOR_FOR_ACTIVE_FEATURES.error_message) unless ENUM_VALIDATOR_FOR_ACTIVE_FEATURES.all_valid?(@active_features, false)

      if @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_PENDING_FEATURES.error_message) unless ENUM_VALIDATOR_FOR_PENDING_FEATURES.all_valid?(@pending_features, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_RESTRICTED_FEATURES.error_message) unless ENUM_VALIDATOR_FOR_RESTRICTED_FEATURES.all_valid?(@restricted_features, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_ACTIVE_FEATURES.all_valid?(@active_features, false)
      return false if @country.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_PENDING_FEATURES.all_valid?(@pending_features, false)
      return false unless ENUM_VALIDATOR_FOR_RESTRICTED_FEATURES.all_valid?(@restricted_features, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] active_features Object to be assigned
    def active_features=(active_features)
      ENUM_VALIDATOR_FOR_ACTIVE_FEATURES.all_valid!(active_features, false)
      @active_features = active_features
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending_features Object to be assigned
    def pending_features=(pending_features)
      ENUM_VALIDATOR_FOR_PENDING_FEATURES.all_valid!(pending_features, false)
      @pending_features = pending_features
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] restricted_features Object to be assigned
    def restricted_features=(restricted_features)
      ENUM_VALIDATOR_FOR_RESTRICTED_FEATURES.all_valid!(restricted_features, false)
      @restricted_features = restricted_features
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        active_features == o.active_features &&
        balance == o.balance &&
        country == o.country &&
        created == o.created &&
        features == o.features &&
        financial_addresses == o.financial_addresses &&
        id == o.id &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        object == o.object &&
        pending_features == o.pending_features &&
        platform_restrictions == o.platform_restrictions &&
        restricted_features == o.restricted_features &&
        status == o.status &&
        status_details == o.status_details &&
        supported_currencies == o.supported_currencies
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@active_features, @balance, @country, @created, @features, @financial_addresses, @id, @livemode, @metadata, @object, @pending_features, @platform_restrictions, @restricted_features, @status, @status_details, @supported_currencies)
  end
end
