#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TreasuryTransactionEntry
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "balance_impact", type: TransactionsResourceBalanceImpact)]
    property balance_impact : TransactionsResourceBalanceImpact

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # When the TransactionEntry will impact the FinancialAccount's balance.
    @[JSON::Field(key: "effective_at", type: Int64)]
    property effective_at : Int64

    # The FinancialAccount associated with this object.
    @[JSON::Field(key: "financial_account", type: String)]
    getter financial_account : String

    # Type of the flow associated with the TransactionEntry.
    @[JSON::Field(key: "flow_type", type: String)]
    getter flow_type : String

    ENUM_VALIDATOR_FOR_FLOW_TYPE = EnumValidator.new("flow_type", "String", ["credit_reversal", "debit_reversal", "inbound_transfer", "issuing_authorization", "other", "outbound_payment", "outbound_transfer", "received_credit", "received_debit"])

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["treasury.transaction_entry"])

    @[JSON::Field(key: "transaction", type: OutboundPaymentsResourceTreasuryReturnedStatusTransaction)]
    property transaction : OutboundPaymentsResourceTreasuryReturnedStatusTransaction

    # The specific money movement that generated the TransactionEntry.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["credit_reversal", "credit_reversal_posting", "debit_reversal", "inbound_transfer", "inbound_transfer_return", "issuing_authorization_hold", "issuing_authorization_release", "other", "outbound_payment", "outbound_payment_cancellation", "outbound_payment_failure", "outbound_payment_posting", "outbound_payment_return", "outbound_transfer", "outbound_transfer_cancellation", "outbound_transfer_failure", "outbound_transfer_posting", "outbound_transfer_return", "received_credit", "received_debit"])

    # Optional properties

    # Token of the flow associated with the TransactionEntry.
    @[JSON::Field(key: "flow", type: String?, presence: true, ignore_serialize: flow.nil? && !flow_present?)]
    getter flow : String?

    @[JSON::Field(ignore: true)]
    property? flow_present : Bool = false

    @[JSON::Field(key: "flow_details", type: TreasuryTransactionEntryFlowDetails?, presence: true, ignore_serialize: flow_details.nil? && !flow_details_present?)]
    property flow_details : TreasuryTransactionEntryFlowDetails?

    @[JSON::Field(ignore: true)]
    property? flow_details_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @balance_impact : TransactionsResourceBalanceImpact,
      @created : Int64,
      @currency : String,
      @effective_at : Int64,
      @financial_account : String,
      @flow_type : String,
      @id : String,
      @livemode : Bool,
      @object : String,
      @transaction : OutboundPaymentsResourceTreasuryReturnedStatusTransaction,
      @_type : String,
      # Optional properties
      @flow : String? = nil,
      @flow_details : TreasuryTransactionEntryFlowDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @financial_account.to_s.size > 5000
        invalid_properties.push("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_FLOW_TYPE.error_message) unless ENUM_VALIDATOR_FOR_FLOW_TYPE.valid?(@flow_type, false)

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      if !@flow.nil? && @flow.to_s.size > 5000
        invalid_properties.push("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @financial_account.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_FLOW_TYPE.valid?(@flow_type, false)
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      return false if !@flow.nil? && @flow.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] financial_account Value to be assigned
    def financial_account=(financial_account)
      if financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      @financial_account = financial_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow_type Object to be assigned
    def flow_type=(flow_type)
      ENUM_VALIDATOR_FOR_FLOW_TYPE.valid!(flow_type, false)
      @flow_type = flow_type
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] flow Value to be assigned
    def flow=(flow)
      if !flow.nil? && flow.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
      end

      @flow = flow
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@balance_impact, @created, @currency, @effective_at, @financial_account, @flow_type, @id, @livemode, @object, @transaction, @_type, @flow, @flow_details)
  end
end
