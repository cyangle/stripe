#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # If this Card is part of a card wallet, this contains the details of the card wallet.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentMethodDetailsCardWallet1
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # (For tokenized numbers only.) The last four digits of the device account number.
    @[JSON::Field(key: "dynamic_last4", type: String, presence: true, ignore_serialize: dynamic_last4.nil? && !dynamic_last4_present?)]
    getter dynamic_last4 : String

    @[JSON::Field(ignore: true)]
    property? dynamic_last4_present : Bool = false

    # The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
    @[JSON::Field(key: "type", type: String?)]
    getter _type : String?

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["amex_express_checkout", "apple_pay", "google_pay", "masterpass", "samsung_pay", "visa_checkout"])

    # Optional properties
    #
    @[JSON::Field(key: "amex_express_checkout", type: JSON::Any, presence: true, ignore_serialize: amex_express_checkout.nil? && !amex_express_checkout_present?)]
    property amex_express_checkout : JSON::Any

    @[JSON::Field(ignore: true)]
    property? amex_express_checkout_present : Bool = false

    #
    @[JSON::Field(key: "apple_pay", type: JSON::Any, presence: true, ignore_serialize: apple_pay.nil? && !apple_pay_present?)]
    property apple_pay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? apple_pay_present : Bool = false

    #
    @[JSON::Field(key: "google_pay", type: JSON::Any, presence: true, ignore_serialize: google_pay.nil? && !google_pay_present?)]
    property google_pay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? google_pay_present : Bool = false

    @[JSON::Field(key: "masterpass", type: PaymentMethodDetailsCardWalletMasterpass?, presence: true, ignore_serialize: masterpass.nil? && !masterpass_present?)]
    property masterpass : PaymentMethodDetailsCardWalletMasterpass?

    @[JSON::Field(ignore: true)]
    property? masterpass_present : Bool = false

    #
    @[JSON::Field(key: "samsung_pay", type: JSON::Any, presence: true, ignore_serialize: samsung_pay.nil? && !samsung_pay_present?)]
    property samsung_pay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? samsung_pay_present : Bool = false

    @[JSON::Field(key: "visa_checkout", type: PaymentMethodDetailsCardWalletVisaCheckout?, presence: true, ignore_serialize: visa_checkout.nil? && !visa_checkout_present?)]
    property visa_checkout : PaymentMethodDetailsCardWalletVisaCheckout?

    @[JSON::Field(ignore: true)]
    property? visa_checkout_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::PaymentMethodDetailsCardWallet,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @dynamic_last4 : String?, @_type : String, @amex_express_checkout : JSON::Any = nil, @apple_pay : JSON::Any = nil, @google_pay : JSON::Any = nil, @masterpass : PaymentMethodDetailsCardWalletMasterpass? = nil, @samsung_pay : JSON::Any = nil, @visa_checkout : PaymentMethodDetailsCardWalletVisaCheckout? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @dynamic_last4.to_s.size > 5000
        invalid_properties.push("invalid value for \"dynamic_last4\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @dynamic_last4.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] dynamic_last4 Value to be assigned
    def dynamic_last4=(dynamic_last4)
      if dynamic_last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"dynamic_last4\", the character length must be smaller than or equal to 5000.")
      end

      @dynamic_last4 = dynamic_last4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amex_express_checkout == o.amex_express_checkout &&
        apple_pay == o.apple_pay &&
        dynamic_last4 == o.dynamic_last4 &&
        google_pay == o.google_pay &&
        masterpass == o.masterpass &&
        samsung_pay == o.samsung_pay &&
        _type == o._type &&
        visa_checkout == o.visa_checkout
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amex_express_checkout, @apple_pay, @dynamic_last4, @google_pay, @masterpass, @samsung_pay, @_type, @visa_checkout)
  end
end
