#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./climate_product"
require "./climate_removals_products_price"
require "./climate_supplier"

module Stripe
  # Unique ID for the Climate `Product` this order is purchasing.
  class ClimateOrderProduct
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Current prices for a metric ton of carbon removal in a currency's smallest unit.
    @[JSON::Field(key: "current_prices_per_metric_ton", type: Hash(String, Stripe::ClimateRemovalsProductsPrice)?, default: nil, required: true, nullable: false, emit_null: false)]
    property current_prices_per_metric_ton : Hash(String, Stripe::ClimateRemovalsProductsPrice)? = nil

    # The year in which the carbon removal is expected to be delivered.
    @[JSON::Field(key: "delivery_year", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property delivery_year : Int64? = nil

    # Unique identifier for the object. For convenience, Climate product IDs are human-readable strings that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory) for a list of available carbon removal products.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # The quantity of metric tons available for reservation.
    @[JSON::Field(key: "metric_tons_available", type: BigDecimal?, default: nil, required: true, nullable: false, emit_null: false)]
    property metric_tons_available : BigDecimal? = nil

    # The Climate product's name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [climate.product]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("climate.product")

    # The carbon removal suppliers that fulfill orders for this Climate product.
    @[JSON::Field(key: "suppliers", type: Array(Stripe::ClimateSupplier)?, default: nil, required: true, nullable: false, emit_null: false)]
    property suppliers : Array(Stripe::ClimateSupplier)? = nil

    # End of Required Properties
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::ClimateProduct,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @current_prices_per_metric_ton : Hash(String, Stripe::ClimateRemovalsProductsPrice)? = nil,
      @delivery_year : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metric_tons_available : BigDecimal? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @suppliers : Array(Stripe::ClimateSupplier)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @current_prices_per_metric_ton, @delivery_year, @id, @livemode, @metric_tons_available, @name, @object, @suppliers)
  end
end
