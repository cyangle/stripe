#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./card_issuing_param"
require "./date_of_birth_specs"
require "./person_verification_param"

module Stripe
  class IndividualParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "card_issuing", type: Stripe::CardIssuingParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_issuing : Stripe::CardIssuingParam? = nil

    @[JSON::Field(key: "dob", type: Stripe::DateOfBirthSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter dob : Stripe::DateOfBirthSpecs? = nil

    # The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
    @[JSON::Field(key: "first_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter first_name : String? = nil

    # The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
    @[JSON::Field(key: "last_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter last_name : String? = nil

    @[JSON::Field(key: "verification", type: Stripe::PersonVerificationParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verification : Stripe::PersonVerificationParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @card_issuing : Stripe::CardIssuingParam? = nil,
      @dob : Stripe::DateOfBirthSpecs? = nil,
      @first_name : String? = nil,
      @last_name : String? = nil,
      @verification : Stripe::PersonVerificationParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_card_issuing = @card_issuing).nil?
        invalid_properties.concat(_card_issuing.list_invalid_properties_for("card_issuing")) if _card_issuing.is_a?(OpenApi::Validatable)
      end
      unless (_dob = @dob).nil?
        invalid_properties.concat(_dob.list_invalid_properties_for("dob")) if _dob.is_a?(OpenApi::Validatable)
      end

      unless (_verification = @verification).nil?
        invalid_properties.concat(_verification.list_invalid_properties_for("verification")) if _verification.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_card_issuing = @card_issuing).nil?
        return false if _card_issuing.is_a?(OpenApi::Validatable) && !_card_issuing.valid?
      end

      unless (_dob = @dob).nil?
        return false if _dob.is_a?(OpenApi::Validatable) && !_dob.valid?
      end

      unless (_verification = @verification).nil?
        return false if _verification.is_a?(OpenApi::Validatable) && !_verification.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_issuing Object to be assigned
    def card_issuing=(new_value : Stripe::CardIssuingParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_issuing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dob Object to be assigned
    def dob=(new_value : Stripe::DateOfBirthSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @dob = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(new_value : String?)
      @first_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(new_value : String?)
      @last_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification Object to be assigned
    def verification=(new_value : Stripe::PersonVerificationParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @verification = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@card_issuing, @dob, @first_name, @last_name, @verification)
  end
end
