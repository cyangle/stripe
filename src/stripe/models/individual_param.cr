#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Additional information about an `individual` cardholder.
  class IndividualParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "first_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter first_name : String? = nil

    @[JSON::Field(key: "last_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter last_name : String? = nil

    # Optional properties

    @[JSON::Field(key: "dob", type: Stripe::DateOfBirthSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter dob : Stripe::DateOfBirthSpecs? = nil

    @[JSON::Field(key: "verification", type: Stripe::PersonVerificationParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verification : Stripe::PersonVerificationParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @first_name : String? = nil,
      @last_name : String? = nil,
      # Optional properties
      @dob : Stripe::DateOfBirthSpecs? = nil,
      @verification : Stripe::PersonVerificationParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"first_name\" is required and cannot be null") if @first_name.nil?
      invalid_properties.push("\"last_name\" is required and cannot be null") if @last_name.nil?
      # This is a model dob : Stripe::DateOfBirthSpecs?
      # This is a model verification : Stripe::PersonVerificationParam?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @first_name.nil?
      return false if @last_name.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(first_name : String?)
      if first_name.nil?
        raise ArgumentError.new("\"first_name\" is required and cannot be null")
      end
      @first_name = first_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(last_name : String?)
      if last_name.nil?
        raise ArgumentError.new("\"last_name\" is required and cannot be null")
      end
      @last_name = last_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dob Object to be assigned
    def dob=(dob : Stripe::DateOfBirthSpecs?)
      if dob.nil?
        return @dob = nil
      end
      @dob = dob
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification Object to be assigned
    def verification=(verification : Stripe::PersonVerificationParam?)
      if verification.nil?
        return @verification = nil
      end
      @verification = verification
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@first_name, @last_name, @dob, @verification)
  end
end
