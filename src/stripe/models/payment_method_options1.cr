#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PaymentMethodOptions1
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentMethodOptionsAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentMethodOptionsAcssDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentMethodOptionsBancontact1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentMethodOptionsBancontact1? = nil

    @[JSON::Field(key: "card", type: Stripe::PaymentMethodOptions1Card?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PaymentMethodOptions1Card? = nil

    @[JSON::Field(key: "customer_balance", type: Stripe::PaymentMethodOptionsCustomerBalance1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : Stripe::PaymentMethodOptionsCustomerBalance1? = nil

    @[JSON::Field(key: "konbini", type: Stripe::PaymentMethodOptionsKonbini1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : Stripe::PaymentMethodOptionsKonbini1? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::PaymentMethodOptionsUsBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::PaymentMethodOptionsUsBankAccount? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit : Stripe::PaymentMethodOptionsAcssDebit? = nil,
      @bancontact : Stripe::PaymentMethodOptionsBancontact1? = nil,
      @card : Stripe::PaymentMethodOptions1Card? = nil,
      @customer_balance : Stripe::PaymentMethodOptionsCustomerBalance1? = nil,
      @konbini : Stripe::PaymentMethodOptionsKonbini1? = nil,
      @us_bank_account : Stripe::PaymentMethodOptionsUsBankAccount? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model acss_debit : Stripe::PaymentMethodOptionsAcssDebit?
      # This is a model bancontact : Stripe::PaymentMethodOptionsBancontact1?
      # This is a model card : Stripe::PaymentMethodOptions1Card?
      # This is a model customer_balance : Stripe::PaymentMethodOptionsCustomerBalance1?
      # This is a model konbini : Stripe::PaymentMethodOptionsKonbini1?
      # This is a model us_bank_account : Stripe::PaymentMethodOptionsUsBankAccount?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::PaymentMethodOptionsAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      @acss_debit = acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::PaymentMethodOptionsBancontact1?)
      if bancontact.nil?
        return @bancontact = nil
      end
      @bancontact = bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::PaymentMethodOptions1Card?)
      if card.nil?
        return @card = nil
      end
      @card = card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : Stripe::PaymentMethodOptionsCustomerBalance1?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      @customer_balance = customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(konbini : Stripe::PaymentMethodOptionsKonbini1?)
      if konbini.nil?
        return @konbini = nil
      end
      @konbini = konbini
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(us_bank_account : Stripe::PaymentMethodOptionsUsBankAccount?)
      if us_bank_account.nil?
        return @us_bank_account = nil
      end
      @us_bank_account = us_bank_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit, @bancontact, @card, @customer_balance, @konbini, @us_bank_account)
  end
end
