#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostPromotionCodesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The coupon for this promotion code.
    @[JSON::Field(key: "coupon", type: String)]
    getter coupon : String

    # Optional properties
    # Whether the promotion code is currently active.
    @[JSON::Field(key: "active", type: Bool?, presence: true, ignore_serialize: active.nil? && !active_present?)]
    property active : Bool?

    @[JSON::Field(ignore: true)]
    property? active_present : Bool = false

    # The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically.
    @[JSON::Field(key: "code", type: String?, presence: true, ignore_serialize: code.nil? && !code_present?)]
    getter code : String?

    @[JSON::Field(ignore: true)]
    property? code_present : Bool = false

    # The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers.
    @[JSON::Field(key: "customer", type: String?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # The timestamp at which this promotion code will expire. If the coupon has specified a `redeems_by`, then this value cannot be after the coupon's `redeems_by`.
    @[JSON::Field(key: "expires_at", type: Int64?, presence: true, ignore_serialize: expires_at.nil? && !expires_at_present?)]
    property expires_at : Int64?

    @[JSON::Field(ignore: true)]
    property? expires_at_present : Bool = false

    # A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a `max_redemptions`, then this value cannot be greater than the coupon's `max_redemptions`.
    @[JSON::Field(key: "max_redemptions", type: Int64?, presence: true, ignore_serialize: max_redemptions.nil? && !max_redemptions_present?)]
    property max_redemptions : Int64?

    @[JSON::Field(ignore: true)]
    property? max_redemptions_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "restrictions", type: RestrictionsParams?, presence: true, ignore_serialize: restrictions.nil? && !restrictions_present?)]
    property restrictions : RestrictionsParams?

    @[JSON::Field(ignore: true)]
    property? restrictions_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @coupon : String, @active : Bool? = nil, @code : String? = nil, @customer : String? = nil, @expand : Array(String)? = nil, @expires_at : Int64? = nil, @max_redemptions : Int64? = nil, @metadata : Hash(String, String)? = nil, @restrictions : RestrictionsParams? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@code.nil? && @code.to_s.size > 500
        invalid_properties.push("invalid value for \"code\", the character length must be smaller than or equal to 500.")
      end

      if @coupon.to_s.size > 5000
        invalid_properties.push("invalid value for \"coupon\", the character length must be smaller than or equal to 5000.")
      end

      if !@customer.nil? && @customer.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@code.nil? && @code.to_s.size > 500
      return false if @coupon.to_s.size > 5000
      return false if !@customer.nil? && @customer.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if !code.nil? && code.to_s.size > 500
        raise ArgumentError.new("invalid value for \"code\", the character length must be smaller than or equal to 500.")
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] coupon Value to be assigned
    def coupon=(coupon)
      if coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\", the character length must be smaller than or equal to 5000.")
      end

      @coupon = coupon
    end

    # Custom attribute writer method with validation
    # @param [Object] customer Value to be assigned
    def customer=(customer)
      if !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        active == o.active &&
        code == o.code &&
        coupon == o.coupon &&
        customer == o.customer &&
        expand == o.expand &&
        expires_at == o.expires_at &&
        max_redemptions == o.max_redemptions &&
        metadata == o.metadata &&
        restrictions == o.restrictions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@active, @code, @coupon, @customer, @expand, @expires_at, @max_redemptions, @metadata, @restrictions)
  end
end
