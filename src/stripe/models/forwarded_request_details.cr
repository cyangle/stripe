#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./forwarded_request_header"

module Stripe
  # Details about the request forwarded to the destination endpoint.
  class ForwardedRequestDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The body payload to send to the destination endpoint.
    @[JSON::Field(key: "body", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter body : String? = nil
    MAX_LENGTH_FOR_BODY = 5000

    # The headers to include in the forwarded request. Can be omitted if no additional headers (excluding Stripe-generated ones such as the Content-Type header) should be included.
    @[JSON::Field(key: "headers", type: Array(Stripe::ForwardedRequestHeader)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter headers : Array(Stripe::ForwardedRequestHeader)? = nil

    # The HTTP method used to call the destination endpoint.
    @[JSON::Field(key: "http_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter http_method : String? = nil
    ERROR_MESSAGE_FOR_HTTP_METHOD = "invalid value for \"http_method\", must be one of [POST]."
    VALID_VALUES_FOR_HTTP_METHOD  = String.static_array("POST")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @body : String? = nil,
      @headers : Array(Stripe::ForwardedRequestHeader)? = nil,
      @http_method : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"body\" is required and cannot be null") if @body.nil?

      unless (_body = @body).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("body", _body.to_s.size, MAX_LENGTH_FOR_BODY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"headers\" is required and cannot be null") if @headers.nil?

      unless (_headers = @headers).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "headers", container: _headers)) if _headers.is_a?(Array)
      end
      invalid_properties.push("\"http_method\" is required and cannot be null") if @http_method.nil?

      unless (_http_method = @http_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_HTTP_METHOD) unless OpenApi::EnumValidator.valid?(_http_method, VALID_VALUES_FOR_HTTP_METHOD)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @body.nil?
      unless (_body = @body).nil?
        return false if _body.to_s.size > MAX_LENGTH_FOR_BODY
      end

      return false if @headers.nil?
      unless (_headers = @headers).nil?
        return false if _headers.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _headers)
      end

      return false if @http_method.nil?
      unless (_http_method = @http_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_http_method, VALID_VALUES_FOR_HTTP_METHOD)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] body Object to be assigned
    def body=(new_value : String?)
      raise ArgumentError.new("\"body\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("body", new_value.to_s.size, MAX_LENGTH_FOR_BODY)
      end

      @body = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] headers Object to be assigned
    def headers=(new_value : Array(Stripe::ForwardedRequestHeader)?)
      raise ArgumentError.new("\"headers\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @headers = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] http_method Object to be assigned
    def http_method=(new_value : String?)
      raise ArgumentError.new("\"http_method\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("http_method", new_value, VALID_VALUES_FOR_HTTP_METHOD)
      end

      @http_method = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@body, @headers, @http_method)
  end
end
