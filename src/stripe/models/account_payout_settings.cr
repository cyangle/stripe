#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class AccountPayoutSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`.
    @[JSON::Field(key: "debit_negative_balances", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter debit_negative_balances : Bool? = nil

    @[JSON::Field(key: "schedule", type: Stripe::TransferSchedule?, default: nil, required: true, nullable: false, emit_null: false)]
    getter schedule : Stripe::TransferSchedule? = nil

    # Optional properties

    # The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String? = nil

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @debit_negative_balances : Bool? = nil,
      @schedule : Stripe::TransferSchedule? = nil,
      # Optional properties
      @statement_descriptor : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"debit_negative_balances\" is required and cannot be null") if @debit_negative_balances.nil?

      invalid_properties.push("\"schedule\" is required and cannot be null") if @schedule.nil?
      if _schedule = @schedule
        invalid_properties.concat(_schedule.list_invalid_properties_for("schedule")) if _schedule.is_a?(OpenApi::Validatable)
      end
      if _statement_descriptor = @statement_descriptor
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @debit_negative_balances.nil?

      return false if @schedule.nil?
      if _schedule = @schedule
        return false if _schedule.is_a?(OpenApi::Validatable) && !_schedule.valid?
      end
      if _statement_descriptor = @statement_descriptor
        return false if _statement_descriptor.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] debit_negative_balances Object to be assigned
    def debit_negative_balances=(debit_negative_balances : Bool?)
      if debit_negative_balances.nil?
        raise ArgumentError.new("\"debit_negative_balances\" is required and cannot be null")
      end
      _debit_negative_balances = debit_negative_balances.not_nil!
      @debit_negative_balances = _debit_negative_balances
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] schedule Object to be assigned
    def schedule=(schedule : Stripe::TransferSchedule?)
      if schedule.nil?
        raise ArgumentError.new("\"schedule\" is required and cannot be null")
      end
      _schedule = schedule.not_nil!
      _schedule.validate if _schedule.is_a?(OpenApi::Validatable)
      @schedule = _schedule
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        return @statement_descriptor = nil
      end
      _statement_descriptor = statement_descriptor.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @statement_descriptor = _statement_descriptor
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@debit_negative_balances, @schedule, @statement_descriptor, @statement_descriptor_present)
  end
end
