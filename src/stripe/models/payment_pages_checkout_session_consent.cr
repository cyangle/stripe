#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentPagesCheckoutSessionConsent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # If `opt_in`, the customer consents to receiving promotional communications from the merchant about this Checkout Session.
    @[JSON::Field(key: "promotions", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: promotions.nil? && !promotions_present?)]
    getter promotions : String? = nil
    ERROR_MESSAGE_FOR_PROMOTIONS = "invalid value for \"promotions\", must be one of [opt_in, opt_out]."
    VALID_VALUES_FOR_PROMOTIONS  = String.static_array("opt_in", "opt_out")

    @[JSON::Field(ignore: true)]
    property? promotions_present : Bool = false

    # If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service.
    @[JSON::Field(key: "terms_of_service", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: terms_of_service.nil? && !terms_of_service_present?)]
    getter terms_of_service : String? = nil
    ERROR_MESSAGE_FOR_TERMS_OF_SERVICE = "invalid value for \"terms_of_service\", must be one of [accepted]."
    VALID_VALUES_FOR_TERMS_OF_SERVICE  = String.static_array("accepted")

    @[JSON::Field(ignore: true)]
    property? terms_of_service_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @promotions : String? = nil,
      @terms_of_service : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_promotions = @promotions).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PROMOTIONS) unless OpenApi::EnumValidator.valid?(_promotions, VALID_VALUES_FOR_PROMOTIONS)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_promotions = @promotions).nil?
        return false unless OpenApi::EnumValidator.valid?(_promotions, VALID_VALUES_FOR_PROMOTIONS)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promotions Object to be assigned
    def promotions=(promotions : String?)
      if promotions.nil?
        return @promotions = nil
      end
      _promotions = promotions.not_nil!
      OpenApi::EnumValidator.validate("promotions", _promotions, VALID_VALUES_FOR_PROMOTIONS)
      @promotions = _promotions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terms_of_service Object to be assigned
    def terms_of_service=(terms_of_service : String?)
      @terms_of_service = terms_of_service
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@promotions, @promotions_present, @terms_of_service, @terms_of_service_present)
  end
end
