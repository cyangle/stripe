#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
  class FinancialConnectionsAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # The type of the account. Account category is further divided in `subcategory`.
    @[JSON::Field(key: "category", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category : String? = nil

    ENUM_VALIDATOR_FOR_CATEGORY = OpenApi::EnumValidator.new("category", "String", ["cash", "credit", "investment", "other"])

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The name of the institution that holds this account.
    @[JSON::Field(key: "institution_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter institution_name : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = OpenApi::EnumValidator.new("object", "String", ["financial_connections.account"])

    # The status of the link to the account.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    ENUM_VALIDATOR_FOR_STATUS = OpenApi::EnumValidator.new("status", "String", ["active", "disconnected", "inactive"])

    # If `category` is `cash`, one of:   - `checking`  - `savings`  - `other`  If `category` is `credit`, one of:   - `mortgage`  - `line_of_credit`  - `credit_card`  - `other`  If `category` is `investment` or `other`, this will be `other`.
    @[JSON::Field(key: "subcategory", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter subcategory : String? = nil

    ENUM_VALIDATOR_FOR_SUBCATEGORY = OpenApi::EnumValidator.new("subcategory", "String", ["checking", "credit_card", "line_of_credit", "mortgage", "other", "savings"])

    # The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.
    @[JSON::Field(key: "supported_payment_method_types", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter supported_payment_method_types : Array(String)? = nil

    ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES = OpenApi::EnumValidator.new("supported_payment_method_types", "Array(String)", ["link", "us_bank_account"])

    # Optional properties

    @[JSON::Field(key: "account_holder", type: Stripe::FinancialConnectionsAccountAccountHolder?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_holder.nil? && !account_holder_present?)]
    getter account_holder : Stripe::FinancialConnectionsAccountAccountHolder? = nil

    @[JSON::Field(ignore: true)]
    property? account_holder_present : Bool = false

    @[JSON::Field(key: "balance", type: Stripe::FinancialConnectionsAccountBalance?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: balance.nil? && !balance_present?)]
    getter balance : Stripe::FinancialConnectionsAccountBalance? = nil

    @[JSON::Field(ignore: true)]
    property? balance_present : Bool = false

    @[JSON::Field(key: "balance_refresh", type: Stripe::FinancialConnectionsAccountBalanceRefresh?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: balance_refresh.nil? && !balance_refresh_present?)]
    getter balance_refresh : Stripe::FinancialConnectionsAccountBalanceRefresh? = nil

    @[JSON::Field(ignore: true)]
    property? balance_refresh_present : Bool = false

    # A human-readable name that has been assigned to this account, either by the account holder or by the institution.
    @[JSON::Field(key: "display_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: display_name.nil? && !display_name_present?)]
    getter display_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? display_name_present : Bool = false

    # The last 4 digits of the account number. If present, this will be 4 numeric characters.
    @[JSON::Field(key: "last4", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last4.nil? && !last4_present?)]
    getter last4 : String? = nil

    @[JSON::Field(ignore: true)]
    property? last4_present : Bool = false

    @[JSON::Field(key: "ownership", type: Stripe::FinancialConnectionsAccountOwnership2?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ownership.nil? && !ownership_present?)]
    getter ownership : Stripe::FinancialConnectionsAccountOwnership2? = nil

    @[JSON::Field(ignore: true)]
    property? ownership_present : Bool = false

    @[JSON::Field(key: "ownership_refresh", type: Stripe::FinancialConnectionsAccountOwnershipRefresh?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ownership_refresh.nil? && !ownership_refresh_present?)]
    getter ownership_refresh : Stripe::FinancialConnectionsAccountOwnershipRefresh? = nil

    @[JSON::Field(ignore: true)]
    property? ownership_refresh_present : Bool = false

    # The list of permissions granted by this account.
    @[JSON::Field(key: "permissions", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: permissions.nil? && !permissions_present?)]
    getter permissions : Array(String)? = nil

    @[JSON::Field(ignore: true)]
    property? permissions_present : Bool = false

    ENUM_VALIDATOR_FOR_PERMISSIONS = OpenApi::EnumValidator.new("permissions", "Array(String)", ["balances", "ownership", "payment_method", "transactions"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @category : String? = nil,
      @created : Int64? = nil,
      @id : String? = nil,
      @institution_name : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @subcategory : String? = nil,
      @supported_payment_method_types : Array(String)? = nil,
      # Optional properties
      @account_holder : Stripe::FinancialConnectionsAccountAccountHolder? = nil,
      @balance : Stripe::FinancialConnectionsAccountBalance? = nil,
      @balance_refresh : Stripe::FinancialConnectionsAccountBalanceRefresh? = nil,
      @display_name : String? = nil,
      @last4 : String? = nil,
      @ownership : Stripe::FinancialConnectionsAccountOwnership2? = nil,
      @ownership_refresh : Stripe::FinancialConnectionsAccountOwnershipRefresh? = nil,
      @permissions : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_CATEGORY.error_message) unless ENUM_VALIDATOR_FOR_CATEGORY.valid?(@category, false)
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"institution_name\" is required and cannot be null") if @institution_name.nil?
      if _institution_name = @institution_name
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("institution_name", _institution_name.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUBCATEGORY.error_message) unless ENUM_VALIDATOR_FOR_SUBCATEGORY.valid?(@subcategory, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES.error_message) unless ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES.all_valid?(@supported_payment_method_types, false)
      if _account_holder = @account_holder
        invalid_properties.concat(_account_holder.list_invalid_properties_for("account_holder")) if _account_holder.is_a?(OpenApi::Validatable)
      end
      if _balance = @balance
        invalid_properties.concat(_balance.list_invalid_properties_for("balance")) if _balance.is_a?(OpenApi::Validatable)
      end
      if _balance_refresh = @balance_refresh
        invalid_properties.concat(_balance_refresh.list_invalid_properties_for("balance_refresh")) if _balance_refresh.is_a?(OpenApi::Validatable)
      end
      if _display_name = @display_name
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("display_name", _display_name.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _last4 = @last4
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("last4", _last4.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _ownership = @ownership
        invalid_properties.concat(_ownership.list_invalid_properties_for("ownership")) if _ownership.is_a?(OpenApi::Validatable)
      end
      if _ownership_refresh = @ownership_refresh
        invalid_properties.concat(_ownership_refresh.list_invalid_properties_for("ownership_refresh")) if _ownership_refresh.is_a?(OpenApi::Validatable)
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_PERMISSIONS.error_message) unless ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid?(@permissions)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false unless ENUM_VALIDATOR_FOR_CATEGORY.valid?(@category, false)
      return false if @created.nil?

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @institution_name.nil?
      if _institution_name = @institution_name
        return false if _institution_name.to_s.size > 5000
      end
      return false if @livemode.nil?

      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false unless ENUM_VALIDATOR_FOR_SUBCATEGORY.valid?(@subcategory, false)
      return false unless ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES.all_valid?(@supported_payment_method_types, false)
      if _account_holder = @account_holder
        return false if _account_holder.is_a?(OpenApi::Validatable) && !_account_holder.valid?
      end
      if _balance = @balance
        return false if _balance.is_a?(OpenApi::Validatable) && !_balance.valid?
      end
      if _balance_refresh = @balance_refresh
        return false if _balance_refresh.is_a?(OpenApi::Validatable) && !_balance_refresh.valid?
      end
      if _display_name = @display_name
        return false if _display_name.to_s.size > 5000
      end
      if _last4 = @last4
        return false if _last4.to_s.size > 5000
      end
      if _ownership = @ownership
        return false if _ownership.is_a?(OpenApi::Validatable) && !_ownership.valid?
      end
      if _ownership_refresh = @ownership_refresh
        return false if _ownership_refresh.is_a?(OpenApi::Validatable) && !_ownership_refresh.valid?
      end
      return false unless ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid?(@permissions)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category : String?)
      if category.nil?
        raise ArgumentError.new("\"category\" is required and cannot be null")
      end
      _category = category.not_nil!
      ENUM_VALIDATOR_FOR_CATEGORY.valid!(_category)
      @category = _category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_name Object to be assigned
    def institution_name=(institution_name : String?)
      if institution_name.nil?
        raise ArgumentError.new("\"institution_name\" is required and cannot be null")
      end
      _institution_name = institution_name.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("institution_name", _institution_name.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @institution_name = _institution_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subcategory Object to be assigned
    def subcategory=(subcategory : String?)
      if subcategory.nil?
        raise ArgumentError.new("\"subcategory\" is required and cannot be null")
      end
      _subcategory = subcategory.not_nil!
      ENUM_VALIDATOR_FOR_SUBCATEGORY.valid!(_subcategory)
      @subcategory = _subcategory
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supported_payment_method_types Object to be assigned
    def supported_payment_method_types=(supported_payment_method_types : Array(String)?)
      if supported_payment_method_types.nil?
        raise ArgumentError.new("\"supported_payment_method_types\" is required and cannot be null")
      end
      _supported_payment_method_types = supported_payment_method_types.not_nil!
      ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES.all_valid!(_supported_payment_method_types)
      @supported_payment_method_types = _supported_payment_method_types
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_holder Object to be assigned
    def account_holder=(account_holder : Stripe::FinancialConnectionsAccountAccountHolder?)
      if account_holder.nil?
        return @account_holder = nil
      end
      _account_holder = account_holder.not_nil!
      _account_holder.validate if _account_holder.is_a?(OpenApi::Validatable)
      @account_holder = _account_holder
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance Object to be assigned
    def balance=(balance : Stripe::FinancialConnectionsAccountBalance?)
      if balance.nil?
        return @balance = nil
      end
      _balance = balance.not_nil!
      _balance.validate if _balance.is_a?(OpenApi::Validatable)
      @balance = _balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_refresh Object to be assigned
    def balance_refresh=(balance_refresh : Stripe::FinancialConnectionsAccountBalanceRefresh?)
      if balance_refresh.nil?
        return @balance_refresh = nil
      end
      _balance_refresh = balance_refresh.not_nil!
      _balance_refresh.validate if _balance_refresh.is_a?(OpenApi::Validatable)
      @balance_refresh = _balance_refresh
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_name Object to be assigned
    def display_name=(display_name : String?)
      if display_name.nil?
        return @display_name = nil
      end
      _display_name = display_name.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("display_name", _display_name.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @display_name = _display_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last4 Object to be assigned
    def last4=(last4 : String?)
      if last4.nil?
        return @last4 = nil
      end
      _last4 = last4.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("last4", _last4.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @last4 = _last4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ownership Object to be assigned
    def ownership=(ownership : Stripe::FinancialConnectionsAccountOwnership2?)
      if ownership.nil?
        return @ownership = nil
      end
      _ownership = ownership.not_nil!
      _ownership.validate if _ownership.is_a?(OpenApi::Validatable)
      @ownership = _ownership
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ownership_refresh Object to be assigned
    def ownership_refresh=(ownership_refresh : Stripe::FinancialConnectionsAccountOwnershipRefresh?)
      if ownership_refresh.nil?
        return @ownership_refresh = nil
      end
      _ownership_refresh = ownership_refresh.not_nil!
      _ownership_refresh.validate if _ownership_refresh.is_a?(OpenApi::Validatable)
      @ownership_refresh = _ownership_refresh
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permissions Object to be assigned
    def permissions=(permissions : Array(String)?)
      if permissions.nil?
        return @permissions = nil
      end
      _permissions = permissions.not_nil!
      ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid!(_permissions)
      @permissions = _permissions
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@category, @created, @id, @institution_name, @livemode, @object, @status, @subcategory, @supported_payment_method_types, @account_holder, @account_holder_present, @balance, @balance_present, @balance_refresh, @balance_refresh_present, @display_name, @display_name_present, @last4, @last4_present, @ownership, @ownership_present, @ownership_refresh, @ownership_refresh_present, @permissions, @permissions_present)
  end
end
