#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./bank_connections_resource_accountholder"
require "./bank_connections_resource_balance"
require "./bank_connections_resource_balance_refresh"
require "./bank_connections_resource_ownership_refresh"
require "./bank_connections_resource_transaction_refresh"
require "./financial_connections_account_ownership"

module Stripe
  # A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
  class FinancialConnectionsAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "account_holder", type: Stripe::BankConnectionsResourceAccountholder?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_holder : Stripe::BankConnectionsResourceAccountholder? = nil

    @[JSON::Field(key: "balance", type: Stripe::BankConnectionsResourceBalance?, default: nil, required: true, nullable: true, emit_null: true)]
    getter balance : Stripe::BankConnectionsResourceBalance? = nil

    @[JSON::Field(key: "balance_refresh", type: Stripe::BankConnectionsResourceBalanceRefresh?, default: nil, required: true, nullable: true, emit_null: true)]
    getter balance_refresh : Stripe::BankConnectionsResourceBalanceRefresh? = nil

    # The type of the account. Account category is further divided in `subcategory`.
    @[JSON::Field(key: "category", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category : String? = nil
    ERROR_MESSAGE_FOR_CATEGORY = "invalid value for \"category\", must be one of [cash, credit, investment, other]."
    VALID_VALUES_FOR_CATEGORY  = String.static_array("cash", "credit", "investment", "other")

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # A human-readable name that has been assigned to this account, either by the account holder or by the institution.
    @[JSON::Field(key: "display_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter display_name : String? = nil
    MAX_LENGTH_FOR_DISPLAY_NAME = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The name of the institution that holds this account.
    @[JSON::Field(key: "institution_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter institution_name : String? = nil
    MAX_LENGTH_FOR_INSTITUTION_NAME = 5000

    # The last 4 digits of the account number. If present, this will be 4 numeric characters.
    @[JSON::Field(key: "last4", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter last4 : String? = nil
    MAX_LENGTH_FOR_LAST4 = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [financial_connections.account]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("financial_connections.account")

    @[JSON::Field(key: "ownership", type: Stripe::FinancialConnectionsAccountOwnership?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ownership : Stripe::FinancialConnectionsAccountOwnership? = nil

    @[JSON::Field(key: "ownership_refresh", type: Stripe::BankConnectionsResourceOwnershipRefresh?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ownership_refresh : Stripe::BankConnectionsResourceOwnershipRefresh? = nil

    # The list of permissions granted by this account.
    @[JSON::Field(key: "permissions", type: Array(String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter permissions : Array(String)? = nil
    ERROR_MESSAGE_FOR_PERMISSIONS = "invalid value for \"permissions\", must be one of [balances, ownership, payment_method, transactions]."
    VALID_VALUES_FOR_PERMISSIONS  = String.static_array("balances", "ownership", "payment_method", "transactions")

    # The status of the link to the account.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, disconnected, inactive]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "disconnected", "inactive")

    # If `category` is `cash`, one of:   - `checking`  - `savings`  - `other`  If `category` is `credit`, one of:   - `mortgage`  - `line_of_credit`  - `credit_card`  - `other`  If `category` is `investment` or `other`, this will be `other`.
    @[JSON::Field(key: "subcategory", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter subcategory : String? = nil
    ERROR_MESSAGE_FOR_SUBCATEGORY = "invalid value for \"subcategory\", must be one of [checking, credit_card, line_of_credit, mortgage, other, savings]."
    VALID_VALUES_FOR_SUBCATEGORY  = String.static_array("checking", "credit_card", "line_of_credit", "mortgage", "other", "savings")

    # The list of data refresh subscriptions requested on this account.
    @[JSON::Field(key: "subscriptions", type: Array(String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subscriptions : Array(String)? = nil
    ERROR_MESSAGE_FOR_SUBSCRIPTIONS = "invalid value for \"subscriptions\", must be one of [transactions]."
    VALID_VALUES_FOR_SUBSCRIPTIONS  = String.static_array("transactions")

    # The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.
    @[JSON::Field(key: "supported_payment_method_types", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter supported_payment_method_types : Array(String)? = nil
    ERROR_MESSAGE_FOR_SUPPORTED_PAYMENT_METHOD_TYPES = "invalid value for \"supported_payment_method_types\", must be one of [link, us_bank_account]."
    VALID_VALUES_FOR_SUPPORTED_PAYMENT_METHOD_TYPES  = String.static_array("link", "us_bank_account")

    @[JSON::Field(key: "transaction_refresh", type: Stripe::BankConnectionsResourceTransactionRefresh?, default: nil, required: true, nullable: true, emit_null: true)]
    getter transaction_refresh : Stripe::BankConnectionsResourceTransactionRefresh? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_holder : Stripe::BankConnectionsResourceAccountholder? = nil,
      @balance : Stripe::BankConnectionsResourceBalance? = nil,
      @balance_refresh : Stripe::BankConnectionsResourceBalanceRefresh? = nil,
      @category : String? = nil,
      @created : Int64? = nil,
      @display_name : String? = nil,
      @id : String? = nil,
      @institution_name : String? = nil,
      @last4 : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @ownership : Stripe::FinancialConnectionsAccountOwnership? = nil,
      @ownership_refresh : Stripe::BankConnectionsResourceOwnershipRefresh? = nil,
      @permissions : Array(String)? = nil,
      @status : String? = nil,
      @subcategory : String? = nil,
      @subscriptions : Array(String)? = nil,
      @supported_payment_method_types : Array(String)? = nil,
      @transaction_refresh : Stripe::BankConnectionsResourceTransactionRefresh? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_holder = @account_holder).nil?
        invalid_properties.concat(_account_holder.list_invalid_properties_for("account_holder")) if _account_holder.is_a?(OpenApi::Validatable)
      end
      unless (_balance = @balance).nil?
        invalid_properties.concat(_balance.list_invalid_properties_for("balance")) if _balance.is_a?(OpenApi::Validatable)
      end
      unless (_balance_refresh = @balance_refresh).nil?
        invalid_properties.concat(_balance_refresh.list_invalid_properties_for("balance_refresh")) if _balance_refresh.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"category\" is required and cannot be null") if @category.nil?

      unless (_category = @category).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CATEGORY) unless OpenApi::EnumValidator.valid?(_category, VALID_VALUES_FOR_CATEGORY)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      unless (_display_name = @display_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("display_name", _display_name.to_s.size, MAX_LENGTH_FOR_DISPLAY_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"institution_name\" is required and cannot be null") if @institution_name.nil?

      unless (_institution_name = @institution_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("institution_name", _institution_name.to_s.size, MAX_LENGTH_FOR_INSTITUTION_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_last4 = @last4).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("last4", _last4.to_s.size, MAX_LENGTH_FOR_LAST4)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_ownership = @ownership).nil?
        invalid_properties.concat(_ownership.list_invalid_properties_for("ownership")) if _ownership.is_a?(OpenApi::Validatable)
      end
      unless (_ownership_refresh = @ownership_refresh).nil?
        invalid_properties.concat(_ownership_refresh.list_invalid_properties_for("ownership_refresh")) if _ownership_refresh.is_a?(OpenApi::Validatable)
      end
      unless (_permissions = @permissions).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PERMISSIONS) unless OpenApi::EnumValidator.valid?(_permissions, VALID_VALUES_FOR_PERMISSIONS)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"subcategory\" is required and cannot be null") if @subcategory.nil?

      unless (_subcategory = @subcategory).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SUBCATEGORY) unless OpenApi::EnumValidator.valid?(_subcategory, VALID_VALUES_FOR_SUBCATEGORY)
      end
      unless (_subscriptions = @subscriptions).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SUBSCRIPTIONS) unless OpenApi::EnumValidator.valid?(_subscriptions, VALID_VALUES_FOR_SUBSCRIPTIONS)
      end
      invalid_properties.push("\"supported_payment_method_types\" is required and cannot be null") if @supported_payment_method_types.nil?

      unless (_supported_payment_method_types = @supported_payment_method_types).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SUPPORTED_PAYMENT_METHOD_TYPES) unless OpenApi::EnumValidator.valid?(_supported_payment_method_types, VALID_VALUES_FOR_SUPPORTED_PAYMENT_METHOD_TYPES)
      end
      unless (_transaction_refresh = @transaction_refresh).nil?
        invalid_properties.concat(_transaction_refresh.list_invalid_properties_for("transaction_refresh")) if _transaction_refresh.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_holder = @account_holder).nil?
        return false if _account_holder.is_a?(OpenApi::Validatable) && !_account_holder.valid?
      end

      unless (_balance = @balance).nil?
        return false if _balance.is_a?(OpenApi::Validatable) && !_balance.valid?
      end

      unless (_balance_refresh = @balance_refresh).nil?
        return false if _balance_refresh.is_a?(OpenApi::Validatable) && !_balance_refresh.valid?
      end

      return false if @category.nil?
      unless (_category = @category).nil?
        return false unless OpenApi::EnumValidator.valid?(_category, VALID_VALUES_FOR_CATEGORY)
      end

      return false if @created.nil?

      unless (_display_name = @display_name).nil?
        return false if _display_name.to_s.size > MAX_LENGTH_FOR_DISPLAY_NAME
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @institution_name.nil?
      unless (_institution_name = @institution_name).nil?
        return false if _institution_name.to_s.size > MAX_LENGTH_FOR_INSTITUTION_NAME
      end

      unless (_last4 = @last4).nil?
        return false if _last4.to_s.size > MAX_LENGTH_FOR_LAST4
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_ownership = @ownership).nil?
        return false if _ownership.is_a?(OpenApi::Validatable) && !_ownership.valid?
      end

      unless (_ownership_refresh = @ownership_refresh).nil?
        return false if _ownership_refresh.is_a?(OpenApi::Validatable) && !_ownership_refresh.valid?
      end

      unless (_permissions = @permissions).nil?
        return false unless OpenApi::EnumValidator.valid?(_permissions, VALID_VALUES_FOR_PERMISSIONS)
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @subcategory.nil?
      unless (_subcategory = @subcategory).nil?
        return false unless OpenApi::EnumValidator.valid?(_subcategory, VALID_VALUES_FOR_SUBCATEGORY)
      end

      unless (_subscriptions = @subscriptions).nil?
        return false unless OpenApi::EnumValidator.valid?(_subscriptions, VALID_VALUES_FOR_SUBSCRIPTIONS)
      end

      return false if @supported_payment_method_types.nil?
      unless (_supported_payment_method_types = @supported_payment_method_types).nil?
        return false unless OpenApi::EnumValidator.valid?(_supported_payment_method_types, VALID_VALUES_FOR_SUPPORTED_PAYMENT_METHOD_TYPES)
      end

      unless (_transaction_refresh = @transaction_refresh).nil?
        return false if _transaction_refresh.is_a?(OpenApi::Validatable) && !_transaction_refresh.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_holder Object to be assigned
    def account_holder=(new_value : Stripe::BankConnectionsResourceAccountholder?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @account_holder = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance Object to be assigned
    def balance=(new_value : Stripe::BankConnectionsResourceBalance?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_refresh Object to be assigned
    def balance_refresh=(new_value : Stripe::BankConnectionsResourceBalanceRefresh?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @balance_refresh = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(new_value : String?)
      raise ArgumentError.new("\"category\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("category", new_value, VALID_VALUES_FOR_CATEGORY)
      end

      @category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_name Object to be assigned
    def display_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("display_name", new_value.to_s.size, MAX_LENGTH_FOR_DISPLAY_NAME)
      end

      @display_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_name Object to be assigned
    def institution_name=(new_value : String?)
      raise ArgumentError.new("\"institution_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("institution_name", new_value.to_s.size, MAX_LENGTH_FOR_INSTITUTION_NAME)
      end

      @institution_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last4 Object to be assigned
    def last4=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("last4", new_value.to_s.size, MAX_LENGTH_FOR_LAST4)
      end

      @last4 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ownership Object to be assigned
    def ownership=(new_value : Stripe::FinancialConnectionsAccountOwnership?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ownership = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ownership_refresh Object to be assigned
    def ownership_refresh=(new_value : Stripe::BankConnectionsResourceOwnershipRefresh?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ownership_refresh = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permissions Object to be assigned
    def permissions=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("permissions", new_value, VALID_VALUES_FOR_PERMISSIONS)
      end

      @permissions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subcategory Object to be assigned
    def subcategory=(new_value : String?)
      raise ArgumentError.new("\"subcategory\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("subcategory", new_value, VALID_VALUES_FOR_SUBCATEGORY)
      end

      @subcategory = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscriptions Object to be assigned
    def subscriptions=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("subscriptions", new_value, VALID_VALUES_FOR_SUBSCRIPTIONS)
      end

      @subscriptions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supported_payment_method_types Object to be assigned
    def supported_payment_method_types=(new_value : Array(String)?)
      raise ArgumentError.new("\"supported_payment_method_types\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("supported_payment_method_types", new_value, VALID_VALUES_FOR_SUPPORTED_PAYMENT_METHOD_TYPES)
      end

      @supported_payment_method_types = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_refresh Object to be assigned
    def transaction_refresh=(new_value : Stripe::BankConnectionsResourceTransactionRefresh?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transaction_refresh = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_holder, @balance, @balance_refresh, @category, @created, @display_name, @id, @institution_name, @last4, @livemode, @object, @ownership, @ownership_refresh, @permissions, @status, @subcategory, @subscriptions, @supported_payment_method_types, @transaction_refresh)
  end
end
