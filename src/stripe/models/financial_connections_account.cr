#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FinancialConnectionsAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # The type of the account. Account category is further divided in `subcategory`.
    @[JSON::Field(key: "category", type: String)]
    getter category : String

    ENUM_VALIDATOR_FOR_CATEGORY = EnumValidator.new("category", "String", ["cash", "credit", "investment", "other"])

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # The name of the institution that holds this account.
    @[JSON::Field(key: "institution_name", type: String)]
    getter institution_name : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["financial_connections.account"])

    # The status of the link to the account.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["active", "disconnected", "inactive"])

    # If `category` is `cash`, one of:   - `checking`  - `savings`  - `other`  If `category` is `credit`, one of:   - `mortgage`  - `line_of_credit`  - `credit_card`  - `other`  If `category` is `investment` or `other`, this will be `other`.
    @[JSON::Field(key: "subcategory", type: String)]
    getter subcategory : String

    ENUM_VALIDATOR_FOR_SUBCATEGORY = EnumValidator.new("subcategory", "String", ["checking", "credit_card", "line_of_credit", "mortgage", "other", "savings"])

    # The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.
    @[JSON::Field(key: "supported_payment_method_types", type: Array(String))]
    getter supported_payment_method_types : Array(String)

    ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES = EnumValidator.new("supported_payment_method_types", "Array(String)", ["link", "us_bank_account"])

    # Optional properties

    @[JSON::Field(key: "account_holder", type: FinancialConnectionsAccountAccountHolder?, presence: true, ignore_serialize: account_holder.nil? && !account_holder_present?)]
    property account_holder : FinancialConnectionsAccountAccountHolder?

    @[JSON::Field(ignore: true)]
    property? account_holder_present : Bool = false

    @[JSON::Field(key: "balance", type: FinancialConnectionsAccountBalance?, presence: true, ignore_serialize: balance.nil? && !balance_present?)]
    property balance : FinancialConnectionsAccountBalance?

    @[JSON::Field(ignore: true)]
    property? balance_present : Bool = false

    @[JSON::Field(key: "balance_refresh", type: FinancialConnectionsAccountBalanceRefresh?, presence: true, ignore_serialize: balance_refresh.nil? && !balance_refresh_present?)]
    property balance_refresh : FinancialConnectionsAccountBalanceRefresh?

    @[JSON::Field(ignore: true)]
    property? balance_refresh_present : Bool = false

    # A human-readable name that has been assigned to this account, either by the account holder or by the institution.
    @[JSON::Field(key: "display_name", type: String?, presence: true, ignore_serialize: display_name.nil? && !display_name_present?)]
    getter display_name : String?

    @[JSON::Field(ignore: true)]
    property? display_name_present : Bool = false

    # The last 4 digits of the account number. If present, this will be 4 numeric characters.
    @[JSON::Field(key: "last4", type: String?, presence: true, ignore_serialize: last4.nil? && !last4_present?)]
    getter last4 : String?

    @[JSON::Field(ignore: true)]
    property? last4_present : Bool = false

    @[JSON::Field(key: "ownership", type: FinancialConnectionsAccountOwnership2?, presence: true, ignore_serialize: ownership.nil? && !ownership_present?)]
    property ownership : FinancialConnectionsAccountOwnership2?

    @[JSON::Field(ignore: true)]
    property? ownership_present : Bool = false

    @[JSON::Field(key: "ownership_refresh", type: FinancialConnectionsAccountOwnershipRefresh?, presence: true, ignore_serialize: ownership_refresh.nil? && !ownership_refresh_present?)]
    property ownership_refresh : FinancialConnectionsAccountOwnershipRefresh?

    @[JSON::Field(ignore: true)]
    property? ownership_refresh_present : Bool = false

    # The list of permissions granted by this account.
    @[JSON::Field(key: "permissions", type: Array(String)?, presence: true, ignore_serialize: permissions.nil? && !permissions_present?)]
    getter permissions : Array(String)?

    @[JSON::Field(ignore: true)]
    property? permissions_present : Bool = false

    ENUM_VALIDATOR_FOR_PERMISSIONS = EnumValidator.new("permissions", "String", ["balances", "ownership", "payment_method", "transactions"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @category : String, 
      @created : Int64, 
      @id : String, 
      @institution_name : String, 
      @livemode : Bool, 
      @object : String, 
      @status : String, 
      @subcategory : String, 
      @supported_payment_method_types : Array(String), 
      # Optional properties
      @account_holder : FinancialConnectionsAccountAccountHolder? = nil, 
      @balance : FinancialConnectionsAccountBalance? = nil, 
      @balance_refresh : FinancialConnectionsAccountBalanceRefresh? = nil, 
      @display_name : String? = nil, 
      @last4 : String? = nil, 
      @ownership : FinancialConnectionsAccountOwnership2? = nil, 
      @ownership_refresh : FinancialConnectionsAccountOwnershipRefresh? = nil, 
      @permissions : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_CATEGORY.error_message) unless ENUM_VALIDATOR_FOR_CATEGORY.valid?(@category, false)

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if @institution_name.to_s.size > 5000
        invalid_properties.push("invalid value for \"institution_name\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUBCATEGORY.error_message) unless ENUM_VALIDATOR_FOR_SUBCATEGORY.valid?(@subcategory, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES.error_message) unless ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES.all_valid?(@supported_payment_method_types, false)

      if !@display_name.nil? && @display_name.to_s.size > 5000
        invalid_properties.push("invalid value for \"display_name\", the character length must be smaller than or equal to 5000.")
      end

      if !@last4.nil? && @last4.to_s.size > 5000
        invalid_properties.push("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_PERMISSIONS.error_message) unless ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid?(@permissions)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_CATEGORY.valid?(@category, false)
      return false if @id.to_s.size > 5000
      return false if @institution_name.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false unless ENUM_VALIDATOR_FOR_SUBCATEGORY.valid?(@subcategory, false)
      return false unless ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES.all_valid?(@supported_payment_method_types, false)
      return false if !@display_name.nil? && @display_name.to_s.size > 5000
      return false if !@last4.nil? && @last4.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid?(@permissions)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      ENUM_VALIDATOR_FOR_CATEGORY.valid!(category, false)
      @category = category
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] institution_name Value to be assigned
    def institution_name=(institution_name)
      if institution_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"institution_name\", the character length must be smaller than or equal to 5000.")
      end

      @institution_name = institution_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subcategory Object to be assigned
    def subcategory=(subcategory)
      ENUM_VALIDATOR_FOR_SUBCATEGORY.valid!(subcategory, false)
      @subcategory = subcategory
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supported_payment_method_types Object to be assigned
    def supported_payment_method_types=(supported_payment_method_types)
      ENUM_VALIDATOR_FOR_SUPPORTED_PAYMENT_METHOD_TYPES.all_valid!(supported_payment_method_types, false)
      @supported_payment_method_types = supported_payment_method_types
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if !display_name.nil? && display_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"display_name\", the character length must be smaller than or equal to 5000.")
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last4 Value to be assigned
    def last4=(last4)
      if !last4.nil? && last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      @last4 = last4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permissions Object to be assigned
    def permissions=(permissions)
      ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid!(permissions)
      @permissions = permissions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@category, @created, @id, @institution_name, @livemode, @object, @status, @subcategory, @supported_payment_method_types, @account_holder, @balance, @balance_refresh, @display_name, @last4, @ownership, @ownership_refresh, @permissions)
  end
end
