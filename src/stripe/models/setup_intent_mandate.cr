#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./customer_acceptance"
require "./mandate"
require "./mandate_payment_method"
require "./mandate_payment_method_details"
require "./mandate_single_use"

module Stripe
  # ID of the multi use Mandate generated by the SetupIntent.
  class SetupIntentMandate
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "customer_acceptance", type: Stripe::CustomerAcceptance?, default: nil, required: true, nullable: false, emit_null: false)]
    property customer_acceptance : Stripe::CustomerAcceptance? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [mandate]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("mandate")

    @[JSON::Field(key: "payment_method", type: Stripe::MandatePaymentMethod?, default: nil, required: true, nullable: false, emit_null: false)]
    property payment_method : Stripe::MandatePaymentMethod? = nil

    @[JSON::Field(key: "payment_method_details", type: Stripe::MandatePaymentMethodDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    property payment_method_details : Stripe::MandatePaymentMethodDetails? = nil

    # The mandate status indicates whether or not you can use it to initiate a payment.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, inactive, pending]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "inactive", "pending")

    # The type of the mandate.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [multi_use, single_use]."
    VALID_VALUES_FOR__TYPE  = String.static_array("multi_use", "single_use")

    # End of Required Properties

    # Optional Properties

    #
    @[JSON::Field(key: "multi_use", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    property multi_use : JSON::Any? = nil

    # The account (if any) that the mandate is intended for.
    @[JSON::Field(key: "on_behalf_of", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property on_behalf_of : String? = nil
    MAX_LENGTH_FOR_ON_BEHALF_OF = 5000

    @[JSON::Field(key: "single_use", type: Stripe::MandateSingleUse?, default: nil, required: false, nullable: false, emit_null: false)]
    property single_use : Stripe::MandateSingleUse? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Mandate,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @customer_acceptance : Stripe::CustomerAcceptance? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @payment_method : Stripe::MandatePaymentMethod? = nil,
      @payment_method_details : Stripe::MandatePaymentMethodDetails? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @multi_use : JSON::Any? = nil,
      @on_behalf_of : String? = nil,
      @single_use : Stripe::MandateSingleUse? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@customer_acceptance, @id, @livemode, @object, @payment_method, @payment_method_details, @status, @_type, @multi_use, @on_behalf_of, @single_use)
  end
end
