#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./subscription_schedule"
require "./subscription_schedule_application"
require "./subscription_schedule_current_phase"
require "./subscription_schedule_customer"
require "./subscription_schedule_phase_configuration"
require "./subscription_schedule_subscription"
require "./subscription_schedule_test_clock"
require "./subscription_schedules_resource_default_settings"

module Stripe
  # The schedule attached to the subscription
  class SubscriptionSchedule1
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "application", type: Stripe::SubscriptionScheduleApplication?, default: nil, required: true, nullable: true, emit_null: true)]
    property application : Stripe::SubscriptionScheduleApplication? = nil

    # Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "canceled_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property canceled_at : Int64? = nil

    # Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "completed_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property completed_at : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    @[JSON::Field(key: "current_phase", type: Stripe::SubscriptionScheduleCurrentPhase?, default: nil, required: true, nullable: false, emit_null: false)]
    property current_phase : Stripe::SubscriptionScheduleCurrentPhase? = nil

    @[JSON::Field(key: "customer", type: Stripe::SubscriptionScheduleCustomer?, default: nil, required: true, nullable: false, emit_null: false)]
    property customer : Stripe::SubscriptionScheduleCustomer? = nil

    @[JSON::Field(key: "default_settings", type: Stripe::SubscriptionSchedulesResourceDefaultSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    property default_settings : Stripe::SubscriptionSchedulesResourceDefaultSettings? = nil

    # Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
    @[JSON::Field(key: "end_behavior", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property end_behavior : String? = nil
    ERROR_MESSAGE_FOR_END_BEHAVIOR = "invalid value for \"end_behavior\", must be one of [cancel, none, release, renew]."
    VALID_VALUES_FOR_END_BEHAVIOR  = String.static_array("cancel", "none", "release", "renew")

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [subscription_schedule]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("subscription_schedule")

    # Configuration for the subscription schedule's phases.
    @[JSON::Field(key: "phases", type: Array(Stripe::SubscriptionSchedulePhaseConfiguration)?, default: nil, required: true, nullable: false, emit_null: false)]
    property phases : Array(Stripe::SubscriptionSchedulePhaseConfiguration)? = nil

    # Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "released_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property released_at : Int64? = nil

    # ID of the subscription once managed by the subscription schedule (if it is released).
    @[JSON::Field(key: "released_subscription", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property released_subscription : String? = nil
    MAX_LENGTH_FOR_RELEASED_SUBSCRIPTION = 5000

    # The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, canceled, completed, not_started, released]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "canceled", "completed", "not_started", "released")

    @[JSON::Field(key: "subscription", type: Stripe::SubscriptionScheduleSubscription?, default: nil, required: true, nullable: true, emit_null: true)]
    property subscription : Stripe::SubscriptionScheduleSubscription? = nil

    @[JSON::Field(key: "test_clock", type: Stripe::SubscriptionScheduleTestClock?, default: nil, required: true, nullable: true, emit_null: true)]
    property test_clock : Stripe::SubscriptionScheduleTestClock? = nil

    # End of Required Properties
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        String,
        Stripe::SubscriptionSchedule,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @application : Stripe::SubscriptionScheduleApplication? = nil,
      @canceled_at : Int64? = nil,
      @completed_at : Int64? = nil,
      @created : Int64? = nil,
      @current_phase : Stripe::SubscriptionScheduleCurrentPhase? = nil,
      @customer : Stripe::SubscriptionScheduleCustomer? = nil,
      @default_settings : Stripe::SubscriptionSchedulesResourceDefaultSettings? = nil,
      @end_behavior : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @phases : Array(Stripe::SubscriptionSchedulePhaseConfiguration)? = nil,
      @released_at : Int64? = nil,
      @released_subscription : String? = nil,
      @status : String? = nil,
      @subscription : Stripe::SubscriptionScheduleSubscription? = nil,
      @test_clock : Stripe::SubscriptionScheduleTestClock? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@application, @canceled_at, @completed_at, @created, @current_phase, @customer, @default_settings, @end_behavior, @id, @livemode, @metadata, @object, @phases, @released_at, @released_subscription, @status, @subscription, @test_clock)
  end
end
