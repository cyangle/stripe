#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Configuration for any card payments attempted on this PaymentIntent.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentMethodOptionsParam21Card
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Controls when the funds will be captured from the customer's account.  If provided, this parameter will override the top-level `capture_method` when finalizing the payment with this payment method type.  If `capture_method` is already set on the PaymentIntent, providing an empty value for this parameter will unset the stored value for this payment method type.
    @[JSON::Field(key: "capture_method", type: String?, presence: true, ignore_serialize: capture_method.nil? && !capture_method_present?)]
    getter capture_method : String?

    @[JSON::Field(ignore: true)]
    property? capture_method_present : Bool = false

    ENUM_VALIDATOR_FOR_CAPTURE_METHOD = EnumValidator.new("capture_method", "String", ["", "manual"])

    # A single-use `cvc_update` Token that represents a card CVC value. When provided, the CVC value will be verified during the card payment attempt. This parameter can only be provided during confirmation.
    @[JSON::Field(key: "cvc_token", type: String?, presence: true, ignore_serialize: cvc_token.nil? && !cvc_token_present?)]
    getter cvc_token : String?

    @[JSON::Field(ignore: true)]
    property? cvc_token_present : Bool = false

    @[JSON::Field(key: "installments", type: InstallmentsParam?, presence: true, ignore_serialize: installments.nil? && !installments_present?)]
    property installments : InstallmentsParam?

    @[JSON::Field(ignore: true)]
    property? installments_present : Bool = false

    @[JSON::Field(key: "mandate_options", type: MandateOptionsParam2?, presence: true, ignore_serialize: mandate_options.nil? && !mandate_options_present?)]
    property mandate_options : MandateOptionsParam2?

    @[JSON::Field(ignore: true)]
    property? mandate_options_present : Bool = false

    # When specified, this parameter indicates that a transaction will be marked as MOTO (Mail Order Telephone Order) and thus out of scope for SCA. This parameter can only be provided during confirmation.
    @[JSON::Field(key: "moto", type: Bool?, presence: true, ignore_serialize: moto.nil? && !moto_present?)]
    property moto : Bool?

    @[JSON::Field(ignore: true)]
    property? moto_present : Bool = false

    # Selected network to process this PaymentIntent on. Depends on the available networks of the card attached to the PaymentIntent. Can be only set confirm-time.
    @[JSON::Field(key: "network", type: String?, presence: true, ignore_serialize: network.nil? && !network_present?)]
    getter network : String?

    @[JSON::Field(ignore: true)]
    property? network_present : Bool = false

    ENUM_VALIDATOR_FOR_NETWORK = EnumValidator.new("network", "String", ["amex", "cartes_bancaires", "diners", "discover", "interac", "jcb", "mastercard", "unionpay", "unknown", "visa"])

    # We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    @[JSON::Field(key: "request_three_d_secure", type: String?, presence: true, ignore_serialize: request_three_d_secure.nil? && !request_three_d_secure_present?)]
    getter request_three_d_secure : String?

    @[JSON::Field(ignore: true)]
    property? request_three_d_secure_present : Bool = false

    ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE = EnumValidator.new("request_three_d_secure", "String", ["any", "automatic"])

    # Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).  If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
    @[JSON::Field(key: "setup_future_usage", type: String?, presence: true, ignore_serialize: setup_future_usage.nil? && !setup_future_usage_present?)]
    getter setup_future_usage : String?

    @[JSON::Field(ignore: true)]
    property? setup_future_usage_present : Bool = false

    ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE = EnumValidator.new("setup_future_usage", "String", ["", "none", "off_session", "on_session"])

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::PaymentIntentParam,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @capture_method : String? = nil, @cvc_token : String? = nil, @installments : InstallmentsParam? = nil, @mandate_options : MandateOptionsParam2? = nil, @moto : Bool? = nil, @network : String? = nil, @request_three_d_secure : String? = nil, @setup_future_usage : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push(ENUM_VALIDATOR_FOR_CAPTURE_METHOD.error_message) unless ENUM_VALIDATOR_FOR_CAPTURE_METHOD.valid?(@capture_method)

      if !@cvc_token.nil? && @cvc_token.to_s.size > 5000
        invalid_properties.push("invalid value for \"cvc_token\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_NETWORK.error_message) unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network)

      if !@network.nil? && @network.to_s.size > 5000
        invalid_properties.push("invalid value for \"network\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE.error_message) unless ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE.valid?(@request_three_d_secure)

      if !@request_three_d_secure.nil? && @request_three_d_secure.to_s.size > 5000
        invalid_properties.push("invalid value for \"request_three_d_secure\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.error_message) unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_CAPTURE_METHOD.valid?(@capture_method)
      return false if !@cvc_token.nil? && @cvc_token.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network)
      return false if !@network.nil? && @network.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE.valid?(@request_three_d_secure)
      return false if !@request_three_d_secure.nil? && @request_three_d_secure.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capture_method Object to be assigned
    def capture_method=(capture_method)
      ENUM_VALIDATOR_FOR_CAPTURE_METHOD.valid!(capture_method)
      @capture_method = capture_method
    end

    # Custom attribute writer method with validation
    # @param [Object] cvc_token Value to be assigned
    def cvc_token=(cvc_token)
      if !cvc_token.nil? && cvc_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cvc_token\", the character length must be smaller than or equal to 5000.")
      end

      @cvc_token = cvc_token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network)
      ENUM_VALIDATOR_FOR_NETWORK.valid!(network)
      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_three_d_secure Object to be assigned
    def request_three_d_secure=(request_three_d_secure)
      ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE.valid!(request_three_d_secure)
      @request_three_d_secure = request_three_d_secure
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(setup_future_usage)
      ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid!(setup_future_usage)
      @setup_future_usage = setup_future_usage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        capture_method == o.capture_method &&
        cvc_token == o.cvc_token &&
        installments == o.installments &&
        mandate_options == o.mandate_options &&
        moto == o.moto &&
        network == o.network &&
        request_three_d_secure == o.request_three_d_secure &&
        setup_future_usage == o.setup_future_usage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@capture_method, @cvc_token, @installments, @mandate_options, @moto, @network, @request_three_d_secure, @setup_future_usage)
  end
end
