#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentNextActionKonbiniStores
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "familymart", type: Stripe::PaymentIntentNextActionKonbiniStoresFamilymart?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: familymart.nil? && !familymart_present?)]
    getter familymart : Stripe::PaymentIntentNextActionKonbiniStoresFamilymart? = nil

    @[JSON::Field(ignore: true)]
    property? familymart_present : Bool = false

    @[JSON::Field(key: "lawson", type: Stripe::PaymentIntentNextActionKonbiniStoresLawson?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: lawson.nil? && !lawson_present?)]
    getter lawson : Stripe::PaymentIntentNextActionKonbiniStoresLawson? = nil

    @[JSON::Field(ignore: true)]
    property? lawson_present : Bool = false

    @[JSON::Field(key: "ministop", type: Stripe::PaymentIntentNextActionKonbiniStoresMinistop?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ministop.nil? && !ministop_present?)]
    getter ministop : Stripe::PaymentIntentNextActionKonbiniStoresMinistop? = nil

    @[JSON::Field(ignore: true)]
    property? ministop_present : Bool = false

    @[JSON::Field(key: "seicomart", type: Stripe::PaymentIntentNextActionKonbiniStoresSeicomart?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: seicomart.nil? && !seicomart_present?)]
    getter seicomart : Stripe::PaymentIntentNextActionKonbiniStoresSeicomart? = nil

    @[JSON::Field(ignore: true)]
    property? seicomart_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @familymart : Stripe::PaymentIntentNextActionKonbiniStoresFamilymart? = nil,
      @lawson : Stripe::PaymentIntentNextActionKonbiniStoresLawson? = nil,
      @ministop : Stripe::PaymentIntentNextActionKonbiniStoresMinistop? = nil,
      @seicomart : Stripe::PaymentIntentNextActionKonbiniStoresSeicomart? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_familymart = @familymart).nil?
        invalid_properties.concat(_familymart.list_invalid_properties_for("familymart")) if _familymart.is_a?(OpenApi::Validatable)
      end
      unless (_lawson = @lawson).nil?
        invalid_properties.concat(_lawson.list_invalid_properties_for("lawson")) if _lawson.is_a?(OpenApi::Validatable)
      end
      unless (_ministop = @ministop).nil?
        invalid_properties.concat(_ministop.list_invalid_properties_for("ministop")) if _ministop.is_a?(OpenApi::Validatable)
      end
      unless (_seicomart = @seicomart).nil?
        invalid_properties.concat(_seicomart.list_invalid_properties_for("seicomart")) if _seicomart.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_familymart = @familymart).nil?
        return false if _familymart.is_a?(OpenApi::Validatable) && !_familymart.valid?
      end

      unless (_lawson = @lawson).nil?
        return false if _lawson.is_a?(OpenApi::Validatable) && !_lawson.valid?
      end

      unless (_ministop = @ministop).nil?
        return false if _ministop.is_a?(OpenApi::Validatable) && !_ministop.valid?
      end

      unless (_seicomart = @seicomart).nil?
        return false if _seicomart.is_a?(OpenApi::Validatable) && !_seicomart.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] familymart Object to be assigned
    def familymart=(new_value : Stripe::PaymentIntentNextActionKonbiniStoresFamilymart?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @familymart = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lawson Object to be assigned
    def lawson=(new_value : Stripe::PaymentIntentNextActionKonbiniStoresLawson?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @lawson = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ministop Object to be assigned
    def ministop=(new_value : Stripe::PaymentIntentNextActionKonbiniStoresMinistop?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ministop = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] seicomart Object to be assigned
    def seicomart=(new_value : Stripe::PaymentIntentNextActionKonbiniStoresSeicomart?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @seicomart = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@familymart, @familymart_present, @lawson, @lawson_present, @ministop, @ministop_present, @seicomart, @seicomart_present)
  end
end
