#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostPaymentIntentsIntentVerifyMicrodepositsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
    @[JSON::Field(key: "amounts", type: Array(Int64)?, presence: true, ignore_serialize: amounts.nil? && !amounts_present?)]
    property amounts : Array(Int64)?

    @[JSON::Field(ignore: true)]
    property? amounts_present : Bool = false

    # A six-character code starting with SM present in the microdeposit sent to the bank account.
    @[JSON::Field(key: "descriptor_code", type: String?, presence: true, ignore_serialize: descriptor_code.nil? && !descriptor_code_present?)]
    getter descriptor_code : String?

    @[JSON::Field(ignore: true)]
    property? descriptor_code_present : Bool = false

    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amounts : Array(Int64)? = nil, @descriptor_code : String? = nil, @expand : Array(String)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@descriptor_code.nil? && @descriptor_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"descriptor_code\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@descriptor_code.nil? && @descriptor_code.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] descriptor_code Value to be assigned
    def descriptor_code=(descriptor_code)
      if !descriptor_code.nil? && descriptor_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"descriptor_code\", the character length must be smaller than or equal to 5000.")
      end

      @descriptor_code = descriptor_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amounts == o.amounts &&
        descriptor_code == o.descriptor_code &&
        expand == o.expand
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amounts, @descriptor_code, @expand)
  end
end
