#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class PostPaymentIntentsIntentVerifyMicrodepositsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
    @[JSON::Field(key: "amounts", type: Array(Int32)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amounts : Array(Int32)? = nil

    # A six-character code starting with SM present in the microdeposit sent to the bank account.
    @[JSON::Field(key: "descriptor_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter descriptor_code : String? = nil
    MAX_LENGTH_FOR_DESCRIPTOR_CODE = 5000

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amounts : Array(Int32)? = nil,
      @descriptor_code : String? = nil,
      @expand : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_descriptor_code = @descriptor_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("descriptor_code", _descriptor_code.to_s.size, MAX_LENGTH_FOR_DESCRIPTOR_CODE)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_descriptor_code = @descriptor_code).nil?
        return false if _descriptor_code.to_s.size > MAX_LENGTH_FOR_DESCRIPTOR_CODE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amounts Object to be assigned
    def amounts=(new_value : Array(Int32)?)
      @amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] descriptor_code Object to be assigned
    def descriptor_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("descriptor_code", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTOR_CODE)
      end

      @descriptor_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amounts, @descriptor_code, @expand)
  end
end
