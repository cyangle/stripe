#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./bank_transfer_param"
require "./installments_param"
require "./linked_account_options_param"
require "./mandate_options_param"
require "./network_options_param"
require "./payment_method_options_param_blik"
require "./payment_method_options_param_interac_present"
require "./payment_method_options_param_promptpay"
require "./payment_method_options_param_twint"
require "./payment_method_options_param_zip"
require "./setup_intent_param"
require "./setup_intent_payment_method_options_param"

module Stripe
  class PaymentMethodOptionsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The cryptogram, also known as the \"authentication value\" (AAV, CAVV or AEVV). This value is 20 bytes, base64-encoded into a 28-character string. (Most 3D Secure providers will return the base64-encoded version, which is what you should specify here.)
    @[JSON::Field(key: "cryptogram", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cryptogram : String? = nil
    MAX_LENGTH_FOR_CRYPTOGRAM = 5000

    # For 3D Secure 1, the XID. For 3D Secure 2, the Directory Server Transaction ID (dsTransID).
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction_id : String? = nil
    MAX_LENGTH_FOR_TRANSACTION_ID = 5000

    # The version of 3D Secure that was performed.
    @[JSON::Field(key: "version", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter version : String? = nil
    ERROR_MESSAGE_FOR_VERSION = "invalid value for \"version\", must be one of [1.0.2, 2.1.0, 2.2.0]."
    VALID_VALUES_FOR_VERSION  = String.static_array("1.0.2", "2.1.0", "2.2.0")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "acss_debit", type: Stripe::SetupIntentPaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::SetupIntentPaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "affirm", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "alipay", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "amazon_pay", type: Stripe::SetupIntentPaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amazon_pay : Stripe::SetupIntentPaymentMethodOptionsParam? = nil

    # The app ID registered with WeChat Pay. Only required when client is ios or android.
    @[JSON::Field(key: "app_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter app_id : String? = nil
    MAX_LENGTH_FOR_APP_ID = 5000

    # The `transStatus` returned from the card Issuerâ€™s ACS in the ARes.
    @[JSON::Field(key: "ares_trans_status", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ares_trans_status : String? = nil
    ERROR_MESSAGE_FOR_ARES_TRANS_STATUS = "invalid value for \"ares_trans_status\", must be one of [A, C, I, N, R, U, Y]."
    VALID_VALUES_FOR_ARES_TRANS_STATUS  = String.static_array("A", "C", "I", "N", "R", "U", "Y")

    @[JSON::Field(key: "au_becs_debit", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "bacs_debit", type: Stripe::SetupIntentPaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit : Stripe::SetupIntentPaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "bank_transfer", type: Stripe::BankTransferParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_transfer : Stripe::BankTransferParam? = nil

    # The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
    @[JSON::Field(key: "billing_agreement_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_agreement_id : String? = nil
    MAX_LENGTH_FOR_BILLING_AGREEMENT_ID = 5000

    @[JSON::Field(key: "blik", type: Stripe::PaymentMethodOptionsParamBlik?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik : Stripe::PaymentMethodOptionsParamBlik? = nil

    @[JSON::Field(key: "boleto", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto : Stripe::PaymentMethodOptionsParam? = nil

    # Controls when the funds will be captured from the customer's account.
    @[JSON::Field(key: "capture_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter capture_method : String? = nil
    ERROR_MESSAGE_FOR_CAPTURE_METHOD = "invalid value for \"capture_method\", must be one of [, manual]."
    VALID_VALUES_FOR_CAPTURE_METHOD  = String.static_array("", "manual")

    @[JSON::Field(key: "card", type: Stripe::SetupIntentParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::SetupIntentParam? = nil

    @[JSON::Field(key: "card_present", type: Stripe::SetupIntentPaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::SetupIntentPaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "cashapp", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cashapp : Stripe::PaymentMethodOptionsParam? = nil

    # The client type that the end customer will pay from
    @[JSON::Field(key: "client", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client : String? = nil
    ERROR_MESSAGE_FOR_CLIENT = "invalid value for \"client\", must be one of [android, ios, web]."
    VALID_VALUES_FOR_CLIENT  = String.static_array("android", "ios", "web")

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). This is only accepted for Checkout Sessions in `setup` mode.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil
    ERROR_MESSAGE_FOR_CURRENCY = "invalid value for \"currency\", must be one of [cad, usd]."
    VALID_VALUES_FOR_CURRENCY  = String.static_array("cad", "usd")

    @[JSON::Field(key: "customer_balance", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : Stripe::PaymentMethodOptionsParam? = nil

    # The Electronic Commerce Indicator (ECI) is returned by your 3D Secure provider and indicates what degree of authentication was performed.
    @[JSON::Field(key: "electronic_commerce_indicator", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter electronic_commerce_indicator : String? = nil
    ERROR_MESSAGE_FOR_ELECTRONIC_COMMERCE_INDICATOR = "invalid value for \"electronic_commerce_indicator\", must be one of [01, 02, 05, 06, 07]."
    VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR  = String.static_array("01", "02", "05", "06", "07")

    @[JSON::Field(key: "eps", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::PaymentMethodOptionsParam? = nil

    # The exemption requested via 3DS and accepted by the issuer at authentication time.
    @[JSON::Field(key: "exemption_indicator", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter exemption_indicator : String? = nil
    ERROR_MESSAGE_FOR_EXEMPTION_INDICATOR = "invalid value for \"exemption_indicator\", must be one of [low_risk, none]."
    VALID_VALUES_FOR_EXEMPTION_INDICATOR  = String.static_array("low_risk", "none")

    # The number of calendar days before an OXXO voucher expires. For example, if you create an OXXO voucher on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
    @[JSON::Field(key: "expires_after_days", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expires_after_days : Int64? = nil

    # The number of seconds (between 10 and 1209600) after which Pix payment will expire. Defaults to 86400 seconds.
    @[JSON::Field(key: "expires_after_seconds", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expires_after_seconds : Int64? = nil

    @[JSON::Field(key: "financial_connections", type: Stripe::LinkedAccountOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_connections : Stripe::LinkedAccountOptionsParam? = nil

    @[JSON::Field(key: "fpx", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx : Stripe::PaymentMethodOptionsParam? = nil

    # The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
    @[JSON::Field(key: "funding_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter funding_type : String? = nil
    ERROR_MESSAGE_FOR_FUNDING_TYPE = "invalid value for \"funding_type\", must be one of [bank_transfer]."
    VALID_VALUES_FOR_FUNDING_TYPE  = String.static_array("bank_transfer")

    @[JSON::Field(key: "giropay", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "grabpay", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "installments", type: Stripe::InstallmentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter installments : Stripe::InstallmentsParam? = nil

    @[JSON::Field(key: "interac_present", type: Stripe::PaymentMethodOptionsParamInteracPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interac_present : Stripe::PaymentMethodOptionsParamInteracPresent? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "konbini", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "link", type: Stripe::SetupIntentPaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : Stripe::SetupIntentPaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "mandate_options", type: Stripe::MandateOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mandate_options : Stripe::MandateOptionsParam? = nil

    @[JSON::Field(key: "mobilepay", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mobilepay : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "multibanco", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "network_options", type: Stripe::NetworkOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter network_options : Stripe::NetworkOptionsParam? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "paynow", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "paypal", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paypal : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "pix", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix : Stripe::PaymentMethodOptionsParam? = nil

    # [Preferred locale](https://stripe.com/docs/payments/paypal/supported-locales) of the PayPal checkout page that the customer is redirected to.
    @[JSON::Field(key: "preferred_locale", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter preferred_locale : String? = nil
    ERROR_MESSAGE_FOR_PREFERRED_LOCALE = "invalid value for \"preferred_locale\", must be one of [cs-CZ, da-DK, de-AT, de-DE, de-LU, el-GR, en-GB, en-US, es-ES, fi-FI, fr-BE, fr-FR, fr-LU, hu-HU, it-IT, nl-BE, nl-NL, pl-PL, pt-PT, sk-SK, sv-SE]."
    VALID_VALUES_FOR_PREFERRED_LOCALE  = String.static_array("cs-CZ", "da-DK", "de-AT", "de-DE", "de-LU", "el-GR", "en-GB", "en-US", "es-ES", "fi-FI", "fr-BE", "fr-FR", "fr-LU", "hu-HU", "it-IT", "nl-BE", "nl-NL", "pl-PL", "pt-PT", "sk-SK", "sv-SE")

    @[JSON::Field(key: "promptpay", type: Stripe::PaymentMethodOptionsParamPromptpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay : Stripe::PaymentMethodOptionsParamPromptpay? = nil

    # The order reference that will be displayed to customers in the Swish application. Defaults to the `id` of the Payment Intent.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter reference : String? = nil
    MAX_LENGTH_FOR_REFERENCE = 5000

    # We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    @[JSON::Field(key: "request_three_d_secure", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_three_d_secure : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_THREE_D_SECURE = "invalid value for \"request_three_d_secure\", must be one of [any, automatic, challenge]."
    VALID_VALUES_FOR_REQUEST_THREE_D_SECURE  = String.static_array("any", "automatic", "challenge")

    # The challenge indicator (`threeDSRequestorChallengeInd`) which was requested in the AReq sent to the card Issuer's ACS. A string containing 2 digits from 01-99.
    @[JSON::Field(key: "requestor_challenge_indicator", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter requestor_challenge_indicator : String? = nil
    MAX_LENGTH_FOR_REQUESTOR_CHALLENGE_INDICATOR = 2

    @[JSON::Field(key: "revolut_pay", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter revolut_pay : Stripe::PaymentMethodOptionsParam? = nil

    # The risk correlation ID for an on-session payment using a saved PayPal payment method.
    @[JSON::Field(key: "risk_correlation_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter risk_correlation_id : String? = nil
    MAX_LENGTH_FOR_RISK_CORRELATION_ID = 32

    @[JSON::Field(key: "sepa_debit", type: Stripe::SetupIntentPaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::SetupIntentPaymentMethodOptionsParam? = nil

    # Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
    @[JSON::Field(key: "setup_future_usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_future_usage : String? = nil
    ERROR_MESSAGE_FOR_SETUP_FUTURE_USAGE = "invalid value for \"setup_future_usage\", must be one of [none]."
    VALID_VALUES_FOR_SETUP_FUTURE_USAGE  = String.static_array("none")

    @[JSON::Field(key: "sofort", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentMethodOptionsParam? = nil

    # Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
    @[JSON::Field(key: "statement_descriptor_suffix_kana", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kana : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANA = 22

    # Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor thatâ€™s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
    @[JSON::Field(key: "statement_descriptor_suffix_kanji", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kanji : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANJI = 17

    @[JSON::Field(key: "swish", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter swish : Stripe::PaymentMethodOptionsParam? = nil

    # Confirm that the payer has accepted the P24 terms and conditions.
    @[JSON::Field(key: "tos_shown_and_accepted", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tos_shown_and_accepted : Bool? = nil

    @[JSON::Field(key: "twint", type: Stripe::PaymentMethodOptionsParamTwint?, default: nil, required: false, nullable: false, emit_null: false)]
    getter twint : Stripe::PaymentMethodOptionsParamTwint? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::SetupIntentPaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::SetupIntentPaymentMethodOptionsParam? = nil

    # Verification method for the intent
    @[JSON::Field(key: "verification_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verification_method : String? = nil
    ERROR_MESSAGE_FOR_VERIFICATION_METHOD = "invalid value for \"verification_method\", must be one of [automatic, instant]."
    VALID_VALUES_FOR_VERIFICATION_METHOD  = String.static_array("automatic", "instant")

    @[JSON::Field(key: "wechat_pay", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::PaymentMethodOptionsParam? = nil

    @[JSON::Field(key: "zip", type: Stripe::PaymentMethodOptionsParamZip?, default: nil, required: false, nullable: false, emit_null: false)]
    getter zip : Stripe::PaymentMethodOptionsParamZip? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @cryptogram : String? = nil,
      @transaction_id : String? = nil,
      @version : String? = nil,
      # Optional properties
      @acss_debit : Stripe::SetupIntentPaymentMethodOptionsParam? = nil,
      @affirm : Stripe::PaymentMethodOptionsParam? = nil,
      @afterpay_clearpay : Stripe::PaymentMethodOptionsParam? = nil,
      @alipay : Stripe::PaymentMethodOptionsParam? = nil,
      @amazon_pay : Stripe::SetupIntentPaymentMethodOptionsParam? = nil,
      @app_id : String? = nil,
      @ares_trans_status : String? = nil,
      @au_becs_debit : Stripe::PaymentMethodOptionsParam? = nil,
      @bacs_debit : Stripe::SetupIntentPaymentMethodOptionsParam? = nil,
      @bancontact : Stripe::PaymentMethodOptionsParam? = nil,
      @bank_transfer : Stripe::BankTransferParam? = nil,
      @billing_agreement_id : String? = nil,
      @blik : Stripe::PaymentMethodOptionsParamBlik? = nil,
      @boleto : Stripe::PaymentMethodOptionsParam? = nil,
      @capture_method : String? = nil,
      @card : Stripe::SetupIntentParam? = nil,
      @card_present2 : Stripe::SetupIntentPaymentMethodOptionsParam? = nil,
      @cashapp : Stripe::PaymentMethodOptionsParam? = nil,
      @client : String? = nil,
      @currency : String? = nil,
      @customer_balance : Stripe::PaymentMethodOptionsParam? = nil,
      @electronic_commerce_indicator : String? = nil,
      @eps : Stripe::PaymentMethodOptionsParam? = nil,
      @exemption_indicator : String? = nil,
      @expires_after_days : Int64? = nil,
      @expires_after_seconds : Int64? = nil,
      @financial_connections : Stripe::LinkedAccountOptionsParam? = nil,
      @fpx : Stripe::PaymentMethodOptionsParam? = nil,
      @funding_type : String? = nil,
      @giropay : Stripe::PaymentMethodOptionsParam? = nil,
      @grabpay : Stripe::PaymentMethodOptionsParam? = nil,
      @ideal : Stripe::PaymentMethodOptionsParam? = nil,
      @installments : Stripe::InstallmentsParam? = nil,
      @interac_present : Stripe::PaymentMethodOptionsParamInteracPresent? = nil,
      @klarna : Stripe::PaymentMethodOptionsParam? = nil,
      @konbini : Stripe::PaymentMethodOptionsParam? = nil,
      @link : Stripe::SetupIntentPaymentMethodOptionsParam? = nil,
      @mandate_options : Stripe::MandateOptionsParam? = nil,
      @mobilepay : Stripe::PaymentMethodOptionsParam? = nil,
      @multibanco : Stripe::PaymentMethodOptionsParam? = nil,
      @network_options : Stripe::NetworkOptionsParam? = nil,
      @oxxo : Stripe::PaymentMethodOptionsParam? = nil,
      @p24 : Stripe::PaymentMethodOptionsParam? = nil,
      @paynow : Stripe::PaymentMethodOptionsParam? = nil,
      @paypal : Stripe::PaymentMethodOptionsParam? = nil,
      @pix : Stripe::PaymentMethodOptionsParam? = nil,
      @preferred_locale : String? = nil,
      @promptpay : Stripe::PaymentMethodOptionsParamPromptpay? = nil,
      @reference : String? = nil,
      @request_three_d_secure : String? = nil,
      @requestor_challenge_indicator : String? = nil,
      @revolut_pay : Stripe::PaymentMethodOptionsParam? = nil,
      @risk_correlation_id : String? = nil,
      @sepa_debit : Stripe::SetupIntentPaymentMethodOptionsParam? = nil,
      @setup_future_usage : String? = nil,
      @sofort : Stripe::PaymentMethodOptionsParam? = nil,
      @statement_descriptor_suffix_kana : String? = nil,
      @statement_descriptor_suffix_kanji : String? = nil,
      @swish : Stripe::PaymentMethodOptionsParam? = nil,
      @tos_shown_and_accepted : Bool? = nil,
      @twint : Stripe::PaymentMethodOptionsParamTwint? = nil,
      @us_bank_account : Stripe::SetupIntentPaymentMethodOptionsParam? = nil,
      @verification_method : String? = nil,
      @wechat_pay : Stripe::PaymentMethodOptionsParam? = nil,
      @zip : Stripe::PaymentMethodOptionsParamZip? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"cryptogram\" is required and cannot be null") if @cryptogram.nil?

      unless (_cryptogram = @cryptogram).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cryptogram", _cryptogram.to_s.size, MAX_LENGTH_FOR_CRYPTOGRAM)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"transaction_id\" is required and cannot be null") if @transaction_id.nil?

      unless (_transaction_id = @transaction_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transaction_id", _transaction_id.to_s.size, MAX_LENGTH_FOR_TRANSACTION_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"version\" is required and cannot be null") if @version.nil?

      unless (_version = @version).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_VERSION) unless OpenApi::EnumValidator.valid?(_version, VALID_VALUES_FOR_VERSION)
      end
      unless (_acss_debit = @acss_debit).nil?
        invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit")) if _acss_debit.is_a?(OpenApi::Validatable)
      end
      unless (_affirm = @affirm).nil?
        invalid_properties.concat(_affirm.list_invalid_properties_for("affirm")) if _affirm.is_a?(OpenApi::Validatable)
      end
      unless (_afterpay_clearpay = @afterpay_clearpay).nil?
        invalid_properties.concat(_afterpay_clearpay.list_invalid_properties_for("afterpay_clearpay")) if _afterpay_clearpay.is_a?(OpenApi::Validatable)
      end
      unless (_alipay = @alipay).nil?
        invalid_properties.concat(_alipay.list_invalid_properties_for("alipay")) if _alipay.is_a?(OpenApi::Validatable)
      end
      unless (_amazon_pay = @amazon_pay).nil?
        invalid_properties.concat(_amazon_pay.list_invalid_properties_for("amazon_pay")) if _amazon_pay.is_a?(OpenApi::Validatable)
      end
      unless (_app_id = @app_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("app_id", _app_id.to_s.size, MAX_LENGTH_FOR_APP_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_ares_trans_status = @ares_trans_status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ARES_TRANS_STATUS) unless OpenApi::EnumValidator.valid?(_ares_trans_status, VALID_VALUES_FOR_ARES_TRANS_STATUS)
      end
      unless (_au_becs_debit = @au_becs_debit).nil?
        invalid_properties.concat(_au_becs_debit.list_invalid_properties_for("au_becs_debit")) if _au_becs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bacs_debit = @bacs_debit).nil?
        invalid_properties.concat(_bacs_debit.list_invalid_properties_for("bacs_debit")) if _bacs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bancontact = @bancontact).nil?
        invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact")) if _bancontact.is_a?(OpenApi::Validatable)
      end
      unless (_bank_transfer = @bank_transfer).nil?
        invalid_properties.concat(_bank_transfer.list_invalid_properties_for("bank_transfer")) if _bank_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_billing_agreement_id = @billing_agreement_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("billing_agreement_id", _billing_agreement_id.to_s.size, MAX_LENGTH_FOR_BILLING_AGREEMENT_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_blik = @blik).nil?
        invalid_properties.concat(_blik.list_invalid_properties_for("blik")) if _blik.is_a?(OpenApi::Validatable)
      end
      unless (_boleto = @boleto).nil?
        invalid_properties.concat(_boleto.list_invalid_properties_for("boleto")) if _boleto.is_a?(OpenApi::Validatable)
      end
      unless (_capture_method = @capture_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CAPTURE_METHOD) unless OpenApi::EnumValidator.valid?(_capture_method, VALID_VALUES_FOR_CAPTURE_METHOD)
      end
      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      unless (_card_present = @card_present).nil?
        invalid_properties.concat(_card_present.list_invalid_properties_for("card_present")) if _card_present.is_a?(OpenApi::Validatable)
      end
      unless (_cashapp = @cashapp).nil?
        invalid_properties.concat(_cashapp.list_invalid_properties_for("cashapp")) if _cashapp.is_a?(OpenApi::Validatable)
      end
      unless (_client = @client).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CLIENT) unless OpenApi::EnumValidator.valid?(_client, VALID_VALUES_FOR_CLIENT)
      end
      unless (_currency = @currency).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CURRENCY) unless OpenApi::EnumValidator.valid?(_currency, VALID_VALUES_FOR_CURRENCY)
      end
      unless (_customer_balance = @customer_balance).nil?
        invalid_properties.concat(_customer_balance.list_invalid_properties_for("customer_balance")) if _customer_balance.is_a?(OpenApi::Validatable)
      end
      unless (_electronic_commerce_indicator = @electronic_commerce_indicator).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ELECTRONIC_COMMERCE_INDICATOR) unless OpenApi::EnumValidator.valid?(_electronic_commerce_indicator, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end
      unless (_eps = @eps).nil?
        invalid_properties.concat(_eps.list_invalid_properties_for("eps")) if _eps.is_a?(OpenApi::Validatable)
      end
      unless (_exemption_indicator = @exemption_indicator).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_EXEMPTION_INDICATOR) unless OpenApi::EnumValidator.valid?(_exemption_indicator, VALID_VALUES_FOR_EXEMPTION_INDICATOR)
      end

      unless (_financial_connections = @financial_connections).nil?
        invalid_properties.concat(_financial_connections.list_invalid_properties_for("financial_connections")) if _financial_connections.is_a?(OpenApi::Validatable)
      end
      unless (_fpx = @fpx).nil?
        invalid_properties.concat(_fpx.list_invalid_properties_for("fpx")) if _fpx.is_a?(OpenApi::Validatable)
      end
      unless (_funding_type = @funding_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_FUNDING_TYPE) unless OpenApi::EnumValidator.valid?(_funding_type, VALID_VALUES_FOR_FUNDING_TYPE)
      end
      unless (_giropay = @giropay).nil?
        invalid_properties.concat(_giropay.list_invalid_properties_for("giropay")) if _giropay.is_a?(OpenApi::Validatable)
      end
      unless (_grabpay = @grabpay).nil?
        invalid_properties.concat(_grabpay.list_invalid_properties_for("grabpay")) if _grabpay.is_a?(OpenApi::Validatable)
      end
      unless (_ideal = @ideal).nil?
        invalid_properties.concat(_ideal.list_invalid_properties_for("ideal")) if _ideal.is_a?(OpenApi::Validatable)
      end
      unless (_installments = @installments).nil?
        invalid_properties.concat(_installments.list_invalid_properties_for("installments")) if _installments.is_a?(OpenApi::Validatable)
      end
      unless (_interac_present = @interac_present).nil?
        invalid_properties.concat(_interac_present.list_invalid_properties_for("interac_present")) if _interac_present.is_a?(OpenApi::Validatable)
      end
      unless (_klarna = @klarna).nil?
        invalid_properties.concat(_klarna.list_invalid_properties_for("klarna")) if _klarna.is_a?(OpenApi::Validatable)
      end
      unless (_konbini = @konbini).nil?
        invalid_properties.concat(_konbini.list_invalid_properties_for("konbini")) if _konbini.is_a?(OpenApi::Validatable)
      end
      unless (_link = @link).nil?
        invalid_properties.concat(_link.list_invalid_properties_for("link")) if _link.is_a?(OpenApi::Validatable)
      end
      unless (_mandate_options = @mandate_options).nil?
        invalid_properties.concat(_mandate_options.list_invalid_properties_for("mandate_options")) if _mandate_options.is_a?(OpenApi::Validatable)
      end
      unless (_mobilepay = @mobilepay).nil?
        invalid_properties.concat(_mobilepay.list_invalid_properties_for("mobilepay")) if _mobilepay.is_a?(OpenApi::Validatable)
      end
      unless (_multibanco = @multibanco).nil?
        invalid_properties.concat(_multibanco.list_invalid_properties_for("multibanco")) if _multibanco.is_a?(OpenApi::Validatable)
      end
      unless (_network_options = @network_options).nil?
        invalid_properties.concat(_network_options.list_invalid_properties_for("network_options")) if _network_options.is_a?(OpenApi::Validatable)
      end
      unless (_oxxo = @oxxo).nil?
        invalid_properties.concat(_oxxo.list_invalid_properties_for("oxxo")) if _oxxo.is_a?(OpenApi::Validatable)
      end
      unless (_p24 = @p24).nil?
        invalid_properties.concat(_p24.list_invalid_properties_for("p24")) if _p24.is_a?(OpenApi::Validatable)
      end
      unless (_paynow = @paynow).nil?
        invalid_properties.concat(_paynow.list_invalid_properties_for("paynow")) if _paynow.is_a?(OpenApi::Validatable)
      end
      unless (_paypal = @paypal).nil?
        invalid_properties.concat(_paypal.list_invalid_properties_for("paypal")) if _paypal.is_a?(OpenApi::Validatable)
      end
      unless (_pix = @pix).nil?
        invalid_properties.concat(_pix.list_invalid_properties_for("pix")) if _pix.is_a?(OpenApi::Validatable)
      end
      unless (_preferred_locale = @preferred_locale).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PREFERRED_LOCALE) unless OpenApi::EnumValidator.valid?(_preferred_locale, VALID_VALUES_FOR_PREFERRED_LOCALE)
      end
      unless (_promptpay = @promptpay).nil?
        invalid_properties.concat(_promptpay.list_invalid_properties_for("promptpay")) if _promptpay.is_a?(OpenApi::Validatable)
      end
      unless (_reference = @reference).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reference", _reference.to_s.size, MAX_LENGTH_FOR_REFERENCE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_request_three_d_secure = @request_three_d_secure).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_THREE_D_SECURE) unless OpenApi::EnumValidator.valid?(_request_three_d_secure, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end
      unless (_requestor_challenge_indicator = @requestor_challenge_indicator).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("requestor_challenge_indicator", _requestor_challenge_indicator.to_s.size, MAX_LENGTH_FOR_REQUESTOR_CHALLENGE_INDICATOR)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_revolut_pay = @revolut_pay).nil?
        invalid_properties.concat(_revolut_pay.list_invalid_properties_for("revolut_pay")) if _revolut_pay.is_a?(OpenApi::Validatable)
      end
      unless (_risk_correlation_id = @risk_correlation_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("risk_correlation_id", _risk_correlation_id.to_s.size, MAX_LENGTH_FOR_RISK_CORRELATION_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_sepa_debit = @sepa_debit).nil?
        invalid_properties.concat(_sepa_debit.list_invalid_properties_for("sepa_debit")) if _sepa_debit.is_a?(OpenApi::Validatable)
      end
      unless (_setup_future_usage = @setup_future_usage).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SETUP_FUTURE_USAGE) unless OpenApi::EnumValidator.valid?(_setup_future_usage, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end
      unless (_sofort = @sofort).nil?
        invalid_properties.concat(_sofort.list_invalid_properties_for("sofort")) if _sofort.is_a?(OpenApi::Validatable)
      end
      unless (_statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_suffix_kana", _statement_descriptor_suffix_kana.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANA)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_suffix_kanji", _statement_descriptor_suffix_kanji.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANJI)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_swish = @swish).nil?
        invalid_properties.concat(_swish.list_invalid_properties_for("swish")) if _swish.is_a?(OpenApi::Validatable)
      end

      unless (_twint = @twint).nil?
        invalid_properties.concat(_twint.list_invalid_properties_for("twint")) if _twint.is_a?(OpenApi::Validatable)
      end
      unless (_us_bank_account = @us_bank_account).nil?
        invalid_properties.concat(_us_bank_account.list_invalid_properties_for("us_bank_account")) if _us_bank_account.is_a?(OpenApi::Validatable)
      end
      unless (_verification_method = @verification_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_VERIFICATION_METHOD) unless OpenApi::EnumValidator.valid?(_verification_method, VALID_VALUES_FOR_VERIFICATION_METHOD)
      end
      unless (_wechat_pay = @wechat_pay).nil?
        invalid_properties.concat(_wechat_pay.list_invalid_properties_for("wechat_pay")) if _wechat_pay.is_a?(OpenApi::Validatable)
      end
      unless (_zip = @zip).nil?
        invalid_properties.concat(_zip.list_invalid_properties_for("zip")) if _zip.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @cryptogram.nil?
      unless (_cryptogram = @cryptogram).nil?
        return false if _cryptogram.to_s.size > MAX_LENGTH_FOR_CRYPTOGRAM
      end

      return false if @transaction_id.nil?
      unless (_transaction_id = @transaction_id).nil?
        return false if _transaction_id.to_s.size > MAX_LENGTH_FOR_TRANSACTION_ID
      end

      return false if @version.nil?
      unless (_version = @version).nil?
        return false unless OpenApi::EnumValidator.valid?(_version, VALID_VALUES_FOR_VERSION)
      end

      unless (_acss_debit = @acss_debit).nil?
        return false if _acss_debit.is_a?(OpenApi::Validatable) && !_acss_debit.valid?
      end

      unless (_affirm = @affirm).nil?
        return false if _affirm.is_a?(OpenApi::Validatable) && !_affirm.valid?
      end

      unless (_afterpay_clearpay = @afterpay_clearpay).nil?
        return false if _afterpay_clearpay.is_a?(OpenApi::Validatable) && !_afterpay_clearpay.valid?
      end

      unless (_alipay = @alipay).nil?
        return false if _alipay.is_a?(OpenApi::Validatable) && !_alipay.valid?
      end

      unless (_amazon_pay = @amazon_pay).nil?
        return false if _amazon_pay.is_a?(OpenApi::Validatable) && !_amazon_pay.valid?
      end

      unless (_app_id = @app_id).nil?
        return false if _app_id.to_s.size > MAX_LENGTH_FOR_APP_ID
      end

      unless (_ares_trans_status = @ares_trans_status).nil?
        return false unless OpenApi::EnumValidator.valid?(_ares_trans_status, VALID_VALUES_FOR_ARES_TRANS_STATUS)
      end

      unless (_au_becs_debit = @au_becs_debit).nil?
        return false if _au_becs_debit.is_a?(OpenApi::Validatable) && !_au_becs_debit.valid?
      end

      unless (_bacs_debit = @bacs_debit).nil?
        return false if _bacs_debit.is_a?(OpenApi::Validatable) && !_bacs_debit.valid?
      end

      unless (_bancontact = @bancontact).nil?
        return false if _bancontact.is_a?(OpenApi::Validatable) && !_bancontact.valid?
      end

      unless (_bank_transfer = @bank_transfer).nil?
        return false if _bank_transfer.is_a?(OpenApi::Validatable) && !_bank_transfer.valid?
      end

      unless (_billing_agreement_id = @billing_agreement_id).nil?
        return false if _billing_agreement_id.to_s.size > MAX_LENGTH_FOR_BILLING_AGREEMENT_ID
      end

      unless (_blik = @blik).nil?
        return false if _blik.is_a?(OpenApi::Validatable) && !_blik.valid?
      end

      unless (_boleto = @boleto).nil?
        return false if _boleto.is_a?(OpenApi::Validatable) && !_boleto.valid?
      end

      unless (_capture_method = @capture_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_capture_method, VALID_VALUES_FOR_CAPTURE_METHOD)
      end

      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      unless (_card_present = @card_present).nil?
        return false if _card_present.is_a?(OpenApi::Validatable) && !_card_present.valid?
      end

      unless (_cashapp = @cashapp).nil?
        return false if _cashapp.is_a?(OpenApi::Validatable) && !_cashapp.valid?
      end

      unless (_client = @client).nil?
        return false unless OpenApi::EnumValidator.valid?(_client, VALID_VALUES_FOR_CLIENT)
      end

      unless (_currency = @currency).nil?
        return false unless OpenApi::EnumValidator.valid?(_currency, VALID_VALUES_FOR_CURRENCY)
      end

      unless (_customer_balance = @customer_balance).nil?
        return false if _customer_balance.is_a?(OpenApi::Validatable) && !_customer_balance.valid?
      end

      unless (_electronic_commerce_indicator = @electronic_commerce_indicator).nil?
        return false unless OpenApi::EnumValidator.valid?(_electronic_commerce_indicator, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end

      unless (_eps = @eps).nil?
        return false if _eps.is_a?(OpenApi::Validatable) && !_eps.valid?
      end

      unless (_exemption_indicator = @exemption_indicator).nil?
        return false unless OpenApi::EnumValidator.valid?(_exemption_indicator, VALID_VALUES_FOR_EXEMPTION_INDICATOR)
      end

      unless (_financial_connections = @financial_connections).nil?
        return false if _financial_connections.is_a?(OpenApi::Validatable) && !_financial_connections.valid?
      end

      unless (_fpx = @fpx).nil?
        return false if _fpx.is_a?(OpenApi::Validatable) && !_fpx.valid?
      end

      unless (_funding_type = @funding_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_funding_type, VALID_VALUES_FOR_FUNDING_TYPE)
      end

      unless (_giropay = @giropay).nil?
        return false if _giropay.is_a?(OpenApi::Validatable) && !_giropay.valid?
      end

      unless (_grabpay = @grabpay).nil?
        return false if _grabpay.is_a?(OpenApi::Validatable) && !_grabpay.valid?
      end

      unless (_ideal = @ideal).nil?
        return false if _ideal.is_a?(OpenApi::Validatable) && !_ideal.valid?
      end

      unless (_installments = @installments).nil?
        return false if _installments.is_a?(OpenApi::Validatable) && !_installments.valid?
      end

      unless (_interac_present = @interac_present).nil?
        return false if _interac_present.is_a?(OpenApi::Validatable) && !_interac_present.valid?
      end

      unless (_klarna = @klarna).nil?
        return false if _klarna.is_a?(OpenApi::Validatable) && !_klarna.valid?
      end

      unless (_konbini = @konbini).nil?
        return false if _konbini.is_a?(OpenApi::Validatable) && !_konbini.valid?
      end

      unless (_link = @link).nil?
        return false if _link.is_a?(OpenApi::Validatable) && !_link.valid?
      end

      unless (_mandate_options = @mandate_options).nil?
        return false if _mandate_options.is_a?(OpenApi::Validatable) && !_mandate_options.valid?
      end

      unless (_mobilepay = @mobilepay).nil?
        return false if _mobilepay.is_a?(OpenApi::Validatable) && !_mobilepay.valid?
      end

      unless (_multibanco = @multibanco).nil?
        return false if _multibanco.is_a?(OpenApi::Validatable) && !_multibanco.valid?
      end

      unless (_network_options = @network_options).nil?
        return false if _network_options.is_a?(OpenApi::Validatable) && !_network_options.valid?
      end

      unless (_oxxo = @oxxo).nil?
        return false if _oxxo.is_a?(OpenApi::Validatable) && !_oxxo.valid?
      end

      unless (_p24 = @p24).nil?
        return false if _p24.is_a?(OpenApi::Validatable) && !_p24.valid?
      end

      unless (_paynow = @paynow).nil?
        return false if _paynow.is_a?(OpenApi::Validatable) && !_paynow.valid?
      end

      unless (_paypal = @paypal).nil?
        return false if _paypal.is_a?(OpenApi::Validatable) && !_paypal.valid?
      end

      unless (_pix = @pix).nil?
        return false if _pix.is_a?(OpenApi::Validatable) && !_pix.valid?
      end

      unless (_preferred_locale = @preferred_locale).nil?
        return false unless OpenApi::EnumValidator.valid?(_preferred_locale, VALID_VALUES_FOR_PREFERRED_LOCALE)
      end

      unless (_promptpay = @promptpay).nil?
        return false if _promptpay.is_a?(OpenApi::Validatable) && !_promptpay.valid?
      end

      unless (_reference = @reference).nil?
        return false if _reference.to_s.size > MAX_LENGTH_FOR_REFERENCE
      end

      unless (_request_three_d_secure = @request_three_d_secure).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_three_d_secure, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end

      unless (_requestor_challenge_indicator = @requestor_challenge_indicator).nil?
        return false if _requestor_challenge_indicator.to_s.size > MAX_LENGTH_FOR_REQUESTOR_CHALLENGE_INDICATOR
      end

      unless (_revolut_pay = @revolut_pay).nil?
        return false if _revolut_pay.is_a?(OpenApi::Validatable) && !_revolut_pay.valid?
      end

      unless (_risk_correlation_id = @risk_correlation_id).nil?
        return false if _risk_correlation_id.to_s.size > MAX_LENGTH_FOR_RISK_CORRELATION_ID
      end

      unless (_sepa_debit = @sepa_debit).nil?
        return false if _sepa_debit.is_a?(OpenApi::Validatable) && !_sepa_debit.valid?
      end

      unless (_setup_future_usage = @setup_future_usage).nil?
        return false unless OpenApi::EnumValidator.valid?(_setup_future_usage, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end

      unless (_sofort = @sofort).nil?
        return false if _sofort.is_a?(OpenApi::Validatable) && !_sofort.valid?
      end

      unless (_statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana).nil?
        return false if _statement_descriptor_suffix_kana.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANA
      end

      unless (_statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji).nil?
        return false if _statement_descriptor_suffix_kanji.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANJI
      end

      unless (_swish = @swish).nil?
        return false if _swish.is_a?(OpenApi::Validatable) && !_swish.valid?
      end

      unless (_twint = @twint).nil?
        return false if _twint.is_a?(OpenApi::Validatable) && !_twint.valid?
      end

      unless (_us_bank_account = @us_bank_account).nil?
        return false if _us_bank_account.is_a?(OpenApi::Validatable) && !_us_bank_account.valid?
      end

      unless (_verification_method = @verification_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_verification_method, VALID_VALUES_FOR_VERIFICATION_METHOD)
      end

      unless (_wechat_pay = @wechat_pay).nil?
        return false if _wechat_pay.is_a?(OpenApi::Validatable) && !_wechat_pay.valid?
      end

      unless (_zip = @zip).nil?
        return false if _zip.is_a?(OpenApi::Validatable) && !_zip.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cryptogram Object to be assigned
    def cryptogram=(new_value : String?)
      raise ArgumentError.new("\"cryptogram\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cryptogram", new_value.to_s.size, MAX_LENGTH_FOR_CRYPTOGRAM)
      end

      @cryptogram = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      raise ArgumentError.new("\"transaction_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("transaction_id", new_value.to_s.size, MAX_LENGTH_FOR_TRANSACTION_ID)
      end

      @transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(new_value : String?)
      raise ArgumentError.new("\"version\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("version", new_value, VALID_VALUES_FOR_VERSION)
      end

      @version = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(new_value : Stripe::SetupIntentPaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @acss_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm Object to be assigned
    def affirm=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @affirm = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @afterpay_clearpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @alipay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amazon_pay Object to be assigned
    def amazon_pay=(new_value : Stripe::SetupIntentPaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amazon_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] app_id Object to be assigned
    def app_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("app_id", new_value.to_s.size, MAX_LENGTH_FOR_APP_ID)
      end

      @app_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ares_trans_status Object to be assigned
    def ares_trans_status=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("ares_trans_status", new_value, VALID_VALUES_FOR_ARES_TRANS_STATUS)
      end

      @ares_trans_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @au_becs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit Object to be assigned
    def bacs_debit=(new_value : Stripe::SetupIntentPaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bancontact = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer Object to be assigned
    def bank_transfer=(new_value : Stripe::BankTransferParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bank_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_agreement_id Object to be assigned
    def billing_agreement_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("billing_agreement_id", new_value.to_s.size, MAX_LENGTH_FOR_BILLING_AGREEMENT_ID)
      end

      @billing_agreement_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik Object to be assigned
    def blik=(new_value : Stripe::PaymentMethodOptionsParamBlik?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @blik = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto Object to be assigned
    def boleto=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @boleto = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capture_method Object to be assigned
    def capture_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("capture_method", new_value, VALID_VALUES_FOR_CAPTURE_METHOD)
      end

      @capture_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : Stripe::SetupIntentParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(new_value : Stripe::SetupIntentPaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_present2 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cashapp Object to be assigned
    def cashapp=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cashapp = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client Object to be assigned
    def client=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("client", new_value, VALID_VALUES_FOR_CLIENT)
      end

      @client = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("currency", new_value, VALID_VALUES_FOR_CURRENCY)
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] electronic_commerce_indicator Object to be assigned
    def electronic_commerce_indicator=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("electronic_commerce_indicator", new_value, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end

      @electronic_commerce_indicator = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eps = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exemption_indicator Object to be assigned
    def exemption_indicator=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("exemption_indicator", new_value, VALID_VALUES_FOR_EXEMPTION_INDICATOR)
      end

      @exemption_indicator = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_after_days Object to be assigned
    def expires_after_days=(new_value : Int64?)
      @expires_after_days = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_after_seconds Object to be assigned
    def expires_after_seconds=(new_value : Int64?)
      @expires_after_seconds = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_connections Object to be assigned
    def financial_connections=(new_value : Stripe::LinkedAccountOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @financial_connections = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx Object to be assigned
    def fpx=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fpx = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_type Object to be assigned
    def funding_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("funding_type", new_value, VALID_VALUES_FOR_FUNDING_TYPE)
      end

      @funding_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @giropay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay Object to be assigned
    def grabpay=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @grabpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ideal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] installments Object to be assigned
    def installments=(new_value : Stripe::InstallmentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @installments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interac_present Object to be assigned
    def interac_present=(new_value : Stripe::PaymentMethodOptionsParamInteracPresent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @interac_present = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @klarna = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @konbini = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(new_value : Stripe::SetupIntentPaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate_options Object to be assigned
    def mandate_options=(new_value : Stripe::MandateOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mandate_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mobilepay Object to be assigned
    def mobilepay=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mobilepay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco Object to be assigned
    def multibanco=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @multibanco = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_options Object to be assigned
    def network_options=(new_value : Stripe::NetworkOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @network_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @oxxo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @p24 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow Object to be assigned
    def paynow=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paynow = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paypal Object to be assigned
    def paypal=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paypal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix Object to be assigned
    def pix=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preferred_locale Object to be assigned
    def preferred_locale=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("preferred_locale", new_value, VALID_VALUES_FOR_PREFERRED_LOCALE)
      end

      @preferred_locale = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay Object to be assigned
    def promptpay=(new_value : Stripe::PaymentMethodOptionsParamPromptpay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @promptpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("reference", new_value.to_s.size, MAX_LENGTH_FOR_REFERENCE)
      end

      @reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_three_d_secure Object to be assigned
    def request_three_d_secure=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_three_d_secure", new_value, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end

      @request_three_d_secure = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] requestor_challenge_indicator Object to be assigned
    def requestor_challenge_indicator=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("requestor_challenge_indicator", new_value.to_s.size, MAX_LENGTH_FOR_REQUESTOR_CHALLENGE_INDICATOR)
      end

      @requestor_challenge_indicator = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] revolut_pay Object to be assigned
    def revolut_pay=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @revolut_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_correlation_id Object to be assigned
    def risk_correlation_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("risk_correlation_id", new_value.to_s.size, MAX_LENGTH_FOR_RISK_CORRELATION_ID)
      end

      @risk_correlation_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(new_value : Stripe::SetupIntentPaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("setup_future_usage", new_value, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end

      @setup_future_usage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sofort = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kana Object to be assigned
    def statement_descriptor_suffix_kana=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix_kana", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANA)
      end

      @statement_descriptor_suffix_kana = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kanji Object to be assigned
    def statement_descriptor_suffix_kanji=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix_kanji", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANJI)
      end

      @statement_descriptor_suffix_kanji = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swish Object to be assigned
    def swish=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @swish = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tos_shown_and_accepted Object to be assigned
    def tos_shown_and_accepted=(new_value : Bool?)
      @tos_shown_and_accepted = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] twint Object to be assigned
    def twint=(new_value : Stripe::PaymentMethodOptionsParamTwint?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @twint = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(new_value : Stripe::SetupIntentPaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @us_bank_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_method Object to be assigned
    def verification_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("verification_method", new_value, VALID_VALUES_FOR_VERIFICATION_METHOD)
      end

      @verification_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wechat_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] zip Object to be assigned
    def zip=(new_value : Stripe::PaymentMethodOptionsParamZip?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @zip = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@cryptogram, @transaction_id, @version, @acss_debit, @affirm, @afterpay_clearpay, @alipay, @amazon_pay, @app_id, @ares_trans_status, @au_becs_debit, @bacs_debit, @bancontact, @bank_transfer, @billing_agreement_id, @blik, @boleto, @capture_method, @card, @card_present2, @cashapp, @client, @currency, @customer_balance, @electronic_commerce_indicator, @eps, @exemption_indicator, @expires_after_days, @expires_after_seconds, @financial_connections, @fpx, @funding_type, @giropay, @grabpay, @ideal, @installments, @interac_present, @klarna, @konbini, @link, @mandate_options, @mobilepay, @multibanco, @network_options, @oxxo, @p24, @paynow, @paypal, @pix, @preferred_locale, @promptpay, @reference, @request_three_d_secure, @requestor_challenge_indicator, @revolut_pay, @risk_correlation_id, @sepa_debit, @setup_future_usage, @sofort, @statement_descriptor_suffix_kana, @statement_descriptor_suffix_kanji, @swish, @tos_shown_and_accepted, @twint, @us_bank_account, @verification_method, @wechat_pay, @zip)
  end
end
