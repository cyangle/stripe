#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_intent_next_action_alipay_handle_redirect"
require "./payment_intent_next_action_boleto"
require "./payment_intent_next_action_card_await_notification"
require "./payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"
require "./payment_intent_next_action_display_bank_transfer_instructions"
require "./payment_intent_next_action_display_multibanco_details"
require "./payment_intent_next_action_display_oxxo_details"
require "./payment_intent_next_action_konbini"
require "./payment_intent_next_action_paynow_display_qr_code"
require "./payment_intent_next_action_pix_display_qr_code"
require "./payment_intent_next_action_promptpay_display_qr_code"
require "./payment_intent_next_action_redirect_to_url"
require "./payment_intent_next_action_swish_handle_redirect_or_display_qr_code"
require "./payment_intent_next_action_verify_with_microdeposits"
require "./payment_intent_next_action_wechat_pay_display_qr_code"
require "./payment_intent_next_action_wechat_pay_redirect_to_android_app"
require "./payment_intent_next_action_wechat_pay_redirect_to_ios_app"

module Stripe
  #
  class PaymentIntentNextAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    MAX_LENGTH_FOR__TYPE = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "alipay_handle_redirect", type: Stripe::PaymentIntentNextActionAlipayHandleRedirect?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay_handle_redirect : Stripe::PaymentIntentNextActionAlipayHandleRedirect? = nil

    @[JSON::Field(key: "boleto_display_details", type: Stripe::PaymentIntentNextActionBoleto?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto_display_details : Stripe::PaymentIntentNextActionBoleto? = nil

    @[JSON::Field(key: "card_await_notification", type: Stripe::PaymentIntentNextActionCardAwaitNotification?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_await_notification : Stripe::PaymentIntentNextActionCardAwaitNotification? = nil

    @[JSON::Field(key: "cashapp_handle_redirect_or_display_qr_code", type: Stripe::PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cashapp_handle_redirect_or_display_qr_code : Stripe::PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode? = nil

    @[JSON::Field(key: "display_bank_transfer_instructions", type: Stripe::PaymentIntentNextActionDisplayBankTransferInstructions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter display_bank_transfer_instructions : Stripe::PaymentIntentNextActionDisplayBankTransferInstructions? = nil

    @[JSON::Field(key: "konbini_display_details", type: Stripe::PaymentIntentNextActionKonbini?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini_display_details : Stripe::PaymentIntentNextActionKonbini? = nil

    @[JSON::Field(key: "multibanco_display_details", type: Stripe::PaymentIntentNextActionDisplayMultibancoDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco_display_details : Stripe::PaymentIntentNextActionDisplayMultibancoDetails? = nil

    @[JSON::Field(key: "oxxo_display_details", type: Stripe::PaymentIntentNextActionDisplayOxxoDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo_display_details : Stripe::PaymentIntentNextActionDisplayOxxoDetails? = nil

    @[JSON::Field(key: "paynow_display_qr_code", type: Stripe::PaymentIntentNextActionPaynowDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow_display_qr_code : Stripe::PaymentIntentNextActionPaynowDisplayQrCode? = nil

    @[JSON::Field(key: "pix_display_qr_code", type: Stripe::PaymentIntentNextActionPixDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix_display_qr_code : Stripe::PaymentIntentNextActionPixDisplayQrCode? = nil

    @[JSON::Field(key: "promptpay_display_qr_code", type: Stripe::PaymentIntentNextActionPromptpayDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay_display_qr_code : Stripe::PaymentIntentNextActionPromptpayDisplayQrCode? = nil

    @[JSON::Field(key: "redirect_to_url", type: Stripe::PaymentIntentNextActionRedirectToUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect_to_url : Stripe::PaymentIntentNextActionRedirectToUrl? = nil

    @[JSON::Field(key: "swish_handle_redirect_or_display_qr_code", type: Stripe::PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter swish_handle_redirect_or_display_qr_code : Stripe::PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode? = nil

    # When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
    @[JSON::Field(key: "use_stripe_sdk", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter use_stripe_sdk : JSON::Any? = nil

    @[JSON::Field(key: "verify_with_microdeposits", type: Stripe::PaymentIntentNextActionVerifyWithMicrodeposits?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verify_with_microdeposits : Stripe::PaymentIntentNextActionVerifyWithMicrodeposits? = nil

    @[JSON::Field(key: "wechat_pay_display_qr_code", type: Stripe::PaymentIntentNextActionWechatPayDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay_display_qr_code : Stripe::PaymentIntentNextActionWechatPayDisplayQrCode? = nil

    @[JSON::Field(key: "wechat_pay_redirect_to_android_app", type: Stripe::PaymentIntentNextActionWechatPayRedirectToAndroidApp?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay_redirect_to_android_app : Stripe::PaymentIntentNextActionWechatPayRedirectToAndroidApp? = nil

    @[JSON::Field(key: "wechat_pay_redirect_to_ios_app", type: Stripe::PaymentIntentNextActionWechatPayRedirectToIosApp?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay_redirect_to_ios_app : Stripe::PaymentIntentNextActionWechatPayRedirectToIosApp? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @alipay_handle_redirect : Stripe::PaymentIntentNextActionAlipayHandleRedirect? = nil,
      @boleto_display_details : Stripe::PaymentIntentNextActionBoleto? = nil,
      @card_await_notification : Stripe::PaymentIntentNextActionCardAwaitNotification? = nil,
      @cashapp_handle_redirect_or_display_qr_code : Stripe::PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode? = nil,
      @display_bank_transfer_instructions : Stripe::PaymentIntentNextActionDisplayBankTransferInstructions? = nil,
      @konbini_display_details : Stripe::PaymentIntentNextActionKonbini? = nil,
      @multibanco_display_details : Stripe::PaymentIntentNextActionDisplayMultibancoDetails? = nil,
      @oxxo_display_details : Stripe::PaymentIntentNextActionDisplayOxxoDetails? = nil,
      @paynow_display_qr_code : Stripe::PaymentIntentNextActionPaynowDisplayQrCode? = nil,
      @pix_display_qr_code : Stripe::PaymentIntentNextActionPixDisplayQrCode? = nil,
      @promptpay_display_qr_code : Stripe::PaymentIntentNextActionPromptpayDisplayQrCode? = nil,
      @redirect_to_url : Stripe::PaymentIntentNextActionRedirectToUrl? = nil,
      @swish_handle_redirect_or_display_qr_code : Stripe::PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode? = nil,
      @use_stripe_sdk : JSON::Any? = nil,
      @verify_with_microdeposits : Stripe::PaymentIntentNextActionVerifyWithMicrodeposits? = nil,
      @wechat_pay_display_qr_code : Stripe::PaymentIntentNextActionWechatPayDisplayQrCode? = nil,
      @wechat_pay_redirect_to_android_app : Stripe::PaymentIntentNextActionWechatPayRedirectToAndroidApp? = nil,
      @wechat_pay_redirect_to_ios_app : Stripe::PaymentIntentNextActionWechatPayRedirectToIosApp? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, MAX_LENGTH_FOR__TYPE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_alipay_handle_redirect = @alipay_handle_redirect).nil?
        invalid_properties.concat(_alipay_handle_redirect.list_invalid_properties_for("alipay_handle_redirect")) if _alipay_handle_redirect.is_a?(OpenApi::Validatable)
      end
      unless (_boleto_display_details = @boleto_display_details).nil?
        invalid_properties.concat(_boleto_display_details.list_invalid_properties_for("boleto_display_details")) if _boleto_display_details.is_a?(OpenApi::Validatable)
      end
      unless (_card_await_notification = @card_await_notification).nil?
        invalid_properties.concat(_card_await_notification.list_invalid_properties_for("card_await_notification")) if _card_await_notification.is_a?(OpenApi::Validatable)
      end
      unless (_cashapp_handle_redirect_or_display_qr_code = @cashapp_handle_redirect_or_display_qr_code).nil?
        invalid_properties.concat(_cashapp_handle_redirect_or_display_qr_code.list_invalid_properties_for("cashapp_handle_redirect_or_display_qr_code")) if _cashapp_handle_redirect_or_display_qr_code.is_a?(OpenApi::Validatable)
      end
      unless (_display_bank_transfer_instructions = @display_bank_transfer_instructions).nil?
        invalid_properties.concat(_display_bank_transfer_instructions.list_invalid_properties_for("display_bank_transfer_instructions")) if _display_bank_transfer_instructions.is_a?(OpenApi::Validatable)
      end
      unless (_konbini_display_details = @konbini_display_details).nil?
        invalid_properties.concat(_konbini_display_details.list_invalid_properties_for("konbini_display_details")) if _konbini_display_details.is_a?(OpenApi::Validatable)
      end
      unless (_multibanco_display_details = @multibanco_display_details).nil?
        invalid_properties.concat(_multibanco_display_details.list_invalid_properties_for("multibanco_display_details")) if _multibanco_display_details.is_a?(OpenApi::Validatable)
      end
      unless (_oxxo_display_details = @oxxo_display_details).nil?
        invalid_properties.concat(_oxxo_display_details.list_invalid_properties_for("oxxo_display_details")) if _oxxo_display_details.is_a?(OpenApi::Validatable)
      end
      unless (_paynow_display_qr_code = @paynow_display_qr_code).nil?
        invalid_properties.concat(_paynow_display_qr_code.list_invalid_properties_for("paynow_display_qr_code")) if _paynow_display_qr_code.is_a?(OpenApi::Validatable)
      end
      unless (_pix_display_qr_code = @pix_display_qr_code).nil?
        invalid_properties.concat(_pix_display_qr_code.list_invalid_properties_for("pix_display_qr_code")) if _pix_display_qr_code.is_a?(OpenApi::Validatable)
      end
      unless (_promptpay_display_qr_code = @promptpay_display_qr_code).nil?
        invalid_properties.concat(_promptpay_display_qr_code.list_invalid_properties_for("promptpay_display_qr_code")) if _promptpay_display_qr_code.is_a?(OpenApi::Validatable)
      end
      unless (_redirect_to_url = @redirect_to_url).nil?
        invalid_properties.concat(_redirect_to_url.list_invalid_properties_for("redirect_to_url")) if _redirect_to_url.is_a?(OpenApi::Validatable)
      end
      unless (_swish_handle_redirect_or_display_qr_code = @swish_handle_redirect_or_display_qr_code).nil?
        invalid_properties.concat(_swish_handle_redirect_or_display_qr_code.list_invalid_properties_for("swish_handle_redirect_or_display_qr_code")) if _swish_handle_redirect_or_display_qr_code.is_a?(OpenApi::Validatable)
      end

      unless (_verify_with_microdeposits = @verify_with_microdeposits).nil?
        invalid_properties.concat(_verify_with_microdeposits.list_invalid_properties_for("verify_with_microdeposits")) if _verify_with_microdeposits.is_a?(OpenApi::Validatable)
      end
      unless (_wechat_pay_display_qr_code = @wechat_pay_display_qr_code).nil?
        invalid_properties.concat(_wechat_pay_display_qr_code.list_invalid_properties_for("wechat_pay_display_qr_code")) if _wechat_pay_display_qr_code.is_a?(OpenApi::Validatable)
      end
      unless (_wechat_pay_redirect_to_android_app = @wechat_pay_redirect_to_android_app).nil?
        invalid_properties.concat(_wechat_pay_redirect_to_android_app.list_invalid_properties_for("wechat_pay_redirect_to_android_app")) if _wechat_pay_redirect_to_android_app.is_a?(OpenApi::Validatable)
      end
      unless (_wechat_pay_redirect_to_ios_app = @wechat_pay_redirect_to_ios_app).nil?
        invalid_properties.concat(_wechat_pay_redirect_to_ios_app.list_invalid_properties_for("wechat_pay_redirect_to_ios_app")) if _wechat_pay_redirect_to_ios_app.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if __type.to_s.size > MAX_LENGTH_FOR__TYPE
      end

      unless (_alipay_handle_redirect = @alipay_handle_redirect).nil?
        return false if _alipay_handle_redirect.is_a?(OpenApi::Validatable) && !_alipay_handle_redirect.valid?
      end

      unless (_boleto_display_details = @boleto_display_details).nil?
        return false if _boleto_display_details.is_a?(OpenApi::Validatable) && !_boleto_display_details.valid?
      end

      unless (_card_await_notification = @card_await_notification).nil?
        return false if _card_await_notification.is_a?(OpenApi::Validatable) && !_card_await_notification.valid?
      end

      unless (_cashapp_handle_redirect_or_display_qr_code = @cashapp_handle_redirect_or_display_qr_code).nil?
        return false if _cashapp_handle_redirect_or_display_qr_code.is_a?(OpenApi::Validatable) && !_cashapp_handle_redirect_or_display_qr_code.valid?
      end

      unless (_display_bank_transfer_instructions = @display_bank_transfer_instructions).nil?
        return false if _display_bank_transfer_instructions.is_a?(OpenApi::Validatable) && !_display_bank_transfer_instructions.valid?
      end

      unless (_konbini_display_details = @konbini_display_details).nil?
        return false if _konbini_display_details.is_a?(OpenApi::Validatable) && !_konbini_display_details.valid?
      end

      unless (_multibanco_display_details = @multibanco_display_details).nil?
        return false if _multibanco_display_details.is_a?(OpenApi::Validatable) && !_multibanco_display_details.valid?
      end

      unless (_oxxo_display_details = @oxxo_display_details).nil?
        return false if _oxxo_display_details.is_a?(OpenApi::Validatable) && !_oxxo_display_details.valid?
      end

      unless (_paynow_display_qr_code = @paynow_display_qr_code).nil?
        return false if _paynow_display_qr_code.is_a?(OpenApi::Validatable) && !_paynow_display_qr_code.valid?
      end

      unless (_pix_display_qr_code = @pix_display_qr_code).nil?
        return false if _pix_display_qr_code.is_a?(OpenApi::Validatable) && !_pix_display_qr_code.valid?
      end

      unless (_promptpay_display_qr_code = @promptpay_display_qr_code).nil?
        return false if _promptpay_display_qr_code.is_a?(OpenApi::Validatable) && !_promptpay_display_qr_code.valid?
      end

      unless (_redirect_to_url = @redirect_to_url).nil?
        return false if _redirect_to_url.is_a?(OpenApi::Validatable) && !_redirect_to_url.valid?
      end

      unless (_swish_handle_redirect_or_display_qr_code = @swish_handle_redirect_or_display_qr_code).nil?
        return false if _swish_handle_redirect_or_display_qr_code.is_a?(OpenApi::Validatable) && !_swish_handle_redirect_or_display_qr_code.valid?
      end

      unless (_verify_with_microdeposits = @verify_with_microdeposits).nil?
        return false if _verify_with_microdeposits.is_a?(OpenApi::Validatable) && !_verify_with_microdeposits.valid?
      end

      unless (_wechat_pay_display_qr_code = @wechat_pay_display_qr_code).nil?
        return false if _wechat_pay_display_qr_code.is_a?(OpenApi::Validatable) && !_wechat_pay_display_qr_code.valid?
      end

      unless (_wechat_pay_redirect_to_android_app = @wechat_pay_redirect_to_android_app).nil?
        return false if _wechat_pay_redirect_to_android_app.is_a?(OpenApi::Validatable) && !_wechat_pay_redirect_to_android_app.valid?
      end

      unless (_wechat_pay_redirect_to_ios_app = @wechat_pay_redirect_to_ios_app).nil?
        return false if _wechat_pay_redirect_to_ios_app.is_a?(OpenApi::Validatable) && !_wechat_pay_redirect_to_ios_app.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("_type", new_value.to_s.size, MAX_LENGTH_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay_handle_redirect Object to be assigned
    def alipay_handle_redirect=(new_value : Stripe::PaymentIntentNextActionAlipayHandleRedirect?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @alipay_handle_redirect = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto_display_details Object to be assigned
    def boleto_display_details=(new_value : Stripe::PaymentIntentNextActionBoleto?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @boleto_display_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_await_notification Object to be assigned
    def card_await_notification=(new_value : Stripe::PaymentIntentNextActionCardAwaitNotification?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_await_notification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cashapp_handle_redirect_or_display_qr_code Object to be assigned
    def cashapp_handle_redirect_or_display_qr_code=(new_value : Stripe::PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cashapp_handle_redirect_or_display_qr_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_bank_transfer_instructions Object to be assigned
    def display_bank_transfer_instructions=(new_value : Stripe::PaymentIntentNextActionDisplayBankTransferInstructions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @display_bank_transfer_instructions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini_display_details Object to be assigned
    def konbini_display_details=(new_value : Stripe::PaymentIntentNextActionKonbini?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @konbini_display_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco_display_details Object to be assigned
    def multibanco_display_details=(new_value : Stripe::PaymentIntentNextActionDisplayMultibancoDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @multibanco_display_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo_display_details Object to be assigned
    def oxxo_display_details=(new_value : Stripe::PaymentIntentNextActionDisplayOxxoDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @oxxo_display_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow_display_qr_code Object to be assigned
    def paynow_display_qr_code=(new_value : Stripe::PaymentIntentNextActionPaynowDisplayQrCode?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paynow_display_qr_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix_display_qr_code Object to be assigned
    def pix_display_qr_code=(new_value : Stripe::PaymentIntentNextActionPixDisplayQrCode?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pix_display_qr_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay_display_qr_code Object to be assigned
    def promptpay_display_qr_code=(new_value : Stripe::PaymentIntentNextActionPromptpayDisplayQrCode?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @promptpay_display_qr_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect_to_url Object to be assigned
    def redirect_to_url=(new_value : Stripe::PaymentIntentNextActionRedirectToUrl?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @redirect_to_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swish_handle_redirect_or_display_qr_code Object to be assigned
    def swish_handle_redirect_or_display_qr_code=(new_value : Stripe::PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @swish_handle_redirect_or_display_qr_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] use_stripe_sdk Object to be assigned
    def use_stripe_sdk=(new_value : JSON::Any?)
      @use_stripe_sdk = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verify_with_microdeposits Object to be assigned
    def verify_with_microdeposits=(new_value : Stripe::PaymentIntentNextActionVerifyWithMicrodeposits?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @verify_with_microdeposits = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay_display_qr_code Object to be assigned
    def wechat_pay_display_qr_code=(new_value : Stripe::PaymentIntentNextActionWechatPayDisplayQrCode?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wechat_pay_display_qr_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay_redirect_to_android_app Object to be assigned
    def wechat_pay_redirect_to_android_app=(new_value : Stripe::PaymentIntentNextActionWechatPayRedirectToAndroidApp?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wechat_pay_redirect_to_android_app = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay_redirect_to_ios_app Object to be assigned
    def wechat_pay_redirect_to_ios_app=(new_value : Stripe::PaymentIntentNextActionWechatPayRedirectToIosApp?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wechat_pay_redirect_to_ios_app = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @alipay_handle_redirect, @boleto_display_details, @card_await_notification, @cashapp_handle_redirect_or_display_qr_code, @display_bank_transfer_instructions, @konbini_display_details, @multibanco_display_details, @oxxo_display_details, @paynow_display_qr_code, @pix_display_qr_code, @promptpay_display_qr_code, @redirect_to_url, @swish_handle_redirect_or_display_qr_code, @use_stripe_sdk, @verify_with_microdeposits, @wechat_pay_display_qr_code, @wechat_pay_redirect_to_android_app, @wechat_pay_redirect_to_ios_app)
  end
end
