#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentNextAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Optional properties

    @[JSON::Field(key: "alipay_handle_redirect", type: Stripe::PaymentIntentNextActionAlipayHandleRedirect?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay_handle_redirect : Stripe::PaymentIntentNextActionAlipayHandleRedirect? = nil

    @[JSON::Field(key: "boleto_display_details", type: Stripe::PaymentIntentNextActionBoleto?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto_display_details : Stripe::PaymentIntentNextActionBoleto? = nil

    @[JSON::Field(key: "card_await_notification", type: Stripe::PaymentIntentNextActionCardAwaitNotification?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_await_notification : Stripe::PaymentIntentNextActionCardAwaitNotification? = nil

    @[JSON::Field(key: "display_bank_transfer_instructions", type: Stripe::PaymentIntentNextActionDisplayBankTransferInstructions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter display_bank_transfer_instructions : Stripe::PaymentIntentNextActionDisplayBankTransferInstructions? = nil

    @[JSON::Field(key: "konbini_display_details", type: Stripe::PaymentIntentNextActionKonbini?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini_display_details : Stripe::PaymentIntentNextActionKonbini? = nil

    @[JSON::Field(key: "oxxo_display_details", type: Stripe::PaymentIntentNextActionDisplayOxxoDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo_display_details : Stripe::PaymentIntentNextActionDisplayOxxoDetails? = nil

    @[JSON::Field(key: "paynow_display_qr_code", type: Stripe::PaymentIntentNextActionPaynowDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow_display_qr_code : Stripe::PaymentIntentNextActionPaynowDisplayQrCode? = nil

    @[JSON::Field(key: "pix_display_qr_code", type: Stripe::PaymentIntentNextActionPixDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix_display_qr_code : Stripe::PaymentIntentNextActionPixDisplayQrCode? = nil

    @[JSON::Field(key: "promptpay_display_qr_code", type: Stripe::PaymentIntentNextActionPromptpayDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay_display_qr_code : Stripe::PaymentIntentNextActionPromptpayDisplayQrCode? = nil

    @[JSON::Field(key: "redirect_to_url", type: Stripe::PaymentIntentNextActionRedirectToUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect_to_url : Stripe::PaymentIntentNextActionRedirectToUrl? = nil

    # When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
    @[JSON::Field(key: "use_stripe_sdk", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter use_stripe_sdk : JSON::Any? = nil

    @[JSON::Field(key: "verify_with_microdeposits", type: Stripe::PaymentIntentNextActionVerifyWithMicrodeposits?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verify_with_microdeposits : Stripe::PaymentIntentNextActionVerifyWithMicrodeposits? = nil

    @[JSON::Field(key: "wechat_pay_display_qr_code", type: Stripe::PaymentIntentNextActionWechatPayDisplayQrCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay_display_qr_code : Stripe::PaymentIntentNextActionWechatPayDisplayQrCode? = nil

    @[JSON::Field(key: "wechat_pay_redirect_to_android_app", type: Stripe::PaymentIntentNextActionWechatPayRedirectToAndroidApp?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay_redirect_to_android_app : Stripe::PaymentIntentNextActionWechatPayRedirectToAndroidApp? = nil

    @[JSON::Field(key: "wechat_pay_redirect_to_ios_app", type: Stripe::PaymentIntentNextActionWechatPayRedirectToIosApp?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay_redirect_to_ios_app : Stripe::PaymentIntentNextActionWechatPayRedirectToIosApp? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @alipay_handle_redirect : Stripe::PaymentIntentNextActionAlipayHandleRedirect? = nil,
      @boleto_display_details : Stripe::PaymentIntentNextActionBoleto? = nil,
      @card_await_notification : Stripe::PaymentIntentNextActionCardAwaitNotification? = nil,
      @display_bank_transfer_instructions : Stripe::PaymentIntentNextActionDisplayBankTransferInstructions? = nil,
      @konbini_display_details : Stripe::PaymentIntentNextActionKonbini? = nil,
      @oxxo_display_details : Stripe::PaymentIntentNextActionDisplayOxxoDetails? = nil,
      @paynow_display_qr_code : Stripe::PaymentIntentNextActionPaynowDisplayQrCode? = nil,
      @pix_display_qr_code : Stripe::PaymentIntentNextActionPixDisplayQrCode? = nil,
      @promptpay_display_qr_code : Stripe::PaymentIntentNextActionPromptpayDisplayQrCode? = nil,
      @redirect_to_url : Stripe::PaymentIntentNextActionRedirectToUrl? = nil,
      @use_stripe_sdk : JSON::Any? = nil,
      @verify_with_microdeposits : Stripe::PaymentIntentNextActionVerifyWithMicrodeposits? = nil,
      @wechat_pay_display_qr_code : Stripe::PaymentIntentNextActionWechatPayDisplayQrCode? = nil,
      @wechat_pay_redirect_to_android_app : Stripe::PaymentIntentNextActionWechatPayRedirectToAndroidApp? = nil,
      @wechat_pay_redirect_to_ios_app : Stripe::PaymentIntentNextActionWechatPayRedirectToIosApp? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?
      if __type = @_type
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _alipay_handle_redirect = @alipay_handle_redirect
        invalid_properties.concat(_alipay_handle_redirect.list_invalid_properties_for("alipay_handle_redirect")) if _alipay_handle_redirect.is_a?(OpenApi::Validatable)
      end
      if _boleto_display_details = @boleto_display_details
        invalid_properties.concat(_boleto_display_details.list_invalid_properties_for("boleto_display_details")) if _boleto_display_details.is_a?(OpenApi::Validatable)
      end
      if _card_await_notification = @card_await_notification
        invalid_properties.concat(_card_await_notification.list_invalid_properties_for("card_await_notification")) if _card_await_notification.is_a?(OpenApi::Validatable)
      end
      if _display_bank_transfer_instructions = @display_bank_transfer_instructions
        invalid_properties.concat(_display_bank_transfer_instructions.list_invalid_properties_for("display_bank_transfer_instructions")) if _display_bank_transfer_instructions.is_a?(OpenApi::Validatable)
      end
      if _konbini_display_details = @konbini_display_details
        invalid_properties.concat(_konbini_display_details.list_invalid_properties_for("konbini_display_details")) if _konbini_display_details.is_a?(OpenApi::Validatable)
      end
      if _oxxo_display_details = @oxxo_display_details
        invalid_properties.concat(_oxxo_display_details.list_invalid_properties_for("oxxo_display_details")) if _oxxo_display_details.is_a?(OpenApi::Validatable)
      end
      if _paynow_display_qr_code = @paynow_display_qr_code
        invalid_properties.concat(_paynow_display_qr_code.list_invalid_properties_for("paynow_display_qr_code")) if _paynow_display_qr_code.is_a?(OpenApi::Validatable)
      end
      if _pix_display_qr_code = @pix_display_qr_code
        invalid_properties.concat(_pix_display_qr_code.list_invalid_properties_for("pix_display_qr_code")) if _pix_display_qr_code.is_a?(OpenApi::Validatable)
      end
      if _promptpay_display_qr_code = @promptpay_display_qr_code
        invalid_properties.concat(_promptpay_display_qr_code.list_invalid_properties_for("promptpay_display_qr_code")) if _promptpay_display_qr_code.is_a?(OpenApi::Validatable)
      end
      if _redirect_to_url = @redirect_to_url
        invalid_properties.concat(_redirect_to_url.list_invalid_properties_for("redirect_to_url")) if _redirect_to_url.is_a?(OpenApi::Validatable)
      end

      if _verify_with_microdeposits = @verify_with_microdeposits
        invalid_properties.concat(_verify_with_microdeposits.list_invalid_properties_for("verify_with_microdeposits")) if _verify_with_microdeposits.is_a?(OpenApi::Validatable)
      end
      if _wechat_pay_display_qr_code = @wechat_pay_display_qr_code
        invalid_properties.concat(_wechat_pay_display_qr_code.list_invalid_properties_for("wechat_pay_display_qr_code")) if _wechat_pay_display_qr_code.is_a?(OpenApi::Validatable)
      end
      if _wechat_pay_redirect_to_android_app = @wechat_pay_redirect_to_android_app
        invalid_properties.concat(_wechat_pay_redirect_to_android_app.list_invalid_properties_for("wechat_pay_redirect_to_android_app")) if _wechat_pay_redirect_to_android_app.is_a?(OpenApi::Validatable)
      end
      if _wechat_pay_redirect_to_ios_app = @wechat_pay_redirect_to_ios_app
        invalid_properties.concat(_wechat_pay_redirect_to_ios_app.list_invalid_properties_for("wechat_pay_redirect_to_ios_app")) if _wechat_pay_redirect_to_ios_app.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      if __type = @_type
        return false if __type.to_s.size > 5000
      end
      if _alipay_handle_redirect = @alipay_handle_redirect
        return false if _alipay_handle_redirect.is_a?(OpenApi::Validatable) && !_alipay_handle_redirect.valid?
      end
      if _boleto_display_details = @boleto_display_details
        return false if _boleto_display_details.is_a?(OpenApi::Validatable) && !_boleto_display_details.valid?
      end
      if _card_await_notification = @card_await_notification
        return false if _card_await_notification.is_a?(OpenApi::Validatable) && !_card_await_notification.valid?
      end
      if _display_bank_transfer_instructions = @display_bank_transfer_instructions
        return false if _display_bank_transfer_instructions.is_a?(OpenApi::Validatable) && !_display_bank_transfer_instructions.valid?
      end
      if _konbini_display_details = @konbini_display_details
        return false if _konbini_display_details.is_a?(OpenApi::Validatable) && !_konbini_display_details.valid?
      end
      if _oxxo_display_details = @oxxo_display_details
        return false if _oxxo_display_details.is_a?(OpenApi::Validatable) && !_oxxo_display_details.valid?
      end
      if _paynow_display_qr_code = @paynow_display_qr_code
        return false if _paynow_display_qr_code.is_a?(OpenApi::Validatable) && !_paynow_display_qr_code.valid?
      end
      if _pix_display_qr_code = @pix_display_qr_code
        return false if _pix_display_qr_code.is_a?(OpenApi::Validatable) && !_pix_display_qr_code.valid?
      end
      if _promptpay_display_qr_code = @promptpay_display_qr_code
        return false if _promptpay_display_qr_code.is_a?(OpenApi::Validatable) && !_promptpay_display_qr_code.valid?
      end
      if _redirect_to_url = @redirect_to_url
        return false if _redirect_to_url.is_a?(OpenApi::Validatable) && !_redirect_to_url.valid?
      end

      if _verify_with_microdeposits = @verify_with_microdeposits
        return false if _verify_with_microdeposits.is_a?(OpenApi::Validatable) && !_verify_with_microdeposits.valid?
      end
      if _wechat_pay_display_qr_code = @wechat_pay_display_qr_code
        return false if _wechat_pay_display_qr_code.is_a?(OpenApi::Validatable) && !_wechat_pay_display_qr_code.valid?
      end
      if _wechat_pay_redirect_to_android_app = @wechat_pay_redirect_to_android_app
        return false if _wechat_pay_redirect_to_android_app.is_a?(OpenApi::Validatable) && !_wechat_pay_redirect_to_android_app.valid?
      end
      if _wechat_pay_redirect_to_ios_app = @wechat_pay_redirect_to_ios_app
        return false if _wechat_pay_redirect_to_ios_app.is_a?(OpenApi::Validatable) && !_wechat_pay_redirect_to_ios_app.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay_handle_redirect Object to be assigned
    def alipay_handle_redirect=(alipay_handle_redirect : Stripe::PaymentIntentNextActionAlipayHandleRedirect?)
      if alipay_handle_redirect.nil?
        return @alipay_handle_redirect = nil
      end
      _alipay_handle_redirect = alipay_handle_redirect.not_nil!
      _alipay_handle_redirect.validate if _alipay_handle_redirect.is_a?(OpenApi::Validatable)
      @alipay_handle_redirect = _alipay_handle_redirect
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto_display_details Object to be assigned
    def boleto_display_details=(boleto_display_details : Stripe::PaymentIntentNextActionBoleto?)
      if boleto_display_details.nil?
        return @boleto_display_details = nil
      end
      _boleto_display_details = boleto_display_details.not_nil!
      _boleto_display_details.validate if _boleto_display_details.is_a?(OpenApi::Validatable)
      @boleto_display_details = _boleto_display_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_await_notification Object to be assigned
    def card_await_notification=(card_await_notification : Stripe::PaymentIntentNextActionCardAwaitNotification?)
      if card_await_notification.nil?
        return @card_await_notification = nil
      end
      _card_await_notification = card_await_notification.not_nil!
      _card_await_notification.validate if _card_await_notification.is_a?(OpenApi::Validatable)
      @card_await_notification = _card_await_notification
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_bank_transfer_instructions Object to be assigned
    def display_bank_transfer_instructions=(display_bank_transfer_instructions : Stripe::PaymentIntentNextActionDisplayBankTransferInstructions?)
      if display_bank_transfer_instructions.nil?
        return @display_bank_transfer_instructions = nil
      end
      _display_bank_transfer_instructions = display_bank_transfer_instructions.not_nil!
      _display_bank_transfer_instructions.validate if _display_bank_transfer_instructions.is_a?(OpenApi::Validatable)
      @display_bank_transfer_instructions = _display_bank_transfer_instructions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini_display_details Object to be assigned
    def konbini_display_details=(konbini_display_details : Stripe::PaymentIntentNextActionKonbini?)
      if konbini_display_details.nil?
        return @konbini_display_details = nil
      end
      _konbini_display_details = konbini_display_details.not_nil!
      _konbini_display_details.validate if _konbini_display_details.is_a?(OpenApi::Validatable)
      @konbini_display_details = _konbini_display_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo_display_details Object to be assigned
    def oxxo_display_details=(oxxo_display_details : Stripe::PaymentIntentNextActionDisplayOxxoDetails?)
      if oxxo_display_details.nil?
        return @oxxo_display_details = nil
      end
      _oxxo_display_details = oxxo_display_details.not_nil!
      _oxxo_display_details.validate if _oxxo_display_details.is_a?(OpenApi::Validatable)
      @oxxo_display_details = _oxxo_display_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow_display_qr_code Object to be assigned
    def paynow_display_qr_code=(paynow_display_qr_code : Stripe::PaymentIntentNextActionPaynowDisplayQrCode?)
      if paynow_display_qr_code.nil?
        return @paynow_display_qr_code = nil
      end
      _paynow_display_qr_code = paynow_display_qr_code.not_nil!
      _paynow_display_qr_code.validate if _paynow_display_qr_code.is_a?(OpenApi::Validatable)
      @paynow_display_qr_code = _paynow_display_qr_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix_display_qr_code Object to be assigned
    def pix_display_qr_code=(pix_display_qr_code : Stripe::PaymentIntentNextActionPixDisplayQrCode?)
      if pix_display_qr_code.nil?
        return @pix_display_qr_code = nil
      end
      _pix_display_qr_code = pix_display_qr_code.not_nil!
      _pix_display_qr_code.validate if _pix_display_qr_code.is_a?(OpenApi::Validatable)
      @pix_display_qr_code = _pix_display_qr_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay_display_qr_code Object to be assigned
    def promptpay_display_qr_code=(promptpay_display_qr_code : Stripe::PaymentIntentNextActionPromptpayDisplayQrCode?)
      if promptpay_display_qr_code.nil?
        return @promptpay_display_qr_code = nil
      end
      _promptpay_display_qr_code = promptpay_display_qr_code.not_nil!
      _promptpay_display_qr_code.validate if _promptpay_display_qr_code.is_a?(OpenApi::Validatable)
      @promptpay_display_qr_code = _promptpay_display_qr_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect_to_url Object to be assigned
    def redirect_to_url=(redirect_to_url : Stripe::PaymentIntentNextActionRedirectToUrl?)
      if redirect_to_url.nil?
        return @redirect_to_url = nil
      end
      _redirect_to_url = redirect_to_url.not_nil!
      _redirect_to_url.validate if _redirect_to_url.is_a?(OpenApi::Validatable)
      @redirect_to_url = _redirect_to_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] use_stripe_sdk Object to be assigned
    def use_stripe_sdk=(use_stripe_sdk : JSON::Any?)
      if use_stripe_sdk.nil?
        return @use_stripe_sdk = nil
      end
      _use_stripe_sdk = use_stripe_sdk.not_nil!
      @use_stripe_sdk = _use_stripe_sdk
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verify_with_microdeposits Object to be assigned
    def verify_with_microdeposits=(verify_with_microdeposits : Stripe::PaymentIntentNextActionVerifyWithMicrodeposits?)
      if verify_with_microdeposits.nil?
        return @verify_with_microdeposits = nil
      end
      _verify_with_microdeposits = verify_with_microdeposits.not_nil!
      _verify_with_microdeposits.validate if _verify_with_microdeposits.is_a?(OpenApi::Validatable)
      @verify_with_microdeposits = _verify_with_microdeposits
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay_display_qr_code Object to be assigned
    def wechat_pay_display_qr_code=(wechat_pay_display_qr_code : Stripe::PaymentIntentNextActionWechatPayDisplayQrCode?)
      if wechat_pay_display_qr_code.nil?
        return @wechat_pay_display_qr_code = nil
      end
      _wechat_pay_display_qr_code = wechat_pay_display_qr_code.not_nil!
      _wechat_pay_display_qr_code.validate if _wechat_pay_display_qr_code.is_a?(OpenApi::Validatable)
      @wechat_pay_display_qr_code = _wechat_pay_display_qr_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay_redirect_to_android_app Object to be assigned
    def wechat_pay_redirect_to_android_app=(wechat_pay_redirect_to_android_app : Stripe::PaymentIntentNextActionWechatPayRedirectToAndroidApp?)
      if wechat_pay_redirect_to_android_app.nil?
        return @wechat_pay_redirect_to_android_app = nil
      end
      _wechat_pay_redirect_to_android_app = wechat_pay_redirect_to_android_app.not_nil!
      _wechat_pay_redirect_to_android_app.validate if _wechat_pay_redirect_to_android_app.is_a?(OpenApi::Validatable)
      @wechat_pay_redirect_to_android_app = _wechat_pay_redirect_to_android_app
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay_redirect_to_ios_app Object to be assigned
    def wechat_pay_redirect_to_ios_app=(wechat_pay_redirect_to_ios_app : Stripe::PaymentIntentNextActionWechatPayRedirectToIosApp?)
      if wechat_pay_redirect_to_ios_app.nil?
        return @wechat_pay_redirect_to_ios_app = nil
      end
      _wechat_pay_redirect_to_ios_app = wechat_pay_redirect_to_ios_app.not_nil!
      _wechat_pay_redirect_to_ios_app.validate if _wechat_pay_redirect_to_ios_app.is_a?(OpenApi::Validatable)
      @wechat_pay_redirect_to_ios_app = _wechat_pay_redirect_to_ios_app
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @alipay_handle_redirect, @boleto_display_details, @card_await_notification, @display_bank_transfer_instructions, @konbini_display_details, @oxxo_display_details, @paynow_display_qr_code, @pix_display_qr_code, @promptpay_display_qr_code, @redirect_to_url, @use_stripe_sdk, @verify_with_microdeposits, @wechat_pay_display_qr_code, @wechat_pay_redirect_to_android_app, @wechat_pay_redirect_to_ios_app)
  end
end
