#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostTokensRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "account", type: Stripe::ConnectJsAccountTokenSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account : Stripe::ConnectJsAccountTokenSpecs? = nil

    @[JSON::Field(key: "bank_account", type: Stripe::TokenCreateBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_account : Stripe::TokenCreateBankAccount? = nil

    @[JSON::Field(key: "card", type: Stripe::PostTokensRequestCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PostTokensRequestCard? = nil

    # The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil

    @[JSON::Field(key: "cvc_update", type: Stripe::CvcParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cvc_update : Stripe::CvcParams? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    @[JSON::Field(key: "person", type: Stripe::PersonTokenSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter person : Stripe::PersonTokenSpecs? = nil

    @[JSON::Field(key: "pii", type: Stripe::PiiTokenSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pii : Stripe::PiiTokenSpecs? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account : Stripe::ConnectJsAccountTokenSpecs? = nil,
      @bank_account : Stripe::TokenCreateBankAccount? = nil,
      @card : Stripe::PostTokensRequestCard? = nil,
      @customer : String? = nil,
      @cvc_update : Stripe::CvcParams? = nil,
      @expand : Array(String)? = nil,
      @person : Stripe::PersonTokenSpecs? = nil,
      @pii : Stripe::PiiTokenSpecs? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model account : Stripe::ConnectJsAccountTokenSpecs?
      # This is a model bank_account : Stripe::TokenCreateBankAccount?
      # This is a model card : Stripe::PostTokensRequestCard?
      if _customer = @customer
        if _customer.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model cvc_update : Stripe::CvcParams?
      # This is a model person : Stripe::PersonTokenSpecs?
      # This is a model pii : Stripe::PiiTokenSpecs?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _customer = @customer
        return false if _customer.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account Object to be assigned
    def account=(account : Stripe::ConnectJsAccountTokenSpecs?)
      if account.nil?
        return @account = nil
      end
      @account = account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_account Object to be assigned
    def bank_account=(bank_account : Stripe::TokenCreateBankAccount?)
      if bank_account.nil?
        return @bank_account = nil
      end
      @bank_account = bank_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::PostTokensRequestCard?)
      if card.nil?
        return @card = nil
      end
      @card = card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      if _customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc_update Object to be assigned
    def cvc_update=(cvc_update : Stripe::CvcParams?)
      if cvc_update.nil?
        return @cvc_update = nil
      end
      @cvc_update = cvc_update
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] person Object to be assigned
    def person=(person : Stripe::PersonTokenSpecs?)
      if person.nil?
        return @person = nil
      end
      @person = person
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pii Object to be assigned
    def pii=(pii : Stripe::PiiTokenSpecs?)
      if pii.nil?
        return @pii = nil
      end
      @pii = pii
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @bank_account, @card, @customer, @cvc_update, @expand, @person, @pii)
  end
end
