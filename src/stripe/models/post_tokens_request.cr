#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./connect_js_account_token_specs"
require "./cvc_params"
require "./person_token_specs"
require "./pii_token_specs"
require "./post_tokens_request_card"
require "./token_create_bank_account"

module Stripe
  class PostTokensRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "account", type: Stripe::ConnectJsAccountTokenSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account : Stripe::ConnectJsAccountTokenSpecs? = nil

    @[JSON::Field(key: "bank_account", type: Stripe::TokenCreateBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_account : Stripe::TokenCreateBankAccount? = nil

    @[JSON::Field(key: "card", type: Stripe::PostTokensRequestCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PostTokensRequestCard? = nil

    # Create a token for the customer, which is owned by the application's account. You can only use this with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). Learn more about [cloning saved payment methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil
    MAX_LENGTH_FOR_CUSTOMER = 5000

    @[JSON::Field(key: "cvc_update", type: Stripe::CvcParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cvc_update : Stripe::CvcParams? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    @[JSON::Field(key: "person", type: Stripe::PersonTokenSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter person : Stripe::PersonTokenSpecs? = nil

    @[JSON::Field(key: "pii", type: Stripe::PiiTokenSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pii : Stripe::PiiTokenSpecs? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account : Stripe::ConnectJsAccountTokenSpecs? = nil,
      @bank_account : Stripe::TokenCreateBankAccount? = nil,
      @card : Stripe::PostTokensRequestCard? = nil,
      @customer : String? = nil,
      @cvc_update : Stripe::CvcParams? = nil,
      @expand : Array(String)? = nil,
      @person : Stripe::PersonTokenSpecs? = nil,
      @pii : Stripe::PiiTokenSpecs? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account = @account).nil?
        invalid_properties.concat(_account.list_invalid_properties_for("account")) if _account.is_a?(OpenApi::Validatable)
      end
      unless (_bank_account = @bank_account).nil?
        invalid_properties.concat(_bank_account.list_invalid_properties_for("bank_account")) if _bank_account.is_a?(OpenApi::Validatable)
      end
      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      unless (_customer = @customer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_cvc_update = @cvc_update).nil?
        invalid_properties.concat(_cvc_update.list_invalid_properties_for("cvc_update")) if _cvc_update.is_a?(OpenApi::Validatable)
      end

      unless (_person = @person).nil?
        invalid_properties.concat(_person.list_invalid_properties_for("person")) if _person.is_a?(OpenApi::Validatable)
      end
      unless (_pii = @pii).nil?
        invalid_properties.concat(_pii.list_invalid_properties_for("pii")) if _pii.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account = @account).nil?
        return false if _account.is_a?(OpenApi::Validatable) && !_account.valid?
      end

      unless (_bank_account = @bank_account).nil?
        return false if _bank_account.is_a?(OpenApi::Validatable) && !_bank_account.valid?
      end

      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      unless (_customer = @customer).nil?
        return false if _customer.to_s.size > MAX_LENGTH_FOR_CUSTOMER
      end

      unless (_cvc_update = @cvc_update).nil?
        return false if _cvc_update.is_a?(OpenApi::Validatable) && !_cvc_update.valid?
      end

      unless (_person = @person).nil?
        return false if _person.is_a?(OpenApi::Validatable) && !_person.valid?
      end

      unless (_pii = @pii).nil?
        return false if _pii.is_a?(OpenApi::Validatable) && !_pii.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account Object to be assigned
    def account=(new_value : Stripe::ConnectJsAccountTokenSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_account Object to be assigned
    def bank_account=(new_value : Stripe::TokenCreateBankAccount?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bank_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : Stripe::PostTokensRequestCard?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc_update Object to be assigned
    def cvc_update=(new_value : Stripe::CvcParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cvc_update = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] person Object to be assigned
    def person=(new_value : Stripe::PersonTokenSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @person = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pii Object to be assigned
    def pii=(new_value : Stripe::PiiTokenSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pii = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @bank_account, @card, @customer, @cvc_update, @expand, @person, @pii)
  end
end
