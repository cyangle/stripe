#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostTreasuryOutboundPaymentsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Amount (in cents) to be transferred.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # The FinancialAccount to pull funds from.
    @[JSON::Field(key: "financial_account", type: String)]
    property financial_account : String

    # Optional properties

    # ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.
    @[JSON::Field(key: "customer", type: String?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.
    @[JSON::Field(key: "destination_payment_method", type: String?, presence: true, ignore_serialize: destination_payment_method.nil? && !destination_payment_method_present?)]
    getter destination_payment_method : String?

    @[JSON::Field(ignore: true)]
    property? destination_payment_method_present : Bool = false

    @[JSON::Field(key: "destination_payment_method_data", type: PaymentMethodData?, presence: true, ignore_serialize: destination_payment_method_data.nil? && !destination_payment_method_data_present?)]
    property destination_payment_method_data : PaymentMethodData?

    @[JSON::Field(ignore: true)]
    property? destination_payment_method_data_present : Bool = false

    @[JSON::Field(key: "destination_payment_method_options", type: PaymentMethodOptions2?, presence: true, ignore_serialize: destination_payment_method_options.nil? && !destination_payment_method_options_present?)]
    property destination_payment_method_options : PaymentMethodOptions2?

    @[JSON::Field(ignore: true)]
    property? destination_payment_method_options_present : Bool = false

    @[JSON::Field(key: "end_user_details", type: EndUserDetailsParams?, presence: true, ignore_serialize: end_user_details.nil? && !end_user_details_present?)]
    property end_user_details : EndUserDetailsParams?

    @[JSON::Field(ignore: true)]
    property? end_user_details_present : Bool = false

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `wire` payments, or 500 characters for `stripe` network transfers. The default value is `payment`.
    @[JSON::Field(key: "statement_descriptor", type: String?, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String?

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64,
      @currency : String,
      @financial_account : String,
      # Optional properties
      @customer : String? = nil,
      @description : String? = nil,
      @destination_payment_method : String? = nil,
      @destination_payment_method_data : PaymentMethodData? = nil,
      @destination_payment_method_options : PaymentMethodOptions2? = nil,
      @end_user_details : EndUserDetailsParams? = nil,
      @expand : Array(String)? = nil,
      @metadata : Hash(String, String)? = nil,
      @statement_descriptor : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@customer.nil? && @customer.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@destination_payment_method.nil? && @destination_payment_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"destination_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.nil? && @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer.nil? && @customer.to_s.size > 5000
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@destination_payment_method.nil? && @destination_payment_method.to_s.size > 5000
      return false if !@statement_descriptor.nil? && @statement_descriptor.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer Value to be assigned
    def customer=(customer : String?)
      if !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description : String?)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] destination_payment_method Value to be assigned
    def destination_payment_method=(destination_payment_method : String?)
      if !destination_payment_method.nil? && destination_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"destination_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @destination_payment_method = destination_payment_method
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if !statement_descriptor.nil? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @financial_account, @customer, @customer_present, @description, @description_present, @destination_payment_method, @destination_payment_method_present, @destination_payment_method_data, @destination_payment_method_data_present, @destination_payment_method_options, @destination_payment_method_options_present, @end_user_details, @end_user_details_present, @expand, @expand_present, @metadata, @metadata_present, @statement_descriptor, @statement_descriptor_present)
  end
end
