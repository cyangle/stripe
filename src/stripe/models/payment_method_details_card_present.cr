#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  class PaymentMethodDetailsCardPresent
    include NASON::Serializable

    # Required properties
    # Two-digit number representing the card's expiration month.
    @[NASON::Field(key: "exp_month", type: Int64)]
    property exp_month : Int64

    # Four-digit number representing the card's expiration year.
    @[NASON::Field(key: "exp_year", type: Int64)]
    property exp_year : Int64

    # Optional properties
    # The authorized amount
    @[NASON::Field(key: "amount_authorized", type: Int64? | Null, nillable: true)]
    property amount_authorized : Int64? | Null

    # Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    @[NASON::Field(key: "brand", type: String? | Null, nillable: true)]
    property brand : String? | Null

    # The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
    @[NASON::Field(key: "cardholder_name", type: String? | Null, nillable: true)]
    property cardholder_name : String? | Null

    # Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    @[NASON::Field(key: "country", type: String? | Null, nillable: true)]
    property country : String? | Null

    # Authorization response cryptogram.
    @[NASON::Field(key: "emv_auth_data", type: String? | Null, nillable: true)]
    property emv_auth_data : String? | Null

    # Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    @[NASON::Field(key: "fingerprint", type: String? | Null, nillable: true)]
    property fingerprint : String? | Null

    # Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    @[NASON::Field(key: "funding", type: String? | Null, nillable: true)]
    property funding : String? | Null

    # ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
    @[NASON::Field(key: "generated_card", type: String? | Null, nillable: true)]
    property generated_card : String? | Null

    # The last four digits of the card.
    @[NASON::Field(key: "last4", type: String? | Null, nillable: true)]
    property last4 : String? | Null

    # Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    @[NASON::Field(key: "network", type: String? | Null, nillable: true)]
    property network : String? | Null

    # Defines whether the authorized amount can be over-captured or not
    @[NASON::Field(key: "overcapture_supported", type: Bool? | Null, nillable: true)]
    property overcapture_supported : Bool? | Null

    # How card details were read in this transaction.
    @[NASON::Field(key: "read_method", type: String? | Null, nillable: true)]
    property read_method : String? | Null

    # A collection of fields required to be displayed on receipts. Only required for EMV transactions.
    @[NASON::Field(key: "receipt", type: PaymentMethodDetailsCardPresentReceipt? | Null, nillable: true)]
    property receipt : PaymentMethodDetailsCardPresentReceipt? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @exp_month : Int64, @exp_year : Int64, @amount_authorized : Int64? | Null = nil, @brand : String? | Null = nil, @cardholder_name : String? | Null = nil, @country : String? | Null = nil, @emv_auth_data : String? | Null = nil, @fingerprint : String? | Null = nil, @funding : String? | Null = nil, @generated_card : String? | Null = nil, @last4 : String? | Null = nil, @network : String? | Null = nil, @overcapture_supported : Bool? | Null = nil, @read_method : String? | Null = nil, @receipt : PaymentMethodDetailsCardPresentReceipt? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@brand.nil? && !@brand.null? && @brand.to_s.size > 5000
        invalid_properties.push("invalid value for \"brand\", the character length must be smaller than or equal to 5000.")
      end

      if !@cardholder_name.nil? && !@cardholder_name.null? && @cardholder_name.to_s.size > 5000
        invalid_properties.push("invalid value for \"cardholder_name\", the character length must be smaller than or equal to 5000.")
      end

      if !@country.nil? && !@country.null? && @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if !@emv_auth_data.nil? && !@emv_auth_data.null? && @emv_auth_data.to_s.size > 5000
        invalid_properties.push("invalid value for \"emv_auth_data\", the character length must be smaller than or equal to 5000.")
      end

      if !@fingerprint.nil? && !@fingerprint.null? && @fingerprint.to_s.size > 5000
        invalid_properties.push("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      if !@funding.nil? && !@funding.null? && @funding.to_s.size > 5000
        invalid_properties.push("invalid value for \"funding\", the character length must be smaller than or equal to 5000.")
      end

      if !@generated_card.nil? && !@generated_card.null? && @generated_card.to_s.size > 5000
        invalid_properties.push("invalid value for \"generated_card\", the character length must be smaller than or equal to 5000.")
      end

      if !@last4.nil? && !@last4.null? && @last4.to_s.size > 5000
        invalid_properties.push("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      if !@network.nil? && !@network.null? && @network.to_s.size > 5000
        invalid_properties.push("invalid value for \"network\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@brand.nil? && !@brand.null? && @brand.to_s.size > 5000
      return false if !@cardholder_name.nil? && !@cardholder_name.null? && @cardholder_name.to_s.size > 5000
      return false if !@country.nil? && !@country.null? && @country.to_s.size > 5000
      return false if !@emv_auth_data.nil? && !@emv_auth_data.null? && @emv_auth_data.to_s.size > 5000
      return false if !@fingerprint.nil? && !@fingerprint.null? && @fingerprint.to_s.size > 5000
      return false if !@funding.nil? && !@funding.null? && @funding.to_s.size > 5000
      return false if !@generated_card.nil? && !@generated_card.null? && @generated_card.to_s.size > 5000
      return false if !@last4.nil? && !@last4.null? && @last4.to_s.size > 5000
      return false if !@network.nil? && !@network.null? && @network.to_s.size > 5000
      read_method_validator = EnumAttributeValidator.new("String", ["contact_emv", "contactless_emv", "contactless_magstripe_mode", "magnetic_stripe_fallback", "magnetic_stripe_track2"])
      return false unless read_method_validator.valid?(@read_method)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] brand Value to be assigned
    def brand=(brand)
      if !brand.nil? && !@brand.null? && brand.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"brand\", the character length must be smaller than or equal to 5000.")
      end

      @brand = brand
    end

    # Custom attribute writer method with validation
    # @param [Object] cardholder_name Value to be assigned
    def cardholder_name=(cardholder_name)
      if !cardholder_name.nil? && !@cardholder_name.null? && cardholder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder_name\", the character length must be smaller than or equal to 5000.")
      end

      @cardholder_name = cardholder_name
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && !@country.null? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] emv_auth_data Value to be assigned
    def emv_auth_data=(emv_auth_data)
      if !emv_auth_data.nil? && !@emv_auth_data.null? && emv_auth_data.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"emv_auth_data\", the character length must be smaller than or equal to 5000.")
      end

      @emv_auth_data = emv_auth_data
    end

    # Custom attribute writer method with validation
    # @param [Object] fingerprint Value to be assigned
    def fingerprint=(fingerprint)
      if !fingerprint.nil? && !@fingerprint.null? && fingerprint.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      @fingerprint = fingerprint
    end

    # Custom attribute writer method with validation
    # @param [Object] funding Value to be assigned
    def funding=(funding)
      if !funding.nil? && !@funding.null? && funding.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"funding\", the character length must be smaller than or equal to 5000.")
      end

      @funding = funding
    end

    # Custom attribute writer method with validation
    # @param [Object] generated_card Value to be assigned
    def generated_card=(generated_card)
      if !generated_card.nil? && !@generated_card.null? && generated_card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"generated_card\", the character length must be smaller than or equal to 5000.")
      end

      @generated_card = generated_card
    end

    # Custom attribute writer method with validation
    # @param [Object] last4 Value to be assigned
    def last4=(last4)
      if !last4.nil? && !@last4.null? && last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      @last4 = last4
    end

    # Custom attribute writer method with validation
    # @param [Object] network Value to be assigned
    def network=(network)
      if !network.nil? && !@network.null? && network.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network\", the character length must be smaller than or equal to 5000.")
      end

      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] read_method Object to be assigned
    def read_method=(read_method)
      validator = EnumAttributeValidator.new("String", ["contact_emv", "contactless_emv", "contactless_magstripe_mode", "magnetic_stripe_fallback", "magnetic_stripe_track2"])
      unless validator.valid?(read_method)
        raise ArgumentError.new("invalid value for \"read_method\", must be one of #{validator.allowable_values}.")
      end
      @read_method = read_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount_authorized == o.amount_authorized &&
        brand == o.brand &&
        cardholder_name == o.cardholder_name &&
        country == o.country &&
        emv_auth_data == o.emv_auth_data &&
        exp_month == o.exp_month &&
        exp_year == o.exp_year &&
        fingerprint == o.fingerprint &&
        funding == o.funding &&
        generated_card == o.generated_card &&
        last4 == o.last4 &&
        network == o.network &&
        overcapture_supported == o.overcapture_supported &&
        read_method == o.read_method &&
        receipt == o.receipt
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount_authorized, brand, cardholder_name, country, emv_auth_data, exp_month, exp_year, fingerprint, funding, generated_card, last4, network, overcapture_supported, read_method, receipt].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
