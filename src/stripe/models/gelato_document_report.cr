#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./address"
require "./gelato_data_document_report_date_of_birth"
require "./gelato_data_document_report_expiration_date"
require "./gelato_data_document_report_issued_date"
require "./gelato_document_report_error"

module Stripe
  # Result from a document check
  class GelatoDocumentReport
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "address", type: Stripe::Address?, default: nil, required: true, nullable: true, emit_null: true)]
    getter address : Stripe::Address? = nil

    @[JSON::Field(key: "error", type: Stripe::GelatoDocumentReportError?, default: nil, required: true, nullable: true, emit_null: true)]
    getter error : Stripe::GelatoDocumentReportError? = nil

    # Array of [File](https://stripe.com/docs/api/files) ids containing images for this document.
    @[JSON::Field(key: "files", type: Array(String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter files : Array(String)? = nil

    # First name as it appears in the document.
    @[JSON::Field(key: "first_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter first_name : String? = nil
    MAX_LENGTH_FOR_FIRST_NAME = 5000

    @[JSON::Field(key: "issued_date", type: Stripe::GelatoDataDocumentReportIssuedDate?, default: nil, required: true, nullable: true, emit_null: true)]
    getter issued_date : Stripe::GelatoDataDocumentReportIssuedDate? = nil

    # Issuing country of the document.
    @[JSON::Field(key: "issuing_country", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter issuing_country : String? = nil
    MAX_LENGTH_FOR_ISSUING_COUNTRY = 5000

    # Last name as it appears in the document.
    @[JSON::Field(key: "last_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter last_name : String? = nil
    MAX_LENGTH_FOR_LAST_NAME = 5000

    # Status of this `document` check.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [unverified, verified]."
    VALID_VALUES_FOR_STATUS  = String.static_array("unverified", "verified")

    # Type of the document.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [driving_license, id_card, passport]."
    VALID_VALUES_FOR__TYPE  = String.static_array("driving_license", "id_card", "passport")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "dob", type: Stripe::GelatoDataDocumentReportDateOfBirth?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: dob.nil? && !dob_present?)]
    getter dob : Stripe::GelatoDataDocumentReportDateOfBirth? = nil

    @[JSON::Field(ignore: true)]
    property? dob_present : Bool = false

    @[JSON::Field(key: "expiration_date", type: Stripe::GelatoDataDocumentReportExpirationDate?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: expiration_date.nil? && !expiration_date_present?)]
    getter expiration_date : Stripe::GelatoDataDocumentReportExpirationDate? = nil

    @[JSON::Field(ignore: true)]
    property? expiration_date_present : Bool = false

    # Document ID number.
    @[JSON::Field(key: "number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: number.nil? && !number_present?)]
    getter number : String? = nil
    MAX_LENGTH_FOR_NUMBER = 5000

    @[JSON::Field(ignore: true)]
    property? number_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @address : Stripe::Address? = nil,
      @error : Stripe::GelatoDocumentReportError? = nil,
      @files : Array(String)? = nil,
      @first_name : String? = nil,
      @issued_date : Stripe::GelatoDataDocumentReportIssuedDate? = nil,
      @issuing_country : String? = nil,
      @last_name : String? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @dob : Stripe::GelatoDataDocumentReportDateOfBirth? = nil,
      @expiration_date : Stripe::GelatoDataDocumentReportExpirationDate? = nil,
      @number : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_address = @address).nil?
        invalid_properties.concat(_address.list_invalid_properties_for("address")) if _address.is_a?(OpenApi::Validatable)
      end
      unless (_error = @error).nil?
        invalid_properties.concat(_error.list_invalid_properties_for("error")) if _error.is_a?(OpenApi::Validatable)
      end

      unless (_first_name = @first_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("first_name", _first_name.to_s.size, MAX_LENGTH_FOR_FIRST_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_issued_date = @issued_date).nil?
        invalid_properties.concat(_issued_date.list_invalid_properties_for("issued_date")) if _issued_date.is_a?(OpenApi::Validatable)
      end
      unless (_issuing_country = @issuing_country).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("issuing_country", _issuing_country.to_s.size, MAX_LENGTH_FOR_ISSUING_COUNTRY)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_last_name = @last_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("last_name", _last_name.to_s.size, MAX_LENGTH_FOR_LAST_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_dob = @dob).nil?
        invalid_properties.concat(_dob.list_invalid_properties_for("dob")) if _dob.is_a?(OpenApi::Validatable)
      end
      unless (_expiration_date = @expiration_date).nil?
        invalid_properties.concat(_expiration_date.list_invalid_properties_for("expiration_date")) if _expiration_date.is_a?(OpenApi::Validatable)
      end
      unless (_number = @number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("number", _number.to_s.size, MAX_LENGTH_FOR_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_address = @address).nil?
        return false if _address.is_a?(OpenApi::Validatable) && !_address.valid?
      end

      unless (_error = @error).nil?
        return false if _error.is_a?(OpenApi::Validatable) && !_error.valid?
      end

      unless (_first_name = @first_name).nil?
        return false if _first_name.to_s.size > MAX_LENGTH_FOR_FIRST_NAME
      end

      unless (_issued_date = @issued_date).nil?
        return false if _issued_date.is_a?(OpenApi::Validatable) && !_issued_date.valid?
      end

      unless (_issuing_country = @issuing_country).nil?
        return false if _issuing_country.to_s.size > MAX_LENGTH_FOR_ISSUING_COUNTRY
      end

      unless (_last_name = @last_name).nil?
        return false if _last_name.to_s.size > MAX_LENGTH_FOR_LAST_NAME
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_dob = @dob).nil?
        return false if _dob.is_a?(OpenApi::Validatable) && !_dob.valid?
      end

      unless (_expiration_date = @expiration_date).nil?
        return false if _expiration_date.is_a?(OpenApi::Validatable) && !_expiration_date.valid?
      end

      unless (_number = @number).nil?
        return false if _number.to_s.size > MAX_LENGTH_FOR_NUMBER
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : Stripe::Address?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error Object to be assigned
    def error=(new_value : Stripe::GelatoDocumentReportError?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @error = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] files Object to be assigned
    def files=(new_value : Array(String)?)
      @files = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("first_name", new_value.to_s.size, MAX_LENGTH_FOR_FIRST_NAME)
      end

      @first_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issued_date Object to be assigned
    def issued_date=(new_value : Stripe::GelatoDataDocumentReportIssuedDate?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @issued_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuing_country Object to be assigned
    def issuing_country=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("issuing_country", new_value.to_s.size, MAX_LENGTH_FOR_ISSUING_COUNTRY)
      end

      @issuing_country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("last_name", new_value.to_s.size, MAX_LENGTH_FOR_LAST_NAME)
      end

      @last_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dob Object to be assigned
    def dob=(new_value : Stripe::GelatoDataDocumentReportDateOfBirth?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @dob = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expiration_date Object to be assigned
    def expiration_date=(new_value : Stripe::GelatoDataDocumentReportExpirationDate?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @expiration_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number Object to be assigned
    def number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("number", new_value.to_s.size, MAX_LENGTH_FOR_NUMBER)
      end

      @number = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address, @error, @files, @first_name, @issued_date, @issuing_country, @last_name, @status, @_type, @dob, @dob_present, @expiration_date, @expiration_date_present, @number, @number_present)
  end
end
