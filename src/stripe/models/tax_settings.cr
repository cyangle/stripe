#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./tax_product_resource_tax_settings_defaults"
require "./tax_product_resource_tax_settings_status_details"
require "./tax_settings_head_office"

module Stripe
  # You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.  Related guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)
  class TaxSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "defaults", type: Stripe::TaxProductResourceTaxSettingsDefaults?, default: nil, required: true, nullable: false, emit_null: false)]
    getter defaults : Stripe::TaxProductResourceTaxSettingsDefaults? = nil

    @[JSON::Field(key: "head_office", type: Stripe::TaxSettingsHeadOffice?, default: nil, required: true, nullable: true, emit_null: true)]
    getter head_office : Stripe::TaxSettingsHeadOffice? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [tax.settings]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("tax.settings")

    # The `active` status indicates you have all required settings to calculate tax. A status can transition out of `active` when new required settings are introduced.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, pending]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "pending")

    @[JSON::Field(key: "status_details", type: Stripe::TaxProductResourceTaxSettingsStatusDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status_details : Stripe::TaxProductResourceTaxSettingsStatusDetails? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @defaults : Stripe::TaxProductResourceTaxSettingsDefaults? = nil,
      @head_office : Stripe::TaxSettingsHeadOffice? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @status_details : Stripe::TaxProductResourceTaxSettingsStatusDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"defaults\" is required and cannot be null") if @defaults.nil?

      unless (_defaults = @defaults).nil?
        invalid_properties.concat(_defaults.list_invalid_properties_for("defaults")) if _defaults.is_a?(OpenApi::Validatable)
      end
      unless (_head_office = @head_office).nil?
        invalid_properties.concat(_head_office.list_invalid_properties_for("head_office")) if _head_office.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"status_details\" is required and cannot be null") if @status_details.nil?

      unless (_status_details = @status_details).nil?
        invalid_properties.concat(_status_details.list_invalid_properties_for("status_details")) if _status_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @defaults.nil?
      unless (_defaults = @defaults).nil?
        return false if _defaults.is_a?(OpenApi::Validatable) && !_defaults.valid?
      end

      unless (_head_office = @head_office).nil?
        return false if _head_office.is_a?(OpenApi::Validatable) && !_head_office.valid?
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @status_details.nil?
      unless (_status_details = @status_details).nil?
        return false if _status_details.is_a?(OpenApi::Validatable) && !_status_details.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] defaults Object to be assigned
    def defaults=(new_value : Stripe::TaxProductResourceTaxSettingsDefaults?)
      raise ArgumentError.new("\"defaults\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @defaults = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] head_office Object to be assigned
    def head_office=(new_value : Stripe::TaxSettingsHeadOffice?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @head_office = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_details Object to be assigned
    def status_details=(new_value : Stripe::TaxProductResourceTaxSettingsStatusDetails?)
      raise ArgumentError.new("\"status_details\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @status_details = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@defaults, @head_office, @livemode, @object, @status, @status_details)
  end
end
