#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./funding_instructions_bank_transfer_aba_record"
require "./funding_instructions_bank_transfer_iban_record"
require "./funding_instructions_bank_transfer_sort_code_record"
require "./funding_instructions_bank_transfer_spei_record"
require "./funding_instructions_bank_transfer_swift_record"
require "./funding_instructions_bank_transfer_zengin_record"

module Stripe
  # FinancialAddresses contain identifying information that resolves to a FinancialAccount.
  class FundingInstructionsBankTransferFinancialAddress
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The type of financial address
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [aba, iban, sort_code, spei, swift, zengin]."
    VALID_VALUES_FOR__TYPE  = String.static_array("aba", "iban", "sort_code", "spei", "swift", "zengin")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "aba", type: Stripe::FundingInstructionsBankTransferAbaRecord?, default: nil, required: false, nullable: false, emit_null: false)]
    getter aba : Stripe::FundingInstructionsBankTransferAbaRecord? = nil

    @[JSON::Field(key: "iban", type: Stripe::FundingInstructionsBankTransferIbanRecord?, default: nil, required: false, nullable: false, emit_null: false)]
    getter iban : Stripe::FundingInstructionsBankTransferIbanRecord? = nil

    @[JSON::Field(key: "sort_code", type: Stripe::FundingInstructionsBankTransferSortCodeRecord?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sort_code : Stripe::FundingInstructionsBankTransferSortCodeRecord? = nil

    @[JSON::Field(key: "spei", type: Stripe::FundingInstructionsBankTransferSpeiRecord?, default: nil, required: false, nullable: false, emit_null: false)]
    getter spei : Stripe::FundingInstructionsBankTransferSpeiRecord? = nil

    # The payment networks supported by this FinancialAddress
    @[JSON::Field(key: "supported_networks", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter supported_networks : Array(String)? = nil
    ERROR_MESSAGE_FOR_SUPPORTED_NETWORKS = "invalid value for \"supported_networks\", must be one of [ach, bacs, domestic_wire_us, fps, sepa, spei, swift, zengin]."
    VALID_VALUES_FOR_SUPPORTED_NETWORKS  = String.static_array("ach", "bacs", "domestic_wire_us", "fps", "sepa", "spei", "swift", "zengin")

    @[JSON::Field(key: "swift", type: Stripe::FundingInstructionsBankTransferSwiftRecord?, default: nil, required: false, nullable: false, emit_null: false)]
    getter swift : Stripe::FundingInstructionsBankTransferSwiftRecord? = nil

    @[JSON::Field(key: "zengin", type: Stripe::FundingInstructionsBankTransferZenginRecord?, default: nil, required: false, nullable: false, emit_null: false)]
    getter zengin : Stripe::FundingInstructionsBankTransferZenginRecord? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @aba : Stripe::FundingInstructionsBankTransferAbaRecord? = nil,
      @iban : Stripe::FundingInstructionsBankTransferIbanRecord? = nil,
      @sort_code : Stripe::FundingInstructionsBankTransferSortCodeRecord? = nil,
      @spei : Stripe::FundingInstructionsBankTransferSpeiRecord? = nil,
      @supported_networks : Array(String)? = nil,
      @swift : Stripe::FundingInstructionsBankTransferSwiftRecord? = nil,
      @zengin : Stripe::FundingInstructionsBankTransferZenginRecord? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_aba = @aba).nil?
        invalid_properties.concat(_aba.list_invalid_properties_for("aba")) if _aba.is_a?(OpenApi::Validatable)
      end
      unless (_iban = @iban).nil?
        invalid_properties.concat(_iban.list_invalid_properties_for("iban")) if _iban.is_a?(OpenApi::Validatable)
      end
      unless (_sort_code = @sort_code).nil?
        invalid_properties.concat(_sort_code.list_invalid_properties_for("sort_code")) if _sort_code.is_a?(OpenApi::Validatable)
      end
      unless (_spei = @spei).nil?
        invalid_properties.concat(_spei.list_invalid_properties_for("spei")) if _spei.is_a?(OpenApi::Validatable)
      end
      unless (_supported_networks = @supported_networks).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SUPPORTED_NETWORKS) unless OpenApi::EnumValidator.valid?(_supported_networks, VALID_VALUES_FOR_SUPPORTED_NETWORKS)
      end
      unless (_swift = @swift).nil?
        invalid_properties.concat(_swift.list_invalid_properties_for("swift")) if _swift.is_a?(OpenApi::Validatable)
      end
      unless (_zengin = @zengin).nil?
        invalid_properties.concat(_zengin.list_invalid_properties_for("zengin")) if _zengin.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_aba = @aba).nil?
        return false if _aba.is_a?(OpenApi::Validatable) && !_aba.valid?
      end

      unless (_iban = @iban).nil?
        return false if _iban.is_a?(OpenApi::Validatable) && !_iban.valid?
      end

      unless (_sort_code = @sort_code).nil?
        return false if _sort_code.is_a?(OpenApi::Validatable) && !_sort_code.valid?
      end

      unless (_spei = @spei).nil?
        return false if _spei.is_a?(OpenApi::Validatable) && !_spei.valid?
      end

      unless (_supported_networks = @supported_networks).nil?
        return false unless OpenApi::EnumValidator.valid?(_supported_networks, VALID_VALUES_FOR_SUPPORTED_NETWORKS)
      end

      unless (_swift = @swift).nil?
        return false if _swift.is_a?(OpenApi::Validatable) && !_swift.valid?
      end

      unless (_zengin = @zengin).nil?
        return false if _zengin.is_a?(OpenApi::Validatable) && !_zengin.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aba Object to be assigned
    def aba=(new_value : Stripe::FundingInstructionsBankTransferAbaRecord?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @aba = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iban Object to be assigned
    def iban=(new_value : Stripe::FundingInstructionsBankTransferIbanRecord?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @iban = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort_code Object to be assigned
    def sort_code=(new_value : Stripe::FundingInstructionsBankTransferSortCodeRecord?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sort_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] spei Object to be assigned
    def spei=(new_value : Stripe::FundingInstructionsBankTransferSpeiRecord?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @spei = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supported_networks Object to be assigned
    def supported_networks=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("supported_networks", new_value, VALID_VALUES_FOR_SUPPORTED_NETWORKS)
      end

      @supported_networks = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swift Object to be assigned
    def swift=(new_value : Stripe::FundingInstructionsBankTransferSwiftRecord?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @swift = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] zengin Object to be assigned
    def zengin=(new_value : Stripe::FundingInstructionsBankTransferZenginRecord?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @zengin = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @aba, @iban, @sort_code, @spei, @supported_networks, @swift, @zengin)
  end
end
