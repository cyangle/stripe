#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentMethodDetailsCardInstallmentsPlan
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Type of installment plan, one of `fixed_count`.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["fixed_count"])

    # Optional properties

    # For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
    @[JSON::Field(key: "count", type: Int64?, presence: true, ignore_serialize: count.nil? && !count_present?)]
    property count : Int64?

    @[JSON::Field(ignore: true)]
    property? count_present : Bool = false

    # For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card. One of `month`.
    @[JSON::Field(key: "interval", type: String?, presence: true, ignore_serialize: interval.nil? && !interval_present?)]
    getter interval : String?

    @[JSON::Field(ignore: true)]
    property? interval_present : Bool = false

    ENUM_VALIDATOR_FOR_INTERVAL = EnumValidator.new("interval", "String", ["month"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String,
      # Optional properties
      @count : Int64? = nil,
      @interval : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_INTERVAL.error_message) unless ENUM_VALIDATOR_FOR_INTERVAL.valid?(@interval)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      return false unless ENUM_VALIDATOR_FOR_INTERVAL.valid?(@interval)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interval Object to be assigned
    def interval=(interval : String?)
      ENUM_VALIDATOR_FOR_INTERVAL.valid!(interval)
      @interval = interval
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @count, @count_present, @interval, @interval_present)
  end
end
