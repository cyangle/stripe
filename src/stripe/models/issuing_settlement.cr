#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
  class IssuingSettlement
    include NASON::Serializable

    # Required properties
    # The Bank Identification Number reflecting this settlement record.
    @[NASON::Field(key: "bin", type: String)]
    property bin : String

    # The date that the transactions are cleared and posted to user's accounts.
    @[NASON::Field(key: "clearing_date", type: Int64)]
    property clearing_date : Int64

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # The total interchange received as reimbursement for the transactions.
    @[NASON::Field(key: "interchange_fees", type: Int64)]
    property interchange_fees : Int64

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # The total net amount required to settle with the network.
    @[NASON::Field(key: "net_total", type: Int64)]
    property net_total : Int64

    # The card network for this settlement report. One of [\"visa\"]
    @[NASON::Field(key: "network", type: String)]
    property network : String

    # The total amount of fees owed to the network.
    @[NASON::Field(key: "network_fees", type: Int64)]
    property network_fees : Int64

    # The Settlement Identification Number assigned by the network.
    @[NASON::Field(key: "network_settlement_identifier", type: String)]
    property network_settlement_identifier : String

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # One of `international` or `uk_national_net`.
    @[NASON::Field(key: "settlement_service", type: String)]
    property settlement_service : String

    # The total number of transactions reflected in this settlement.
    @[NASON::Field(key: "transaction_count", type: Int64)]
    property transaction_count : Int64

    # The total transaction amount reflected in this settlement.
    @[NASON::Field(key: "transaction_volume", type: Int64)]
    property transaction_volume : Int64

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @bin : String, @clearing_date : Int64, @created : Int64, @currency : String, @id : String, @interchange_fees : Int64, @livemode : Bool, @metadata : Hash(String, String), @net_total : Int64, @network : String, @network_fees : Int64, @network_settlement_identifier : String, @object : String, @settlement_service : String, @transaction_count : Int64, @transaction_volume : Int64)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @bin.to_s.size > 5000
        invalid_properties.push("invalid value for \"bin\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if @network_settlement_identifier.to_s.size > 5000
        invalid_properties.push("invalid value for \"network_settlement_identifier\", the character length must be smaller than or equal to 5000.")
      end

      if @settlement_service.to_s.size > 5000
        invalid_properties.push("invalid value for \"settlement_service\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @bin.to_s.size > 5000
      return false if @id.to_s.size > 5000
      network_validator = EnumAttributeValidator.new("String", ["visa"])
      return false unless network_validator.valid?(@network)
      return false if @network_settlement_identifier.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["issuing.settlement"])
      return false unless object_validator.valid?(@object)
      return false if @settlement_service.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] bin Value to be assigned
    def bin=(bin)
      if bin.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"bin\", the character length must be smaller than or equal to 5000.")
      end

      @bin = bin
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network)
      validator = EnumAttributeValidator.new("String", ["visa"])
      unless validator.valid?(network)
        raise ArgumentError.new("invalid value for \"network\", must be one of #{validator.allowable_values}.")
      end
      @network = network
    end

    # Custom attribute writer method with validation
    # @param [Object] network_settlement_identifier Value to be assigned
    def network_settlement_identifier=(network_settlement_identifier)
      if network_settlement_identifier.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network_settlement_identifier\", the character length must be smaller than or equal to 5000.")
      end

      @network_settlement_identifier = network_settlement_identifier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["issuing.settlement"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] settlement_service Value to be assigned
    def settlement_service=(settlement_service)
      if settlement_service.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"settlement_service\", the character length must be smaller than or equal to 5000.")
      end

      @settlement_service = settlement_service
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        bin == o.bin &&
        clearing_date == o.clearing_date &&
        created == o.created &&
        currency == o.currency &&
        id == o.id &&
        interchange_fees == o.interchange_fees &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        net_total == o.net_total &&
        network == o.network &&
        network_fees == o.network_fees &&
        network_settlement_identifier == o.network_settlement_identifier &&
        object == o.object &&
        settlement_service == o.settlement_service &&
        transaction_count == o.transaction_count &&
        transaction_volume == o.transaction_volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bin, clearing_date, created, currency, id, interchange_fees, livemode, metadata, net_total, network, network_fees, network_settlement_identifier, object, settlement_service, transaction_count, transaction_volume].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
