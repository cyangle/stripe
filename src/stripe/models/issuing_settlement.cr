#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
  class IssuingSettlement
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The Bank Identification Number reflecting this settlement record.
    @[JSON::Field(key: "bin", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bin : String? = nil

    # The date that the transactions are cleared and posted to user's accounts.
    @[JSON::Field(key: "clearing_date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter clearing_date : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The total interchange received as reimbursement for the transactions.
    @[JSON::Field(key: "interchange_fees", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter interchange_fees : Int64? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The total net amount required to settle with the network.
    @[JSON::Field(key: "net_total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter net_total : Int64? = nil

    # The card network for this settlement report. One of [\"visa\"]
    @[JSON::Field(key: "network", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network : String? = nil

    ENUM_VALIDATOR_FOR_NETWORK = EnumValidator.new("network", "String", ["visa"])

    # The total amount of fees owed to the network.
    @[JSON::Field(key: "network_fees", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network_fees : Int64? = nil

    # The Settlement Identification Number assigned by the network.
    @[JSON::Field(key: "network_settlement_identifier", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network_settlement_identifier : String? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["issuing.settlement"])

    # One of `international` or `uk_national_net`.
    @[JSON::Field(key: "settlement_service", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter settlement_service : String? = nil

    # The total number of transactions reflected in this settlement.
    @[JSON::Field(key: "transaction_count", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction_count : Int64? = nil

    # The total transaction amount reflected in this settlement.
    @[JSON::Field(key: "transaction_volume", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction_volume : Int64? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @bin : String? = nil,
      @clearing_date : Int64? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @id : String? = nil,
      @interchange_fees : Int64? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @net_total : Int64? = nil,
      @network : String? = nil,
      @network_fees : Int64? = nil,
      @network_settlement_identifier : String? = nil,
      @object : String? = nil,
      @settlement_service : String? = nil,
      @transaction_count : Int64? = nil,
      @transaction_volume : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"bin\" is required and cannot be null") if @bin.nil?
      if _bin = @bin
        if _bin.to_s.size > 5000
          invalid_properties.push("invalid value for \"bin\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"clearing_date\" is required and cannot be null") if @clearing_date.nil?
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"interchange_fees\" is required and cannot be null") if @interchange_fees.nil?
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?
      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?
      invalid_properties.push("\"net_total\" is required and cannot be null") if @net_total.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_NETWORK.error_message) unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network, false)
      invalid_properties.push("\"network_fees\" is required and cannot be null") if @network_fees.nil?
      invalid_properties.push("\"network_settlement_identifier\" is required and cannot be null") if @network_settlement_identifier.nil?
      if _network_settlement_identifier = @network_settlement_identifier
        if _network_settlement_identifier.to_s.size > 5000
          invalid_properties.push("invalid value for \"network_settlement_identifier\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"settlement_service\" is required and cannot be null") if @settlement_service.nil?
      if _settlement_service = @settlement_service
        if _settlement_service.to_s.size > 5000
          invalid_properties.push("invalid value for \"settlement_service\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"transaction_count\" is required and cannot be null") if @transaction_count.nil?
      invalid_properties.push("\"transaction_volume\" is required and cannot be null") if @transaction_volume.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @bin.nil?
      if _bin = @bin
        return false if _bin.to_s.size > 5000
      end
      return false if @clearing_date.nil?
      return false if @created.nil?
      return false if @currency.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @interchange_fees.nil?
      return false if @livemode.nil?
      return false if @metadata.nil?
      return false if @net_total.nil?
      return false unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network, false)
      return false if @network_fees.nil?
      return false if @network_settlement_identifier.nil?
      if _network_settlement_identifier = @network_settlement_identifier
        return false if _network_settlement_identifier.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @settlement_service.nil?
      if _settlement_service = @settlement_service
        return false if _settlement_service.to_s.size > 5000
      end
      return false if @transaction_count.nil?
      return false if @transaction_volume.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bin Object to be assigned
    def bin=(bin : String?)
      if bin.nil?
        raise ArgumentError.new("\"bin\" is required and cannot be null")
      end
      _bin = bin.not_nil!
      if _bin.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"bin\", the character length must be smaller than or equal to 5000.")
      end

      @bin = bin
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] clearing_date Object to be assigned
    def clearing_date=(clearing_date : Int64?)
      if clearing_date.nil?
        raise ArgumentError.new("\"clearing_date\" is required and cannot be null")
      end
      @clearing_date = clearing_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interchange_fees Object to be assigned
    def interchange_fees=(interchange_fees : Int64?)
      if interchange_fees.nil?
        raise ArgumentError.new("\"interchange_fees\" is required and cannot be null")
      end
      @interchange_fees = interchange_fees
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] net_total Object to be assigned
    def net_total=(net_total : Int64?)
      if net_total.nil?
        raise ArgumentError.new("\"net_total\" is required and cannot be null")
      end
      @net_total = net_total
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network : String?)
      if network.nil?
        raise ArgumentError.new("\"network\" is required and cannot be null")
      end
      _network = network.not_nil!
      ENUM_VALIDATOR_FOR_NETWORK.valid!(_network)
      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_fees Object to be assigned
    def network_fees=(network_fees : Int64?)
      if network_fees.nil?
        raise ArgumentError.new("\"network_fees\" is required and cannot be null")
      end
      @network_fees = network_fees
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_settlement_identifier Object to be assigned
    def network_settlement_identifier=(network_settlement_identifier : String?)
      if network_settlement_identifier.nil?
        raise ArgumentError.new("\"network_settlement_identifier\" is required and cannot be null")
      end
      _network_settlement_identifier = network_settlement_identifier.not_nil!
      if _network_settlement_identifier.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network_settlement_identifier\", the character length must be smaller than or equal to 5000.")
      end

      @network_settlement_identifier = network_settlement_identifier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] settlement_service Object to be assigned
    def settlement_service=(settlement_service : String?)
      if settlement_service.nil?
        raise ArgumentError.new("\"settlement_service\" is required and cannot be null")
      end
      _settlement_service = settlement_service.not_nil!
      if _settlement_service.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"settlement_service\", the character length must be smaller than or equal to 5000.")
      end

      @settlement_service = settlement_service
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_count Object to be assigned
    def transaction_count=(transaction_count : Int64?)
      if transaction_count.nil?
        raise ArgumentError.new("\"transaction_count\" is required and cannot be null")
      end
      @transaction_count = transaction_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_volume Object to be assigned
    def transaction_volume=(transaction_volume : Int64?)
      if transaction_volume.nil?
        raise ArgumentError.new("\"transaction_volume\" is required and cannot be null")
      end
      @transaction_volume = transaction_volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bin, @clearing_date, @created, @currency, @id, @interchange_fees, @livemode, @metadata, @net_total, @network, @network_fees, @network_settlement_identifier, @object, @settlement_service, @transaction_count, @transaction_volume)
  end
end
