#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Sometimes you want to add a charge or credit to a customer, but actually charge or credit the customer's card only at the end of a regular billing cycle. This is useful for combining several charges (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.  Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Invoiceitem
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    @[JSON::Field(key: "customer", type: InvoiceitemCustomer)]
    property customer : InvoiceitemCustomer

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "date", type: Int64)]
    property date : Int64

    # If true, discounts will apply to this invoice item. Always false for prorations.
    @[JSON::Field(key: "discountable", type: Bool)]
    property discountable : Bool

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["invoiceitem"])

    @[JSON::Field(key: "period", type: InvoiceLineItemPeriod)]
    property period : InvoiceLineItemPeriod

    # Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
    @[JSON::Field(key: "proration", type: Bool)]
    property proration : Bool

    # Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
    @[JSON::Field(key: "quantity", type: Int64)]
    property quantity : Int64

    # Optional properties

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    @[JSON::Field(key: "discounts", type: Array(InvoiceitemDiscountsInner)?, presence: true, ignore_serialize: discounts.nil? && !discounts_present?)]
    property discounts : Array(InvoiceitemDiscountsInner)?

    @[JSON::Field(ignore: true)]
    property? discounts_present : Bool = false

    @[JSON::Field(key: "invoice", type: InvoiceitemInvoice?, presence: true, ignore_serialize: invoice.nil? && !invoice_present?)]
    property invoice : InvoiceitemInvoice?

    @[JSON::Field(ignore: true)]
    property? invoice_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "price", type: InvoiceitemPrice?, presence: true, ignore_serialize: price.nil? && !price_present?)]
    property price : InvoiceitemPrice?

    @[JSON::Field(ignore: true)]
    property? price_present : Bool = false

    @[JSON::Field(key: "subscription", type: InvoiceitemSubscription?, presence: true, ignore_serialize: subscription.nil? && !subscription_present?)]
    property subscription : InvoiceitemSubscription?

    @[JSON::Field(ignore: true)]
    property? subscription_present : Bool = false

    # The subscription item that this invoice item has been created for, if any.
    @[JSON::Field(key: "subscription_item", type: String?, presence: true, ignore_serialize: subscription_item.nil? && !subscription_item_present?)]
    getter subscription_item : String?

    @[JSON::Field(ignore: true)]
    property? subscription_item_present : Bool = false

    # The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
    @[JSON::Field(key: "tax_rates", type: Array(TaxRate)?, presence: true, ignore_serialize: tax_rates.nil? && !tax_rates_present?)]
    property tax_rates : Array(TaxRate)?

    @[JSON::Field(ignore: true)]
    property? tax_rates_present : Bool = false

    @[JSON::Field(key: "test_clock", type: InvoiceitemTestClock?, presence: true, ignore_serialize: test_clock.nil? && !test_clock_present?)]
    property test_clock : InvoiceitemTestClock?

    @[JSON::Field(ignore: true)]
    property? test_clock_present : Bool = false

    # Unit amount (in the `currency` specified) of the invoice item.
    @[JSON::Field(key: "unit_amount", type: Int64?, presence: true, ignore_serialize: unit_amount.nil? && !unit_amount_present?)]
    property unit_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? unit_amount_present : Bool = false

    # Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    @[JSON::Field(key: "unit_amount_decimal", type: String?, presence: true, ignore_serialize: unit_amount_decimal.nil? && !unit_amount_decimal_present?)]
    property unit_amount_decimal : String?

    @[JSON::Field(ignore: true)]
    property? unit_amount_decimal_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @amount : Int64, 
      @currency : String, 
      @customer : InvoiceitemCustomer, 
      @date : Int64, 
      @discountable : Bool, 
      @id : String, 
      @livemode : Bool, 
      @object : String, 
      @period : InvoiceLineItemPeriod, 
      @proration : Bool, 
      @quantity : Int64, 
      # Optional properties
      @description : String? = nil, 
      @discounts : Array(InvoiceitemDiscountsInner)? = nil, 
      @invoice : InvoiceitemInvoice? = nil, 
      @metadata : Hash(String, String)? = nil, 
      @price : InvoiceitemPrice? = nil, 
      @subscription : InvoiceitemSubscription? = nil, 
      @subscription_item : String? = nil, 
      @tax_rates : Array(TaxRate)? = nil, 
      @test_clock : InvoiceitemTestClock? = nil, 
      @unit_amount : Int64? = nil, 
      @unit_amount_decimal : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@subscription_item.nil? && @subscription_item.to_s.size > 5000
        invalid_properties.push("invalid value for \"subscription_item\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@subscription_item.nil? && @subscription_item.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] subscription_item Value to be assigned
    def subscription_item=(subscription_item)
      if !subscription_item.nil? && subscription_item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_item\", the character length must be smaller than or equal to 5000.")
      end

      @subscription_item = subscription_item
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @customer, @date, @discountable, @id, @livemode, @object, @period, @proration, @quantity, @description, @discounts, @invoice, @metadata, @price, @subscription, @subscription_item, @tax_rates, @test_clock, @unit_amount, @unit_amount_decimal)
  end
end
