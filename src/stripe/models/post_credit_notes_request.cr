#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostCreditNotesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # ID of the invoice.
    @[JSON::Field(key: "invoice", type: String)]
    getter invoice : String

    # Optional properties

    # The integer amount in cents (or local equivalent) representing the total amount of the credit note.
    @[JSON::Field(key: "amount", type: Int64?, presence: true, ignore_serialize: amount.nil? && !amount_present?)]
    property amount : Int64?

    @[JSON::Field(ignore: true)]
    property? amount_present : Bool = false

    # The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
    @[JSON::Field(key: "credit_amount", type: Int64?, presence: true, ignore_serialize: credit_amount.nil? && !credit_amount_present?)]
    property credit_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? credit_amount_present : Bool = false

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Line items that make up the credit note.
    @[JSON::Field(key: "lines", type: Array(CreditNoteLineItemParams)?, presence: true, ignore_serialize: lines.nil? && !lines_present?)]
    property lines : Array(CreditNoteLineItemParams)?

    @[JSON::Field(ignore: true)]
    property? lines_present : Bool = false

    # The credit note's memo appears on the credit note PDF.
    @[JSON::Field(key: "memo", type: String?, presence: true, ignore_serialize: memo.nil? && !memo_present?)]
    getter memo : String?

    @[JSON::Field(ignore: true)]
    property? memo_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
    @[JSON::Field(key: "out_of_band_amount", type: Int64?, presence: true, ignore_serialize: out_of_band_amount.nil? && !out_of_band_amount_present?)]
    property out_of_band_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? out_of_band_amount_present : Bool = false

    # Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    @[JSON::Field(key: "reason", type: String?, presence: true, ignore_serialize: reason.nil? && !reason_present?)]
    getter reason : String?

    @[JSON::Field(ignore: true)]
    property? reason_present : Bool = false

    ENUM_VALIDATOR_FOR_REASON = EnumValidator.new("reason", "String", ["duplicate", "fraudulent", "order_change", "product_unsatisfactory"])

    # ID of an existing refund to link this credit note to.
    @[JSON::Field(key: "refund", type: String?, presence: true, ignore_serialize: refund.nil? && !refund_present?)]
    property refund : String?

    @[JSON::Field(ignore: true)]
    property? refund_present : Bool = false

    # The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
    @[JSON::Field(key: "refund_amount", type: Int64?, presence: true, ignore_serialize: refund_amount.nil? && !refund_amount_present?)]
    property refund_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? refund_amount_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @invoice : String, 
      # Optional properties
      @amount : Int64? = nil, 
      @credit_amount : Int64? = nil, 
      @expand : Array(String)? = nil, 
      @lines : Array(CreditNoteLineItemParams)? = nil, 
      @memo : String? = nil, 
      @metadata : Hash(String, String)? = nil, 
      @out_of_band_amount : Int64? = nil, 
      @reason : String? = nil, 
      @refund : String? = nil, 
      @refund_amount : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @invoice.to_s.size > 5000
        invalid_properties.push("invalid value for \"invoice\", the character length must be smaller than or equal to 5000.")
      end

      if !@memo.nil? && @memo.to_s.size > 5000
        invalid_properties.push("invalid value for \"memo\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_REASON.error_message) unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @invoice.to_s.size > 5000
      return false if !@memo.nil? && @memo.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice Value to be assigned
    def invoice=(invoice)
      if invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\", the character length must be smaller than or equal to 5000.")
      end

      @invoice = invoice
    end

    # Custom attribute writer method with validation
    # @param [Object] memo Value to be assigned
    def memo=(memo)
      if !memo.nil? && memo.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"memo\", the character length must be smaller than or equal to 5000.")
      end

      @memo = memo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason)
      ENUM_VALIDATOR_FOR_REASON.valid!(reason)
      @reason = reason
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@invoice, @amount, @credit_amount, @expand, @lines, @memo, @metadata, @out_of_band_amount, @reason, @refund, @refund_amount)
  end
end
