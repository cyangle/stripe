#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class NotificationEventData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key.
    @[JSON::Field(key: "object", type: JSON::Any?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : JSON::Any? = nil

    # End of Required Properties

    # Optional Properties

    # Object containing the names of the updated attributes and their values prior to the event (only included in events of type `*.updated`). If an array attribute has any updated elements, this object contains the entire array. In Stripe API versions 2017-04-06 or earlier, an updated array attribute in this object includes only the updated array elements.
    @[JSON::Field(key: "previous_attributes", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter previous_attributes : JSON::Any? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @object : JSON::Any? = nil,
      # Optional properties
      @previous_attributes : JSON::Any? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @object.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : JSON::Any?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] previous_attributes Object to be assigned
    def previous_attributes=(new_value : JSON::Any?)
      @previous_attributes = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@object, @previous_attributes)
  end
end
