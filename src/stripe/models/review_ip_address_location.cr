#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ReviewIpAddressLocation
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # The city where the payment originated.
    @[JSON::Field(key: "city", type: String?, presence: true, ignore_serialize: city.nil? && !city_present?)]
    getter city : String?

    @[JSON::Field(ignore: true)]
    property? city_present : Bool = false

    # Two-letter ISO code representing the country where the payment originated.
    @[JSON::Field(key: "country", type: String?, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String?

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # The geographic latitude where the payment originated.
    @[JSON::Field(key: "latitude", type: Float64?, presence: true, ignore_serialize: latitude.nil? && !latitude_present?)]
    property latitude : Float64?

    @[JSON::Field(ignore: true)]
    property? latitude_present : Bool = false

    # The geographic longitude where the payment originated.
    @[JSON::Field(key: "longitude", type: Float64?, presence: true, ignore_serialize: longitude.nil? && !longitude_present?)]
    property longitude : Float64?

    @[JSON::Field(ignore: true)]
    property? longitude_present : Bool = false

    # The state/county/province/region where the payment originated.
    @[JSON::Field(key: "region", type: String?, presence: true, ignore_serialize: region.nil? && !region_present?)]
    getter region : String?

    @[JSON::Field(ignore: true)]
    property? region_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::RadarReviewResourceLocation,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @city : String? = nil,
      @country : String? = nil,
      @latitude : Float64? = nil,
      @longitude : Float64? = nil,
      @region : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@city.nil? && @city.to_s.size > 5000
        invalid_properties.push("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
      end

      if !@country.nil? && @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if !@region.nil? && @region.to_s.size > 5000
        invalid_properties.push("invalid value for \"region\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@city.nil? && @city.to_s.size > 5000
      return false if !@country.nil? && @country.to_s.size > 5000
      return false if !@region.nil? && @region.to_s.size > 5000

      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if !region.nil? && region.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"region\", the character length must be smaller than or equal to 5000.")
      end

      @region = region
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@city, @country, @latitude, @longitude, @region)
  end
end
