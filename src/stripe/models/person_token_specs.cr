#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Information for the person this token will represent.
  class PersonTokenSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "address", type: Stripe::AddressSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter address : Stripe::AddressSpecs? = nil

    @[JSON::Field(key: "address_kana", type: Stripe::JapanAddressKanaSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter address_kana : Stripe::JapanAddressKanaSpecs? = nil

    @[JSON::Field(key: "address_kanji", type: Stripe::JapanAddressKanjiSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter address_kanji : Stripe::JapanAddressKanjiSpecs? = nil

    @[JSON::Field(key: "dob", type: Stripe::IndividualSpecsDob?, default: nil, required: false, nullable: false, emit_null: false)]
    getter dob : Stripe::IndividualSpecsDob? = nil

    @[JSON::Field(key: "documents", type: Stripe::PersonDocumentsSpecs1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter documents : Stripe::PersonDocumentsSpecs1? = nil

    @[JSON::Field(key: "email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter email : String? = nil

    @[JSON::Field(key: "first_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter first_name : String? = nil

    @[JSON::Field(key: "first_name_kana", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter first_name_kana : String? = nil

    @[JSON::Field(key: "first_name_kanji", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter first_name_kanji : String? = nil

    @[JSON::Field(key: "full_name_aliases", type: Stripe::CreditNoteLineItemParamsTaxRates?, default: nil, required: false, nullable: false, emit_null: false)]
    getter full_name_aliases : Stripe::CreditNoteLineItemParamsTaxRates? = nil

    @[JSON::Field(key: "gender", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter gender : String? = nil

    @[JSON::Field(key: "id_number", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id_number : String? = nil

    @[JSON::Field(key: "id_number_secondary", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id_number_secondary : String? = nil

    @[JSON::Field(key: "last_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter last_name : String? = nil

    @[JSON::Field(key: "last_name_kana", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter last_name_kana : String? = nil

    @[JSON::Field(key: "last_name_kanji", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter last_name_kanji : String? = nil

    @[JSON::Field(key: "maiden_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter maiden_name : String? = nil

    @[JSON::Field(key: "metadata", type: Stripe::IndividualSpecsMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::IndividualSpecsMetadata? = nil

    @[JSON::Field(key: "nationality", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter nationality : String? = nil

    @[JSON::Field(key: "phone", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone : String? = nil

    @[JSON::Field(key: "political_exposure", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter political_exposure : String? = nil

    @[JSON::Field(key: "registered_address", type: Stripe::AddressSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter registered_address : Stripe::AddressSpecs? = nil

    @[JSON::Field(key: "relationship", type: Stripe::RelationshipSpecs1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter relationship : Stripe::RelationshipSpecs1? = nil

    @[JSON::Field(key: "ssn_last_4", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ssn_last_4 : String? = nil

    @[JSON::Field(key: "verification", type: Stripe::PersonVerificationSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verification : Stripe::PersonVerificationSpecs? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @address : Stripe::AddressSpecs? = nil,
      @address_kana : Stripe::JapanAddressKanaSpecs? = nil,
      @address_kanji : Stripe::JapanAddressKanjiSpecs? = nil,
      @dob : Stripe::IndividualSpecsDob? = nil,
      @documents : Stripe::PersonDocumentsSpecs1? = nil,
      @email : String? = nil,
      @first_name : String? = nil,
      @first_name_kana : String? = nil,
      @first_name_kanji : String? = nil,
      @full_name_aliases : Stripe::CreditNoteLineItemParamsTaxRates? = nil,
      @gender : String? = nil,
      @id_number : String? = nil,
      @id_number_secondary : String? = nil,
      @last_name : String? = nil,
      @last_name_kana : String? = nil,
      @last_name_kanji : String? = nil,
      @maiden_name : String? = nil,
      @metadata : Stripe::IndividualSpecsMetadata? = nil,
      @nationality : String? = nil,
      @phone : String? = nil,
      @political_exposure : String? = nil,
      @registered_address : Stripe::AddressSpecs? = nil,
      @relationship : Stripe::RelationshipSpecs1? = nil,
      @ssn_last_4 : String? = nil,
      @verification : Stripe::PersonVerificationSpecs? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model address : Stripe::AddressSpecs?
      # This is a model address_kana : Stripe::JapanAddressKanaSpecs?
      # This is a model address_kanji : Stripe::JapanAddressKanjiSpecs?
      # This is a model dob : Stripe::IndividualSpecsDob?
      # This is a model documents : Stripe::PersonDocumentsSpecs1?
      if _first_name = @first_name
        if _first_name.to_s.size > 5000
          invalid_properties.push("invalid value for \"first_name\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _first_name_kana = @first_name_kana
        if _first_name_kana.to_s.size > 5000
          invalid_properties.push("invalid value for \"first_name_kana\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _first_name_kanji = @first_name_kanji
        if _first_name_kanji.to_s.size > 5000
          invalid_properties.push("invalid value for \"first_name_kanji\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model full_name_aliases : Stripe::CreditNoteLineItemParamsTaxRates?
      if _id_number = @id_number
        if _id_number.to_s.size > 5000
          invalid_properties.push("invalid value for \"id_number\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _id_number_secondary = @id_number_secondary
        if _id_number_secondary.to_s.size > 5000
          invalid_properties.push("invalid value for \"id_number_secondary\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _last_name = @last_name
        if _last_name.to_s.size > 5000
          invalid_properties.push("invalid value for \"last_name\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _last_name_kana = @last_name_kana
        if _last_name_kana.to_s.size > 5000
          invalid_properties.push("invalid value for \"last_name_kana\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _last_name_kanji = @last_name_kanji
        if _last_name_kanji.to_s.size > 5000
          invalid_properties.push("invalid value for \"last_name_kanji\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _maiden_name = @maiden_name
        if _maiden_name.to_s.size > 5000
          invalid_properties.push("invalid value for \"maiden_name\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model metadata : Stripe::IndividualSpecsMetadata?
      if _nationality = @nationality
        if _nationality.to_s.size > 5000
          invalid_properties.push("invalid value for \"nationality\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _political_exposure = @political_exposure
        if _political_exposure.to_s.size > 5000
          invalid_properties.push("invalid value for \"political_exposure\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model registered_address : Stripe::AddressSpecs?
      # This is a model relationship : Stripe::RelationshipSpecs1?
      # This is a model verification : Stripe::PersonVerificationSpecs?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _first_name = @first_name
        return false if _first_name.to_s.size > 5000
      end
      if _first_name_kana = @first_name_kana
        return false if _first_name_kana.to_s.size > 5000
      end
      if _first_name_kanji = @first_name_kanji
        return false if _first_name_kanji.to_s.size > 5000
      end
      if _id_number = @id_number
        return false if _id_number.to_s.size > 5000
      end
      if _id_number_secondary = @id_number_secondary
        return false if _id_number_secondary.to_s.size > 5000
      end
      if _last_name = @last_name
        return false if _last_name.to_s.size > 5000
      end
      if _last_name_kana = @last_name_kana
        return false if _last_name_kana.to_s.size > 5000
      end
      if _last_name_kanji = @last_name_kanji
        return false if _last_name_kanji.to_s.size > 5000
      end
      if _maiden_name = @maiden_name
        return false if _maiden_name.to_s.size > 5000
      end
      if _nationality = @nationality
        return false if _nationality.to_s.size > 5000
      end
      if _political_exposure = @political_exposure
        return false if _political_exposure.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(address : Stripe::AddressSpecs?)
      if address.nil?
        return @address = nil
      end
      @address = address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_kana Object to be assigned
    def address_kana=(address_kana : Stripe::JapanAddressKanaSpecs?)
      if address_kana.nil?
        return @address_kana = nil
      end
      @address_kana = address_kana
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_kanji Object to be assigned
    def address_kanji=(address_kanji : Stripe::JapanAddressKanjiSpecs?)
      if address_kanji.nil?
        return @address_kanji = nil
      end
      @address_kanji = address_kanji
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dob Object to be assigned
    def dob=(dob : Stripe::IndividualSpecsDob?)
      if dob.nil?
        return @dob = nil
      end
      @dob = dob
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] documents Object to be assigned
    def documents=(documents : Stripe::PersonDocumentsSpecs1?)
      if documents.nil?
        return @documents = nil
      end
      @documents = documents
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(email : String?)
      if email.nil?
        return @email = nil
      end
      @email = email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(first_name : String?)
      if first_name.nil?
        return @first_name = nil
      end
      _first_name = first_name.not_nil!
      if _first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\", the character length must be smaller than or equal to 5000.")
      end

      @first_name = first_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name_kana Object to be assigned
    def first_name_kana=(first_name_kana : String?)
      if first_name_kana.nil?
        return @first_name_kana = nil
      end
      _first_name_kana = first_name_kana.not_nil!
      if _first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\", the character length must be smaller than or equal to 5000.")
      end

      @first_name_kana = first_name_kana
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name_kanji Object to be assigned
    def first_name_kanji=(first_name_kanji : String?)
      if first_name_kanji.nil?
        return @first_name_kanji = nil
      end
      _first_name_kanji = first_name_kanji.not_nil!
      if _first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\", the character length must be smaller than or equal to 5000.")
      end

      @first_name_kanji = first_name_kanji
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] full_name_aliases Object to be assigned
    def full_name_aliases=(full_name_aliases : Stripe::CreditNoteLineItemParamsTaxRates?)
      if full_name_aliases.nil?
        return @full_name_aliases = nil
      end
      @full_name_aliases = full_name_aliases
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender : String?)
      if gender.nil?
        return @gender = nil
      end
      @gender = gender
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_number Object to be assigned
    def id_number=(id_number : String?)
      if id_number.nil?
        return @id_number = nil
      end
      _id_number = id_number.not_nil!
      if _id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\", the character length must be smaller than or equal to 5000.")
      end

      @id_number = id_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_number_secondary Object to be assigned
    def id_number_secondary=(id_number_secondary : String?)
      if id_number_secondary.nil?
        return @id_number_secondary = nil
      end
      _id_number_secondary = id_number_secondary.not_nil!
      if _id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\", the character length must be smaller than or equal to 5000.")
      end

      @id_number_secondary = id_number_secondary
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(last_name : String?)
      if last_name.nil?
        return @last_name = nil
      end
      _last_name = last_name.not_nil!
      if _last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\", the character length must be smaller than or equal to 5000.")
      end

      @last_name = last_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name_kana Object to be assigned
    def last_name_kana=(last_name_kana : String?)
      if last_name_kana.nil?
        return @last_name_kana = nil
      end
      _last_name_kana = last_name_kana.not_nil!
      if _last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\", the character length must be smaller than or equal to 5000.")
      end

      @last_name_kana = last_name_kana
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name_kanji Object to be assigned
    def last_name_kanji=(last_name_kanji : String?)
      if last_name_kanji.nil?
        return @last_name_kanji = nil
      end
      _last_name_kanji = last_name_kanji.not_nil!
      if _last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\", the character length must be smaller than or equal to 5000.")
      end

      @last_name_kanji = last_name_kanji
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maiden_name Object to be assigned
    def maiden_name=(maiden_name : String?)
      if maiden_name.nil?
        return @maiden_name = nil
      end
      _maiden_name = maiden_name.not_nil!
      if _maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\", the character length must be smaller than or equal to 5000.")
      end

      @maiden_name = maiden_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Stripe::IndividualSpecsMetadata?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nationality Object to be assigned
    def nationality=(nationality : String?)
      if nationality.nil?
        return @nationality = nil
      end
      _nationality = nationality.not_nil!
      if _nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\", the character length must be smaller than or equal to 5000.")
      end

      @nationality = nationality
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone Object to be assigned
    def phone=(phone : String?)
      if phone.nil?
        return @phone = nil
      end
      @phone = phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] political_exposure Object to be assigned
    def political_exposure=(political_exposure : String?)
      if political_exposure.nil?
        return @political_exposure = nil
      end
      _political_exposure = political_exposure.not_nil!
      if _political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\", the character length must be smaller than or equal to 5000.")
      end

      @political_exposure = political_exposure
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] registered_address Object to be assigned
    def registered_address=(registered_address : Stripe::AddressSpecs?)
      if registered_address.nil?
        return @registered_address = nil
      end
      @registered_address = registered_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] relationship Object to be assigned
    def relationship=(relationship : Stripe::RelationshipSpecs1?)
      if relationship.nil?
        return @relationship = nil
      end
      @relationship = relationship
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ssn_last_4 Object to be assigned
    def ssn_last_4=(ssn_last_4 : String?)
      if ssn_last_4.nil?
        return @ssn_last_4 = nil
      end
      @ssn_last_4 = ssn_last_4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification Object to be assigned
    def verification=(verification : Stripe::PersonVerificationSpecs?)
      if verification.nil?
        return @verification = nil
      end
      @verification = verification
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address, @address_kana, @address_kanji, @dob, @documents, @email, @first_name, @first_name_kana, @first_name_kanji, @full_name_aliases, @gender, @id_number, @id_number_secondary, @last_name, @last_name_kana, @last_name_kanji, @maiden_name, @metadata, @nationality, @phone, @political_exposure, @registered_address, @relationship, @ssn_last_4, @verification)
  end
end
