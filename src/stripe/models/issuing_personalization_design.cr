#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_personalization_design_card_logo"
require "./issuing_personalization_design_carrier_text"
require "./issuing_personalization_design_physical_bundle"
require "./issuing_personalization_design_preferences"
require "./issuing_personalization_design_rejection_reasons"

module Stripe
  # A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.
  class IssuingPersonalizationDesign
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "card_logo", type: Stripe::IssuingPersonalizationDesignCardLogo?, default: nil, required: true, nullable: true, emit_null: true)]
    getter card_logo : Stripe::IssuingPersonalizationDesignCardLogo? = nil

    @[JSON::Field(key: "carrier_text", type: Stripe::IssuingPersonalizationDesignCarrierText?, default: nil, required: true, nullable: true, emit_null: true)]
    getter carrier_text : Stripe::IssuingPersonalizationDesignCarrierText? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
    @[JSON::Field(key: "lookup_key", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter lookup_key : String? = nil
    MAX_LENGTH_FOR_LOOKUP_KEY = 5000

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # Friendly display name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [issuing.personalization_design]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("issuing.personalization_design")

    @[JSON::Field(key: "physical_bundle", type: Stripe::IssuingPersonalizationDesignPhysicalBundle?, default: nil, required: true, nullable: false, emit_null: false)]
    getter physical_bundle : Stripe::IssuingPersonalizationDesignPhysicalBundle? = nil

    @[JSON::Field(key: "preferences", type: Stripe::IssuingPersonalizationDesignPreferences?, default: nil, required: true, nullable: false, emit_null: false)]
    getter preferences : Stripe::IssuingPersonalizationDesignPreferences? = nil

    @[JSON::Field(key: "rejection_reasons", type: Stripe::IssuingPersonalizationDesignRejectionReasons?, default: nil, required: true, nullable: false, emit_null: false)]
    getter rejection_reasons : Stripe::IssuingPersonalizationDesignRejectionReasons? = nil

    # Whether this personalization design can be used to create cards.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, inactive, rejected, review]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "inactive", "rejected", "review")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @card_logo : Stripe::IssuingPersonalizationDesignCardLogo? = nil,
      @carrier_text : Stripe::IssuingPersonalizationDesignCarrierText? = nil,
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @lookup_key : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @physical_bundle : Stripe::IssuingPersonalizationDesignPhysicalBundle? = nil,
      @preferences : Stripe::IssuingPersonalizationDesignPreferences? = nil,
      @rejection_reasons : Stripe::IssuingPersonalizationDesignRejectionReasons? = nil,
      @status : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_card_logo = @card_logo).nil?
        invalid_properties.concat(_card_logo.list_invalid_properties_for("card_logo")) if _card_logo.is_a?(OpenApi::Validatable)
      end
      unless (_carrier_text = @carrier_text).nil?
        invalid_properties.concat(_carrier_text.list_invalid_properties_for("carrier_text")) if _carrier_text.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      unless (_lookup_key = @lookup_key).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("lookup_key", _lookup_key.to_s.size, MAX_LENGTH_FOR_LOOKUP_KEY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"physical_bundle\" is required and cannot be null") if @physical_bundle.nil?

      unless (_physical_bundle = @physical_bundle).nil?
        invalid_properties.concat(_physical_bundle.list_invalid_properties_for("physical_bundle")) if _physical_bundle.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"preferences\" is required and cannot be null") if @preferences.nil?

      unless (_preferences = @preferences).nil?
        invalid_properties.concat(_preferences.list_invalid_properties_for("preferences")) if _preferences.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"rejection_reasons\" is required and cannot be null") if @rejection_reasons.nil?

      unless (_rejection_reasons = @rejection_reasons).nil?
        invalid_properties.concat(_rejection_reasons.list_invalid_properties_for("rejection_reasons")) if _rejection_reasons.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_card_logo = @card_logo).nil?
        return false if _card_logo.is_a?(OpenApi::Validatable) && !_card_logo.valid?
      end

      unless (_carrier_text = @carrier_text).nil?
        return false if _carrier_text.is_a?(OpenApi::Validatable) && !_carrier_text.valid?
      end

      return false if @created.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      unless (_lookup_key = @lookup_key).nil?
        return false if _lookup_key.to_s.size > MAX_LENGTH_FOR_LOOKUP_KEY
      end

      return false if @metadata.nil?

      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @physical_bundle.nil?
      unless (_physical_bundle = @physical_bundle).nil?
        return false if _physical_bundle.is_a?(OpenApi::Validatable) && !_physical_bundle.valid?
      end

      return false if @preferences.nil?
      unless (_preferences = @preferences).nil?
        return false if _preferences.is_a?(OpenApi::Validatable) && !_preferences.valid?
      end

      return false if @rejection_reasons.nil?
      unless (_rejection_reasons = @rejection_reasons).nil?
        return false if _rejection_reasons.is_a?(OpenApi::Validatable) && !_rejection_reasons.valid?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_logo Object to be assigned
    def card_logo=(new_value : Stripe::IssuingPersonalizationDesignCardLogo?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_logo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] carrier_text Object to be assigned
    def carrier_text=(new_value : Stripe::IssuingPersonalizationDesignCarrierText?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @carrier_text = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lookup_key Object to be assigned
    def lookup_key=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("lookup_key", new_value.to_s.size, MAX_LENGTH_FOR_LOOKUP_KEY)
      end

      @lookup_key = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"metadata\" is required and cannot be null") if new_value.nil?

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("name", new_value.to_s.size, MAX_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] physical_bundle Object to be assigned
    def physical_bundle=(new_value : Stripe::IssuingPersonalizationDesignPhysicalBundle?)
      raise ArgumentError.new("\"physical_bundle\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @physical_bundle = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preferences Object to be assigned
    def preferences=(new_value : Stripe::IssuingPersonalizationDesignPreferences?)
      raise ArgumentError.new("\"preferences\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @preferences = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rejection_reasons Object to be assigned
    def rejection_reasons=(new_value : Stripe::IssuingPersonalizationDesignRejectionReasons?)
      raise ArgumentError.new("\"rejection_reasons\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @rejection_reasons = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@card_logo, @carrier_text, @created, @id, @livemode, @lookup_key, @metadata, @name, @object, @physical_bundle, @preferences, @rejection_reasons, @status)
  end
end
