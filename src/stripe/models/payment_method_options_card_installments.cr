#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_method_details_card_installments_plan"
require "./payment_method_options_card_installments_plan"

module Stripe
  #
  class PaymentMethodOptionsCardInstallments
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Installment plans that may be selected for this PaymentIntent.
    @[JSON::Field(key: "available_plans", type: Array(Stripe::PaymentMethodDetailsCardInstallmentsPlan)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter available_plans : Array(Stripe::PaymentMethodDetailsCardInstallmentsPlan)? = nil

    # Whether Installments are enabled for this PaymentIntent.
    @[JSON::Field(key: "enabled", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter enabled : Bool? = nil

    @[JSON::Field(key: "plan", type: Stripe::PaymentMethodOptionsCardInstallmentsPlan?, default: nil, required: true, nullable: true, emit_null: true)]
    getter plan : Stripe::PaymentMethodOptionsCardInstallmentsPlan? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @available_plans : Array(Stripe::PaymentMethodDetailsCardInstallmentsPlan)? = nil,
      @enabled : Bool? = nil,
      @plan : Stripe::PaymentMethodOptionsCardInstallmentsPlan? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_available_plans = @available_plans).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "available_plans", container: _available_plans)) if _available_plans.is_a?(Array)
      end
      invalid_properties.push("\"enabled\" is required and cannot be null") if @enabled.nil?

      unless (_plan = @plan).nil?
        invalid_properties.concat(_plan.list_invalid_properties_for("plan")) if _plan.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_available_plans = @available_plans).nil?
        return false if _available_plans.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _available_plans)
      end

      return false if @enabled.nil?

      unless (_plan = @plan).nil?
        return false if _plan.is_a?(OpenApi::Validatable) && !_plan.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] available_plans Object to be assigned
    def available_plans=(new_value : Array(Stripe::PaymentMethodDetailsCardInstallmentsPlan)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @available_plans = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enabled Object to be assigned
    def enabled=(new_value : Bool?)
      raise ArgumentError.new("\"enabled\" is required and cannot be null") if new_value.nil?

      @enabled = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan Object to be assigned
    def plan=(new_value : Stripe::PaymentMethodOptionsCardInstallmentsPlan?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @plan = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@available_plans, @enabled, @plan)
  end
end
