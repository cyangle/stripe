#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentMethodOptionsCardInstallments
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Whether Installments are enabled for this PaymentIntent.
    @[JSON::Field(key: "enabled", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter enabled : Bool? = nil

    # Optional properties

    # Installment plans that may be selected for this PaymentIntent.
    @[JSON::Field(key: "available_plans", type: Array(Stripe::PaymentMethodDetailsCardInstallmentsPlan)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: available_plans.nil? && !available_plans_present?)]
    getter available_plans : Array(Stripe::PaymentMethodDetailsCardInstallmentsPlan)? = nil

    @[JSON::Field(ignore: true)]
    property? available_plans_present : Bool = false

    @[JSON::Field(key: "plan", type: Stripe::PaymentMethodOptionsCardInstallmentsPlan?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: plan.nil? && !plan_present?)]
    getter plan : Stripe::PaymentMethodOptionsCardInstallmentsPlan? = nil

    @[JSON::Field(ignore: true)]
    property? plan_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @enabled : Bool? = nil,
      # Optional properties
      @available_plans : Array(Stripe::PaymentMethodDetailsCardInstallmentsPlan)? = nil,
      @plan : Stripe::PaymentMethodOptionsCardInstallmentsPlan? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"enabled\" is required and cannot be null") if @enabled.nil?
      # Container available_plans array has values of Stripe::PaymentMethodDetailsCardInstallmentsPlan
      # This is a model plan : Stripe::PaymentMethodOptionsCardInstallmentsPlan?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @enabled.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enabled Object to be assigned
    def enabled=(enabled : Bool?)
      if enabled.nil?
        raise ArgumentError.new("\"enabled\" is required and cannot be null")
      end
      @enabled = enabled
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] available_plans Object to be assigned
    def available_plans=(available_plans : Array(Stripe::PaymentMethodDetailsCardInstallmentsPlan)?)
      if available_plans.nil?
        return @available_plans = nil
      end
      @available_plans = available_plans
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan Object to be assigned
    def plan=(plan : Stripe::PaymentMethodOptionsCardInstallmentsPlan?)
      if plan.nil?
        return @plan = nil
      end
      @plan = plan
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@enabled, @available_plans, @available_plans_present, @plan, @plan_present)
  end
end
