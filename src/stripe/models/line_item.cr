#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class LineItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # The amount, in %s.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # If true, discounts will apply to this line item. Always false for prorations.
    @[JSON::Field(key: "discountable", type: Bool)]
    property discountable : Bool

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["line_item"])

    @[JSON::Field(key: "period", type: InvoiceLineItemPeriod)]
    property period : InvoiceLineItemPeriod

    # Whether this is a proration.
    @[JSON::Field(key: "proration", type: Bool)]
    property proration : Bool

    # A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["invoiceitem", "subscription"])

    # Optional properties

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The amount of discount calculated per discount for this line item.
    @[JSON::Field(key: "discount_amounts", type: Array(DiscountsResourceDiscountAmount)?, presence: true, ignore_serialize: discount_amounts.nil? && !discount_amounts_present?)]
    property discount_amounts : Array(DiscountsResourceDiscountAmount)?

    @[JSON::Field(ignore: true)]
    property? discount_amounts_present : Bool = false

    # The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    @[JSON::Field(key: "discounts", type: Array(InvoiceitemDiscountsInner)?, presence: true, ignore_serialize: discounts.nil? && !discounts_present?)]
    property discounts : Array(InvoiceitemDiscountsInner)?

    @[JSON::Field(ignore: true)]
    property? discounts_present : Bool = false

    # The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
    @[JSON::Field(key: "invoice_item", type: String?, presence: true, ignore_serialize: invoice_item.nil? && !invoice_item_present?)]
    getter invoice_item : String?

    @[JSON::Field(ignore: true)]
    property? invoice_item_present : Bool = false

    @[JSON::Field(key: "price", type: LineItemPrice?, presence: true, ignore_serialize: price.nil? && !price_present?)]
    property price : LineItemPrice?

    @[JSON::Field(ignore: true)]
    property? price_present : Bool = false

    @[JSON::Field(key: "proration_details", type: LineItemProrationDetails?, presence: true, ignore_serialize: proration_details.nil? && !proration_details_present?)]
    property proration_details : LineItemProrationDetails?

    @[JSON::Field(ignore: true)]
    property? proration_details_present : Bool = false

    # The quantity of the subscription, if the line item is a subscription or a proration.
    @[JSON::Field(key: "quantity", type: Int64?, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    property quantity : Int64?

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    # The subscription that the invoice item pertains to, if any.
    @[JSON::Field(key: "subscription", type: String?, presence: true, ignore_serialize: subscription.nil? && !subscription_present?)]
    getter subscription : String?

    @[JSON::Field(ignore: true)]
    property? subscription_present : Bool = false

    # The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
    @[JSON::Field(key: "subscription_item", type: String?, presence: true, ignore_serialize: subscription_item.nil? && !subscription_item_present?)]
    getter subscription_item : String?

    @[JSON::Field(ignore: true)]
    property? subscription_item_present : Bool = false

    # The amount of tax calculated per tax rate for this line item
    @[JSON::Field(key: "tax_amounts", type: Array(InvoiceTaxAmount)?, presence: true, ignore_serialize: tax_amounts.nil? && !tax_amounts_present?)]
    property tax_amounts : Array(InvoiceTaxAmount)?

    @[JSON::Field(ignore: true)]
    property? tax_amounts_present : Bool = false

    # The tax rates which apply to the line item.
    @[JSON::Field(key: "tax_rates", type: Array(TaxRate)?, presence: true, ignore_serialize: tax_rates.nil? && !tax_rates_present?)]
    property tax_rates : Array(TaxRate)?

    @[JSON::Field(ignore: true)]
    property? tax_rates_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64,
      @currency : String,
      @discountable : Bool,
      @id : String,
      @livemode : Bool,
      @metadata : Hash(String, String),
      @object : String,
      @period : InvoiceLineItemPeriod,
      @proration : Bool,
      @_type : String,
      # Optional properties
      @description : String? = nil,
      @discount_amounts : Array(DiscountsResourceDiscountAmount)? = nil,
      @discounts : Array(InvoiceitemDiscountsInner)? = nil,
      @invoice_item : String? = nil,
      @price : LineItemPrice? = nil,
      @proration_details : LineItemProrationDetails? = nil,
      @quantity : Int64? = nil,
      @subscription : String? = nil,
      @subscription_item : String? = nil,
      @tax_amounts : Array(InvoiceTaxAmount)? = nil,
      @tax_rates : Array(TaxRate)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@invoice_item.nil? && @invoice_item.to_s.size > 5000
        invalid_properties.push("invalid value for \"invoice_item\", the character length must be smaller than or equal to 5000.")
      end

      if !@subscription.nil? && @subscription.to_s.size > 5000
        invalid_properties.push("invalid value for \"subscription\", the character length must be smaller than or equal to 5000.")
      end

      if !@subscription_item.nil? && @subscription_item.to_s.size > 5000
        invalid_properties.push("invalid value for \"subscription_item\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@invoice_item.nil? && @invoice_item.to_s.size > 5000
      return false if !@subscription.nil? && @subscription.to_s.size > 5000
      return false if !@subscription_item.nil? && @subscription_item.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description : String?)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_item Value to be assigned
    def invoice_item=(invoice_item : String?)
      if !invoice_item.nil? && invoice_item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice_item\", the character length must be smaller than or equal to 5000.")
      end

      @invoice_item = invoice_item
    end

    # Custom attribute writer method with validation
    # @param [Object] subscription Value to be assigned
    def subscription=(subscription : String?)
      if !subscription.nil? && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\", the character length must be smaller than or equal to 5000.")
      end

      @subscription = subscription
    end

    # Custom attribute writer method with validation
    # @param [Object] subscription_item Value to be assigned
    def subscription_item=(subscription_item : String?)
      if !subscription_item.nil? && subscription_item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_item\", the character length must be smaller than or equal to 5000.")
      end

      @subscription_item = subscription_item
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @discountable, @id, @livemode, @metadata, @object, @period, @proration, @_type, @description, @description_present, @discount_amounts, @discount_amounts_present, @discounts, @discounts_present, @invoice_item, @invoice_item_present, @price, @price_present, @proration_details, @proration_details_present, @quantity, @quantity_present, @subscription, @subscription_present, @subscription_item, @subscription_item_present, @tax_amounts, @tax_amounts_present, @tax_rates, @tax_rates_present)
  end
end
