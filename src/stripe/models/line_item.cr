#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./discounts_resource_discount_amount"
require "./invoice_line_item_period"
require "./invoice_tax_amount"
require "./invoiceitem_discounts_inner"
require "./line_item_invoice_item"
require "./line_item_plan"
require "./line_item_price"
require "./line_item_proration_details"
require "./line_item_subscription"
require "./line_item_subscription_item"
require "./tax_rate"

module Stripe
  # Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.  Each line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).
  class LineItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The amount, in cents (or local equivalent).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # The integer amount in cents (or local equivalent) representing the amount for this line item, excluding all tax and discounts.
    @[JSON::Field(key: "amount_excluding_tax", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_excluding_tax : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # The amount of discount calculated per discount for this line item.
    @[JSON::Field(key: "discount_amounts", type: Array(Stripe::DiscountsResourceDiscountAmount)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil

    # If true, discounts will apply to this line item. Always false for prorations.
    @[JSON::Field(key: "discountable", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter discountable : Bool? = nil

    # The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    @[JSON::Field(key: "discounts", type: Array(Stripe::InvoiceitemDiscountsInner)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter discounts : Array(Stripe::InvoiceitemDiscountsInner)? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The ID of the invoice that contains this line item.
    @[JSON::Field(key: "invoice", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter invoice : String? = nil
    MAX_LENGTH_FOR_INVOICE = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [line_item]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("line_item")

    @[JSON::Field(key: "period", type: Stripe::InvoiceLineItemPeriod?, default: nil, required: true, nullable: false, emit_null: false)]
    getter period : Stripe::InvoiceLineItemPeriod? = nil

    @[JSON::Field(key: "plan", type: Stripe::LineItemPlan?, default: nil, required: true, nullable: true, emit_null: true)]
    getter plan : Stripe::LineItemPlan? = nil

    @[JSON::Field(key: "price", type: Stripe::LineItemPrice?, default: nil, required: true, nullable: true, emit_null: true)]
    getter price : Stripe::LineItemPrice? = nil

    # Whether this is a proration.
    @[JSON::Field(key: "proration", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter proration : Bool? = nil

    @[JSON::Field(key: "proration_details", type: Stripe::LineItemProrationDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter proration_details : Stripe::LineItemProrationDetails? = nil

    # The quantity of the subscription, if the line item is a subscription or a proration.
    @[JSON::Field(key: "quantity", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter quantity : Int64? = nil

    @[JSON::Field(key: "subscription", type: Stripe::LineItemSubscription?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subscription : Stripe::LineItemSubscription? = nil

    # A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [invoiceitem, subscription]."
    VALID_VALUES_FOR__TYPE  = String.static_array("invoiceitem", "subscription")

    # The amount in cents (or local equivalent) representing the unit amount for this line item, excluding all tax and discounts.
    @[JSON::Field(key: "unit_amount_excluding_tax", type: BigDecimal?, default: nil, required: true, nullable: true, emit_null: true)]
    getter unit_amount_excluding_tax : BigDecimal? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "invoice_item", type: Stripe::LineItemInvoiceItem?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_item : Stripe::LineItemInvoiceItem? = nil

    @[JSON::Field(key: "subscription_item", type: Stripe::LineItemSubscriptionItem?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_item : Stripe::LineItemSubscriptionItem? = nil

    # The amount of tax calculated per tax rate for this line item
    @[JSON::Field(key: "tax_amounts", type: Array(Stripe::InvoiceTaxAmount)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_amounts : Array(Stripe::InvoiceTaxAmount)? = nil

    # The tax rates which apply to the line item.
    @[JSON::Field(key: "tax_rates", type: Array(Stripe::TaxRate)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_rates : Array(Stripe::TaxRate)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_excluding_tax : Int64? = nil,
      @currency : String? = nil,
      @description : String? = nil,
      @discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil,
      @discountable : Bool? = nil,
      @discounts : Array(Stripe::InvoiceitemDiscountsInner)? = nil,
      @id : String? = nil,
      @invoice : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @period : Stripe::InvoiceLineItemPeriod? = nil,
      @plan : Stripe::LineItemPlan? = nil,
      @price : Stripe::LineItemPrice? = nil,
      @proration : Bool? = nil,
      @proration_details : Stripe::LineItemProrationDetails? = nil,
      @quantity : Int64? = nil,
      @subscription : Stripe::LineItemSubscription? = nil,
      @_type : String? = nil,
      @unit_amount_excluding_tax : BigDecimal? = nil,
      # Optional properties
      @invoice_item : Stripe::LineItemInvoiceItem? = nil,
      @subscription_item : Stripe::LineItemSubscriptionItem? = nil,
      @tax_amounts : Array(Stripe::InvoiceTaxAmount)? = nil,
      @tax_rates : Array(Stripe::TaxRate)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_discount_amounts = @discount_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "discount_amounts", container: _discount_amounts)) if _discount_amounts.is_a?(Array)
      end
      invalid_properties.push("\"discountable\" is required and cannot be null") if @discountable.nil?

      invalid_properties.push("\"discounts\" is required and cannot be null") if @discounts.nil?

      unless (_discounts = @discounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "discounts", container: _discounts)) if _discounts.is_a?(Array)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_invoice = @invoice).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("invoice", _invoice.to_s.size, MAX_LENGTH_FOR_INVOICE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"period\" is required and cannot be null") if @period.nil?

      unless (_period = @period).nil?
        invalid_properties.concat(_period.list_invalid_properties_for("period")) if _period.is_a?(OpenApi::Validatable)
      end
      unless (_plan = @plan).nil?
        invalid_properties.concat(_plan.list_invalid_properties_for("plan")) if _plan.is_a?(OpenApi::Validatable)
      end
      unless (_price = @price).nil?
        invalid_properties.concat(_price.list_invalid_properties_for("price")) if _price.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"proration\" is required and cannot be null") if @proration.nil?

      unless (_proration_details = @proration_details).nil?
        invalid_properties.concat(_proration_details.list_invalid_properties_for("proration_details")) if _proration_details.is_a?(OpenApi::Validatable)
      end

      unless (_subscription = @subscription).nil?
        invalid_properties.concat(_subscription.list_invalid_properties_for("subscription")) if _subscription.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_invoice_item = @invoice_item).nil?
        invalid_properties.concat(_invoice_item.list_invalid_properties_for("invoice_item")) if _invoice_item.is_a?(OpenApi::Validatable)
      end
      unless (_subscription_item = @subscription_item).nil?
        invalid_properties.concat(_subscription_item.list_invalid_properties_for("subscription_item")) if _subscription_item.is_a?(OpenApi::Validatable)
      end
      unless (_tax_amounts = @tax_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "tax_amounts", container: _tax_amounts)) if _tax_amounts.is_a?(Array)
      end
      unless (_tax_rates = @tax_rates).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "tax_rates", container: _tax_rates)) if _tax_rates.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @currency.nil?

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_discount_amounts = @discount_amounts).nil?
        return false if _discount_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _discount_amounts)
      end

      return false if @discountable.nil?

      return false if @discounts.nil?
      unless (_discounts = @discounts).nil?
        return false if _discounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _discounts)
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      unless (_invoice = @invoice).nil?
        return false if _invoice.to_s.size > MAX_LENGTH_FOR_INVOICE
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @period.nil?
      unless (_period = @period).nil?
        return false if _period.is_a?(OpenApi::Validatable) && !_period.valid?
      end

      unless (_plan = @plan).nil?
        return false if _plan.is_a?(OpenApi::Validatable) && !_plan.valid?
      end

      unless (_price = @price).nil?
        return false if _price.is_a?(OpenApi::Validatable) && !_price.valid?
      end

      return false if @proration.nil?

      unless (_proration_details = @proration_details).nil?
        return false if _proration_details.is_a?(OpenApi::Validatable) && !_proration_details.valid?
      end

      unless (_subscription = @subscription).nil?
        return false if _subscription.is_a?(OpenApi::Validatable) && !_subscription.valid?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_invoice_item = @invoice_item).nil?
        return false if _invoice_item.is_a?(OpenApi::Validatable) && !_invoice_item.valid?
      end

      unless (_subscription_item = @subscription_item).nil?
        return false if _subscription_item.is_a?(OpenApi::Validatable) && !_subscription_item.valid?
      end

      unless (_tax_amounts = @tax_amounts).nil?
        return false if _tax_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _tax_amounts)
      end

      unless (_tax_rates = @tax_rates).nil?
        return false if _tax_rates.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _tax_rates)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_excluding_tax Object to be assigned
    def amount_excluding_tax=(new_value : Int64?)
      @amount_excluding_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount_amounts Object to be assigned
    def discount_amounts=(new_value : Array(Stripe::DiscountsResourceDiscountAmount)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @discount_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discountable Object to be assigned
    def discountable=(new_value : Bool?)
      raise ArgumentError.new("\"discountable\" is required and cannot be null") if new_value.nil?

      @discountable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(new_value : Array(Stripe::InvoiceitemDiscountsInner)?)
      raise ArgumentError.new("\"discounts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @discounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice Object to be assigned
    def invoice=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("invoice", new_value.to_s.size, MAX_LENGTH_FOR_INVOICE)
      end

      @invoice = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"metadata\" is required and cannot be null") if new_value.nil?

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] period Object to be assigned
    def period=(new_value : Stripe::InvoiceLineItemPeriod?)
      raise ArgumentError.new("\"period\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @period = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan Object to be assigned
    def plan=(new_value : Stripe::LineItemPlan?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @plan = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price Object to be assigned
    def price=(new_value : Stripe::LineItemPrice?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @price = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration Object to be assigned
    def proration=(new_value : Bool?)
      raise ArgumentError.new("\"proration\" is required and cannot be null") if new_value.nil?

      @proration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_details Object to be assigned
    def proration_details=(new_value : Stripe::LineItemProrationDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @proration_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(new_value : Int64?)
      @quantity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription Object to be assigned
    def subscription=(new_value : Stripe::LineItemSubscription?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount_excluding_tax Object to be assigned
    def unit_amount_excluding_tax=(new_value : BigDecimal?)
      @unit_amount_excluding_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_item Object to be assigned
    def invoice_item=(new_value : Stripe::LineItemInvoiceItem?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice_item = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_item Object to be assigned
    def subscription_item=(new_value : Stripe::LineItemSubscriptionItem?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription_item = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_amounts Object to be assigned
    def tax_amounts=(new_value : Array(Stripe::InvoiceTaxAmount)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @tax_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_rates Object to be assigned
    def tax_rates=(new_value : Array(Stripe::TaxRate)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @tax_rates = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_excluding_tax, @currency, @description, @discount_amounts, @discountable, @discounts, @id, @invoice, @livemode, @metadata, @object, @period, @plan, @price, @proration, @proration_details, @quantity, @subscription, @_type, @unit_amount_excluding_tax, @invoice_item, @subscription_item, @tax_amounts, @tax_rates)
  end
end
