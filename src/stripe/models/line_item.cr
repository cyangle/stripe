#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  class LineItem
    include NASON::Serializable

    # Required properties
    # The amount, in %s.
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # If true, discounts will apply to this line item. Always false for prorations.
    @[NASON::Field(key: "discountable", type: Bool)]
    property discountable : Bool

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
    @[NASON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    @[NASON::Field(key: "period", type: InvoiceLineItemPeriod)]
    property period : InvoiceLineItemPeriod

    # Whether this is a proration.
    @[NASON::Field(key: "proration", type: Bool)]
    property proration : Bool

    # A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
    @[NASON::Field(key: "type", type: String)]
    property _type : String

    # Optional properties
    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[NASON::Field(key: "description", type: String? | Null, nillable: true)]
    property description : String? | Null

    # The amount of discount calculated per discount for this line item.
    @[NASON::Field(key: "discount_amounts", type: Array(DiscountsResourceDiscountAmount)? | Null, nillable: true)]
    property discount_amounts : Array(DiscountsResourceDiscountAmount)? | Null

    # The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    @[NASON::Field(key: "discounts", type: Array(String | Discount)? | Null, nillable: true)]
    property discounts : Array(String | Discount)? | Null

    # The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
    @[NASON::Field(key: "invoice_item", type: String?, nillable: true)]
    property invoice_item : String?

    # The price of the line item.
    @[NASON::Field(key: "price", type: Price? | Null, nillable: true)]
    property price : Price? | Null

    # The quantity of the subscription, if the line item is a subscription or a proration.
    @[NASON::Field(key: "quantity", type: Int64? | Null, nillable: true)]
    property quantity : Int64? | Null

    # The subscription that the invoice item pertains to, if any.
    @[NASON::Field(key: "subscription", type: String? | Null, nillable: true)]
    property subscription : String? | Null

    # The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
    @[NASON::Field(key: "subscription_item", type: String?, nillable: true)]
    property subscription_item : String?

    # The amount of tax calculated per tax rate for this line item
    @[NASON::Field(key: "tax_amounts", type: Array(InvoiceTaxAmount)?, nillable: true)]
    property tax_amounts : Array(InvoiceTaxAmount)?

    # The tax rates which apply to the line item.
    @[NASON::Field(key: "tax_rates", type: Array(TaxRate)?, nillable: true)]
    property tax_rates : Array(TaxRate)?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @currency : String, @discountable : Bool, @id : String, @livemode : Bool, @metadata : Hash(String, String), @object : String, @period : InvoiceLineItemPeriod, @proration : Bool, @_type : String, @description : String? | Null = nil, @discount_amounts : Array(DiscountsResourceDiscountAmount)? | Null = nil, @discounts : Array(String | Discount)? | Null = nil, @invoice_item : String? = nil, @price : Price? | Null = nil, @quantity : Int64? | Null = nil, @subscription : String? | Null = nil, @subscription_item : String? = nil, @tax_amounts : Array(InvoiceTaxAmount)? = nil, @tax_rates : Array(TaxRate)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@description.nil? && !@description.null? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@invoice_item.nil? && @invoice_item.to_s.size > 5000
        invalid_properties.push("invalid value for \"invoice_item\", the character length must be smaller than or equal to 5000.")
      end

      if !@subscription.nil? && !@subscription.null? && @subscription.to_s.size > 5000
        invalid_properties.push("invalid value for \"subscription\", the character length must be smaller than or equal to 5000.")
      end

      if !@subscription_item.nil? && @subscription_item.to_s.size > 5000
        invalid_properties.push("invalid value for \"subscription_item\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@description.nil? && !@description.null? && @description.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false if !@invoice_item.nil? && @invoice_item.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["line_item"])
      return false unless object_validator.valid?(@object)
      return false if !@subscription.nil? && !@subscription.null? && @subscription.to_s.size > 5000
      return false if !@subscription_item.nil? && @subscription_item.to_s.size > 5000
      _type_validator = EnumAttributeValidator.new("String", ["invoiceitem", "subscription"])
      return false unless _type_validator.valid?(@_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && !@description.null? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_item Value to be assigned
    def invoice_item=(invoice_item)
      if !invoice_item.nil? && invoice_item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice_item\", the character length must be smaller than or equal to 5000.")
      end

      @invoice_item = invoice_item
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["line_item"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] subscription Value to be assigned
    def subscription=(subscription)
      if !subscription.nil? && !@subscription.null? && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\", the character length must be smaller than or equal to 5000.")
      end

      @subscription = subscription
    end

    # Custom attribute writer method with validation
    # @param [Object] subscription_item Value to be assigned
    def subscription_item=(subscription_item)
      if !subscription_item.nil? && subscription_item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_item\", the character length must be smaller than or equal to 5000.")
      end

      @subscription_item = subscription_item
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      validator = EnumAttributeValidator.new("String", ["invoiceitem", "subscription"])
      unless validator.valid?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{validator.allowable_values}.")
      end
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        currency == o.currency &&
        description == o.description &&
        discount_amounts == o.discount_amounts &&
        discountable == o.discountable &&
        discounts == o.discounts &&
        id == o.id &&
        invoice_item == o.invoice_item &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        object == o.object &&
        period == o.period &&
        price == o.price &&
        proration == o.proration &&
        quantity == o.quantity &&
        subscription == o.subscription &&
        subscription_item == o.subscription_item &&
        tax_amounts == o.tax_amounts &&
        tax_rates == o.tax_rates &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, currency, description, discount_amounts, discountable, discounts, id, invoice_item, livemode, metadata, object, period, price, proration, quantity, subscription, subscription_item, tax_amounts, tax_rates, _type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
