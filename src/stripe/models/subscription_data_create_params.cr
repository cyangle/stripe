#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class SubscriptionDataCreateParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 500

    @[JSON::Field(key: "effective_date", type: Stripe::SubscriptionDataCreateParamsEffectiveDate?, default: nil, required: false, nullable: false, emit_null: false)]
    getter effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate? = nil

    @[JSON::Field(key: "trial_period_days", type: Stripe::UpdateParamsSettingsApplicationFeeAmount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trial_period_days : Stripe::UpdateParamsSettingsApplicationFeeAmount? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @description : String? = nil,
      @effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate? = nil,
      @trial_period_days : Stripe::UpdateParamsSettingsApplicationFeeAmount? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_effective_date = @effective_date).nil?
        invalid_properties.concat(_effective_date.list_invalid_properties_for("effective_date")) if _effective_date.is_a?(OpenApi::Validatable)
      end
      unless (_trial_period_days = @trial_period_days).nil?
        invalid_properties.concat(_trial_period_days.list_invalid_properties_for("trial_period_days")) if _trial_period_days.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_effective_date = @effective_date).nil?
        return false if _effective_date.is_a?(OpenApi::Validatable) && !_effective_date.valid?
      end

      unless (_trial_period_days = @trial_period_days).nil?
        return false if _trial_period_days.is_a?(OpenApi::Validatable) && !_trial_period_days.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] effective_date Object to be assigned
    def effective_date=(effective_date : Stripe::SubscriptionDataCreateParamsEffectiveDate?)
      if effective_date.nil?
        return @effective_date = nil
      end
      _effective_date = effective_date.not_nil!
      _effective_date.validate if _effective_date.is_a?(OpenApi::Validatable)
      @effective_date = _effective_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_period_days Object to be assigned
    def trial_period_days=(trial_period_days : Stripe::UpdateParamsSettingsApplicationFeeAmount?)
      if trial_period_days.nil?
        return @trial_period_days = nil
      end
      _trial_period_days = trial_period_days.not_nil!
      _trial_period_days.validate if _trial_period_days.is_a?(OpenApi::Validatable)
      @trial_period_days = _trial_period_days
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@description, @effective_date, @trial_period_days)
  end
end
