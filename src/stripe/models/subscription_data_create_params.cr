#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SubscriptionDataCreateParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped


    # Optional properties

    @[JSON::Field(key: "effective_date", type: SubscriptionDataCreateParamsEffectiveDate?, presence: true, ignore_serialize: effective_date.nil? && !effective_date_present?)]
    property effective_date : SubscriptionDataCreateParamsEffectiveDate?

    @[JSON::Field(ignore: true)]
    property? effective_date_present : Bool = false

    @[JSON::Field(key: "trial_period_days", type: UpdateParams1ApplicationFeeAmount?, presence: true, ignore_serialize: trial_period_days.nil? && !trial_period_days_present?)]
    property trial_period_days : UpdateParams1ApplicationFeeAmount?

    @[JSON::Field(ignore: true)]
    property? trial_period_days_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Optional properties
      @effective_date : SubscriptionDataCreateParamsEffectiveDate? = nil, 
      @trial_period_days : UpdateParams1ApplicationFeeAmount? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?

      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@effective_date, @trial_period_days)
  end
end
