#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class SourceTypeAchCreditTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "account_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_number.nil? && !account_number_present?)]
    getter account_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? account_number_present : Bool = false

    @[JSON::Field(key: "bank_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: bank_name.nil? && !bank_name_present?)]
    getter bank_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? bank_name_present : Bool = false

    @[JSON::Field(key: "fingerprint", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: fingerprint.nil? && !fingerprint_present?)]
    getter fingerprint : String? = nil

    @[JSON::Field(ignore: true)]
    property? fingerprint_present : Bool = false

    @[JSON::Field(key: "refund_account_holder_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_account_holder_name.nil? && !refund_account_holder_name_present?)]
    getter refund_account_holder_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? refund_account_holder_name_present : Bool = false

    @[JSON::Field(key: "refund_account_holder_type", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_account_holder_type.nil? && !refund_account_holder_type_present?)]
    getter refund_account_holder_type : String? = nil

    @[JSON::Field(ignore: true)]
    property? refund_account_holder_type_present : Bool = false

    @[JSON::Field(key: "refund_routing_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_routing_number.nil? && !refund_routing_number_present?)]
    getter refund_routing_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? refund_routing_number_present : Bool = false

    @[JSON::Field(key: "routing_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: routing_number.nil? && !routing_number_present?)]
    getter routing_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? routing_number_present : Bool = false

    @[JSON::Field(key: "swift_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: swift_code.nil? && !swift_code_present?)]
    getter swift_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? swift_code_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_number : String? = nil,
      @bank_name : String? = nil,
      @fingerprint : String? = nil,
      @refund_account_holder_name : String? = nil,
      @refund_account_holder_type : String? = nil,
      @refund_routing_number : String? = nil,
      @routing_number : String? = nil,
      @swift_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_number Object to be assigned
    def account_number=(new_value : String?)
      @account_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_name Object to be assigned
    def bank_name=(new_value : String?)
      @bank_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fingerprint Object to be assigned
    def fingerprint=(new_value : String?)
      @fingerprint = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_account_holder_name Object to be assigned
    def refund_account_holder_name=(new_value : String?)
      @refund_account_holder_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_account_holder_type Object to be assigned
    def refund_account_holder_type=(new_value : String?)
      @refund_account_holder_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_routing_number Object to be assigned
    def refund_routing_number=(new_value : String?)
      @refund_routing_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] routing_number Object to be assigned
    def routing_number=(new_value : String?)
      @routing_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swift_code Object to be assigned
    def swift_code=(new_value : String?)
      @swift_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_number, @account_number_present, @bank_name, @bank_name_present, @fingerprint, @fingerprint_present, @refund_account_holder_name, @refund_account_holder_name_present, @refund_account_holder_type, @refund_account_holder_type_present, @refund_routing_number, @refund_routing_number_present, @routing_number, @routing_number_present, @swift_code, @swift_code_present)
  end
end
