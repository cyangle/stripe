#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SourceTypeAchCreditTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "account_number", type: String?, presence: true, ignore_serialize: account_number.nil? && !account_number_present?)]
    property account_number : String?

    @[JSON::Field(ignore: true)]
    property? account_number_present : Bool = false

    @[JSON::Field(key: "bank_name", type: String?, presence: true, ignore_serialize: bank_name.nil? && !bank_name_present?)]
    property bank_name : String?

    @[JSON::Field(ignore: true)]
    property? bank_name_present : Bool = false

    @[JSON::Field(key: "fingerprint", type: String?, presence: true, ignore_serialize: fingerprint.nil? && !fingerprint_present?)]
    property fingerprint : String?

    @[JSON::Field(ignore: true)]
    property? fingerprint_present : Bool = false

    @[JSON::Field(key: "refund_account_holder_name", type: String?, presence: true, ignore_serialize: refund_account_holder_name.nil? && !refund_account_holder_name_present?)]
    property refund_account_holder_name : String?

    @[JSON::Field(ignore: true)]
    property? refund_account_holder_name_present : Bool = false

    @[JSON::Field(key: "refund_account_holder_type", type: String?, presence: true, ignore_serialize: refund_account_holder_type.nil? && !refund_account_holder_type_present?)]
    property refund_account_holder_type : String?

    @[JSON::Field(ignore: true)]
    property? refund_account_holder_type_present : Bool = false

    @[JSON::Field(key: "refund_routing_number", type: String?, presence: true, ignore_serialize: refund_routing_number.nil? && !refund_routing_number_present?)]
    property refund_routing_number : String?

    @[JSON::Field(ignore: true)]
    property? refund_routing_number_present : Bool = false

    @[JSON::Field(key: "routing_number", type: String?, presence: true, ignore_serialize: routing_number.nil? && !routing_number_present?)]
    property routing_number : String?

    @[JSON::Field(ignore: true)]
    property? routing_number_present : Bool = false

    @[JSON::Field(key: "swift_code", type: String?, presence: true, ignore_serialize: swift_code.nil? && !swift_code_present?)]
    property swift_code : String?

    @[JSON::Field(ignore: true)]
    property? swift_code_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_number : String? = nil,
      @bank_name : String? = nil,
      @fingerprint : String? = nil,
      @refund_account_holder_name : String? = nil,
      @refund_account_holder_type : String? = nil,
      @refund_routing_number : String? = nil,
      @routing_number : String? = nil,
      @swift_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_number, @bank_name, @fingerprint, @refund_account_holder_name, @refund_account_holder_type, @refund_routing_number, @routing_number, @swift_code)
  end
end
