#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class BankConnectionsResourceBalance
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "as_of", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter as_of : Int64? = nil

    # The balances owed to (or by) the account holder.  Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.  Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
    @[JSON::Field(key: "current", type: Hash(String, Int64)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter current : Hash(String, Int64)? = nil

    # The `type` of the balance. An additional hash is included on the balance with a name matching this value.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["cash", "credit"])

    # Optional properties

    @[JSON::Field(key: "cash", type: Stripe::BankConnectionsResourceBalanceApiResourceCashBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cash : Stripe::BankConnectionsResourceBalanceApiResourceCashBalance? = nil

    @[JSON::Field(key: "credit", type: Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    getter credit : Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @as_of : Int64? = nil,
      @current : Hash(String, Int64)? = nil,
      @_type : String? = nil,
      # Optional properties
      @cash : Stripe::BankConnectionsResourceBalanceApiResourceCashBalance? = nil,
      @credit : Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"as_of\" is required and cannot be null") if @as_of.nil?
      invalid_properties.push("\"current\" is required and cannot be null") if @current.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      # This is a model cash : Stripe::BankConnectionsResourceBalanceApiResourceCashBalance?
      # This is a model credit : Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @as_of.nil?
      return false if @current.nil?
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] as_of Object to be assigned
    def as_of=(as_of : Int64?)
      if as_of.nil?
        raise ArgumentError.new("\"as_of\" is required and cannot be null")
      end
      @as_of = as_of
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current Object to be assigned
    def current=(current : Hash(String, Int64)?)
      if current.nil?
        raise ArgumentError.new("\"current\" is required and cannot be null")
      end
      @current = current
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cash Object to be assigned
    def cash=(cash : Stripe::BankConnectionsResourceBalanceApiResourceCashBalance?)
      if cash.nil?
        return @cash = nil
      end
      @cash = cash
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit Object to be assigned
    def credit=(credit : Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance?)
      if credit.nil?
        return @credit = nil
      end
      @credit = credit
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@as_of, @current, @_type, @cash, @credit)
  end
end
