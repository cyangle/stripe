#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./bank_connections_resource_balance_api_resource_cash_balance"
require "./bank_connections_resource_balance_api_resource_credit_balance"

module Stripe
  #
  class BankConnectionsResourceBalance
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "as_of", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter as_of : Int64? = nil

    @[JSON::Field(key: "current", type: Hash(String, Int32)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter current : Hash(String, Int32)? = nil

    # The `type` of the balance. An additional hash is included on the balance with a name matching this value.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [cash, credit]."
    VALID_VALUES_FOR__TYPE  = String.static_array("cash", "credit")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "cash", type: Stripe::BankConnectionsResourceBalanceApiResourceCashBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cash : Stripe::BankConnectionsResourceBalanceApiResourceCashBalance? = nil

    @[JSON::Field(key: "credit", type: Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance?, default: nil, required: false, nullable: false, emit_null: false)]
    getter credit : Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @as_of : Int64? = nil,
      @current : Hash(String, Int32)? = nil,
      @_type : String? = nil,
      # Optional properties
      @cash : Stripe::BankConnectionsResourceBalanceApiResourceCashBalance? = nil,
      @credit : Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"as_of\" is required and cannot be null") if @as_of.nil?

      invalid_properties.push("\"current\" is required and cannot be null") if @current.nil?

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_cash = @cash).nil?
        invalid_properties.concat(_cash.list_invalid_properties_for("cash")) if _cash.is_a?(OpenApi::Validatable)
      end
      unless (_credit = @credit).nil?
        invalid_properties.concat(_credit.list_invalid_properties_for("credit")) if _credit.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @as_of.nil?

      return false if @current.nil?

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_cash = @cash).nil?
        return false if _cash.is_a?(OpenApi::Validatable) && !_cash.valid?
      end

      unless (_credit = @credit).nil?
        return false if _credit.is_a?(OpenApi::Validatable) && !_credit.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] as_of Object to be assigned
    def as_of=(new_value : Int64?)
      raise ArgumentError.new("\"as_of\" is required and cannot be null") if new_value.nil?

      @as_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current Object to be assigned
    def current=(new_value : Hash(String, Int32)?)
      raise ArgumentError.new("\"current\" is required and cannot be null") if new_value.nil?

      @current = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cash Object to be assigned
    def cash=(new_value : Stripe::BankConnectionsResourceBalanceApiResourceCashBalance?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cash = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit Object to be assigned
    def credit=(new_value : Stripe::BankConnectionsResourceBalanceApiResourceCreditBalance?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @credit = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@as_of, @current, @_type, @cash, @credit)
  end
end
