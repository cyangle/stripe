#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./transfer"
require "./transfer_balance_transaction"
require "./transfer_destination"
require "./transfer_destination_payment"
require "./transfer_reversal_list"
require "./transfer_source_transaction"

module Stripe
  # ID of the transfer that was reversed.
  class TransferReversalTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount in cents (or local equivalent) to be transferred.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    # Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
    @[JSON::Field(key: "amount_reversed", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount_reversed : Int64? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::TransferBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property balance_transaction : Stripe::TransferBalanceTransaction? = nil

    # Time that this record of the transfer was first created.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    @[JSON::Field(key: "destination", type: Stripe::TransferDestination?, default: nil, required: true, nullable: true, emit_null: true)]
    property destination : Stripe::TransferDestination? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    property metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [transfer]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("transfer")

    @[JSON::Field(key: "reversals", type: Stripe::TransferReversalList?, default: nil, required: true, nullable: false, emit_null: false)]
    property reversals : Stripe::TransferReversalList? = nil

    # Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
    @[JSON::Field(key: "reversed", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property reversed : Bool? = nil

    @[JSON::Field(key: "source_transaction", type: Stripe::TransferSourceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property source_transaction : Stripe::TransferSourceTransaction? = nil

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    @[JSON::Field(key: "transfer_group", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property transfer_group : String? = nil
    MAX_LENGTH_FOR_TRANSFER_GROUP = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "destination_payment", type: Stripe::TransferDestinationPayment?, default: nil, required: false, nullable: false, emit_null: false)]
    property destination_payment : Stripe::TransferDestinationPayment? = nil

    # The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
    @[JSON::Field(key: "source_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property source_type : String? = nil
    MAX_LENGTH_FOR_SOURCE_TYPE = 5000

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        String,
        Stripe::Transfer,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_reversed : Int64? = nil,
      @balance_transaction : Stripe::TransferBalanceTransaction? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @description : String? = nil,
      @destination : Stripe::TransferDestination? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @reversals : Stripe::TransferReversalList? = nil,
      @reversed : Bool? = nil,
      @source_transaction : Stripe::TransferSourceTransaction? = nil,
      @transfer_group : String? = nil,
      # Optional properties
      @destination_payment : Stripe::TransferDestinationPayment? = nil,
      @source_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_reversed, @balance_transaction, @created, @currency, @description, @destination, @id, @livemode, @metadata, @object, @reversals, @reversed, @source_transaction, @transfer_group, @destination_payment, @source_type)
  end
end
