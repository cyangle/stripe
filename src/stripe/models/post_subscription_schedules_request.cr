#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostSubscriptionSchedulesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The identifier of the customer to create the subscription schedule for.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil

    @[JSON::Field(key: "default_settings", type: Stripe::DefaultSettingsParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_settings : Stripe::DefaultSettingsParams? = nil

    # Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
    @[JSON::Field(key: "end_behavior", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter end_behavior : String? = nil

    ENUM_VALIDATOR_FOR_END_BEHAVIOR = EnumValidator.new("end_behavior", "String", ["cancel", "none", "release", "renew"])

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.
    @[JSON::Field(key: "from_subscription", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter from_subscription : String? = nil

    @[JSON::Field(key: "metadata", type: Stripe::PostAccountRequestMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::PostAccountRequestMetadata? = nil

    # List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
    @[JSON::Field(key: "phases", type: Array(Stripe::PhaseConfigurationParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phases : Array(Stripe::PhaseConfigurationParams)? = nil

    @[JSON::Field(key: "start_date", type: Stripe::PostSubscriptionSchedulesRequestStartDate?, default: nil, required: false, nullable: false, emit_null: false)]
    getter start_date : Stripe::PostSubscriptionSchedulesRequestStartDate? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @customer : String? = nil,
      @default_settings : Stripe::DefaultSettingsParams? = nil,
      @end_behavior : String? = nil,
      @expand : Array(String)? = nil,
      @from_subscription : String? = nil,
      @metadata : Stripe::PostAccountRequestMetadata? = nil,
      @phases : Array(Stripe::PhaseConfigurationParams)? = nil,
      @start_date : Stripe::PostSubscriptionSchedulesRequestStartDate? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _customer = @customer
        if _customer.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _default_settings = @default_settings
        if _default_settings.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_default_settings.list_invalid_properties_for("default_settings"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_END_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid?(@end_behavior)

      if _from_subscription = @from_subscription
        if _from_subscription.to_s.size > 5000
          invalid_properties.push("invalid value for \"from_subscription\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _metadata = @metadata
        if _metadata.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_metadata.list_invalid_properties_for("metadata"))
        end
      end
      if _phases = @phases
        if _phases.is_a?(Array)
          _phases.each do |item|
            if item.is_a?(OpenApi::Validatable)
              invalid_properties.concat(item.list_invalid_properties_for("phases"))
            end
          end
        end
      end
      if _start_date = @start_date
        if _start_date.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_start_date.list_invalid_properties_for("start_date"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _customer = @customer
        return false if _customer.to_s.size > 5000
      end
      if _default_settings = @default_settings
        if _default_settings.is_a?(OpenApi::Validatable)
          return false unless _default_settings.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid?(@end_behavior)

      if _from_subscription = @from_subscription
        return false if _from_subscription.to_s.size > 5000
      end
      if _metadata = @metadata
        if _metadata.is_a?(OpenApi::Validatable)
          return false unless _metadata.valid?
        end
      end
      if _phases = @phases
        if _phases.is_a?(Array)
          _phases.each do |item|
            if item.is_a?(OpenApi::Validatable)
              return false unless item.valid?
            end
          end
        end
      end
      if _start_date = @start_date
        if _start_date.is_a?(OpenApi::Validatable)
          return false unless _start_date.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      if _customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = _customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_settings Object to be assigned
    def default_settings=(default_settings : Stripe::DefaultSettingsParams?)
      if default_settings.nil?
        return @default_settings = nil
      end
      _default_settings = default_settings.not_nil!
      if _default_settings.is_a?(OpenApi::Validatable)
        _default_settings.validate
      end
      @default_settings = _default_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_behavior Object to be assigned
    def end_behavior=(end_behavior : String?)
      if end_behavior.nil?
        return @end_behavior = nil
      end
      _end_behavior = end_behavior.not_nil!
      ENUM_VALIDATOR_FOR_END_BEHAVIOR.valid!(_end_behavior)
      @end_behavior = _end_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      _expand = expand.not_nil!
      @expand = _expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] from_subscription Object to be assigned
    def from_subscription=(from_subscription : String?)
      if from_subscription.nil?
        return @from_subscription = nil
      end
      _from_subscription = from_subscription.not_nil!
      if _from_subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"from_subscription\", the character length must be smaller than or equal to 5000.")
      end

      @from_subscription = _from_subscription
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Stripe::PostAccountRequestMetadata?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      if _metadata.is_a?(OpenApi::Validatable)
        _metadata.validate
      end
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phases Object to be assigned
    def phases=(phases : Array(Stripe::PhaseConfigurationParams)?)
      if phases.nil?
        return @phases = nil
      end
      _phases = phases.not_nil!
      if _phases.is_a?(Array)
        _phases.each do |item|
          if item.is_a?(OpenApi::Validatable)
            item.validate
          end
        end
      end
      @phases = _phases
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(start_date : Stripe::PostSubscriptionSchedulesRequestStartDate?)
      if start_date.nil?
        return @start_date = nil
      end
      _start_date = start_date.not_nil!
      if _start_date.is_a?(OpenApi::Validatable)
        _start_date.validate
      end
      @start_date = _start_date
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@customer, @default_settings, @end_behavior, @expand, @from_subscription, @metadata, @phases, @start_date)
  end
end
