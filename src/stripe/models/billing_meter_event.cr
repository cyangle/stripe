#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  # A billing meter event represents a customer's usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event's payload and how those events are aggregated for billing.
  class BillingMeterEvent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # The name of the meter event. Corresponds with the `event_name` field on a meter.
    @[JSON::Field(key: "event_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter event_name : String? = nil
    MAX_LENGTH_FOR_EVENT_NAME = 100

    # A unique identifier for the event.
    @[JSON::Field(key: "identifier", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter identifier : String? = nil
    MAX_LENGTH_FOR_IDENTIFIER = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [billing.meter_event]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("billing.meter_event")

    # The payload of the event. This contains the fields corresponding to a meter's `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://stripe.com/docs/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).
    @[JSON::Field(key: "payload", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payload : Hash(String, String)? = nil

    # The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "timestamp", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter timestamp : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @event_name : String? = nil,
      @identifier : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @payload : Hash(String, String)? = nil,
      @timestamp : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"event_name\" is required and cannot be null") if @event_name.nil?

      unless (_event_name = @event_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("event_name", _event_name.to_s.size, MAX_LENGTH_FOR_EVENT_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"identifier\" is required and cannot be null") if @identifier.nil?

      unless (_identifier = @identifier).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("identifier", _identifier.to_s.size, MAX_LENGTH_FOR_IDENTIFIER)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"payload\" is required and cannot be null") if @payload.nil?

      invalid_properties.push("\"timestamp\" is required and cannot be null") if @timestamp.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @event_name.nil?
      unless (_event_name = @event_name).nil?
        return false if _event_name.to_s.size > MAX_LENGTH_FOR_EVENT_NAME
      end

      return false if @identifier.nil?
      unless (_identifier = @identifier).nil?
        return false if _identifier.to_s.size > MAX_LENGTH_FOR_IDENTIFIER
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @payload.nil?

      return false if @timestamp.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_name Object to be assigned
    def event_name=(new_value : String?)
      raise ArgumentError.new("\"event_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("event_name", new_value.to_s.size, MAX_LENGTH_FOR_EVENT_NAME)
      end

      @event_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identifier Object to be assigned
    def identifier=(new_value : String?)
      raise ArgumentError.new("\"identifier\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("identifier", new_value.to_s.size, MAX_LENGTH_FOR_IDENTIFIER)
      end

      @identifier = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payload Object to be assigned
    def payload=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"payload\" is required and cannot be null") if new_value.nil?

      @payload = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] timestamp Object to be assigned
    def timestamp=(new_value : Int64?)
      raise ArgumentError.new("\"timestamp\" is required and cannot be null") if new_value.nil?

      @timestamp = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @event_name, @identifier, @livemode, @object, @payload, @timestamp)
  end
end
