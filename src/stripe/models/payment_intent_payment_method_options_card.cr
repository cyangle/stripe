#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_method_options_card_installments"
require "./payment_method_options_card_mandate_options"

module Stripe
  #
  class PaymentIntentPaymentMethodOptionsCard
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "installments", type: Stripe::PaymentMethodOptionsCardInstallments?, default: nil, required: true, nullable: true, emit_null: true)]
    getter installments : Stripe::PaymentMethodOptionsCardInstallments? = nil

    @[JSON::Field(key: "mandate_options", type: Stripe::PaymentMethodOptionsCardMandateOptions?, default: nil, required: true, nullable: true, emit_null: true)]
    getter mandate_options : Stripe::PaymentMethodOptionsCardMandateOptions? = nil

    # Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
    @[JSON::Field(key: "network", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter network : String? = nil
    ERROR_MESSAGE_FOR_NETWORK = "invalid value for \"network\", must be one of [amex, cartes_bancaires, diners, discover, eftpos_au, girocard, interac, jcb, mastercard, unionpay, unknown, visa]."
    VALID_VALUES_FOR_NETWORK  = String.static_array("amex", "cartes_bancaires", "diners", "discover", "eftpos_au", "girocard", "interac", "jcb", "mastercard", "unionpay", "unknown", "visa")

    # We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    @[JSON::Field(key: "request_three_d_secure", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter request_three_d_secure : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_THREE_D_SECURE = "invalid value for \"request_three_d_secure\", must be one of [any, automatic, challenge]."
    VALID_VALUES_FOR_REQUEST_THREE_D_SECURE  = String.static_array("any", "automatic", "challenge")

    # End of Required Properties

    # Optional Properties

    # Controls when the funds will be captured from the customer's account.
    @[JSON::Field(key: "capture_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter capture_method : String? = nil
    ERROR_MESSAGE_FOR_CAPTURE_METHOD = "invalid value for \"capture_method\", must be one of [manual]."
    VALID_VALUES_FOR_CAPTURE_METHOD  = String.static_array("manual")

    # Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent.
    @[JSON::Field(key: "request_extended_authorization", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_extended_authorization : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_EXTENDED_AUTHORIZATION = "invalid value for \"request_extended_authorization\", must be one of [if_available, never]."
    VALID_VALUES_FOR_REQUEST_EXTENDED_AUTHORIZATION  = String.static_array("if_available", "never")

    # Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent.
    @[JSON::Field(key: "request_incremental_authorization", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_incremental_authorization : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_INCREMENTAL_AUTHORIZATION = "invalid value for \"request_incremental_authorization\", must be one of [if_available, never]."
    VALID_VALUES_FOR_REQUEST_INCREMENTAL_AUTHORIZATION  = String.static_array("if_available", "never")

    # Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent.
    @[JSON::Field(key: "request_multicapture", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_multicapture : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_MULTICAPTURE = "invalid value for \"request_multicapture\", must be one of [if_available, never]."
    VALID_VALUES_FOR_REQUEST_MULTICAPTURE  = String.static_array("if_available", "never")

    # Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent.
    @[JSON::Field(key: "request_overcapture", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_overcapture : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_OVERCAPTURE = "invalid value for \"request_overcapture\", must be one of [if_available, never]."
    VALID_VALUES_FOR_REQUEST_OVERCAPTURE  = String.static_array("if_available", "never")

    # When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    @[JSON::Field(key: "require_cvc_recollection", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter require_cvc_recollection : Bool? = nil

    # Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
    @[JSON::Field(key: "setup_future_usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_future_usage : String? = nil
    ERROR_MESSAGE_FOR_SETUP_FUTURE_USAGE = "invalid value for \"setup_future_usage\", must be one of [none, off_session, on_session]."
    VALID_VALUES_FOR_SETUP_FUTURE_USAGE  = String.static_array("none", "off_session", "on_session")

    # Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
    @[JSON::Field(key: "statement_descriptor_suffix_kana", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kana : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANA = 5000

    # Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
    @[JSON::Field(key: "statement_descriptor_suffix_kanji", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kanji : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANJI = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @installments : Stripe::PaymentMethodOptionsCardInstallments? = nil,
      @mandate_options : Stripe::PaymentMethodOptionsCardMandateOptions? = nil,
      @network : String? = nil,
      @request_three_d_secure : String? = nil,
      # Optional properties
      @capture_method : String? = nil,
      @request_extended_authorization : String? = nil,
      @request_incremental_authorization : String? = nil,
      @request_multicapture : String? = nil,
      @request_overcapture : String? = nil,
      @require_cvc_recollection : Bool? = nil,
      @setup_future_usage : String? = nil,
      @statement_descriptor_suffix_kana : String? = nil,
      @statement_descriptor_suffix_kanji : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_installments = @installments).nil?
        invalid_properties.concat(_installments.list_invalid_properties_for("installments")) if _installments.is_a?(OpenApi::Validatable)
      end
      unless (_mandate_options = @mandate_options).nil?
        invalid_properties.concat(_mandate_options.list_invalid_properties_for("mandate_options")) if _mandate_options.is_a?(OpenApi::Validatable)
      end
      unless (_network = @network).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_NETWORK) unless OpenApi::EnumValidator.valid?(_network, VALID_VALUES_FOR_NETWORK)
      end
      unless (_request_three_d_secure = @request_three_d_secure).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_THREE_D_SECURE) unless OpenApi::EnumValidator.valid?(_request_three_d_secure, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end
      unless (_capture_method = @capture_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CAPTURE_METHOD) unless OpenApi::EnumValidator.valid?(_capture_method, VALID_VALUES_FOR_CAPTURE_METHOD)
      end
      unless (_request_extended_authorization = @request_extended_authorization).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_EXTENDED_AUTHORIZATION) unless OpenApi::EnumValidator.valid?(_request_extended_authorization, VALID_VALUES_FOR_REQUEST_EXTENDED_AUTHORIZATION)
      end
      unless (_request_incremental_authorization = @request_incremental_authorization).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_INCREMENTAL_AUTHORIZATION) unless OpenApi::EnumValidator.valid?(_request_incremental_authorization, VALID_VALUES_FOR_REQUEST_INCREMENTAL_AUTHORIZATION)
      end
      unless (_request_multicapture = @request_multicapture).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_MULTICAPTURE) unless OpenApi::EnumValidator.valid?(_request_multicapture, VALID_VALUES_FOR_REQUEST_MULTICAPTURE)
      end
      unless (_request_overcapture = @request_overcapture).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_OVERCAPTURE) unless OpenApi::EnumValidator.valid?(_request_overcapture, VALID_VALUES_FOR_REQUEST_OVERCAPTURE)
      end

      unless (_setup_future_usage = @setup_future_usage).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SETUP_FUTURE_USAGE) unless OpenApi::EnumValidator.valid?(_setup_future_usage, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end
      unless (_statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_suffix_kana", _statement_descriptor_suffix_kana.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANA)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_suffix_kanji", _statement_descriptor_suffix_kanji.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANJI)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_installments = @installments).nil?
        return false if _installments.is_a?(OpenApi::Validatable) && !_installments.valid?
      end

      unless (_mandate_options = @mandate_options).nil?
        return false if _mandate_options.is_a?(OpenApi::Validatable) && !_mandate_options.valid?
      end

      unless (_network = @network).nil?
        return false unless OpenApi::EnumValidator.valid?(_network, VALID_VALUES_FOR_NETWORK)
      end

      unless (_request_three_d_secure = @request_three_d_secure).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_three_d_secure, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end

      unless (_capture_method = @capture_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_capture_method, VALID_VALUES_FOR_CAPTURE_METHOD)
      end

      unless (_request_extended_authorization = @request_extended_authorization).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_extended_authorization, VALID_VALUES_FOR_REQUEST_EXTENDED_AUTHORIZATION)
      end

      unless (_request_incremental_authorization = @request_incremental_authorization).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_incremental_authorization, VALID_VALUES_FOR_REQUEST_INCREMENTAL_AUTHORIZATION)
      end

      unless (_request_multicapture = @request_multicapture).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_multicapture, VALID_VALUES_FOR_REQUEST_MULTICAPTURE)
      end

      unless (_request_overcapture = @request_overcapture).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_overcapture, VALID_VALUES_FOR_REQUEST_OVERCAPTURE)
      end

      unless (_setup_future_usage = @setup_future_usage).nil?
        return false unless OpenApi::EnumValidator.valid?(_setup_future_usage, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end

      unless (_statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana).nil?
        return false if _statement_descriptor_suffix_kana.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANA
      end

      unless (_statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji).nil?
        return false if _statement_descriptor_suffix_kanji.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANJI
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] installments Object to be assigned
    def installments=(new_value : Stripe::PaymentMethodOptionsCardInstallments?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @installments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate_options Object to be assigned
    def mandate_options=(new_value : Stripe::PaymentMethodOptionsCardMandateOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mandate_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("network", new_value, VALID_VALUES_FOR_NETWORK)
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_three_d_secure Object to be assigned
    def request_three_d_secure=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_three_d_secure", new_value, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end

      @request_three_d_secure = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capture_method Object to be assigned
    def capture_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("capture_method", new_value, VALID_VALUES_FOR_CAPTURE_METHOD)
      end

      @capture_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_extended_authorization Object to be assigned
    def request_extended_authorization=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_extended_authorization", new_value, VALID_VALUES_FOR_REQUEST_EXTENDED_AUTHORIZATION)
      end

      @request_extended_authorization = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_incremental_authorization Object to be assigned
    def request_incremental_authorization=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_incremental_authorization", new_value, VALID_VALUES_FOR_REQUEST_INCREMENTAL_AUTHORIZATION)
      end

      @request_incremental_authorization = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_multicapture Object to be assigned
    def request_multicapture=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_multicapture", new_value, VALID_VALUES_FOR_REQUEST_MULTICAPTURE)
      end

      @request_multicapture = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_overcapture Object to be assigned
    def request_overcapture=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_overcapture", new_value, VALID_VALUES_FOR_REQUEST_OVERCAPTURE)
      end

      @request_overcapture = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] require_cvc_recollection Object to be assigned
    def require_cvc_recollection=(new_value : Bool?)
      @require_cvc_recollection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("setup_future_usage", new_value, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end

      @setup_future_usage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kana Object to be assigned
    def statement_descriptor_suffix_kana=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix_kana", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANA)
      end

      @statement_descriptor_suffix_kana = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kanji Object to be assigned
    def statement_descriptor_suffix_kanji=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix_kanji", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX_KANJI)
      end

      @statement_descriptor_suffix_kanji = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@installments, @mandate_options, @network, @request_three_d_secure, @capture_method, @request_extended_authorization, @request_incremental_authorization, @request_multicapture, @request_overcapture, @require_cvc_recollection, @setup_future_usage, @statement_descriptor_suffix_kana, @statement_descriptor_suffix_kanji)
  end
end
