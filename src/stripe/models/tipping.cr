#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Tipping
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "aud", type: CurrencySpecificConfig?, presence: true, ignore_serialize: aud.nil? && !aud_present?)]
    property aud : CurrencySpecificConfig?

    @[JSON::Field(ignore: true)]
    property? aud_present : Bool = false

    @[JSON::Field(key: "cad", type: CurrencySpecificConfig1?, presence: true, ignore_serialize: cad.nil? && !cad_present?)]
    property cad : CurrencySpecificConfig1?

    @[JSON::Field(ignore: true)]
    property? cad_present : Bool = false

    @[JSON::Field(key: "chf", type: CurrencySpecificConfig2?, presence: true, ignore_serialize: chf.nil? && !chf_present?)]
    property chf : CurrencySpecificConfig2?

    @[JSON::Field(ignore: true)]
    property? chf_present : Bool = false

    @[JSON::Field(key: "czk", type: CurrencySpecificConfig3?, presence: true, ignore_serialize: czk.nil? && !czk_present?)]
    property czk : CurrencySpecificConfig3?

    @[JSON::Field(ignore: true)]
    property? czk_present : Bool = false

    @[JSON::Field(key: "dkk", type: CurrencySpecificConfig4?, presence: true, ignore_serialize: dkk.nil? && !dkk_present?)]
    property dkk : CurrencySpecificConfig4?

    @[JSON::Field(ignore: true)]
    property? dkk_present : Bool = false

    @[JSON::Field(key: "eur", type: CurrencySpecificConfig5?, presence: true, ignore_serialize: eur.nil? && !eur_present?)]
    property eur : CurrencySpecificConfig5?

    @[JSON::Field(ignore: true)]
    property? eur_present : Bool = false

    @[JSON::Field(key: "gbp", type: CurrencySpecificConfig6?, presence: true, ignore_serialize: gbp.nil? && !gbp_present?)]
    property gbp : CurrencySpecificConfig6?

    @[JSON::Field(ignore: true)]
    property? gbp_present : Bool = false

    @[JSON::Field(key: "hkd", type: CurrencySpecificConfig7?, presence: true, ignore_serialize: hkd.nil? && !hkd_present?)]
    property hkd : CurrencySpecificConfig7?

    @[JSON::Field(ignore: true)]
    property? hkd_present : Bool = false

    @[JSON::Field(key: "myr", type: CurrencySpecificConfig8?, presence: true, ignore_serialize: myr.nil? && !myr_present?)]
    property myr : CurrencySpecificConfig8?

    @[JSON::Field(ignore: true)]
    property? myr_present : Bool = false

    @[JSON::Field(key: "nok", type: CurrencySpecificConfig9?, presence: true, ignore_serialize: nok.nil? && !nok_present?)]
    property nok : CurrencySpecificConfig9?

    @[JSON::Field(ignore: true)]
    property? nok_present : Bool = false

    @[JSON::Field(key: "nzd", type: CurrencySpecificConfig10?, presence: true, ignore_serialize: nzd.nil? && !nzd_present?)]
    property nzd : CurrencySpecificConfig10?

    @[JSON::Field(ignore: true)]
    property? nzd_present : Bool = false

    @[JSON::Field(key: "sek", type: CurrencySpecificConfig11?, presence: true, ignore_serialize: sek.nil? && !sek_present?)]
    property sek : CurrencySpecificConfig11?

    @[JSON::Field(ignore: true)]
    property? sek_present : Bool = false

    @[JSON::Field(key: "sgd", type: CurrencySpecificConfig12?, presence: true, ignore_serialize: sgd.nil? && !sgd_present?)]
    property sgd : CurrencySpecificConfig12?

    @[JSON::Field(ignore: true)]
    property? sgd_present : Bool = false

    @[JSON::Field(key: "usd", type: CurrencySpecificConfig13?, presence: true, ignore_serialize: usd.nil? && !usd_present?)]
    property usd : CurrencySpecificConfig13?

    @[JSON::Field(ignore: true)]
    property? usd_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @aud : CurrencySpecificConfig? = nil, @cad : CurrencySpecificConfig1? = nil, @chf : CurrencySpecificConfig2? = nil, @czk : CurrencySpecificConfig3? = nil, @dkk : CurrencySpecificConfig4? = nil, @eur : CurrencySpecificConfig5? = nil, @gbp : CurrencySpecificConfig6? = nil, @hkd : CurrencySpecificConfig7? = nil, @myr : CurrencySpecificConfig8? = nil, @nok : CurrencySpecificConfig9? = nil, @nzd : CurrencySpecificConfig10? = nil, @sek : CurrencySpecificConfig11? = nil, @sgd : CurrencySpecificConfig12? = nil, @usd : CurrencySpecificConfig13? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        aud == o.aud &&
        cad == o.cad &&
        chf == o.chf &&
        czk == o.czk &&
        dkk == o.dkk &&
        eur == o.eur &&
        gbp == o.gbp &&
        hkd == o.hkd &&
        myr == o.myr &&
        nok == o.nok &&
        nzd == o.nzd &&
        sek == o.sek &&
        sgd == o.sgd &&
        usd == o.usd
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@aud, @cad, @chf, @czk, @dkk, @eur, @gbp, @hkd, @myr, @nok, @nzd, @sek, @sgd, @usd)
  end
end
