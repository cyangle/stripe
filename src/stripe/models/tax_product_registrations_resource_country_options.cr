#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./tax_product_registrations_resource_country_options_canada"
require "./tax_product_registrations_resource_country_options_default"
require "./tax_product_registrations_resource_country_options_europe"
require "./tax_product_registrations_resource_country_options_simplified"
require "./tax_product_registrations_resource_country_options_united_states"

module Stripe
  #
  class TaxProductRegistrationsResourceCountryOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "ae", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ae : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "at", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter at : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "au", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "be", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter be : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "bg", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bg : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "bh", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bh : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "ca", type: Stripe::TaxProductRegistrationsResourceCountryOptionsCanada?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ca : Stripe::TaxProductRegistrationsResourceCountryOptionsCanada? = nil

    @[JSON::Field(key: "ch", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ch : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "cl", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cl : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "co", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter co : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "cy", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cy : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "cz", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cz : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "de", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter de : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "dk", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter dk : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "ee", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ee : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "eg", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eg : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "es", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter es : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "fi", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fi : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "fr", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fr : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "gb", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter gb : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "ge", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ge : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "gr", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter gr : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "hr", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter hr : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "hu", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter hu : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "id", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "ie", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ie : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "is", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter is : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "it", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter it : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "jp", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jp : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "ke", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ke : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "kr", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter kr : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "kz", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter kz : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "lt", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter lt : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "lu", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter lu : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "lv", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter lv : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "mt", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mt : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "mx", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mx : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "my", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter my : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "ng", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ng : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "nl", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter nl : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "no", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter no : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "nz", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter nz : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "om", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter om : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "pl", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pl : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "pt", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pt : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "ro", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ro : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "sa", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sa : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "se", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter se : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "sg", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sg : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    @[JSON::Field(key: "si", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter si : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "sk", type: Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sk : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil

    @[JSON::Field(key: "th", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter th : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "tr", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tr : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "us", type: Stripe::TaxProductRegistrationsResourceCountryOptionsUnitedStates?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us : Stripe::TaxProductRegistrationsResourceCountryOptionsUnitedStates? = nil

    @[JSON::Field(key: "vn", type: Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?, default: nil, required: false, nullable: false, emit_null: false)]
    getter vn : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil

    @[JSON::Field(key: "za", type: Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?, default: nil, required: false, nullable: false, emit_null: false)]
    getter za : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @ae : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @at : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @au : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @be : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @bg : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @bh : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @ca : Stripe::TaxProductRegistrationsResourceCountryOptionsCanada? = nil,
      @ch : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @cl : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @co : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @cy : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @cz : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @de : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @dk : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @ee : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @eg : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @es : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @fi : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @fr : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @gb : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @ge : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @gr : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @hr : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @hu : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @id : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @ie : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @is : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @it : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @jp : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @ke : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @kr : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @kz : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @lt : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @lu : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @lv : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @mt : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @mx : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @my : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @ng : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @nl : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @no : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @nz : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @om : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @pl : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @pt : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @ro : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @sa : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @se : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @sg : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil,
      @si : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @sk : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope? = nil,
      @th : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @tr : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @us : Stripe::TaxProductRegistrationsResourceCountryOptionsUnitedStates? = nil,
      @vn : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified? = nil,
      @za : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_ae = @ae).nil?
        invalid_properties.concat(_ae.list_invalid_properties_for("ae")) if _ae.is_a?(OpenApi::Validatable)
      end
      unless (_at = @at).nil?
        invalid_properties.concat(_at.list_invalid_properties_for("at")) if _at.is_a?(OpenApi::Validatable)
      end
      unless (_au = @au).nil?
        invalid_properties.concat(_au.list_invalid_properties_for("au")) if _au.is_a?(OpenApi::Validatable)
      end
      unless (_be = @be).nil?
        invalid_properties.concat(_be.list_invalid_properties_for("be")) if _be.is_a?(OpenApi::Validatable)
      end
      unless (_bg = @bg).nil?
        invalid_properties.concat(_bg.list_invalid_properties_for("bg")) if _bg.is_a?(OpenApi::Validatable)
      end
      unless (_bh = @bh).nil?
        invalid_properties.concat(_bh.list_invalid_properties_for("bh")) if _bh.is_a?(OpenApi::Validatable)
      end
      unless (_ca = @ca).nil?
        invalid_properties.concat(_ca.list_invalid_properties_for("ca")) if _ca.is_a?(OpenApi::Validatable)
      end
      unless (_ch = @ch).nil?
        invalid_properties.concat(_ch.list_invalid_properties_for("ch")) if _ch.is_a?(OpenApi::Validatable)
      end
      unless (_cl = @cl).nil?
        invalid_properties.concat(_cl.list_invalid_properties_for("cl")) if _cl.is_a?(OpenApi::Validatable)
      end
      unless (_co = @co).nil?
        invalid_properties.concat(_co.list_invalid_properties_for("co")) if _co.is_a?(OpenApi::Validatable)
      end
      unless (_cy = @cy).nil?
        invalid_properties.concat(_cy.list_invalid_properties_for("cy")) if _cy.is_a?(OpenApi::Validatable)
      end
      unless (_cz = @cz).nil?
        invalid_properties.concat(_cz.list_invalid_properties_for("cz")) if _cz.is_a?(OpenApi::Validatable)
      end
      unless (_de = @de).nil?
        invalid_properties.concat(_de.list_invalid_properties_for("de")) if _de.is_a?(OpenApi::Validatable)
      end
      unless (_dk = @dk).nil?
        invalid_properties.concat(_dk.list_invalid_properties_for("dk")) if _dk.is_a?(OpenApi::Validatable)
      end
      unless (_ee = @ee).nil?
        invalid_properties.concat(_ee.list_invalid_properties_for("ee")) if _ee.is_a?(OpenApi::Validatable)
      end
      unless (_eg = @eg).nil?
        invalid_properties.concat(_eg.list_invalid_properties_for("eg")) if _eg.is_a?(OpenApi::Validatable)
      end
      unless (_es = @es).nil?
        invalid_properties.concat(_es.list_invalid_properties_for("es")) if _es.is_a?(OpenApi::Validatable)
      end
      unless (_fi = @fi).nil?
        invalid_properties.concat(_fi.list_invalid_properties_for("fi")) if _fi.is_a?(OpenApi::Validatable)
      end
      unless (_fr = @fr).nil?
        invalid_properties.concat(_fr.list_invalid_properties_for("fr")) if _fr.is_a?(OpenApi::Validatable)
      end
      unless (_gb = @gb).nil?
        invalid_properties.concat(_gb.list_invalid_properties_for("gb")) if _gb.is_a?(OpenApi::Validatable)
      end
      unless (_ge = @ge).nil?
        invalid_properties.concat(_ge.list_invalid_properties_for("ge")) if _ge.is_a?(OpenApi::Validatable)
      end
      unless (_gr = @gr).nil?
        invalid_properties.concat(_gr.list_invalid_properties_for("gr")) if _gr.is_a?(OpenApi::Validatable)
      end
      unless (_hr = @hr).nil?
        invalid_properties.concat(_hr.list_invalid_properties_for("hr")) if _hr.is_a?(OpenApi::Validatable)
      end
      unless (_hu = @hu).nil?
        invalid_properties.concat(_hu.list_invalid_properties_for("hu")) if _hu.is_a?(OpenApi::Validatable)
      end
      unless (_id = @id).nil?
        invalid_properties.concat(_id.list_invalid_properties_for("id")) if _id.is_a?(OpenApi::Validatable)
      end
      unless (_ie = @ie).nil?
        invalid_properties.concat(_ie.list_invalid_properties_for("ie")) if _ie.is_a?(OpenApi::Validatable)
      end
      unless (_is = @is).nil?
        invalid_properties.concat(_is.list_invalid_properties_for("is")) if _is.is_a?(OpenApi::Validatable)
      end
      unless (_it = @it).nil?
        invalid_properties.concat(_it.list_invalid_properties_for("it")) if _it.is_a?(OpenApi::Validatable)
      end
      unless (_jp = @jp).nil?
        invalid_properties.concat(_jp.list_invalid_properties_for("jp")) if _jp.is_a?(OpenApi::Validatable)
      end
      unless (_ke = @ke).nil?
        invalid_properties.concat(_ke.list_invalid_properties_for("ke")) if _ke.is_a?(OpenApi::Validatable)
      end
      unless (_kr = @kr).nil?
        invalid_properties.concat(_kr.list_invalid_properties_for("kr")) if _kr.is_a?(OpenApi::Validatable)
      end
      unless (_kz = @kz).nil?
        invalid_properties.concat(_kz.list_invalid_properties_for("kz")) if _kz.is_a?(OpenApi::Validatable)
      end
      unless (_lt = @lt).nil?
        invalid_properties.concat(_lt.list_invalid_properties_for("lt")) if _lt.is_a?(OpenApi::Validatable)
      end
      unless (_lu = @lu).nil?
        invalid_properties.concat(_lu.list_invalid_properties_for("lu")) if _lu.is_a?(OpenApi::Validatable)
      end
      unless (_lv = @lv).nil?
        invalid_properties.concat(_lv.list_invalid_properties_for("lv")) if _lv.is_a?(OpenApi::Validatable)
      end
      unless (_mt = @mt).nil?
        invalid_properties.concat(_mt.list_invalid_properties_for("mt")) if _mt.is_a?(OpenApi::Validatable)
      end
      unless (_mx = @mx).nil?
        invalid_properties.concat(_mx.list_invalid_properties_for("mx")) if _mx.is_a?(OpenApi::Validatable)
      end
      unless (_my = @my).nil?
        invalid_properties.concat(_my.list_invalid_properties_for("my")) if _my.is_a?(OpenApi::Validatable)
      end
      unless (_ng = @ng).nil?
        invalid_properties.concat(_ng.list_invalid_properties_for("ng")) if _ng.is_a?(OpenApi::Validatable)
      end
      unless (_nl = @nl).nil?
        invalid_properties.concat(_nl.list_invalid_properties_for("nl")) if _nl.is_a?(OpenApi::Validatable)
      end
      unless (_no = @no).nil?
        invalid_properties.concat(_no.list_invalid_properties_for("no")) if _no.is_a?(OpenApi::Validatable)
      end
      unless (_nz = @nz).nil?
        invalid_properties.concat(_nz.list_invalid_properties_for("nz")) if _nz.is_a?(OpenApi::Validatable)
      end
      unless (_om = @om).nil?
        invalid_properties.concat(_om.list_invalid_properties_for("om")) if _om.is_a?(OpenApi::Validatable)
      end
      unless (_pl = @pl).nil?
        invalid_properties.concat(_pl.list_invalid_properties_for("pl")) if _pl.is_a?(OpenApi::Validatable)
      end
      unless (_pt = @pt).nil?
        invalid_properties.concat(_pt.list_invalid_properties_for("pt")) if _pt.is_a?(OpenApi::Validatable)
      end
      unless (_ro = @ro).nil?
        invalid_properties.concat(_ro.list_invalid_properties_for("ro")) if _ro.is_a?(OpenApi::Validatable)
      end
      unless (_sa = @sa).nil?
        invalid_properties.concat(_sa.list_invalid_properties_for("sa")) if _sa.is_a?(OpenApi::Validatable)
      end
      unless (_se = @se).nil?
        invalid_properties.concat(_se.list_invalid_properties_for("se")) if _se.is_a?(OpenApi::Validatable)
      end
      unless (_sg = @sg).nil?
        invalid_properties.concat(_sg.list_invalid_properties_for("sg")) if _sg.is_a?(OpenApi::Validatable)
      end
      unless (_si = @si).nil?
        invalid_properties.concat(_si.list_invalid_properties_for("si")) if _si.is_a?(OpenApi::Validatable)
      end
      unless (_sk = @sk).nil?
        invalid_properties.concat(_sk.list_invalid_properties_for("sk")) if _sk.is_a?(OpenApi::Validatable)
      end
      unless (_th = @th).nil?
        invalid_properties.concat(_th.list_invalid_properties_for("th")) if _th.is_a?(OpenApi::Validatable)
      end
      unless (_tr = @tr).nil?
        invalid_properties.concat(_tr.list_invalid_properties_for("tr")) if _tr.is_a?(OpenApi::Validatable)
      end
      unless (_us = @us).nil?
        invalid_properties.concat(_us.list_invalid_properties_for("us")) if _us.is_a?(OpenApi::Validatable)
      end
      unless (_vn = @vn).nil?
        invalid_properties.concat(_vn.list_invalid_properties_for("vn")) if _vn.is_a?(OpenApi::Validatable)
      end
      unless (_za = @za).nil?
        invalid_properties.concat(_za.list_invalid_properties_for("za")) if _za.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_ae = @ae).nil?
        return false if _ae.is_a?(OpenApi::Validatable) && !_ae.valid?
      end

      unless (_at = @at).nil?
        return false if _at.is_a?(OpenApi::Validatable) && !_at.valid?
      end

      unless (_au = @au).nil?
        return false if _au.is_a?(OpenApi::Validatable) && !_au.valid?
      end

      unless (_be = @be).nil?
        return false if _be.is_a?(OpenApi::Validatable) && !_be.valid?
      end

      unless (_bg = @bg).nil?
        return false if _bg.is_a?(OpenApi::Validatable) && !_bg.valid?
      end

      unless (_bh = @bh).nil?
        return false if _bh.is_a?(OpenApi::Validatable) && !_bh.valid?
      end

      unless (_ca = @ca).nil?
        return false if _ca.is_a?(OpenApi::Validatable) && !_ca.valid?
      end

      unless (_ch = @ch).nil?
        return false if _ch.is_a?(OpenApi::Validatable) && !_ch.valid?
      end

      unless (_cl = @cl).nil?
        return false if _cl.is_a?(OpenApi::Validatable) && !_cl.valid?
      end

      unless (_co = @co).nil?
        return false if _co.is_a?(OpenApi::Validatable) && !_co.valid?
      end

      unless (_cy = @cy).nil?
        return false if _cy.is_a?(OpenApi::Validatable) && !_cy.valid?
      end

      unless (_cz = @cz).nil?
        return false if _cz.is_a?(OpenApi::Validatable) && !_cz.valid?
      end

      unless (_de = @de).nil?
        return false if _de.is_a?(OpenApi::Validatable) && !_de.valid?
      end

      unless (_dk = @dk).nil?
        return false if _dk.is_a?(OpenApi::Validatable) && !_dk.valid?
      end

      unless (_ee = @ee).nil?
        return false if _ee.is_a?(OpenApi::Validatable) && !_ee.valid?
      end

      unless (_eg = @eg).nil?
        return false if _eg.is_a?(OpenApi::Validatable) && !_eg.valid?
      end

      unless (_es = @es).nil?
        return false if _es.is_a?(OpenApi::Validatable) && !_es.valid?
      end

      unless (_fi = @fi).nil?
        return false if _fi.is_a?(OpenApi::Validatable) && !_fi.valid?
      end

      unless (_fr = @fr).nil?
        return false if _fr.is_a?(OpenApi::Validatable) && !_fr.valid?
      end

      unless (_gb = @gb).nil?
        return false if _gb.is_a?(OpenApi::Validatable) && !_gb.valid?
      end

      unless (_ge = @ge).nil?
        return false if _ge.is_a?(OpenApi::Validatable) && !_ge.valid?
      end

      unless (_gr = @gr).nil?
        return false if _gr.is_a?(OpenApi::Validatable) && !_gr.valid?
      end

      unless (_hr = @hr).nil?
        return false if _hr.is_a?(OpenApi::Validatable) && !_hr.valid?
      end

      unless (_hu = @hu).nil?
        return false if _hu.is_a?(OpenApi::Validatable) && !_hu.valid?
      end

      unless (_id = @id).nil?
        return false if _id.is_a?(OpenApi::Validatable) && !_id.valid?
      end

      unless (_ie = @ie).nil?
        return false if _ie.is_a?(OpenApi::Validatable) && !_ie.valid?
      end

      unless (_is = @is).nil?
        return false if _is.is_a?(OpenApi::Validatable) && !_is.valid?
      end

      unless (_it = @it).nil?
        return false if _it.is_a?(OpenApi::Validatable) && !_it.valid?
      end

      unless (_jp = @jp).nil?
        return false if _jp.is_a?(OpenApi::Validatable) && !_jp.valid?
      end

      unless (_ke = @ke).nil?
        return false if _ke.is_a?(OpenApi::Validatable) && !_ke.valid?
      end

      unless (_kr = @kr).nil?
        return false if _kr.is_a?(OpenApi::Validatable) && !_kr.valid?
      end

      unless (_kz = @kz).nil?
        return false if _kz.is_a?(OpenApi::Validatable) && !_kz.valid?
      end

      unless (_lt = @lt).nil?
        return false if _lt.is_a?(OpenApi::Validatable) && !_lt.valid?
      end

      unless (_lu = @lu).nil?
        return false if _lu.is_a?(OpenApi::Validatable) && !_lu.valid?
      end

      unless (_lv = @lv).nil?
        return false if _lv.is_a?(OpenApi::Validatable) && !_lv.valid?
      end

      unless (_mt = @mt).nil?
        return false if _mt.is_a?(OpenApi::Validatable) && !_mt.valid?
      end

      unless (_mx = @mx).nil?
        return false if _mx.is_a?(OpenApi::Validatable) && !_mx.valid?
      end

      unless (_my = @my).nil?
        return false if _my.is_a?(OpenApi::Validatable) && !_my.valid?
      end

      unless (_ng = @ng).nil?
        return false if _ng.is_a?(OpenApi::Validatable) && !_ng.valid?
      end

      unless (_nl = @nl).nil?
        return false if _nl.is_a?(OpenApi::Validatable) && !_nl.valid?
      end

      unless (_no = @no).nil?
        return false if _no.is_a?(OpenApi::Validatable) && !_no.valid?
      end

      unless (_nz = @nz).nil?
        return false if _nz.is_a?(OpenApi::Validatable) && !_nz.valid?
      end

      unless (_om = @om).nil?
        return false if _om.is_a?(OpenApi::Validatable) && !_om.valid?
      end

      unless (_pl = @pl).nil?
        return false if _pl.is_a?(OpenApi::Validatable) && !_pl.valid?
      end

      unless (_pt = @pt).nil?
        return false if _pt.is_a?(OpenApi::Validatable) && !_pt.valid?
      end

      unless (_ro = @ro).nil?
        return false if _ro.is_a?(OpenApi::Validatable) && !_ro.valid?
      end

      unless (_sa = @sa).nil?
        return false if _sa.is_a?(OpenApi::Validatable) && !_sa.valid?
      end

      unless (_se = @se).nil?
        return false if _se.is_a?(OpenApi::Validatable) && !_se.valid?
      end

      unless (_sg = @sg).nil?
        return false if _sg.is_a?(OpenApi::Validatable) && !_sg.valid?
      end

      unless (_si = @si).nil?
        return false if _si.is_a?(OpenApi::Validatable) && !_si.valid?
      end

      unless (_sk = @sk).nil?
        return false if _sk.is_a?(OpenApi::Validatable) && !_sk.valid?
      end

      unless (_th = @th).nil?
        return false if _th.is_a?(OpenApi::Validatable) && !_th.valid?
      end

      unless (_tr = @tr).nil?
        return false if _tr.is_a?(OpenApi::Validatable) && !_tr.valid?
      end

      unless (_us = @us).nil?
        return false if _us.is_a?(OpenApi::Validatable) && !_us.valid?
      end

      unless (_vn = @vn).nil?
        return false if _vn.is_a?(OpenApi::Validatable) && !_vn.valid?
      end

      unless (_za = @za).nil?
        return false if _za.is_a?(OpenApi::Validatable) && !_za.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ae Object to be assigned
    def ae=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ae = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] at Object to be assigned
    def at=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au Object to be assigned
    def au=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @au = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] be Object to be assigned
    def be=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @be = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bg Object to be assigned
    def bg=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bg = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bh Object to be assigned
    def bh=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bh = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ca Object to be assigned
    def ca=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsCanada?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ca = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ch Object to be assigned
    def ch=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ch = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cl Object to be assigned
    def cl=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cl = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] co Object to be assigned
    def co=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @co = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cy Object to be assigned
    def cy=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cy = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cz Object to be assigned
    def cz=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cz = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] de Object to be assigned
    def de=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @de = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dk Object to be assigned
    def dk=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @dk = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ee Object to be assigned
    def ee=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eg Object to be assigned
    def eg=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eg = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] es Object to be assigned
    def es=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @es = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fi Object to be assigned
    def fi=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fi = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fr Object to be assigned
    def fr=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gb Object to be assigned
    def gb=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @gb = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ge Object to be assigned
    def ge=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ge = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gr Object to be assigned
    def gr=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @gr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hr Object to be assigned
    def hr=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @hr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hu Object to be assigned
    def hu=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @hu = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ie Object to be assigned
    def ie=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ie = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is Object to be assigned
    def is=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @is = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] it Object to be assigned
    def it=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @it = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jp Object to be assigned
    def jp=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @jp = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ke Object to be assigned
    def ke=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ke = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kr Object to be assigned
    def kr=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @kr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kz Object to be assigned
    def kz=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @kz = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lt Object to be assigned
    def lt=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @lt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lu Object to be assigned
    def lu=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @lu = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lv Object to be assigned
    def lv=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @lv = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mt Object to be assigned
    def mt=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mx Object to be assigned
    def mx=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mx = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] my Object to be assigned
    def my=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @my = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ng Object to be assigned
    def ng=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ng = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nl Object to be assigned
    def nl=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @nl = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] no Object to be assigned
    def no=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @no = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nz Object to be assigned
    def nz=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @nz = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] om Object to be assigned
    def om=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @om = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pl Object to be assigned
    def pl=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pl = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pt Object to be assigned
    def pt=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ro Object to be assigned
    def ro=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ro = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sa Object to be assigned
    def sa=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sa = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] se Object to be assigned
    def se=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @se = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sg Object to be assigned
    def sg=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sg = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] si Object to be assigned
    def si=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @si = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sk Object to be assigned
    def sk=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsEurope?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sk = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] th Object to be assigned
    def th=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @th = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tr Object to be assigned
    def tr=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us Object to be assigned
    def us=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsUnitedStates?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @us = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vn Object to be assigned
    def vn=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsSimplified?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @vn = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] za Object to be assigned
    def za=(new_value : Stripe::TaxProductRegistrationsResourceCountryOptionsDefault?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @za = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@ae, @at, @au, @be, @bg, @bh, @ca, @ch, @cl, @co, @cy, @cz, @de, @dk, @ee, @eg, @es, @fi, @fr, @gb, @ge, @gr, @hr, @hu, @id, @ie, @is, @it, @jp, @ke, @kr, @kz, @lt, @lu, @lv, @mt, @mx, @my, @ng, @nl, @no, @nz, @om, @pl, @pt, @ro, @sa, @se, @sg, @si, @sk, @th, @tr, @us, @vn, @za)
  end
end
