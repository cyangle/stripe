#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentMethodOptionsWechatPay
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The app ID registered with WeChat Pay. Only required when client is ios or android.
    @[JSON::Field(key: "app_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: app_id.nil? && !app_id_present?)]
    getter app_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? app_id_present : Bool = false

    # The client type that the end customer will pay from
    @[JSON::Field(key: "client", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: client.nil? && !client_present?)]
    getter client : String? = nil

    @[JSON::Field(ignore: true)]
    property? client_present : Bool = false

    ENUM_VALIDATOR_FOR_CLIENT = OpenApi::EnumValidator.new("client", "String", ["android", "ios", "web"])

    # Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    @[JSON::Field(key: "setup_future_usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_future_usage : String? = nil

    ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE = OpenApi::EnumValidator.new("setup_future_usage", "String", ["none"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @app_id : String? = nil,
      @client : String? = nil,
      @setup_future_usage : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _app_id = @app_id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("app_id", _app_id.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_CLIENT.error_message) unless ENUM_VALIDATOR_FOR_CLIENT.valid?(@client)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.error_message) unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _app_id = @app_id
        return false if _app_id.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_CLIENT.valid?(@client)
      return false unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] app_id Object to be assigned
    def app_id=(app_id : String?)
      if app_id.nil?
        return @app_id = nil
      end
      _app_id = app_id.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("app_id", _app_id.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @app_id = _app_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client Object to be assigned
    def client=(client : String?)
      if client.nil?
        return @client = nil
      end
      _client = client.not_nil!
      ENUM_VALIDATOR_FOR_CLIENT.valid!(_client)
      @client = _client
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(setup_future_usage : String?)
      if setup_future_usage.nil?
        return @setup_future_usage = nil
      end
      _setup_future_usage = setup_future_usage.not_nil!
      ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid!(_setup_future_usage)
      @setup_future_usage = _setup_future_usage
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@app_id, @app_id_present, @client, @client_present, @setup_future_usage)
  end
end
