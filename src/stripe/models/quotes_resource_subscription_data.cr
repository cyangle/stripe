#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class QuotesResourceSubscriptionData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "effective_date", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: effective_date.nil? && !effective_date_present?)]
    getter effective_date : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? effective_date_present : Bool = false

    # Integer representing the number of trial period days before the customer is charged for the first time.
    @[JSON::Field(key: "trial_period_days", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: trial_period_days.nil? && !trial_period_days_present?)]
    getter trial_period_days : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? trial_period_days_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @description : String? = nil,
      @effective_date : Int64? = nil,
      @trial_period_days : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _description = @description
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _description = @description
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] effective_date Object to be assigned
    def effective_date=(effective_date : Int64?)
      if effective_date.nil?
        return @effective_date = nil
      end
      _effective_date = effective_date.not_nil!
      @effective_date = _effective_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_period_days Object to be assigned
    def trial_period_days=(trial_period_days : Int64?)
      if trial_period_days.nil?
        return @trial_period_days = nil
      end
      _trial_period_days = trial_period_days.not_nil!
      @trial_period_days = _trial_period_days
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@description, @description_present, @effective_date, @effective_date_present, @trial_period_days, @trial_period_days_present)
  end
end
