#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostCheckoutSessionsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The URL the customer will be directed to if they decide to cancel payment and return to your website.
    @[JSON::Field(key: "cancel_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cancel_url : String? = nil
    MAX_LENGTH_FOR_CANCEL_URL = 5000

    # The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
    @[JSON::Field(key: "success_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter success_url : String? = nil
    MAX_LENGTH_FOR_SUCCESS_URL = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "after_expiration", type: Stripe::AfterExpirationParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter after_expiration : Stripe::AfterExpirationParams? = nil

    # Enables user redeemable promotion codes.
    @[JSON::Field(key: "allow_promotion_codes", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter allow_promotion_codes : Bool? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTaxParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTaxParams? = nil

    # Specify whether Checkout should collect the customer's billing address.
    @[JSON::Field(key: "billing_address_collection", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_address_collection : String? = nil
    ERROR_MESSAGE_FOR_BILLING_ADDRESS_COLLECTION = "invalid value for \"billing_address_collection\", must be one of [auto, required]."
    VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION  = String.static_array("auto", "required")

    # A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
    @[JSON::Field(key: "client_reference_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_reference_id : String? = nil
    MAX_LENGTH_FOR_CLIENT_REFERENCE_ID = 200

    @[JSON::Field(key: "consent_collection", type: Stripe::ConsentCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter consent_collection : Stripe::ConsentCollectionParams? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil

    @[JSON::Field(key: "custom_text", type: Stripe::CustomTextParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter custom_text : Stripe::CustomTextParam? = nil

    # ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recent card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.  If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.  If blank for Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new Customer object based on information provided during the payment flow.  You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil
    MAX_LENGTH_FOR_CUSTOMER = 5000

    # Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.  When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).  Sessions that don't create Customers instead are grouped by [guest customers](https://stripe.com/docs/payments/checkout/guest-customers) in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.  Can only be set in `payment` and `setup` mode.
    @[JSON::Field(key: "customer_creation", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_creation : String? = nil
    ERROR_MESSAGE_FOR_CUSTOMER_CREATION = "invalid value for \"customer_creation\", must be one of [always, if_required]."
    VALID_VALUES_FOR_CUSTOMER_CREATION  = String.static_array("always", "if_required")

    # If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.
    @[JSON::Field(key: "customer_email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_email : String? = nil

    @[JSON::Field(key: "customer_update", type: Stripe::CustomerUpdateParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_update : Stripe::CustomerUpdateParams? = nil

    # The coupon or promotion code to apply to this Session. Currently, only up to one may be specified.
    @[JSON::Field(key: "discounts", type: Array(Stripe::DiscountParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter discounts : Array(Stripe::DiscountParams)? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
    @[JSON::Field(key: "expires_at", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expires_at : Int64? = nil

    @[JSON::Field(key: "invoice_creation", type: Stripe::InvoiceCreationParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_creation : Stripe::InvoiceCreationParams? = nil

    # A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).  For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.  For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.
    @[JSON::Field(key: "line_items", type: Array(Stripe::LineItemParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter line_items : Array(Stripe::LineItemParams)? = nil

    # The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    @[JSON::Field(key: "locale", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter locale : String? = nil
    ERROR_MESSAGE_FOR_LOCALE = "invalid value for \"locale\", must be one of [auto, bg, cs, da, de, el, en, en-GB, es, es-419, et, fi, fil, fr, fr-CA, hr, hu, id, it, ja, ko, lt, lv, ms, mt, nb, nl, pl, pt, pt-BR, ro, ru, sk, sl, sv, th, tr, vi, zh, zh-HK, zh-TW]."
    VALID_VALUES_FOR_LOCALE  = String.static_array("auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW")

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The mode of the Checkout Session. Pass `subscription` if the Checkout Session includes at least one recurring item.
    @[JSON::Field(key: "mode", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mode : String? = nil
    ERROR_MESSAGE_FOR_MODE = "invalid value for \"mode\", must be one of [payment, setup, subscription]."
    VALID_VALUES_FOR_MODE  = String.static_array("payment", "setup", "subscription")

    @[JSON::Field(key: "payment_intent_data", type: Stripe::PaymentIntentDataParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_intent_data : Stripe::PaymentIntentDataParams? = nil

    # Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0. This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on configuring [subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    @[JSON::Field(key: "payment_method_collection", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_collection : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_COLLECTION = "invalid value for \"payment_method_collection\", must be one of [always, if_required]."
    VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION  = String.static_array("always", "if_required")

    @[JSON::Field(key: "payment_method_options", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_options : Stripe::PaymentMethodOptionsParam? = nil

    # A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.  In `payment` and `subscription` mode, you can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). It is required in `setup` mode.  Read more about the supported payment methods and their requirements in our [payment method details guide](/docs/payments/checkout/payment-methods).  If multiple payment methods are passed, Checkout will dynamically reorder them to prioritize the most relevant payment methods based on the customer's location and other characteristics.
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_types : Array(String)? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_TYPES = "invalid value for \"payment_method_types\", must be one of [acss_debit, affirm, afterpay_clearpay, alipay, au_becs_debit, bacs_debit, bancontact, blik, boleto, card, customer_balance, eps, fpx, giropay, grabpay, ideal, klarna, konbini, oxxo, p24, paynow, pix, promptpay, sepa_debit, sofort, us_bank_account, wechat_pay]."
    VALID_VALUES_FOR_PAYMENT_METHOD_TYPES  = String.static_array("acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "oxxo", "p24", "paynow", "pix", "promptpay", "sepa_debit", "sofort", "us_bank_account", "wechat_pay")

    @[JSON::Field(key: "phone_number_collection", type: Stripe::PhoneNumberCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil

    @[JSON::Field(key: "setup_intent_data", type: Stripe::SetupIntentDataParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_intent_data : Stripe::SetupIntentDataParam? = nil

    @[JSON::Field(key: "shipping_address_collection", type: Stripe::ShippingAddressCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil

    # The shipping rate options to apply to this Session.
    @[JSON::Field(key: "shipping_options", type: Array(Stripe::ShippingOptionParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping_options : Array(Stripe::ShippingOptionParams)? = nil

    # Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode.
    @[JSON::Field(key: "submit_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter submit_type : String? = nil
    ERROR_MESSAGE_FOR_SUBMIT_TYPE = "invalid value for \"submit_type\", must be one of [auto, book, donate, pay]."
    VALID_VALUES_FOR_SUBMIT_TYPE  = String.static_array("auto", "book", "donate", "pay")

    @[JSON::Field(key: "subscription_data", type: Stripe::SubscriptionDataParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_data : Stripe::SubscriptionDataParams? = nil

    @[JSON::Field(key: "tax_id_collection", type: Stripe::TaxIdCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_id_collection : Stripe::TaxIdCollectionParams? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @cancel_url : String? = nil,
      @success_url : String? = nil,
      # Optional properties
      @after_expiration : Stripe::AfterExpirationParams? = nil,
      @allow_promotion_codes : Bool? = nil,
      @automatic_tax : Stripe::AutomaticTaxParams? = nil,
      @billing_address_collection : String? = nil,
      @client_reference_id : String? = nil,
      @consent_collection : Stripe::ConsentCollectionParams? = nil,
      @currency : String? = nil,
      @custom_text : Stripe::CustomTextParam? = nil,
      @customer : String? = nil,
      @customer_creation : String? = nil,
      @customer_email : String? = nil,
      @customer_update : Stripe::CustomerUpdateParams? = nil,
      @discounts : Array(Stripe::DiscountParams)? = nil,
      @expand : Array(String)? = nil,
      @expires_at : Int64? = nil,
      @invoice_creation : Stripe::InvoiceCreationParams? = nil,
      @line_items : Array(Stripe::LineItemParams)? = nil,
      @locale : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @mode : String? = nil,
      @payment_intent_data : Stripe::PaymentIntentDataParams? = nil,
      @payment_method_collection : String? = nil,
      @payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      @payment_method_types : Array(String)? = nil,
      @phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil,
      @setup_intent_data : Stripe::SetupIntentDataParam? = nil,
      @shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil,
      @shipping_options : Array(Stripe::ShippingOptionParams)? = nil,
      @submit_type : String? = nil,
      @subscription_data : Stripe::SubscriptionDataParams? = nil,
      @tax_id_collection : Stripe::TaxIdCollectionParams? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"cancel_url\" is required and cannot be null") if @cancel_url.nil?

      unless (_cancel_url = @cancel_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cancel_url", _cancel_url.to_s.size, MAX_LENGTH_FOR_CANCEL_URL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"success_url\" is required and cannot be null") if @success_url.nil?

      unless (_success_url = @success_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("success_url", _success_url.to_s.size, MAX_LENGTH_FOR_SUCCESS_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_after_expiration = @after_expiration).nil?
        invalid_properties.concat(_after_expiration.list_invalid_properties_for("after_expiration")) if _after_expiration.is_a?(OpenApi::Validatable)
      end

      unless (_automatic_tax = @automatic_tax).nil?
        invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax")) if _automatic_tax.is_a?(OpenApi::Validatable)
      end
      unless (_billing_address_collection = @billing_address_collection).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BILLING_ADDRESS_COLLECTION) unless OpenApi::EnumValidator.valid?(_billing_address_collection, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end
      unless (_client_reference_id = @client_reference_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_reference_id", _client_reference_id.to_s.size, MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_consent_collection = @consent_collection).nil?
        invalid_properties.concat(_consent_collection.list_invalid_properties_for("consent_collection")) if _consent_collection.is_a?(OpenApi::Validatable)
      end

      unless (_custom_text = @custom_text).nil?
        invalid_properties.concat(_custom_text.list_invalid_properties_for("custom_text")) if _custom_text.is_a?(OpenApi::Validatable)
      end
      unless (_customer = @customer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer", _customer.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_creation = @customer_creation).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CUSTOMER_CREATION) unless OpenApi::EnumValidator.valid?(_customer_creation, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end

      unless (_customer_update = @customer_update).nil?
        invalid_properties.concat(_customer_update.list_invalid_properties_for("customer_update")) if _customer_update.is_a?(OpenApi::Validatable)
      end
      unless (_discounts = @discounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "discounts", container: _discounts)) if _discounts.is_a?(Array)
      end

      unless (_invoice_creation = @invoice_creation).nil?
        invalid_properties.concat(_invoice_creation.list_invalid_properties_for("invoice_creation")) if _invoice_creation.is_a?(OpenApi::Validatable)
      end
      unless (_line_items = @line_items).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "line_items", container: _line_items)) if _line_items.is_a?(Array)
      end

      unless (_mode = @mode).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_MODE) unless OpenApi::EnumValidator.valid?(_mode, VALID_VALUES_FOR_MODE)
      end
      unless (_payment_intent_data = @payment_intent_data).nil?
        invalid_properties.concat(_payment_intent_data.list_invalid_properties_for("payment_intent_data")) if _payment_intent_data.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_collection = @payment_method_collection).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_COLLECTION) unless OpenApi::EnumValidator.valid?(_payment_method_collection, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end
      unless (_payment_method_options = @payment_method_options).nil?
        invalid_properties.concat(_payment_method_options.list_invalid_properties_for("payment_method_options")) if _payment_method_options.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_types = @payment_method_types).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_TYPES) unless OpenApi::EnumValidator.valid?(_payment_method_types, VALID_VALUES_FOR_PAYMENT_METHOD_TYPES)
      end
      unless (_phone_number_collection = @phone_number_collection).nil?
        invalid_properties.concat(_phone_number_collection.list_invalid_properties_for("phone_number_collection")) if _phone_number_collection.is_a?(OpenApi::Validatable)
      end
      unless (_setup_intent_data = @setup_intent_data).nil?
        invalid_properties.concat(_setup_intent_data.list_invalid_properties_for("setup_intent_data")) if _setup_intent_data.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_address_collection = @shipping_address_collection).nil?
        invalid_properties.concat(_shipping_address_collection.list_invalid_properties_for("shipping_address_collection")) if _shipping_address_collection.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_options = @shipping_options).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "shipping_options", container: _shipping_options)) if _shipping_options.is_a?(Array)
      end
      unless (_submit_type = @submit_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SUBMIT_TYPE) unless OpenApi::EnumValidator.valid?(_submit_type, VALID_VALUES_FOR_SUBMIT_TYPE)
      end
      unless (_subscription_data = @subscription_data).nil?
        invalid_properties.concat(_subscription_data.list_invalid_properties_for("subscription_data")) if _subscription_data.is_a?(OpenApi::Validatable)
      end
      unless (_tax_id_collection = @tax_id_collection).nil?
        invalid_properties.concat(_tax_id_collection.list_invalid_properties_for("tax_id_collection")) if _tax_id_collection.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @cancel_url.nil?
      unless (_cancel_url = @cancel_url).nil?
        return false if _cancel_url.to_s.size > MAX_LENGTH_FOR_CANCEL_URL
      end

      return false if @success_url.nil?
      unless (_success_url = @success_url).nil?
        return false if _success_url.to_s.size > MAX_LENGTH_FOR_SUCCESS_URL
      end

      unless (_after_expiration = @after_expiration).nil?
        return false if _after_expiration.is_a?(OpenApi::Validatable) && !_after_expiration.valid?
      end

      unless (_automatic_tax = @automatic_tax).nil?
        return false if _automatic_tax.is_a?(OpenApi::Validatable) && !_automatic_tax.valid?
      end

      unless (_billing_address_collection = @billing_address_collection).nil?
        return false unless OpenApi::EnumValidator.valid?(_billing_address_collection, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end

      unless (_client_reference_id = @client_reference_id).nil?
        return false if _client_reference_id.to_s.size > MAX_LENGTH_FOR_CLIENT_REFERENCE_ID
      end

      unless (_consent_collection = @consent_collection).nil?
        return false if _consent_collection.is_a?(OpenApi::Validatable) && !_consent_collection.valid?
      end

      unless (_custom_text = @custom_text).nil?
        return false if _custom_text.is_a?(OpenApi::Validatable) && !_custom_text.valid?
      end

      unless (_customer = @customer).nil?
        return false if _customer.to_s.size > MAX_LENGTH_FOR_CUSTOMER
      end

      unless (_customer_creation = @customer_creation).nil?
        return false unless OpenApi::EnumValidator.valid?(_customer_creation, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end

      unless (_customer_update = @customer_update).nil?
        return false if _customer_update.is_a?(OpenApi::Validatable) && !_customer_update.valid?
      end

      unless (_discounts = @discounts).nil?
        return false if _discounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _discounts)
      end

      unless (_invoice_creation = @invoice_creation).nil?
        return false if _invoice_creation.is_a?(OpenApi::Validatable) && !_invoice_creation.valid?
      end

      unless (_line_items = @line_items).nil?
        return false if _line_items.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _line_items)
      end

      unless (_mode = @mode).nil?
        return false unless OpenApi::EnumValidator.valid?(_mode, VALID_VALUES_FOR_MODE)
      end

      unless (_payment_intent_data = @payment_intent_data).nil?
        return false if _payment_intent_data.is_a?(OpenApi::Validatable) && !_payment_intent_data.valid?
      end

      unless (_payment_method_collection = @payment_method_collection).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_collection, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end

      unless (_payment_method_options = @payment_method_options).nil?
        return false if _payment_method_options.is_a?(OpenApi::Validatable) && !_payment_method_options.valid?
      end

      unless (_payment_method_types = @payment_method_types).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_types, VALID_VALUES_FOR_PAYMENT_METHOD_TYPES)
      end

      unless (_phone_number_collection = @phone_number_collection).nil?
        return false if _phone_number_collection.is_a?(OpenApi::Validatable) && !_phone_number_collection.valid?
      end

      unless (_setup_intent_data = @setup_intent_data).nil?
        return false if _setup_intent_data.is_a?(OpenApi::Validatable) && !_setup_intent_data.valid?
      end

      unless (_shipping_address_collection = @shipping_address_collection).nil?
        return false if _shipping_address_collection.is_a?(OpenApi::Validatable) && !_shipping_address_collection.valid?
      end

      unless (_shipping_options = @shipping_options).nil?
        return false if _shipping_options.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _shipping_options)
      end

      unless (_submit_type = @submit_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_submit_type, VALID_VALUES_FOR_SUBMIT_TYPE)
      end

      unless (_subscription_data = @subscription_data).nil?
        return false if _subscription_data.is_a?(OpenApi::Validatable) && !_subscription_data.valid?
      end

      unless (_tax_id_collection = @tax_id_collection).nil?
        return false if _tax_id_collection.is_a?(OpenApi::Validatable) && !_tax_id_collection.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_url Object to be assigned
    def cancel_url=(new_value : String?)
      raise ArgumentError.new("\"cancel_url\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cancel_url", new_value.to_s.size, MAX_LENGTH_FOR_CANCEL_URL)
      end

      @cancel_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] success_url Object to be assigned
    def success_url=(new_value : String?)
      raise ArgumentError.new("\"success_url\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("success_url", new_value.to_s.size, MAX_LENGTH_FOR_SUCCESS_URL)
      end

      @success_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] after_expiration Object to be assigned
    def after_expiration=(new_value : Stripe::AfterExpirationParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @after_expiration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_promotion_codes Object to be assigned
    def allow_promotion_codes=(new_value : Bool?)
      @allow_promotion_codes = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(new_value : Stripe::AutomaticTaxParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @automatic_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address_collection Object to be assigned
    def billing_address_collection=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("billing_address_collection", new_value, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end

      @billing_address_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_reference_id Object to be assigned
    def client_reference_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_reference_id", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
      end

      @client_reference_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_collection Object to be assigned
    def consent_collection=(new_value : Stripe::ConsentCollectionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @consent_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_text Object to be assigned
    def custom_text=(new_value : Stripe::CustomTextParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @custom_text = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_creation Object to be assigned
    def customer_creation=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("customer_creation", new_value, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end

      @customer_creation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_email Object to be assigned
    def customer_email=(new_value : String?)
      @customer_email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_update Object to be assigned
    def customer_update=(new_value : Stripe::CustomerUpdateParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_update = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(new_value : Array(Stripe::DiscountParams)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @discounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_at Object to be assigned
    def expires_at=(new_value : Int64?)
      @expires_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_creation Object to be assigned
    def invoice_creation=(new_value : Stripe::InvoiceCreationParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice_creation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(new_value : Array(Stripe::LineItemParams)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @line_items = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locale Object to be assigned
    def locale=(new_value : String?)
      @locale = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("mode", new_value, VALID_VALUES_FOR_MODE)
      end

      @mode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent_data Object to be assigned
    def payment_intent_data=(new_value : Stripe::PaymentIntentDataParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_collection Object to be assigned
    def payment_method_collection=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_collection", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end

      @payment_method_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_types", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_TYPES)
      end

      @payment_method_types = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number_collection Object to be assigned
    def phone_number_collection=(new_value : Stripe::PhoneNumberCollectionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @phone_number_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_intent_data Object to be assigned
    def setup_intent_data=(new_value : Stripe::SetupIntentDataParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @setup_intent_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_address_collection Object to be assigned
    def shipping_address_collection=(new_value : Stripe::ShippingAddressCollectionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_address_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_options Object to be assigned
    def shipping_options=(new_value : Array(Stripe::ShippingOptionParams)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @shipping_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submit_type Object to be assigned
    def submit_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("submit_type", new_value, VALID_VALUES_FOR_SUBMIT_TYPE)
      end

      @submit_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_data Object to be assigned
    def subscription_data=(new_value : Stripe::SubscriptionDataParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_id_collection Object to be assigned
    def tax_id_collection=(new_value : Stripe::TaxIdCollectionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_id_collection = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@cancel_url, @success_url, @after_expiration, @allow_promotion_codes, @automatic_tax, @billing_address_collection, @client_reference_id, @consent_collection, @currency, @custom_text, @customer, @customer_creation, @customer_email, @customer_update, @discounts, @expand, @expires_at, @invoice_creation, @line_items, @locale, @metadata, @mode, @payment_intent_data, @payment_method_collection, @payment_method_options, @payment_method_types, @phone_number_collection, @setup_intent_data, @shipping_address_collection, @shipping_options, @submit_type, @subscription_data, @tax_id_collection)
  end
end
