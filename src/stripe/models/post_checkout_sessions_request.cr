#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostCheckoutSessionsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The URL the customer will be directed to if they decide to cancel payment and return to your website.
    @[JSON::Field(key: "cancel_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cancel_url : String? = nil

    # The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
    @[JSON::Field(key: "success_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter success_url : String? = nil

    # Optional properties

    @[JSON::Field(key: "after_expiration", type: Stripe::AfterExpirationParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter after_expiration : Stripe::AfterExpirationParams? = nil

    # Enables user redeemable promotion codes.
    @[JSON::Field(key: "allow_promotion_codes", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter allow_promotion_codes : Bool? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTaxParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTaxParams? = nil

    # Specify whether Checkout should collect the customer's billing address.
    @[JSON::Field(key: "billing_address_collection", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_address_collection : String? = nil

    ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION = EnumValidator.new("billing_address_collection", "String", ["auto", "required"])

    # A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
    @[JSON::Field(key: "client_reference_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_reference_id : String? = nil

    @[JSON::Field(key: "consent_collection", type: Stripe::ConsentCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter consent_collection : Stripe::ConsentCollectionParams? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recent card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.  If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.  If blank for Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new Customer object based on information provided during the payment flow.  You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil

    # Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.  When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).  Sessions that don't create Customers instead create [Guest Customers](https://support.stripe.com/questions/guest-customer-faq) in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.  Can only be set in `payment` and `setup` mode.
    @[JSON::Field(key: "customer_creation", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_creation : String? = nil

    ENUM_VALIDATOR_FOR_CUSTOMER_CREATION = EnumValidator.new("customer_creation", "String", ["always", "if_required"])

    # If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.
    @[JSON::Field(key: "customer_email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_email : String? = nil

    @[JSON::Field(key: "customer_update", type: Stripe::CustomerUpdateParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_update : Stripe::CustomerUpdateParams? = nil

    # The coupon or promotion code to apply to this Session. Currently, only up to one may be specified.
    @[JSON::Field(key: "discounts", type: Array(Stripe::DiscountParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter discounts : Array(Stripe::DiscountParams)? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
    @[JSON::Field(key: "expires_at", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expires_at : Int64? = nil

    # A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).  For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.  For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.
    @[JSON::Field(key: "line_items", type: Array(Stripe::LineItemParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter line_items : Array(Stripe::LineItemParams)? = nil

    # The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    @[JSON::Field(key: "locale", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter locale : String? = nil

    ENUM_VALIDATOR_FOR_LOCALE = EnumValidator.new("locale", "String", ["auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW"])

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The mode of the Checkout Session. Required when using prices or `setup` mode. Pass `subscription` if the Checkout Session includes at least one recurring item.
    @[JSON::Field(key: "mode", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mode : String? = nil

    ENUM_VALIDATOR_FOR_MODE = EnumValidator.new("mode", "String", ["payment", "setup", "subscription"])

    @[JSON::Field(key: "payment_intent_data", type: Stripe::PaymentIntentDataParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_intent_data : Stripe::PaymentIntentDataParams? = nil

    # Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0. This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on configuring [subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    @[JSON::Field(key: "payment_method_collection", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_collection : String? = nil

    ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION = EnumValidator.new("payment_method_collection", "String", ["always", "if_required"])

    @[JSON::Field(key: "payment_method_options", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_options : Stripe::PaymentMethodOptionsParam? = nil

    # A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.  In `payment` and `subscription` mode, you can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). It is required in `setup` mode.  Read more about the supported payment methods and their requirements in our [payment method details guide](/docs/payments/checkout/payment-methods).  If multiple payment methods are passed, Checkout will dynamically reorder them to prioritize the most relevant payment methods based on the customer's location and other characteristics.
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_types : Array(String)? = nil

    ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES = EnumValidator.new("payment_method_types", "Array(String)", ["acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "oxxo", "p24", "paynow", "pix", "promptpay", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"])

    @[JSON::Field(key: "phone_number_collection", type: Stripe::PhoneNumberCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil

    @[JSON::Field(key: "setup_intent_data", type: Stripe::SetupIntentDataParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_intent_data : Stripe::SetupIntentDataParam? = nil

    @[JSON::Field(key: "shipping_address_collection", type: Stripe::ShippingAddressCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil

    # The shipping rate options to apply to this Session.
    @[JSON::Field(key: "shipping_options", type: Array(Stripe::ShippingOptionParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping_options : Array(Stripe::ShippingOptionParams)? = nil

    # Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode.
    @[JSON::Field(key: "submit_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter submit_type : String? = nil

    ENUM_VALIDATOR_FOR_SUBMIT_TYPE = EnumValidator.new("submit_type", "String", ["auto", "book", "donate", "pay"])

    @[JSON::Field(key: "subscription_data", type: Stripe::SubscriptionDataParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_data : Stripe::SubscriptionDataParams? = nil

    @[JSON::Field(key: "tax_id_collection", type: Stripe::TaxIdCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_id_collection : Stripe::TaxIdCollectionParams? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @cancel_url : String? = nil,
      @success_url : String? = nil,
      # Optional properties
      @after_expiration : Stripe::AfterExpirationParams? = nil,
      @allow_promotion_codes : Bool? = nil,
      @automatic_tax : Stripe::AutomaticTaxParams? = nil,
      @billing_address_collection : String? = nil,
      @client_reference_id : String? = nil,
      @consent_collection : Stripe::ConsentCollectionParams? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @customer_creation : String? = nil,
      @customer_email : String? = nil,
      @customer_update : Stripe::CustomerUpdateParams? = nil,
      @discounts : Array(Stripe::DiscountParams)? = nil,
      @expand : Array(String)? = nil,
      @expires_at : Int64? = nil,
      @line_items : Array(Stripe::LineItemParams)? = nil,
      @locale : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @mode : String? = nil,
      @payment_intent_data : Stripe::PaymentIntentDataParams? = nil,
      @payment_method_collection : String? = nil,
      @payment_method_options : Stripe::PaymentMethodOptionsParam? = nil,
      @payment_method_types : Array(String)? = nil,
      @phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil,
      @setup_intent_data : Stripe::SetupIntentDataParam? = nil,
      @shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil,
      @shipping_options : Array(Stripe::ShippingOptionParams)? = nil,
      @submit_type : String? = nil,
      @subscription_data : Stripe::SubscriptionDataParams? = nil,
      @tax_id_collection : Stripe::TaxIdCollectionParams? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"cancel_url\" is required and cannot be null") if @cancel_url.nil?
      if _cancel_url = @cancel_url
        if _cancel_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"cancel_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"success_url\" is required and cannot be null") if @success_url.nil?
      if _success_url = @success_url
        if _success_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"success_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model after_expiration : Stripe::AfterExpirationParams?
      # This is a model automatic_tax : Stripe::AutomaticTaxParams?

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.error_message) unless ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid?(@billing_address_collection)
      if _client_reference_id = @client_reference_id
        if _client_reference_id.to_s.size > 200
          invalid_properties.push("invalid value for \"client_reference_id\", the character length must be smaller than or equal to 200.")
        end
      end
      # This is a model consent_collection : Stripe::ConsentCollectionParams?
      if _customer = @customer
        if _customer.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.error_message) unless ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid?(@customer_creation)
      # This is a model customer_update : Stripe::CustomerUpdateParams?
      # Container discounts array has values of Stripe::DiscountParams
      # Container line_items array has values of Stripe::LineItemParams

      invalid_properties.push(ENUM_VALIDATOR_FOR_LOCALE.error_message) unless ENUM_VALIDATOR_FOR_LOCALE.valid?(@locale)

      invalid_properties.push(ENUM_VALIDATOR_FOR_MODE.error_message) unless ENUM_VALIDATOR_FOR_MODE.valid?(@mode)
      # This is a model payment_intent_data : Stripe::PaymentIntentDataParams?

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION.error_message) unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION.valid?(@payment_method_collection)
      # This is a model payment_method_options : Stripe::PaymentMethodOptionsParam?

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.error_message) unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid?(@payment_method_types)
      # This is a model phone_number_collection : Stripe::PhoneNumberCollectionParams?
      # This is a model setup_intent_data : Stripe::SetupIntentDataParam?
      # This is a model shipping_address_collection : Stripe::ShippingAddressCollectionParams?
      # Container shipping_options array has values of Stripe::ShippingOptionParams

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUBMIT_TYPE.error_message) unless ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid?(@submit_type)
      # This is a model subscription_data : Stripe::SubscriptionDataParams?
      # This is a model tax_id_collection : Stripe::TaxIdCollectionParams?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cancel_url.nil?
      if _cancel_url = @cancel_url
        return false if _cancel_url.to_s.size > 5000
      end
      return false if @success_url.nil?
      if _success_url = @success_url
        return false if _success_url.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid?(@billing_address_collection)
      if _client_reference_id = @client_reference_id
        return false if _client_reference_id.to_s.size > 200
      end
      if _customer = @customer
        return false if _customer.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid?(@customer_creation)
      return false unless ENUM_VALIDATOR_FOR_LOCALE.valid?(@locale)
      return false unless ENUM_VALIDATOR_FOR_MODE.valid?(@mode)
      return false unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION.valid?(@payment_method_collection)
      return false unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid?(@payment_method_types)
      return false unless ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid?(@submit_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_url Object to be assigned
    def cancel_url=(cancel_url : String?)
      if cancel_url.nil?
        raise ArgumentError.new("\"cancel_url\" is required and cannot be null")
      end
      _cancel_url = cancel_url.not_nil!
      if _cancel_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cancel_url\", the character length must be smaller than or equal to 5000.")
      end

      @cancel_url = cancel_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] success_url Object to be assigned
    def success_url=(success_url : String?)
      if success_url.nil?
        raise ArgumentError.new("\"success_url\" is required and cannot be null")
      end
      _success_url = success_url.not_nil!
      if _success_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"success_url\", the character length must be smaller than or equal to 5000.")
      end

      @success_url = success_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] after_expiration Object to be assigned
    def after_expiration=(after_expiration : Stripe::AfterExpirationParams?)
      if after_expiration.nil?
        return @after_expiration = nil
      end
      @after_expiration = after_expiration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_promotion_codes Object to be assigned
    def allow_promotion_codes=(allow_promotion_codes : Bool?)
      if allow_promotion_codes.nil?
        return @allow_promotion_codes = nil
      end
      @allow_promotion_codes = allow_promotion_codes
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::AutomaticTaxParams?)
      if automatic_tax.nil?
        return @automatic_tax = nil
      end
      @automatic_tax = automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address_collection Object to be assigned
    def billing_address_collection=(billing_address_collection : String?)
      if billing_address_collection.nil?
        return @billing_address_collection = nil
      end
      _billing_address_collection = billing_address_collection.not_nil!
      ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid!(_billing_address_collection)
      @billing_address_collection = billing_address_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_reference_id Object to be assigned
    def client_reference_id=(client_reference_id : String?)
      if client_reference_id.nil?
        return @client_reference_id = nil
      end
      _client_reference_id = client_reference_id.not_nil!
      if _client_reference_id.to_s.size > 200
        raise ArgumentError.new("invalid value for \"client_reference_id\", the character length must be smaller than or equal to 200.")
      end

      @client_reference_id = client_reference_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_collection Object to be assigned
    def consent_collection=(consent_collection : Stripe::ConsentCollectionParams?)
      if consent_collection.nil?
        return @consent_collection = nil
      end
      @consent_collection = consent_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      if _customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_creation Object to be assigned
    def customer_creation=(customer_creation : String?)
      if customer_creation.nil?
        return @customer_creation = nil
      end
      _customer_creation = customer_creation.not_nil!
      ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid!(_customer_creation)
      @customer_creation = customer_creation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_email Object to be assigned
    def customer_email=(customer_email : String?)
      if customer_email.nil?
        return @customer_email = nil
      end
      @customer_email = customer_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_update Object to be assigned
    def customer_update=(customer_update : Stripe::CustomerUpdateParams?)
      if customer_update.nil?
        return @customer_update = nil
      end
      @customer_update = customer_update
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(discounts : Array(Stripe::DiscountParams)?)
      if discounts.nil?
        return @discounts = nil
      end
      @discounts = discounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_at Object to be assigned
    def expires_at=(expires_at : Int64?)
      if expires_at.nil?
        return @expires_at = nil
      end
      @expires_at = expires_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(line_items : Array(Stripe::LineItemParams)?)
      if line_items.nil?
        return @line_items = nil
      end
      @line_items = line_items
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locale Object to be assigned
    def locale=(locale : String?)
      if locale.nil?
        return @locale = nil
      end
      _locale = locale.not_nil!
      ENUM_VALIDATOR_FOR_LOCALE.valid!(_locale)
      @locale = locale
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(mode : String?)
      if mode.nil?
        return @mode = nil
      end
      _mode = mode.not_nil!
      ENUM_VALIDATOR_FOR_MODE.valid!(_mode)
      @mode = mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent_data Object to be assigned
    def payment_intent_data=(payment_intent_data : Stripe::PaymentIntentDataParams?)
      if payment_intent_data.nil?
        return @payment_intent_data = nil
      end
      @payment_intent_data = payment_intent_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_collection Object to be assigned
    def payment_method_collection=(payment_method_collection : String?)
      if payment_method_collection.nil?
        return @payment_method_collection = nil
      end
      _payment_method_collection = payment_method_collection.not_nil!
      ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION.valid!(_payment_method_collection)
      @payment_method_collection = payment_method_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(payment_method_options : Stripe::PaymentMethodOptionsParam?)
      if payment_method_options.nil?
        return @payment_method_options = nil
      end
      @payment_method_options = payment_method_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(payment_method_types : Array(String)?)
      if payment_method_types.nil?
        return @payment_method_types = nil
      end
      _payment_method_types = payment_method_types.not_nil!
      ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid!(_payment_method_types)
      @payment_method_types = payment_method_types
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number_collection Object to be assigned
    def phone_number_collection=(phone_number_collection : Stripe::PhoneNumberCollectionParams?)
      if phone_number_collection.nil?
        return @phone_number_collection = nil
      end
      @phone_number_collection = phone_number_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_intent_data Object to be assigned
    def setup_intent_data=(setup_intent_data : Stripe::SetupIntentDataParam?)
      if setup_intent_data.nil?
        return @setup_intent_data = nil
      end
      @setup_intent_data = setup_intent_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_address_collection Object to be assigned
    def shipping_address_collection=(shipping_address_collection : Stripe::ShippingAddressCollectionParams?)
      if shipping_address_collection.nil?
        return @shipping_address_collection = nil
      end
      @shipping_address_collection = shipping_address_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_options Object to be assigned
    def shipping_options=(shipping_options : Array(Stripe::ShippingOptionParams)?)
      if shipping_options.nil?
        return @shipping_options = nil
      end
      @shipping_options = shipping_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submit_type Object to be assigned
    def submit_type=(submit_type : String?)
      if submit_type.nil?
        return @submit_type = nil
      end
      _submit_type = submit_type.not_nil!
      ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid!(_submit_type)
      @submit_type = submit_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_data Object to be assigned
    def subscription_data=(subscription_data : Stripe::SubscriptionDataParams?)
      if subscription_data.nil?
        return @subscription_data = nil
      end
      @subscription_data = subscription_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_id_collection Object to be assigned
    def tax_id_collection=(tax_id_collection : Stripe::TaxIdCollectionParams?)
      if tax_id_collection.nil?
        return @tax_id_collection = nil
      end
      @tax_id_collection = tax_id_collection
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@cancel_url, @success_url, @after_expiration, @allow_promotion_codes, @automatic_tax, @billing_address_collection, @client_reference_id, @consent_collection, @currency, @customer, @customer_creation, @customer_email, @customer_update, @discounts, @expand, @expires_at, @line_items, @locale, @metadata, @mode, @payment_intent_data, @payment_method_collection, @payment_method_options, @payment_method_types, @phone_number_collection, @setup_intent_data, @shipping_address_collection, @shipping_options, @submit_type, @subscription_data, @tax_id_collection)
  end
end
