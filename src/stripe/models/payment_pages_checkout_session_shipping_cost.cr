#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./line_items_tax_amount"
require "./payment_pages_checkout_session_shipping_cost_shipping_rate"

module Stripe
  #
  class PaymentPagesCheckoutSessionShippingCost
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Total shipping cost before any discounts or taxes are applied.
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_subtotal : Int64? = nil

    # Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
    @[JSON::Field(key: "amount_tax", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_tax : Int64? = nil

    # Total shipping cost after discounts and taxes are applied.
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_total : Int64? = nil

    @[JSON::Field(key: "shipping_rate", type: Stripe::PaymentPagesCheckoutSessionShippingCostShippingRate?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_rate : Stripe::PaymentPagesCheckoutSessionShippingCostShippingRate? = nil

    # End of Required Properties

    # Optional Properties

    # The taxes applied to the shipping rate.
    @[JSON::Field(key: "taxes", type: Array(Stripe::LineItemsTaxAmount)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter taxes : Array(Stripe::LineItemsTaxAmount)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_subtotal : Int64? = nil,
      @amount_tax : Int64? = nil,
      @amount_total : Int64? = nil,
      @shipping_rate : Stripe::PaymentPagesCheckoutSessionShippingCostShippingRate? = nil,
      # Optional properties
      @taxes : Array(Stripe::LineItemsTaxAmount)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount_subtotal\" is required and cannot be null") if @amount_subtotal.nil?

      invalid_properties.push("\"amount_tax\" is required and cannot be null") if @amount_tax.nil?

      invalid_properties.push("\"amount_total\" is required and cannot be null") if @amount_total.nil?

      unless (_shipping_rate = @shipping_rate).nil?
        invalid_properties.concat(_shipping_rate.list_invalid_properties_for("shipping_rate")) if _shipping_rate.is_a?(OpenApi::Validatable)
      end
      unless (_taxes = @taxes).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "taxes", container: _taxes)) if _taxes.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount_subtotal.nil?

      return false if @amount_tax.nil?

      return false if @amount_total.nil?

      unless (_shipping_rate = @shipping_rate).nil?
        return false if _shipping_rate.is_a?(OpenApi::Validatable) && !_shipping_rate.valid?
      end

      unless (_taxes = @taxes).nil?
        return false if _taxes.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _taxes)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(new_value : Int64?)
      raise ArgumentError.new("\"amount_subtotal\" is required and cannot be null") if new_value.nil?

      @amount_subtotal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_tax Object to be assigned
    def amount_tax=(new_value : Int64?)
      raise ArgumentError.new("\"amount_tax\" is required and cannot be null") if new_value.nil?

      @amount_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(new_value : Int64?)
      raise ArgumentError.new("\"amount_total\" is required and cannot be null") if new_value.nil?

      @amount_total = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_rate Object to be assigned
    def shipping_rate=(new_value : Stripe::PaymentPagesCheckoutSessionShippingCostShippingRate?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_rate = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] taxes Object to be assigned
    def taxes=(new_value : Array(Stripe::LineItemsTaxAmount)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @taxes = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_subtotal, @amount_tax, @amount_total, @shipping_rate, @taxes)
  end
end
