#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_network_token_device"
require "./issuing_network_token_mastercard"
require "./issuing_network_token_visa"
require "./issuing_network_token_wallet_provider"

module Stripe
  #
  class IssuingNetworkTokenNetworkData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [mastercard, visa]."
    VALID_VALUES_FOR__TYPE  = String.static_array("mastercard", "visa")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "device", type: Stripe::IssuingNetworkTokenDevice?, default: nil, required: false, nullable: false, emit_null: false)]
    getter device : Stripe::IssuingNetworkTokenDevice? = nil

    @[JSON::Field(key: "mastercard", type: Stripe::IssuingNetworkTokenMastercard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mastercard : Stripe::IssuingNetworkTokenMastercard? = nil

    @[JSON::Field(key: "visa", type: Stripe::IssuingNetworkTokenVisa?, default: nil, required: false, nullable: false, emit_null: false)]
    getter visa : Stripe::IssuingNetworkTokenVisa? = nil

    @[JSON::Field(key: "wallet_provider", type: Stripe::IssuingNetworkTokenWalletProvider?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wallet_provider : Stripe::IssuingNetworkTokenWalletProvider? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @device : Stripe::IssuingNetworkTokenDevice? = nil,
      @mastercard : Stripe::IssuingNetworkTokenMastercard? = nil,
      @visa : Stripe::IssuingNetworkTokenVisa? = nil,
      @wallet_provider : Stripe::IssuingNetworkTokenWalletProvider? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_device = @device).nil?
        invalid_properties.concat(_device.list_invalid_properties_for("device")) if _device.is_a?(OpenApi::Validatable)
      end
      unless (_mastercard = @mastercard).nil?
        invalid_properties.concat(_mastercard.list_invalid_properties_for("mastercard")) if _mastercard.is_a?(OpenApi::Validatable)
      end
      unless (_visa = @visa).nil?
        invalid_properties.concat(_visa.list_invalid_properties_for("visa")) if _visa.is_a?(OpenApi::Validatable)
      end
      unless (_wallet_provider = @wallet_provider).nil?
        invalid_properties.concat(_wallet_provider.list_invalid_properties_for("wallet_provider")) if _wallet_provider.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_device = @device).nil?
        return false if _device.is_a?(OpenApi::Validatable) && !_device.valid?
      end

      unless (_mastercard = @mastercard).nil?
        return false if _mastercard.is_a?(OpenApi::Validatable) && !_mastercard.valid?
      end

      unless (_visa = @visa).nil?
        return false if _visa.is_a?(OpenApi::Validatable) && !_visa.valid?
      end

      unless (_wallet_provider = @wallet_provider).nil?
        return false if _wallet_provider.is_a?(OpenApi::Validatable) && !_wallet_provider.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device Object to be assigned
    def device=(new_value : Stripe::IssuingNetworkTokenDevice?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @device = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mastercard Object to be assigned
    def mastercard=(new_value : Stripe::IssuingNetworkTokenMastercard?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mastercard = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] visa Object to be assigned
    def visa=(new_value : Stripe::IssuingNetworkTokenVisa?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @visa = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet_provider Object to be assigned
    def wallet_provider=(new_value : Stripe::IssuingNetworkTokenWalletProvider?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wallet_provider = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @device, @mastercard, @visa, @wallet_provider)
  end
end
