#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer"
require "./customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer"
require "./customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer"
require "./customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer"

module Stripe
  #
  class CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The user-supplied reference field on the bank transfer.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter reference : String? = nil
    MAX_LENGTH_FOR_REFERENCE = 5000

    # The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [eu_bank_transfer, gb_bank_transfer, jp_bank_transfer, mx_bank_transfer, us_bank_transfer]."
    VALID_VALUES_FOR__TYPE  = String.static_array("eu_bank_transfer", "gb_bank_transfer", "jp_bank_transfer", "mx_bank_transfer", "us_bank_transfer")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "eu_bank_transfer", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eu_bank_transfer : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer? = nil

    @[JSON::Field(key: "gb_bank_transfer", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter gb_bank_transfer : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer? = nil

    @[JSON::Field(key: "jp_bank_transfer", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jp_bank_transfer : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer? = nil

    @[JSON::Field(key: "us_bank_transfer", type: Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_transfer : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @reference : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @eu_bank_transfer : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer? = nil,
      @gb_bank_transfer : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer? = nil,
      @jp_bank_transfer : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer? = nil,
      @us_bank_transfer : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_reference = @reference).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reference", _reference.to_s.size, MAX_LENGTH_FOR_REFERENCE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_eu_bank_transfer = @eu_bank_transfer).nil?
        invalid_properties.concat(_eu_bank_transfer.list_invalid_properties_for("eu_bank_transfer")) if _eu_bank_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_gb_bank_transfer = @gb_bank_transfer).nil?
        invalid_properties.concat(_gb_bank_transfer.list_invalid_properties_for("gb_bank_transfer")) if _gb_bank_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_jp_bank_transfer = @jp_bank_transfer).nil?
        invalid_properties.concat(_jp_bank_transfer.list_invalid_properties_for("jp_bank_transfer")) if _jp_bank_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_us_bank_transfer = @us_bank_transfer).nil?
        invalid_properties.concat(_us_bank_transfer.list_invalid_properties_for("us_bank_transfer")) if _us_bank_transfer.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_reference = @reference).nil?
        return false if _reference.to_s.size > MAX_LENGTH_FOR_REFERENCE
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_eu_bank_transfer = @eu_bank_transfer).nil?
        return false if _eu_bank_transfer.is_a?(OpenApi::Validatable) && !_eu_bank_transfer.valid?
      end

      unless (_gb_bank_transfer = @gb_bank_transfer).nil?
        return false if _gb_bank_transfer.is_a?(OpenApi::Validatable) && !_gb_bank_transfer.valid?
      end

      unless (_jp_bank_transfer = @jp_bank_transfer).nil?
        return false if _jp_bank_transfer.is_a?(OpenApi::Validatable) && !_jp_bank_transfer.valid?
      end

      unless (_us_bank_transfer = @us_bank_transfer).nil?
        return false if _us_bank_transfer.is_a?(OpenApi::Validatable) && !_us_bank_transfer.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("reference", new_value.to_s.size, MAX_LENGTH_FOR_REFERENCE)
      end

      @reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eu_bank_transfer Object to be assigned
    def eu_bank_transfer=(new_value : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eu_bank_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gb_bank_transfer Object to be assigned
    def gb_bank_transfer=(new_value : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @gb_bank_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jp_bank_transfer Object to be assigned
    def jp_bank_transfer=(new_value : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @jp_bank_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_transfer Object to be assigned
    def us_bank_transfer=(new_value : Stripe::CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @us_bank_transfer = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@reference, @_type, @eu_bank_transfer, @gb_bank_transfer, @jp_bank_transfer, @us_bank_transfer)
  end
end
