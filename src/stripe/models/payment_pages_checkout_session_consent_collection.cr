#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentPagesCheckoutSessionConsentCollection
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout Session will determine whether to display an option to opt into promotional communication from the merchant depending on the customer's locale. Only available to US merchants.
    @[JSON::Field(key: "promotions", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: promotions.nil? && !promotions_present?)]
    getter promotions : String? = nil

    @[JSON::Field(ignore: true)]
    property? promotions_present : Bool = false
    VALID_VALUES_FOR_PROMOTIONS = StaticArray["auto", "none"]

    # If set to `required`, it requires customers to accept the terms of service before being able to pay.
    @[JSON::Field(key: "terms_of_service", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: terms_of_service.nil? && !terms_of_service_present?)]
    getter terms_of_service : String? = nil

    @[JSON::Field(ignore: true)]
    property? terms_of_service_present : Bool = false
    VALID_VALUES_FOR_TERMS_OF_SERVICE = StaticArray["none", "required"]

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @promotions : String? = nil,
      @terms_of_service : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _promotions = @promotions
        invalid_properties.push(OpenApi::EnumValidator.error_message("promotions", VALID_VALUES_FOR_PROMOTIONS)) unless OpenApi::EnumValidator.valid?(_promotions, VALID_VALUES_FOR_PROMOTIONS)
      end
      if _terms_of_service = @terms_of_service
        invalid_properties.push(OpenApi::EnumValidator.error_message("terms_of_service", VALID_VALUES_FOR_TERMS_OF_SERVICE)) unless OpenApi::EnumValidator.valid?(_terms_of_service, VALID_VALUES_FOR_TERMS_OF_SERVICE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _promotions = @promotions
        return false unless OpenApi::EnumValidator.valid?(_promotions, VALID_VALUES_FOR_PROMOTIONS)
      end

      if _terms_of_service = @terms_of_service
        return false unless OpenApi::EnumValidator.valid?(_terms_of_service, VALID_VALUES_FOR_TERMS_OF_SERVICE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promotions Object to be assigned
    def promotions=(promotions : String?)
      if promotions.nil?
        return @promotions = nil
      end
      _promotions = promotions.not_nil!
      OpenApi::EnumValidator.validate("promotions", _promotions, VALID_VALUES_FOR_PROMOTIONS)
      @promotions = _promotions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terms_of_service Object to be assigned
    def terms_of_service=(terms_of_service : String?)
      if terms_of_service.nil?
        return @terms_of_service = nil
      end
      _terms_of_service = terms_of_service.not_nil!
      OpenApi::EnumValidator.validate("terms_of_service", _terms_of_service, VALID_VALUES_FOR_TERMS_OF_SERVICE)
      @terms_of_service = _terms_of_service
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@promotions, @promotions_present, @terms_of_service, @terms_of_service_present)
  end
end
