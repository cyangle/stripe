#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class TransferSchedule
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The number of days charges for the account will be held before being paid out.
    @[JSON::Field(key: "delay_days", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter delay_days : Int64? = nil

    # How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
    @[JSON::Field(key: "interval", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter interval : String? = nil
    MAX_LENGTH_FOR_INTERVAL = 5000

    # End of Required Properties

    # Optional Properties

    # The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
    @[JSON::Field(key: "monthly_anchor", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter monthly_anchor : Int64? = nil

    # The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
    @[JSON::Field(key: "weekly_anchor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter weekly_anchor : String? = nil
    MAX_LENGTH_FOR_WEEKLY_ANCHOR = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @delay_days : Int64? = nil,
      @interval : String? = nil,
      # Optional properties
      @monthly_anchor : Int64? = nil,
      @weekly_anchor : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"delay_days\" is required and cannot be null") if @delay_days.nil?

      invalid_properties.push("\"interval\" is required and cannot be null") if @interval.nil?

      unless (_interval = @interval).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("interval", _interval.to_s.size, MAX_LENGTH_FOR_INTERVAL)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_weekly_anchor = @weekly_anchor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("weekly_anchor", _weekly_anchor.to_s.size, MAX_LENGTH_FOR_WEEKLY_ANCHOR)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @delay_days.nil?

      return false if @interval.nil?
      unless (_interval = @interval).nil?
        return false if _interval.to_s.size > MAX_LENGTH_FOR_INTERVAL
      end

      unless (_weekly_anchor = @weekly_anchor).nil?
        return false if _weekly_anchor.to_s.size > MAX_LENGTH_FOR_WEEKLY_ANCHOR
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delay_days Object to be assigned
    def delay_days=(delay_days : Int64?)
      if delay_days.nil?
        raise ArgumentError.new("\"delay_days\" is required and cannot be null")
      end
      _delay_days = delay_days.not_nil!
      @delay_days = _delay_days
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interval Object to be assigned
    def interval=(interval : String?)
      if interval.nil?
        raise ArgumentError.new("\"interval\" is required and cannot be null")
      end
      _interval = interval.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("interval", _interval.to_s.size, MAX_LENGTH_FOR_INTERVAL)
      @interval = _interval
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] monthly_anchor Object to be assigned
    def monthly_anchor=(monthly_anchor : Int64?)
      if monthly_anchor.nil?
        return @monthly_anchor = nil
      end
      _monthly_anchor = monthly_anchor.not_nil!
      @monthly_anchor = _monthly_anchor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weekly_anchor Object to be assigned
    def weekly_anchor=(weekly_anchor : String?)
      if weekly_anchor.nil?
        return @weekly_anchor = nil
      end
      _weekly_anchor = weekly_anchor.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("weekly_anchor", _weekly_anchor.to_s.size, MAX_LENGTH_FOR_WEEKLY_ANCHOR)
      @weekly_anchor = _weekly_anchor
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@delay_days, @interval, @monthly_anchor, @weekly_anchor)
  end
end
