#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class CollectionOptionsParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Specifies whether the platform collects only currently_due requirements (`currently_due`) or both currently_due and eventually_due requirements (`eventually_due`). If you don't specify `collection_options`, the default value is `currently_due`.
    @[JSON::Field(key: "fields", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fields : String? = nil
    ERROR_MESSAGE_FOR_FIELDS = "invalid value for \"fields\", must be one of [currently_due, eventually_due]."
    VALID_VALUES_FOR_FIELDS  = String.static_array("currently_due", "eventually_due")

    # Specifies whether the platform collects future_requirements in addition to requirements in Connect Onboarding. The default value is `omit`.
    @[JSON::Field(key: "future_requirements", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter future_requirements : String? = nil
    ERROR_MESSAGE_FOR_FUTURE_REQUIREMENTS = "invalid value for \"future_requirements\", must be one of [include, omit]."
    VALID_VALUES_FOR_FUTURE_REQUIREMENTS  = String.static_array("include", "omit")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @fields : String? = nil,
      @future_requirements : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_fields = @fields).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_FIELDS) unless OpenApi::EnumValidator.valid?(_fields, VALID_VALUES_FOR_FIELDS)
      end
      unless (_future_requirements = @future_requirements).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_FUTURE_REQUIREMENTS) unless OpenApi::EnumValidator.valid?(_future_requirements, VALID_VALUES_FOR_FUTURE_REQUIREMENTS)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_fields = @fields).nil?
        return false unless OpenApi::EnumValidator.valid?(_fields, VALID_VALUES_FOR_FIELDS)
      end

      unless (_future_requirements = @future_requirements).nil?
        return false unless OpenApi::EnumValidator.valid?(_future_requirements, VALID_VALUES_FOR_FUTURE_REQUIREMENTS)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fields Object to be assigned
    def fields=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("fields", new_value, VALID_VALUES_FOR_FIELDS)
      end

      @fields = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] future_requirements Object to be assigned
    def future_requirements=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("future_requirements", new_value, VALID_VALUES_FOR_FUTURE_REQUIREMENTS)
      end

      @future_requirements = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@fields, @future_requirements)
  end
end
