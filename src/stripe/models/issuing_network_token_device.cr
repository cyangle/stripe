#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class IssuingNetworkTokenDevice
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # An obfuscated ID derived from the device ID.
    @[JSON::Field(key: "device_fingerprint", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter device_fingerprint : String? = nil
    MAX_LENGTH_FOR_DEVICE_FINGERPRINT = 5000

    # The IP address of the device at provisioning time.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ip_address : String? = nil
    MAX_LENGTH_FOR_IP_ADDRESS = 5000

    # The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal.
    @[JSON::Field(key: "location", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter location : String? = nil
    MAX_LENGTH_FOR_LOCATION = 5000

    # The name of the device used for tokenization.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # The phone number of the device used for tokenization.
    @[JSON::Field(key: "phone_number", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone_number : String? = nil
    MAX_LENGTH_FOR_PHONE_NUMBER = 5000

    # The type of device used for tokenization.
    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [other, phone, watch]."
    VALID_VALUES_FOR__TYPE  = String.static_array("other", "phone", "watch")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @device_fingerprint : String? = nil,
      @ip_address : String? = nil,
      @location : String? = nil,
      @name : String? = nil,
      @phone_number : String? = nil,
      @_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_device_fingerprint = @device_fingerprint).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("device_fingerprint", _device_fingerprint.to_s.size, MAX_LENGTH_FOR_DEVICE_FINGERPRINT)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_ip_address = @ip_address).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("ip_address", _ip_address.to_s.size, MAX_LENGTH_FOR_IP_ADDRESS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_location = @location).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("location", _location.to_s.size, MAX_LENGTH_FOR_LOCATION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_phone_number = @phone_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("phone_number", _phone_number.to_s.size, MAX_LENGTH_FOR_PHONE_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_device_fingerprint = @device_fingerprint).nil?
        return false if _device_fingerprint.to_s.size > MAX_LENGTH_FOR_DEVICE_FINGERPRINT
      end

      unless (_ip_address = @ip_address).nil?
        return false if _ip_address.to_s.size > MAX_LENGTH_FOR_IP_ADDRESS
      end

      unless (_location = @location).nil?
        return false if _location.to_s.size > MAX_LENGTH_FOR_LOCATION
      end

      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      unless (_phone_number = @phone_number).nil?
        return false if _phone_number.to_s.size > MAX_LENGTH_FOR_PHONE_NUMBER
      end

      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_fingerprint Object to be assigned
    def device_fingerprint=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("device_fingerprint", new_value.to_s.size, MAX_LENGTH_FOR_DEVICE_FINGERPRINT)
      end

      @device_fingerprint = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("ip_address", new_value.to_s.size, MAX_LENGTH_FOR_IP_ADDRESS)
      end

      @ip_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("location", new_value.to_s.size, MAX_LENGTH_FOR_LOCATION)
      end

      @location = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("name", new_value.to_s.size, MAX_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number Object to be assigned
    def phone_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("phone_number", new_value.to_s.size, MAX_LENGTH_FOR_PHONE_NUMBER)
      end

      @phone_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@device_fingerprint, @ip_address, @location, @name, @phone_number, @_type)
  end
end
