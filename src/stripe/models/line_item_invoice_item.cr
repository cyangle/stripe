#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./invoice_line_item_period"
require "./invoiceitem"
require "./invoiceitem_customer"
require "./invoiceitem_discounts_inner"
require "./invoiceitem_invoice"
require "./invoiceitem_subscription"
require "./invoiceitem_test_clock"
require "./plan"
require "./price"
require "./tax_rate"

module Stripe
  # The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
  class LineItemInvoiceItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    @[JSON::Field(key: "customer", type: Stripe::InvoiceitemCustomer?, default: nil, required: true, nullable: false, emit_null: false)]
    property customer : Stripe::InvoiceitemCustomer? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property date : Int64? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # If true, discounts will apply to this invoice item. Always false for prorations.
    @[JSON::Field(key: "discountable", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property discountable : Bool? = nil

    # The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    @[JSON::Field(key: "discounts", type: Array(Stripe::InvoiceitemDiscountsInner)?, default: nil, required: true, nullable: true, emit_null: true)]
    property discounts : Array(Stripe::InvoiceitemDiscountsInner)? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "invoice", type: Stripe::InvoiceitemInvoice?, default: nil, required: true, nullable: true, emit_null: true)]
    property invoice : Stripe::InvoiceitemInvoice? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [invoiceitem]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("invoiceitem")

    @[JSON::Field(key: "period", type: Stripe::InvoiceLineItemPeriod?, default: nil, required: true, nullable: false, emit_null: false)]
    property period : Stripe::InvoiceLineItemPeriod? = nil

    @[JSON::Field(key: "plan", type: Stripe::Plan?, default: nil, required: true, nullable: false, emit_null: false)]
    property plan : Stripe::Plan? = nil

    @[JSON::Field(key: "price", type: Stripe::Price?, default: nil, required: true, nullable: false, emit_null: false)]
    property price : Stripe::Price? = nil

    # Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
    @[JSON::Field(key: "proration", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property proration : Bool? = nil

    # Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
    @[JSON::Field(key: "quantity", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property quantity : Int64? = nil

    @[JSON::Field(key: "subscription", type: Stripe::InvoiceitemSubscription?, default: nil, required: true, nullable: true, emit_null: true)]
    property subscription : Stripe::InvoiceitemSubscription? = nil

    # The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
    @[JSON::Field(key: "tax_rates", type: Array(Stripe::TaxRate)?, default: nil, required: true, nullable: true, emit_null: true)]
    property tax_rates : Array(Stripe::TaxRate)? = nil

    @[JSON::Field(key: "test_clock", type: Stripe::InvoiceitemTestClock?, default: nil, required: true, nullable: true, emit_null: true)]
    property test_clock : Stripe::InvoiceitemTestClock? = nil

    # Unit amount (in the `currency` specified) of the invoice item.
    @[JSON::Field(key: "unit_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property unit_amount : Int64? = nil

    # Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    @[JSON::Field(key: "unit_amount_decimal", type: BigDecimal?, default: nil, required: true, nullable: true, emit_null: true)]
    property unit_amount_decimal : BigDecimal? = nil

    # End of Required Properties

    # Optional Properties

    # The subscription item that this invoice item has been created for, if any.
    @[JSON::Field(key: "subscription_item", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property subscription_item : String? = nil
    MAX_LENGTH_FOR_SUBSCRIPTION_ITEM = 5000

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Invoiceitem,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @currency : String? = nil,
      @customer : Stripe::InvoiceitemCustomer? = nil,
      @date : Int64? = nil,
      @description : String? = nil,
      @discountable : Bool? = nil,
      @discounts : Array(Stripe::InvoiceitemDiscountsInner)? = nil,
      @id : String? = nil,
      @invoice : Stripe::InvoiceitemInvoice? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @period : Stripe::InvoiceLineItemPeriod? = nil,
      @plan : Stripe::Plan? = nil,
      @price : Stripe::Price? = nil,
      @proration : Bool? = nil,
      @quantity : Int64? = nil,
      @subscription : Stripe::InvoiceitemSubscription? = nil,
      @tax_rates : Array(Stripe::TaxRate)? = nil,
      @test_clock : Stripe::InvoiceitemTestClock? = nil,
      @unit_amount : Int64? = nil,
      @unit_amount_decimal : BigDecimal? = nil,
      # Optional properties
      @subscription_item : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @customer, @date, @description, @discountable, @discounts, @id, @invoice, @livemode, @metadata, @object, @period, @plan, @price, @proration, @quantity, @subscription, @tax_rates, @test_clock, @unit_amount, @unit_amount_decimal, @subscription_item)
  end
end
