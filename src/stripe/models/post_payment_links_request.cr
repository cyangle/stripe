#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./after_completion_params"
require "./automatic_tax_params"
require "./consent_collection_params"
require "./custom_field_param"
require "./custom_text_param"
require "./invoice_creation_create_params"
require "./line_items_create_params"
require "./payment_intent_data_params"
require "./phone_number_collection_params"
require "./restrictions_params"
require "./shipping_address_collection_params"
require "./shipping_option_params"
require "./subscription_data_params"
require "./tax_id_collection_params"
require "./transfer_data_params"

module Stripe
  class PostPaymentLinksRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    @[JSON::Field(key: "line_items", type: Array(Stripe::LineItemsCreateParams)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter line_items : Array(Stripe::LineItemsCreateParams)? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "after_completion", type: Stripe::AfterCompletionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter after_completion : Stripe::AfterCompletionParams? = nil

    # Enables user redeemable promotion codes.
    @[JSON::Field(key: "allow_promotion_codes", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter allow_promotion_codes : Bool? = nil

    # The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Can only be applied when there are no line items with recurring prices.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter application_fee_amount : Int64? = nil

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.
    @[JSON::Field(key: "application_fee_percent", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter application_fee_percent : Float64? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTaxParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTaxParams? = nil

    # Configuration for collecting the customer's billing address. Defaults to `auto`.
    @[JSON::Field(key: "billing_address_collection", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_address_collection : String? = nil
    ERROR_MESSAGE_FOR_BILLING_ADDRESS_COLLECTION = "invalid value for \"billing_address_collection\", must be one of [auto, required]."
    VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION  = String.static_array("auto", "required")

    @[JSON::Field(key: "consent_collection", type: Stripe::ConsentCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter consent_collection : Stripe::ConsentCollectionParams? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies) and supported by each line item's price.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Collect additional information from your customer using custom fields. Up to 3 fields are supported.
    @[JSON::Field(key: "custom_fields", type: Array(Stripe::CustomFieldParam)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter custom_fields : Array(Stripe::CustomFieldParam)? = nil

    @[JSON::Field(key: "custom_text", type: Stripe::CustomTextParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter custom_text : Stripe::CustomTextParam? = nil

    # Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
    @[JSON::Field(key: "customer_creation", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_creation : String? = nil
    ERROR_MESSAGE_FOR_CUSTOMER_CREATION = "invalid value for \"customer_creation\", must be one of [always, if_required]."
    VALID_VALUES_FOR_CUSTOMER_CREATION  = String.static_array("always", "if_required")

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # The custom message to be displayed to a customer when a payment link is no longer active.
    @[JSON::Field(key: "inactive_message", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter inactive_message : String? = nil
    MAX_LENGTH_FOR_INACTIVE_MESSAGE = 500

    @[JSON::Field(key: "invoice_creation", type: Stripe::InvoiceCreationCreateParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_creation : Stripe::InvoiceCreationCreateParams? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The account on behalf of which to charge.
    @[JSON::Field(key: "on_behalf_of", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter on_behalf_of : String? = nil

    @[JSON::Field(key: "payment_intent_data", type: Stripe::PaymentIntentDataParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_intent_data : Stripe::PaymentIntentDataParams? = nil

    # Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    @[JSON::Field(key: "payment_method_collection", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_collection : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_COLLECTION = "invalid value for \"payment_method_collection\", must be one of [always, if_required]."
    VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION  = String.static_array("always", "if_required")

    # The list of payment method types that customers can use. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)).
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_types : Array(String)? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_TYPES = "invalid value for \"payment_method_types\", must be one of [affirm, afterpay_clearpay, alipay, au_becs_debit, bacs_debit, bancontact, blik, boleto, card, cashapp, eps, fpx, giropay, grabpay, ideal, klarna, konbini, link, mobilepay, multibanco, oxxo, p24, paynow, paypal, pix, promptpay, sepa_debit, sofort, swish, twint, us_bank_account, wechat_pay, zip]."
    VALID_VALUES_FOR_PAYMENT_METHOD_TYPES  = String.static_array("affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "cashapp", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "mobilepay", "multibanco", "oxxo", "p24", "paynow", "paypal", "pix", "promptpay", "sepa_debit", "sofort", "swish", "twint", "us_bank_account", "wechat_pay", "zip")

    @[JSON::Field(key: "phone_number_collection", type: Stripe::PhoneNumberCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil

    @[JSON::Field(key: "restrictions", type: Stripe::RestrictionsParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter restrictions : Stripe::RestrictionsParams? = nil

    @[JSON::Field(key: "shipping_address_collection", type: Stripe::ShippingAddressCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil

    # The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
    @[JSON::Field(key: "shipping_options", type: Array(Stripe::ShippingOptionParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping_options : Array(Stripe::ShippingOptionParams)? = nil

    # Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
    @[JSON::Field(key: "submit_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter submit_type : String? = nil
    ERROR_MESSAGE_FOR_SUBMIT_TYPE = "invalid value for \"submit_type\", must be one of [auto, book, donate, pay]."
    VALID_VALUES_FOR_SUBMIT_TYPE  = String.static_array("auto", "book", "donate", "pay")

    @[JSON::Field(key: "subscription_data", type: Stripe::SubscriptionDataParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscription_data : Stripe::SubscriptionDataParams? = nil

    @[JSON::Field(key: "tax_id_collection", type: Stripe::TaxIdCollectionParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_id_collection : Stripe::TaxIdCollectionParams? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::TransferDataParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfer_data : Stripe::TransferDataParams? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @line_items : Array(Stripe::LineItemsCreateParams)? = nil,
      # Optional properties
      @after_completion : Stripe::AfterCompletionParams? = nil,
      @allow_promotion_codes : Bool? = nil,
      @application_fee_amount : Int64? = nil,
      @application_fee_percent : Float64? = nil,
      @automatic_tax : Stripe::AutomaticTaxParams? = nil,
      @billing_address_collection : String? = nil,
      @consent_collection : Stripe::ConsentCollectionParams? = nil,
      @currency : String? = nil,
      @custom_fields : Array(Stripe::CustomFieldParam)? = nil,
      @custom_text : Stripe::CustomTextParam? = nil,
      @customer_creation : String? = nil,
      @expand : Array(String)? = nil,
      @inactive_message : String? = nil,
      @invoice_creation : Stripe::InvoiceCreationCreateParams? = nil,
      @metadata : Hash(String, String)? = nil,
      @on_behalf_of : String? = nil,
      @payment_intent_data : Stripe::PaymentIntentDataParams? = nil,
      @payment_method_collection : String? = nil,
      @payment_method_types : Array(String)? = nil,
      @phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil,
      @restrictions : Stripe::RestrictionsParams? = nil,
      @shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil,
      @shipping_options : Array(Stripe::ShippingOptionParams)? = nil,
      @submit_type : String? = nil,
      @subscription_data : Stripe::SubscriptionDataParams? = nil,
      @tax_id_collection : Stripe::TaxIdCollectionParams? = nil,
      @transfer_data : Stripe::TransferDataParams? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"line_items\" is required and cannot be null") if @line_items.nil?

      unless (_line_items = @line_items).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "line_items", container: _line_items)) if _line_items.is_a?(Array)
      end
      unless (_after_completion = @after_completion).nil?
        invalid_properties.concat(_after_completion.list_invalid_properties_for("after_completion")) if _after_completion.is_a?(OpenApi::Validatable)
      end

      unless (_automatic_tax = @automatic_tax).nil?
        invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax")) if _automatic_tax.is_a?(OpenApi::Validatable)
      end
      unless (_billing_address_collection = @billing_address_collection).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BILLING_ADDRESS_COLLECTION) unless OpenApi::EnumValidator.valid?(_billing_address_collection, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end
      unless (_consent_collection = @consent_collection).nil?
        invalid_properties.concat(_consent_collection.list_invalid_properties_for("consent_collection")) if _consent_collection.is_a?(OpenApi::Validatable)
      end

      unless (_custom_fields = @custom_fields).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "custom_fields", container: _custom_fields)) if _custom_fields.is_a?(Array)
      end
      unless (_custom_text = @custom_text).nil?
        invalid_properties.concat(_custom_text.list_invalid_properties_for("custom_text")) if _custom_text.is_a?(OpenApi::Validatable)
      end
      unless (_customer_creation = @customer_creation).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CUSTOMER_CREATION) unless OpenApi::EnumValidator.valid?(_customer_creation, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end

      unless (_inactive_message = @inactive_message).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("inactive_message", _inactive_message.to_s.size, MAX_LENGTH_FOR_INACTIVE_MESSAGE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_invoice_creation = @invoice_creation).nil?
        invalid_properties.concat(_invoice_creation.list_invalid_properties_for("invoice_creation")) if _invoice_creation.is_a?(OpenApi::Validatable)
      end

      unless (_payment_intent_data = @payment_intent_data).nil?
        invalid_properties.concat(_payment_intent_data.list_invalid_properties_for("payment_intent_data")) if _payment_intent_data.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_collection = @payment_method_collection).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_COLLECTION) unless OpenApi::EnumValidator.valid?(_payment_method_collection, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end
      unless (_payment_method_types = @payment_method_types).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_TYPES) unless OpenApi::EnumValidator.valid?(_payment_method_types, VALID_VALUES_FOR_PAYMENT_METHOD_TYPES)
      end
      unless (_phone_number_collection = @phone_number_collection).nil?
        invalid_properties.concat(_phone_number_collection.list_invalid_properties_for("phone_number_collection")) if _phone_number_collection.is_a?(OpenApi::Validatable)
      end
      unless (_restrictions = @restrictions).nil?
        invalid_properties.concat(_restrictions.list_invalid_properties_for("restrictions")) if _restrictions.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_address_collection = @shipping_address_collection).nil?
        invalid_properties.concat(_shipping_address_collection.list_invalid_properties_for("shipping_address_collection")) if _shipping_address_collection.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_options = @shipping_options).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "shipping_options", container: _shipping_options)) if _shipping_options.is_a?(Array)
      end
      unless (_submit_type = @submit_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SUBMIT_TYPE) unless OpenApi::EnumValidator.valid?(_submit_type, VALID_VALUES_FOR_SUBMIT_TYPE)
      end
      unless (_subscription_data = @subscription_data).nil?
        invalid_properties.concat(_subscription_data.list_invalid_properties_for("subscription_data")) if _subscription_data.is_a?(OpenApi::Validatable)
      end
      unless (_tax_id_collection = @tax_id_collection).nil?
        invalid_properties.concat(_tax_id_collection.list_invalid_properties_for("tax_id_collection")) if _tax_id_collection.is_a?(OpenApi::Validatable)
      end
      unless (_transfer_data = @transfer_data).nil?
        invalid_properties.concat(_transfer_data.list_invalid_properties_for("transfer_data")) if _transfer_data.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @line_items.nil?
      unless (_line_items = @line_items).nil?
        return false if _line_items.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _line_items)
      end

      unless (_after_completion = @after_completion).nil?
        return false if _after_completion.is_a?(OpenApi::Validatable) && !_after_completion.valid?
      end

      unless (_automatic_tax = @automatic_tax).nil?
        return false if _automatic_tax.is_a?(OpenApi::Validatable) && !_automatic_tax.valid?
      end

      unless (_billing_address_collection = @billing_address_collection).nil?
        return false unless OpenApi::EnumValidator.valid?(_billing_address_collection, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end

      unless (_consent_collection = @consent_collection).nil?
        return false if _consent_collection.is_a?(OpenApi::Validatable) && !_consent_collection.valid?
      end

      unless (_custom_fields = @custom_fields).nil?
        return false if _custom_fields.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _custom_fields)
      end

      unless (_custom_text = @custom_text).nil?
        return false if _custom_text.is_a?(OpenApi::Validatable) && !_custom_text.valid?
      end

      unless (_customer_creation = @customer_creation).nil?
        return false unless OpenApi::EnumValidator.valid?(_customer_creation, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end

      unless (_inactive_message = @inactive_message).nil?
        return false if _inactive_message.to_s.size > MAX_LENGTH_FOR_INACTIVE_MESSAGE
      end

      unless (_invoice_creation = @invoice_creation).nil?
        return false if _invoice_creation.is_a?(OpenApi::Validatable) && !_invoice_creation.valid?
      end

      unless (_payment_intent_data = @payment_intent_data).nil?
        return false if _payment_intent_data.is_a?(OpenApi::Validatable) && !_payment_intent_data.valid?
      end

      unless (_payment_method_collection = @payment_method_collection).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_collection, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end

      unless (_payment_method_types = @payment_method_types).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_types, VALID_VALUES_FOR_PAYMENT_METHOD_TYPES)
      end

      unless (_phone_number_collection = @phone_number_collection).nil?
        return false if _phone_number_collection.is_a?(OpenApi::Validatable) && !_phone_number_collection.valid?
      end

      unless (_restrictions = @restrictions).nil?
        return false if _restrictions.is_a?(OpenApi::Validatable) && !_restrictions.valid?
      end

      unless (_shipping_address_collection = @shipping_address_collection).nil?
        return false if _shipping_address_collection.is_a?(OpenApi::Validatable) && !_shipping_address_collection.valid?
      end

      unless (_shipping_options = @shipping_options).nil?
        return false if _shipping_options.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _shipping_options)
      end

      unless (_submit_type = @submit_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_submit_type, VALID_VALUES_FOR_SUBMIT_TYPE)
      end

      unless (_subscription_data = @subscription_data).nil?
        return false if _subscription_data.is_a?(OpenApi::Validatable) && !_subscription_data.valid?
      end

      unless (_tax_id_collection = @tax_id_collection).nil?
        return false if _tax_id_collection.is_a?(OpenApi::Validatable) && !_tax_id_collection.valid?
      end

      unless (_transfer_data = @transfer_data).nil?
        return false if _transfer_data.is_a?(OpenApi::Validatable) && !_transfer_data.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(new_value : Array(Stripe::LineItemsCreateParams)?)
      raise ArgumentError.new("\"line_items\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @line_items = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] after_completion Object to be assigned
    def after_completion=(new_value : Stripe::AfterCompletionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @after_completion = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_promotion_codes Object to be assigned
    def allow_promotion_codes=(new_value : Bool?)
      @allow_promotion_codes = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_amount Object to be assigned
    def application_fee_amount=(new_value : Int64?)
      @application_fee_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_percent Object to be assigned
    def application_fee_percent=(new_value : Float64?)
      @application_fee_percent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(new_value : Stripe::AutomaticTaxParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @automatic_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address_collection Object to be assigned
    def billing_address_collection=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("billing_address_collection", new_value, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end

      @billing_address_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_collection Object to be assigned
    def consent_collection=(new_value : Stripe::ConsentCollectionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @consent_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(new_value : Array(Stripe::CustomFieldParam)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @custom_fields = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_text Object to be assigned
    def custom_text=(new_value : Stripe::CustomTextParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @custom_text = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_creation Object to be assigned
    def customer_creation=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("customer_creation", new_value, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end

      @customer_creation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inactive_message Object to be assigned
    def inactive_message=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("inactive_message", new_value.to_s.size, MAX_LENGTH_FOR_INACTIVE_MESSAGE)
      end

      @inactive_message = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_creation Object to be assigned
    def invoice_creation=(new_value : Stripe::InvoiceCreationCreateParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice_creation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(new_value : String?)
      @on_behalf_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent_data Object to be assigned
    def payment_intent_data=(new_value : Stripe::PaymentIntentDataParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_collection Object to be assigned
    def payment_method_collection=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_collection", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end

      @payment_method_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_types", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_TYPES)
      end

      @payment_method_types = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number_collection Object to be assigned
    def phone_number_collection=(new_value : Stripe::PhoneNumberCollectionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @phone_number_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] restrictions Object to be assigned
    def restrictions=(new_value : Stripe::RestrictionsParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @restrictions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_address_collection Object to be assigned
    def shipping_address_collection=(new_value : Stripe::ShippingAddressCollectionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_address_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_options Object to be assigned
    def shipping_options=(new_value : Array(Stripe::ShippingOptionParams)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @shipping_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submit_type Object to be assigned
    def submit_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("submit_type", new_value, VALID_VALUES_FOR_SUBMIT_TYPE)
      end

      @submit_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_data Object to be assigned
    def subscription_data=(new_value : Stripe::SubscriptionDataParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_id_collection Object to be assigned
    def tax_id_collection=(new_value : Stripe::TaxIdCollectionParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_id_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(new_value : Stripe::TransferDataParams?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfer_data = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@line_items, @after_completion, @allow_promotion_codes, @application_fee_amount, @application_fee_percent, @automatic_tax, @billing_address_collection, @consent_collection, @currency, @custom_fields, @custom_text, @customer_creation, @expand, @inactive_message, @invoice_creation, @metadata, @on_behalf_of, @payment_intent_data, @payment_method_collection, @payment_method_types, @phone_number_collection, @restrictions, @shipping_address_collection, @shipping_options, @submit_type, @subscription_data, @tax_id_collection, @transfer_data)
  end
end
