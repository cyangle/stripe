#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostPaymentLinksRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    @[JSON::Field(key: "line_items", type: Array(LineItemsCreateParams))]
    property line_items : Array(LineItemsCreateParams)

    # Optional properties
    @[JSON::Field(key: "after_completion", type: AfterCompletionParams?, presence: true, ignore_serialize: after_completion.nil? && !after_completion_present?)]
    property after_completion : AfterCompletionParams?

    @[JSON::Field(ignore: true)]
    property? after_completion_present : Bool = false

    # Enables user redeemable promotion codes.
    @[JSON::Field(key: "allow_promotion_codes", type: Bool?, presence: true, ignore_serialize: allow_promotion_codes.nil? && !allow_promotion_codes_present?)]
    property allow_promotion_codes : Bool?

    @[JSON::Field(ignore: true)]
    property? allow_promotion_codes_present : Bool = false

    # The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Can only be applied when there are no line items with recurring prices.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, presence: true, ignore_serialize: application_fee_amount.nil? && !application_fee_amount_present?)]
    property application_fee_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? application_fee_amount_present : Bool = false

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.
    @[JSON::Field(key: "application_fee_percent", type: Float64?, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    property application_fee_percent : Float64?

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    @[JSON::Field(key: "automatic_tax", type: AutomaticTaxParams1?, presence: true, ignore_serialize: automatic_tax.nil? && !automatic_tax_present?)]
    property automatic_tax : AutomaticTaxParams1?

    @[JSON::Field(ignore: true)]
    property? automatic_tax_present : Bool = false

    # Configuration for collecting the customer's billing address.
    @[JSON::Field(key: "billing_address_collection", type: String?, presence: true, ignore_serialize: billing_address_collection.nil? && !billing_address_collection_present?)]
    getter billing_address_collection : String?

    @[JSON::Field(ignore: true)]
    property? billing_address_collection_present : Bool = false

    ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION = EnumValidator.new("billing_address_collection", "String", ["auto", "required"])

    @[JSON::Field(key: "consent_collection", type: ConsentCollectionParams1?, presence: true, ignore_serialize: consent_collection.nil? && !consent_collection_present?)]
    property consent_collection : ConsentCollectionParams1?

    @[JSON::Field(ignore: true)]
    property? consent_collection_present : Bool = false

    # Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
    @[JSON::Field(key: "customer_creation", type: String?, presence: true, ignore_serialize: customer_creation.nil? && !customer_creation_present?)]
    getter customer_creation : String?

    @[JSON::Field(ignore: true)]
    property? customer_creation_present : Bool = false

    ENUM_VALIDATOR_FOR_CUSTOMER_CREATION = EnumValidator.new("customer_creation", "String", ["always", "if_required"])

    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The account on behalf of which to charge.
    @[JSON::Field(key: "on_behalf_of", type: String?, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    property on_behalf_of : String?

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "payment_intent_data", type: PaymentIntentDataParams1?, presence: true, ignore_serialize: payment_intent_data.nil? && !payment_intent_data_present?)]
    property payment_intent_data : PaymentIntentDataParams1?

    @[JSON::Field(ignore: true)]
    property? payment_intent_data_present : Bool = false

    # The list of payment method types that customers can use. Only `card` is supported. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)).
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, presence: true, ignore_serialize: payment_method_types.nil? && !payment_method_types_present?)]
    getter payment_method_types : Array(String)?

    @[JSON::Field(ignore: true)]
    property? payment_method_types_present : Bool = false

    ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES = EnumValidator.new("payment_method_types", "String", ["card"])

    @[JSON::Field(key: "phone_number_collection", type: PhoneNumberCollectionParams1?, presence: true, ignore_serialize: phone_number_collection.nil? && !phone_number_collection_present?)]
    property phone_number_collection : PhoneNumberCollectionParams1?

    @[JSON::Field(ignore: true)]
    property? phone_number_collection_present : Bool = false

    @[JSON::Field(key: "shipping_address_collection", type: ShippingAddressCollectionParams1?, presence: true, ignore_serialize: shipping_address_collection.nil? && !shipping_address_collection_present?)]
    property shipping_address_collection : ShippingAddressCollectionParams1?

    @[JSON::Field(ignore: true)]
    property? shipping_address_collection_present : Bool = false

    # The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
    @[JSON::Field(key: "shipping_options", type: Array(ShippingOptionParams1)?, presence: true, ignore_serialize: shipping_options.nil? && !shipping_options_present?)]
    property shipping_options : Array(ShippingOptionParams1)?

    @[JSON::Field(ignore: true)]
    property? shipping_options_present : Bool = false

    # Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button.
    @[JSON::Field(key: "submit_type", type: String?, presence: true, ignore_serialize: submit_type.nil? && !submit_type_present?)]
    getter submit_type : String?

    @[JSON::Field(ignore: true)]
    property? submit_type_present : Bool = false

    ENUM_VALIDATOR_FOR_SUBMIT_TYPE = EnumValidator.new("submit_type", "String", ["auto", "book", "donate", "pay"])

    @[JSON::Field(key: "subscription_data", type: SubscriptionDataParams1?, presence: true, ignore_serialize: subscription_data.nil? && !subscription_data_present?)]
    property subscription_data : SubscriptionDataParams1?

    @[JSON::Field(ignore: true)]
    property? subscription_data_present : Bool = false

    @[JSON::Field(key: "tax_id_collection", type: TaxIdCollectionParams1?, presence: true, ignore_serialize: tax_id_collection.nil? && !tax_id_collection_present?)]
    property tax_id_collection : TaxIdCollectionParams1?

    @[JSON::Field(ignore: true)]
    property? tax_id_collection_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: TransferDataParams1?, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    property transfer_data : TransferDataParams1?

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @line_items : Array(LineItemsCreateParams), @after_completion : AfterCompletionParams? = nil, @allow_promotion_codes : Bool? = nil, @application_fee_amount : Int64? = nil, @application_fee_percent : Float64? = nil, @automatic_tax : AutomaticTaxParams1? = nil, @billing_address_collection : String? = nil, @consent_collection : ConsentCollectionParams1? = nil, @customer_creation : String? = nil, @expand : Array(String)? = nil, @metadata : Hash(String, String)? = nil, @on_behalf_of : String? = nil, @payment_intent_data : PaymentIntentDataParams1? = nil, @payment_method_types : Array(String)? = nil, @phone_number_collection : PhoneNumberCollectionParams1? = nil, @shipping_address_collection : ShippingAddressCollectionParams1? = nil, @shipping_options : Array(ShippingOptionParams1)? = nil, @submit_type : String? = nil, @subscription_data : SubscriptionDataParams1? = nil, @tax_id_collection : TaxIdCollectionParams1? = nil, @transfer_data : TransferDataParams1? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.error_message) unless ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid?(@billing_address_collection)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.error_message) unless ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid?(@customer_creation)

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.error_message) unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid?(@payment_method_types)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUBMIT_TYPE.error_message) unless ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid?(@submit_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid?(@billing_address_collection)
      return false unless ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid?(@customer_creation)
      return false unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid?(@payment_method_types)
      return false unless ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid?(@submit_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address_collection Object to be assigned
    def billing_address_collection=(billing_address_collection)
      ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid!(billing_address_collection)
      @billing_address_collection = billing_address_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_creation Object to be assigned
    def customer_creation=(customer_creation)
      ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid!(customer_creation)
      @customer_creation = customer_creation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(payment_method_types)
      ENUM_VALIDATOR_FOR_PAYMENT_METHOD_TYPES.all_valid!(payment_method_types)
      @payment_method_types = payment_method_types
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submit_type Object to be assigned
    def submit_type=(submit_type)
      ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid!(submit_type)
      @submit_type = submit_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        after_completion == o.after_completion &&
        allow_promotion_codes == o.allow_promotion_codes &&
        application_fee_amount == o.application_fee_amount &&
        application_fee_percent == o.application_fee_percent &&
        automatic_tax == o.automatic_tax &&
        billing_address_collection == o.billing_address_collection &&
        consent_collection == o.consent_collection &&
        customer_creation == o.customer_creation &&
        expand == o.expand &&
        line_items == o.line_items &&
        metadata == o.metadata &&
        on_behalf_of == o.on_behalf_of &&
        payment_intent_data == o.payment_intent_data &&
        payment_method_types == o.payment_method_types &&
        phone_number_collection == o.phone_number_collection &&
        shipping_address_collection == o.shipping_address_collection &&
        shipping_options == o.shipping_options &&
        submit_type == o.submit_type &&
        subscription_data == o.subscription_data &&
        tax_id_collection == o.tax_id_collection &&
        transfer_data == o.transfer_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@after_completion, @allow_promotion_codes, @application_fee_amount, @application_fee_percent, @automatic_tax, @billing_address_collection, @consent_collection, @customer_creation, @expand, @line_items, @metadata, @on_behalf_of, @payment_intent_data, @payment_method_types, @phone_number_collection, @shipping_address_collection, @shipping_options, @submit_type, @subscription_data, @tax_id_collection, @transfer_data)
  end
end
