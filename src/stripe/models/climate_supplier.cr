#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./climate_removals_location"

module Stripe
  # A supplier of carbon removal.
  class ClimateSupplier
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Link to a webpage to learn more about the supplier.
    @[JSON::Field(key: "info_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter info_url : String? = nil
    MAX_LENGTH_FOR_INFO_URL = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The locations in which this supplier operates.
    @[JSON::Field(key: "locations", type: Array(Stripe::ClimateRemovalsLocation)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter locations : Array(Stripe::ClimateRemovalsLocation)? = nil

    # Name of this carbon removal supplier.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the objectâ€™s type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [climate.supplier]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("climate.supplier")

    # The scientific pathway used for carbon removal.
    @[JSON::Field(key: "removal_pathway", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter removal_pathway : String? = nil
    ERROR_MESSAGE_FOR_REMOVAL_PATHWAY = "invalid value for \"removal_pathway\", must be one of [biomass_carbon_removal_and_storage, direct_air_capture, enhanced_weathering]."
    VALID_VALUES_FOR_REMOVAL_PATHWAY  = String.static_array("biomass_carbon_removal_and_storage", "direct_air_capture", "enhanced_weathering")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @info_url : String? = nil,
      @livemode : Bool? = nil,
      @locations : Array(Stripe::ClimateRemovalsLocation)? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @removal_pathway : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"info_url\" is required and cannot be null") if @info_url.nil?

      unless (_info_url = @info_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("info_url", _info_url.to_s.size, MAX_LENGTH_FOR_INFO_URL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"locations\" is required and cannot be null") if @locations.nil?

      unless (_locations = @locations).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "locations", container: _locations)) if _locations.is_a?(Array)
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"removal_pathway\" is required and cannot be null") if @removal_pathway.nil?

      unless (_removal_pathway = @removal_pathway).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REMOVAL_PATHWAY) unless OpenApi::EnumValidator.valid?(_removal_pathway, VALID_VALUES_FOR_REMOVAL_PATHWAY)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @info_url.nil?
      unless (_info_url = @info_url).nil?
        return false if _info_url.to_s.size > MAX_LENGTH_FOR_INFO_URL
      end

      return false if @livemode.nil?

      return false if @locations.nil?
      unless (_locations = @locations).nil?
        return false if _locations.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _locations)
      end

      return false if @name.nil?
      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @removal_pathway.nil?
      unless (_removal_pathway = @removal_pathway).nil?
        return false unless OpenApi::EnumValidator.valid?(_removal_pathway, VALID_VALUES_FOR_REMOVAL_PATHWAY)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] info_url Object to be assigned
    def info_url=(new_value : String?)
      raise ArgumentError.new("\"info_url\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("info_url", new_value.to_s.size, MAX_LENGTH_FOR_INFO_URL)
      end

      @info_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locations Object to be assigned
    def locations=(new_value : Array(Stripe::ClimateRemovalsLocation)?)
      raise ArgumentError.new("\"locations\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @locations = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("name", new_value.to_s.size, MAX_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] removal_pathway Object to be assigned
    def removal_pathway=(new_value : String?)
      raise ArgumentError.new("\"removal_pathway\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("removal_pathway", new_value, VALID_VALUES_FOR_REMOVAL_PATHWAY)
      end

      @removal_pathway = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @info_url, @livemode, @locations, @name, @object, @removal_pathway)
  end
end
