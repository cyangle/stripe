#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostInvoicesInvoiceRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "account_tax_ids", type: Stripe::PostInvoicesRequestAccountTaxIds?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil

    # A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter application_fee_amount : Int64? = nil

    # Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice.
    @[JSON::Field(key: "auto_advance", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter auto_advance : Bool? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTaxParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTaxParam? = nil

    # Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter collection_method : String? = nil

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    @[JSON::Field(key: "custom_fields", type: Stripe::PostInvoicesInvoiceRequestCustomFields?, default: nil, required: false, nullable: false, emit_null: false)]
    getter custom_fields : Stripe::PostInvoicesInvoiceRequestCustomFields? = nil

    # The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
    @[JSON::Field(key: "days_until_due", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter days_until_due : Int64? = nil

    # ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    @[JSON::Field(key: "default_payment_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_payment_method : String? = nil

    # ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
    @[JSON::Field(key: "default_source", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_source : String? = nil

    @[JSON::Field(key: "default_tax_rates", type: Stripe::PostInvoicesInvoiceRequestDefaultTaxRates?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_tax_rates : Stripe::PostInvoicesInvoiceRequestDefaultTaxRates? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "discounts", type: Stripe::PostInvoicesInvoiceRequestDiscounts?, default: nil, required: false, nullable: false, emit_null: false)]
    getter discounts : Stripe::PostInvoicesInvoiceRequestDiscounts? = nil

    # The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
    @[JSON::Field(key: "due_date", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter due_date : Int64? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # Footer to be displayed on the invoice.
    @[JSON::Field(key: "footer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter footer : String? = nil

    @[JSON::Field(key: "metadata", type: Stripe::PostAccountRequestMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::PostAccountRequestMetadata? = nil

    @[JSON::Field(key: "on_behalf_of", type: Stripe::PostInvoicesInvoiceRequestOnBehalfOf?, default: nil, required: false, nullable: false, emit_null: false)]
    getter on_behalf_of : Stripe::PostInvoicesInvoiceRequestOnBehalfOf? = nil

    @[JSON::Field(key: "payment_settings", type: Stripe::PaymentSettings1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_settings : Stripe::PaymentSettings1? = nil

    @[JSON::Field(key: "rendering_options", type: Stripe::PostInvoicesRequestRenderingOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter rendering_options : Stripe::PostInvoicesRequestRenderingOptions? = nil

    # Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor : String? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::PostInvoicesInvoiceRequestTransferData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfer_data : Stripe::PostInvoicesInvoiceRequestTransferData? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      @application_fee_amount : Int64? = nil,
      @auto_advance : Bool? = nil,
      @automatic_tax : Stripe::AutomaticTaxParam? = nil,
      @collection_method : String? = nil,
      @custom_fields : Stripe::PostInvoicesInvoiceRequestCustomFields? = nil,
      @days_until_due : Int64? = nil,
      @default_payment_method : String? = nil,
      @default_source : String? = nil,
      @default_tax_rates : Stripe::PostInvoicesInvoiceRequestDefaultTaxRates? = nil,
      @description : String? = nil,
      @discounts : Stripe::PostInvoicesInvoiceRequestDiscounts? = nil,
      @due_date : Int64? = nil,
      @expand : Array(String)? = nil,
      @footer : String? = nil,
      @metadata : Stripe::PostAccountRequestMetadata? = nil,
      @on_behalf_of : Stripe::PostInvoicesInvoiceRequestOnBehalfOf? = nil,
      @payment_settings : Stripe::PaymentSettings1? = nil,
      @rendering_options : Stripe::PostInvoicesRequestRenderingOptions? = nil,
      @statement_descriptor : String? = nil,
      @transfer_data : Stripe::PostInvoicesInvoiceRequestTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds?
      # This is a model automatic_tax : Stripe::AutomaticTaxParam?

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      # This is a model custom_fields : Stripe::PostInvoicesInvoiceRequestCustomFields?
      if _default_payment_method = @default_payment_method
        if _default_payment_method.to_s.size > 5000
          invalid_properties.push("invalid value for \"default_payment_method\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _default_source = @default_source
        if _default_source.to_s.size > 5000
          invalid_properties.push("invalid value for \"default_source\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model default_tax_rates : Stripe::PostInvoicesInvoiceRequestDefaultTaxRates?
      if _description = @description
        if _description.to_s.size > 1500
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 1500.")
        end
      end
      # This is a model discounts : Stripe::PostInvoicesInvoiceRequestDiscounts?
      if _footer = @footer
        if _footer.to_s.size > 5000
          invalid_properties.push("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model metadata : Stripe::PostAccountRequestMetadata?
      # This is a model on_behalf_of : Stripe::PostInvoicesInvoiceRequestOnBehalfOf?
      # This is a model payment_settings : Stripe::PaymentSettings1?
      # This is a model rendering_options : Stripe::PostInvoicesRequestRenderingOptions?
      if _statement_descriptor = @statement_descriptor
        if _statement_descriptor.to_s.size > 22
          invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 22.")
        end
      end
      # This is a model transfer_data : Stripe::PostInvoicesInvoiceRequestTransferData?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      if _default_payment_method = @default_payment_method
        return false if _default_payment_method.to_s.size > 5000
      end
      if _default_source = @default_source
        return false if _default_source.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 1500
      end
      if _footer = @footer
        return false if _footer.to_s.size > 5000
      end
      if _statement_descriptor = @statement_descriptor
        return false if _statement_descriptor.to_s.size > 22
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_tax_ids Object to be assigned
    def account_tax_ids=(account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds?)
      if account_tax_ids.nil?
        return @account_tax_ids = nil
      end
      @account_tax_ids = account_tax_ids
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_amount Object to be assigned
    def application_fee_amount=(application_fee_amount : Int64?)
      if application_fee_amount.nil?
        return @application_fee_amount = nil
      end
      @application_fee_amount = application_fee_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auto_advance Object to be assigned
    def auto_advance=(auto_advance : Bool?)
      if auto_advance.nil?
        return @auto_advance = nil
      end
      @auto_advance = auto_advance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::AutomaticTaxParam?)
      if automatic_tax.nil?
        return @automatic_tax = nil
      end
      @automatic_tax = automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method : String?)
      if collection_method.nil?
        return @collection_method = nil
      end
      _collection_method = collection_method.not_nil!
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(_collection_method)
      @collection_method = collection_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(custom_fields : Stripe::PostInvoicesInvoiceRequestCustomFields?)
      if custom_fields.nil?
        return @custom_fields = nil
      end
      @custom_fields = custom_fields
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_until_due Object to be assigned
    def days_until_due=(days_until_due : Int64?)
      if days_until_due.nil?
        return @days_until_due = nil
      end
      @days_until_due = days_until_due
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(default_payment_method : String?)
      if default_payment_method.nil?
        return @default_payment_method = nil
      end
      _default_payment_method = default_payment_method.not_nil!
      if _default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @default_payment_method = default_payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_source Object to be assigned
    def default_source=(default_source : String?)
      if default_source.nil?
        return @default_source = nil
      end
      _default_source = default_source.not_nil!
      if _default_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_source\", the character length must be smaller than or equal to 5000.")
      end

      @default_source = default_source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_tax_rates Object to be assigned
    def default_tax_rates=(default_tax_rates : Stripe::PostInvoicesInvoiceRequestDefaultTaxRates?)
      if default_tax_rates.nil?
        return @default_tax_rates = nil
      end
      @default_tax_rates = default_tax_rates
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 1500.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(discounts : Stripe::PostInvoicesInvoiceRequestDiscounts?)
      if discounts.nil?
        return @discounts = nil
      end
      @discounts = discounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] due_date Object to be assigned
    def due_date=(due_date : Int64?)
      if due_date.nil?
        return @due_date = nil
      end
      @due_date = due_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] footer Object to be assigned
    def footer=(footer : String?)
      if footer.nil?
        return @footer = nil
      end
      _footer = footer.not_nil!
      if _footer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
      end

      @footer = footer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Stripe::PostAccountRequestMetadata?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(on_behalf_of : Stripe::PostInvoicesInvoiceRequestOnBehalfOf?)
      if on_behalf_of.nil?
        return @on_behalf_of = nil
      end
      @on_behalf_of = on_behalf_of
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_settings Object to be assigned
    def payment_settings=(payment_settings : Stripe::PaymentSettings1?)
      if payment_settings.nil?
        return @payment_settings = nil
      end
      @payment_settings = payment_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rendering_options Object to be assigned
    def rendering_options=(rendering_options : Stripe::PostInvoicesRequestRenderingOptions?)
      if rendering_options.nil?
        return @rendering_options = nil
      end
      @rendering_options = rendering_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        return @statement_descriptor = nil
      end
      _statement_descriptor = statement_descriptor.not_nil!
      if _statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 22.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(transfer_data : Stripe::PostInvoicesInvoiceRequestTransferData?)
      if transfer_data.nil?
        return @transfer_data = nil
      end
      @transfer_data = transfer_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_tax_ids, @application_fee_amount, @auto_advance, @automatic_tax, @collection_method, @custom_fields, @days_until_due, @default_payment_method, @default_source, @default_tax_rates, @description, @discounts, @due_date, @expand, @footer, @metadata, @on_behalf_of, @payment_settings, @rendering_options, @statement_descriptor, @transfer_data)
  end
end
