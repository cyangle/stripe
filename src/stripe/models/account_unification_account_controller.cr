#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./account_unification_account_controller_fees"
require "./account_unification_account_controller_losses"
require "./account_unification_account_controller_stripe_dashboard"

module Stripe
  #
  class AccountUnificationAccountController
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [account, application]."
    VALID_VALUES_FOR__TYPE  = String.static_array("account", "application")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "fees", type: Stripe::AccountUnificationAccountControllerFees?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fees : Stripe::AccountUnificationAccountControllerFees? = nil

    # `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
    @[JSON::Field(key: "is_controller", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter is_controller : Bool? = nil

    @[JSON::Field(key: "losses", type: Stripe::AccountUnificationAccountControllerLosses?, default: nil, required: false, nullable: false, emit_null: false)]
    getter losses : Stripe::AccountUnificationAccountControllerLosses? = nil

    # A value indicating responsibility for collecting requirements on this account. Only returned when the Connect application retrieving the resource controls the account.
    @[JSON::Field(key: "requirement_collection", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter requirement_collection : String? = nil
    ERROR_MESSAGE_FOR_REQUIREMENT_COLLECTION = "invalid value for \"requirement_collection\", must be one of [application, stripe]."
    VALID_VALUES_FOR_REQUIREMENT_COLLECTION  = String.static_array("application", "stripe")

    @[JSON::Field(key: "stripe_dashboard", type: Stripe::AccountUnificationAccountControllerStripeDashboard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter stripe_dashboard : Stripe::AccountUnificationAccountControllerStripeDashboard? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @fees : Stripe::AccountUnificationAccountControllerFees? = nil,
      @is_controller : Bool? = nil,
      @losses : Stripe::AccountUnificationAccountControllerLosses? = nil,
      @requirement_collection : String? = nil,
      @stripe_dashboard : Stripe::AccountUnificationAccountControllerStripeDashboard? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_fees = @fees).nil?
        invalid_properties.concat(_fees.list_invalid_properties_for("fees")) if _fees.is_a?(OpenApi::Validatable)
      end

      unless (_losses = @losses).nil?
        invalid_properties.concat(_losses.list_invalid_properties_for("losses")) if _losses.is_a?(OpenApi::Validatable)
      end
      unless (_requirement_collection = @requirement_collection).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUIREMENT_COLLECTION) unless OpenApi::EnumValidator.valid?(_requirement_collection, VALID_VALUES_FOR_REQUIREMENT_COLLECTION)
      end
      unless (_stripe_dashboard = @stripe_dashboard).nil?
        invalid_properties.concat(_stripe_dashboard.list_invalid_properties_for("stripe_dashboard")) if _stripe_dashboard.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_fees = @fees).nil?
        return false if _fees.is_a?(OpenApi::Validatable) && !_fees.valid?
      end

      unless (_losses = @losses).nil?
        return false if _losses.is_a?(OpenApi::Validatable) && !_losses.valid?
      end

      unless (_requirement_collection = @requirement_collection).nil?
        return false unless OpenApi::EnumValidator.valid?(_requirement_collection, VALID_VALUES_FOR_REQUIREMENT_COLLECTION)
      end

      unless (_stripe_dashboard = @stripe_dashboard).nil?
        return false if _stripe_dashboard.is_a?(OpenApi::Validatable) && !_stripe_dashboard.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fees Object to be assigned
    def fees=(new_value : Stripe::AccountUnificationAccountControllerFees?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fees = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_controller Object to be assigned
    def is_controller=(new_value : Bool?)
      @is_controller = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] losses Object to be assigned
    def losses=(new_value : Stripe::AccountUnificationAccountControllerLosses?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @losses = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] requirement_collection Object to be assigned
    def requirement_collection=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("requirement_collection", new_value, VALID_VALUES_FOR_REQUIREMENT_COLLECTION)
      end

      @requirement_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stripe_dashboard Object to be assigned
    def stripe_dashboard=(new_value : Stripe::AccountUnificationAccountControllerStripeDashboard?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @stripe_dashboard = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @fees, @is_controller, @losses, @requirement_collection, @stripe_dashboard)
  end
end
