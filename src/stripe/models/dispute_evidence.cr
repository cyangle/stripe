#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class DisputeEvidence
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
    @[JSON::Field(key: "access_activity_log", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: access_activity_log.nil? && !access_activity_log_present?)]
    getter access_activity_log : String? = nil

    @[JSON::Field(ignore: true)]
    property? access_activity_log_present : Bool = false

    # The billing address provided by the customer.
    @[JSON::Field(key: "billing_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_address.nil? && !billing_address_present?)]
    getter billing_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? billing_address_present : Bool = false

    @[JSON::Field(key: "cancellation_policy", type: Stripe::DisputeEvidenceCancellationPolicy?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cancellation_policy.nil? && !cancellation_policy_present?)]
    getter cancellation_policy : Stripe::DisputeEvidenceCancellationPolicy? = nil

    @[JSON::Field(ignore: true)]
    property? cancellation_policy_present : Bool = false

    # An explanation of how and when the customer was shown your refund policy prior to purchase.
    @[JSON::Field(key: "cancellation_policy_disclosure", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cancellation_policy_disclosure.nil? && !cancellation_policy_disclosure_present?)]
    getter cancellation_policy_disclosure : String? = nil

    @[JSON::Field(ignore: true)]
    property? cancellation_policy_disclosure_present : Bool = false

    # A justification for why the customer's subscription was not canceled.
    @[JSON::Field(key: "cancellation_rebuttal", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cancellation_rebuttal.nil? && !cancellation_rebuttal_present?)]
    getter cancellation_rebuttal : String? = nil

    @[JSON::Field(ignore: true)]
    property? cancellation_rebuttal_present : Bool = false

    @[JSON::Field(key: "customer_communication", type: Stripe::DisputeEvidenceCustomerCommunication?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_communication.nil? && !customer_communication_present?)]
    getter customer_communication : Stripe::DisputeEvidenceCustomerCommunication? = nil

    @[JSON::Field(ignore: true)]
    property? customer_communication_present : Bool = false

    # The email address of the customer.
    @[JSON::Field(key: "customer_email_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_email_address.nil? && !customer_email_address_present?)]
    getter customer_email_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? customer_email_address_present : Bool = false

    # The name of the customer.
    @[JSON::Field(key: "customer_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_name.nil? && !customer_name_present?)]
    getter customer_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? customer_name_present : Bool = false

    # The IP address that the customer used when making the purchase.
    @[JSON::Field(key: "customer_purchase_ip", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_purchase_ip.nil? && !customer_purchase_ip_present?)]
    getter customer_purchase_ip : String? = nil

    @[JSON::Field(ignore: true)]
    property? customer_purchase_ip_present : Bool = false

    @[JSON::Field(key: "customer_signature", type: Stripe::DisputeEvidenceCustomerSignature?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_signature.nil? && !customer_signature_present?)]
    getter customer_signature : Stripe::DisputeEvidenceCustomerSignature? = nil

    @[JSON::Field(ignore: true)]
    property? customer_signature_present : Bool = false

    @[JSON::Field(key: "duplicate_charge_documentation", type: Stripe::DisputeEvidenceDuplicateChargeDocumentation?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: duplicate_charge_documentation.nil? && !duplicate_charge_documentation_present?)]
    getter duplicate_charge_documentation : Stripe::DisputeEvidenceDuplicateChargeDocumentation? = nil

    @[JSON::Field(ignore: true)]
    property? duplicate_charge_documentation_present : Bool = false

    # An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
    @[JSON::Field(key: "duplicate_charge_explanation", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: duplicate_charge_explanation.nil? && !duplicate_charge_explanation_present?)]
    getter duplicate_charge_explanation : String? = nil

    @[JSON::Field(ignore: true)]
    property? duplicate_charge_explanation_present : Bool = false

    # The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
    @[JSON::Field(key: "duplicate_charge_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: duplicate_charge_id.nil? && !duplicate_charge_id_present?)]
    getter duplicate_charge_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? duplicate_charge_id_present : Bool = false

    # A description of the product or service that was sold.
    @[JSON::Field(key: "product_description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: product_description.nil? && !product_description_present?)]
    getter product_description : String? = nil

    @[JSON::Field(ignore: true)]
    property? product_description_present : Bool = false

    @[JSON::Field(key: "receipt", type: Stripe::DisputeEvidenceReceipt?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: receipt.nil? && !receipt_present?)]
    getter receipt : Stripe::DisputeEvidenceReceipt? = nil

    @[JSON::Field(ignore: true)]
    property? receipt_present : Bool = false

    @[JSON::Field(key: "refund_policy", type: Stripe::DisputeEvidenceRefundPolicy?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_policy.nil? && !refund_policy_present?)]
    getter refund_policy : Stripe::DisputeEvidenceRefundPolicy? = nil

    @[JSON::Field(ignore: true)]
    property? refund_policy_present : Bool = false

    # Documentation demonstrating that the customer was shown your refund policy prior to purchase.
    @[JSON::Field(key: "refund_policy_disclosure", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_policy_disclosure.nil? && !refund_policy_disclosure_present?)]
    getter refund_policy_disclosure : String? = nil

    @[JSON::Field(ignore: true)]
    property? refund_policy_disclosure_present : Bool = false

    # A justification for why the customer is not entitled to a refund.
    @[JSON::Field(key: "refund_refusal_explanation", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_refusal_explanation.nil? && !refund_refusal_explanation_present?)]
    getter refund_refusal_explanation : String? = nil

    @[JSON::Field(ignore: true)]
    property? refund_refusal_explanation_present : Bool = false

    # The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
    @[JSON::Field(key: "service_date", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: service_date.nil? && !service_date_present?)]
    getter service_date : String? = nil

    @[JSON::Field(ignore: true)]
    property? service_date_present : Bool = false

    @[JSON::Field(key: "service_documentation", type: Stripe::DisputeEvidenceServiceDocumentation?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: service_documentation.nil? && !service_documentation_present?)]
    getter service_documentation : Stripe::DisputeEvidenceServiceDocumentation? = nil

    @[JSON::Field(ignore: true)]
    property? service_documentation_present : Bool = false

    # The address to which a physical product was shipped. You should try to include as complete address information as possible.
    @[JSON::Field(key: "shipping_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_address.nil? && !shipping_address_present?)]
    getter shipping_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_address_present : Bool = false

    # The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
    @[JSON::Field(key: "shipping_carrier", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_carrier.nil? && !shipping_carrier_present?)]
    getter shipping_carrier : String? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_carrier_present : Bool = false

    # The date on which a physical product began its route to the shipping address, in a clear human-readable format.
    @[JSON::Field(key: "shipping_date", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_date.nil? && !shipping_date_present?)]
    getter shipping_date : String? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_date_present : Bool = false

    @[JSON::Field(key: "shipping_documentation", type: Stripe::DisputeEvidenceShippingDocumentation?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_documentation.nil? && !shipping_documentation_present?)]
    getter shipping_documentation : Stripe::DisputeEvidenceShippingDocumentation? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_documentation_present : Bool = false

    # The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
    @[JSON::Field(key: "shipping_tracking_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_tracking_number.nil? && !shipping_tracking_number_present?)]
    getter shipping_tracking_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_tracking_number_present : Bool = false

    @[JSON::Field(key: "uncategorized_file", type: Stripe::DisputeEvidenceUncategorizedFile?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: uncategorized_file.nil? && !uncategorized_file_present?)]
    getter uncategorized_file : Stripe::DisputeEvidenceUncategorizedFile? = nil

    @[JSON::Field(ignore: true)]
    property? uncategorized_file_present : Bool = false

    # Any additional evidence or statements.
    @[JSON::Field(key: "uncategorized_text", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: uncategorized_text.nil? && !uncategorized_text_present?)]
    getter uncategorized_text : String? = nil

    @[JSON::Field(ignore: true)]
    property? uncategorized_text_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @access_activity_log : String? = nil,
      @billing_address : String? = nil,
      @cancellation_policy : Stripe::DisputeEvidenceCancellationPolicy? = nil,
      @cancellation_policy_disclosure : String? = nil,
      @cancellation_rebuttal : String? = nil,
      @customer_communication : Stripe::DisputeEvidenceCustomerCommunication? = nil,
      @customer_email_address : String? = nil,
      @customer_name : String? = nil,
      @customer_purchase_ip : String? = nil,
      @customer_signature : Stripe::DisputeEvidenceCustomerSignature? = nil,
      @duplicate_charge_documentation : Stripe::DisputeEvidenceDuplicateChargeDocumentation? = nil,
      @duplicate_charge_explanation : String? = nil,
      @duplicate_charge_id : String? = nil,
      @product_description : String? = nil,
      @receipt : Stripe::DisputeEvidenceReceipt? = nil,
      @refund_policy : Stripe::DisputeEvidenceRefundPolicy? = nil,
      @refund_policy_disclosure : String? = nil,
      @refund_refusal_explanation : String? = nil,
      @service_date : String? = nil,
      @service_documentation : Stripe::DisputeEvidenceServiceDocumentation? = nil,
      @shipping_address : String? = nil,
      @shipping_carrier : String? = nil,
      @shipping_date : String? = nil,
      @shipping_documentation : Stripe::DisputeEvidenceShippingDocumentation? = nil,
      @shipping_tracking_number : String? = nil,
      @uncategorized_file : Stripe::DisputeEvidenceUncategorizedFile? = nil,
      @uncategorized_text : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _access_activity_log = @access_activity_log
        if _access_activity_log.to_s.size > 150000
          invalid_properties.push("invalid value for \"access_activity_log\", the character length must be smaller than or equal to 150000.")
        end
      end
      if _billing_address = @billing_address
        if _billing_address.to_s.size > 5000
          invalid_properties.push("invalid value for \"billing_address\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model cancellation_policy : Stripe::DisputeEvidenceCancellationPolicy?
      if _cancellation_policy_disclosure = @cancellation_policy_disclosure
        if _cancellation_policy_disclosure.to_s.size > 150000
          invalid_properties.push("invalid value for \"cancellation_policy_disclosure\", the character length must be smaller than or equal to 150000.")
        end
      end
      if _cancellation_rebuttal = @cancellation_rebuttal
        if _cancellation_rebuttal.to_s.size > 150000
          invalid_properties.push("invalid value for \"cancellation_rebuttal\", the character length must be smaller than or equal to 150000.")
        end
      end
      # This is a model customer_communication : Stripe::DisputeEvidenceCustomerCommunication?
      if _customer_email_address = @customer_email_address
        if _customer_email_address.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer_email_address\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _customer_name = @customer_name
        if _customer_name.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer_name\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _customer_purchase_ip = @customer_purchase_ip
        if _customer_purchase_ip.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer_purchase_ip\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model customer_signature : Stripe::DisputeEvidenceCustomerSignature?
      # This is a model duplicate_charge_documentation : Stripe::DisputeEvidenceDuplicateChargeDocumentation?
      if _duplicate_charge_explanation = @duplicate_charge_explanation
        if _duplicate_charge_explanation.to_s.size > 150000
          invalid_properties.push("invalid value for \"duplicate_charge_explanation\", the character length must be smaller than or equal to 150000.")
        end
      end
      if _duplicate_charge_id = @duplicate_charge_id
        if _duplicate_charge_id.to_s.size > 5000
          invalid_properties.push("invalid value for \"duplicate_charge_id\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _product_description = @product_description
        if _product_description.to_s.size > 150000
          invalid_properties.push("invalid value for \"product_description\", the character length must be smaller than or equal to 150000.")
        end
      end
      # This is a model receipt : Stripe::DisputeEvidenceReceipt?
      # This is a model refund_policy : Stripe::DisputeEvidenceRefundPolicy?
      if _refund_policy_disclosure = @refund_policy_disclosure
        if _refund_policy_disclosure.to_s.size > 150000
          invalid_properties.push("invalid value for \"refund_policy_disclosure\", the character length must be smaller than or equal to 150000.")
        end
      end
      if _refund_refusal_explanation = @refund_refusal_explanation
        if _refund_refusal_explanation.to_s.size > 150000
          invalid_properties.push("invalid value for \"refund_refusal_explanation\", the character length must be smaller than or equal to 150000.")
        end
      end
      if _service_date = @service_date
        if _service_date.to_s.size > 5000
          invalid_properties.push("invalid value for \"service_date\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model service_documentation : Stripe::DisputeEvidenceServiceDocumentation?
      if _shipping_address = @shipping_address
        if _shipping_address.to_s.size > 5000
          invalid_properties.push("invalid value for \"shipping_address\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _shipping_carrier = @shipping_carrier
        if _shipping_carrier.to_s.size > 5000
          invalid_properties.push("invalid value for \"shipping_carrier\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _shipping_date = @shipping_date
        if _shipping_date.to_s.size > 5000
          invalid_properties.push("invalid value for \"shipping_date\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model shipping_documentation : Stripe::DisputeEvidenceShippingDocumentation?
      if _shipping_tracking_number = @shipping_tracking_number
        if _shipping_tracking_number.to_s.size > 5000
          invalid_properties.push("invalid value for \"shipping_tracking_number\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model uncategorized_file : Stripe::DisputeEvidenceUncategorizedFile?
      if _uncategorized_text = @uncategorized_text
        if _uncategorized_text.to_s.size > 150000
          invalid_properties.push("invalid value for \"uncategorized_text\", the character length must be smaller than or equal to 150000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _access_activity_log = @access_activity_log
        return false if _access_activity_log.to_s.size > 150000
      end
      if _billing_address = @billing_address
        return false if _billing_address.to_s.size > 5000
      end
      if _cancellation_policy_disclosure = @cancellation_policy_disclosure
        return false if _cancellation_policy_disclosure.to_s.size > 150000
      end
      if _cancellation_rebuttal = @cancellation_rebuttal
        return false if _cancellation_rebuttal.to_s.size > 150000
      end
      if _customer_email_address = @customer_email_address
        return false if _customer_email_address.to_s.size > 5000
      end
      if _customer_name = @customer_name
        return false if _customer_name.to_s.size > 5000
      end
      if _customer_purchase_ip = @customer_purchase_ip
        return false if _customer_purchase_ip.to_s.size > 5000
      end
      if _duplicate_charge_explanation = @duplicate_charge_explanation
        return false if _duplicate_charge_explanation.to_s.size > 150000
      end
      if _duplicate_charge_id = @duplicate_charge_id
        return false if _duplicate_charge_id.to_s.size > 5000
      end
      if _product_description = @product_description
        return false if _product_description.to_s.size > 150000
      end
      if _refund_policy_disclosure = @refund_policy_disclosure
        return false if _refund_policy_disclosure.to_s.size > 150000
      end
      if _refund_refusal_explanation = @refund_refusal_explanation
        return false if _refund_refusal_explanation.to_s.size > 150000
      end
      if _service_date = @service_date
        return false if _service_date.to_s.size > 5000
      end
      if _shipping_address = @shipping_address
        return false if _shipping_address.to_s.size > 5000
      end
      if _shipping_carrier = @shipping_carrier
        return false if _shipping_carrier.to_s.size > 5000
      end
      if _shipping_date = @shipping_date
        return false if _shipping_date.to_s.size > 5000
      end
      if _shipping_tracking_number = @shipping_tracking_number
        return false if _shipping_tracking_number.to_s.size > 5000
      end
      if _uncategorized_text = @uncategorized_text
        return false if _uncategorized_text.to_s.size > 150000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_activity_log Object to be assigned
    def access_activity_log=(access_activity_log : String?)
      if access_activity_log.nil?
        return @access_activity_log = nil
      end
      _access_activity_log = access_activity_log.not_nil!
      if _access_activity_log.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"access_activity_log\", the character length must be smaller than or equal to 150000.")
      end

      @access_activity_log = access_activity_log
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address Object to be assigned
    def billing_address=(billing_address : String?)
      if billing_address.nil?
        return @billing_address = nil
      end
      _billing_address = billing_address.not_nil!
      if _billing_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"billing_address\", the character length must be smaller than or equal to 5000.")
      end

      @billing_address = billing_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_policy Object to be assigned
    def cancellation_policy=(cancellation_policy : Stripe::DisputeEvidenceCancellationPolicy?)
      if cancellation_policy.nil?
        return @cancellation_policy = nil
      end
      @cancellation_policy = cancellation_policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_policy_disclosure Object to be assigned
    def cancellation_policy_disclosure=(cancellation_policy_disclosure : String?)
      if cancellation_policy_disclosure.nil?
        return @cancellation_policy_disclosure = nil
      end
      _cancellation_policy_disclosure = cancellation_policy_disclosure.not_nil!
      if _cancellation_policy_disclosure.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"cancellation_policy_disclosure\", the character length must be smaller than or equal to 150000.")
      end

      @cancellation_policy_disclosure = cancellation_policy_disclosure
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_rebuttal Object to be assigned
    def cancellation_rebuttal=(cancellation_rebuttal : String?)
      if cancellation_rebuttal.nil?
        return @cancellation_rebuttal = nil
      end
      _cancellation_rebuttal = cancellation_rebuttal.not_nil!
      if _cancellation_rebuttal.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"cancellation_rebuttal\", the character length must be smaller than or equal to 150000.")
      end

      @cancellation_rebuttal = cancellation_rebuttal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_communication Object to be assigned
    def customer_communication=(customer_communication : Stripe::DisputeEvidenceCustomerCommunication?)
      if customer_communication.nil?
        return @customer_communication = nil
      end
      @customer_communication = customer_communication
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_email_address Object to be assigned
    def customer_email_address=(customer_email_address : String?)
      if customer_email_address.nil?
        return @customer_email_address = nil
      end
      _customer_email_address = customer_email_address.not_nil!
      if _customer_email_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_email_address\", the character length must be smaller than or equal to 5000.")
      end

      @customer_email_address = customer_email_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_name Object to be assigned
    def customer_name=(customer_name : String?)
      if customer_name.nil?
        return @customer_name = nil
      end
      _customer_name = customer_name.not_nil!
      if _customer_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_name\", the character length must be smaller than or equal to 5000.")
      end

      @customer_name = customer_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_purchase_ip Object to be assigned
    def customer_purchase_ip=(customer_purchase_ip : String?)
      if customer_purchase_ip.nil?
        return @customer_purchase_ip = nil
      end
      _customer_purchase_ip = customer_purchase_ip.not_nil!
      if _customer_purchase_ip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_purchase_ip\", the character length must be smaller than or equal to 5000.")
      end

      @customer_purchase_ip = customer_purchase_ip
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_signature Object to be assigned
    def customer_signature=(customer_signature : Stripe::DisputeEvidenceCustomerSignature?)
      if customer_signature.nil?
        return @customer_signature = nil
      end
      @customer_signature = customer_signature
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duplicate_charge_documentation Object to be assigned
    def duplicate_charge_documentation=(duplicate_charge_documentation : Stripe::DisputeEvidenceDuplicateChargeDocumentation?)
      if duplicate_charge_documentation.nil?
        return @duplicate_charge_documentation = nil
      end
      @duplicate_charge_documentation = duplicate_charge_documentation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duplicate_charge_explanation Object to be assigned
    def duplicate_charge_explanation=(duplicate_charge_explanation : String?)
      if duplicate_charge_explanation.nil?
        return @duplicate_charge_explanation = nil
      end
      _duplicate_charge_explanation = duplicate_charge_explanation.not_nil!
      if _duplicate_charge_explanation.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"duplicate_charge_explanation\", the character length must be smaller than or equal to 150000.")
      end

      @duplicate_charge_explanation = duplicate_charge_explanation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duplicate_charge_id Object to be assigned
    def duplicate_charge_id=(duplicate_charge_id : String?)
      if duplicate_charge_id.nil?
        return @duplicate_charge_id = nil
      end
      _duplicate_charge_id = duplicate_charge_id.not_nil!
      if _duplicate_charge_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"duplicate_charge_id\", the character length must be smaller than or equal to 5000.")
      end

      @duplicate_charge_id = duplicate_charge_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_description Object to be assigned
    def product_description=(product_description : String?)
      if product_description.nil?
        return @product_description = nil
      end
      _product_description = product_description.not_nil!
      if _product_description.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"product_description\", the character length must be smaller than or equal to 150000.")
      end

      @product_description = product_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt Object to be assigned
    def receipt=(receipt : Stripe::DisputeEvidenceReceipt?)
      if receipt.nil?
        return @receipt = nil
      end
      @receipt = receipt
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_policy Object to be assigned
    def refund_policy=(refund_policy : Stripe::DisputeEvidenceRefundPolicy?)
      if refund_policy.nil?
        return @refund_policy = nil
      end
      @refund_policy = refund_policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_policy_disclosure Object to be assigned
    def refund_policy_disclosure=(refund_policy_disclosure : String?)
      if refund_policy_disclosure.nil?
        return @refund_policy_disclosure = nil
      end
      _refund_policy_disclosure = refund_policy_disclosure.not_nil!
      if _refund_policy_disclosure.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"refund_policy_disclosure\", the character length must be smaller than or equal to 150000.")
      end

      @refund_policy_disclosure = refund_policy_disclosure
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_refusal_explanation Object to be assigned
    def refund_refusal_explanation=(refund_refusal_explanation : String?)
      if refund_refusal_explanation.nil?
        return @refund_refusal_explanation = nil
      end
      _refund_refusal_explanation = refund_refusal_explanation.not_nil!
      if _refund_refusal_explanation.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"refund_refusal_explanation\", the character length must be smaller than or equal to 150000.")
      end

      @refund_refusal_explanation = refund_refusal_explanation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_date Object to be assigned
    def service_date=(service_date : String?)
      if service_date.nil?
        return @service_date = nil
      end
      _service_date = service_date.not_nil!
      if _service_date.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"service_date\", the character length must be smaller than or equal to 5000.")
      end

      @service_date = service_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_documentation Object to be assigned
    def service_documentation=(service_documentation : Stripe::DisputeEvidenceServiceDocumentation?)
      if service_documentation.nil?
        return @service_documentation = nil
      end
      @service_documentation = service_documentation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_address Object to be assigned
    def shipping_address=(shipping_address : String?)
      if shipping_address.nil?
        return @shipping_address = nil
      end
      _shipping_address = shipping_address.not_nil!
      if _shipping_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_address\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_address = shipping_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_carrier Object to be assigned
    def shipping_carrier=(shipping_carrier : String?)
      if shipping_carrier.nil?
        return @shipping_carrier = nil
      end
      _shipping_carrier = shipping_carrier.not_nil!
      if _shipping_carrier.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_carrier\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_carrier = shipping_carrier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_date Object to be assigned
    def shipping_date=(shipping_date : String?)
      if shipping_date.nil?
        return @shipping_date = nil
      end
      _shipping_date = shipping_date.not_nil!
      if _shipping_date.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_date\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_date = shipping_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_documentation Object to be assigned
    def shipping_documentation=(shipping_documentation : Stripe::DisputeEvidenceShippingDocumentation?)
      if shipping_documentation.nil?
        return @shipping_documentation = nil
      end
      @shipping_documentation = shipping_documentation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_tracking_number Object to be assigned
    def shipping_tracking_number=(shipping_tracking_number : String?)
      if shipping_tracking_number.nil?
        return @shipping_tracking_number = nil
      end
      _shipping_tracking_number = shipping_tracking_number.not_nil!
      if _shipping_tracking_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_tracking_number\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_tracking_number = shipping_tracking_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uncategorized_file Object to be assigned
    def uncategorized_file=(uncategorized_file : Stripe::DisputeEvidenceUncategorizedFile?)
      if uncategorized_file.nil?
        return @uncategorized_file = nil
      end
      @uncategorized_file = uncategorized_file
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uncategorized_text Object to be assigned
    def uncategorized_text=(uncategorized_text : String?)
      if uncategorized_text.nil?
        return @uncategorized_text = nil
      end
      _uncategorized_text = uncategorized_text.not_nil!
      if _uncategorized_text.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"uncategorized_text\", the character length must be smaller than or equal to 150000.")
      end

      @uncategorized_text = uncategorized_text
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@access_activity_log, @access_activity_log_present, @billing_address, @billing_address_present, @cancellation_policy, @cancellation_policy_present, @cancellation_policy_disclosure, @cancellation_policy_disclosure_present, @cancellation_rebuttal, @cancellation_rebuttal_present, @customer_communication, @customer_communication_present, @customer_email_address, @customer_email_address_present, @customer_name, @customer_name_present, @customer_purchase_ip, @customer_purchase_ip_present, @customer_signature, @customer_signature_present, @duplicate_charge_documentation, @duplicate_charge_documentation_present, @duplicate_charge_explanation, @duplicate_charge_explanation_present, @duplicate_charge_id, @duplicate_charge_id_present, @product_description, @product_description_present, @receipt, @receipt_present, @refund_policy, @refund_policy_present, @refund_policy_disclosure, @refund_policy_disclosure_present, @refund_refusal_explanation, @refund_refusal_explanation_present, @service_date, @service_date_present, @service_documentation, @service_documentation_present, @shipping_address, @shipping_address_present, @shipping_carrier, @shipping_carrier_present, @shipping_date, @shipping_date_present, @shipping_documentation, @shipping_documentation_present, @shipping_tracking_number, @shipping_tracking_number_present, @uncategorized_file, @uncategorized_file_present, @uncategorized_text, @uncategorized_text_present)
  end
end
