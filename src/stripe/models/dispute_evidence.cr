#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  class DisputeEvidence
    include NASON::Serializable

    # Optional properties
    # Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
    @[NASON::Field(key: "access_activity_log", type: String? | Null, nillable: true)]
    property access_activity_log : String? | Null

    # The billing address provided by the customer.
    @[NASON::Field(key: "billing_address", type: String? | Null, nillable: true)]
    property billing_address : String? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.
    @[NASON::Field(key: "cancellation_policy", type: String | File? | Null, nillable: true)]
    property cancellation_policy : String | File? | Null

    # An explanation of how and when the customer was shown your refund policy prior to purchase.
    @[NASON::Field(key: "cancellation_policy_disclosure", type: String? | Null, nillable: true)]
    property cancellation_policy_disclosure : String? | Null

    # A justification for why the customer's subscription was not canceled.
    @[NASON::Field(key: "cancellation_rebuttal", type: String? | Null, nillable: true)]
    property cancellation_rebuttal : String? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.
    @[NASON::Field(key: "customer_communication", type: String | File? | Null, nillable: true)]
    property customer_communication : String | File? | Null

    # The email address of the customer.
    @[NASON::Field(key: "customer_email_address", type: String? | Null, nillable: true)]
    property customer_email_address : String? | Null

    # The name of the customer.
    @[NASON::Field(key: "customer_name", type: String? | Null, nillable: true)]
    property customer_name : String? | Null

    # The IP address that the customer used when making the purchase.
    @[NASON::Field(key: "customer_purchase_ip", type: String? | Null, nillable: true)]
    property customer_purchase_ip : String? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.
    @[NASON::Field(key: "customer_signature", type: String | File? | Null, nillable: true)]
    property customer_signature : String | File? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.
    @[NASON::Field(key: "duplicate_charge_documentation", type: String | File? | Null, nillable: true)]
    property duplicate_charge_documentation : String | File? | Null

    # An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
    @[NASON::Field(key: "duplicate_charge_explanation", type: String? | Null, nillable: true)]
    property duplicate_charge_explanation : String? | Null

    # The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
    @[NASON::Field(key: "duplicate_charge_id", type: String? | Null, nillable: true)]
    property duplicate_charge_id : String? | Null

    # A description of the product or service that was sold.
    @[NASON::Field(key: "product_description", type: String? | Null, nillable: true)]
    property product_description : String? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.
    @[NASON::Field(key: "receipt", type: String | File? | Null, nillable: true)]
    property receipt : String | File? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.
    @[NASON::Field(key: "refund_policy", type: String | File? | Null, nillable: true)]
    property refund_policy : String | File? | Null

    # Documentation demonstrating that the customer was shown your refund policy prior to purchase.
    @[NASON::Field(key: "refund_policy_disclosure", type: String? | Null, nillable: true)]
    property refund_policy_disclosure : String? | Null

    # A justification for why the customer is not entitled to a refund.
    @[NASON::Field(key: "refund_refusal_explanation", type: String? | Null, nillable: true)]
    property refund_refusal_explanation : String? | Null

    # The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
    @[NASON::Field(key: "service_date", type: String? | Null, nillable: true)]
    property service_date : String? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.
    @[NASON::Field(key: "service_documentation", type: String | File? | Null, nillable: true)]
    property service_documentation : String | File? | Null

    # The address to which a physical product was shipped. You should try to include as complete address information as possible.
    @[NASON::Field(key: "shipping_address", type: String? | Null, nillable: true)]
    property shipping_address : String? | Null

    # The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
    @[NASON::Field(key: "shipping_carrier", type: String? | Null, nillable: true)]
    property shipping_carrier : String? | Null

    # The date on which a physical product began its route to the shipping address, in a clear human-readable format.
    @[NASON::Field(key: "shipping_date", type: String? | Null, nillable: true)]
    property shipping_date : String? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.
    @[NASON::Field(key: "shipping_documentation", type: String | File? | Null, nillable: true)]
    property shipping_documentation : String | File? | Null

    # The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
    @[NASON::Field(key: "shipping_tracking_number", type: String? | Null, nillable: true)]
    property shipping_tracking_number : String? | Null

    # (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.
    @[NASON::Field(key: "uncategorized_file", type: String | File? | Null, nillable: true)]
    property uncategorized_file : String | File? | Null

    # Any additional evidence or statements.
    @[NASON::Field(key: "uncategorized_text", type: String? | Null, nillable: true)]
    property uncategorized_text : String? | Null

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @access_activity_log : String? | Null = nil, @billing_address : String? | Null = nil, @cancellation_policy : String | File? | Null = nil, @cancellation_policy_disclosure : String? | Null = nil, @cancellation_rebuttal : String? | Null = nil, @customer_communication : String | File? | Null = nil, @customer_email_address : String? | Null = nil, @customer_name : String? | Null = nil, @customer_purchase_ip : String? | Null = nil, @customer_signature : String | File? | Null = nil, @duplicate_charge_documentation : String | File? | Null = nil, @duplicate_charge_explanation : String? | Null = nil, @duplicate_charge_id : String? | Null = nil, @product_description : String? | Null = nil, @receipt : String | File? | Null = nil, @refund_policy : String | File? | Null = nil, @refund_policy_disclosure : String? | Null = nil, @refund_refusal_explanation : String? | Null = nil, @service_date : String? | Null = nil, @service_documentation : String | File? | Null = nil, @shipping_address : String? | Null = nil, @shipping_carrier : String? | Null = nil, @shipping_date : String? | Null = nil, @shipping_documentation : String | File? | Null = nil, @shipping_tracking_number : String? | Null = nil, @uncategorized_file : String | File? | Null = nil, @uncategorized_text : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@access_activity_log.nil? && !@access_activity_log.null? && @access_activity_log.to_s.size > 150000
        invalid_properties.push("invalid value for \"access_activity_log\", the character length must be smaller than or equal to 150000.")
      end

      if !@billing_address.nil? && !@billing_address.null? && @billing_address.to_s.size > 5000
        invalid_properties.push("invalid value for \"billing_address\", the character length must be smaller than or equal to 5000.")
      end

      if !@cancellation_policy_disclosure.nil? && !@cancellation_policy_disclosure.null? && @cancellation_policy_disclosure.to_s.size > 150000
        invalid_properties.push("invalid value for \"cancellation_policy_disclosure\", the character length must be smaller than or equal to 150000.")
      end

      if !@cancellation_rebuttal.nil? && !@cancellation_rebuttal.null? && @cancellation_rebuttal.to_s.size > 150000
        invalid_properties.push("invalid value for \"cancellation_rebuttal\", the character length must be smaller than or equal to 150000.")
      end

      if !@customer_email_address.nil? && !@customer_email_address.null? && @customer_email_address.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer_email_address\", the character length must be smaller than or equal to 5000.")
      end

      if !@customer_name.nil? && !@customer_name.null? && @customer_name.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer_name\", the character length must be smaller than or equal to 5000.")
      end

      if !@customer_purchase_ip.nil? && !@customer_purchase_ip.null? && @customer_purchase_ip.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer_purchase_ip\", the character length must be smaller than or equal to 5000.")
      end

      if !@duplicate_charge_explanation.nil? && !@duplicate_charge_explanation.null? && @duplicate_charge_explanation.to_s.size > 150000
        invalid_properties.push("invalid value for \"duplicate_charge_explanation\", the character length must be smaller than or equal to 150000.")
      end

      if !@duplicate_charge_id.nil? && !@duplicate_charge_id.null? && @duplicate_charge_id.to_s.size > 5000
        invalid_properties.push("invalid value for \"duplicate_charge_id\", the character length must be smaller than or equal to 5000.")
      end

      if !@product_description.nil? && !@product_description.null? && @product_description.to_s.size > 150000
        invalid_properties.push("invalid value for \"product_description\", the character length must be smaller than or equal to 150000.")
      end

      if !@refund_policy_disclosure.nil? && !@refund_policy_disclosure.null? && @refund_policy_disclosure.to_s.size > 150000
        invalid_properties.push("invalid value for \"refund_policy_disclosure\", the character length must be smaller than or equal to 150000.")
      end

      if !@refund_refusal_explanation.nil? && !@refund_refusal_explanation.null? && @refund_refusal_explanation.to_s.size > 150000
        invalid_properties.push("invalid value for \"refund_refusal_explanation\", the character length must be smaller than or equal to 150000.")
      end

      if !@service_date.nil? && !@service_date.null? && @service_date.to_s.size > 5000
        invalid_properties.push("invalid value for \"service_date\", the character length must be smaller than or equal to 5000.")
      end

      if !@shipping_address.nil? && !@shipping_address.null? && @shipping_address.to_s.size > 5000
        invalid_properties.push("invalid value for \"shipping_address\", the character length must be smaller than or equal to 5000.")
      end

      if !@shipping_carrier.nil? && !@shipping_carrier.null? && @shipping_carrier.to_s.size > 5000
        invalid_properties.push("invalid value for \"shipping_carrier\", the character length must be smaller than or equal to 5000.")
      end

      if !@shipping_date.nil? && !@shipping_date.null? && @shipping_date.to_s.size > 5000
        invalid_properties.push("invalid value for \"shipping_date\", the character length must be smaller than or equal to 5000.")
      end

      if !@shipping_tracking_number.nil? && !@shipping_tracking_number.null? && @shipping_tracking_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"shipping_tracking_number\", the character length must be smaller than or equal to 5000.")
      end

      if !@uncategorized_text.nil? && !@uncategorized_text.null? && @uncategorized_text.to_s.size > 150000
        invalid_properties.push("invalid value for \"uncategorized_text\", the character length must be smaller than or equal to 150000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@access_activity_log.nil? && !@access_activity_log.null? && @access_activity_log.to_s.size > 150000
      return false if !@billing_address.nil? && !@billing_address.null? && @billing_address.to_s.size > 5000
      return false if !@cancellation_policy_disclosure.nil? && !@cancellation_policy_disclosure.null? && @cancellation_policy_disclosure.to_s.size > 150000
      return false if !@cancellation_rebuttal.nil? && !@cancellation_rebuttal.null? && @cancellation_rebuttal.to_s.size > 150000
      return false if !@customer_email_address.nil? && !@customer_email_address.null? && @customer_email_address.to_s.size > 5000
      return false if !@customer_name.nil? && !@customer_name.null? && @customer_name.to_s.size > 5000
      return false if !@customer_purchase_ip.nil? && !@customer_purchase_ip.null? && @customer_purchase_ip.to_s.size > 5000
      return false if !@duplicate_charge_explanation.nil? && !@duplicate_charge_explanation.null? && @duplicate_charge_explanation.to_s.size > 150000
      return false if !@duplicate_charge_id.nil? && !@duplicate_charge_id.null? && @duplicate_charge_id.to_s.size > 5000
      return false if !@product_description.nil? && !@product_description.null? && @product_description.to_s.size > 150000
      return false if !@refund_policy_disclosure.nil? && !@refund_policy_disclosure.null? && @refund_policy_disclosure.to_s.size > 150000
      return false if !@refund_refusal_explanation.nil? && !@refund_refusal_explanation.null? && @refund_refusal_explanation.to_s.size > 150000
      return false if !@service_date.nil? && !@service_date.null? && @service_date.to_s.size > 5000
      return false if !@shipping_address.nil? && !@shipping_address.null? && @shipping_address.to_s.size > 5000
      return false if !@shipping_carrier.nil? && !@shipping_carrier.null? && @shipping_carrier.to_s.size > 5000
      return false if !@shipping_date.nil? && !@shipping_date.null? && @shipping_date.to_s.size > 5000
      return false if !@shipping_tracking_number.nil? && !@shipping_tracking_number.null? && @shipping_tracking_number.to_s.size > 5000
      return false if !@uncategorized_text.nil? && !@uncategorized_text.null? && @uncategorized_text.to_s.size > 150000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] access_activity_log Value to be assigned
    def access_activity_log=(access_activity_log)
      if !access_activity_log.nil? && !@access_activity_log.null? && access_activity_log.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"access_activity_log\", the character length must be smaller than or equal to 150000.")
      end

      @access_activity_log = access_activity_log
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_address Value to be assigned
    def billing_address=(billing_address)
      if !billing_address.nil? && !@billing_address.null? && billing_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"billing_address\", the character length must be smaller than or equal to 5000.")
      end

      @billing_address = billing_address
    end

    # Custom attribute writer method with validation
    # @param [Object] cancellation_policy_disclosure Value to be assigned
    def cancellation_policy_disclosure=(cancellation_policy_disclosure)
      if !cancellation_policy_disclosure.nil? && !@cancellation_policy_disclosure.null? && cancellation_policy_disclosure.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"cancellation_policy_disclosure\", the character length must be smaller than or equal to 150000.")
      end

      @cancellation_policy_disclosure = cancellation_policy_disclosure
    end

    # Custom attribute writer method with validation
    # @param [Object] cancellation_rebuttal Value to be assigned
    def cancellation_rebuttal=(cancellation_rebuttal)
      if !cancellation_rebuttal.nil? && !@cancellation_rebuttal.null? && cancellation_rebuttal.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"cancellation_rebuttal\", the character length must be smaller than or equal to 150000.")
      end

      @cancellation_rebuttal = cancellation_rebuttal
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_email_address Value to be assigned
    def customer_email_address=(customer_email_address)
      if !customer_email_address.nil? && !@customer_email_address.null? && customer_email_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_email_address\", the character length must be smaller than or equal to 5000.")
      end

      @customer_email_address = customer_email_address
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_name Value to be assigned
    def customer_name=(customer_name)
      if !customer_name.nil? && !@customer_name.null? && customer_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_name\", the character length must be smaller than or equal to 5000.")
      end

      @customer_name = customer_name
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_purchase_ip Value to be assigned
    def customer_purchase_ip=(customer_purchase_ip)
      if !customer_purchase_ip.nil? && !@customer_purchase_ip.null? && customer_purchase_ip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_purchase_ip\", the character length must be smaller than or equal to 5000.")
      end

      @customer_purchase_ip = customer_purchase_ip
    end

    # Custom attribute writer method with validation
    # @param [Object] duplicate_charge_explanation Value to be assigned
    def duplicate_charge_explanation=(duplicate_charge_explanation)
      if !duplicate_charge_explanation.nil? && !@duplicate_charge_explanation.null? && duplicate_charge_explanation.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"duplicate_charge_explanation\", the character length must be smaller than or equal to 150000.")
      end

      @duplicate_charge_explanation = duplicate_charge_explanation
    end

    # Custom attribute writer method with validation
    # @param [Object] duplicate_charge_id Value to be assigned
    def duplicate_charge_id=(duplicate_charge_id)
      if !duplicate_charge_id.nil? && !@duplicate_charge_id.null? && duplicate_charge_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"duplicate_charge_id\", the character length must be smaller than or equal to 5000.")
      end

      @duplicate_charge_id = duplicate_charge_id
    end

    # Custom attribute writer method with validation
    # @param [Object] product_description Value to be assigned
    def product_description=(product_description)
      if !product_description.nil? && !@product_description.null? && product_description.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"product_description\", the character length must be smaller than or equal to 150000.")
      end

      @product_description = product_description
    end

    # Custom attribute writer method with validation
    # @param [Object] refund_policy_disclosure Value to be assigned
    def refund_policy_disclosure=(refund_policy_disclosure)
      if !refund_policy_disclosure.nil? && !@refund_policy_disclosure.null? && refund_policy_disclosure.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"refund_policy_disclosure\", the character length must be smaller than or equal to 150000.")
      end

      @refund_policy_disclosure = refund_policy_disclosure
    end

    # Custom attribute writer method with validation
    # @param [Object] refund_refusal_explanation Value to be assigned
    def refund_refusal_explanation=(refund_refusal_explanation)
      if !refund_refusal_explanation.nil? && !@refund_refusal_explanation.null? && refund_refusal_explanation.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"refund_refusal_explanation\", the character length must be smaller than or equal to 150000.")
      end

      @refund_refusal_explanation = refund_refusal_explanation
    end

    # Custom attribute writer method with validation
    # @param [Object] service_date Value to be assigned
    def service_date=(service_date)
      if !service_date.nil? && !@service_date.null? && service_date.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"service_date\", the character length must be smaller than or equal to 5000.")
      end

      @service_date = service_date
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_address Value to be assigned
    def shipping_address=(shipping_address)
      if !shipping_address.nil? && !@shipping_address.null? && shipping_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_address\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_address = shipping_address
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_carrier Value to be assigned
    def shipping_carrier=(shipping_carrier)
      if !shipping_carrier.nil? && !@shipping_carrier.null? && shipping_carrier.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_carrier\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_carrier = shipping_carrier
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_date Value to be assigned
    def shipping_date=(shipping_date)
      if !shipping_date.nil? && !@shipping_date.null? && shipping_date.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_date\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_date = shipping_date
    end

    # Custom attribute writer method with validation
    # @param [Object] shipping_tracking_number Value to be assigned
    def shipping_tracking_number=(shipping_tracking_number)
      if !shipping_tracking_number.nil? && !@shipping_tracking_number.null? && shipping_tracking_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_tracking_number\", the character length must be smaller than or equal to 5000.")
      end

      @shipping_tracking_number = shipping_tracking_number
    end

    # Custom attribute writer method with validation
    # @param [Object] uncategorized_text Value to be assigned
    def uncategorized_text=(uncategorized_text)
      if !uncategorized_text.nil? && !@uncategorized_text.null? && uncategorized_text.to_s.size > 150000
        raise ArgumentError.new("invalid value for \"uncategorized_text\", the character length must be smaller than or equal to 150000.")
      end

      @uncategorized_text = uncategorized_text
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        access_activity_log == o.access_activity_log &&
        billing_address == o.billing_address &&
        cancellation_policy == o.cancellation_policy &&
        cancellation_policy_disclosure == o.cancellation_policy_disclosure &&
        cancellation_rebuttal == o.cancellation_rebuttal &&
        customer_communication == o.customer_communication &&
        customer_email_address == o.customer_email_address &&
        customer_name == o.customer_name &&
        customer_purchase_ip == o.customer_purchase_ip &&
        customer_signature == o.customer_signature &&
        duplicate_charge_documentation == o.duplicate_charge_documentation &&
        duplicate_charge_explanation == o.duplicate_charge_explanation &&
        duplicate_charge_id == o.duplicate_charge_id &&
        product_description == o.product_description &&
        receipt == o.receipt &&
        refund_policy == o.refund_policy &&
        refund_policy_disclosure == o.refund_policy_disclosure &&
        refund_refusal_explanation == o.refund_refusal_explanation &&
        service_date == o.service_date &&
        service_documentation == o.service_documentation &&
        shipping_address == o.shipping_address &&
        shipping_carrier == o.shipping_carrier &&
        shipping_date == o.shipping_date &&
        shipping_documentation == o.shipping_documentation &&
        shipping_tracking_number == o.shipping_tracking_number &&
        uncategorized_file == o.uncategorized_file &&
        uncategorized_text == o.uncategorized_text
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access_activity_log, billing_address, cancellation_policy, cancellation_policy_disclosure, cancellation_rebuttal, customer_communication, customer_email_address, customer_name, customer_purchase_ip, customer_signature, duplicate_charge_documentation, duplicate_charge_explanation, duplicate_charge_id, product_description, receipt, refund_policy, refund_policy_disclosure, refund_refusal_explanation, service_date, service_documentation, shipping_address, shipping_carrier, shipping_date, shipping_documentation, shipping_tracking_number, uncategorized_file, uncategorized_text].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
