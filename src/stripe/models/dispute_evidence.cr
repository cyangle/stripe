#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./dispute_evidence_cancellation_policy"
require "./dispute_evidence_customer_communication"
require "./dispute_evidence_customer_signature"
require "./dispute_evidence_duplicate_charge_documentation"
require "./dispute_evidence_receipt"
require "./dispute_evidence_refund_policy"
require "./dispute_evidence_service_documentation"
require "./dispute_evidence_shipping_documentation"
require "./dispute_evidence_uncategorized_file"

module Stripe
  #
  class DisputeEvidence
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
    @[JSON::Field(key: "access_activity_log", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter access_activity_log : String? = nil
    MAX_LENGTH_FOR_ACCESS_ACTIVITY_LOG = 150000

    # The billing address provided by the customer.
    @[JSON::Field(key: "billing_address", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter billing_address : String? = nil
    MAX_LENGTH_FOR_BILLING_ADDRESS = 5000

    @[JSON::Field(key: "cancellation_policy", type: Stripe::DisputeEvidenceCancellationPolicy?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cancellation_policy : Stripe::DisputeEvidenceCancellationPolicy? = nil

    # An explanation of how and when the customer was shown your refund policy prior to purchase.
    @[JSON::Field(key: "cancellation_policy_disclosure", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cancellation_policy_disclosure : String? = nil
    MAX_LENGTH_FOR_CANCELLATION_POLICY_DISCLOSURE = 150000

    # A justification for why the customer's subscription was not canceled.
    @[JSON::Field(key: "cancellation_rebuttal", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cancellation_rebuttal : String? = nil
    MAX_LENGTH_FOR_CANCELLATION_REBUTTAL = 150000

    @[JSON::Field(key: "customer_communication", type: Stripe::DisputeEvidenceCustomerCommunication?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_communication : Stripe::DisputeEvidenceCustomerCommunication? = nil

    # The email address of the customer.
    @[JSON::Field(key: "customer_email_address", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_email_address : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_EMAIL_ADDRESS = 5000

    # The name of the customer.
    @[JSON::Field(key: "customer_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_name : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_NAME = 5000

    # The IP address that the customer used when making the purchase.
    @[JSON::Field(key: "customer_purchase_ip", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_purchase_ip : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_PURCHASE_IP = 5000

    @[JSON::Field(key: "customer_signature", type: Stripe::DisputeEvidenceCustomerSignature?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_signature : Stripe::DisputeEvidenceCustomerSignature? = nil

    @[JSON::Field(key: "duplicate_charge_documentation", type: Stripe::DisputeEvidenceDuplicateChargeDocumentation?, default: nil, required: true, nullable: true, emit_null: true)]
    getter duplicate_charge_documentation : Stripe::DisputeEvidenceDuplicateChargeDocumentation? = nil

    # An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
    @[JSON::Field(key: "duplicate_charge_explanation", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter duplicate_charge_explanation : String? = nil
    MAX_LENGTH_FOR_DUPLICATE_CHARGE_EXPLANATION = 150000

    # The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
    @[JSON::Field(key: "duplicate_charge_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter duplicate_charge_id : String? = nil
    MAX_LENGTH_FOR_DUPLICATE_CHARGE_ID = 5000

    # A description of the product or service that was sold.
    @[JSON::Field(key: "product_description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter product_description : String? = nil
    MAX_LENGTH_FOR_PRODUCT_DESCRIPTION = 150000

    @[JSON::Field(key: "receipt", type: Stripe::DisputeEvidenceReceipt?, default: nil, required: true, nullable: true, emit_null: true)]
    getter receipt : Stripe::DisputeEvidenceReceipt? = nil

    @[JSON::Field(key: "refund_policy", type: Stripe::DisputeEvidenceRefundPolicy?, default: nil, required: true, nullable: true, emit_null: true)]
    getter refund_policy : Stripe::DisputeEvidenceRefundPolicy? = nil

    # Documentation demonstrating that the customer was shown your refund policy prior to purchase.
    @[JSON::Field(key: "refund_policy_disclosure", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter refund_policy_disclosure : String? = nil
    MAX_LENGTH_FOR_REFUND_POLICY_DISCLOSURE = 150000

    # A justification for why the customer is not entitled to a refund.
    @[JSON::Field(key: "refund_refusal_explanation", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter refund_refusal_explanation : String? = nil
    MAX_LENGTH_FOR_REFUND_REFUSAL_EXPLANATION = 150000

    # The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
    @[JSON::Field(key: "service_date", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter service_date : String? = nil
    MAX_LENGTH_FOR_SERVICE_DATE = 5000

    @[JSON::Field(key: "service_documentation", type: Stripe::DisputeEvidenceServiceDocumentation?, default: nil, required: true, nullable: true, emit_null: true)]
    getter service_documentation : Stripe::DisputeEvidenceServiceDocumentation? = nil

    # The address to which a physical product was shipped. You should try to include as complete address information as possible.
    @[JSON::Field(key: "shipping_address", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_address : String? = nil
    MAX_LENGTH_FOR_SHIPPING_ADDRESS = 5000

    # The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
    @[JSON::Field(key: "shipping_carrier", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_carrier : String? = nil
    MAX_LENGTH_FOR_SHIPPING_CARRIER = 5000

    # The date on which a physical product began its route to the shipping address, in a clear human-readable format.
    @[JSON::Field(key: "shipping_date", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_date : String? = nil
    MAX_LENGTH_FOR_SHIPPING_DATE = 5000

    @[JSON::Field(key: "shipping_documentation", type: Stripe::DisputeEvidenceShippingDocumentation?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_documentation : Stripe::DisputeEvidenceShippingDocumentation? = nil

    # The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
    @[JSON::Field(key: "shipping_tracking_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_tracking_number : String? = nil
    MAX_LENGTH_FOR_SHIPPING_TRACKING_NUMBER = 5000

    @[JSON::Field(key: "uncategorized_file", type: Stripe::DisputeEvidenceUncategorizedFile?, default: nil, required: true, nullable: true, emit_null: true)]
    getter uncategorized_file : Stripe::DisputeEvidenceUncategorizedFile? = nil

    # Any additional evidence or statements.
    @[JSON::Field(key: "uncategorized_text", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter uncategorized_text : String? = nil
    MAX_LENGTH_FOR_UNCATEGORIZED_TEXT = 150000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @access_activity_log : String? = nil,
      @billing_address : String? = nil,
      @cancellation_policy : Stripe::DisputeEvidenceCancellationPolicy? = nil,
      @cancellation_policy_disclosure : String? = nil,
      @cancellation_rebuttal : String? = nil,
      @customer_communication : Stripe::DisputeEvidenceCustomerCommunication? = nil,
      @customer_email_address : String? = nil,
      @customer_name : String? = nil,
      @customer_purchase_ip : String? = nil,
      @customer_signature : Stripe::DisputeEvidenceCustomerSignature? = nil,
      @duplicate_charge_documentation : Stripe::DisputeEvidenceDuplicateChargeDocumentation? = nil,
      @duplicate_charge_explanation : String? = nil,
      @duplicate_charge_id : String? = nil,
      @product_description : String? = nil,
      @receipt : Stripe::DisputeEvidenceReceipt? = nil,
      @refund_policy : Stripe::DisputeEvidenceRefundPolicy? = nil,
      @refund_policy_disclosure : String? = nil,
      @refund_refusal_explanation : String? = nil,
      @service_date : String? = nil,
      @service_documentation : Stripe::DisputeEvidenceServiceDocumentation? = nil,
      @shipping_address : String? = nil,
      @shipping_carrier : String? = nil,
      @shipping_date : String? = nil,
      @shipping_documentation : Stripe::DisputeEvidenceShippingDocumentation? = nil,
      @shipping_tracking_number : String? = nil,
      @uncategorized_file : Stripe::DisputeEvidenceUncategorizedFile? = nil,
      @uncategorized_text : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_access_activity_log = @access_activity_log).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("access_activity_log", _access_activity_log.to_s.size, MAX_LENGTH_FOR_ACCESS_ACTIVITY_LOG)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_billing_address = @billing_address).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("billing_address", _billing_address.to_s.size, MAX_LENGTH_FOR_BILLING_ADDRESS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_cancellation_policy = @cancellation_policy).nil?
        invalid_properties.concat(_cancellation_policy.list_invalid_properties_for("cancellation_policy")) if _cancellation_policy.is_a?(OpenApi::Validatable)
      end
      unless (_cancellation_policy_disclosure = @cancellation_policy_disclosure).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cancellation_policy_disclosure", _cancellation_policy_disclosure.to_s.size, MAX_LENGTH_FOR_CANCELLATION_POLICY_DISCLOSURE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_cancellation_rebuttal = @cancellation_rebuttal).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cancellation_rebuttal", _cancellation_rebuttal.to_s.size, MAX_LENGTH_FOR_CANCELLATION_REBUTTAL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_communication = @customer_communication).nil?
        invalid_properties.concat(_customer_communication.list_invalid_properties_for("customer_communication")) if _customer_communication.is_a?(OpenApi::Validatable)
      end
      unless (_customer_email_address = @customer_email_address).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_email_address", _customer_email_address.to_s.size, MAX_LENGTH_FOR_CUSTOMER_EMAIL_ADDRESS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_name = @customer_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_name", _customer_name.to_s.size, MAX_LENGTH_FOR_CUSTOMER_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_purchase_ip = @customer_purchase_ip).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_purchase_ip", _customer_purchase_ip.to_s.size, MAX_LENGTH_FOR_CUSTOMER_PURCHASE_IP)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_customer_signature = @customer_signature).nil?
        invalid_properties.concat(_customer_signature.list_invalid_properties_for("customer_signature")) if _customer_signature.is_a?(OpenApi::Validatable)
      end
      unless (_duplicate_charge_documentation = @duplicate_charge_documentation).nil?
        invalid_properties.concat(_duplicate_charge_documentation.list_invalid_properties_for("duplicate_charge_documentation")) if _duplicate_charge_documentation.is_a?(OpenApi::Validatable)
      end
      unless (_duplicate_charge_explanation = @duplicate_charge_explanation).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("duplicate_charge_explanation", _duplicate_charge_explanation.to_s.size, MAX_LENGTH_FOR_DUPLICATE_CHARGE_EXPLANATION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_duplicate_charge_id = @duplicate_charge_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("duplicate_charge_id", _duplicate_charge_id.to_s.size, MAX_LENGTH_FOR_DUPLICATE_CHARGE_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_product_description = @product_description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("product_description", _product_description.to_s.size, MAX_LENGTH_FOR_PRODUCT_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_receipt = @receipt).nil?
        invalid_properties.concat(_receipt.list_invalid_properties_for("receipt")) if _receipt.is_a?(OpenApi::Validatable)
      end
      unless (_refund_policy = @refund_policy).nil?
        invalid_properties.concat(_refund_policy.list_invalid_properties_for("refund_policy")) if _refund_policy.is_a?(OpenApi::Validatable)
      end
      unless (_refund_policy_disclosure = @refund_policy_disclosure).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("refund_policy_disclosure", _refund_policy_disclosure.to_s.size, MAX_LENGTH_FOR_REFUND_POLICY_DISCLOSURE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_refund_refusal_explanation = @refund_refusal_explanation).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("refund_refusal_explanation", _refund_refusal_explanation.to_s.size, MAX_LENGTH_FOR_REFUND_REFUSAL_EXPLANATION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_service_date = @service_date).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("service_date", _service_date.to_s.size, MAX_LENGTH_FOR_SERVICE_DATE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_service_documentation = @service_documentation).nil?
        invalid_properties.concat(_service_documentation.list_invalid_properties_for("service_documentation")) if _service_documentation.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_address = @shipping_address).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("shipping_address", _shipping_address.to_s.size, MAX_LENGTH_FOR_SHIPPING_ADDRESS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_shipping_carrier = @shipping_carrier).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("shipping_carrier", _shipping_carrier.to_s.size, MAX_LENGTH_FOR_SHIPPING_CARRIER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_shipping_date = @shipping_date).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("shipping_date", _shipping_date.to_s.size, MAX_LENGTH_FOR_SHIPPING_DATE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_shipping_documentation = @shipping_documentation).nil?
        invalid_properties.concat(_shipping_documentation.list_invalid_properties_for("shipping_documentation")) if _shipping_documentation.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_tracking_number = @shipping_tracking_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("shipping_tracking_number", _shipping_tracking_number.to_s.size, MAX_LENGTH_FOR_SHIPPING_TRACKING_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_uncategorized_file = @uncategorized_file).nil?
        invalid_properties.concat(_uncategorized_file.list_invalid_properties_for("uncategorized_file")) if _uncategorized_file.is_a?(OpenApi::Validatable)
      end
      unless (_uncategorized_text = @uncategorized_text).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("uncategorized_text", _uncategorized_text.to_s.size, MAX_LENGTH_FOR_UNCATEGORIZED_TEXT)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_access_activity_log = @access_activity_log).nil?
        return false if _access_activity_log.to_s.size > MAX_LENGTH_FOR_ACCESS_ACTIVITY_LOG
      end

      unless (_billing_address = @billing_address).nil?
        return false if _billing_address.to_s.size > MAX_LENGTH_FOR_BILLING_ADDRESS
      end

      unless (_cancellation_policy = @cancellation_policy).nil?
        return false if _cancellation_policy.is_a?(OpenApi::Validatable) && !_cancellation_policy.valid?
      end

      unless (_cancellation_policy_disclosure = @cancellation_policy_disclosure).nil?
        return false if _cancellation_policy_disclosure.to_s.size > MAX_LENGTH_FOR_CANCELLATION_POLICY_DISCLOSURE
      end

      unless (_cancellation_rebuttal = @cancellation_rebuttal).nil?
        return false if _cancellation_rebuttal.to_s.size > MAX_LENGTH_FOR_CANCELLATION_REBUTTAL
      end

      unless (_customer_communication = @customer_communication).nil?
        return false if _customer_communication.is_a?(OpenApi::Validatable) && !_customer_communication.valid?
      end

      unless (_customer_email_address = @customer_email_address).nil?
        return false if _customer_email_address.to_s.size > MAX_LENGTH_FOR_CUSTOMER_EMAIL_ADDRESS
      end

      unless (_customer_name = @customer_name).nil?
        return false if _customer_name.to_s.size > MAX_LENGTH_FOR_CUSTOMER_NAME
      end

      unless (_customer_purchase_ip = @customer_purchase_ip).nil?
        return false if _customer_purchase_ip.to_s.size > MAX_LENGTH_FOR_CUSTOMER_PURCHASE_IP
      end

      unless (_customer_signature = @customer_signature).nil?
        return false if _customer_signature.is_a?(OpenApi::Validatable) && !_customer_signature.valid?
      end

      unless (_duplicate_charge_documentation = @duplicate_charge_documentation).nil?
        return false if _duplicate_charge_documentation.is_a?(OpenApi::Validatable) && !_duplicate_charge_documentation.valid?
      end

      unless (_duplicate_charge_explanation = @duplicate_charge_explanation).nil?
        return false if _duplicate_charge_explanation.to_s.size > MAX_LENGTH_FOR_DUPLICATE_CHARGE_EXPLANATION
      end

      unless (_duplicate_charge_id = @duplicate_charge_id).nil?
        return false if _duplicate_charge_id.to_s.size > MAX_LENGTH_FOR_DUPLICATE_CHARGE_ID
      end

      unless (_product_description = @product_description).nil?
        return false if _product_description.to_s.size > MAX_LENGTH_FOR_PRODUCT_DESCRIPTION
      end

      unless (_receipt = @receipt).nil?
        return false if _receipt.is_a?(OpenApi::Validatable) && !_receipt.valid?
      end

      unless (_refund_policy = @refund_policy).nil?
        return false if _refund_policy.is_a?(OpenApi::Validatable) && !_refund_policy.valid?
      end

      unless (_refund_policy_disclosure = @refund_policy_disclosure).nil?
        return false if _refund_policy_disclosure.to_s.size > MAX_LENGTH_FOR_REFUND_POLICY_DISCLOSURE
      end

      unless (_refund_refusal_explanation = @refund_refusal_explanation).nil?
        return false if _refund_refusal_explanation.to_s.size > MAX_LENGTH_FOR_REFUND_REFUSAL_EXPLANATION
      end

      unless (_service_date = @service_date).nil?
        return false if _service_date.to_s.size > MAX_LENGTH_FOR_SERVICE_DATE
      end

      unless (_service_documentation = @service_documentation).nil?
        return false if _service_documentation.is_a?(OpenApi::Validatable) && !_service_documentation.valid?
      end

      unless (_shipping_address = @shipping_address).nil?
        return false if _shipping_address.to_s.size > MAX_LENGTH_FOR_SHIPPING_ADDRESS
      end

      unless (_shipping_carrier = @shipping_carrier).nil?
        return false if _shipping_carrier.to_s.size > MAX_LENGTH_FOR_SHIPPING_CARRIER
      end

      unless (_shipping_date = @shipping_date).nil?
        return false if _shipping_date.to_s.size > MAX_LENGTH_FOR_SHIPPING_DATE
      end

      unless (_shipping_documentation = @shipping_documentation).nil?
        return false if _shipping_documentation.is_a?(OpenApi::Validatable) && !_shipping_documentation.valid?
      end

      unless (_shipping_tracking_number = @shipping_tracking_number).nil?
        return false if _shipping_tracking_number.to_s.size > MAX_LENGTH_FOR_SHIPPING_TRACKING_NUMBER
      end

      unless (_uncategorized_file = @uncategorized_file).nil?
        return false if _uncategorized_file.is_a?(OpenApi::Validatable) && !_uncategorized_file.valid?
      end

      unless (_uncategorized_text = @uncategorized_text).nil?
        return false if _uncategorized_text.to_s.size > MAX_LENGTH_FOR_UNCATEGORIZED_TEXT
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_activity_log Object to be assigned
    def access_activity_log=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("access_activity_log", new_value.to_s.size, MAX_LENGTH_FOR_ACCESS_ACTIVITY_LOG)
      end

      @access_activity_log = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address Object to be assigned
    def billing_address=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("billing_address", new_value.to_s.size, MAX_LENGTH_FOR_BILLING_ADDRESS)
      end

      @billing_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_policy Object to be assigned
    def cancellation_policy=(new_value : Stripe::DisputeEvidenceCancellationPolicy?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cancellation_policy = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_policy_disclosure Object to be assigned
    def cancellation_policy_disclosure=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cancellation_policy_disclosure", new_value.to_s.size, MAX_LENGTH_FOR_CANCELLATION_POLICY_DISCLOSURE)
      end

      @cancellation_policy_disclosure = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_rebuttal Object to be assigned
    def cancellation_rebuttal=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cancellation_rebuttal", new_value.to_s.size, MAX_LENGTH_FOR_CANCELLATION_REBUTTAL)
      end

      @cancellation_rebuttal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_communication Object to be assigned
    def customer_communication=(new_value : Stripe::DisputeEvidenceCustomerCommunication?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_communication = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_email_address Object to be assigned
    def customer_email_address=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer_email_address", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER_EMAIL_ADDRESS)
      end

      @customer_email_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_name Object to be assigned
    def customer_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer_name", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER_NAME)
      end

      @customer_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_purchase_ip Object to be assigned
    def customer_purchase_ip=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer_purchase_ip", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER_PURCHASE_IP)
      end

      @customer_purchase_ip = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_signature Object to be assigned
    def customer_signature=(new_value : Stripe::DisputeEvidenceCustomerSignature?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_signature = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duplicate_charge_documentation Object to be assigned
    def duplicate_charge_documentation=(new_value : Stripe::DisputeEvidenceDuplicateChargeDocumentation?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @duplicate_charge_documentation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duplicate_charge_explanation Object to be assigned
    def duplicate_charge_explanation=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("duplicate_charge_explanation", new_value.to_s.size, MAX_LENGTH_FOR_DUPLICATE_CHARGE_EXPLANATION)
      end

      @duplicate_charge_explanation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duplicate_charge_id Object to be assigned
    def duplicate_charge_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("duplicate_charge_id", new_value.to_s.size, MAX_LENGTH_FOR_DUPLICATE_CHARGE_ID)
      end

      @duplicate_charge_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_description Object to be assigned
    def product_description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("product_description", new_value.to_s.size, MAX_LENGTH_FOR_PRODUCT_DESCRIPTION)
      end

      @product_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt Object to be assigned
    def receipt=(new_value : Stripe::DisputeEvidenceReceipt?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @receipt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_policy Object to be assigned
    def refund_policy=(new_value : Stripe::DisputeEvidenceRefundPolicy?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @refund_policy = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_policy_disclosure Object to be assigned
    def refund_policy_disclosure=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("refund_policy_disclosure", new_value.to_s.size, MAX_LENGTH_FOR_REFUND_POLICY_DISCLOSURE)
      end

      @refund_policy_disclosure = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_refusal_explanation Object to be assigned
    def refund_refusal_explanation=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("refund_refusal_explanation", new_value.to_s.size, MAX_LENGTH_FOR_REFUND_REFUSAL_EXPLANATION)
      end

      @refund_refusal_explanation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_date Object to be assigned
    def service_date=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("service_date", new_value.to_s.size, MAX_LENGTH_FOR_SERVICE_DATE)
      end

      @service_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_documentation Object to be assigned
    def service_documentation=(new_value : Stripe::DisputeEvidenceServiceDocumentation?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @service_documentation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_address Object to be assigned
    def shipping_address=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("shipping_address", new_value.to_s.size, MAX_LENGTH_FOR_SHIPPING_ADDRESS)
      end

      @shipping_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_carrier Object to be assigned
    def shipping_carrier=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("shipping_carrier", new_value.to_s.size, MAX_LENGTH_FOR_SHIPPING_CARRIER)
      end

      @shipping_carrier = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_date Object to be assigned
    def shipping_date=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("shipping_date", new_value.to_s.size, MAX_LENGTH_FOR_SHIPPING_DATE)
      end

      @shipping_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_documentation Object to be assigned
    def shipping_documentation=(new_value : Stripe::DisputeEvidenceShippingDocumentation?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_documentation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_tracking_number Object to be assigned
    def shipping_tracking_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("shipping_tracking_number", new_value.to_s.size, MAX_LENGTH_FOR_SHIPPING_TRACKING_NUMBER)
      end

      @shipping_tracking_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uncategorized_file Object to be assigned
    def uncategorized_file=(new_value : Stripe::DisputeEvidenceUncategorizedFile?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @uncategorized_file = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uncategorized_text Object to be assigned
    def uncategorized_text=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("uncategorized_text", new_value.to_s.size, MAX_LENGTH_FOR_UNCATEGORIZED_TEXT)
      end

      @uncategorized_text = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@access_activity_log, @billing_address, @cancellation_policy, @cancellation_policy_disclosure, @cancellation_rebuttal, @customer_communication, @customer_email_address, @customer_name, @customer_purchase_ip, @customer_signature, @duplicate_charge_documentation, @duplicate_charge_explanation, @duplicate_charge_id, @product_description, @receipt, @refund_policy, @refund_policy_disclosure, @refund_refusal_explanation, @service_date, @service_documentation, @shipping_address, @shipping_carrier, @shipping_date, @shipping_documentation, @shipping_tracking_number, @uncategorized_file, @uncategorized_text)
  end
end
