#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PersonRelationship
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
    @[JSON::Field(key: "director", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: director.nil? && !director_present?)]
    getter director : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? director_present : Bool = false

    # Whether the person has significant responsibility to control, manage, or direct the organization.
    @[JSON::Field(key: "executive", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: executive.nil? && !executive_present?)]
    getter executive : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? executive_present : Bool = false

    # Whether the person is an owner of the accountâ€™s legal entity.
    @[JSON::Field(key: "owner", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: owner.nil? && !owner_present?)]
    getter owner : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? owner_present : Bool = false

    # The percent owned by the person of the account's legal entity.
    @[JSON::Field(key: "percent_ownership", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: percent_ownership.nil? && !percent_ownership_present?)]
    getter percent_ownership : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? percent_ownership_present : Bool = false

    # Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
    @[JSON::Field(key: "representative", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: representative.nil? && !representative_present?)]
    getter representative : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? representative_present : Bool = false

    # The person's title (e.g., CEO, Support Engineer).
    @[JSON::Field(key: "title", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: title.nil? && !title_present?)]
    getter title : String? = nil

    @[JSON::Field(ignore: true)]
    property? title_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @director : Bool? = nil,
      @executive : Bool? = nil,
      @owner : Bool? = nil,
      @percent_ownership : Float64? = nil,
      @representative : Bool? = nil,
      @title : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _title = @title
        if _title.to_s.size > 5000
          invalid_properties.push("invalid value for \"title\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _title = @title
        return false if _title.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] director Object to be assigned
    def director=(director : Bool?)
      if director.nil?
        return @director = nil
      end
      _director = director.not_nil!
      @director = _director
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] executive Object to be assigned
    def executive=(executive : Bool?)
      if executive.nil?
        return @executive = nil
      end
      _executive = executive.not_nil!
      @executive = _executive
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(owner : Bool?)
      if owner.nil?
        return @owner = nil
      end
      _owner = owner.not_nil!
      @owner = _owner
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] percent_ownership Object to be assigned
    def percent_ownership=(percent_ownership : Float64?)
      if percent_ownership.nil?
        return @percent_ownership = nil
      end
      _percent_ownership = percent_ownership.not_nil!
      @percent_ownership = _percent_ownership
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] representative Object to be assigned
    def representative=(representative : Bool?)
      if representative.nil?
        return @representative = nil
      end
      _representative = representative.not_nil!
      @representative = _representative
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] title Object to be assigned
    def title=(title : String?)
      if title.nil?
        return @title = nil
      end
      _title = title.not_nil!
      if _title.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"title\", the character length must be smaller than or equal to 5000.")
      end

      @title = _title
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@director, @director_present, @executive, @executive_present, @owner, @owner_present, @percent_ownership, @percent_ownership_present, @representative, @representative_present, @title, @title_present)
  end
end
