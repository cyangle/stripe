#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PersonRelationship
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
    @[JSON::Field(key: "director", type: Bool?, presence: true, ignore_serialize: director.nil? && !director_present?)]
    property director : Bool?

    @[JSON::Field(ignore: true)]
    property? director_present : Bool = false

    # Whether the person has significant responsibility to control, manage, or direct the organization.
    @[JSON::Field(key: "executive", type: Bool?, presence: true, ignore_serialize: executive.nil? && !executive_present?)]
    property executive : Bool?

    @[JSON::Field(ignore: true)]
    property? executive_present : Bool = false

    # Whether the person is an owner of the accountâ€™s legal entity.
    @[JSON::Field(key: "owner", type: Bool?, presence: true, ignore_serialize: owner.nil? && !owner_present?)]
    property owner : Bool?

    @[JSON::Field(ignore: true)]
    property? owner_present : Bool = false

    # The percent owned by the person of the account's legal entity.
    @[JSON::Field(key: "percent_ownership", type: Float64?, presence: true, ignore_serialize: percent_ownership.nil? && !percent_ownership_present?)]
    property percent_ownership : Float64?

    @[JSON::Field(ignore: true)]
    property? percent_ownership_present : Bool = false

    # Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
    @[JSON::Field(key: "representative", type: Bool?, presence: true, ignore_serialize: representative.nil? && !representative_present?)]
    property representative : Bool?

    @[JSON::Field(ignore: true)]
    property? representative_present : Bool = false

    # The person's title (e.g., CEO, Support Engineer).
    @[JSON::Field(key: "title", type: String?, presence: true, ignore_serialize: title.nil? && !title_present?)]
    getter title : String?

    @[JSON::Field(ignore: true)]
    property? title_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @director : Bool?, @executive : Bool?, @owner : Bool?, @percent_ownership : Float64?, @representative : Bool?, @title : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @title.to_s.size > 5000
        invalid_properties.push("invalid value for \"title\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @title.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if title.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"title\", the character length must be smaller than or equal to 5000.")
      end

      @title = title
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        director == o.director &&
        executive == o.executive &&
        owner == o.owner &&
        percent_ownership == o.percent_ownership &&
        representative == o.representative &&
        title == o.title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@director, @executive, @owner, @percent_ownership, @representative, @title)
  end
end
