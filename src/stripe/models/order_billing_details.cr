#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Customer billing details associated with the order.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class OrderBillingDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "address", type: OrdersV2ResourceBillingDetailsAddress, presence: true, ignore_serialize: address.nil? && !address_present?)]
    property address : OrdersV2ResourceBillingDetailsAddress

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    # Email address for the order.
    @[JSON::Field(key: "email", type: String, presence: true, ignore_serialize: email.nil? && !email_present?)]
    getter email : String

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    # Full name for the order.
    @[JSON::Field(key: "name", type: String, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # Billing phone number for the order (including extension).
    @[JSON::Field(key: "phone", type: String, presence: true, ignore_serialize: phone.nil? && !phone_present?)]
    getter phone : String

    @[JSON::Field(ignore: true)]
    property? phone_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::OrdersV2ResourceBillingDetails,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @address : OrdersV2ResourceBillingDetailsAddress?, @email : String?, @name : String?, @phone : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @email.to_s.size > 5000
        invalid_properties.push("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      if @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      if @phone.to_s.size > 5000
        invalid_properties.push("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @email.to_s.size > 5000
      return false if @name.to_s.size > 5000
      return false if @phone.to_s.size > 5000
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if phone.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      @phone = phone
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        address == o.address &&
        email == o.email &&
        name == o.name &&
        phone == o.phone
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@address, @email, @name, @phone)
  end
end
