#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostRadarValueListItemsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # The value of the item (whose type must match the type of the parent value list).
    @[JSON::Field(key: "value", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter value : String? = nil
    MAX_LENGTH_FOR_VALUE = 800

    # The identifier of the value list which the created item will be added to.
    @[JSON::Field(key: "value_list", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter value_list : String? = nil
    MAX_LENGTH_FOR_VALUE_LIST = 5000

    # Optional properties

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @value : String? = nil,
      @value_list : String? = nil,
      # Optional properties
      @expand : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"value\" is required and cannot be null") if @value.nil?

      if _value = @value
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("value", _value.to_s.size, MAX_LENGTH_FOR_VALUE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"value_list\" is required and cannot be null") if @value_list.nil?

      if _value_list = @value_list
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("value_list", _value_list.to_s.size, MAX_LENGTH_FOR_VALUE_LIST)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @value.nil?
      if _value = @value
        return false if _value.to_s.size > MAX_LENGTH_FOR_VALUE
      end

      return false if @value_list.nil?
      if _value_list = @value_list
        return false if _value_list.to_s.size > MAX_LENGTH_FOR_VALUE_LIST
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value Object to be assigned
    def value=(value : String?)
      if value.nil?
        raise ArgumentError.new("\"value\" is required and cannot be null")
      end
      _value = value.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("value", _value.to_s.size, MAX_LENGTH_FOR_VALUE)
      @value = _value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value_list Object to be assigned
    def value_list=(value_list : String?)
      if value_list.nil?
        raise ArgumentError.new("\"value_list\" is required and cannot be null")
      end
      _value_list = value_list.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("value_list", _value_list.to_s.size, MAX_LENGTH_FOR_VALUE_LIST)
      @value_list = _value_list
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      _expand = expand.not_nil!
      @expand = _expand
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@value, @value_list, @expand)
  end
end
