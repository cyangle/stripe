#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostRadarValueListItemsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The value of the item (whose type must match the type of the parent value list).
    @[JSON::Field(key: "value", type: String)]
    getter value : String

    # The identifier of the value list which the created item will be added to.
    @[JSON::Field(key: "value_list", type: String)]
    getter value_list : String

    # Optional properties
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @value : String, @value_list : String, @expand : Array(String)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @value.to_s.size > 800
        invalid_properties.push("invalid value for \"value\", the character length must be smaller than or equal to 800.")
      end

      if @value_list.to_s.size > 5000
        invalid_properties.push("invalid value for \"value_list\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @value.to_s.size > 800
      return false if @value_list.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] value Value to be assigned
    def value=(value)
      if value.to_s.size > 800
        raise ArgumentError.new("invalid value for \"value\", the character length must be smaller than or equal to 800.")
      end

      @value = value
    end

    # Custom attribute writer method with validation
    # @param [Object] value_list Value to be assigned
    def value_list=(value_list)
      if value_list.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"value_list\", the character length must be smaller than or equal to 5000.")
      end

      @value_list = value_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        expand == o.expand &&
        value == o.value &&
        value_list == o.value_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@expand, @value, @value_list)
  end
end
