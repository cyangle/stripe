#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class IssuingCardholderIndividual
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The first name of this cardholder.
    @[JSON::Field(key: "first_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter first_name : String? = nil
    MAX_LENGTH_FOR_FIRST_NAME = 5000

    # The last name of this cardholder.
    @[JSON::Field(key: "last_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter last_name : String? = nil
    MAX_LENGTH_FOR_LAST_NAME = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "dob", type: Stripe::IssuingCardholderIndividualDob1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: dob.nil? && !dob_present?)]
    getter dob : Stripe::IssuingCardholderIndividualDob1? = nil

    @[JSON::Field(ignore: true)]
    property? dob_present : Bool = false

    @[JSON::Field(key: "verification", type: Stripe::IssuingCardholderIndividualVerification?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: verification.nil? && !verification_present?)]
    getter verification : Stripe::IssuingCardholderIndividualVerification? = nil

    @[JSON::Field(ignore: true)]
    property? verification_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @first_name : String? = nil,
      @last_name : String? = nil,
      # Optional properties
      @dob : Stripe::IssuingCardholderIndividualDob1? = nil,
      @verification : Stripe::IssuingCardholderIndividualVerification? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"first_name\" is required and cannot be null") if @first_name.nil?

      unless (_first_name = @first_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("first_name", _first_name.to_s.size, MAX_LENGTH_FOR_FIRST_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"last_name\" is required and cannot be null") if @last_name.nil?

      unless (_last_name = @last_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("last_name", _last_name.to_s.size, MAX_LENGTH_FOR_LAST_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_dob = @dob).nil?
        invalid_properties.concat(_dob.list_invalid_properties_for("dob")) if _dob.is_a?(OpenApi::Validatable)
      end
      unless (_verification = @verification).nil?
        invalid_properties.concat(_verification.list_invalid_properties_for("verification")) if _verification.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @first_name.nil?
      unless (_first_name = @first_name).nil?
        return false if _first_name.to_s.size > MAX_LENGTH_FOR_FIRST_NAME
      end

      return false if @last_name.nil?
      unless (_last_name = @last_name).nil?
        return false if _last_name.to_s.size > MAX_LENGTH_FOR_LAST_NAME
      end

      unless (_dob = @dob).nil?
        return false if _dob.is_a?(OpenApi::Validatable) && !_dob.valid?
      end

      unless (_verification = @verification).nil?
        return false if _verification.is_a?(OpenApi::Validatable) && !_verification.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(first_name : String?)
      if first_name.nil?
        raise ArgumentError.new("\"first_name\" is required and cannot be null")
      end
      _first_name = first_name.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("first_name", _first_name.to_s.size, MAX_LENGTH_FOR_FIRST_NAME)
      @first_name = _first_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(last_name : String?)
      if last_name.nil?
        raise ArgumentError.new("\"last_name\" is required and cannot be null")
      end
      _last_name = last_name.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("last_name", _last_name.to_s.size, MAX_LENGTH_FOR_LAST_NAME)
      @last_name = _last_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dob Object to be assigned
    def dob=(dob : Stripe::IssuingCardholderIndividualDob1?)
      if dob.nil?
        return @dob = nil
      end
      _dob = dob.not_nil!
      _dob.validate if _dob.is_a?(OpenApi::Validatable)
      @dob = _dob
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification Object to be assigned
    def verification=(verification : Stripe::IssuingCardholderIndividualVerification?)
      if verification.nil?
        return @verification = nil
      end
      _verification = verification.not_nil!
      _verification.validate if _verification.is_a?(OpenApi::Validatable)
      @verification = _verification
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@first_name, @last_name, @dob, @dob_present, @verification, @verification_present)
  end
end
