#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products. [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.  For example, you might have a single \"gold\" product that has prices for $10/month, $100/year, and â‚¬9 once.  Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
  class Price
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Whether the price can be used for new purchases.
    @[JSON::Field(key: "active", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter active : Bool? = nil

    # Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    @[JSON::Field(key: "billing_scheme", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter billing_scheme : String? = nil

    ENUM_VALIDATOR_FOR_BILLING_SCHEME = EnumValidator.new("billing_scheme", "String", ["per_unit", "tiered"])

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["price"])

    @[JSON::Field(key: "product", type: Stripe::PriceProduct?, default: nil, required: true, nullable: false, emit_null: false)]
    getter product : Stripe::PriceProduct? = nil

    # One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["one_time", "recurring"])

    # Optional properties

    # Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency_options", type: Hash(String, Stripe::CurrencyOption)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency_options : Hash(String, Stripe::CurrencyOption)? = nil

    @[JSON::Field(key: "custom_unit_amount", type: Stripe::CurrencyOptionCustomUnitAmount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: custom_unit_amount.nil? && !custom_unit_amount_present?)]
    getter custom_unit_amount : Stripe::CurrencyOptionCustomUnitAmount? = nil

    @[JSON::Field(ignore: true)]
    property? custom_unit_amount_present : Bool = false

    # A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
    @[JSON::Field(key: "lookup_key", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: lookup_key.nil? && !lookup_key_present?)]
    getter lookup_key : String? = nil

    @[JSON::Field(ignore: true)]
    property? lookup_key_present : Bool = false

    # A brief description of the price, hidden from customers.
    @[JSON::Field(key: "nickname", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: nickname.nil? && !nickname_present?)]
    getter nickname : String? = nil

    @[JSON::Field(ignore: true)]
    property? nickname_present : Bool = false

    @[JSON::Field(key: "recurring", type: Stripe::PriceRecurring?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: recurring.nil? && !recurring_present?)]
    getter recurring : Stripe::PriceRecurring? = nil

    @[JSON::Field(ignore: true)]
    property? recurring_present : Bool = false

    # Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    @[JSON::Field(key: "tax_behavior", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tax_behavior.nil? && !tax_behavior_present?)]
    getter tax_behavior : String? = nil

    @[JSON::Field(ignore: true)]
    property? tax_behavior_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_BEHAVIOR = EnumValidator.new("tax_behavior", "String", ["exclusive", "inclusive", "unspecified"])

    # Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    @[JSON::Field(key: "tiers", type: Array(Stripe::PriceTier)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tiers : Array(Stripe::PriceTier)? = nil

    # Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    @[JSON::Field(key: "tiers_mode", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tiers_mode.nil? && !tiers_mode_present?)]
    getter tiers_mode : String? = nil

    @[JSON::Field(ignore: true)]
    property? tiers_mode_present : Bool = false

    ENUM_VALIDATOR_FOR_TIERS_MODE = EnumValidator.new("tiers_mode", "String", ["graduated", "volume"])

    @[JSON::Field(key: "transform_quantity", type: Stripe::PriceTransformQuantity?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transform_quantity.nil? && !transform_quantity_present?)]
    getter transform_quantity : Stripe::PriceTransformQuantity? = nil

    @[JSON::Field(ignore: true)]
    property? transform_quantity_present : Bool = false

    # The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    @[JSON::Field(key: "unit_amount", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unit_amount.nil? && !unit_amount_present?)]
    getter unit_amount : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? unit_amount_present : Bool = false

    # The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    @[JSON::Field(key: "unit_amount_decimal", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unit_amount_decimal.nil? && !unit_amount_decimal_present?)]
    getter unit_amount_decimal : String? = nil

    @[JSON::Field(ignore: true)]
    property? unit_amount_decimal_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @active : Bool? = nil,
      @billing_scheme : String? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @product : Stripe::PriceProduct? = nil,
      @_type : String? = nil,
      # Optional properties
      @currency_options : Hash(String, Stripe::CurrencyOption)? = nil,
      @custom_unit_amount : Stripe::CurrencyOptionCustomUnitAmount? = nil,
      @lookup_key : String? = nil,
      @nickname : String? = nil,
      @recurring : Stripe::PriceRecurring? = nil,
      @tax_behavior : String? = nil,
      @tiers : Array(Stripe::PriceTier)? = nil,
      @tiers_mode : String? = nil,
      @transform_quantity : Stripe::PriceTransformQuantity? = nil,
      @unit_amount : Int64? = nil,
      @unit_amount_decimal : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"active\" is required and cannot be null") if @active.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_SCHEME.error_message) unless ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid?(@billing_scheme, false)
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"product\" is required and cannot be null") if @product.nil?
      if _product = @product
        if _product.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_product.list_invalid_properties_for("product"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _currency_options = @currency_options
        if _currency_options.is_a?(Hash)
          _currency_options.each do |_key, value|
            if value.is_a?(OpenApi::Validatable)
              invalid_properties.concat(value.list_invalid_properties_for("currency_options"))
            end
          end
        end
      end
      if _custom_unit_amount = @custom_unit_amount
        if _custom_unit_amount.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_custom_unit_amount.list_invalid_properties_for("custom_unit_amount"))
        end
      end
      if _lookup_key = @lookup_key
        if _lookup_key.to_s.size > 5000
          invalid_properties.push("invalid value for \"lookup_key\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _nickname = @nickname
        if _nickname.to_s.size > 5000
          invalid_properties.push("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _recurring = @recurring
        if _recurring.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_recurring.list_invalid_properties_for("recurring"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)
      if _tiers = @tiers
        if _tiers.is_a?(Array)
          _tiers.each do |item|
            if item.is_a?(OpenApi::Validatable)
              invalid_properties.concat(item.list_invalid_properties_for("tiers"))
            end
          end
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TIERS_MODE.error_message) unless ENUM_VALIDATOR_FOR_TIERS_MODE.valid?(@tiers_mode)
      if _transform_quantity = @transform_quantity
        if _transform_quantity.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_transform_quantity.list_invalid_properties_for("transform_quantity"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @active.nil?

      return false unless ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid?(@billing_scheme, false)
      return false if @created.nil?

      return false if @currency.nil?

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?

      return false if @metadata.nil?

      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @product.nil?
      if _product = @product
        if _product.is_a?(OpenApi::Validatable)
          return false unless _product.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _currency_options = @currency_options
        if _currency_options.is_a?(Hash)
          _currency_options.each do |_key, value|
            if value.is_a?(OpenApi::Validatable)
              return false unless value.valid?
            end
          end
        end
      end
      if _custom_unit_amount = @custom_unit_amount
        if _custom_unit_amount.is_a?(OpenApi::Validatable)
          return false unless _custom_unit_amount.valid?
        end
      end
      if _lookup_key = @lookup_key
        return false if _lookup_key.to_s.size > 5000
      end
      if _nickname = @nickname
        return false if _nickname.to_s.size > 5000
      end
      if _recurring = @recurring
        if _recurring.is_a?(OpenApi::Validatable)
          return false unless _recurring.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)
      if _tiers = @tiers
        if _tiers.is_a?(Array)
          _tiers.each do |item|
            if item.is_a?(OpenApi::Validatable)
              return false unless item.valid?
            end
          end
        end
      end
      return false unless ENUM_VALIDATOR_FOR_TIERS_MODE.valid?(@tiers_mode)
      if _transform_quantity = @transform_quantity
        if _transform_quantity.is_a?(OpenApi::Validatable)
          return false unless _transform_quantity.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] active Object to be assigned
    def active=(active : Bool?)
      if active.nil?
        raise ArgumentError.new("\"active\" is required and cannot be null")
      end
      _active = active.not_nil!
      @active = _active
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_scheme Object to be assigned
    def billing_scheme=(billing_scheme : String?)
      if billing_scheme.nil?
        raise ArgumentError.new("\"billing_scheme\" is required and cannot be null")
      end
      _billing_scheme = billing_scheme.not_nil!
      ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid!(_billing_scheme)
      @billing_scheme = _billing_scheme
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product Object to be assigned
    def product=(product : Stripe::PriceProduct?)
      if product.nil?
        raise ArgumentError.new("\"product\" is required and cannot be null")
      end
      _product = product.not_nil!
      if _product.is_a?(OpenApi::Validatable)
        _product.validate
      end
      @product = _product
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency_options Object to be assigned
    def currency_options=(currency_options : Hash(String, Stripe::CurrencyOption)?)
      if currency_options.nil?
        return @currency_options = nil
      end
      _currency_options = currency_options.not_nil!
      if _currency_options.is_a?(Hash)
        _currency_options.each do |_key, value|
          if value.is_a?(OpenApi::Validatable)
            value.validate
          end
        end
      end
      @currency_options = _currency_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_unit_amount Object to be assigned
    def custom_unit_amount=(custom_unit_amount : Stripe::CurrencyOptionCustomUnitAmount?)
      if custom_unit_amount.nil?
        return @custom_unit_amount = nil
      end
      _custom_unit_amount = custom_unit_amount.not_nil!
      if _custom_unit_amount.is_a?(OpenApi::Validatable)
        _custom_unit_amount.validate
      end
      @custom_unit_amount = _custom_unit_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lookup_key Object to be assigned
    def lookup_key=(lookup_key : String?)
      if lookup_key.nil?
        return @lookup_key = nil
      end
      _lookup_key = lookup_key.not_nil!
      if _lookup_key.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"lookup_key\", the character length must be smaller than or equal to 5000.")
      end

      @lookup_key = _lookup_key
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nickname Object to be assigned
    def nickname=(nickname : String?)
      if nickname.nil?
        return @nickname = nil
      end
      _nickname = nickname.not_nil!
      if _nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      @nickname = _nickname
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recurring Object to be assigned
    def recurring=(recurring : Stripe::PriceRecurring?)
      if recurring.nil?
        return @recurring = nil
      end
      _recurring = recurring.not_nil!
      if _recurring.is_a?(OpenApi::Validatable)
        _recurring.validate
      end
      @recurring = _recurring
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_behavior Object to be assigned
    def tax_behavior=(tax_behavior : String?)
      if tax_behavior.nil?
        return @tax_behavior = nil
      end
      _tax_behavior = tax_behavior.not_nil!
      ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid!(_tax_behavior)
      @tax_behavior = _tax_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tiers Object to be assigned
    def tiers=(tiers : Array(Stripe::PriceTier)?)
      if tiers.nil?
        return @tiers = nil
      end
      _tiers = tiers.not_nil!
      if _tiers.is_a?(Array)
        _tiers.each do |item|
          if item.is_a?(OpenApi::Validatable)
            item.validate
          end
        end
      end
      @tiers = _tiers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tiers_mode Object to be assigned
    def tiers_mode=(tiers_mode : String?)
      if tiers_mode.nil?
        return @tiers_mode = nil
      end
      _tiers_mode = tiers_mode.not_nil!
      ENUM_VALIDATOR_FOR_TIERS_MODE.valid!(_tiers_mode)
      @tiers_mode = _tiers_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transform_quantity Object to be assigned
    def transform_quantity=(transform_quantity : Stripe::PriceTransformQuantity?)
      if transform_quantity.nil?
        return @transform_quantity = nil
      end
      _transform_quantity = transform_quantity.not_nil!
      if _transform_quantity.is_a?(OpenApi::Validatable)
        _transform_quantity.validate
      end
      @transform_quantity = _transform_quantity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount Object to be assigned
    def unit_amount=(unit_amount : Int64?)
      if unit_amount.nil?
        return @unit_amount = nil
      end
      _unit_amount = unit_amount.not_nil!
      @unit_amount = _unit_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount_decimal Object to be assigned
    def unit_amount_decimal=(unit_amount_decimal : String?)
      if unit_amount_decimal.nil?
        return @unit_amount_decimal = nil
      end
      _unit_amount_decimal = unit_amount_decimal.not_nil!
      @unit_amount_decimal = _unit_amount_decimal
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @billing_scheme, @created, @currency, @id, @livemode, @metadata, @object, @product, @_type, @currency_options, @custom_unit_amount, @custom_unit_amount_present, @lookup_key, @lookup_key_present, @nickname, @nickname_present, @recurring, @recurring_present, @tax_behavior, @tax_behavior_present, @tiers, @tiers_mode, @tiers_mode_present, @transform_quantity, @transform_quantity_present, @unit_amount, @unit_amount_present, @unit_amount_decimal, @unit_amount_decimal_present)
  end
end
