#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products. [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.  For example, you might have a single \"gold\" product that has prices for $10/month, $100/year, and â‚¬9 once.  Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Price
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Whether the price can be used for new purchases.
    @[JSON::Field(key: "active", type: Bool)]
    property active : Bool

    # Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    @[JSON::Field(key: "billing_scheme", type: String)]
    getter billing_scheme : String

    ENUM_VALIDATOR_FOR_BILLING_SCHEME = EnumValidator.new("billing_scheme", "String", ["per_unit", "tiered"])

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["price"])

    @[JSON::Field(key: "product", type: PriceProduct)]
    property product : PriceProduct

    # One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["one_time", "recurring"])

    # Optional properties

    # A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
    @[JSON::Field(key: "lookup_key", type: String?, presence: true, ignore_serialize: lookup_key.nil? && !lookup_key_present?)]
    getter lookup_key : String?

    @[JSON::Field(ignore: true)]
    property? lookup_key_present : Bool = false

    # A brief description of the price, hidden from customers.
    @[JSON::Field(key: "nickname", type: String?, presence: true, ignore_serialize: nickname.nil? && !nickname_present?)]
    getter nickname : String?

    @[JSON::Field(ignore: true)]
    property? nickname_present : Bool = false

    @[JSON::Field(key: "recurring", type: PriceRecurring?, presence: true, ignore_serialize: recurring.nil? && !recurring_present?)]
    property recurring : PriceRecurring?

    @[JSON::Field(ignore: true)]
    property? recurring_present : Bool = false

    # Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    @[JSON::Field(key: "tax_behavior", type: String?, presence: true, ignore_serialize: tax_behavior.nil? && !tax_behavior_present?)]
    getter tax_behavior : String?

    @[JSON::Field(ignore: true)]
    property? tax_behavior_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_BEHAVIOR = EnumValidator.new("tax_behavior", "String", ["exclusive", "inclusive", "unspecified"])

    # Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    @[JSON::Field(key: "tiers", type: Array(PriceTier)?, presence: true, ignore_serialize: tiers.nil? && !tiers_present?)]
    property tiers : Array(PriceTier)?

    @[JSON::Field(ignore: true)]
    property? tiers_present : Bool = false

    # Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    @[JSON::Field(key: "tiers_mode", type: String?, presence: true, ignore_serialize: tiers_mode.nil? && !tiers_mode_present?)]
    getter tiers_mode : String?

    @[JSON::Field(ignore: true)]
    property? tiers_mode_present : Bool = false

    ENUM_VALIDATOR_FOR_TIERS_MODE = EnumValidator.new("tiers_mode", "String", ["graduated", "volume"])

    @[JSON::Field(key: "transform_quantity", type: PriceTransformQuantity?, presence: true, ignore_serialize: transform_quantity.nil? && !transform_quantity_present?)]
    property transform_quantity : PriceTransformQuantity?

    @[JSON::Field(ignore: true)]
    property? transform_quantity_present : Bool = false

    # The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    @[JSON::Field(key: "unit_amount", type: Int64?, presence: true, ignore_serialize: unit_amount.nil? && !unit_amount_present?)]
    property unit_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? unit_amount_present : Bool = false

    # The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    @[JSON::Field(key: "unit_amount_decimal", type: String?, presence: true, ignore_serialize: unit_amount_decimal.nil? && !unit_amount_decimal_present?)]
    property unit_amount_decimal : String?

    @[JSON::Field(ignore: true)]
    property? unit_amount_decimal_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @active : Bool,
      @billing_scheme : String,
      @created : Int64,
      @currency : String,
      @id : String,
      @livemode : Bool,
      @metadata : Hash(String, String),
      @object : String,
      @product : PriceProduct,
      @_type : String,
      # Optional properties
      @lookup_key : String? = nil,
      @nickname : String? = nil,
      @recurring : PriceRecurring? = nil,
      @tax_behavior : String? = nil,
      @tiers : Array(PriceTier)? = nil,
      @tiers_mode : String? = nil,
      @transform_quantity : PriceTransformQuantity? = nil,
      @unit_amount : Int64? = nil,
      @unit_amount_decimal : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_SCHEME.error_message) unless ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid?(@billing_scheme, false)

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      if !@lookup_key.nil? && @lookup_key.to_s.size > 5000
        invalid_properties.push("invalid value for \"lookup_key\", the character length must be smaller than or equal to 5000.")
      end

      if !@nickname.nil? && @nickname.to_s.size > 5000
        invalid_properties.push("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)

      invalid_properties.push(ENUM_VALIDATOR_FOR_TIERS_MODE.error_message) unless ENUM_VALIDATOR_FOR_TIERS_MODE.valid?(@tiers_mode)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid?(@billing_scheme, false)
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      return false if !@lookup_key.nil? && @lookup_key.to_s.size > 5000
      return false if !@nickname.nil? && @nickname.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)
      return false unless ENUM_VALIDATOR_FOR_TIERS_MODE.valid?(@tiers_mode)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_scheme Object to be assigned
    def billing_scheme=(billing_scheme : String)
      ENUM_VALIDATOR_FOR_BILLING_SCHEME.valid!(billing_scheme, false)
      @billing_scheme = billing_scheme
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Custom attribute writer method with validation
    # @param [Object] lookup_key Value to be assigned
    def lookup_key=(lookup_key : String?)
      if !lookup_key.nil? && lookup_key.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"lookup_key\", the character length must be smaller than or equal to 5000.")
      end

      @lookup_key = lookup_key
    end

    # Custom attribute writer method with validation
    # @param [Object] nickname Value to be assigned
    def nickname=(nickname : String?)
      if !nickname.nil? && nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      @nickname = nickname
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_behavior Object to be assigned
    def tax_behavior=(tax_behavior : String?)
      ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid!(tax_behavior)
      @tax_behavior = tax_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tiers_mode Object to be assigned
    def tiers_mode=(tiers_mode : String?)
      ENUM_VALIDATOR_FOR_TIERS_MODE.valid!(tiers_mode)
      @tiers_mode = tiers_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @billing_scheme, @created, @currency, @id, @livemode, @metadata, @object, @product, @_type, @lookup_key, @lookup_key_present, @nickname, @nickname_present, @recurring, @recurring_present, @tax_behavior, @tax_behavior_present, @tiers, @tiers_present, @tiers_mode, @tiers_mode_present, @transform_quantity, @transform_quantity_present, @unit_amount, @unit_amount_present, @unit_amount_decimal, @unit_amount_decimal_present)
  end
end
