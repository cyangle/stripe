#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products. [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.  For example, you might have a single \"gold\" product that has prices for $10/month, $100/year, and â‚¬9 once.  Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
  class Price
    include NASON::Serializable

    # Required properties
    # Whether the price can be used for new purchases.
    @[NASON::Field(key: "active", type: Bool)]
    property active : Bool

    # Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    @[NASON::Field(key: "billing_scheme", type: String)]
    property billing_scheme : String

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # The ID of the product this price is associated with.
    @[NASON::Field(key: "product", type: String | Product | Null, nillable: false)]
    property product : String | Product | Null

    # One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    @[NASON::Field(key: "type", type: String)]
    property _type : String

    # Optional properties
    # A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
    @[NASON::Field(key: "lookup_key", type: String? | Null, nillable: true)]
    property lookup_key : String? | Null

    # A brief description of the price, hidden from customers.
    @[NASON::Field(key: "nickname", type: String? | Null, nillable: true)]
    property nickname : String? | Null

    # The recurring components of a price such as `interval` and `usage_type`.
    @[NASON::Field(key: "recurring", type: Recurring? | Null, nillable: true)]
    property recurring : Recurring? | Null

    # Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    @[NASON::Field(key: "tax_behavior", type: String? | Null, nillable: true)]
    property tax_behavior : String? | Null

    # Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    @[NASON::Field(key: "tiers", type: Array(PriceTier)?, nillable: true)]
    property tiers : Array(PriceTier)?

    # Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    @[NASON::Field(key: "tiers_mode", type: String? | Null, nillable: true)]
    property tiers_mode : String? | Null

    # Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    @[NASON::Field(key: "transform_quantity", type: TransformQuantity? | Null, nillable: true)]
    property transform_quantity : TransformQuantity? | Null

    # The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    @[NASON::Field(key: "unit_amount", type: Int64? | Null, nillable: true)]
    property unit_amount : Int64? | Null

    # The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    @[NASON::Field(key: "unit_amount_decimal", type: String? | Null, nillable: true)]
    property unit_amount_decimal : String? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @active : Bool, @billing_scheme : String, @created : Int64, @currency : String, @id : String, @livemode : Bool, @metadata : Hash(String, String), @object : String, @product : String | Product | Null, @_type : String, @lookup_key : String? | Null = nil, @nickname : String? | Null = nil, @recurring : Recurring? | Null = nil, @tax_behavior : String? | Null = nil, @tiers : Array(PriceTier)? = nil, @tiers_mode : String? | Null = nil, @transform_quantity : TransformQuantity? | Null = nil, @unit_amount : Int64? | Null = nil, @unit_amount_decimal : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@lookup_key.nil? && !@lookup_key.null? && @lookup_key.to_s.size > 5000
        invalid_properties.push("invalid value for \"lookup_key\", the character length must be smaller than or equal to 5000.")
      end

      if !@nickname.nil? && !@nickname.null? && @nickname.to_s.size > 5000
        invalid_properties.push("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      billing_scheme_validator = EnumAttributeValidator.new("String", ["per_unit", "tiered"])
      return false unless billing_scheme_validator.valid?(@billing_scheme)
      return false if @id.to_s.size > 5000
      return false if !@lookup_key.nil? && !@lookup_key.null? && @lookup_key.to_s.size > 5000
      return false if !@nickname.nil? && !@nickname.null? && @nickname.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["price"])
      return false unless object_validator.valid?(@object)
      tax_behavior_validator = EnumAttributeValidator.new("String", ["exclusive", "inclusive", "unspecified"])
      return false unless tax_behavior_validator.valid?(@tax_behavior)
      tiers_mode_validator = EnumAttributeValidator.new("String", ["graduated", "volume"])
      return false unless tiers_mode_validator.valid?(@tiers_mode)
      _type_validator = EnumAttributeValidator.new("String", ["one_time", "recurring"])
      return false unless _type_validator.valid?(@_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_scheme Object to be assigned
    def billing_scheme=(billing_scheme)
      validator = EnumAttributeValidator.new("String", ["per_unit", "tiered"])
      unless validator.valid?(billing_scheme)
        raise ArgumentError.new("invalid value for \"billing_scheme\", must be one of #{validator.allowable_values}.")
      end
      @billing_scheme = billing_scheme
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] lookup_key Value to be assigned
    def lookup_key=(lookup_key)
      if !lookup_key.nil? && !@lookup_key.null? && lookup_key.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"lookup_key\", the character length must be smaller than or equal to 5000.")
      end

      @lookup_key = lookup_key
    end

    # Custom attribute writer method with validation
    # @param [Object] nickname Value to be assigned
    def nickname=(nickname)
      if !nickname.nil? && !@nickname.null? && nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\", the character length must be smaller than or equal to 5000.")
      end

      @nickname = nickname
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["price"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_behavior Object to be assigned
    def tax_behavior=(tax_behavior)
      validator = EnumAttributeValidator.new("String", ["exclusive", "inclusive", "unspecified"])
      unless validator.valid?(tax_behavior)
        raise ArgumentError.new("invalid value for \"tax_behavior\", must be one of #{validator.allowable_values}.")
      end
      @tax_behavior = tax_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tiers_mode Object to be assigned
    def tiers_mode=(tiers_mode)
      validator = EnumAttributeValidator.new("String", ["graduated", "volume"])
      unless validator.valid?(tiers_mode)
        raise ArgumentError.new("invalid value for \"tiers_mode\", must be one of #{validator.allowable_values}.")
      end
      @tiers_mode = tiers_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      validator = EnumAttributeValidator.new("String", ["one_time", "recurring"])
      unless validator.valid?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{validator.allowable_values}.")
      end
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        active == o.active &&
        billing_scheme == o.billing_scheme &&
        created == o.created &&
        currency == o.currency &&
        id == o.id &&
        livemode == o.livemode &&
        lookup_key == o.lookup_key &&
        metadata == o.metadata &&
        nickname == o.nickname &&
        object == o.object &&
        product == o.product &&
        recurring == o.recurring &&
        tax_behavior == o.tax_behavior &&
        tiers == o.tiers &&
        tiers_mode == o.tiers_mode &&
        transform_quantity == o.transform_quantity &&
        _type == o._type &&
        unit_amount == o.unit_amount &&
        unit_amount_decimal == o.unit_amount_decimal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, billing_scheme, created, currency, id, livemode, lookup_key, metadata, nickname, object, product, recurring, tax_behavior, tiers, tiers_mode, transform_quantity, _type, unit_amount, unit_amount_decimal].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
