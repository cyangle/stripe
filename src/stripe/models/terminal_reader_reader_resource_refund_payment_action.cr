#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./terminal_reader_reader_resource_refund_payment_action_charge"
require "./terminal_reader_reader_resource_refund_payment_action_payment_intent"
require "./terminal_reader_reader_resource_refund_payment_action_refund"
require "./terminal_reader_reader_resource_refund_payment_config"

module Stripe
  # Represents a reader action to refund a payment
  class TerminalReaderReaderResourceRefundPaymentAction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The amount being refunded.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    @[JSON::Field(key: "charge", type: Stripe::TerminalReaderReaderResourceRefundPaymentActionCharge?, default: nil, required: false, nullable: false, emit_null: false)]
    getter charge : Stripe::TerminalReaderReaderResourceRefundPaymentActionCharge? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "payment_intent", type: Stripe::TerminalReaderReaderResourceRefundPaymentActionPaymentIntent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_intent : Stripe::TerminalReaderReaderResourceRefundPaymentActionPaymentIntent? = nil

    # The reason for the refund.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter reason : String? = nil
    ERROR_MESSAGE_FOR_REASON = "invalid value for \"reason\", must be one of [duplicate, fraudulent, requested_by_customer]."
    VALID_VALUES_FOR_REASON  = String.static_array("duplicate", "fraudulent", "requested_by_customer")

    @[JSON::Field(key: "refund", type: Stripe::TerminalReaderReaderResourceRefundPaymentActionRefund?, default: nil, required: false, nullable: false, emit_null: false)]
    getter refund : Stripe::TerminalReaderReaderResourceRefundPaymentActionRefund? = nil

    # Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
    @[JSON::Field(key: "refund_application_fee", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter refund_application_fee : Bool? = nil

    @[JSON::Field(key: "refund_payment_config", type: Stripe::TerminalReaderReaderResourceRefundPaymentConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter refund_payment_config : Stripe::TerminalReaderReaderResourceRefundPaymentConfig? = nil

    # Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.
    @[JSON::Field(key: "reverse_transfer", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter reverse_transfer : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount : Int64? = nil,
      @charge : Stripe::TerminalReaderReaderResourceRefundPaymentActionCharge? = nil,
      @metadata : Hash(String, String)? = nil,
      @payment_intent : Stripe::TerminalReaderReaderResourceRefundPaymentActionPaymentIntent? = nil,
      @reason : String? = nil,
      @refund : Stripe::TerminalReaderReaderResourceRefundPaymentActionRefund? = nil,
      @refund_application_fee : Bool? = nil,
      @refund_payment_config : Stripe::TerminalReaderReaderResourceRefundPaymentConfig? = nil,
      @reverse_transfer : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_charge = @charge).nil?
        invalid_properties.concat(_charge.list_invalid_properties_for("charge")) if _charge.is_a?(OpenApi::Validatable)
      end

      unless (_payment_intent = @payment_intent).nil?
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      unless (_reason = @reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REASON) unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end
      unless (_refund = @refund).nil?
        invalid_properties.concat(_refund.list_invalid_properties_for("refund")) if _refund.is_a?(OpenApi::Validatable)
      end

      unless (_refund_payment_config = @refund_payment_config).nil?
        invalid_properties.concat(_refund_payment_config.list_invalid_properties_for("refund_payment_config")) if _refund_payment_config.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_charge = @charge).nil?
        return false if _charge.is_a?(OpenApi::Validatable) && !_charge.valid?
      end

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      unless (_reason = @reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end

      unless (_refund = @refund).nil?
        return false if _refund.is_a?(OpenApi::Validatable) && !_refund.valid?
      end

      unless (_refund_payment_config = @refund_payment_config).nil?
        return false if _refund_payment_config.is_a?(OpenApi::Validatable) && !_refund_payment_config.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(new_value : Stripe::TerminalReaderReaderResourceRefundPaymentActionCharge?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @charge = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(new_value : Stripe::TerminalReaderReaderResourceRefundPaymentActionPaymentIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("reason", new_value, VALID_VALUES_FOR_REASON)
      end

      @reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund Object to be assigned
    def refund=(new_value : Stripe::TerminalReaderReaderResourceRefundPaymentActionRefund?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @refund = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_application_fee Object to be assigned
    def refund_application_fee=(new_value : Bool?)
      @refund_application_fee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_payment_config Object to be assigned
    def refund_payment_config=(new_value : Stripe::TerminalReaderReaderResourceRefundPaymentConfig?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @refund_payment_config = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reverse_transfer Object to be assigned
    def reverse_transfer=(new_value : Bool?)
      @reverse_transfer = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @charge, @metadata, @payment_intent, @reason, @refund, @refund_application_fee, @refund_payment_config, @reverse_transfer)
  end
end
