#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostPaymentMethodsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "acss_debit", type: PaymentMethodParam?, presence: true, ignore_serialize: acss_debit.nil? && !acss_debit_present?)]
    property acss_debit : PaymentMethodParam?

    @[JSON::Field(ignore: true)]
    property? acss_debit_present : Bool = false

    # If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
    @[JSON::Field(key: "affirm", type: JSON::Any, presence: true, ignore_serialize: affirm.nil? && !affirm_present?)]
    property affirm : JSON::Any

    @[JSON::Field(ignore: true)]
    property? affirm_present : Bool = false

    # If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
    @[JSON::Field(key: "afterpay_clearpay", type: JSON::Any, presence: true, ignore_serialize: afterpay_clearpay.nil? && !afterpay_clearpay_present?)]
    property afterpay_clearpay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? afterpay_clearpay_present : Bool = false

    # If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
    @[JSON::Field(key: "alipay", type: JSON::Any, presence: true, ignore_serialize: alipay.nil? && !alipay_present?)]
    property alipay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? alipay_present : Bool = false

    @[JSON::Field(key: "au_becs_debit", type: Param?, presence: true, ignore_serialize: au_becs_debit.nil? && !au_becs_debit_present?)]
    property au_becs_debit : Param?

    @[JSON::Field(ignore: true)]
    property? au_becs_debit_present : Bool = false

    @[JSON::Field(key: "bacs_debit", type: Param1?, presence: true, ignore_serialize: bacs_debit.nil? && !bacs_debit_present?)]
    property bacs_debit : Param1?

    @[JSON::Field(ignore: true)]
    property? bacs_debit_present : Bool = false

    # If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
    @[JSON::Field(key: "bancontact", type: JSON::Any, presence: true, ignore_serialize: bancontact.nil? && !bancontact_present?)]
    property bancontact : JSON::Any

    @[JSON::Field(ignore: true)]
    property? bancontact_present : Bool = false

    @[JSON::Field(key: "billing_details", type: BillingDetailsInnerParams?, presence: true, ignore_serialize: billing_details.nil? && !billing_details_present?)]
    property billing_details : BillingDetailsInnerParams?

    @[JSON::Field(ignore: true)]
    property? billing_details_present : Bool = false

    @[JSON::Field(key: "boleto", type: Param2?, presence: true, ignore_serialize: boleto.nil? && !boleto_present?)]
    property boleto : Param2?

    @[JSON::Field(ignore: true)]
    property? boleto_present : Bool = false

    @[JSON::Field(key: "card", type: PostPaymentMethodsRequestCard?, presence: true, ignore_serialize: card.nil? && !card_present?)]
    property card : PostPaymentMethodsRequestCard?

    @[JSON::Field(ignore: true)]
    property? card_present : Bool = false

    # The `Customer` to whom the original PaymentMethod is attached.
    @[JSON::Field(key: "customer", type: String?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
    @[JSON::Field(key: "customer_balance", type: JSON::Any, presence: true, ignore_serialize: customer_balance.nil? && !customer_balance_present?)]
    property customer_balance : JSON::Any

    @[JSON::Field(ignore: true)]
    property? customer_balance_present : Bool = false

    @[JSON::Field(key: "eps", type: Param3?, presence: true, ignore_serialize: eps.nil? && !eps_present?)]
    property eps : Param3?

    @[JSON::Field(ignore: true)]
    property? eps_present : Bool = false

    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    @[JSON::Field(key: "fpx", type: Param4?, presence: true, ignore_serialize: fpx.nil? && !fpx_present?)]
    property fpx : Param4?

    @[JSON::Field(ignore: true)]
    property? fpx_present : Bool = false

    # If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
    @[JSON::Field(key: "giropay", type: JSON::Any, presence: true, ignore_serialize: giropay.nil? && !giropay_present?)]
    property giropay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? giropay_present : Bool = false

    # If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
    @[JSON::Field(key: "grabpay", type: JSON::Any, presence: true, ignore_serialize: grabpay.nil? && !grabpay_present?)]
    property grabpay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? grabpay_present : Bool = false

    @[JSON::Field(key: "ideal", type: Param5?, presence: true, ignore_serialize: ideal.nil? && !ideal_present?)]
    property ideal : Param5?

    @[JSON::Field(ignore: true)]
    property? ideal_present : Bool = false

    # If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
    @[JSON::Field(key: "interac_present", type: JSON::Any, presence: true, ignore_serialize: interac_present.nil? && !interac_present_present?)]
    property interac_present : JSON::Any

    @[JSON::Field(ignore: true)]
    property? interac_present_present : Bool = false

    @[JSON::Field(key: "klarna", type: Param6?, presence: true, ignore_serialize: klarna.nil? && !klarna_present?)]
    property klarna : Param6?

    @[JSON::Field(ignore: true)]
    property? klarna_present : Bool = false

    # If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
    @[JSON::Field(key: "konbini", type: JSON::Any, presence: true, ignore_serialize: konbini.nil? && !konbini_present?)]
    property konbini : JSON::Any

    @[JSON::Field(ignore: true)]
    property? konbini_present : Bool = false

    # If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
    @[JSON::Field(key: "link", type: JSON::Any, presence: true, ignore_serialize: link.nil? && !link_present?)]
    property link : JSON::Any

    @[JSON::Field(ignore: true)]
    property? link_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
    @[JSON::Field(key: "oxxo", type: JSON::Any, presence: true, ignore_serialize: oxxo.nil? && !oxxo_present?)]
    property oxxo : JSON::Any

    @[JSON::Field(ignore: true)]
    property? oxxo_present : Bool = false

    @[JSON::Field(key: "p24", type: Param7?, presence: true, ignore_serialize: p24.nil? && !p24_present?)]
    property p24 : Param7?

    @[JSON::Field(ignore: true)]
    property? p24_present : Bool = false

    # The PaymentMethod to share.
    @[JSON::Field(key: "payment_method", type: String?, presence: true, ignore_serialize: payment_method.nil? && !payment_method_present?)]
    getter payment_method : String?

    @[JSON::Field(ignore: true)]
    property? payment_method_present : Bool = false

    # If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
    @[JSON::Field(key: "paynow", type: JSON::Any, presence: true, ignore_serialize: paynow.nil? && !paynow_present?)]
    property paynow : JSON::Any

    @[JSON::Field(ignore: true)]
    property? paynow_present : Bool = false

    @[JSON::Field(key: "radar_options", type: RadarOptions?, presence: true, ignore_serialize: radar_options.nil? && !radar_options_present?)]
    property radar_options : RadarOptions?

    @[JSON::Field(ignore: true)]
    property? radar_options_present : Bool = false

    @[JSON::Field(key: "sepa_debit", type: Param8?, presence: true, ignore_serialize: sepa_debit.nil? && !sepa_debit_present?)]
    property sepa_debit : Param8?

    @[JSON::Field(ignore: true)]
    property? sepa_debit_present : Bool = false

    @[JSON::Field(key: "sofort", type: Param9?, presence: true, ignore_serialize: sofort.nil? && !sofort_present?)]
    property sofort : Param9?

    @[JSON::Field(ignore: true)]
    property? sofort_present : Bool = false

    # The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    @[JSON::Field(key: "type", type: String?, presence: true, ignore_serialize: _type.nil? && !_type_present?)]
    getter _type : String?

    @[JSON::Field(ignore: true)]
    property? _type_present : Bool = false

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "oxxo", "p24", "paynow", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"])

    @[JSON::Field(key: "us_bank_account", type: PaymentMethodParam1?, presence: true, ignore_serialize: us_bank_account.nil? && !us_bank_account_present?)]
    property us_bank_account : PaymentMethodParam1?

    @[JSON::Field(ignore: true)]
    property? us_bank_account_present : Bool = false

    # If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
    @[JSON::Field(key: "wechat_pay", type: JSON::Any, presence: true, ignore_serialize: wechat_pay.nil? && !wechat_pay_present?)]
    property wechat_pay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? wechat_pay_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @acss_debit : PaymentMethodParam? = nil, @affirm : JSON::Any = nil, @afterpay_clearpay : JSON::Any = nil, @alipay : JSON::Any = nil, @au_becs_debit : Param? = nil, @bacs_debit : Param1? = nil, @bancontact : JSON::Any = nil, @billing_details : BillingDetailsInnerParams? = nil, @boleto : Param2? = nil, @card : PostPaymentMethodsRequestCard? = nil, @customer : String? = nil, @customer_balance : JSON::Any = nil, @eps : Param3? = nil, @expand : Array(String)? = nil, @fpx : Param4? = nil, @giropay : JSON::Any = nil, @grabpay : JSON::Any = nil, @ideal : Param5? = nil, @interac_present : JSON::Any = nil, @klarna : Param6? = nil, @konbini : JSON::Any = nil, @link : JSON::Any = nil, @metadata : Hash(String, String)? = nil, @oxxo : JSON::Any = nil, @p24 : Param7? = nil, @payment_method : String? = nil, @paynow : JSON::Any = nil, @radar_options : RadarOptions? = nil, @sepa_debit : Param8? = nil, @sofort : Param9? = nil, @_type : String? = nil, @us_bank_account : PaymentMethodParam1? = nil, @wechat_pay : JSON::Any = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@customer.nil? && @customer.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      if !@payment_method.nil? && @payment_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"payment_method\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer.nil? && @customer.to_s.size > 5000
      return false if !@payment_method.nil? && @payment_method.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer Value to be assigned
    def customer=(customer)
      if !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method Value to be assigned
    def payment_method=(payment_method)
      if !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @payment_method = payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        acss_debit == o.acss_debit &&
        affirm == o.affirm &&
        afterpay_clearpay == o.afterpay_clearpay &&
        alipay == o.alipay &&
        au_becs_debit == o.au_becs_debit &&
        bacs_debit == o.bacs_debit &&
        bancontact == o.bancontact &&
        billing_details == o.billing_details &&
        boleto == o.boleto &&
        card == o.card &&
        customer == o.customer &&
        customer_balance == o.customer_balance &&
        eps == o.eps &&
        expand == o.expand &&
        fpx == o.fpx &&
        giropay == o.giropay &&
        grabpay == o.grabpay &&
        ideal == o.ideal &&
        interac_present == o.interac_present &&
        klarna == o.klarna &&
        konbini == o.konbini &&
        link == o.link &&
        metadata == o.metadata &&
        oxxo == o.oxxo &&
        p24 == o.p24 &&
        payment_method == o.payment_method &&
        paynow == o.paynow &&
        radar_options == o.radar_options &&
        sepa_debit == o.sepa_debit &&
        sofort == o.sofort &&
        _type == o._type &&
        us_bank_account == o.us_bank_account &&
        wechat_pay == o.wechat_pay
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@acss_debit, @affirm, @afterpay_clearpay, @alipay, @au_becs_debit, @bacs_debit, @bancontact, @billing_details, @boleto, @card, @customer, @customer_balance, @eps, @expand, @fpx, @giropay, @grabpay, @ideal, @interac_present, @klarna, @konbini, @link, @metadata, @oxxo, @p24, @payment_method, @paynow, @radar_options, @sepa_debit, @sofort, @_type, @us_bank_account, @wechat_pay)
  end
end
