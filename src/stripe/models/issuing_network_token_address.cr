#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class IssuingNetworkTokenAddress
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The street address of the cardholder tokenizing the card.
    @[JSON::Field(key: "line1", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter line1 : String? = nil
    MAX_LENGTH_FOR_LINE1 = 5000

    # The postal code of the cardholder tokenizing the card.
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter postal_code : String? = nil
    MAX_LENGTH_FOR_POSTAL_CODE = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @line1 : String? = nil,
      @postal_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"line1\" is required and cannot be null") if @line1.nil?

      unless (_line1 = @line1).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("line1", _line1.to_s.size, MAX_LENGTH_FOR_LINE1)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"postal_code\" is required and cannot be null") if @postal_code.nil?

      unless (_postal_code = @postal_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("postal_code", _postal_code.to_s.size, MAX_LENGTH_FOR_POSTAL_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @line1.nil?
      unless (_line1 = @line1).nil?
        return false if _line1.to_s.size > MAX_LENGTH_FOR_LINE1
      end

      return false if @postal_code.nil?
      unless (_postal_code = @postal_code).nil?
        return false if _postal_code.to_s.size > MAX_LENGTH_FOR_POSTAL_CODE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line1 Object to be assigned
    def line1=(new_value : String?)
      raise ArgumentError.new("\"line1\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("line1", new_value.to_s.size, MAX_LENGTH_FOR_LINE1)
      end

      @line1 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(new_value : String?)
      raise ArgumentError.new("\"postal_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("postal_code", new_value.to_s.size, MAX_LENGTH_FOR_POSTAL_CODE)
      end

      @postal_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@line1, @postal_code)
  end
end
