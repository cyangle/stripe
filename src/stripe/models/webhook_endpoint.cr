#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be notified about events that happen in your Stripe account or connected accounts.  Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.  Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class WebhookEndpoint
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.
    @[JSON::Field(key: "enabled_events", type: Array(String))]
    property enabled_events : Array(String)

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["webhook_endpoint"])

    # The status of the webhook. It can be `enabled` or `disabled`.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    # The URL of the webhook endpoint.
    @[JSON::Field(key: "url", type: String)]
    getter url : String

    # Optional properties

    # The API version events are rendered as for this webhook endpoint.
    @[JSON::Field(key: "api_version", type: String?, presence: true, ignore_serialize: api_version.nil? && !api_version_present?)]
    getter api_version : String?

    @[JSON::Field(ignore: true)]
    property? api_version_present : Bool = false

    # The ID of the associated Connect application.
    @[JSON::Field(key: "application", type: String?, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : String?

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    # An optional description of what the webhook is used for.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation.
    @[JSON::Field(key: "secret", type: String?, presence: true, ignore_serialize: secret.nil? && !secret_present?)]
    getter secret : String?

    @[JSON::Field(ignore: true)]
    property? secret_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @created : Int64, 
      @enabled_events : Array(String), 
      @id : String, 
      @livemode : Bool, 
      @metadata : Hash(String, String), 
      @object : String, 
      @status : String, 
      @url : String, 
      # Optional properties
      @api_version : String? = nil, 
      @application : String? = nil, 
      @description : String? = nil, 
      @secret : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      if @url.to_s.size > 5000
        invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      if !@api_version.nil? && @api_version.to_s.size > 5000
        invalid_properties.push("invalid value for \"api_version\", the character length must be smaller than or equal to 5000.")
      end

      if !@application.nil? && @application.to_s.size > 5000
        invalid_properties.push("invalid value for \"application\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@secret.nil? && @secret.to_s.size > 5000
        invalid_properties.push("invalid value for \"secret\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @status.to_s.size > 5000
      return false if @url.to_s.size > 5000
      return false if !@api_version.nil? && @api_version.to_s.size > 5000
      return false if !@application.nil? && @application.to_s.size > 5000
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@secret.nil? && @secret.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = url
    end

    # Custom attribute writer method with validation
    # @param [Object] api_version Value to be assigned
    def api_version=(api_version)
      if !api_version.nil? && api_version.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"api_version\", the character length must be smaller than or equal to 5000.")
      end

      @api_version = api_version
    end

    # Custom attribute writer method with validation
    # @param [Object] application Value to be assigned
    def application=(application)
      if !application.nil? && application.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"application\", the character length must be smaller than or equal to 5000.")
      end

      @application = application
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] secret Value to be assigned
    def secret=(secret)
      if !secret.nil? && secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"secret\", the character length must be smaller than or equal to 5000.")
      end

      @secret = secret
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @enabled_events, @id, @livemode, @metadata, @object, @status, @url, @api_version, @application, @description, @secret)
  end
end
