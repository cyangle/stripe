#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class RadarReviewResourceSession
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The browser used in this browser session (e.g., `Chrome`).
    @[JSON::Field(key: "browser", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: browser.nil? && !browser_present?)]
    getter browser : String? = nil

    @[JSON::Field(ignore: true)]
    property? browser_present : Bool = false

    # Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
    @[JSON::Field(key: "device", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: device.nil? && !device_present?)]
    getter device : String? = nil

    @[JSON::Field(ignore: true)]
    property? device_present : Bool = false

    # The platform for the browser session (e.g., `Macintosh`).
    @[JSON::Field(key: "platform", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: platform.nil? && !platform_present?)]
    getter platform : String? = nil

    @[JSON::Field(ignore: true)]
    property? platform_present : Bool = false

    # The version for the browser session (e.g., `61.0.3163.100`).
    @[JSON::Field(key: "version", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: version.nil? && !version_present?)]
    getter version : String? = nil

    @[JSON::Field(ignore: true)]
    property? version_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @browser : String? = nil,
      @device : String? = nil,
      @platform : String? = nil,
      @version : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _browser = @browser
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("browser", _browser.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _device = @device
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("device", _device.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _platform = @platform
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("platform", _platform.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _version = @version
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("version", _version.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _browser = @browser
        return false if _browser.to_s.size > 5000
      end
      if _device = @device
        return false if _device.to_s.size > 5000
      end
      if _platform = @platform
        return false if _platform.to_s.size > 5000
      end
      if _version = @version
        return false if _version.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] browser Object to be assigned
    def browser=(browser : String?)
      if browser.nil?
        return @browser = nil
      end
      _browser = browser.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("browser", _browser.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @browser = _browser
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device Object to be assigned
    def device=(device : String?)
      if device.nil?
        return @device = nil
      end
      _device = device.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("device", _device.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @device = _device
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform Object to be assigned
    def platform=(platform : String?)
      if platform.nil?
        return @platform = nil
      end
      _platform = platform.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("platform", _platform.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @platform = _platform
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(version : String?)
      if version.nil?
        return @version = nil
      end
      _version = version.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("version", _version.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @version = _version
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@browser, @browser_present, @device, @device_present, @platform, @platform_present, @version, @version_present)
  end
end
