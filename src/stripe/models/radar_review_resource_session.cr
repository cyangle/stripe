#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class RadarReviewResourceSession
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # The browser used in this browser session (e.g., `Chrome`).
    @[JSON::Field(key: "browser", type: String?, presence: true, ignore_serialize: browser.nil? && !browser_present?)]
    getter browser : String?

    @[JSON::Field(ignore: true)]
    property? browser_present : Bool = false

    # Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
    @[JSON::Field(key: "device", type: String?, presence: true, ignore_serialize: device.nil? && !device_present?)]
    getter device : String?

    @[JSON::Field(ignore: true)]
    property? device_present : Bool = false

    # The platform for the browser session (e.g., `Macintosh`).
    @[JSON::Field(key: "platform", type: String?, presence: true, ignore_serialize: platform.nil? && !platform_present?)]
    getter platform : String?

    @[JSON::Field(ignore: true)]
    property? platform_present : Bool = false

    # The version for the browser session (e.g., `61.0.3163.100`).
    @[JSON::Field(key: "version", type: String?, presence: true, ignore_serialize: version.nil? && !version_present?)]
    getter version : String?

    @[JSON::Field(ignore: true)]
    property? version_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @browser : String? = nil,
      @device : String? = nil,
      @platform : String? = nil,
      @version : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@browser.nil? && @browser.to_s.size > 5000
        invalid_properties.push("invalid value for \"browser\", the character length must be smaller than or equal to 5000.")
      end

      if !@device.nil? && @device.to_s.size > 5000
        invalid_properties.push("invalid value for \"device\", the character length must be smaller than or equal to 5000.")
      end

      if !@platform.nil? && @platform.to_s.size > 5000
        invalid_properties.push("invalid value for \"platform\", the character length must be smaller than or equal to 5000.")
      end

      if !@version.nil? && @version.to_s.size > 5000
        invalid_properties.push("invalid value for \"version\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@browser.nil? && @browser.to_s.size > 5000
      return false if !@device.nil? && @device.to_s.size > 5000
      return false if !@platform.nil? && @platform.to_s.size > 5000
      return false if !@version.nil? && @version.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] browser Value to be assigned
    def browser=(browser : String?)
      if !browser.nil? && browser.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"browser\", the character length must be smaller than or equal to 5000.")
      end

      @browser = browser
    end

    # Custom attribute writer method with validation
    # @param [Object] device Value to be assigned
    def device=(device : String?)
      if !device.nil? && device.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"device\", the character length must be smaller than or equal to 5000.")
      end

      @device = device
    end

    # Custom attribute writer method with validation
    # @param [Object] platform Value to be assigned
    def platform=(platform : String?)
      if !platform.nil? && platform.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"platform\", the character length must be smaller than or equal to 5000.")
      end

      @platform = platform
    end

    # Custom attribute writer method with validation
    # @param [Object] version Value to be assigned
    def version=(version : String?)
      if !version.nil? && version.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"version\", the character length must be smaller than or equal to 5000.")
      end

      @version = version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@browser, @browser_present, @device, @device_present, @platform, @platform_present, @version, @version_present)
  end
end
