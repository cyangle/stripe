#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class CountrySpecVerificationFieldDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Additional fields which are only required for some users.
    @[JSON::Field(key: "additional", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter additional : Array(String)? = nil

    # Fields which every account must eventually provide.
    @[JSON::Field(key: "minimum", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter minimum : Array(String)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @additional : Array(String)? = nil,
      @minimum : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"additional\" is required and cannot be null") if @additional.nil?

      invalid_properties.push("\"minimum\" is required and cannot be null") if @minimum.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @additional.nil?

      return false if @minimum.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] additional Object to be assigned
    def additional=(additional : Array(String)?)
      if additional.nil?
        raise ArgumentError.new("\"additional\" is required and cannot be null")
      end
      _additional = additional.not_nil!
      @additional = _additional
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minimum Object to be assigned
    def minimum=(minimum : Array(String)?)
      if minimum.nil?
        raise ArgumentError.new("\"minimum\" is required and cannot be null")
      end
      _minimum = minimum.not_nil!
      @minimum = _minimum
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@additional, @minimum)
  end
end
