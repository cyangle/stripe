#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./fee_refund_balance_transaction"
require "./refund_charge"
require "./refund_destination_details"
require "./refund_failure_balance_transaction"
require "./refund_next_action"
require "./refund_payment_intent"
require "./refund_source_transfer_reversal"
require "./refund_transfer_reversal"

module Stripe
  # Refund objects allow you to refund a previously created charge that isn't refunded yet. Funds are refunded to the credit or debit card that's initially charged.  Related guide: [Refunds](https://stripe.com/docs/refunds)
  class Refund
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount, in cents (or local equivalent).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::FeeRefundBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    getter balance_transaction : Stripe::FeeRefundBalanceTransaction? = nil

    @[JSON::Field(key: "charge", type: Stripe::RefundCharge?, default: nil, required: true, nullable: true, emit_null: true)]
    getter charge : Stripe::RefundCharge? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [refund]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("refund")

    @[JSON::Field(key: "payment_intent", type: Stripe::RefundPaymentIntent?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_intent : Stripe::RefundPaymentIntent? = nil

    # Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter reason : String? = nil
    ERROR_MESSAGE_FOR_REASON = "invalid value for \"reason\", must be one of [duplicate, expired_uncaptured_charge, fraudulent, requested_by_customer]."
    VALID_VALUES_FOR_REASON  = String.static_array("duplicate", "expired_uncaptured_charge", "fraudulent", "requested_by_customer")

    # This is the transaction number that appears on email receipts sent for this refund.
    @[JSON::Field(key: "receipt_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter receipt_number : String? = nil
    MAX_LENGTH_FOR_RECEIPT_NUMBER = 5000

    @[JSON::Field(key: "source_transfer_reversal", type: Stripe::RefundSourceTransferReversal?, default: nil, required: true, nullable: true, emit_null: true)]
    getter source_transfer_reversal : Stripe::RefundSourceTransferReversal? = nil

    # Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    @[JSON::Field(key: "transfer_reversal", type: Stripe::RefundTransferReversal?, default: nil, required: true, nullable: true, emit_null: true)]
    getter transfer_reversal : Stripe::RefundTransferReversal? = nil

    # End of Required Properties

    # Optional Properties

    # An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    @[JSON::Field(key: "destination_details", type: Stripe::RefundDestinationDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter destination_details : Stripe::RefundDestinationDetails? = nil

    @[JSON::Field(key: "failure_balance_transaction", type: Stripe::RefundFailureBalanceTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    getter failure_balance_transaction : Stripe::RefundFailureBalanceTransaction? = nil

    # Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
    @[JSON::Field(key: "failure_reason", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter failure_reason : String? = nil
    MAX_LENGTH_FOR_FAILURE_REASON = 5000

    # For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
    @[JSON::Field(key: "instructions_email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter instructions_email : String? = nil
    MAX_LENGTH_FOR_INSTRUCTIONS_EMAIL = 5000

    @[JSON::Field(key: "next_action", type: Stripe::RefundNextAction?, default: nil, required: false, nullable: false, emit_null: false)]
    getter next_action : Stripe::RefundNextAction? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @balance_transaction : Stripe::FeeRefundBalanceTransaction? = nil,
      @charge : Stripe::RefundCharge? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @id : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @payment_intent : Stripe::RefundPaymentIntent? = nil,
      @reason : String? = nil,
      @receipt_number : String? = nil,
      @source_transfer_reversal : Stripe::RefundSourceTransferReversal? = nil,
      @status : String? = nil,
      @transfer_reversal : Stripe::RefundTransferReversal? = nil,
      # Optional properties
      @description : String? = nil,
      @destination_details : Stripe::RefundDestinationDetails? = nil,
      @failure_balance_transaction : Stripe::RefundFailureBalanceTransaction? = nil,
      @failure_reason : String? = nil,
      @instructions_email : String? = nil,
      @next_action : Stripe::RefundNextAction? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_balance_transaction = @balance_transaction).nil?
        invalid_properties.concat(_balance_transaction.list_invalid_properties_for("balance_transaction")) if _balance_transaction.is_a?(OpenApi::Validatable)
      end
      unless (_charge = @charge).nil?
        invalid_properties.concat(_charge.list_invalid_properties_for("charge")) if _charge.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_payment_intent = @payment_intent).nil?
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      unless (_reason = @reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REASON) unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end
      unless (_receipt_number = @receipt_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_number", _receipt_number.to_s.size, MAX_LENGTH_FOR_RECEIPT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_source_transfer_reversal = @source_transfer_reversal).nil?
        invalid_properties.concat(_source_transfer_reversal.list_invalid_properties_for("source_transfer_reversal")) if _source_transfer_reversal.is_a?(OpenApi::Validatable)
      end
      unless (_status = @status).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("status", _status.to_s.size, MAX_LENGTH_FOR_STATUS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_transfer_reversal = @transfer_reversal).nil?
        invalid_properties.concat(_transfer_reversal.list_invalid_properties_for("transfer_reversal")) if _transfer_reversal.is_a?(OpenApi::Validatable)
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_destination_details = @destination_details).nil?
        invalid_properties.concat(_destination_details.list_invalid_properties_for("destination_details")) if _destination_details.is_a?(OpenApi::Validatable)
      end
      unless (_failure_balance_transaction = @failure_balance_transaction).nil?
        invalid_properties.concat(_failure_balance_transaction.list_invalid_properties_for("failure_balance_transaction")) if _failure_balance_transaction.is_a?(OpenApi::Validatable)
      end
      unless (_failure_reason = @failure_reason).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_reason", _failure_reason.to_s.size, MAX_LENGTH_FOR_FAILURE_REASON)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_instructions_email = @instructions_email).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("instructions_email", _instructions_email.to_s.size, MAX_LENGTH_FOR_INSTRUCTIONS_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_next_action = @next_action).nil?
        invalid_properties.concat(_next_action.list_invalid_properties_for("next_action")) if _next_action.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      unless (_balance_transaction = @balance_transaction).nil?
        return false if _balance_transaction.is_a?(OpenApi::Validatable) && !_balance_transaction.valid?
      end

      unless (_charge = @charge).nil?
        return false if _charge.is_a?(OpenApi::Validatable) && !_charge.valid?
      end

      return false if @created.nil?

      return false if @currency.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      unless (_reason = @reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_reason, VALID_VALUES_FOR_REASON)
      end

      unless (_receipt_number = @receipt_number).nil?
        return false if _receipt_number.to_s.size > MAX_LENGTH_FOR_RECEIPT_NUMBER
      end

      unless (_source_transfer_reversal = @source_transfer_reversal).nil?
        return false if _source_transfer_reversal.is_a?(OpenApi::Validatable) && !_source_transfer_reversal.valid?
      end

      unless (_status = @status).nil?
        return false if _status.to_s.size > MAX_LENGTH_FOR_STATUS
      end

      unless (_transfer_reversal = @transfer_reversal).nil?
        return false if _transfer_reversal.is_a?(OpenApi::Validatable) && !_transfer_reversal.valid?
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_destination_details = @destination_details).nil?
        return false if _destination_details.is_a?(OpenApi::Validatable) && !_destination_details.valid?
      end

      unless (_failure_balance_transaction = @failure_balance_transaction).nil?
        return false if _failure_balance_transaction.is_a?(OpenApi::Validatable) && !_failure_balance_transaction.valid?
      end

      unless (_failure_reason = @failure_reason).nil?
        return false if _failure_reason.to_s.size > MAX_LENGTH_FOR_FAILURE_REASON
      end

      unless (_instructions_email = @instructions_email).nil?
        return false if _instructions_email.to_s.size > MAX_LENGTH_FOR_INSTRUCTIONS_EMAIL
      end

      unless (_next_action = @next_action).nil?
        return false if _next_action.is_a?(OpenApi::Validatable) && !_next_action.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_transaction Object to be assigned
    def balance_transaction=(new_value : Stripe::FeeRefundBalanceTransaction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @balance_transaction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(new_value : Stripe::RefundCharge?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @charge = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(new_value : Stripe::RefundPaymentIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("reason", new_value, VALID_VALUES_FOR_REASON)
      end

      @reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_number Object to be assigned
    def receipt_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("receipt_number", new_value.to_s.size, MAX_LENGTH_FOR_RECEIPT_NUMBER)
      end

      @receipt_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_transfer_reversal Object to be assigned
    def source_transfer_reversal=(new_value : Stripe::RefundSourceTransferReversal?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @source_transfer_reversal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("status", new_value.to_s.size, MAX_LENGTH_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_reversal Object to be assigned
    def transfer_reversal=(new_value : Stripe::RefundTransferReversal?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfer_reversal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination_details Object to be assigned
    def destination_details=(new_value : Stripe::RefundDestinationDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @destination_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_balance_transaction Object to be assigned
    def failure_balance_transaction=(new_value : Stripe::RefundFailureBalanceTransaction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @failure_balance_transaction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_reason Object to be assigned
    def failure_reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("failure_reason", new_value.to_s.size, MAX_LENGTH_FOR_FAILURE_REASON)
      end

      @failure_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instructions_email Object to be assigned
    def instructions_email=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("instructions_email", new_value.to_s.size, MAX_LENGTH_FOR_INSTRUCTIONS_EMAIL)
      end

      @instructions_email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_action Object to be assigned
    def next_action=(new_value : Stripe::RefundNextAction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @next_action = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @balance_transaction, @charge, @created, @currency, @id, @metadata, @object, @payment_intent, @reason, @receipt_number, @source_transfer_reversal, @status, @transfer_reversal, @description, @destination_details, @failure_balance_transaction, @failure_reason, @instructions_email, @next_action)
  end
end
