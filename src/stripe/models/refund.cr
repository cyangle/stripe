#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # `Refund` objects allow you to refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.  Related guide: [Refunds](https://stripe.com/docs/refunds).
  class Refund
    include NASON::Serializable

    # Required properties
    # Amount, in %s.
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # Optional properties
    # Balance transaction that describes the impact on your account balance.
    @[NASON::Field(key: "balance_transaction", type: String | BalanceTransaction? | Null, nillable: true)]
    property balance_transaction : String | BalanceTransaction? | Null

    # ID of the charge that was refunded.
    @[NASON::Field(key: "charge", type: String | Charge? | Null, nillable: true)]
    property charge : String | Charge? | Null

    # An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
    @[NASON::Field(key: "description", type: String?, nillable: true)]
    property description : String?

    # If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    @[NASON::Field(key: "failure_balance_transaction", type: String | BalanceTransaction? | Null, nillable: true)]
    property failure_balance_transaction : String | BalanceTransaction? | Null

    # If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
    @[NASON::Field(key: "failure_reason", type: String?, nillable: true)]
    property failure_reason : String?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    # ID of the PaymentIntent that was refunded.
    @[NASON::Field(key: "payment_intent", type: String | PaymentIntent? | Null, nillable: true)]
    property payment_intent : String | PaymentIntent? | Null

    # Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    @[NASON::Field(key: "reason", type: String? | Null, nillable: true)]
    property reason : String? | Null

    # This is the transaction number that appears on email receipts sent for this refund.
    @[NASON::Field(key: "receipt_number", type: String? | Null, nillable: true)]
    property receipt_number : String? | Null

    # The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
    @[NASON::Field(key: "source_transfer_reversal", type: String | TransferReversal? | Null, nillable: true)]
    property source_transfer_reversal : String | TransferReversal? | Null

    # Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
    @[NASON::Field(key: "status", type: String? | Null, nillable: true)]
    property status : String? | Null

    # If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
    @[NASON::Field(key: "transfer_reversal", type: String | TransferReversal? | Null, nillable: true)]
    property transfer_reversal : String | TransferReversal? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @created : Int64, @currency : String, @id : String, @object : String, @balance_transaction : String | BalanceTransaction? | Null = nil, @charge : String | Charge? | Null = nil, @description : String? = nil, @failure_balance_transaction : String | BalanceTransaction? | Null = nil, @failure_reason : String? = nil, @metadata : Hash(String, String)? | Null = nil, @payment_intent : String | PaymentIntent? | Null = nil, @reason : String? | Null = nil, @receipt_number : String? | Null = nil, @source_transfer_reversal : String | TransferReversal? | Null = nil, @status : String? | Null = nil, @transfer_reversal : String | TransferReversal? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@failure_reason.nil? && @failure_reason.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_reason\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@reason.nil? && !@reason.null? && @reason.to_s.size > 5000
        invalid_properties.push("invalid value for \"reason\", the character length must be smaller than or equal to 5000.")
      end

      if !@receipt_number.nil? && !@receipt_number.null? && @receipt_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      if !@status.nil? && !@status.null? && @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@failure_reason.nil? && @failure_reason.to_s.size > 5000
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["refund"])
      return false unless object_validator.valid?(@object)
      return false if !@reason.nil? && !@reason.null? && @reason.to_s.size > 5000
      return false if !@receipt_number.nil? && !@receipt_number.null? && @receipt_number.to_s.size > 5000
      return false if !@status.nil? && !@status.null? && @status.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_reason Value to be assigned
    def failure_reason=(failure_reason)
      if !failure_reason.nil? && failure_reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_reason\", the character length must be smaller than or equal to 5000.")
      end

      @failure_reason = failure_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["refund"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] reason Value to be assigned
    def reason=(reason)
      if !reason.nil? && !@reason.null? && reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reason\", the character length must be smaller than or equal to 5000.")
      end

      @reason = reason
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_number Value to be assigned
    def receipt_number=(receipt_number)
      if !receipt_number.nil? && !@receipt_number.null? && receipt_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_number = receipt_number
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if !status.nil? && !@status.null? && status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        balance_transaction == o.balance_transaction &&
        charge == o.charge &&
        created == o.created &&
        currency == o.currency &&
        description == o.description &&
        failure_balance_transaction == o.failure_balance_transaction &&
        failure_reason == o.failure_reason &&
        id == o.id &&
        metadata == o.metadata &&
        object == o.object &&
        payment_intent == o.payment_intent &&
        reason == o.reason &&
        receipt_number == o.receipt_number &&
        source_transfer_reversal == o.source_transfer_reversal &&
        status == o.status &&
        transfer_reversal == o.transfer_reversal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, balance_transaction, charge, created, currency, description, failure_balance_transaction, failure_reason, id, metadata, object, payment_intent, reason, receipt_number, source_transfer_reversal, status, transfer_reversal].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
