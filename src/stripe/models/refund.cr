#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # `Refund` objects allow you to refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.  Related guide: [Refunds](https://stripe.com/docs/refunds).
  class Refund
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Amount, in %s.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["refund"])

    # Optional properties

    @[JSON::Field(key: "balance_transaction", type: Stripe::FeeRefundBalanceTransaction?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: balance_transaction.nil? && !balance_transaction_present?)]
    getter balance_transaction : Stripe::FeeRefundBalanceTransaction? = nil

    @[JSON::Field(ignore: true)]
    property? balance_transaction_present : Bool = false

    @[JSON::Field(key: "charge", type: Stripe::RefundCharge?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: charge.nil? && !charge_present?)]
    getter charge : Stripe::RefundCharge? = nil

    @[JSON::Field(ignore: true)]
    property? charge_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "failure_balance_transaction", type: Stripe::RefundFailureBalanceTransaction?, default: nil, required: false, nullable: false, emit_null: false)]
    getter failure_balance_transaction : Stripe::RefundFailureBalanceTransaction? = nil

    # If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
    @[JSON::Field(key: "failure_reason", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter failure_reason : String? = nil

    # Email to which refund instructions, if required, are sent to.
    @[JSON::Field(key: "instructions_email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter instructions_email : String? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "next_action", type: Stripe::RefundNextAction?, default: nil, required: false, nullable: false, emit_null: false)]
    getter next_action : Stripe::RefundNextAction? = nil

    @[JSON::Field(key: "payment_intent", type: Stripe::RefundPaymentIntent?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_intent.nil? && !payment_intent_present?)]
    getter payment_intent : Stripe::RefundPaymentIntent? = nil

    @[JSON::Field(ignore: true)]
    property? payment_intent_present : Bool = false

    # Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    @[JSON::Field(key: "reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: reason.nil? && !reason_present?)]
    getter reason : String? = nil

    @[JSON::Field(ignore: true)]
    property? reason_present : Bool = false

    ENUM_VALIDATOR_FOR_REASON = EnumValidator.new("reason", "String", ["duplicate", "expired_uncaptured_charge", "fraudulent", "requested_by_customer"])

    # This is the transaction number that appears on email receipts sent for this refund.
    @[JSON::Field(key: "receipt_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: receipt_number.nil? && !receipt_number_present?)]
    getter receipt_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? receipt_number_present : Bool = false

    @[JSON::Field(key: "source_transfer_reversal", type: Stripe::RefundSourceTransferReversal?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: source_transfer_reversal.nil? && !source_transfer_reversal_present?)]
    getter source_transfer_reversal : Stripe::RefundSourceTransferReversal? = nil

    @[JSON::Field(ignore: true)]
    property? source_transfer_reversal_present : Bool = false

    # Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String? = nil

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    @[JSON::Field(key: "transfer_reversal", type: Stripe::RefundTransferReversal?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transfer_reversal.nil? && !transfer_reversal_present?)]
    getter transfer_reversal : Stripe::RefundTransferReversal? = nil

    @[JSON::Field(ignore: true)]
    property? transfer_reversal_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @id : String? = nil,
      @object : String? = nil,
      # Optional properties
      @balance_transaction : Stripe::FeeRefundBalanceTransaction? = nil,
      @charge : Stripe::RefundCharge? = nil,
      @description : String? = nil,
      @failure_balance_transaction : Stripe::RefundFailureBalanceTransaction? = nil,
      @failure_reason : String? = nil,
      @instructions_email : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @next_action : Stripe::RefundNextAction? = nil,
      @payment_intent : Stripe::RefundPaymentIntent? = nil,
      @reason : String? = nil,
      @receipt_number : String? = nil,
      @source_transfer_reversal : Stripe::RefundSourceTransferReversal? = nil,
      @status : String? = nil,
      @transfer_reversal : Stripe::RefundTransferReversal? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      if _balance_transaction = @balance_transaction
        if _balance_transaction.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_balance_transaction.list_invalid_properties_for("balance_transaction"))
        end
      end
      if _charge = @charge
        if _charge.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_charge.list_invalid_properties_for("charge"))
        end
      end
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _failure_balance_transaction = @failure_balance_transaction
        if _failure_balance_transaction.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_failure_balance_transaction.list_invalid_properties_for("failure_balance_transaction"))
        end
      end
      if _failure_reason = @failure_reason
        if _failure_reason.to_s.size > 5000
          invalid_properties.push("invalid value for \"failure_reason\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _instructions_email = @instructions_email
        if _instructions_email.to_s.size > 5000
          invalid_properties.push("invalid value for \"instructions_email\", the character length must be smaller than or equal to 5000.")
        end
      end

      if _next_action = @next_action
        if _next_action.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_next_action.list_invalid_properties_for("next_action"))
        end
      end
      if _payment_intent = @payment_intent
        if _payment_intent.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_REASON.error_message) unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason)
      if _receipt_number = @receipt_number
        if _receipt_number.to_s.size > 5000
          invalid_properties.push("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _source_transfer_reversal = @source_transfer_reversal
        if _source_transfer_reversal.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_source_transfer_reversal.list_invalid_properties_for("source_transfer_reversal"))
        end
      end
      if _status = @status
        if _status.to_s.size > 5000
          invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _transfer_reversal = @transfer_reversal
        if _transfer_reversal.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_transfer_reversal.list_invalid_properties_for("transfer_reversal"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @created.nil?

      return false if @currency.nil?

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      if _balance_transaction = @balance_transaction
        if _balance_transaction.is_a?(OpenApi::Validatable)
          return false unless _balance_transaction.valid?
        end
      end
      if _charge = @charge
        if _charge.is_a?(OpenApi::Validatable)
          return false unless _charge.valid?
        end
      end
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      if _failure_balance_transaction = @failure_balance_transaction
        if _failure_balance_transaction.is_a?(OpenApi::Validatable)
          return false unless _failure_balance_transaction.valid?
        end
      end
      if _failure_reason = @failure_reason
        return false if _failure_reason.to_s.size > 5000
      end
      if _instructions_email = @instructions_email
        return false if _instructions_email.to_s.size > 5000
      end

      if _next_action = @next_action
        if _next_action.is_a?(OpenApi::Validatable)
          return false unless _next_action.valid?
        end
      end
      if _payment_intent = @payment_intent
        if _payment_intent.is_a?(OpenApi::Validatable)
          return false unless _payment_intent.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_REASON.valid?(@reason)
      if _receipt_number = @receipt_number
        return false if _receipt_number.to_s.size > 5000
      end
      if _source_transfer_reversal = @source_transfer_reversal
        if _source_transfer_reversal.is_a?(OpenApi::Validatable)
          return false unless _source_transfer_reversal.valid?
        end
      end
      if _status = @status
        return false if _status.to_s.size > 5000
      end
      if _transfer_reversal = @transfer_reversal
        if _transfer_reversal.is_a?(OpenApi::Validatable)
          return false unless _transfer_reversal.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        raise ArgumentError.new("\"amount\" is required and cannot be null")
      end
      _amount = amount.not_nil!
      @amount = _amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_transaction Object to be assigned
    def balance_transaction=(balance_transaction : Stripe::FeeRefundBalanceTransaction?)
      if balance_transaction.nil?
        return @balance_transaction = nil
      end
      _balance_transaction = balance_transaction.not_nil!
      if _balance_transaction.is_a?(OpenApi::Validatable)
        _balance_transaction.validate
      end
      @balance_transaction = _balance_transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(charge : Stripe::RefundCharge?)
      if charge.nil?
        return @charge = nil
      end
      _charge = charge.not_nil!
      if _charge.is_a?(OpenApi::Validatable)
        _charge.validate
      end
      @charge = _charge
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_balance_transaction Object to be assigned
    def failure_balance_transaction=(failure_balance_transaction : Stripe::RefundFailureBalanceTransaction?)
      if failure_balance_transaction.nil?
        return @failure_balance_transaction = nil
      end
      _failure_balance_transaction = failure_balance_transaction.not_nil!
      if _failure_balance_transaction.is_a?(OpenApi::Validatable)
        _failure_balance_transaction.validate
      end
      @failure_balance_transaction = _failure_balance_transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_reason Object to be assigned
    def failure_reason=(failure_reason : String?)
      if failure_reason.nil?
        return @failure_reason = nil
      end
      _failure_reason = failure_reason.not_nil!
      if _failure_reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_reason\", the character length must be smaller than or equal to 5000.")
      end

      @failure_reason = _failure_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instructions_email Object to be assigned
    def instructions_email=(instructions_email : String?)
      if instructions_email.nil?
        return @instructions_email = nil
      end
      _instructions_email = instructions_email.not_nil!
      if _instructions_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"instructions_email\", the character length must be smaller than or equal to 5000.")
      end

      @instructions_email = _instructions_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_action Object to be assigned
    def next_action=(next_action : Stripe::RefundNextAction?)
      if next_action.nil?
        return @next_action = nil
      end
      _next_action = next_action.not_nil!
      if _next_action.is_a?(OpenApi::Validatable)
        _next_action.validate
      end
      @next_action = _next_action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(payment_intent : Stripe::RefundPaymentIntent?)
      if payment_intent.nil?
        return @payment_intent = nil
      end
      _payment_intent = payment_intent.not_nil!
      if _payment_intent.is_a?(OpenApi::Validatable)
        _payment_intent.validate
      end
      @payment_intent = _payment_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason : String?)
      if reason.nil?
        return @reason = nil
      end
      _reason = reason.not_nil!
      ENUM_VALIDATOR_FOR_REASON.valid!(_reason)
      @reason = _reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_number Object to be assigned
    def receipt_number=(receipt_number : String?)
      if receipt_number.nil?
        return @receipt_number = nil
      end
      _receipt_number = receipt_number.not_nil!
      if _receipt_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_number = _receipt_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_transfer_reversal Object to be assigned
    def source_transfer_reversal=(source_transfer_reversal : Stripe::RefundSourceTransferReversal?)
      if source_transfer_reversal.nil?
        return @source_transfer_reversal = nil
      end
      _source_transfer_reversal = source_transfer_reversal.not_nil!
      if _source_transfer_reversal.is_a?(OpenApi::Validatable)
        _source_transfer_reversal.validate
      end
      @source_transfer_reversal = _source_transfer_reversal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      if _status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_reversal Object to be assigned
    def transfer_reversal=(transfer_reversal : Stripe::RefundTransferReversal?)
      if transfer_reversal.nil?
        return @transfer_reversal = nil
      end
      _transfer_reversal = transfer_reversal.not_nil!
      if _transfer_reversal.is_a?(OpenApi::Validatable)
        _transfer_reversal.validate
      end
      @transfer_reversal = _transfer_reversal
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @created, @currency, @id, @object, @balance_transaction, @balance_transaction_present, @charge, @charge_present, @description, @failure_balance_transaction, @failure_reason, @instructions_email, @metadata, @metadata_present, @next_action, @payment_intent, @payment_intent_present, @reason, @reason_present, @receipt_number, @receipt_number_present, @source_transfer_reversal, @source_transfer_reversal_present, @status, @status_present, @transfer_reversal, @transfer_reversal_present)
  end
end
