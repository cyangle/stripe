#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./card_account"
require "./card_customer"
require "./deleted_external_account"
require "./external_account"
require "./external_account_requirements"
require "./token_card_networks"

module Stripe
  # ID of the bank account or card the payout is sent to.
  class PayoutDestination
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property currency : String? = nil

    # Always true for a deleted object
    @[JSON::Field(key: "deleted", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property deleted : Bool? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [card]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("card")

    # The name of the person or business that owns the bank account.
    @[JSON::Field(key: "account_holder_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property account_holder_name : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_HOLDER_NAME = 5000

    # The type of entity that holds the account. This can be either `individual` or `company`.
    @[JSON::Field(key: "account_holder_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property account_holder_type : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_HOLDER_TYPE = 5000

    # The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property account_type : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_TYPE = 5000

    # Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
    @[JSON::Field(key: "bank_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property bank_name : String? = nil
    MAX_LENGTH_FOR_BANK_NAME = 5000

    # Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    @[JSON::Field(key: "country", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property country : String? = nil
    MAX_LENGTH_FOR_COUNTRY = 5000

    # Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.  *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
    @[JSON::Field(key: "fingerprint", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property fingerprint : String? = nil
    MAX_LENGTH_FOR_FINGERPRINT = 5000

    # The last four digits of the card.
    @[JSON::Field(key: "last4", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property last4 : String? = nil
    MAX_LENGTH_FOR_LAST4 = 5000

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property metadata : Hash(String, String)? = nil

    # The routing transit number for the bank account.
    @[JSON::Field(key: "routing_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property routing_number : String? = nil
    MAX_LENGTH_FOR_ROUTING_NUMBER = 5000

    # For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    # City/District/Suburb/Town/Village.
    @[JSON::Field(key: "address_city", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_city : String? = nil
    MAX_LENGTH_FOR_ADDRESS_CITY = 5000

    # Billing address country, if provided when creating card.
    @[JSON::Field(key: "address_country", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_country : String? = nil
    MAX_LENGTH_FOR_ADDRESS_COUNTRY = 5000

    # Address line 1 (Street address/PO Box/Company name).
    @[JSON::Field(key: "address_line1", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_line1 : String? = nil
    MAX_LENGTH_FOR_ADDRESS_LINE1 = 5000

    # If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
    @[JSON::Field(key: "address_line1_check", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_line1_check : String? = nil
    MAX_LENGTH_FOR_ADDRESS_LINE1_CHECK = 5000

    # Address line 2 (Apartment/Suite/Unit/Building).
    @[JSON::Field(key: "address_line2", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_line2 : String? = nil
    MAX_LENGTH_FOR_ADDRESS_LINE2 = 5000

    # State/County/Province/Region.
    @[JSON::Field(key: "address_state", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_state : String? = nil
    MAX_LENGTH_FOR_ADDRESS_STATE = 5000

    # ZIP or postal code.
    @[JSON::Field(key: "address_zip", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_zip : String? = nil
    MAX_LENGTH_FOR_ADDRESS_ZIP = 5000

    # If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
    @[JSON::Field(key: "address_zip_check", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_zip_check : String? = nil
    MAX_LENGTH_FOR_ADDRESS_ZIP_CHECK = 5000

    # Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
    @[JSON::Field(key: "brand", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property brand : String? = nil
    MAX_LENGTH_FOR_BRAND = 5000

    # If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
    @[JSON::Field(key: "cvc_check", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property cvc_check : String? = nil
    MAX_LENGTH_FOR_CVC_CHECK = 5000

    # (For tokenized numbers only.) The last four digits of the device account number.
    @[JSON::Field(key: "dynamic_last4", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property dynamic_last4 : String? = nil
    MAX_LENGTH_FOR_DYNAMIC_LAST4 = 5000

    # Two-digit number representing the card's expiration month.
    @[JSON::Field(key: "exp_month", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property exp_month : Int64? = nil

    # Four-digit number representing the card's expiration year.
    @[JSON::Field(key: "exp_year", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property exp_year : Int64? = nil

    # Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    @[JSON::Field(key: "funding", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property funding : String? = nil
    MAX_LENGTH_FOR_FUNDING = 5000

    # Cardholder name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
    @[JSON::Field(key: "tokenization_method", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property tokenization_method : String? = nil
    MAX_LENGTH_FOR_TOKENIZATION_METHOD = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "account", type: Stripe::CardAccount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account.nil? && !account_present?)]
    property account : Stripe::CardAccount? = nil

    @[JSON::Field(ignore: true)]
    property? account_present : Bool = false

    # A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
    @[JSON::Field(key: "available_payout_methods", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: available_payout_methods.nil? && !available_payout_methods_present?)]
    property available_payout_methods : Array(String)? = nil
    ERROR_MESSAGE_FOR_AVAILABLE_PAYOUT_METHODS = "invalid value for \"available_payout_methods\", must be one of [instant, standard]."
    VALID_VALUES_FOR_AVAILABLE_PAYOUT_METHODS  = String.static_array("instant", "standard")

    @[JSON::Field(ignore: true)]
    property? available_payout_methods_present : Bool = false

    @[JSON::Field(key: "customer", type: Stripe::CardCustomer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    property customer : Stripe::CardCustomer? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
    @[JSON::Field(key: "default_for_currency", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_for_currency.nil? && !default_for_currency_present?)]
    property default_for_currency : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? default_for_currency_present : Bool = false

    @[JSON::Field(key: "future_requirements", type: Stripe::ExternalAccountRequirements?, default: nil, required: false, nullable: false, emit_null: false)]
    property future_requirements : Stripe::ExternalAccountRequirements? = nil

    @[JSON::Field(key: "requirements", type: Stripe::ExternalAccountRequirements?, default: nil, required: false, nullable: false, emit_null: false)]
    property requirements : Stripe::ExternalAccountRequirements? = nil

    # A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "iin", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property iin : String? = nil
    MAX_LENGTH_FOR_IIN = 5000

    # The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "issuer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property issuer : String? = nil
    MAX_LENGTH_FOR_ISSUER = 5000

    @[JSON::Field(key: "networks", type: Stripe::TokenCardNetworks?, default: nil, required: false, nullable: false, emit_null: false)]
    property networks : Stripe::TokenCardNetworks? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::DeletedExternalAccount,
        Stripe::ExternalAccount,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @currency : String? = nil,
      @deleted : Bool? = nil,
      @id : String? = nil,
      @object : String? = nil,
      @account_holder_name : String? = nil,
      @account_holder_type : String? = nil,
      @account_type : String? = nil,
      @bank_name : String? = nil,
      @country : String? = nil,
      @fingerprint : String? = nil,
      @last4 : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @routing_number : String? = nil,
      @status : String? = nil,
      @address_city : String? = nil,
      @address_country : String? = nil,
      @address_line1 : String? = nil,
      @address_line1_check : String? = nil,
      @address_line2 : String? = nil,
      @address_state : String? = nil,
      @address_zip : String? = nil,
      @address_zip_check : String? = nil,
      @brand : String? = nil,
      @cvc_check : String? = nil,
      @dynamic_last4 : String? = nil,
      @exp_month : Int64? = nil,
      @exp_year : Int64? = nil,
      @funding : String? = nil,
      @name : String? = nil,
      @tokenization_method : String? = nil,
      # Optional properties
      @account : Stripe::CardAccount? = nil,
      @available_payout_methods : Array(String)? = nil,
      @customer : Stripe::CardCustomer? = nil,
      @default_for_currency : Bool? = nil,
      @future_requirements : Stripe::ExternalAccountRequirements? = nil,
      @requirements : Stripe::ExternalAccountRequirements? = nil,
      @description : String? = nil,
      @iin : String? = nil,
      @issuer : String? = nil,
      @networks : Stripe::TokenCardNetworks? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@currency, @deleted, @id, @object, @account_holder_name, @account_holder_type, @account_type, @bank_name, @country, @fingerprint, @last4, @metadata, @routing_number, @status, @address_city, @address_country, @address_line1, @address_line1_check, @address_line2, @address_state, @address_zip, @address_zip_check, @brand, @cvc_check, @dynamic_last4, @exp_month, @exp_year, @funding, @name, @tokenization_method, @account, @account_present, @available_payout_methods, @available_payout_methods_present, @customer, @customer_present, @default_for_currency, @default_for_currency_present, @future_requirements, @requirements, @description, @iin, @issuer, @networks)
  end
end
