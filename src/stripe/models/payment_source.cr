#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./account"
require "./account_business_profile"
require "./account_capabilities"
require "./account_settings"
require "./account_tos_acceptance"
require "./account_unification_account_controller"
require "./bank_account"
require "./card"
require "./card_account"
require "./external_account_list"
require "./external_account_requirements"
require "./legal_entity_company"
require "./person"
require "./source"
require "./source_code_verification_flow"
require "./source_order"
require "./source_owner"
require "./source_receiver_flow"
require "./source_redirect_flow"
require "./source_type_ach_credit_transfer"
require "./source_type_ach_debit"
require "./source_type_acss_debit"
require "./source_type_alipay"
require "./source_type_au_becs_debit"
require "./source_type_bancontact"
require "./source_type_card"
require "./source_type_card_present"
require "./source_type_eps"
require "./source_type_giropay"
require "./source_type_ideal"
require "./source_type_klarna"
require "./source_type_multibanco"
require "./source_type_p24"
require "./source_type_sepa_credit_transfer"
require "./source_type_sepa_debit"
require "./source_type_sofort"
require "./source_type_three_d_secure"
require "./source_type_wechat"
require "./token_card_networks"

module Stripe
  class PaymentSource
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    @[JSON::Field(key: "country", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property country : String? = nil
    MAX_LENGTH_FOR_COUNTRY = 5000

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [source]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("source")

    # The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [custom, express, none, standard, ach_credit_transfer, ach_debit, acss_debit, alipay, au_becs_debit, bancontact, card, card_present, eps, giropay, ideal, klarna, multibanco, p24, sepa_credit_transfer, sepa_debit, sofort, three_d_secure, wechat]."
    VALID_VALUES_FOR__TYPE  = String.static_array("custom", "express", "none", "standard", "ach_credit_transfer", "ach_debit", "acss_debit", "alipay", "au_becs_debit", "bancontact", "card", "card_present", "eps", "giropay", "ideal", "klarna", "multibanco", "p24", "sepa_credit_transfer", "sepa_debit", "sofort", "three_d_secure", "wechat")

    # The name of the person or business that owns the bank account.
    @[JSON::Field(key: "account_holder_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property account_holder_name : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_HOLDER_NAME = 5000

    # The type of entity that holds the account. This can be either `individual` or `company`.
    @[JSON::Field(key: "account_holder_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property account_holder_type : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_HOLDER_TYPE = 5000

    # The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property account_type : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_TYPE = 5000

    # Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
    @[JSON::Field(key: "bank_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property bank_name : String? = nil
    MAX_LENGTH_FOR_BANK_NAME = 5000

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property currency : String? = nil

    # Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.  *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
    @[JSON::Field(key: "fingerprint", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property fingerprint : String? = nil
    MAX_LENGTH_FOR_FINGERPRINT = 5000

    # The last four digits of the card.
    @[JSON::Field(key: "last4", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property last4 : String? = nil
    MAX_LENGTH_FOR_LAST4 = 5000

    # The routing transit number for the bank account.
    @[JSON::Field(key: "routing_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property routing_number : String? = nil
    MAX_LENGTH_FOR_ROUTING_NUMBER = 5000

    # The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    # City/District/Suburb/Town/Village.
    @[JSON::Field(key: "address_city", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_city : String? = nil
    MAX_LENGTH_FOR_ADDRESS_CITY = 5000

    # Billing address country, if provided when creating card.
    @[JSON::Field(key: "address_country", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_country : String? = nil
    MAX_LENGTH_FOR_ADDRESS_COUNTRY = 5000

    # Address line 1 (Street address/PO Box/Company name).
    @[JSON::Field(key: "address_line1", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_line1 : String? = nil
    MAX_LENGTH_FOR_ADDRESS_LINE1 = 5000

    # If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
    @[JSON::Field(key: "address_line1_check", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_line1_check : String? = nil
    MAX_LENGTH_FOR_ADDRESS_LINE1_CHECK = 5000

    # Address line 2 (Apartment/Suite/Unit/Building).
    @[JSON::Field(key: "address_line2", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_line2 : String? = nil
    MAX_LENGTH_FOR_ADDRESS_LINE2 = 5000

    # State/County/Province/Region.
    @[JSON::Field(key: "address_state", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_state : String? = nil
    MAX_LENGTH_FOR_ADDRESS_STATE = 5000

    # ZIP or postal code.
    @[JSON::Field(key: "address_zip", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_zip : String? = nil
    MAX_LENGTH_FOR_ADDRESS_ZIP = 5000

    # If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
    @[JSON::Field(key: "address_zip_check", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property address_zip_check : String? = nil
    MAX_LENGTH_FOR_ADDRESS_ZIP_CHECK = 5000

    # Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
    @[JSON::Field(key: "brand", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property brand : String? = nil
    MAX_LENGTH_FOR_BRAND = 5000

    # If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
    @[JSON::Field(key: "cvc_check", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property cvc_check : String? = nil
    MAX_LENGTH_FOR_CVC_CHECK = 5000

    # (For tokenized numbers only.) The last four digits of the device account number.
    @[JSON::Field(key: "dynamic_last4", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property dynamic_last4 : String? = nil
    MAX_LENGTH_FOR_DYNAMIC_LAST4 = 5000

    # Two-digit number representing the card's expiration month.
    @[JSON::Field(key: "exp_month", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property exp_month : Int64? = nil

    # Four-digit number representing the card's expiration year.
    @[JSON::Field(key: "exp_year", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property exp_year : Int64? = nil

    # Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    @[JSON::Field(key: "funding", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property funding : String? = nil
    MAX_LENGTH_FOR_FUNDING = 5000

    # Cardholder name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
    @[JSON::Field(key: "tokenization_method", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property tokenization_method : String? = nil
    MAX_LENGTH_FOR_TOKENIZATION_METHOD = 5000

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property amount : Int64? = nil

    # The client secret of the source. Used for client-side retrieval using a publishable key.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property client_secret : String? = nil
    MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    # The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
    @[JSON::Field(key: "flow", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property flow : String? = nil
    MAX_LENGTH_FOR_FLOW = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    @[JSON::Field(key: "owner", type: Stripe::SourceOwner?, default: nil, required: true, nullable: false, emit_null: false)]
    property owner : Stripe::SourceOwner? = nil

    # Extra information about a source. This will appear on your customer's statement every time you charge the source.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    @[JSON::Field(key: "usage", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property usage : String? = nil
    MAX_LENGTH_FOR_USAGE = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "business_profile", type: Stripe::AccountBusinessProfile?, default: nil, required: false, nullable: false, emit_null: false)]
    property business_profile : Stripe::AccountBusinessProfile? = nil

    # The business type. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property is only returned for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
    @[JSON::Field(key: "business_type", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: business_type.nil? && !business_type_present?)]
    property business_type : String? = nil
    ERROR_MESSAGE_FOR_BUSINESS_TYPE = "invalid value for \"business_type\", must be one of [company, government_entity, individual, non_profit]."
    VALID_VALUES_FOR_BUSINESS_TYPE  = String.static_array("company", "government_entity", "individual", "non_profit")

    @[JSON::Field(ignore: true)]
    property? business_type_present : Bool = false

    @[JSON::Field(key: "capabilities", type: Stripe::AccountCapabilities?, default: nil, required: false, nullable: false, emit_null: false)]
    property capabilities : Stripe::AccountCapabilities? = nil

    # Whether the account can create live charges.
    @[JSON::Field(key: "charges_enabled", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    property charges_enabled : Bool? = nil

    @[JSON::Field(key: "company", type: Stripe::LegalEntityCompany?, default: nil, required: false, nullable: false, emit_null: false)]
    property company : Stripe::LegalEntityCompany? = nil

    @[JSON::Field(key: "controller", type: Stripe::AccountUnificationAccountController?, default: nil, required: false, nullable: false, emit_null: false)]
    property controller : Stripe::AccountUnificationAccountController? = nil

    # Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
    @[JSON::Field(key: "default_currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property default_currency : String? = nil
    MAX_LENGTH_FOR_DEFAULT_CURRENCY = 5000

    # Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](/connect/onboarding) to finish submitting account details.
    @[JSON::Field(key: "details_submitted", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    property details_submitted : Bool? = nil

    # An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform.
    @[JSON::Field(key: "email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: email.nil? && !email_present?)]
    property email : String? = nil
    MAX_LENGTH_FOR_EMAIL = 5000

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    @[JSON::Field(key: "external_accounts", type: Stripe::ExternalAccountList?, default: nil, required: false, nullable: false, emit_null: false)]
    property external_accounts : Stripe::ExternalAccountList? = nil

    @[JSON::Field(key: "future_requirements", type: Stripe::ExternalAccountRequirements?, default: nil, required: false, nullable: false, emit_null: false)]
    property future_requirements : Stripe::ExternalAccountRequirements? = nil

    @[JSON::Field(key: "individual", type: Stripe::Person?, default: nil, required: false, nullable: false, emit_null: false)]
    property individual : Stripe::Person? = nil

    # Whether Stripe can send payouts to this account.
    @[JSON::Field(key: "payouts_enabled", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    property payouts_enabled : Bool? = nil

    @[JSON::Field(key: "requirements", type: Stripe::ExternalAccountRequirements?, default: nil, required: false, nullable: false, emit_null: false)]
    property requirements : Stripe::ExternalAccountRequirements? = nil

    @[JSON::Field(key: "settings", type: Stripe::AccountSettings?, default: nil, required: false, nullable: false, emit_null: false)]
    property settings : Stripe::AccountSettings? = nil

    @[JSON::Field(key: "tos_acceptance", type: Stripe::AccountTosAcceptance?, default: nil, required: false, nullable: false, emit_null: false)]
    property tos_acceptance : Stripe::AccountTosAcceptance? = nil

    @[JSON::Field(key: "account", type: Stripe::CardAccount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account.nil? && !account_present?)]
    property account : Stripe::CardAccount? = nil

    @[JSON::Field(ignore: true)]
    property? account_present : Bool = false

    # A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
    @[JSON::Field(key: "available_payout_methods", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: available_payout_methods.nil? && !available_payout_methods_present?)]
    property available_payout_methods : Array(String)? = nil
    ERROR_MESSAGE_FOR_AVAILABLE_PAYOUT_METHODS = "invalid value for \"available_payout_methods\", must be one of [instant, standard]."
    VALID_VALUES_FOR_AVAILABLE_PAYOUT_METHODS  = String.static_array("instant", "standard")

    @[JSON::Field(ignore: true)]
    property? available_payout_methods_present : Bool = false

    # The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property customer : String? = nil
    MAX_LENGTH_FOR_CUSTOMER = 5000

    # Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
    @[JSON::Field(key: "default_for_currency", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_for_currency.nil? && !default_for_currency_present?)]
    property default_for_currency : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? default_for_currency_present : Bool = false

    # A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "iin", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property iin : String? = nil
    MAX_LENGTH_FOR_IIN = 5000

    # The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "issuer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property issuer : String? = nil
    MAX_LENGTH_FOR_ISSUER = 5000

    @[JSON::Field(key: "networks", type: Stripe::TokenCardNetworks?, default: nil, required: false, nullable: false, emit_null: false)]
    property networks : Stripe::TokenCardNetworks? = nil

    @[JSON::Field(key: "ach_credit_transfer", type: Stripe::SourceTypeAchCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    property ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer? = nil

    @[JSON::Field(key: "ach_debit", type: Stripe::SourceTypeAchDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    property ach_debit : Stripe::SourceTypeAchDebit? = nil

    @[JSON::Field(key: "acss_debit", type: Stripe::SourceTypeAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    property acss_debit : Stripe::SourceTypeAcssDebit? = nil

    @[JSON::Field(key: "alipay", type: Stripe::SourceTypeAlipay?, default: nil, required: false, nullable: false, emit_null: false)]
    property alipay : Stripe::SourceTypeAlipay? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::SourceTypeAuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    property au_becs_debit : Stripe::SourceTypeAuBecsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::SourceTypeBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    property bancontact : Stripe::SourceTypeBancontact? = nil

    @[JSON::Field(key: "card", type: Stripe::SourceTypeCard?, default: nil, required: false, nullable: false, emit_null: false)]
    property card : Stripe::SourceTypeCard? = nil

    @[JSON::Field(key: "card_present", type: Stripe::SourceTypeCardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    property card_present2 : Stripe::SourceTypeCardPresent? = nil

    @[JSON::Field(key: "code_verification", type: Stripe::SourceCodeVerificationFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    property code_verification : Stripe::SourceCodeVerificationFlow? = nil

    @[JSON::Field(key: "eps", type: Stripe::SourceTypeEps?, default: nil, required: false, nullable: false, emit_null: false)]
    property eps : Stripe::SourceTypeEps? = nil

    @[JSON::Field(key: "giropay", type: Stripe::SourceTypeGiropay?, default: nil, required: false, nullable: false, emit_null: false)]
    property giropay : Stripe::SourceTypeGiropay? = nil

    @[JSON::Field(key: "ideal", type: Stripe::SourceTypeIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    property ideal : Stripe::SourceTypeIdeal? = nil

    @[JSON::Field(key: "klarna", type: Stripe::SourceTypeKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    property klarna : Stripe::SourceTypeKlarna? = nil

    @[JSON::Field(key: "multibanco", type: Stripe::SourceTypeMultibanco?, default: nil, required: false, nullable: false, emit_null: false)]
    property multibanco : Stripe::SourceTypeMultibanco? = nil

    @[JSON::Field(key: "p24", type: Stripe::SourceTypeP24?, default: nil, required: false, nullable: false, emit_null: false)]
    property p24 : Stripe::SourceTypeP24? = nil

    @[JSON::Field(key: "receiver", type: Stripe::SourceReceiverFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    property receiver : Stripe::SourceReceiverFlow? = nil

    @[JSON::Field(key: "redirect", type: Stripe::SourceRedirectFlow?, default: nil, required: false, nullable: false, emit_null: false)]
    property redirect : Stripe::SourceRedirectFlow? = nil

    @[JSON::Field(key: "sepa_credit_transfer", type: Stripe::SourceTypeSepaCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    property sepa_credit_transfer : Stripe::SourceTypeSepaCreditTransfer? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::SourceTypeSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    property sepa_debit : Stripe::SourceTypeSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::SourceTypeSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    property sofort : Stripe::SourceTypeSofort? = nil

    @[JSON::Field(key: "source_order", type: Stripe::SourceOrder?, default: nil, required: false, nullable: false, emit_null: false)]
    property source_order : Stripe::SourceOrder? = nil

    @[JSON::Field(key: "three_d_secure", type: Stripe::SourceTypeThreeDSecure?, default: nil, required: false, nullable: false, emit_null: false)]
    property three_d_secure : Stripe::SourceTypeThreeDSecure? = nil

    @[JSON::Field(key: "wechat", type: Stripe::SourceTypeWechat?, default: nil, required: false, nullable: false, emit_null: false)]
    property wechat : Stripe::SourceTypeWechat? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Account,
        Stripe::BankAccount,
        Stripe::Card,
        Stripe::Source,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @country : String? = nil,
      @created : Int64? = nil,
      @id : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @_type : String? = nil,
      @account_holder_name : String? = nil,
      @account_holder_type : String? = nil,
      @account_type : String? = nil,
      @bank_name : String? = nil,
      @currency : String? = nil,
      @fingerprint : String? = nil,
      @last4 : String? = nil,
      @routing_number : String? = nil,
      @status : String? = nil,
      @address_city : String? = nil,
      @address_country : String? = nil,
      @address_line1 : String? = nil,
      @address_line1_check : String? = nil,
      @address_line2 : String? = nil,
      @address_state : String? = nil,
      @address_zip : String? = nil,
      @address_zip_check : String? = nil,
      @brand : String? = nil,
      @cvc_check : String? = nil,
      @dynamic_last4 : String? = nil,
      @exp_month : Int64? = nil,
      @exp_year : Int64? = nil,
      @funding : String? = nil,
      @name : String? = nil,
      @tokenization_method : String? = nil,
      @amount : Int64? = nil,
      @client_secret : String? = nil,
      @flow : String? = nil,
      @livemode : Bool? = nil,
      @owner : Stripe::SourceOwner? = nil,
      @statement_descriptor : String? = nil,
      @usage : String? = nil,
      # Optional properties
      @business_profile : Stripe::AccountBusinessProfile? = nil,
      @business_type : String? = nil,
      @capabilities : Stripe::AccountCapabilities? = nil,
      @charges_enabled : Bool? = nil,
      @company : Stripe::LegalEntityCompany? = nil,
      @controller : Stripe::AccountUnificationAccountController? = nil,
      @default_currency : String? = nil,
      @details_submitted : Bool? = nil,
      @email : String? = nil,
      @external_accounts : Stripe::ExternalAccountList? = nil,
      @future_requirements : Stripe::ExternalAccountRequirements? = nil,
      @individual : Stripe::Person? = nil,
      @payouts_enabled : Bool? = nil,
      @requirements : Stripe::ExternalAccountRequirements? = nil,
      @settings : Stripe::AccountSettings? = nil,
      @tos_acceptance : Stripe::AccountTosAcceptance? = nil,
      @account : Stripe::CardAccount? = nil,
      @available_payout_methods : Array(String)? = nil,
      @customer : String? = nil,
      @default_for_currency : Bool? = nil,
      @description : String? = nil,
      @iin : String? = nil,
      @issuer : String? = nil,
      @networks : Stripe::TokenCardNetworks? = nil,
      @ach_credit_transfer : Stripe::SourceTypeAchCreditTransfer? = nil,
      @ach_debit : Stripe::SourceTypeAchDebit? = nil,
      @acss_debit : Stripe::SourceTypeAcssDebit? = nil,
      @alipay : Stripe::SourceTypeAlipay? = nil,
      @au_becs_debit : Stripe::SourceTypeAuBecsDebit? = nil,
      @bancontact : Stripe::SourceTypeBancontact? = nil,
      @card : Stripe::SourceTypeCard? = nil,
      @card_present2 : Stripe::SourceTypeCardPresent? = nil,
      @code_verification : Stripe::SourceCodeVerificationFlow? = nil,
      @eps : Stripe::SourceTypeEps? = nil,
      @giropay : Stripe::SourceTypeGiropay? = nil,
      @ideal : Stripe::SourceTypeIdeal? = nil,
      @klarna : Stripe::SourceTypeKlarna? = nil,
      @multibanco : Stripe::SourceTypeMultibanco? = nil,
      @p24 : Stripe::SourceTypeP24? = nil,
      @receiver : Stripe::SourceReceiverFlow? = nil,
      @redirect : Stripe::SourceRedirectFlow? = nil,
      @sepa_credit_transfer : Stripe::SourceTypeSepaCreditTransfer? = nil,
      @sepa_debit : Stripe::SourceTypeSepaDebit? = nil,
      @sofort : Stripe::SourceTypeSofort? = nil,
      @source_order : Stripe::SourceOrder? = nil,
      @three_d_secure : Stripe::SourceTypeThreeDSecure? = nil,
      @wechat : Stripe::SourceTypeWechat? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@country, @created, @id, @metadata, @object, @_type, @account_holder_name, @account_holder_type, @account_type, @bank_name, @currency, @fingerprint, @last4, @routing_number, @status, @address_city, @address_country, @address_line1, @address_line1_check, @address_line2, @address_state, @address_zip, @address_zip_check, @brand, @cvc_check, @dynamic_last4, @exp_month, @exp_year, @funding, @name, @tokenization_method, @amount, @client_secret, @flow, @livemode, @owner, @statement_descriptor, @usage, @business_profile, @business_type, @business_type_present, @capabilities, @charges_enabled, @company, @controller, @default_currency, @details_submitted, @email, @email_present, @external_accounts, @future_requirements, @individual, @payouts_enabled, @requirements, @settings, @tos_acceptance, @account, @account_present, @available_payout_methods, @available_payout_methods_present, @customer, @default_for_currency, @default_for_currency_present, @description, @iin, @issuer, @networks, @ach_credit_transfer, @ach_debit, @acss_debit, @alipay, @au_becs_debit, @bancontact, @card, @card_present2, @code_verification, @eps, @giropay, @ideal, @klarna, @multibanco, @p24, @receiver, @redirect, @sepa_credit_transfer, @sepa_debit, @sofort, @source_order, @three_d_secure, @wechat)
  end
end
