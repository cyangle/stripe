#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostAccountsAccountExternalAccountsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Please refer to full [documentation](https://stripe.com/docs/api) instead.
    @[JSON::Field(key: "external_account", type: String)]
    getter external_account : String

    # Optional properties
    # When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.
    @[JSON::Field(key: "default_for_currency", type: Bool?, presence: true, ignore_serialize: default_for_currency.nil? && !default_for_currency_present?)]
    property default_for_currency : Bool?

    @[JSON::Field(ignore: true)]
    property? default_for_currency_present : Bool = false

    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @external_account : String, @default_for_currency : Bool? = nil, @expand : Array(String)? = nil, @metadata : Hash(String, String)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @external_account.to_s.size > 5000
        invalid_properties.push("invalid value for \"external_account\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @external_account.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] external_account Value to be assigned
    def external_account=(external_account)
      if external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\", the character length must be smaller than or equal to 5000.")
      end

      @external_account = external_account
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        default_for_currency == o.default_for_currency &&
        expand == o.expand &&
        external_account == o.external_account &&
        metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@default_for_currency, @expand, @external_account, @metadata)
  end
end
