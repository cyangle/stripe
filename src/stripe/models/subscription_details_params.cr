#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./subscription_details_params_billing_cycle_anchor"
require "./subscription_details_params_cancel_at"
require "./subscription_details_params_default_tax_rates"
require "./subscription_details_params_trial_end"
require "./subscription_item_update_params"

module Stripe
  class SubscriptionDetailsParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "billing_cycle_anchor", type: Stripe::SubscriptionDetailsParamsBillingCycleAnchor?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_cycle_anchor : Stripe::SubscriptionDetailsParamsBillingCycleAnchor? = nil

    @[JSON::Field(key: "cancel_at", type: Stripe::SubscriptionDetailsParamsCancelAt?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cancel_at : Stripe::SubscriptionDetailsParamsCancelAt? = nil

    # Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
    @[JSON::Field(key: "cancel_at_period_end", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cancel_at_period_end : Bool? = nil

    # This simulates the subscription being canceled or expired immediately.
    @[JSON::Field(key: "cancel_now", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cancel_now : Bool? = nil

    @[JSON::Field(key: "default_tax_rates", type: Stripe::SubscriptionDetailsParamsDefaultTaxRates?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_tax_rates : Stripe::SubscriptionDetailsParamsDefaultTaxRates? = nil

    # A list of up to 20 subscription items, each with an attached price.
    @[JSON::Field(key: "items", type: Array(Stripe::SubscriptionItemUpdateParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter items : Array(Stripe::SubscriptionItemUpdateParams)? = nil

    # Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
    @[JSON::Field(key: "proration_behavior", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter proration_behavior : String? = nil
    ERROR_MESSAGE_FOR_PRORATION_BEHAVIOR = "invalid value for \"proration_behavior\", must be one of [always_invoice, create_prorations, none]."
    VALID_VALUES_FOR_PRORATION_BEHAVIOR  = String.static_array("always_invoice", "create_prorations", "none")

    # If previewing an update to a subscription, and doing proration, `subscription_details.proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_details.items`, or `subscription_details.trial_end` are required. Also, `subscription_details.proration_behavior` cannot be set to 'none'.
    @[JSON::Field(key: "proration_date", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter proration_date : Int64? = nil

    # For paused subscriptions, setting `subscription_details.resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed.
    @[JSON::Field(key: "resume_at", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter resume_at : String? = nil
    MAX_LENGTH_FOR_RESUME_AT    = 5000
    ERROR_MESSAGE_FOR_RESUME_AT = "invalid value for \"resume_at\", must be one of [now]."
    VALID_VALUES_FOR_RESUME_AT  = String.static_array("now")

    # Date a subscription is intended to start (can be future or past).
    @[JSON::Field(key: "start_date", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter start_date : Int64? = nil

    @[JSON::Field(key: "trial_end", type: Stripe::SubscriptionDetailsParamsTrialEnd?, default: nil, required: false, nullable: false, emit_null: false)]
    getter trial_end : Stripe::SubscriptionDetailsParamsTrialEnd? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @billing_cycle_anchor : Stripe::SubscriptionDetailsParamsBillingCycleAnchor? = nil,
      @cancel_at : Stripe::SubscriptionDetailsParamsCancelAt? = nil,
      @cancel_at_period_end : Bool? = nil,
      @cancel_now : Bool? = nil,
      @default_tax_rates : Stripe::SubscriptionDetailsParamsDefaultTaxRates? = nil,
      @items : Array(Stripe::SubscriptionItemUpdateParams)? = nil,
      @proration_behavior : String? = nil,
      @proration_date : Int64? = nil,
      @resume_at : String? = nil,
      @start_date : Int64? = nil,
      @trial_end : Stripe::SubscriptionDetailsParamsTrialEnd? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_billing_cycle_anchor = @billing_cycle_anchor).nil?
        invalid_properties.concat(_billing_cycle_anchor.list_invalid_properties_for("billing_cycle_anchor")) if _billing_cycle_anchor.is_a?(OpenApi::Validatable)
      end
      unless (_cancel_at = @cancel_at).nil?
        invalid_properties.concat(_cancel_at.list_invalid_properties_for("cancel_at")) if _cancel_at.is_a?(OpenApi::Validatable)
      end

      unless (_default_tax_rates = @default_tax_rates).nil?
        invalid_properties.concat(_default_tax_rates.list_invalid_properties_for("default_tax_rates")) if _default_tax_rates.is_a?(OpenApi::Validatable)
      end
      unless (_items = @items).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "items", container: _items)) if _items.is_a?(Array)
      end
      unless (_proration_behavior = @proration_behavior).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PRORATION_BEHAVIOR) unless OpenApi::EnumValidator.valid?(_proration_behavior, VALID_VALUES_FOR_PRORATION_BEHAVIOR)
      end

      unless (_resume_at = @resume_at).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_RESUME_AT) unless OpenApi::EnumValidator.valid?(_resume_at, VALID_VALUES_FOR_RESUME_AT)
      end

      unless (_trial_end = @trial_end).nil?
        invalid_properties.concat(_trial_end.list_invalid_properties_for("trial_end")) if _trial_end.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_billing_cycle_anchor = @billing_cycle_anchor).nil?
        return false if _billing_cycle_anchor.is_a?(OpenApi::Validatable) && !_billing_cycle_anchor.valid?
      end

      unless (_cancel_at = @cancel_at).nil?
        return false if _cancel_at.is_a?(OpenApi::Validatable) && !_cancel_at.valid?
      end

      unless (_default_tax_rates = @default_tax_rates).nil?
        return false if _default_tax_rates.is_a?(OpenApi::Validatable) && !_default_tax_rates.valid?
      end

      unless (_items = @items).nil?
        return false if _items.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _items)
      end

      unless (_proration_behavior = @proration_behavior).nil?
        return false unless OpenApi::EnumValidator.valid?(_proration_behavior, VALID_VALUES_FOR_PRORATION_BEHAVIOR)
      end

      unless (_resume_at = @resume_at).nil?
        return false unless OpenApi::EnumValidator.valid?(_resume_at, VALID_VALUES_FOR_RESUME_AT)
      end

      unless (_trial_end = @trial_end).nil?
        return false if _trial_end.is_a?(OpenApi::Validatable) && !_trial_end.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(new_value : Stripe::SubscriptionDetailsParamsBillingCycleAnchor?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @billing_cycle_anchor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_at Object to be assigned
    def cancel_at=(new_value : Stripe::SubscriptionDetailsParamsCancelAt?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cancel_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_at_period_end Object to be assigned
    def cancel_at_period_end=(new_value : Bool?)
      @cancel_at_period_end = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_now Object to be assigned
    def cancel_now=(new_value : Bool?)
      @cancel_now = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_tax_rates Object to be assigned
    def default_tax_rates=(new_value : Stripe::SubscriptionDetailsParamsDefaultTaxRates?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @default_tax_rates = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] items Object to be assigned
    def items=(new_value : Array(Stripe::SubscriptionItemUpdateParams)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @items = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_behavior Object to be assigned
    def proration_behavior=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("proration_behavior", new_value, VALID_VALUES_FOR_PRORATION_BEHAVIOR)
      end

      @proration_behavior = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_date Object to be assigned
    def proration_date=(new_value : Int64?)
      @proration_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resume_at Object to be assigned
    def resume_at=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("resume_at", new_value, VALID_VALUES_FOR_RESUME_AT)
      end

      @resume_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(new_value : Int64?)
      @start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_end Object to be assigned
    def trial_end=(new_value : Stripe::SubscriptionDetailsParamsTrialEnd?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @trial_end = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@billing_cycle_anchor, @cancel_at, @cancel_at_period_end, @cancel_now, @default_tax_rates, @items, @proration_behavior, @proration_date, @resume_at, @start_date, @trial_end)
  end
end
