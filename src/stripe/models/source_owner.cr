#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class SourceOwner
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "address", type: Stripe::SourceOwnerAddress?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address.nil? && !address_present?)]
    getter address : Stripe::SourceOwnerAddress? = nil

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    # Owner's email address.
    @[JSON::Field(key: "email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: email.nil? && !email_present?)]
    getter email : String? = nil
    MAX_LENGTH_FOR_EMAIL = 5000

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    # Owner's full name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # Owner's phone number (including extension).
    @[JSON::Field(key: "phone", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: phone.nil? && !phone_present?)]
    getter phone : String? = nil
    MAX_LENGTH_FOR_PHONE = 5000

    @[JSON::Field(ignore: true)]
    property? phone_present : Bool = false

    @[JSON::Field(key: "verified_address", type: Stripe::SourceOwnerVerifiedAddress?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: verified_address.nil? && !verified_address_present?)]
    getter verified_address : Stripe::SourceOwnerVerifiedAddress? = nil

    @[JSON::Field(ignore: true)]
    property? verified_address_present : Bool = false

    # Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    @[JSON::Field(key: "verified_email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: verified_email.nil? && !verified_email_present?)]
    getter verified_email : String? = nil
    MAX_LENGTH_FOR_VERIFIED_EMAIL = 5000

    @[JSON::Field(ignore: true)]
    property? verified_email_present : Bool = false

    # Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    @[JSON::Field(key: "verified_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: verified_name.nil? && !verified_name_present?)]
    getter verified_name : String? = nil
    MAX_LENGTH_FOR_VERIFIED_NAME = 5000

    @[JSON::Field(ignore: true)]
    property? verified_name_present : Bool = false

    # Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    @[JSON::Field(key: "verified_phone", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: verified_phone.nil? && !verified_phone_present?)]
    getter verified_phone : String? = nil
    MAX_LENGTH_FOR_VERIFIED_PHONE = 5000

    @[JSON::Field(ignore: true)]
    property? verified_phone_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @address : Stripe::SourceOwnerAddress? = nil,
      @email : String? = nil,
      @name : String? = nil,
      @phone : String? = nil,
      @verified_address : Stripe::SourceOwnerVerifiedAddress? = nil,
      @verified_email : String? = nil,
      @verified_name : String? = nil,
      @verified_phone : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _address = @address
        invalid_properties.concat(_address.list_invalid_properties_for("address")) if _address.is_a?(OpenApi::Validatable)
      end
      if _email = @email
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("email", _email.to_s.size, MAX_LENGTH_FOR_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      if _name = @name
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      if _phone = @phone
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("phone", _phone.to_s.size, MAX_LENGTH_FOR_PHONE)
          invalid_properties.push(max_length_error)
        end
      end
      if _verified_address = @verified_address
        invalid_properties.concat(_verified_address.list_invalid_properties_for("verified_address")) if _verified_address.is_a?(OpenApi::Validatable)
      end
      if _verified_email = @verified_email
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("verified_email", _verified_email.to_s.size, MAX_LENGTH_FOR_VERIFIED_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      if _verified_name = @verified_name
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("verified_name", _verified_name.to_s.size, MAX_LENGTH_FOR_VERIFIED_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      if _verified_phone = @verified_phone
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("verified_phone", _verified_phone.to_s.size, MAX_LENGTH_FOR_VERIFIED_PHONE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _address = @address
        return false if _address.is_a?(OpenApi::Validatable) && !_address.valid?
      end

      if _email = @email
        return false if _email.to_s.size > MAX_LENGTH_FOR_EMAIL
      end

      if _name = @name
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      if _phone = @phone
        return false if _phone.to_s.size > MAX_LENGTH_FOR_PHONE
      end

      if _verified_address = @verified_address
        return false if _verified_address.is_a?(OpenApi::Validatable) && !_verified_address.valid?
      end

      if _verified_email = @verified_email
        return false if _verified_email.to_s.size > MAX_LENGTH_FOR_VERIFIED_EMAIL
      end

      if _verified_name = @verified_name
        return false if _verified_name.to_s.size > MAX_LENGTH_FOR_VERIFIED_NAME
      end

      if _verified_phone = @verified_phone
        return false if _verified_phone.to_s.size > MAX_LENGTH_FOR_VERIFIED_PHONE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(address : Stripe::SourceOwnerAddress?)
      if address.nil?
        return @address = nil
      end
      _address = address.not_nil!
      _address.validate if _address.is_a?(OpenApi::Validatable)
      @address = _address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(email : String?)
      if email.nil?
        return @email = nil
      end
      _email = email.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("email", _email.to_s.size, MAX_LENGTH_FOR_EMAIL)
      @email = _email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        return @name = nil
      end
      _name = name.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
      @name = _name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone Object to be assigned
    def phone=(phone : String?)
      if phone.nil?
        return @phone = nil
      end
      _phone = phone.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("phone", _phone.to_s.size, MAX_LENGTH_FOR_PHONE)
      @phone = _phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verified_address Object to be assigned
    def verified_address=(verified_address : Stripe::SourceOwnerVerifiedAddress?)
      if verified_address.nil?
        return @verified_address = nil
      end
      _verified_address = verified_address.not_nil!
      _verified_address.validate if _verified_address.is_a?(OpenApi::Validatable)
      @verified_address = _verified_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verified_email Object to be assigned
    def verified_email=(verified_email : String?)
      if verified_email.nil?
        return @verified_email = nil
      end
      _verified_email = verified_email.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("verified_email", _verified_email.to_s.size, MAX_LENGTH_FOR_VERIFIED_EMAIL)
      @verified_email = _verified_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verified_name Object to be assigned
    def verified_name=(verified_name : String?)
      if verified_name.nil?
        return @verified_name = nil
      end
      _verified_name = verified_name.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("verified_name", _verified_name.to_s.size, MAX_LENGTH_FOR_VERIFIED_NAME)
      @verified_name = _verified_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verified_phone Object to be assigned
    def verified_phone=(verified_phone : String?)
      if verified_phone.nil?
        return @verified_phone = nil
      end
      _verified_phone = verified_phone.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("verified_phone", _verified_phone.to_s.size, MAX_LENGTH_FOR_VERIFIED_PHONE)
      @verified_phone = _verified_phone
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address, @address_present, @email, @email_present, @name, @name_present, @phone, @phone_present, @verified_address, @verified_address_present, @verified_email, @verified_email_present, @verified_name, @verified_name_present, @verified_phone, @verified_phone_present)
  end
end
