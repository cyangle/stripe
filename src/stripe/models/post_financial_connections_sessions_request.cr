#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostFinancialConnectionsSessionsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "account_holder", type: Stripe::AccountholderParams1?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_holder : Stripe::AccountholderParams1? = nil

    # List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    @[JSON::Field(key: "permissions", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter permissions : Array(String)? = nil

    ENUM_VALIDATOR_FOR_PERMISSIONS = EnumValidator.new("permissions", "Array(String)", ["balances", "ownership", "payment_method", "transactions"])

    # Optional properties

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    @[JSON::Field(key: "filters", type: Stripe::FiltersParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter filters : Stripe::FiltersParams? = nil

    # For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
    @[JSON::Field(key: "return_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter return_url : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_holder : Stripe::AccountholderParams1? = nil,
      @permissions : Array(String)? = nil,
      # Optional properties
      @expand : Array(String)? = nil,
      @filters : Stripe::FiltersParams? = nil,
      @return_url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"account_holder\" is required and cannot be null") if @account_holder.nil?
      # This is a model account_holder : Stripe::AccountholderParams1?

      invalid_properties.push(ENUM_VALIDATOR_FOR_PERMISSIONS.error_message) unless ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid?(@permissions, false)
      # This is a model filters : Stripe::FiltersParams?
      if _return_url = @return_url
        if _return_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"return_url\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account_holder.nil?
      return false unless ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid?(@permissions, false)
      if _return_url = @return_url
        return false if _return_url.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_holder Object to be assigned
    def account_holder=(account_holder : Stripe::AccountholderParams1?)
      if account_holder.nil?
        raise ArgumentError.new("\"account_holder\" is required and cannot be null")
      end
      @account_holder = account_holder
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permissions Object to be assigned
    def permissions=(permissions : Array(String)?)
      if permissions.nil?
        raise ArgumentError.new("\"permissions\" is required and cannot be null")
      end
      _permissions = permissions.not_nil!
      ENUM_VALIDATOR_FOR_PERMISSIONS.all_valid!(_permissions)
      @permissions = permissions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filters Object to be assigned
    def filters=(filters : Stripe::FiltersParams?)
      if filters.nil?
        return @filters = nil
      end
      @filters = filters
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_url Object to be assigned
    def return_url=(return_url : String?)
      if return_url.nil?
        return @return_url = nil
      end
      _return_url = return_url.not_nil!
      if _return_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"return_url\", the character length must be smaller than or equal to 5000.")
      end

      @return_url = return_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_holder, @permissions, @expand, @filters, @return_url)
  end
end
