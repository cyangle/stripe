#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_flows_private_payment_methods_alipay_details"
require "./payment_method_details_ach_credit_transfer"
require "./payment_method_details_ach_debit"
require "./payment_method_details_acss_debit"
require "./payment_method_details_affirm"
require "./payment_method_details_afterpay_clearpay"
require "./payment_method_details_au_becs_debit"
require "./payment_method_details_bacs_debit"
require "./payment_method_details_bancontact"
require "./payment_method_details_blik"
require "./payment_method_details_boleto"
require "./payment_method_details_card"
require "./payment_method_details_card_present"
require "./payment_method_details_cashapp"
require "./payment_method_details_eps"
require "./payment_method_details_fpx"
require "./payment_method_details_giropay"
require "./payment_method_details_grabpay"
require "./payment_method_details_ideal"
require "./payment_method_details_interac_present"
require "./payment_method_details_klarna"
require "./payment_method_details_konbini"
require "./payment_method_details_link"
require "./payment_method_details_mobilepay"
require "./payment_method_details_multibanco"
require "./payment_method_details_oxxo"
require "./payment_method_details_p24"
require "./payment_method_details_paynow"
require "./payment_method_details_paypal"
require "./payment_method_details_pix"
require "./payment_method_details_promptpay"
require "./payment_method_details_sepa_credit_transfer"
require "./payment_method_details_sepa_debit"
require "./payment_method_details_sofort"
require "./payment_method_details_swish"
require "./payment_method_details_us_bank_account"
require "./payment_method_details_wechat_pay"

module Stripe
  #
  class PaymentMethodDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`. An additional hash is included on `payment_method_details` with a name matching this value. It contains information specific to the payment method.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    MAX_LENGTH_FOR__TYPE = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "ach_credit_transfer", type: Stripe::PaymentMethodDetailsAchCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer? = nil

    @[JSON::Field(key: "ach_debit", type: Stripe::PaymentMethodDetailsAchDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_debit : Stripe::PaymentMethodDetailsAchDebit? = nil

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentMethodDetailsAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentMethodDetailsAcssDebit? = nil

    @[JSON::Field(key: "affirm", type: Stripe::PaymentMethodDetailsAffirm?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm : Stripe::PaymentMethodDetailsAffirm? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::PaymentMethodDetailsAfterpayClearpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay? = nil

    @[JSON::Field(key: "alipay", type: Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails? = nil

    #
    @[JSON::Field(key: "amazon_pay", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amazon_pay : JSON::Any? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::PaymentMethodDetailsAuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit? = nil

    @[JSON::Field(key: "bacs_debit", type: Stripe::PaymentMethodDetailsBacsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit : Stripe::PaymentMethodDetailsBacsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentMethodDetailsBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentMethodDetailsBancontact? = nil

    @[JSON::Field(key: "blik", type: Stripe::PaymentMethodDetailsBlik?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik : Stripe::PaymentMethodDetailsBlik? = nil

    @[JSON::Field(key: "boleto", type: Stripe::PaymentMethodDetailsBoleto?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto : Stripe::PaymentMethodDetailsBoleto? = nil

    @[JSON::Field(key: "card", type: Stripe::PaymentMethodDetailsCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PaymentMethodDetailsCard? = nil

    @[JSON::Field(key: "card_present", type: Stripe::PaymentMethodDetailsCardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::PaymentMethodDetailsCardPresent? = nil

    @[JSON::Field(key: "cashapp", type: Stripe::PaymentMethodDetailsCashapp?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cashapp : Stripe::PaymentMethodDetailsCashapp? = nil

    #
    @[JSON::Field(key: "customer_balance", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : JSON::Any? = nil

    @[JSON::Field(key: "eps", type: Stripe::PaymentMethodDetailsEps?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::PaymentMethodDetailsEps? = nil

    @[JSON::Field(key: "fpx", type: Stripe::PaymentMethodDetailsFpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx : Stripe::PaymentMethodDetailsFpx? = nil

    @[JSON::Field(key: "giropay", type: Stripe::PaymentMethodDetailsGiropay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::PaymentMethodDetailsGiropay? = nil

    @[JSON::Field(key: "grabpay", type: Stripe::PaymentMethodDetailsGrabpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay : Stripe::PaymentMethodDetailsGrabpay? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentMethodDetailsIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentMethodDetailsIdeal? = nil

    @[JSON::Field(key: "interac_present", type: Stripe::PaymentMethodDetailsInteracPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interac_present : Stripe::PaymentMethodDetailsInteracPresent? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentMethodDetailsKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentMethodDetailsKlarna? = nil

    @[JSON::Field(key: "konbini", type: Stripe::PaymentMethodDetailsKonbini?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : Stripe::PaymentMethodDetailsKonbini? = nil

    @[JSON::Field(key: "link", type: Stripe::PaymentMethodDetailsLink?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : Stripe::PaymentMethodDetailsLink? = nil

    @[JSON::Field(key: "mobilepay", type: Stripe::PaymentMethodDetailsMobilepay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mobilepay : Stripe::PaymentMethodDetailsMobilepay? = nil

    @[JSON::Field(key: "multibanco", type: Stripe::PaymentMethodDetailsMultibanco?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco : Stripe::PaymentMethodDetailsMultibanco? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::PaymentMethodDetailsOxxo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::PaymentMethodDetailsOxxo? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentMethodDetailsP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentMethodDetailsP24? = nil

    @[JSON::Field(key: "paynow", type: Stripe::PaymentMethodDetailsPaynow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow : Stripe::PaymentMethodDetailsPaynow? = nil

    @[JSON::Field(key: "paypal", type: Stripe::PaymentMethodDetailsPaypal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paypal : Stripe::PaymentMethodDetailsPaypal? = nil

    @[JSON::Field(key: "pix", type: Stripe::PaymentMethodDetailsPix?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix : Stripe::PaymentMethodDetailsPix? = nil

    @[JSON::Field(key: "promptpay", type: Stripe::PaymentMethodDetailsPromptpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay : Stripe::PaymentMethodDetailsPromptpay? = nil

    #
    @[JSON::Field(key: "revolut_pay", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter revolut_pay : JSON::Any? = nil

    @[JSON::Field(key: "sepa_credit_transfer", type: Stripe::PaymentMethodDetailsSepaCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_credit_transfer : Stripe::PaymentMethodDetailsSepaCreditTransfer? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::PaymentMethodDetailsSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::PaymentMethodDetailsSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::PaymentMethodDetailsSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentMethodDetailsSofort? = nil

    #
    @[JSON::Field(key: "stripe_account", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter stripe_account : JSON::Any? = nil

    @[JSON::Field(key: "swish", type: Stripe::PaymentMethodDetailsSwish?, default: nil, required: false, nullable: false, emit_null: false)]
    getter swish : Stripe::PaymentMethodDetailsSwish? = nil

    #
    @[JSON::Field(key: "twint", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter twint : JSON::Any? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::PaymentMethodDetailsUsBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount? = nil

    #
    @[JSON::Field(key: "wechat", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat : JSON::Any? = nil

    @[JSON::Field(key: "wechat_pay", type: Stripe::PaymentMethodDetailsWechatPay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::PaymentMethodDetailsWechatPay? = nil

    #
    @[JSON::Field(key: "zip", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter zip : JSON::Any? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer? = nil,
      @ach_debit : Stripe::PaymentMethodDetailsAchDebit? = nil,
      @acss_debit : Stripe::PaymentMethodDetailsAcssDebit? = nil,
      @affirm : Stripe::PaymentMethodDetailsAffirm? = nil,
      @afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay? = nil,
      @alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails? = nil,
      @amazon_pay : JSON::Any? = nil,
      @au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit? = nil,
      @bacs_debit : Stripe::PaymentMethodDetailsBacsDebit? = nil,
      @bancontact : Stripe::PaymentMethodDetailsBancontact? = nil,
      @blik : Stripe::PaymentMethodDetailsBlik? = nil,
      @boleto : Stripe::PaymentMethodDetailsBoleto? = nil,
      @card : Stripe::PaymentMethodDetailsCard? = nil,
      @card_present2 : Stripe::PaymentMethodDetailsCardPresent? = nil,
      @cashapp : Stripe::PaymentMethodDetailsCashapp? = nil,
      @customer_balance : JSON::Any? = nil,
      @eps : Stripe::PaymentMethodDetailsEps? = nil,
      @fpx : Stripe::PaymentMethodDetailsFpx? = nil,
      @giropay : Stripe::PaymentMethodDetailsGiropay? = nil,
      @grabpay : Stripe::PaymentMethodDetailsGrabpay? = nil,
      @ideal : Stripe::PaymentMethodDetailsIdeal? = nil,
      @interac_present : Stripe::PaymentMethodDetailsInteracPresent? = nil,
      @klarna : Stripe::PaymentMethodDetailsKlarna? = nil,
      @konbini : Stripe::PaymentMethodDetailsKonbini? = nil,
      @link : Stripe::PaymentMethodDetailsLink? = nil,
      @mobilepay : Stripe::PaymentMethodDetailsMobilepay? = nil,
      @multibanco : Stripe::PaymentMethodDetailsMultibanco? = nil,
      @oxxo : Stripe::PaymentMethodDetailsOxxo? = nil,
      @p24 : Stripe::PaymentMethodDetailsP24? = nil,
      @paynow : Stripe::PaymentMethodDetailsPaynow? = nil,
      @paypal : Stripe::PaymentMethodDetailsPaypal? = nil,
      @pix : Stripe::PaymentMethodDetailsPix? = nil,
      @promptpay : Stripe::PaymentMethodDetailsPromptpay? = nil,
      @revolut_pay : JSON::Any? = nil,
      @sepa_credit_transfer : Stripe::PaymentMethodDetailsSepaCreditTransfer? = nil,
      @sepa_debit : Stripe::PaymentMethodDetailsSepaDebit? = nil,
      @sofort : Stripe::PaymentMethodDetailsSofort? = nil,
      @stripe_account : JSON::Any? = nil,
      @swish : Stripe::PaymentMethodDetailsSwish? = nil,
      @twint : JSON::Any? = nil,
      @us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount? = nil,
      @wechat : JSON::Any? = nil,
      @wechat_pay : Stripe::PaymentMethodDetailsWechatPay? = nil,
      @zip : JSON::Any? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("_type", __type.to_s.size, MAX_LENGTH_FOR__TYPE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_ach_credit_transfer = @ach_credit_transfer).nil?
        invalid_properties.concat(_ach_credit_transfer.list_invalid_properties_for("ach_credit_transfer")) if _ach_credit_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_ach_debit = @ach_debit).nil?
        invalid_properties.concat(_ach_debit.list_invalid_properties_for("ach_debit")) if _ach_debit.is_a?(OpenApi::Validatable)
      end
      unless (_acss_debit = @acss_debit).nil?
        invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit")) if _acss_debit.is_a?(OpenApi::Validatable)
      end
      unless (_affirm = @affirm).nil?
        invalid_properties.concat(_affirm.list_invalid_properties_for("affirm")) if _affirm.is_a?(OpenApi::Validatable)
      end
      unless (_afterpay_clearpay = @afterpay_clearpay).nil?
        invalid_properties.concat(_afterpay_clearpay.list_invalid_properties_for("afterpay_clearpay")) if _afterpay_clearpay.is_a?(OpenApi::Validatable)
      end
      unless (_alipay = @alipay).nil?
        invalid_properties.concat(_alipay.list_invalid_properties_for("alipay")) if _alipay.is_a?(OpenApi::Validatable)
      end

      unless (_au_becs_debit = @au_becs_debit).nil?
        invalid_properties.concat(_au_becs_debit.list_invalid_properties_for("au_becs_debit")) if _au_becs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bacs_debit = @bacs_debit).nil?
        invalid_properties.concat(_bacs_debit.list_invalid_properties_for("bacs_debit")) if _bacs_debit.is_a?(OpenApi::Validatable)
      end
      unless (_bancontact = @bancontact).nil?
        invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact")) if _bancontact.is_a?(OpenApi::Validatable)
      end
      unless (_blik = @blik).nil?
        invalid_properties.concat(_blik.list_invalid_properties_for("blik")) if _blik.is_a?(OpenApi::Validatable)
      end
      unless (_boleto = @boleto).nil?
        invalid_properties.concat(_boleto.list_invalid_properties_for("boleto")) if _boleto.is_a?(OpenApi::Validatable)
      end
      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      unless (_card_present = @card_present).nil?
        invalid_properties.concat(_card_present.list_invalid_properties_for("card_present")) if _card_present.is_a?(OpenApi::Validatable)
      end
      unless (_cashapp = @cashapp).nil?
        invalid_properties.concat(_cashapp.list_invalid_properties_for("cashapp")) if _cashapp.is_a?(OpenApi::Validatable)
      end

      unless (_eps = @eps).nil?
        invalid_properties.concat(_eps.list_invalid_properties_for("eps")) if _eps.is_a?(OpenApi::Validatable)
      end
      unless (_fpx = @fpx).nil?
        invalid_properties.concat(_fpx.list_invalid_properties_for("fpx")) if _fpx.is_a?(OpenApi::Validatable)
      end
      unless (_giropay = @giropay).nil?
        invalid_properties.concat(_giropay.list_invalid_properties_for("giropay")) if _giropay.is_a?(OpenApi::Validatable)
      end
      unless (_grabpay = @grabpay).nil?
        invalid_properties.concat(_grabpay.list_invalid_properties_for("grabpay")) if _grabpay.is_a?(OpenApi::Validatable)
      end
      unless (_ideal = @ideal).nil?
        invalid_properties.concat(_ideal.list_invalid_properties_for("ideal")) if _ideal.is_a?(OpenApi::Validatable)
      end
      unless (_interac_present = @interac_present).nil?
        invalid_properties.concat(_interac_present.list_invalid_properties_for("interac_present")) if _interac_present.is_a?(OpenApi::Validatable)
      end
      unless (_klarna = @klarna).nil?
        invalid_properties.concat(_klarna.list_invalid_properties_for("klarna")) if _klarna.is_a?(OpenApi::Validatable)
      end
      unless (_konbini = @konbini).nil?
        invalid_properties.concat(_konbini.list_invalid_properties_for("konbini")) if _konbini.is_a?(OpenApi::Validatable)
      end
      unless (_link = @link).nil?
        invalid_properties.concat(_link.list_invalid_properties_for("link")) if _link.is_a?(OpenApi::Validatable)
      end
      unless (_mobilepay = @mobilepay).nil?
        invalid_properties.concat(_mobilepay.list_invalid_properties_for("mobilepay")) if _mobilepay.is_a?(OpenApi::Validatable)
      end
      unless (_multibanco = @multibanco).nil?
        invalid_properties.concat(_multibanco.list_invalid_properties_for("multibanco")) if _multibanco.is_a?(OpenApi::Validatable)
      end
      unless (_oxxo = @oxxo).nil?
        invalid_properties.concat(_oxxo.list_invalid_properties_for("oxxo")) if _oxxo.is_a?(OpenApi::Validatable)
      end
      unless (_p24 = @p24).nil?
        invalid_properties.concat(_p24.list_invalid_properties_for("p24")) if _p24.is_a?(OpenApi::Validatable)
      end
      unless (_paynow = @paynow).nil?
        invalid_properties.concat(_paynow.list_invalid_properties_for("paynow")) if _paynow.is_a?(OpenApi::Validatable)
      end
      unless (_paypal = @paypal).nil?
        invalid_properties.concat(_paypal.list_invalid_properties_for("paypal")) if _paypal.is_a?(OpenApi::Validatable)
      end
      unless (_pix = @pix).nil?
        invalid_properties.concat(_pix.list_invalid_properties_for("pix")) if _pix.is_a?(OpenApi::Validatable)
      end
      unless (_promptpay = @promptpay).nil?
        invalid_properties.concat(_promptpay.list_invalid_properties_for("promptpay")) if _promptpay.is_a?(OpenApi::Validatable)
      end

      unless (_sepa_credit_transfer = @sepa_credit_transfer).nil?
        invalid_properties.concat(_sepa_credit_transfer.list_invalid_properties_for("sepa_credit_transfer")) if _sepa_credit_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_debit = @sepa_debit).nil?
        invalid_properties.concat(_sepa_debit.list_invalid_properties_for("sepa_debit")) if _sepa_debit.is_a?(OpenApi::Validatable)
      end
      unless (_sofort = @sofort).nil?
        invalid_properties.concat(_sofort.list_invalid_properties_for("sofort")) if _sofort.is_a?(OpenApi::Validatable)
      end

      unless (_swish = @swish).nil?
        invalid_properties.concat(_swish.list_invalid_properties_for("swish")) if _swish.is_a?(OpenApi::Validatable)
      end

      unless (_us_bank_account = @us_bank_account).nil?
        invalid_properties.concat(_us_bank_account.list_invalid_properties_for("us_bank_account")) if _us_bank_account.is_a?(OpenApi::Validatable)
      end

      unless (_wechat_pay = @wechat_pay).nil?
        invalid_properties.concat(_wechat_pay.list_invalid_properties_for("wechat_pay")) if _wechat_pay.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if __type.to_s.size > MAX_LENGTH_FOR__TYPE
      end

      unless (_ach_credit_transfer = @ach_credit_transfer).nil?
        return false if _ach_credit_transfer.is_a?(OpenApi::Validatable) && !_ach_credit_transfer.valid?
      end

      unless (_ach_debit = @ach_debit).nil?
        return false if _ach_debit.is_a?(OpenApi::Validatable) && !_ach_debit.valid?
      end

      unless (_acss_debit = @acss_debit).nil?
        return false if _acss_debit.is_a?(OpenApi::Validatable) && !_acss_debit.valid?
      end

      unless (_affirm = @affirm).nil?
        return false if _affirm.is_a?(OpenApi::Validatable) && !_affirm.valid?
      end

      unless (_afterpay_clearpay = @afterpay_clearpay).nil?
        return false if _afterpay_clearpay.is_a?(OpenApi::Validatable) && !_afterpay_clearpay.valid?
      end

      unless (_alipay = @alipay).nil?
        return false if _alipay.is_a?(OpenApi::Validatable) && !_alipay.valid?
      end

      unless (_au_becs_debit = @au_becs_debit).nil?
        return false if _au_becs_debit.is_a?(OpenApi::Validatable) && !_au_becs_debit.valid?
      end

      unless (_bacs_debit = @bacs_debit).nil?
        return false if _bacs_debit.is_a?(OpenApi::Validatable) && !_bacs_debit.valid?
      end

      unless (_bancontact = @bancontact).nil?
        return false if _bancontact.is_a?(OpenApi::Validatable) && !_bancontact.valid?
      end

      unless (_blik = @blik).nil?
        return false if _blik.is_a?(OpenApi::Validatable) && !_blik.valid?
      end

      unless (_boleto = @boleto).nil?
        return false if _boleto.is_a?(OpenApi::Validatable) && !_boleto.valid?
      end

      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      unless (_card_present = @card_present).nil?
        return false if _card_present.is_a?(OpenApi::Validatable) && !_card_present.valid?
      end

      unless (_cashapp = @cashapp).nil?
        return false if _cashapp.is_a?(OpenApi::Validatable) && !_cashapp.valid?
      end

      unless (_eps = @eps).nil?
        return false if _eps.is_a?(OpenApi::Validatable) && !_eps.valid?
      end

      unless (_fpx = @fpx).nil?
        return false if _fpx.is_a?(OpenApi::Validatable) && !_fpx.valid?
      end

      unless (_giropay = @giropay).nil?
        return false if _giropay.is_a?(OpenApi::Validatable) && !_giropay.valid?
      end

      unless (_grabpay = @grabpay).nil?
        return false if _grabpay.is_a?(OpenApi::Validatable) && !_grabpay.valid?
      end

      unless (_ideal = @ideal).nil?
        return false if _ideal.is_a?(OpenApi::Validatable) && !_ideal.valid?
      end

      unless (_interac_present = @interac_present).nil?
        return false if _interac_present.is_a?(OpenApi::Validatable) && !_interac_present.valid?
      end

      unless (_klarna = @klarna).nil?
        return false if _klarna.is_a?(OpenApi::Validatable) && !_klarna.valid?
      end

      unless (_konbini = @konbini).nil?
        return false if _konbini.is_a?(OpenApi::Validatable) && !_konbini.valid?
      end

      unless (_link = @link).nil?
        return false if _link.is_a?(OpenApi::Validatable) && !_link.valid?
      end

      unless (_mobilepay = @mobilepay).nil?
        return false if _mobilepay.is_a?(OpenApi::Validatable) && !_mobilepay.valid?
      end

      unless (_multibanco = @multibanco).nil?
        return false if _multibanco.is_a?(OpenApi::Validatable) && !_multibanco.valid?
      end

      unless (_oxxo = @oxxo).nil?
        return false if _oxxo.is_a?(OpenApi::Validatable) && !_oxxo.valid?
      end

      unless (_p24 = @p24).nil?
        return false if _p24.is_a?(OpenApi::Validatable) && !_p24.valid?
      end

      unless (_paynow = @paynow).nil?
        return false if _paynow.is_a?(OpenApi::Validatable) && !_paynow.valid?
      end

      unless (_paypal = @paypal).nil?
        return false if _paypal.is_a?(OpenApi::Validatable) && !_paypal.valid?
      end

      unless (_pix = @pix).nil?
        return false if _pix.is_a?(OpenApi::Validatable) && !_pix.valid?
      end

      unless (_promptpay = @promptpay).nil?
        return false if _promptpay.is_a?(OpenApi::Validatable) && !_promptpay.valid?
      end

      unless (_sepa_credit_transfer = @sepa_credit_transfer).nil?
        return false if _sepa_credit_transfer.is_a?(OpenApi::Validatable) && !_sepa_credit_transfer.valid?
      end

      unless (_sepa_debit = @sepa_debit).nil?
        return false if _sepa_debit.is_a?(OpenApi::Validatable) && !_sepa_debit.valid?
      end

      unless (_sofort = @sofort).nil?
        return false if _sofort.is_a?(OpenApi::Validatable) && !_sofort.valid?
      end

      unless (_swish = @swish).nil?
        return false if _swish.is_a?(OpenApi::Validatable) && !_swish.valid?
      end

      unless (_us_bank_account = @us_bank_account).nil?
        return false if _us_bank_account.is_a?(OpenApi::Validatable) && !_us_bank_account.valid?
      end

      unless (_wechat_pay = @wechat_pay).nil?
        return false if _wechat_pay.is_a?(OpenApi::Validatable) && !_wechat_pay.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("_type", new_value.to_s.size, MAX_LENGTH_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_credit_transfer Object to be assigned
    def ach_credit_transfer=(new_value : Stripe::PaymentMethodDetailsAchCreditTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ach_credit_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_debit Object to be assigned
    def ach_debit=(new_value : Stripe::PaymentMethodDetailsAchDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ach_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(new_value : Stripe::PaymentMethodDetailsAcssDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @acss_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm Object to be assigned
    def affirm=(new_value : Stripe::PaymentMethodDetailsAffirm?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @affirm = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(new_value : Stripe::PaymentMethodDetailsAfterpayClearpay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @afterpay_clearpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(new_value : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @alipay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amazon_pay Object to be assigned
    def amazon_pay=(new_value : JSON::Any?)
      @amazon_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(new_value : Stripe::PaymentMethodDetailsAuBecsDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @au_becs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit Object to be assigned
    def bacs_debit=(new_value : Stripe::PaymentMethodDetailsBacsDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(new_value : Stripe::PaymentMethodDetailsBancontact?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bancontact = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik Object to be assigned
    def blik=(new_value : Stripe::PaymentMethodDetailsBlik?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @blik = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto Object to be assigned
    def boleto=(new_value : Stripe::PaymentMethodDetailsBoleto?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @boleto = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : Stripe::PaymentMethodDetailsCard?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(new_value : Stripe::PaymentMethodDetailsCardPresent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_present2 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cashapp Object to be assigned
    def cashapp=(new_value : Stripe::PaymentMethodDetailsCashapp?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cashapp = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(new_value : JSON::Any?)
      @customer_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(new_value : Stripe::PaymentMethodDetailsEps?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eps = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx Object to be assigned
    def fpx=(new_value : Stripe::PaymentMethodDetailsFpx?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fpx = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(new_value : Stripe::PaymentMethodDetailsGiropay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @giropay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay Object to be assigned
    def grabpay=(new_value : Stripe::PaymentMethodDetailsGrabpay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @grabpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(new_value : Stripe::PaymentMethodDetailsIdeal?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ideal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interac_present Object to be assigned
    def interac_present=(new_value : Stripe::PaymentMethodDetailsInteracPresent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @interac_present = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(new_value : Stripe::PaymentMethodDetailsKlarna?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @klarna = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(new_value : Stripe::PaymentMethodDetailsKonbini?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @konbini = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(new_value : Stripe::PaymentMethodDetailsLink?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mobilepay Object to be assigned
    def mobilepay=(new_value : Stripe::PaymentMethodDetailsMobilepay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mobilepay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco Object to be assigned
    def multibanco=(new_value : Stripe::PaymentMethodDetailsMultibanco?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @multibanco = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(new_value : Stripe::PaymentMethodDetailsOxxo?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @oxxo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(new_value : Stripe::PaymentMethodDetailsP24?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @p24 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow Object to be assigned
    def paynow=(new_value : Stripe::PaymentMethodDetailsPaynow?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paynow = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paypal Object to be assigned
    def paypal=(new_value : Stripe::PaymentMethodDetailsPaypal?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paypal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix Object to be assigned
    def pix=(new_value : Stripe::PaymentMethodDetailsPix?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay Object to be assigned
    def promptpay=(new_value : Stripe::PaymentMethodDetailsPromptpay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @promptpay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] revolut_pay Object to be assigned
    def revolut_pay=(new_value : JSON::Any?)
      @revolut_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_credit_transfer Object to be assigned
    def sepa_credit_transfer=(new_value : Stripe::PaymentMethodDetailsSepaCreditTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_credit_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(new_value : Stripe::PaymentMethodDetailsSepaDebit?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_debit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(new_value : Stripe::PaymentMethodDetailsSofort?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sofort = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stripe_account Object to be assigned
    def stripe_account=(new_value : JSON::Any?)
      @stripe_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swish Object to be assigned
    def swish=(new_value : Stripe::PaymentMethodDetailsSwish?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @swish = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] twint Object to be assigned
    def twint=(new_value : JSON::Any?)
      @twint = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(new_value : Stripe::PaymentMethodDetailsUsBankAccount?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @us_bank_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat Object to be assigned
    def wechat=(new_value : JSON::Any?)
      @wechat = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(new_value : Stripe::PaymentMethodDetailsWechatPay?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @wechat_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] zip Object to be assigned
    def zip=(new_value : JSON::Any?)
      @zip = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @ach_credit_transfer, @ach_debit, @acss_debit, @affirm, @afterpay_clearpay, @alipay, @amazon_pay, @au_becs_debit, @bacs_debit, @bancontact, @blik, @boleto, @card, @card_present2, @cashapp, @customer_balance, @eps, @fpx, @giropay, @grabpay, @ideal, @interac_present, @klarna, @konbini, @link, @mobilepay, @multibanco, @oxxo, @p24, @paynow, @paypal, @pix, @promptpay, @revolut_pay, @sepa_credit_transfer, @sepa_debit, @sofort, @stripe_account, @swish, @twint, @us_bank_account, @wechat, @wechat_pay, @zip)
  end
end
