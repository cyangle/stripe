#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentMethodDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`. An additional hash is included on `payment_method_details` with a name matching this value. It contains information specific to the payment method.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Optional properties

    @[JSON::Field(key: "ach_credit_transfer", type: Stripe::PaymentMethodDetailsAchCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer? = nil

    @[JSON::Field(key: "ach_debit", type: Stripe::PaymentMethodDetailsAchDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_debit : Stripe::PaymentMethodDetailsAchDebit? = nil

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentMethodDetailsAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentMethodDetailsAcssDebit? = nil

    #
    @[JSON::Field(key: "affirm", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm : JSON::Any? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::PaymentMethodDetailsAfterpayClearpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay? = nil

    @[JSON::Field(key: "alipay", type: Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::PaymentMethodDetailsAuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit? = nil

    @[JSON::Field(key: "bacs_debit", type: Stripe::PaymentMethodDetailsBacsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit : Stripe::PaymentMethodDetailsBacsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentMethodDetailsBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentMethodDetailsBancontact? = nil

    #
    @[JSON::Field(key: "blik", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik : JSON::Any? = nil

    @[JSON::Field(key: "boleto", type: Stripe::PaymentMethodDetailsBoleto?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto : Stripe::PaymentMethodDetailsBoleto? = nil

    @[JSON::Field(key: "card", type: Stripe::PaymentMethodDetailsCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PaymentMethodDetailsCard? = nil

    @[JSON::Field(key: "card_present", type: Stripe::PaymentMethodDetailsCardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::PaymentMethodDetailsCardPresent? = nil

    #
    @[JSON::Field(key: "customer_balance", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : JSON::Any? = nil

    @[JSON::Field(key: "eps", type: Stripe::PaymentMethodDetailsEps?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::PaymentMethodDetailsEps? = nil

    @[JSON::Field(key: "fpx", type: Stripe::PaymentMethodDetailsFpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx : Stripe::PaymentMethodDetailsFpx? = nil

    @[JSON::Field(key: "giropay", type: Stripe::PaymentMethodDetailsGiropay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::PaymentMethodDetailsGiropay? = nil

    @[JSON::Field(key: "grabpay", type: Stripe::PaymentMethodDetailsGrabpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay : Stripe::PaymentMethodDetailsGrabpay? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentMethodDetailsIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentMethodDetailsIdeal? = nil

    @[JSON::Field(key: "interac_present", type: Stripe::PaymentMethodDetailsInteracPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interac_present : Stripe::PaymentMethodDetailsInteracPresent? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentMethodDetailsKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentMethodDetailsKlarna? = nil

    @[JSON::Field(key: "konbini", type: Stripe::PaymentMethodDetailsKonbini?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : Stripe::PaymentMethodDetailsKonbini? = nil

    #
    @[JSON::Field(key: "link", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : JSON::Any? = nil

    @[JSON::Field(key: "multibanco", type: Stripe::PaymentMethodDetailsMultibanco?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco : Stripe::PaymentMethodDetailsMultibanco? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::PaymentMethodDetailsOxxo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::PaymentMethodDetailsOxxo? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentMethodDetailsP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentMethodDetailsP24? = nil

    @[JSON::Field(key: "paynow", type: Stripe::PaymentMethodDetailsPaynow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow : Stripe::PaymentMethodDetailsPaynow? = nil

    @[JSON::Field(key: "pix", type: Stripe::PaymentMethodDetailsPix?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix : Stripe::PaymentMethodDetailsPix? = nil

    @[JSON::Field(key: "promptpay", type: Stripe::PaymentMethodDetailsPromptpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay : Stripe::PaymentMethodDetailsPromptpay? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::PaymentMethodDetailsSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::PaymentMethodDetailsSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::PaymentMethodDetailsSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentMethodDetailsSofort? = nil

    #
    @[JSON::Field(key: "stripe_account", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter stripe_account : JSON::Any? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::PaymentMethodDetailsUsBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount? = nil

    #
    @[JSON::Field(key: "wechat", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat : JSON::Any? = nil

    @[JSON::Field(key: "wechat_pay", type: Stripe::PaymentMethodDetailsWechatPay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::PaymentMethodDetailsWechatPay? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer? = nil,
      @ach_debit : Stripe::PaymentMethodDetailsAchDebit? = nil,
      @acss_debit : Stripe::PaymentMethodDetailsAcssDebit? = nil,
      @affirm : JSON::Any? = nil,
      @afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay? = nil,
      @alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails? = nil,
      @au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit? = nil,
      @bacs_debit : Stripe::PaymentMethodDetailsBacsDebit? = nil,
      @bancontact : Stripe::PaymentMethodDetailsBancontact? = nil,
      @blik : JSON::Any? = nil,
      @boleto : Stripe::PaymentMethodDetailsBoleto? = nil,
      @card : Stripe::PaymentMethodDetailsCard? = nil,
      @card_present2 : Stripe::PaymentMethodDetailsCardPresent? = nil,
      @customer_balance : JSON::Any? = nil,
      @eps : Stripe::PaymentMethodDetailsEps? = nil,
      @fpx : Stripe::PaymentMethodDetailsFpx? = nil,
      @giropay : Stripe::PaymentMethodDetailsGiropay? = nil,
      @grabpay : Stripe::PaymentMethodDetailsGrabpay? = nil,
      @ideal : Stripe::PaymentMethodDetailsIdeal? = nil,
      @interac_present : Stripe::PaymentMethodDetailsInteracPresent? = nil,
      @klarna : Stripe::PaymentMethodDetailsKlarna? = nil,
      @konbini : Stripe::PaymentMethodDetailsKonbini? = nil,
      @link : JSON::Any? = nil,
      @multibanco : Stripe::PaymentMethodDetailsMultibanco? = nil,
      @oxxo : Stripe::PaymentMethodDetailsOxxo? = nil,
      @p24 : Stripe::PaymentMethodDetailsP24? = nil,
      @paynow : Stripe::PaymentMethodDetailsPaynow? = nil,
      @pix : Stripe::PaymentMethodDetailsPix? = nil,
      @promptpay : Stripe::PaymentMethodDetailsPromptpay? = nil,
      @sepa_debit : Stripe::PaymentMethodDetailsSepaDebit? = nil,
      @sofort : Stripe::PaymentMethodDetailsSofort? = nil,
      @stripe_account : JSON::Any? = nil,
      @us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount? = nil,
      @wechat : JSON::Any? = nil,
      @wechat_pay : Stripe::PaymentMethodDetailsWechatPay? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?
      if __type = @_type
        if __type.to_s.size > 5000
          invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _ach_credit_transfer = @ach_credit_transfer
        if _ach_credit_transfer.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_ach_credit_transfer.list_invalid_properties_for("ach_credit_transfer"))
        end
      end
      if _ach_debit = @ach_debit
        if _ach_debit.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_ach_debit.list_invalid_properties_for("ach_debit"))
        end
      end
      if _acss_debit = @acss_debit
        if _acss_debit.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_acss_debit.list_invalid_properties_for("acss_debit"))
        end
      end

      if _afterpay_clearpay = @afterpay_clearpay
        if _afterpay_clearpay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_afterpay_clearpay.list_invalid_properties_for("afterpay_clearpay"))
        end
      end
      if _alipay = @alipay
        if _alipay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_alipay.list_invalid_properties_for("alipay"))
        end
      end
      if _au_becs_debit = @au_becs_debit
        if _au_becs_debit.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_au_becs_debit.list_invalid_properties_for("au_becs_debit"))
        end
      end
      if _bacs_debit = @bacs_debit
        if _bacs_debit.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_bacs_debit.list_invalid_properties_for("bacs_debit"))
        end
      end
      if _bancontact = @bancontact
        if _bancontact.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_bancontact.list_invalid_properties_for("bancontact"))
        end
      end

      if _boleto = @boleto
        if _boleto.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_boleto.list_invalid_properties_for("boleto"))
        end
      end
      if _card = @card
        if _card.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_card.list_invalid_properties_for("card"))
        end
      end
      if _card_present = @card_present
        if _card_present.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_card_present.list_invalid_properties_for("card_present"))
        end
      end

      if _eps = @eps
        if _eps.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_eps.list_invalid_properties_for("eps"))
        end
      end
      if _fpx = @fpx
        if _fpx.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_fpx.list_invalid_properties_for("fpx"))
        end
      end
      if _giropay = @giropay
        if _giropay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_giropay.list_invalid_properties_for("giropay"))
        end
      end
      if _grabpay = @grabpay
        if _grabpay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_grabpay.list_invalid_properties_for("grabpay"))
        end
      end
      if _ideal = @ideal
        if _ideal.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_ideal.list_invalid_properties_for("ideal"))
        end
      end
      if _interac_present = @interac_present
        if _interac_present.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_interac_present.list_invalid_properties_for("interac_present"))
        end
      end
      if _klarna = @klarna
        if _klarna.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_klarna.list_invalid_properties_for("klarna"))
        end
      end
      if _konbini = @konbini
        if _konbini.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_konbini.list_invalid_properties_for("konbini"))
        end
      end

      if _multibanco = @multibanco
        if _multibanco.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_multibanco.list_invalid_properties_for("multibanco"))
        end
      end
      if _oxxo = @oxxo
        if _oxxo.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_oxxo.list_invalid_properties_for("oxxo"))
        end
      end
      if _p24 = @p24
        if _p24.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_p24.list_invalid_properties_for("p24"))
        end
      end
      if _paynow = @paynow
        if _paynow.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_paynow.list_invalid_properties_for("paynow"))
        end
      end
      if _pix = @pix
        if _pix.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_pix.list_invalid_properties_for("pix"))
        end
      end
      if _promptpay = @promptpay
        if _promptpay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_promptpay.list_invalid_properties_for("promptpay"))
        end
      end
      if _sepa_debit = @sepa_debit
        if _sepa_debit.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_sepa_debit.list_invalid_properties_for("sepa_debit"))
        end
      end
      if _sofort = @sofort
        if _sofort.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_sofort.list_invalid_properties_for("sofort"))
        end
      end

      if _us_bank_account = @us_bank_account
        if _us_bank_account.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_us_bank_account.list_invalid_properties_for("us_bank_account"))
        end
      end

      if _wechat_pay = @wechat_pay
        if _wechat_pay.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_wechat_pay.list_invalid_properties_for("wechat_pay"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      if __type = @_type
        return false if __type.to_s.size > 5000
      end
      if _ach_credit_transfer = @ach_credit_transfer
        if _ach_credit_transfer.is_a?(OpenApi::Validatable)
          return false unless _ach_credit_transfer.valid?
        end
      end
      if _ach_debit = @ach_debit
        if _ach_debit.is_a?(OpenApi::Validatable)
          return false unless _ach_debit.valid?
        end
      end
      if _acss_debit = @acss_debit
        if _acss_debit.is_a?(OpenApi::Validatable)
          return false unless _acss_debit.valid?
        end
      end

      if _afterpay_clearpay = @afterpay_clearpay
        if _afterpay_clearpay.is_a?(OpenApi::Validatable)
          return false unless _afterpay_clearpay.valid?
        end
      end
      if _alipay = @alipay
        if _alipay.is_a?(OpenApi::Validatable)
          return false unless _alipay.valid?
        end
      end
      if _au_becs_debit = @au_becs_debit
        if _au_becs_debit.is_a?(OpenApi::Validatable)
          return false unless _au_becs_debit.valid?
        end
      end
      if _bacs_debit = @bacs_debit
        if _bacs_debit.is_a?(OpenApi::Validatable)
          return false unless _bacs_debit.valid?
        end
      end
      if _bancontact = @bancontact
        if _bancontact.is_a?(OpenApi::Validatable)
          return false unless _bancontact.valid?
        end
      end

      if _boleto = @boleto
        if _boleto.is_a?(OpenApi::Validatable)
          return false unless _boleto.valid?
        end
      end
      if _card = @card
        if _card.is_a?(OpenApi::Validatable)
          return false unless _card.valid?
        end
      end
      if _card_present = @card_present
        if _card_present.is_a?(OpenApi::Validatable)
          return false unless _card_present.valid?
        end
      end

      if _eps = @eps
        if _eps.is_a?(OpenApi::Validatable)
          return false unless _eps.valid?
        end
      end
      if _fpx = @fpx
        if _fpx.is_a?(OpenApi::Validatable)
          return false unless _fpx.valid?
        end
      end
      if _giropay = @giropay
        if _giropay.is_a?(OpenApi::Validatable)
          return false unless _giropay.valid?
        end
      end
      if _grabpay = @grabpay
        if _grabpay.is_a?(OpenApi::Validatable)
          return false unless _grabpay.valid?
        end
      end
      if _ideal = @ideal
        if _ideal.is_a?(OpenApi::Validatable)
          return false unless _ideal.valid?
        end
      end
      if _interac_present = @interac_present
        if _interac_present.is_a?(OpenApi::Validatable)
          return false unless _interac_present.valid?
        end
      end
      if _klarna = @klarna
        if _klarna.is_a?(OpenApi::Validatable)
          return false unless _klarna.valid?
        end
      end
      if _konbini = @konbini
        if _konbini.is_a?(OpenApi::Validatable)
          return false unless _konbini.valid?
        end
      end

      if _multibanco = @multibanco
        if _multibanco.is_a?(OpenApi::Validatable)
          return false unless _multibanco.valid?
        end
      end
      if _oxxo = @oxxo
        if _oxxo.is_a?(OpenApi::Validatable)
          return false unless _oxxo.valid?
        end
      end
      if _p24 = @p24
        if _p24.is_a?(OpenApi::Validatable)
          return false unless _p24.valid?
        end
      end
      if _paynow = @paynow
        if _paynow.is_a?(OpenApi::Validatable)
          return false unless _paynow.valid?
        end
      end
      if _pix = @pix
        if _pix.is_a?(OpenApi::Validatable)
          return false unless _pix.valid?
        end
      end
      if _promptpay = @promptpay
        if _promptpay.is_a?(OpenApi::Validatable)
          return false unless _promptpay.valid?
        end
      end
      if _sepa_debit = @sepa_debit
        if _sepa_debit.is_a?(OpenApi::Validatable)
          return false unless _sepa_debit.valid?
        end
      end
      if _sofort = @sofort
        if _sofort.is_a?(OpenApi::Validatable)
          return false unless _sofort.valid?
        end
      end

      if _us_bank_account = @us_bank_account
        if _us_bank_account.is_a?(OpenApi::Validatable)
          return false unless _us_bank_account.valid?
        end
      end

      if _wechat_pay = @wechat_pay
        if _wechat_pay.is_a?(OpenApi::Validatable)
          return false unless _wechat_pay.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      if __type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_credit_transfer Object to be assigned
    def ach_credit_transfer=(ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer?)
      if ach_credit_transfer.nil?
        return @ach_credit_transfer = nil
      end
      _ach_credit_transfer = ach_credit_transfer.not_nil!
      if _ach_credit_transfer.is_a?(OpenApi::Validatable)
        _ach_credit_transfer.validate
      end
      @ach_credit_transfer = _ach_credit_transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_debit Object to be assigned
    def ach_debit=(ach_debit : Stripe::PaymentMethodDetailsAchDebit?)
      if ach_debit.nil?
        return @ach_debit = nil
      end
      _ach_debit = ach_debit.not_nil!
      if _ach_debit.is_a?(OpenApi::Validatable)
        _ach_debit.validate
      end
      @ach_debit = _ach_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::PaymentMethodDetailsAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      _acss_debit = acss_debit.not_nil!
      if _acss_debit.is_a?(OpenApi::Validatable)
        _acss_debit.validate
      end
      @acss_debit = _acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm Object to be assigned
    def affirm=(affirm : JSON::Any?)
      if affirm.nil?
        return @affirm = nil
      end
      _affirm = affirm.not_nil!
      @affirm = _affirm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay?)
      if afterpay_clearpay.nil?
        return @afterpay_clearpay = nil
      end
      _afterpay_clearpay = afterpay_clearpay.not_nil!
      if _afterpay_clearpay.is_a?(OpenApi::Validatable)
        _afterpay_clearpay.validate
      end
      @afterpay_clearpay = _afterpay_clearpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails?)
      if alipay.nil?
        return @alipay = nil
      end
      _alipay = alipay.not_nil!
      if _alipay.is_a?(OpenApi::Validatable)
        _alipay.validate
      end
      @alipay = _alipay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit?)
      if au_becs_debit.nil?
        return @au_becs_debit = nil
      end
      _au_becs_debit = au_becs_debit.not_nil!
      if _au_becs_debit.is_a?(OpenApi::Validatable)
        _au_becs_debit.validate
      end
      @au_becs_debit = _au_becs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit Object to be assigned
    def bacs_debit=(bacs_debit : Stripe::PaymentMethodDetailsBacsDebit?)
      if bacs_debit.nil?
        return @bacs_debit = nil
      end
      _bacs_debit = bacs_debit.not_nil!
      if _bacs_debit.is_a?(OpenApi::Validatable)
        _bacs_debit.validate
      end
      @bacs_debit = _bacs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::PaymentMethodDetailsBancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      _bancontact = bancontact.not_nil!
      if _bancontact.is_a?(OpenApi::Validatable)
        _bancontact.validate
      end
      @bancontact = _bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik Object to be assigned
    def blik=(blik : JSON::Any?)
      if blik.nil?
        return @blik = nil
      end
      _blik = blik.not_nil!
      @blik = _blik
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto Object to be assigned
    def boleto=(boleto : Stripe::PaymentMethodDetailsBoleto?)
      if boleto.nil?
        return @boleto = nil
      end
      _boleto = boleto.not_nil!
      if _boleto.is_a?(OpenApi::Validatable)
        _boleto.validate
      end
      @boleto = _boleto
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::PaymentMethodDetailsCard?)
      if card.nil?
        return @card = nil
      end
      _card = card.not_nil!
      if _card.is_a?(OpenApi::Validatable)
        _card.validate
      end
      @card = _card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(card_present : Stripe::PaymentMethodDetailsCardPresent?)
      if card_present.nil?
        return @card_present2 = nil
      end
      _card_present = card_present.not_nil!
      if _card_present.is_a?(OpenApi::Validatable)
        _card_present.validate
      end
      @card_present2 = _card_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : JSON::Any?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      _customer_balance = customer_balance.not_nil!
      @customer_balance = _customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(eps : Stripe::PaymentMethodDetailsEps?)
      if eps.nil?
        return @eps = nil
      end
      _eps = eps.not_nil!
      if _eps.is_a?(OpenApi::Validatable)
        _eps.validate
      end
      @eps = _eps
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx Object to be assigned
    def fpx=(fpx : Stripe::PaymentMethodDetailsFpx?)
      if fpx.nil?
        return @fpx = nil
      end
      _fpx = fpx.not_nil!
      if _fpx.is_a?(OpenApi::Validatable)
        _fpx.validate
      end
      @fpx = _fpx
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(giropay : Stripe::PaymentMethodDetailsGiropay?)
      if giropay.nil?
        return @giropay = nil
      end
      _giropay = giropay.not_nil!
      if _giropay.is_a?(OpenApi::Validatable)
        _giropay.validate
      end
      @giropay = _giropay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay Object to be assigned
    def grabpay=(grabpay : Stripe::PaymentMethodDetailsGrabpay?)
      if grabpay.nil?
        return @grabpay = nil
      end
      _grabpay = grabpay.not_nil!
      if _grabpay.is_a?(OpenApi::Validatable)
        _grabpay.validate
      end
      @grabpay = _grabpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(ideal : Stripe::PaymentMethodDetailsIdeal?)
      if ideal.nil?
        return @ideal = nil
      end
      _ideal = ideal.not_nil!
      if _ideal.is_a?(OpenApi::Validatable)
        _ideal.validate
      end
      @ideal = _ideal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interac_present Object to be assigned
    def interac_present=(interac_present : Stripe::PaymentMethodDetailsInteracPresent?)
      if interac_present.nil?
        return @interac_present = nil
      end
      _interac_present = interac_present.not_nil!
      if _interac_present.is_a?(OpenApi::Validatable)
        _interac_present.validate
      end
      @interac_present = _interac_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(klarna : Stripe::PaymentMethodDetailsKlarna?)
      if klarna.nil?
        return @klarna = nil
      end
      _klarna = klarna.not_nil!
      if _klarna.is_a?(OpenApi::Validatable)
        _klarna.validate
      end
      @klarna = _klarna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(konbini : Stripe::PaymentMethodDetailsKonbini?)
      if konbini.nil?
        return @konbini = nil
      end
      _konbini = konbini.not_nil!
      if _konbini.is_a?(OpenApi::Validatable)
        _konbini.validate
      end
      @konbini = _konbini
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(link : JSON::Any?)
      if link.nil?
        return @link = nil
      end
      _link = link.not_nil!
      @link = _link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco Object to be assigned
    def multibanco=(multibanco : Stripe::PaymentMethodDetailsMultibanco?)
      if multibanco.nil?
        return @multibanco = nil
      end
      _multibanco = multibanco.not_nil!
      if _multibanco.is_a?(OpenApi::Validatable)
        _multibanco.validate
      end
      @multibanco = _multibanco
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(oxxo : Stripe::PaymentMethodDetailsOxxo?)
      if oxxo.nil?
        return @oxxo = nil
      end
      _oxxo = oxxo.not_nil!
      if _oxxo.is_a?(OpenApi::Validatable)
        _oxxo.validate
      end
      @oxxo = _oxxo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(p24 : Stripe::PaymentMethodDetailsP24?)
      if p24.nil?
        return @p24 = nil
      end
      _p24 = p24.not_nil!
      if _p24.is_a?(OpenApi::Validatable)
        _p24.validate
      end
      @p24 = _p24
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow Object to be assigned
    def paynow=(paynow : Stripe::PaymentMethodDetailsPaynow?)
      if paynow.nil?
        return @paynow = nil
      end
      _paynow = paynow.not_nil!
      if _paynow.is_a?(OpenApi::Validatable)
        _paynow.validate
      end
      @paynow = _paynow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix Object to be assigned
    def pix=(pix : Stripe::PaymentMethodDetailsPix?)
      if pix.nil?
        return @pix = nil
      end
      _pix = pix.not_nil!
      if _pix.is_a?(OpenApi::Validatable)
        _pix.validate
      end
      @pix = _pix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay Object to be assigned
    def promptpay=(promptpay : Stripe::PaymentMethodDetailsPromptpay?)
      if promptpay.nil?
        return @promptpay = nil
      end
      _promptpay = promptpay.not_nil!
      if _promptpay.is_a?(OpenApi::Validatable)
        _promptpay.validate
      end
      @promptpay = _promptpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(sepa_debit : Stripe::PaymentMethodDetailsSepaDebit?)
      if sepa_debit.nil?
        return @sepa_debit = nil
      end
      _sepa_debit = sepa_debit.not_nil!
      if _sepa_debit.is_a?(OpenApi::Validatable)
        _sepa_debit.validate
      end
      @sepa_debit = _sepa_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(sofort : Stripe::PaymentMethodDetailsSofort?)
      if sofort.nil?
        return @sofort = nil
      end
      _sofort = sofort.not_nil!
      if _sofort.is_a?(OpenApi::Validatable)
        _sofort.validate
      end
      @sofort = _sofort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stripe_account Object to be assigned
    def stripe_account=(stripe_account : JSON::Any?)
      if stripe_account.nil?
        return @stripe_account = nil
      end
      _stripe_account = stripe_account.not_nil!
      @stripe_account = _stripe_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount?)
      if us_bank_account.nil?
        return @us_bank_account = nil
      end
      _us_bank_account = us_bank_account.not_nil!
      if _us_bank_account.is_a?(OpenApi::Validatable)
        _us_bank_account.validate
      end
      @us_bank_account = _us_bank_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat Object to be assigned
    def wechat=(wechat : JSON::Any?)
      if wechat.nil?
        return @wechat = nil
      end
      _wechat = wechat.not_nil!
      @wechat = _wechat
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(wechat_pay : Stripe::PaymentMethodDetailsWechatPay?)
      if wechat_pay.nil?
        return @wechat_pay = nil
      end
      _wechat_pay = wechat_pay.not_nil!
      if _wechat_pay.is_a?(OpenApi::Validatable)
        _wechat_pay.validate
      end
      @wechat_pay = _wechat_pay
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @ach_credit_transfer, @ach_debit, @acss_debit, @affirm, @afterpay_clearpay, @alipay, @au_becs_debit, @bacs_debit, @bancontact, @blik, @boleto, @card, @card_present2, @customer_balance, @eps, @fpx, @giropay, @grabpay, @ideal, @interac_present, @klarna, @konbini, @link, @multibanco, @oxxo, @p24, @paynow, @pix, @promptpay, @sepa_debit, @sofort, @stripe_account, @us_bank_account, @wechat, @wechat_pay)
  end
end
