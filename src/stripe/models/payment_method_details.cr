#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentMethodDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`. An additional hash is included on `payment_method_details` with a name matching this value. It contains information specific to the payment method.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Optional properties

    @[JSON::Field(key: "ach_credit_transfer", type: Stripe::PaymentMethodDetailsAchCreditTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer? = nil

    @[JSON::Field(key: "ach_debit", type: Stripe::PaymentMethodDetailsAchDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_debit : Stripe::PaymentMethodDetailsAchDebit? = nil

    @[JSON::Field(key: "acss_debit", type: Stripe::PaymentMethodDetailsAcssDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit : Stripe::PaymentMethodDetailsAcssDebit? = nil

    #
    @[JSON::Field(key: "affirm", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm : JSON::Any? = nil

    @[JSON::Field(key: "afterpay_clearpay", type: Stripe::PaymentMethodDetailsAfterpayClearpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay? = nil

    @[JSON::Field(key: "alipay", type: Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails? = nil

    @[JSON::Field(key: "au_becs_debit", type: Stripe::PaymentMethodDetailsAuBecsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit? = nil

    @[JSON::Field(key: "bacs_debit", type: Stripe::PaymentMethodDetailsBacsDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit : Stripe::PaymentMethodDetailsBacsDebit? = nil

    @[JSON::Field(key: "bancontact", type: Stripe::PaymentMethodDetailsBancontact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact : Stripe::PaymentMethodDetailsBancontact? = nil

    #
    @[JSON::Field(key: "blik", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik : JSON::Any? = nil

    @[JSON::Field(key: "boleto", type: Stripe::PaymentMethodDetailsBoleto?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto : Stripe::PaymentMethodDetailsBoleto? = nil

    @[JSON::Field(key: "card", type: Stripe::PaymentMethodDetailsCard?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card : Stripe::PaymentMethodDetailsCard? = nil

    @[JSON::Field(key: "card_present", type: Stripe::PaymentMethodDetailsCardPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_present : Stripe::PaymentMethodDetailsCardPresent? = nil

    #
    @[JSON::Field(key: "customer_balance", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_balance : JSON::Any? = nil

    @[JSON::Field(key: "eps", type: Stripe::PaymentMethodDetailsEps?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps : Stripe::PaymentMethodDetailsEps? = nil

    @[JSON::Field(key: "fpx", type: Stripe::PaymentMethodDetailsFpx?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx : Stripe::PaymentMethodDetailsFpx? = nil

    @[JSON::Field(key: "giropay", type: Stripe::PaymentMethodDetailsGiropay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay : Stripe::PaymentMethodDetailsGiropay? = nil

    @[JSON::Field(key: "grabpay", type: Stripe::PaymentMethodDetailsGrabpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay : Stripe::PaymentMethodDetailsGrabpay? = nil

    @[JSON::Field(key: "ideal", type: Stripe::PaymentMethodDetailsIdeal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal : Stripe::PaymentMethodDetailsIdeal? = nil

    @[JSON::Field(key: "interac_present", type: Stripe::PaymentMethodDetailsInteracPresent?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interac_present : Stripe::PaymentMethodDetailsInteracPresent? = nil

    @[JSON::Field(key: "klarna", type: Stripe::PaymentMethodDetailsKlarna?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna : Stripe::PaymentMethodDetailsKlarna? = nil

    @[JSON::Field(key: "konbini", type: Stripe::PaymentMethodDetailsKonbini?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini : Stripe::PaymentMethodDetailsKonbini? = nil

    #
    @[JSON::Field(key: "link", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link : JSON::Any? = nil

    @[JSON::Field(key: "multibanco", type: Stripe::PaymentMethodDetailsMultibanco?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco : Stripe::PaymentMethodDetailsMultibanco? = nil

    @[JSON::Field(key: "oxxo", type: Stripe::PaymentMethodDetailsOxxo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo : Stripe::PaymentMethodDetailsOxxo? = nil

    @[JSON::Field(key: "p24", type: Stripe::PaymentMethodDetailsP24?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24 : Stripe::PaymentMethodDetailsP24? = nil

    @[JSON::Field(key: "paynow", type: Stripe::PaymentMethodDetailsPaynow?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow : Stripe::PaymentMethodDetailsPaynow? = nil

    @[JSON::Field(key: "pix", type: Stripe::PaymentMethodDetailsPix?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pix : Stripe::PaymentMethodDetailsPix? = nil

    @[JSON::Field(key: "promptpay", type: Stripe::PaymentMethodDetailsPromptpay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay : Stripe::PaymentMethodDetailsPromptpay? = nil

    @[JSON::Field(key: "sepa_debit", type: Stripe::PaymentMethodDetailsSepaDebit?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit : Stripe::PaymentMethodDetailsSepaDebit? = nil

    @[JSON::Field(key: "sofort", type: Stripe::PaymentMethodDetailsSofort?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort : Stripe::PaymentMethodDetailsSofort? = nil

    #
    @[JSON::Field(key: "stripe_account", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter stripe_account : JSON::Any? = nil

    @[JSON::Field(key: "us_bank_account", type: Stripe::PaymentMethodDetailsUsBankAccount?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount? = nil

    #
    @[JSON::Field(key: "wechat", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat : JSON::Any? = nil

    @[JSON::Field(key: "wechat_pay", type: Stripe::PaymentMethodDetailsWechatPay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wechat_pay : Stripe::PaymentMethodDetailsWechatPay? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer? = nil,
      @ach_debit : Stripe::PaymentMethodDetailsAchDebit? = nil,
      @acss_debit : Stripe::PaymentMethodDetailsAcssDebit? = nil,
      @affirm : JSON::Any? = nil,
      @afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay? = nil,
      @alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails? = nil,
      @au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit? = nil,
      @bacs_debit : Stripe::PaymentMethodDetailsBacsDebit? = nil,
      @bancontact : Stripe::PaymentMethodDetailsBancontact? = nil,
      @blik : JSON::Any? = nil,
      @boleto : Stripe::PaymentMethodDetailsBoleto? = nil,
      @card : Stripe::PaymentMethodDetailsCard? = nil,
      @card_present2 : Stripe::PaymentMethodDetailsCardPresent? = nil,
      @customer_balance : JSON::Any? = nil,
      @eps : Stripe::PaymentMethodDetailsEps? = nil,
      @fpx : Stripe::PaymentMethodDetailsFpx? = nil,
      @giropay : Stripe::PaymentMethodDetailsGiropay? = nil,
      @grabpay : Stripe::PaymentMethodDetailsGrabpay? = nil,
      @ideal : Stripe::PaymentMethodDetailsIdeal? = nil,
      @interac_present : Stripe::PaymentMethodDetailsInteracPresent? = nil,
      @klarna : Stripe::PaymentMethodDetailsKlarna? = nil,
      @konbini : Stripe::PaymentMethodDetailsKonbini? = nil,
      @link : JSON::Any? = nil,
      @multibanco : Stripe::PaymentMethodDetailsMultibanco? = nil,
      @oxxo : Stripe::PaymentMethodDetailsOxxo? = nil,
      @p24 : Stripe::PaymentMethodDetailsP24? = nil,
      @paynow : Stripe::PaymentMethodDetailsPaynow? = nil,
      @pix : Stripe::PaymentMethodDetailsPix? = nil,
      @promptpay : Stripe::PaymentMethodDetailsPromptpay? = nil,
      @sepa_debit : Stripe::PaymentMethodDetailsSepaDebit? = nil,
      @sofort : Stripe::PaymentMethodDetailsSofort? = nil,
      @stripe_account : JSON::Any? = nil,
      @us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount? = nil,
      @wechat : JSON::Any? = nil,
      @wechat_pay : Stripe::PaymentMethodDetailsWechatPay? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?
      if __type = @_type
        if __type.to_s.size > 5000
          invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer?
      # This is a model ach_debit : Stripe::PaymentMethodDetailsAchDebit?
      # This is a model acss_debit : Stripe::PaymentMethodDetailsAcssDebit?
      # This is a model afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay?
      # This is a model alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails?
      # This is a model au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit?
      # This is a model bacs_debit : Stripe::PaymentMethodDetailsBacsDebit?
      # This is a model bancontact : Stripe::PaymentMethodDetailsBancontact?
      # This is a model boleto : Stripe::PaymentMethodDetailsBoleto?
      # This is a model card : Stripe::PaymentMethodDetailsCard?
      # This is a model card_present : Stripe::PaymentMethodDetailsCardPresent?
      # This is a model eps : Stripe::PaymentMethodDetailsEps?
      # This is a model fpx : Stripe::PaymentMethodDetailsFpx?
      # This is a model giropay : Stripe::PaymentMethodDetailsGiropay?
      # This is a model grabpay : Stripe::PaymentMethodDetailsGrabpay?
      # This is a model ideal : Stripe::PaymentMethodDetailsIdeal?
      # This is a model interac_present : Stripe::PaymentMethodDetailsInteracPresent?
      # This is a model klarna : Stripe::PaymentMethodDetailsKlarna?
      # This is a model konbini : Stripe::PaymentMethodDetailsKonbini?
      # This is a model multibanco : Stripe::PaymentMethodDetailsMultibanco?
      # This is a model oxxo : Stripe::PaymentMethodDetailsOxxo?
      # This is a model p24 : Stripe::PaymentMethodDetailsP24?
      # This is a model paynow : Stripe::PaymentMethodDetailsPaynow?
      # This is a model pix : Stripe::PaymentMethodDetailsPix?
      # This is a model promptpay : Stripe::PaymentMethodDetailsPromptpay?
      # This is a model sepa_debit : Stripe::PaymentMethodDetailsSepaDebit?
      # This is a model sofort : Stripe::PaymentMethodDetailsSofort?
      # This is a model us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount?
      # This is a model wechat_pay : Stripe::PaymentMethodDetailsWechatPay?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @_type.nil?
      if __type = @_type
        return false if __type.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      if __type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_credit_transfer Object to be assigned
    def ach_credit_transfer=(ach_credit_transfer : Stripe::PaymentMethodDetailsAchCreditTransfer?)
      if ach_credit_transfer.nil?
        return @ach_credit_transfer = nil
      end
      @ach_credit_transfer = ach_credit_transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_debit Object to be assigned
    def ach_debit=(ach_debit : Stripe::PaymentMethodDetailsAchDebit?)
      if ach_debit.nil?
        return @ach_debit = nil
      end
      @ach_debit = ach_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::PaymentMethodDetailsAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      @acss_debit = acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm Object to be assigned
    def affirm=(affirm : JSON::Any?)
      if affirm.nil?
        return @affirm = nil
      end
      @affirm = affirm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay Object to be assigned
    def afterpay_clearpay=(afterpay_clearpay : Stripe::PaymentMethodDetailsAfterpayClearpay?)
      if afterpay_clearpay.nil?
        return @afterpay_clearpay = nil
      end
      @afterpay_clearpay = afterpay_clearpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alipay Object to be assigned
    def alipay=(alipay : Stripe::PaymentFlowsPrivatePaymentMethodsAlipayDetails?)
      if alipay.nil?
        return @alipay = nil
      end
      @alipay = alipay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit Object to be assigned
    def au_becs_debit=(au_becs_debit : Stripe::PaymentMethodDetailsAuBecsDebit?)
      if au_becs_debit.nil?
        return @au_becs_debit = nil
      end
      @au_becs_debit = au_becs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit Object to be assigned
    def bacs_debit=(bacs_debit : Stripe::PaymentMethodDetailsBacsDebit?)
      if bacs_debit.nil?
        return @bacs_debit = nil
      end
      @bacs_debit = bacs_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::PaymentMethodDetailsBancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      @bancontact = bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik Object to be assigned
    def blik=(blik : JSON::Any?)
      if blik.nil?
        return @blik = nil
      end
      @blik = blik
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto Object to be assigned
    def boleto=(boleto : Stripe::PaymentMethodDetailsBoleto?)
      if boleto.nil?
        return @boleto = nil
      end
      @boleto = boleto
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::PaymentMethodDetailsCard?)
      if card.nil?
        return @card = nil
      end
      @card = card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_present Object to be assigned
    def card_present=(card_present : Stripe::PaymentMethodDetailsCardPresent?)
      if card_present.nil?
        return @card_present2 = nil
      end
      @card_present2 = card_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : JSON::Any?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      @customer_balance = customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps Object to be assigned
    def eps=(eps : Stripe::PaymentMethodDetailsEps?)
      if eps.nil?
        return @eps = nil
      end
      @eps = eps
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx Object to be assigned
    def fpx=(fpx : Stripe::PaymentMethodDetailsFpx?)
      if fpx.nil?
        return @fpx = nil
      end
      @fpx = fpx
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay Object to be assigned
    def giropay=(giropay : Stripe::PaymentMethodDetailsGiropay?)
      if giropay.nil?
        return @giropay = nil
      end
      @giropay = giropay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay Object to be assigned
    def grabpay=(grabpay : Stripe::PaymentMethodDetailsGrabpay?)
      if grabpay.nil?
        return @grabpay = nil
      end
      @grabpay = grabpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal Object to be assigned
    def ideal=(ideal : Stripe::PaymentMethodDetailsIdeal?)
      if ideal.nil?
        return @ideal = nil
      end
      @ideal = ideal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interac_present Object to be assigned
    def interac_present=(interac_present : Stripe::PaymentMethodDetailsInteracPresent?)
      if interac_present.nil?
        return @interac_present = nil
      end
      @interac_present = interac_present
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna Object to be assigned
    def klarna=(klarna : Stripe::PaymentMethodDetailsKlarna?)
      if klarna.nil?
        return @klarna = nil
      end
      @klarna = klarna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(konbini : Stripe::PaymentMethodDetailsKonbini?)
      if konbini.nil?
        return @konbini = nil
      end
      @konbini = konbini
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link Object to be assigned
    def link=(link : JSON::Any?)
      if link.nil?
        return @link = nil
      end
      @link = link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco Object to be assigned
    def multibanco=(multibanco : Stripe::PaymentMethodDetailsMultibanco?)
      if multibanco.nil?
        return @multibanco = nil
      end
      @multibanco = multibanco
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo Object to be assigned
    def oxxo=(oxxo : Stripe::PaymentMethodDetailsOxxo?)
      if oxxo.nil?
        return @oxxo = nil
      end
      @oxxo = oxxo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24 Object to be assigned
    def p24=(p24 : Stripe::PaymentMethodDetailsP24?)
      if p24.nil?
        return @p24 = nil
      end
      @p24 = p24
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow Object to be assigned
    def paynow=(paynow : Stripe::PaymentMethodDetailsPaynow?)
      if paynow.nil?
        return @paynow = nil
      end
      @paynow = paynow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pix Object to be assigned
    def pix=(pix : Stripe::PaymentMethodDetailsPix?)
      if pix.nil?
        return @pix = nil
      end
      @pix = pix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay Object to be assigned
    def promptpay=(promptpay : Stripe::PaymentMethodDetailsPromptpay?)
      if promptpay.nil?
        return @promptpay = nil
      end
      @promptpay = promptpay
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit Object to be assigned
    def sepa_debit=(sepa_debit : Stripe::PaymentMethodDetailsSepaDebit?)
      if sepa_debit.nil?
        return @sepa_debit = nil
      end
      @sepa_debit = sepa_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort Object to be assigned
    def sofort=(sofort : Stripe::PaymentMethodDetailsSofort?)
      if sofort.nil?
        return @sofort = nil
      end
      @sofort = sofort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stripe_account Object to be assigned
    def stripe_account=(stripe_account : JSON::Any?)
      if stripe_account.nil?
        return @stripe_account = nil
      end
      @stripe_account = stripe_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(us_bank_account : Stripe::PaymentMethodDetailsUsBankAccount?)
      if us_bank_account.nil?
        return @us_bank_account = nil
      end
      @us_bank_account = us_bank_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat Object to be assigned
    def wechat=(wechat : JSON::Any?)
      if wechat.nil?
        return @wechat = nil
      end
      @wechat = wechat
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wechat_pay Object to be assigned
    def wechat_pay=(wechat_pay : Stripe::PaymentMethodDetailsWechatPay?)
      if wechat_pay.nil?
        return @wechat_pay = nil
      end
      @wechat_pay = wechat_pay
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @ach_credit_transfer, @ach_debit, @acss_debit, @affirm, @afterpay_clearpay, @alipay, @au_becs_debit, @bacs_debit, @bancontact, @blik, @boleto, @card, @card_present2, @customer_balance, @eps, @fpx, @giropay, @grabpay, @ideal, @interac_present, @klarna, @konbini, @link, @multibanco, @oxxo, @p24, @paynow, @pix, @promptpay, @sepa_debit, @sofort, @stripe_account, @us_bank_account, @wechat, @wechat_pay)
  end
end
