#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class CartesBancairesNetworkOptionsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The cryptogram calculation algorithm used by the card Issuer's ACS to calculate the Authentication cryptogram. Also known as `cavvAlgorithm`. messageExtension: CB-AVALGO
    @[JSON::Field(key: "cb_avalgo", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cb_avalgo : String? = nil
    ERROR_MESSAGE_FOR_CB_AVALGO = "invalid value for \"cb_avalgo\", must be one of [0, 1, 2, 3, 4, A]."
    VALID_VALUES_FOR_CB_AVALGO  = String.static_array("0", "1", "2", "3", "4", "A")

    # End of Required Properties

    # Optional Properties

    # The exemption indicator returned from Cartes Bancaires in the ARes. message extension: CB-EXEMPTION; string (4 characters) This is a 3 byte bitmap (low significant byte first and most significant bit first) that has been Base64 encoded
    @[JSON::Field(key: "cb_exemption", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cb_exemption : String? = nil
    MAX_LENGTH_FOR_CB_EXEMPTION = 4

    # The risk score returned from Cartes Bancaires in the ARes. message extension: CB-SCORE; numeric value 0-99
    @[JSON::Field(key: "cb_score", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cb_score : Int64? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @cb_avalgo : String? = nil,
      # Optional properties
      @cb_exemption : String? = nil,
      @cb_score : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"cb_avalgo\" is required and cannot be null") if @cb_avalgo.nil?

      unless (_cb_avalgo = @cb_avalgo).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CB_AVALGO) unless OpenApi::EnumValidator.valid?(_cb_avalgo, VALID_VALUES_FOR_CB_AVALGO)
      end
      unless (_cb_exemption = @cb_exemption).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cb_exemption", _cb_exemption.to_s.size, MAX_LENGTH_FOR_CB_EXEMPTION)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @cb_avalgo.nil?
      unless (_cb_avalgo = @cb_avalgo).nil?
        return false unless OpenApi::EnumValidator.valid?(_cb_avalgo, VALID_VALUES_FOR_CB_AVALGO)
      end

      unless (_cb_exemption = @cb_exemption).nil?
        return false if _cb_exemption.to_s.size > MAX_LENGTH_FOR_CB_EXEMPTION
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cb_avalgo Object to be assigned
    def cb_avalgo=(new_value : String?)
      raise ArgumentError.new("\"cb_avalgo\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("cb_avalgo", new_value, VALID_VALUES_FOR_CB_AVALGO)
      end

      @cb_avalgo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cb_exemption Object to be assigned
    def cb_exemption=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cb_exemption", new_value.to_s.size, MAX_LENGTH_FOR_CB_EXEMPTION)
      end

      @cb_exemption = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cb_score Object to be assigned
    def cb_score=(new_value : Int64?)
      @cb_score = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@cb_avalgo, @cb_exemption, @cb_score)
  end
end
