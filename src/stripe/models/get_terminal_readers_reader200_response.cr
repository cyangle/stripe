#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./deleted_terminal_reader"
require "./terminal_reader"
require "./terminal_reader_location"
require "./terminal_reader_reader_resource_reader_action"

module Stripe
  class GetTerminalReadersReader200Response
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Always true for a deleted object
    @[JSON::Field(key: "deleted", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property deleted : Bool? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [terminal.reader]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("terminal.reader")

    @[JSON::Field(key: "action", type: Stripe::TerminalReaderReaderResourceReaderAction?, default: nil, required: true, nullable: false, emit_null: false)]
    property action : Stripe::TerminalReaderReaderResourceReaderAction? = nil

    # The current software version of the reader.
    @[JSON::Field(key: "device_sw_version", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property device_sw_version : String? = nil
    MAX_LENGTH_FOR_DEVICE_SW_VERSION = 5000

    # Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `stripe_s700`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, `simulated_wisepos_e`, or `mobile_phone_reader`.
    @[JSON::Field(key: "device_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property device_type : String? = nil
    ERROR_MESSAGE_FOR_DEVICE_TYPE = "invalid value for \"device_type\", must be one of [bbpos_chipper2x, bbpos_wisepad3, bbpos_wisepos_e, mobile_phone_reader, simulated_wisepos_e, stripe_m2, stripe_s700, verifone_P400]."
    VALID_VALUES_FOR_DEVICE_TYPE  = String.static_array("bbpos_chipper2x", "bbpos_wisepad3", "bbpos_wisepos_e", "mobile_phone_reader", "simulated_wisepos_e", "stripe_m2", "stripe_s700", "verifone_P400")

    # The local IP address of the reader.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property ip_address : String? = nil
    MAX_LENGTH_FOR_IP_ADDRESS = 5000

    # Custom label given to the reader for easier identification.
    @[JSON::Field(key: "label", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property label : String? = nil
    MAX_LENGTH_FOR_LABEL = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    @[JSON::Field(key: "location", type: Stripe::TerminalReaderLocation?, default: nil, required: true, nullable: true, emit_null: true)]
    property location : Stripe::TerminalReaderLocation? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    property metadata : Hash(String, String)? = nil

    # Serial number of the reader.
    @[JSON::Field(key: "serial_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property serial_number : String? = nil
    MAX_LENGTH_FOR_SERIAL_NUMBER = 5000

    # The networking status of the reader. We do not recommend using this field in flows that may block taking payments.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [offline, online]."
    VALID_VALUES_FOR_STATUS  = String.static_array("offline", "online")

    # End of Required Properties
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::DeletedTerminalReader,
        Stripe::TerminalReader,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @deleted : Bool? = nil,
      @id : String? = nil,
      @object : String? = nil,
      @action : Stripe::TerminalReaderReaderResourceReaderAction? = nil,
      @device_sw_version : String? = nil,
      @device_type : String? = nil,
      @ip_address : String? = nil,
      @label : String? = nil,
      @livemode : Bool? = nil,
      @location : Stripe::TerminalReaderLocation? = nil,
      @metadata : Hash(String, String)? = nil,
      @serial_number : String? = nil,
      @status : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@deleted, @id, @object, @action, @device_sw_version, @device_type, @ip_address, @label, @livemode, @location, @metadata, @serial_number, @status)
  end
end
