#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./radar_review_resource_location"
require "./radar_review_resource_session"
require "./review"
require "./review_charge"
require "./review_payment_intent"

module Stripe
  # ID of the review associated with this charge if one exists.
  class ChargeReview
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ZIP or postal code of the card used, if applicable.
    @[JSON::Field(key: "billing_zip", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property billing_zip : String? = nil
    MAX_LENGTH_FOR_BILLING_ZIP = 5000

    @[JSON::Field(key: "charge", type: Stripe::ReviewCharge?, default: nil, required: true, nullable: true, emit_null: true)]
    property charge : Stripe::ReviewCharge? = nil

    # The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    @[JSON::Field(key: "closed_reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property closed_reason : String? = nil
    ERROR_MESSAGE_FOR_CLOSED_REASON = "invalid value for \"closed_reason\", must be one of [approved, disputed, redacted, refunded, refunded_as_fraud]."
    VALID_VALUES_FOR_CLOSED_REASON  = String.static_array("approved", "disputed", "redacted", "refunded", "refunded_as_fraud")

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The IP address where the payment originated.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property ip_address : String? = nil
    MAX_LENGTH_FOR_IP_ADDRESS = 5000

    @[JSON::Field(key: "ip_address_location", type: Stripe::RadarReviewResourceLocation?, default: nil, required: true, nullable: false, emit_null: false)]
    property ip_address_location : Stripe::RadarReviewResourceLocation? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [review]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("review")

    # If `true`, the review needs action.
    @[JSON::Field(key: "open", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property open : Bool? = nil

    # The reason the review was opened. One of `rule` or `manual`.
    @[JSON::Field(key: "opened_reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property opened_reason : String? = nil
    ERROR_MESSAGE_FOR_OPENED_REASON = "invalid value for \"opened_reason\", must be one of [manual, rule]."
    VALID_VALUES_FOR_OPENED_REASON  = String.static_array("manual", "rule")

    # The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property reason : String? = nil
    MAX_LENGTH_FOR_REASON = 5000

    @[JSON::Field(key: "session", type: Stripe::RadarReviewResourceSession?, default: nil, required: true, nullable: false, emit_null: false)]
    property session : Stripe::RadarReviewResourceSession? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "payment_intent", type: Stripe::ReviewPaymentIntent?, default: nil, required: false, nullable: false, emit_null: false)]
    property payment_intent : Stripe::ReviewPaymentIntent? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Review,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @billing_zip : String? = nil,
      @charge : Stripe::ReviewCharge? = nil,
      @closed_reason : String? = nil,
      @created : Int64? = nil,
      @id : String? = nil,
      @ip_address : String? = nil,
      @ip_address_location : Stripe::RadarReviewResourceLocation? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @open : Bool? = nil,
      @opened_reason : String? = nil,
      @reason : String? = nil,
      @session : Stripe::RadarReviewResourceSession? = nil,
      # Optional properties
      @payment_intent : Stripe::ReviewPaymentIntent? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@billing_zip, @charge, @closed_reason, @created, @id, @ip_address, @ip_address_location, @livemode, @object, @open, @opened_reason, @reason, @session, @payment_intent)
  end
end
