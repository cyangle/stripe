#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./controller_dashboard_specs"
require "./controller_fees_specs"
require "./controller_losses_specs"

module Stripe
  class ControllerSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "fees", type: Stripe::ControllerFeesSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fees : Stripe::ControllerFeesSpecs? = nil

    @[JSON::Field(key: "losses", type: Stripe::ControllerLossesSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter losses : Stripe::ControllerLossesSpecs? = nil

    # A value indicating responsibility for collecting updated information when requirements on the account are due or change. Defaults to `stripe`.
    @[JSON::Field(key: "requirement_collection", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter requirement_collection : String? = nil
    ERROR_MESSAGE_FOR_REQUIREMENT_COLLECTION = "invalid value for \"requirement_collection\", must be one of [application, stripe]."
    VALID_VALUES_FOR_REQUIREMENT_COLLECTION  = String.static_array("application", "stripe")

    @[JSON::Field(key: "stripe_dashboard", type: Stripe::ControllerDashboardSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    getter stripe_dashboard : Stripe::ControllerDashboardSpecs? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @fees : Stripe::ControllerFeesSpecs? = nil,
      @losses : Stripe::ControllerLossesSpecs? = nil,
      @requirement_collection : String? = nil,
      @stripe_dashboard : Stripe::ControllerDashboardSpecs? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_fees = @fees).nil?
        invalid_properties.concat(_fees.list_invalid_properties_for("fees")) if _fees.is_a?(OpenApi::Validatable)
      end
      unless (_losses = @losses).nil?
        invalid_properties.concat(_losses.list_invalid_properties_for("losses")) if _losses.is_a?(OpenApi::Validatable)
      end
      unless (_requirement_collection = @requirement_collection).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUIREMENT_COLLECTION) unless OpenApi::EnumValidator.valid?(_requirement_collection, VALID_VALUES_FOR_REQUIREMENT_COLLECTION)
      end
      unless (_stripe_dashboard = @stripe_dashboard).nil?
        invalid_properties.concat(_stripe_dashboard.list_invalid_properties_for("stripe_dashboard")) if _stripe_dashboard.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_fees = @fees).nil?
        return false if _fees.is_a?(OpenApi::Validatable) && !_fees.valid?
      end

      unless (_losses = @losses).nil?
        return false if _losses.is_a?(OpenApi::Validatable) && !_losses.valid?
      end

      unless (_requirement_collection = @requirement_collection).nil?
        return false unless OpenApi::EnumValidator.valid?(_requirement_collection, VALID_VALUES_FOR_REQUIREMENT_COLLECTION)
      end

      unless (_stripe_dashboard = @stripe_dashboard).nil?
        return false if _stripe_dashboard.is_a?(OpenApi::Validatable) && !_stripe_dashboard.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fees Object to be assigned
    def fees=(new_value : Stripe::ControllerFeesSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fees = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] losses Object to be assigned
    def losses=(new_value : Stripe::ControllerLossesSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @losses = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] requirement_collection Object to be assigned
    def requirement_collection=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("requirement_collection", new_value, VALID_VALUES_FOR_REQUIREMENT_COLLECTION)
      end

      @requirement_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stripe_dashboard Object to be assigned
    def stripe_dashboard=(new_value : Stripe::ControllerDashboardSpecs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @stripe_dashboard = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@fees, @losses, @requirement_collection, @stripe_dashboard)
  end
end
