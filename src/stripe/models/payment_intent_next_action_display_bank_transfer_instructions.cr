#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./funding_instructions_bank_transfer_financial_address"

module Stripe
  #
  class PaymentIntentNextActionDisplayBankTransferInstructions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The remaining amount that needs to be transferred to complete the payment.
    @[JSON::Field(key: "amount_remaining", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_remaining : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter currency : String? = nil

    # A link to a hosted page that guides your customer through completing the transfer.
    @[JSON::Field(key: "hosted_instructions_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter hosted_instructions_url : String? = nil
    MAX_LENGTH_FOR_HOSTED_INSTRUCTIONS_URL = 5000

    # A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter reference : String? = nil
    MAX_LENGTH_FOR_REFERENCE = 5000

    # Type of bank transfer
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [eu_bank_transfer, gb_bank_transfer, jp_bank_transfer, mx_bank_transfer, us_bank_transfer]."
    VALID_VALUES_FOR__TYPE  = String.static_array("eu_bank_transfer", "gb_bank_transfer", "jp_bank_transfer", "mx_bank_transfer", "us_bank_transfer")

    # End of Required Properties

    # Optional Properties

    # A list of financial addresses that can be used to fund the customer balance
    @[JSON::Field(key: "financial_addresses", type: Array(Stripe::FundingInstructionsBankTransferFinancialAddress)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_addresses : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_remaining : Int64? = nil,
      @currency : String? = nil,
      @hosted_instructions_url : String? = nil,
      @reference : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @financial_addresses : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_hosted_instructions_url = @hosted_instructions_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("hosted_instructions_url", _hosted_instructions_url.to_s.size, MAX_LENGTH_FOR_HOSTED_INSTRUCTIONS_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_reference = @reference).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reference", _reference.to_s.size, MAX_LENGTH_FOR_REFERENCE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_financial_addresses = @financial_addresses).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "financial_addresses", container: _financial_addresses)) if _financial_addresses.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_hosted_instructions_url = @hosted_instructions_url).nil?
        return false if _hosted_instructions_url.to_s.size > MAX_LENGTH_FOR_HOSTED_INSTRUCTIONS_URL
      end

      unless (_reference = @reference).nil?
        return false if _reference.to_s.size > MAX_LENGTH_FOR_REFERENCE
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_financial_addresses = @financial_addresses).nil?
        return false if _financial_addresses.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _financial_addresses)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_remaining Object to be assigned
    def amount_remaining=(new_value : Int64?)
      @amount_remaining = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_instructions_url Object to be assigned
    def hosted_instructions_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("hosted_instructions_url", new_value.to_s.size, MAX_LENGTH_FOR_HOSTED_INSTRUCTIONS_URL)
      end

      @hosted_instructions_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("reference", new_value.to_s.size, MAX_LENGTH_FOR_REFERENCE)
      end

      @reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_addresses Object to be assigned
    def financial_addresses=(new_value : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @financial_addresses = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_remaining, @currency, @hosted_instructions_url, @reference, @_type, @financial_addresses)
  end
end
