#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentNextActionDisplayBankTransferInstructions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Type of bank transfer
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["eu_bank_transfer", "gb_bank_transfer", "jp_bank_transfer", "mx_bank_transfer"])

    # Optional properties

    # The remaining amount that needs to be transferred to complete the payment.
    @[JSON::Field(key: "amount_remaining", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount_remaining.nil? && !amount_remaining_present?)]
    getter amount_remaining : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_remaining_present : Bool = false

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # A list of financial addresses that can be used to fund the customer balance
    @[JSON::Field(key: "financial_addresses", type: Array(Stripe::FundingInstructionsBankTransferFinancialAddress)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_addresses : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)? = nil

    # A link to a hosted page that guides your customer through completing the transfer.
    @[JSON::Field(key: "hosted_instructions_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: hosted_instructions_url.nil? && !hosted_instructions_url_present?)]
    getter hosted_instructions_url : String? = nil

    @[JSON::Field(ignore: true)]
    property? hosted_instructions_url_present : Bool = false

    # A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: reference.nil? && !reference_present?)]
    getter reference : String? = nil

    @[JSON::Field(ignore: true)]
    property? reference_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @amount_remaining : Int64? = nil,
      @currency : String? = nil,
      @financial_addresses : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)? = nil,
      @hosted_instructions_url : String? = nil,
      @reference : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      # Container financial_addresses array has values of Stripe::FundingInstructionsBankTransferFinancialAddress
      if _hosted_instructions_url = @hosted_instructions_url
        if _hosted_instructions_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"hosted_instructions_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _reference = @reference
        if _reference.to_s.size > 5000
          invalid_properties.push("invalid value for \"reference\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _hosted_instructions_url = @hosted_instructions_url
        return false if _hosted_instructions_url.to_s.size > 5000
      end
      if _reference = @reference
        return false if _reference.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_remaining Object to be assigned
    def amount_remaining=(amount_remaining : Int64?)
      if amount_remaining.nil?
        return @amount_remaining = nil
      end
      @amount_remaining = amount_remaining
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_addresses Object to be assigned
    def financial_addresses=(financial_addresses : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)?)
      if financial_addresses.nil?
        return @financial_addresses = nil
      end
      @financial_addresses = financial_addresses
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_instructions_url Object to be assigned
    def hosted_instructions_url=(hosted_instructions_url : String?)
      if hosted_instructions_url.nil?
        return @hosted_instructions_url = nil
      end
      _hosted_instructions_url = hosted_instructions_url.not_nil!
      if _hosted_instructions_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"hosted_instructions_url\", the character length must be smaller than or equal to 5000.")
      end

      @hosted_instructions_url = hosted_instructions_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(reference : String?)
      if reference.nil?
        return @reference = nil
      end
      _reference = reference.not_nil!
      if _reference.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reference\", the character length must be smaller than or equal to 5000.")
      end

      @reference = reference
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @amount_remaining, @amount_remaining_present, @currency, @currency_present, @financial_addresses, @hosted_instructions_url, @hosted_instructions_url_present, @reference, @reference_present)
  end
end
