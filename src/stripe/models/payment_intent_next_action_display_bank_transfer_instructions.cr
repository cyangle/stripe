#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentNextActionDisplayBankTransferInstructions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Type of bank transfer
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [eu_bank_transfer, gb_bank_transfer, jp_bank_transfer, mx_bank_transfer]."
    VALID_VALUES_FOR__TYPE  = StaticArray["eu_bank_transfer", "gb_bank_transfer", "jp_bank_transfer", "mx_bank_transfer"]

    # Optional properties

    # The remaining amount that needs to be transferred to complete the payment.
    @[JSON::Field(key: "amount_remaining", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount_remaining.nil? && !amount_remaining_present?)]
    getter amount_remaining : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_remaining_present : Bool = false

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # A list of financial addresses that can be used to fund the customer balance
    @[JSON::Field(key: "financial_addresses", type: Array(Stripe::FundingInstructionsBankTransferFinancialAddress)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_addresses : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)? = nil

    # A link to a hosted page that guides your customer through completing the transfer.
    @[JSON::Field(key: "hosted_instructions_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: hosted_instructions_url.nil? && !hosted_instructions_url_present?)]
    getter hosted_instructions_url : String? = nil
    MAX_LENGTH_FOR_HOSTED_INSTRUCTIONS_URL = 5000

    @[JSON::Field(ignore: true)]
    property? hosted_instructions_url_present : Bool = false

    # A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: reference.nil? && !reference_present?)]
    getter reference : String? = nil
    MAX_LENGTH_FOR_REFERENCE = 5000

    @[JSON::Field(ignore: true)]
    property? reference_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      # Optional properties
      @amount_remaining : Int64? = nil,
      @currency : String? = nil,
      @financial_addresses : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)? = nil,
      @hosted_instructions_url : String? = nil,
      @reference : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      if __type = @_type
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      if _financial_addresses = @financial_addresses
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "financial_addresses", container: _financial_addresses)) if _financial_addresses.is_a?(Array)
      end
      if _hosted_instructions_url = @hosted_instructions_url
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("hosted_instructions_url", _hosted_instructions_url.to_s.size, MAX_LENGTH_FOR_HOSTED_INSTRUCTIONS_URL)
          invalid_properties.push(max_length_error)
        end
      end
      if _reference = @reference
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reference", _reference.to_s.size, MAX_LENGTH_FOR_REFERENCE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      if __type = @_type
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      if _financial_addresses = @financial_addresses
        return false if _financial_addresses.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _financial_addresses)
      end

      if _hosted_instructions_url = @hosted_instructions_url
        return false if _hosted_instructions_url.to_s.size > MAX_LENGTH_FOR_HOSTED_INSTRUCTIONS_URL
      end

      if _reference = @reference
        return false if _reference.to_s.size > MAX_LENGTH_FOR_REFERENCE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      OpenApi::EnumValidator.validate("_type", __type, VALID_VALUES_FOR__TYPE)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_remaining Object to be assigned
    def amount_remaining=(amount_remaining : Int64?)
      if amount_remaining.nil?
        return @amount_remaining = nil
      end
      _amount_remaining = amount_remaining.not_nil!
      @amount_remaining = _amount_remaining
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_addresses Object to be assigned
    def financial_addresses=(financial_addresses : Array(Stripe::FundingInstructionsBankTransferFinancialAddress)?)
      if financial_addresses.nil?
        return @financial_addresses = nil
      end
      _financial_addresses = financial_addresses.not_nil!
      OpenApi::ContainerValidator.validate(container: _financial_addresses) if _financial_addresses.is_a?(Array)
      @financial_addresses = _financial_addresses
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_instructions_url Object to be assigned
    def hosted_instructions_url=(hosted_instructions_url : String?)
      if hosted_instructions_url.nil?
        return @hosted_instructions_url = nil
      end
      _hosted_instructions_url = hosted_instructions_url.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("hosted_instructions_url", _hosted_instructions_url.to_s.size, MAX_LENGTH_FOR_HOSTED_INSTRUCTIONS_URL)
      @hosted_instructions_url = _hosted_instructions_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(reference : String?)
      if reference.nil?
        return @reference = nil
      end
      _reference = reference.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("reference", _reference.to_s.size, MAX_LENGTH_FOR_REFERENCE)
      @reference = _reference
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @amount_remaining, @amount_remaining_present, @currency, @currency_present, @financial_addresses, @hosted_instructions_url, @hosted_instructions_url_present, @reference, @reference_present)
  end
end
