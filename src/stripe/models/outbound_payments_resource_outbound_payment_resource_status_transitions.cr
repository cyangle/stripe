#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class OutboundPaymentsResourceOutboundPaymentResourceStatusTransitions
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Timestamp describing when an OutboundPayment changed status to `canceled`.
    @[JSON::Field(key: "canceled_at", type: Int64?, presence: true, ignore_serialize: canceled_at.nil? && !canceled_at_present?)]
    property canceled_at : Int64?

    @[JSON::Field(ignore: true)]
    property? canceled_at_present : Bool = false

    # Timestamp describing when an OutboundPayment changed status to `failed`.
    @[JSON::Field(key: "failed_at", type: Int64?, presence: true, ignore_serialize: failed_at.nil? && !failed_at_present?)]
    property failed_at : Int64?

    @[JSON::Field(ignore: true)]
    property? failed_at_present : Bool = false

    # Timestamp describing when an OutboundPayment changed status to `posted`.
    @[JSON::Field(key: "posted_at", type: Int64?, presence: true, ignore_serialize: posted_at.nil? && !posted_at_present?)]
    property posted_at : Int64?

    @[JSON::Field(ignore: true)]
    property? posted_at_present : Bool = false

    # Timestamp describing when an OutboundPayment changed status to `returned`.
    @[JSON::Field(key: "returned_at", type: Int64?, presence: true, ignore_serialize: returned_at.nil? && !returned_at_present?)]
    property returned_at : Int64?

    @[JSON::Field(ignore: true)]
    property? returned_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @canceled_at : Int64?, @failed_at : Int64?, @posted_at : Int64?, @returned_at : Int64?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        canceled_at == o.canceled_at &&
        failed_at == o.failed_at &&
        posted_at == o.posted_at &&
        returned_at == o.returned_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@canceled_at, @failed_at, @posted_at, @returned_at)
  end
end
