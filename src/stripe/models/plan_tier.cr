#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class PlanTier
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Price for the entire tier.
    @[JSON::Field(key: "flat_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter flat_amount : Int64? = nil

    # Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
    @[JSON::Field(key: "flat_amount_decimal", type: BigDecimal?, default: nil, required: true, nullable: true, emit_null: true)]
    getter flat_amount_decimal : BigDecimal? = nil

    # Per unit price for units relevant to the tier.
    @[JSON::Field(key: "unit_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter unit_amount : Int64? = nil

    # Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    @[JSON::Field(key: "unit_amount_decimal", type: BigDecimal?, default: nil, required: true, nullable: true, emit_null: true)]
    getter unit_amount_decimal : BigDecimal? = nil

    # Up to and including to this quantity will be contained in the tier.
    @[JSON::Field(key: "up_to", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter up_to : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @flat_amount : Int64? = nil,
      @flat_amount_decimal : BigDecimal? = nil,
      @unit_amount : Int64? = nil,
      @unit_amount_decimal : BigDecimal? = nil,
      @up_to : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flat_amount Object to be assigned
    def flat_amount=(new_value : Int64?)
      @flat_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flat_amount_decimal Object to be assigned
    def flat_amount_decimal=(new_value : BigDecimal?)
      @flat_amount_decimal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount Object to be assigned
    def unit_amount=(new_value : Int64?)
      @unit_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount_decimal Object to be assigned
    def unit_amount_decimal=(new_value : BigDecimal?)
      @unit_amount_decimal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] up_to Object to be assigned
    def up_to=(new_value : Int64?)
      @up_to = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@flat_amount, @flat_amount_decimal, @unit_amount, @unit_amount_decimal, @up_to)
  end
end
