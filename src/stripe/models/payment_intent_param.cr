#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./installments_param"
require "./mandate_options_param"
require "./payment_intent_param_statement_descriptor_suffix_kana"
require "./payment_intent_param_statement_descriptor_suffix_kanji"
require "./payment_method_options_param"

module Stripe
  class PaymentIntentParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Controls when the funds are captured from the customer's account.  If provided, this parameter overrides the behavior of the top-level [capture_method](/api/payment_intents/update#update_payment_intent-capture_method) for this payment method type when finalizing the payment with this payment method type.  If `capture_method` is already set on the PaymentIntent, providing an empty value for this parameter unsets the stored value for this payment method type.
    @[JSON::Field(key: "capture_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter capture_method : String? = nil
    ERROR_MESSAGE_FOR_CAPTURE_METHOD = "invalid value for \"capture_method\", must be one of [, manual]."
    VALID_VALUES_FOR_CAPTURE_METHOD  = String.static_array("", "manual")

    # A single-use `cvc_update` Token that represents a card CVC value. When provided, the CVC value will be verified during the card payment attempt. This parameter can only be provided during confirmation.
    @[JSON::Field(key: "cvc_token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cvc_token : String? = nil
    MAX_LENGTH_FOR_CVC_TOKEN = 5000

    @[JSON::Field(key: "installments", type: Stripe::InstallmentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter installments : Stripe::InstallmentsParam? = nil

    @[JSON::Field(key: "mandate_options", type: Stripe::MandateOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mandate_options : Stripe::MandateOptionsParam? = nil

    # When specified, this parameter indicates that a transaction will be marked as MOTO (Mail Order Telephone Order) and thus out of scope for SCA. This parameter can only be provided during confirmation.
    @[JSON::Field(key: "moto", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter moto : Bool? = nil

    # Selected network to process this PaymentIntent on. Depends on the available networks of the card attached to the PaymentIntent. Can be only set confirm-time.
    @[JSON::Field(key: "network", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter network : String? = nil
    MAX_LENGTH_FOR_NETWORK    = 5000
    ERROR_MESSAGE_FOR_NETWORK = "invalid value for \"network\", must be one of [amex, cartes_bancaires, diners, discover, eftpos_au, girocard, interac, jcb, mastercard, unionpay, unknown, visa]."
    VALID_VALUES_FOR_NETWORK  = String.static_array("amex", "cartes_bancaires", "diners", "discover", "eftpos_au", "girocard", "interac", "jcb", "mastercard", "unionpay", "unknown", "visa")

    # Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent.
    @[JSON::Field(key: "request_extended_authorization", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_extended_authorization : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_EXTENDED_AUTHORIZATION = "invalid value for \"request_extended_authorization\", must be one of [if_available, never]."
    VALID_VALUES_FOR_REQUEST_EXTENDED_AUTHORIZATION  = String.static_array("if_available", "never")

    # Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent.
    @[JSON::Field(key: "request_incremental_authorization", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_incremental_authorization : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_INCREMENTAL_AUTHORIZATION = "invalid value for \"request_incremental_authorization\", must be one of [if_available, never]."
    VALID_VALUES_FOR_REQUEST_INCREMENTAL_AUTHORIZATION  = String.static_array("if_available", "never")

    # Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent.
    @[JSON::Field(key: "request_multicapture", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_multicapture : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_MULTICAPTURE = "invalid value for \"request_multicapture\", must be one of [if_available, never]."
    VALID_VALUES_FOR_REQUEST_MULTICAPTURE  = String.static_array("if_available", "never")

    # Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent.
    @[JSON::Field(key: "request_overcapture", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_overcapture : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_OVERCAPTURE = "invalid value for \"request_overcapture\", must be one of [if_available, never]."
    VALID_VALUES_FOR_REQUEST_OVERCAPTURE  = String.static_array("if_available", "never")

    # We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    @[JSON::Field(key: "request_three_d_secure", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_three_d_secure : String? = nil
    ERROR_MESSAGE_FOR_REQUEST_THREE_D_SECURE = "invalid value for \"request_three_d_secure\", must be one of [any, automatic, challenge]."
    VALID_VALUES_FOR_REQUEST_THREE_D_SECURE  = String.static_array("any", "automatic", "challenge")

    # When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    @[JSON::Field(key: "require_cvc_recollection", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter require_cvc_recollection : Bool? = nil

    # Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
    @[JSON::Field(key: "setup_future_usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_future_usage : String? = nil
    ERROR_MESSAGE_FOR_SETUP_FUTURE_USAGE = "invalid value for \"setup_future_usage\", must be one of [, none, off_session, on_session]."
    VALID_VALUES_FOR_SETUP_FUTURE_USAGE  = String.static_array("", "none", "off_session", "on_session")

    @[JSON::Field(key: "statement_descriptor_suffix_kana", type: Stripe::PaymentIntentParamStatementDescriptorSuffixKana?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kana : Stripe::PaymentIntentParamStatementDescriptorSuffixKana? = nil

    @[JSON::Field(key: "statement_descriptor_suffix_kanji", type: Stripe::PaymentIntentParamStatementDescriptorSuffixKanji?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kanji : Stripe::PaymentIntentParamStatementDescriptorSuffixKanji? = nil

    @[JSON::Field(key: "three_d_secure", type: Stripe::PaymentMethodOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter three_d_secure : Stripe::PaymentMethodOptionsParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @capture_method : String? = nil,
      @cvc_token : String? = nil,
      @installments : Stripe::InstallmentsParam? = nil,
      @mandate_options : Stripe::MandateOptionsParam? = nil,
      @moto : Bool? = nil,
      @network : String? = nil,
      @request_extended_authorization : String? = nil,
      @request_incremental_authorization : String? = nil,
      @request_multicapture : String? = nil,
      @request_overcapture : String? = nil,
      @request_three_d_secure : String? = nil,
      @require_cvc_recollection : Bool? = nil,
      @setup_future_usage : String? = nil,
      @statement_descriptor_suffix_kana : Stripe::PaymentIntentParamStatementDescriptorSuffixKana? = nil,
      @statement_descriptor_suffix_kanji : Stripe::PaymentIntentParamStatementDescriptorSuffixKanji? = nil,
      @three_d_secure : Stripe::PaymentMethodOptionsParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_capture_method = @capture_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CAPTURE_METHOD) unless OpenApi::EnumValidator.valid?(_capture_method, VALID_VALUES_FOR_CAPTURE_METHOD)
      end
      unless (_cvc_token = @cvc_token).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cvc_token", _cvc_token.to_s.size, MAX_LENGTH_FOR_CVC_TOKEN)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_installments = @installments).nil?
        invalid_properties.concat(_installments.list_invalid_properties_for("installments")) if _installments.is_a?(OpenApi::Validatable)
      end
      unless (_mandate_options = @mandate_options).nil?
        invalid_properties.concat(_mandate_options.list_invalid_properties_for("mandate_options")) if _mandate_options.is_a?(OpenApi::Validatable)
      end

      unless (_network = @network).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_NETWORK) unless OpenApi::EnumValidator.valid?(_network, VALID_VALUES_FOR_NETWORK)
      end
      unless (_request_extended_authorization = @request_extended_authorization).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_EXTENDED_AUTHORIZATION) unless OpenApi::EnumValidator.valid?(_request_extended_authorization, VALID_VALUES_FOR_REQUEST_EXTENDED_AUTHORIZATION)
      end
      unless (_request_incremental_authorization = @request_incremental_authorization).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_INCREMENTAL_AUTHORIZATION) unless OpenApi::EnumValidator.valid?(_request_incremental_authorization, VALID_VALUES_FOR_REQUEST_INCREMENTAL_AUTHORIZATION)
      end
      unless (_request_multicapture = @request_multicapture).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_MULTICAPTURE) unless OpenApi::EnumValidator.valid?(_request_multicapture, VALID_VALUES_FOR_REQUEST_MULTICAPTURE)
      end
      unless (_request_overcapture = @request_overcapture).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_OVERCAPTURE) unless OpenApi::EnumValidator.valid?(_request_overcapture, VALID_VALUES_FOR_REQUEST_OVERCAPTURE)
      end
      unless (_request_three_d_secure = @request_three_d_secure).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REQUEST_THREE_D_SECURE) unless OpenApi::EnumValidator.valid?(_request_three_d_secure, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end

      unless (_setup_future_usage = @setup_future_usage).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SETUP_FUTURE_USAGE) unless OpenApi::EnumValidator.valid?(_setup_future_usage, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end
      unless (_statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana).nil?
        invalid_properties.concat(_statement_descriptor_suffix_kana.list_invalid_properties_for("statement_descriptor_suffix_kana")) if _statement_descriptor_suffix_kana.is_a?(OpenApi::Validatable)
      end
      unless (_statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji).nil?
        invalid_properties.concat(_statement_descriptor_suffix_kanji.list_invalid_properties_for("statement_descriptor_suffix_kanji")) if _statement_descriptor_suffix_kanji.is_a?(OpenApi::Validatable)
      end
      unless (_three_d_secure = @three_d_secure).nil?
        invalid_properties.concat(_three_d_secure.list_invalid_properties_for("three_d_secure")) if _three_d_secure.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_capture_method = @capture_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_capture_method, VALID_VALUES_FOR_CAPTURE_METHOD)
      end

      unless (_cvc_token = @cvc_token).nil?
        return false if _cvc_token.to_s.size > MAX_LENGTH_FOR_CVC_TOKEN
      end

      unless (_installments = @installments).nil?
        return false if _installments.is_a?(OpenApi::Validatable) && !_installments.valid?
      end

      unless (_mandate_options = @mandate_options).nil?
        return false if _mandate_options.is_a?(OpenApi::Validatable) && !_mandate_options.valid?
      end

      unless (_network = @network).nil?
        return false unless OpenApi::EnumValidator.valid?(_network, VALID_VALUES_FOR_NETWORK)
      end

      unless (_request_extended_authorization = @request_extended_authorization).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_extended_authorization, VALID_VALUES_FOR_REQUEST_EXTENDED_AUTHORIZATION)
      end

      unless (_request_incremental_authorization = @request_incremental_authorization).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_incremental_authorization, VALID_VALUES_FOR_REQUEST_INCREMENTAL_AUTHORIZATION)
      end

      unless (_request_multicapture = @request_multicapture).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_multicapture, VALID_VALUES_FOR_REQUEST_MULTICAPTURE)
      end

      unless (_request_overcapture = @request_overcapture).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_overcapture, VALID_VALUES_FOR_REQUEST_OVERCAPTURE)
      end

      unless (_request_three_d_secure = @request_three_d_secure).nil?
        return false unless OpenApi::EnumValidator.valid?(_request_three_d_secure, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end

      unless (_setup_future_usage = @setup_future_usage).nil?
        return false unless OpenApi::EnumValidator.valid?(_setup_future_usage, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end

      unless (_statement_descriptor_suffix_kana = @statement_descriptor_suffix_kana).nil?
        return false if _statement_descriptor_suffix_kana.is_a?(OpenApi::Validatable) && !_statement_descriptor_suffix_kana.valid?
      end

      unless (_statement_descriptor_suffix_kanji = @statement_descriptor_suffix_kanji).nil?
        return false if _statement_descriptor_suffix_kanji.is_a?(OpenApi::Validatable) && !_statement_descriptor_suffix_kanji.valid?
      end

      unless (_three_d_secure = @three_d_secure).nil?
        return false if _three_d_secure.is_a?(OpenApi::Validatable) && !_three_d_secure.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capture_method Object to be assigned
    def capture_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("capture_method", new_value, VALID_VALUES_FOR_CAPTURE_METHOD)
      end

      @capture_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc_token Object to be assigned
    def cvc_token=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cvc_token", new_value.to_s.size, MAX_LENGTH_FOR_CVC_TOKEN)
      end

      @cvc_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] installments Object to be assigned
    def installments=(new_value : Stripe::InstallmentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @installments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate_options Object to be assigned
    def mandate_options=(new_value : Stripe::MandateOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mandate_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] moto Object to be assigned
    def moto=(new_value : Bool?)
      @moto = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("network", new_value, VALID_VALUES_FOR_NETWORK)
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_extended_authorization Object to be assigned
    def request_extended_authorization=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_extended_authorization", new_value, VALID_VALUES_FOR_REQUEST_EXTENDED_AUTHORIZATION)
      end

      @request_extended_authorization = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_incremental_authorization Object to be assigned
    def request_incremental_authorization=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_incremental_authorization", new_value, VALID_VALUES_FOR_REQUEST_INCREMENTAL_AUTHORIZATION)
      end

      @request_incremental_authorization = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_multicapture Object to be assigned
    def request_multicapture=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_multicapture", new_value, VALID_VALUES_FOR_REQUEST_MULTICAPTURE)
      end

      @request_multicapture = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_overcapture Object to be assigned
    def request_overcapture=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_overcapture", new_value, VALID_VALUES_FOR_REQUEST_OVERCAPTURE)
      end

      @request_overcapture = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_three_d_secure Object to be assigned
    def request_three_d_secure=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("request_three_d_secure", new_value, VALID_VALUES_FOR_REQUEST_THREE_D_SECURE)
      end

      @request_three_d_secure = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] require_cvc_recollection Object to be assigned
    def require_cvc_recollection=(new_value : Bool?)
      @require_cvc_recollection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("setup_future_usage", new_value, VALID_VALUES_FOR_SETUP_FUTURE_USAGE)
      end

      @setup_future_usage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kana Object to be assigned
    def statement_descriptor_suffix_kana=(new_value : Stripe::PaymentIntentParamStatementDescriptorSuffixKana?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @statement_descriptor_suffix_kana = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kanji Object to be assigned
    def statement_descriptor_suffix_kanji=(new_value : Stripe::PaymentIntentParamStatementDescriptorSuffixKanji?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @statement_descriptor_suffix_kanji = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] three_d_secure Object to be assigned
    def three_d_secure=(new_value : Stripe::PaymentMethodOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @three_d_secure = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@capture_method, @cvc_token, @installments, @mandate_options, @moto, @network, @request_extended_authorization, @request_incremental_authorization, @request_multicapture, @request_overcapture, @request_three_d_secure, @require_cvc_recollection, @setup_future_usage, @statement_descriptor_suffix_kana, @statement_descriptor_suffix_kanji, @three_d_secure)
  end
end
