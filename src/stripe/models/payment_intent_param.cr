#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PaymentIntentParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "capture_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter capture_method : String? = nil

    ENUM_VALIDATOR_FOR_CAPTURE_METHOD = EnumValidator.new("capture_method", "String", ["", "manual"])

    @[JSON::Field(key: "cvc_token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cvc_token : String? = nil

    @[JSON::Field(key: "installments", type: Stripe::InstallmentsParam1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter installments : Stripe::InstallmentsParam1? = nil

    @[JSON::Field(key: "mandate_options", type: Stripe::MandateOptionsParam3?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mandate_options : Stripe::MandateOptionsParam3? = nil

    @[JSON::Field(key: "network", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter network : String? = nil

    ENUM_VALIDATOR_FOR_NETWORK = EnumValidator.new("network", "String", ["amex", "cartes_bancaires", "diners", "discover", "interac", "jcb", "mastercard", "unionpay", "unknown", "visa"])

    @[JSON::Field(key: "request_three_d_secure", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_three_d_secure : String? = nil

    ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE = EnumValidator.new("request_three_d_secure", "String", ["any", "automatic"])

    @[JSON::Field(key: "setup_future_usage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter setup_future_usage : String? = nil

    ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE = EnumValidator.new("setup_future_usage", "String", ["", "none", "off_session", "on_session"])

    @[JSON::Field(key: "statement_descriptor_suffix_kana", type: Stripe::PaymentIntentParamStatementDescriptorSuffixKana?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kana : Stripe::PaymentIntentParamStatementDescriptorSuffixKana? = nil

    @[JSON::Field(key: "statement_descriptor_suffix_kanji", type: Stripe::PaymentIntentParamStatementDescriptorSuffixKanji?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statement_descriptor_suffix_kanji : Stripe::PaymentIntentParamStatementDescriptorSuffixKanji? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @capture_method : String? = nil,
      @cvc_token : String? = nil,
      @installments : Stripe::InstallmentsParam1? = nil,
      @mandate_options : Stripe::MandateOptionsParam3? = nil,
      @network : String? = nil,
      @request_three_d_secure : String? = nil,
      @setup_future_usage : String? = nil,
      @statement_descriptor_suffix_kana : Stripe::PaymentIntentParamStatementDescriptorSuffixKana? = nil,
      @statement_descriptor_suffix_kanji : Stripe::PaymentIntentParamStatementDescriptorSuffixKanji? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_CAPTURE_METHOD.error_message) unless ENUM_VALIDATOR_FOR_CAPTURE_METHOD.valid?(@capture_method)
      if _cvc_token = @cvc_token
        if _cvc_token.to_s.size > 5000
          invalid_properties.push("invalid value for \"cvc_token\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model installments : Stripe::InstallmentsParam1?
      # This is a model mandate_options : Stripe::MandateOptionsParam3?

      invalid_properties.push(ENUM_VALIDATOR_FOR_NETWORK.error_message) unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network)

      invalid_properties.push(ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE.error_message) unless ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE.valid?(@request_three_d_secure)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.error_message) unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)
      # This is a model statement_descriptor_suffix_kana : Stripe::PaymentIntentParamStatementDescriptorSuffixKana?
      # This is a model statement_descriptor_suffix_kanji : Stripe::PaymentIntentParamStatementDescriptorSuffixKanji?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_CAPTURE_METHOD.valid?(@capture_method)
      if _cvc_token = @cvc_token
        return false if _cvc_token.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_NETWORK.valid?(@network)
      return false unless ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE.valid?(@request_three_d_secure)
      return false unless ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid?(@setup_future_usage)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capture_method Object to be assigned
    def capture_method=(capture_method : String?)
      if capture_method.nil?
        return @capture_method = nil
      end
      _capture_method = capture_method.not_nil!
      ENUM_VALIDATOR_FOR_CAPTURE_METHOD.valid!(_capture_method)
      @capture_method = capture_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc_token Object to be assigned
    def cvc_token=(cvc_token : String?)
      if cvc_token.nil?
        return @cvc_token = nil
      end
      _cvc_token = cvc_token.not_nil!
      if _cvc_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cvc_token\", the character length must be smaller than or equal to 5000.")
      end

      @cvc_token = cvc_token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] installments Object to be assigned
    def installments=(installments : Stripe::InstallmentsParam1?)
      if installments.nil?
        return @installments = nil
      end
      @installments = installments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate_options Object to be assigned
    def mandate_options=(mandate_options : Stripe::MandateOptionsParam3?)
      if mandate_options.nil?
        return @mandate_options = nil
      end
      @mandate_options = mandate_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network : String?)
      if network.nil?
        return @network = nil
      end
      _network = network.not_nil!
      ENUM_VALIDATOR_FOR_NETWORK.valid!(_network)
      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_three_d_secure Object to be assigned
    def request_three_d_secure=(request_three_d_secure : String?)
      if request_three_d_secure.nil?
        return @request_three_d_secure = nil
      end
      _request_three_d_secure = request_three_d_secure.not_nil!
      ENUM_VALIDATOR_FOR_REQUEST_THREE_D_SECURE.valid!(_request_three_d_secure)
      @request_three_d_secure = request_three_d_secure
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(setup_future_usage : String?)
      if setup_future_usage.nil?
        return @setup_future_usage = nil
      end
      _setup_future_usage = setup_future_usage.not_nil!
      ENUM_VALIDATOR_FOR_SETUP_FUTURE_USAGE.valid!(_setup_future_usage)
      @setup_future_usage = setup_future_usage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kana Object to be assigned
    def statement_descriptor_suffix_kana=(statement_descriptor_suffix_kana : Stripe::PaymentIntentParamStatementDescriptorSuffixKana?)
      if statement_descriptor_suffix_kana.nil?
        return @statement_descriptor_suffix_kana = nil
      end
      @statement_descriptor_suffix_kana = statement_descriptor_suffix_kana
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix_kanji Object to be assigned
    def statement_descriptor_suffix_kanji=(statement_descriptor_suffix_kanji : Stripe::PaymentIntentParamStatementDescriptorSuffixKanji?)
      if statement_descriptor_suffix_kanji.nil?
        return @statement_descriptor_suffix_kanji = nil
      end
      @statement_descriptor_suffix_kanji = statement_descriptor_suffix_kanji
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@capture_method, @cvc_token, @installments, @mandate_options, @network, @request_three_d_secure, @setup_future_usage, @statement_descriptor_suffix_kana, @statement_descriptor_suffix_kanji)
  end
end
