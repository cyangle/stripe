#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./tier_up_to"

module Stripe
  class Tier
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "up_to", type: Stripe::TierUpTo?, default: nil, required: true, nullable: false, emit_null: false)]
    getter up_to : Stripe::TierUpTo? = nil

    # End of Required Properties

    # Optional Properties

    # The flat billing amount for an entire tier, regardless of the number of units in the tier.
    @[JSON::Field(key: "flat_amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter flat_amount : Int64? = nil

    # Same as `flat_amount`, but accepts a decimal value representing an integer in the minor units of the currency. Only one of `flat_amount` and `flat_amount_decimal` can be set.
    @[JSON::Field(key: "flat_amount_decimal", type: BigDecimal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter flat_amount_decimal : BigDecimal? = nil

    # The per unit billing amount for each individual unit for which this tier applies.
    @[JSON::Field(key: "unit_amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter unit_amount : Int64? = nil

    # Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
    @[JSON::Field(key: "unit_amount_decimal", type: BigDecimal?, default: nil, required: false, nullable: false, emit_null: false)]
    getter unit_amount_decimal : BigDecimal? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @up_to : Stripe::TierUpTo? = nil,
      # Optional properties
      @flat_amount : Int64? = nil,
      @flat_amount_decimal : BigDecimal? = nil,
      @unit_amount : Int64? = nil,
      @unit_amount_decimal : BigDecimal? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"up_to\" is required and cannot be null") if @up_to.nil?

      unless (_up_to = @up_to).nil?
        invalid_properties.concat(_up_to.list_invalid_properties_for("up_to")) if _up_to.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @up_to.nil?
      unless (_up_to = @up_to).nil?
        return false if _up_to.is_a?(OpenApi::Validatable) && !_up_to.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] up_to Object to be assigned
    def up_to=(new_value : Stripe::TierUpTo?)
      raise ArgumentError.new("\"up_to\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @up_to = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flat_amount Object to be assigned
    def flat_amount=(new_value : Int64?)
      @flat_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flat_amount_decimal Object to be assigned
    def flat_amount_decimal=(new_value : BigDecimal?)
      @flat_amount_decimal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount Object to be assigned
    def unit_amount=(new_value : Int64?)
      @unit_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount_decimal Object to be assigned
    def unit_amount_decimal=(new_value : BigDecimal?)
      @unit_amount_decimal = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@up_to, @flat_amount, @flat_amount_decimal, @unit_amount, @unit_amount_decimal)
  end
end
