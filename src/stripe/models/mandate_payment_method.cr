#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # ID of the payment method associated with this mandate.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class MandatePaymentMethod
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "billing_details", type: BillingDetails?)]
    property billing_details : BillingDetails?

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?)]
    property created : Int64?

    @[JSON::Field(key: "customer", type: PaymentMethodCustomer, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    property customer : PaymentMethodCustomer

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?)]
    getter id : String?

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?)]
    property livemode : Bool?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String), presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?)]
    getter object : String?

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["payment_method"])

    # The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    @[JSON::Field(key: "type", type: String?)]
    getter _type : String?

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "card_present", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "interac_present", "klarna", "konbini", "link", "oxxo", "p24", "paynow", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"])

    # Optional properties
    @[JSON::Field(key: "acss_debit", type: PaymentMethodAcssDebit?, presence: true, ignore_serialize: acss_debit.nil? && !acss_debit_present?)]
    property acss_debit : PaymentMethodAcssDebit?

    @[JSON::Field(ignore: true)]
    property? acss_debit_present : Bool = false

    #
    @[JSON::Field(key: "affirm", type: JSON::Any, presence: true, ignore_serialize: affirm.nil? && !affirm_present?)]
    property affirm : JSON::Any

    @[JSON::Field(ignore: true)]
    property? affirm_present : Bool = false

    #
    @[JSON::Field(key: "afterpay_clearpay", type: JSON::Any, presence: true, ignore_serialize: afterpay_clearpay.nil? && !afterpay_clearpay_present?)]
    property afterpay_clearpay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? afterpay_clearpay_present : Bool = false

    #
    @[JSON::Field(key: "alipay", type: JSON::Any, presence: true, ignore_serialize: alipay.nil? && !alipay_present?)]
    property alipay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? alipay_present : Bool = false

    @[JSON::Field(key: "au_becs_debit", type: PaymentMethodAuBecsDebit?, presence: true, ignore_serialize: au_becs_debit.nil? && !au_becs_debit_present?)]
    property au_becs_debit : PaymentMethodAuBecsDebit?

    @[JSON::Field(ignore: true)]
    property? au_becs_debit_present : Bool = false

    @[JSON::Field(key: "bacs_debit", type: PaymentMethodBacsDebit?, presence: true, ignore_serialize: bacs_debit.nil? && !bacs_debit_present?)]
    property bacs_debit : PaymentMethodBacsDebit?

    @[JSON::Field(ignore: true)]
    property? bacs_debit_present : Bool = false

    #
    @[JSON::Field(key: "bancontact", type: JSON::Any, presence: true, ignore_serialize: bancontact.nil? && !bancontact_present?)]
    property bancontact : JSON::Any

    @[JSON::Field(ignore: true)]
    property? bancontact_present : Bool = false

    @[JSON::Field(key: "boleto", type: PaymentMethodBoleto?, presence: true, ignore_serialize: boleto.nil? && !boleto_present?)]
    property boleto : PaymentMethodBoleto?

    @[JSON::Field(ignore: true)]
    property? boleto_present : Bool = false

    @[JSON::Field(key: "card", type: PaymentMethodCard?, presence: true, ignore_serialize: card.nil? && !card_present?)]
    property card : PaymentMethodCard?

    @[JSON::Field(ignore: true)]
    property? card_present : Bool = false

    #
    @[JSON::Field(key: "card_present", type: JSON::Any, presence: true, ignore_serialize: card_present.nil? && !card_present_present?)]
    property card_present2 : JSON::Any

    @[JSON::Field(ignore: true)]
    property? card_present2_present : Bool = false

    #
    @[JSON::Field(key: "customer_balance", type: JSON::Any, presence: true, ignore_serialize: customer_balance.nil? && !customer_balance_present?)]
    property customer_balance : JSON::Any

    @[JSON::Field(ignore: true)]
    property? customer_balance_present : Bool = false

    @[JSON::Field(key: "eps", type: PaymentMethodEps?, presence: true, ignore_serialize: eps.nil? && !eps_present?)]
    property eps : PaymentMethodEps?

    @[JSON::Field(ignore: true)]
    property? eps_present : Bool = false

    @[JSON::Field(key: "fpx", type: PaymentMethodFpx?, presence: true, ignore_serialize: fpx.nil? && !fpx_present?)]
    property fpx : PaymentMethodFpx?

    @[JSON::Field(ignore: true)]
    property? fpx_present : Bool = false

    #
    @[JSON::Field(key: "giropay", type: JSON::Any, presence: true, ignore_serialize: giropay.nil? && !giropay_present?)]
    property giropay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? giropay_present : Bool = false

    #
    @[JSON::Field(key: "grabpay", type: JSON::Any, presence: true, ignore_serialize: grabpay.nil? && !grabpay_present?)]
    property grabpay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? grabpay_present : Bool = false

    @[JSON::Field(key: "ideal", type: PaymentMethodIdeal?, presence: true, ignore_serialize: ideal.nil? && !ideal_present?)]
    property ideal : PaymentMethodIdeal?

    @[JSON::Field(ignore: true)]
    property? ideal_present : Bool = false

    #
    @[JSON::Field(key: "interac_present", type: JSON::Any, presence: true, ignore_serialize: interac_present.nil? && !interac_present_present?)]
    property interac_present : JSON::Any

    @[JSON::Field(ignore: true)]
    property? interac_present_present : Bool = false

    @[JSON::Field(key: "klarna", type: PaymentMethodKlarna?, presence: true, ignore_serialize: klarna.nil? && !klarna_present?)]
    property klarna : PaymentMethodKlarna?

    @[JSON::Field(ignore: true)]
    property? klarna_present : Bool = false

    #
    @[JSON::Field(key: "konbini", type: JSON::Any, presence: true, ignore_serialize: konbini.nil? && !konbini_present?)]
    property konbini : JSON::Any

    @[JSON::Field(ignore: true)]
    property? konbini_present : Bool = false

    @[JSON::Field(key: "link", type: PaymentMethodLink?, presence: true, ignore_serialize: link.nil? && !link_present?)]
    property link : PaymentMethodLink?

    @[JSON::Field(ignore: true)]
    property? link_present : Bool = false

    #
    @[JSON::Field(key: "oxxo", type: JSON::Any, presence: true, ignore_serialize: oxxo.nil? && !oxxo_present?)]
    property oxxo : JSON::Any

    @[JSON::Field(ignore: true)]
    property? oxxo_present : Bool = false

    @[JSON::Field(key: "p24", type: PaymentMethodP24?, presence: true, ignore_serialize: p24.nil? && !p24_present?)]
    property p24 : PaymentMethodP24?

    @[JSON::Field(ignore: true)]
    property? p24_present : Bool = false

    #
    @[JSON::Field(key: "paynow", type: JSON::Any, presence: true, ignore_serialize: paynow.nil? && !paynow_present?)]
    property paynow : JSON::Any

    @[JSON::Field(ignore: true)]
    property? paynow_present : Bool = false

    @[JSON::Field(key: "radar_options", type: RadarRadarOptions?, presence: true, ignore_serialize: radar_options.nil? && !radar_options_present?)]
    property radar_options : RadarRadarOptions?

    @[JSON::Field(ignore: true)]
    property? radar_options_present : Bool = false

    @[JSON::Field(key: "sepa_debit", type: PaymentMethodSepaDebit?, presence: true, ignore_serialize: sepa_debit.nil? && !sepa_debit_present?)]
    property sepa_debit : PaymentMethodSepaDebit?

    @[JSON::Field(ignore: true)]
    property? sepa_debit_present : Bool = false

    @[JSON::Field(key: "sofort", type: PaymentMethodSofort?, presence: true, ignore_serialize: sofort.nil? && !sofort_present?)]
    property sofort : PaymentMethodSofort?

    @[JSON::Field(ignore: true)]
    property? sofort_present : Bool = false

    @[JSON::Field(key: "us_bank_account", type: PaymentMethodUsBankAccount?, presence: true, ignore_serialize: us_bank_account.nil? && !us_bank_account_present?)]
    property us_bank_account : PaymentMethodUsBankAccount?

    @[JSON::Field(ignore: true)]
    property? us_bank_account_present : Bool = false

    #
    @[JSON::Field(key: "wechat_pay", type: JSON::Any, presence: true, ignore_serialize: wechat_pay.nil? && !wechat_pay_present?)]
    property wechat_pay : JSON::Any

    @[JSON::Field(ignore: true)]
    property? wechat_pay_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::PaymentMethod,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @billing_details : BillingDetails, @created : Int64, @customer : PaymentMethodCustomer?, @id : String, @livemode : Bool, @metadata : Hash(String, String)?, @object : String, @_type : String, @acss_debit : PaymentMethodAcssDebit? = nil, @affirm : JSON::Any = nil, @afterpay_clearpay : JSON::Any = nil, @alipay : JSON::Any = nil, @au_becs_debit : PaymentMethodAuBecsDebit? = nil, @bacs_debit : PaymentMethodBacsDebit? = nil, @bancontact : JSON::Any = nil, @boleto : PaymentMethodBoleto? = nil, @card : PaymentMethodCard? = nil, @card_present2 : JSON::Any = nil, @customer_balance : JSON::Any = nil, @eps : PaymentMethodEps? = nil, @fpx : PaymentMethodFpx? = nil, @giropay : JSON::Any = nil, @grabpay : JSON::Any = nil, @ideal : PaymentMethodIdeal? = nil, @interac_present : JSON::Any = nil, @klarna : PaymentMethodKlarna? = nil, @konbini : JSON::Any = nil, @link : PaymentMethodLink? = nil, @oxxo : JSON::Any = nil, @p24 : PaymentMethodP24? = nil, @paynow : JSON::Any = nil, @radar_options : RadarRadarOptions? = nil, @sepa_debit : PaymentMethodSepaDebit? = nil, @sofort : PaymentMethodSofort? = nil, @us_bank_account : PaymentMethodUsBankAccount? = nil, @wechat_pay : JSON::Any = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        acss_debit == o.acss_debit &&
        affirm == o.affirm &&
        afterpay_clearpay == o.afterpay_clearpay &&
        alipay == o.alipay &&
        au_becs_debit == o.au_becs_debit &&
        bacs_debit == o.bacs_debit &&
        bancontact == o.bancontact &&
        billing_details == o.billing_details &&
        boleto == o.boleto &&
        card == o.card &&
        card_present2 == o.card_present2 &&
        created == o.created &&
        customer == o.customer &&
        customer_balance == o.customer_balance &&
        eps == o.eps &&
        fpx == o.fpx &&
        giropay == o.giropay &&
        grabpay == o.grabpay &&
        id == o.id &&
        ideal == o.ideal &&
        interac_present == o.interac_present &&
        klarna == o.klarna &&
        konbini == o.konbini &&
        link == o.link &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        object == o.object &&
        oxxo == o.oxxo &&
        p24 == o.p24 &&
        paynow == o.paynow &&
        radar_options == o.radar_options &&
        sepa_debit == o.sepa_debit &&
        sofort == o.sofort &&
        _type == o._type &&
        us_bank_account == o.us_bank_account &&
        wechat_pay == o.wechat_pay
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@acss_debit, @affirm, @afterpay_clearpay, @alipay, @au_becs_debit, @bacs_debit, @bancontact, @billing_details, @boleto, @card, @card_present2, @created, @customer, @customer_balance, @eps, @fpx, @giropay, @grabpay, @id, @ideal, @interac_present, @klarna, @konbini, @link, @livemode, @metadata, @object, @oxxo, @p24, @paynow, @radar_options, @sepa_debit, @sofort, @_type, @us_bank_account, @wechat_pay)
  end
end
