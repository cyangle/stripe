#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostTaxRatesTaxRateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped


    # Optional properties

    # Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    @[JSON::Field(key: "active", type: Bool?, presence: true, ignore_serialize: active.nil? && !active_present?)]
    property active : Bool?

    @[JSON::Field(ignore: true)]
    property? active_present : Bool = false

    # Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    @[JSON::Field(key: "country", type: String?, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String?

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The display name of the tax rate, which will be shown to users.
    @[JSON::Field(key: "display_name", type: String?, presence: true, ignore_serialize: display_name.nil? && !display_name_present?)]
    getter display_name : String?

    @[JSON::Field(ignore: true)]
    property? display_name_present : Bool = false

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.
    @[JSON::Field(key: "jurisdiction", type: String?, presence: true, ignore_serialize: jurisdiction.nil? && !jurisdiction_present?)]
    getter jurisdiction : String?

    @[JSON::Field(ignore: true)]
    property? jurisdiction_present : Bool = false

    @[JSON::Field(key: "metadata", type: PostAccountRequestMetadata?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : PostAccountRequestMetadata?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \"NY\" for New York, United States.
    @[JSON::Field(key: "state", type: String?, presence: true, ignore_serialize: state.nil? && !state_present?)]
    getter state : String?

    @[JSON::Field(ignore: true)]
    property? state_present : Bool = false

    # The high-level tax type, such as `vat` or `sales_tax`.
    @[JSON::Field(key: "tax_type", type: String?, presence: true, ignore_serialize: tax_type.nil? && !tax_type_present?)]
    getter tax_type : String?

    @[JSON::Field(ignore: true)]
    property? tax_type_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_TYPE = EnumValidator.new("tax_type", "String", ["gst", "hst", "jct", "pst", "qst", "rst", "sales_tax", "vat"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Optional properties
      @active : Bool? = nil, 
      @country : String? = nil, 
      @description : String? = nil, 
      @display_name : String? = nil, 
      @expand : Array(String)? = nil, 
      @jurisdiction : String? = nil, 
      @metadata : PostAccountRequestMetadata? = nil, 
      @state : String? = nil, 
      @tax_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@country.nil? && @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@display_name.nil? && @display_name.to_s.size > 50
        invalid_properties.push("invalid value for \"display_name\", the character length must be smaller than or equal to 50.")
      end

      if !@jurisdiction.nil? && @jurisdiction.to_s.size > 50
        invalid_properties.push("invalid value for \"jurisdiction\", the character length must be smaller than or equal to 50.")
      end

      if !@state.nil? && @state.to_s.size > 2
        invalid_properties.push("invalid value for \"state\", the character length must be smaller than or equal to 2.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_TYPE.error_message) unless ENUM_VALIDATOR_FOR_TAX_TYPE.valid?(@tax_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@country.nil? && @country.to_s.size > 5000
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@display_name.nil? && @display_name.to_s.size > 50
      return false if !@jurisdiction.nil? && @jurisdiction.to_s.size > 50
      return false if !@state.nil? && @state.to_s.size > 2
      return false unless ENUM_VALIDATOR_FOR_TAX_TYPE.valid?(@tax_type)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if !display_name.nil? && display_name.to_s.size > 50
        raise ArgumentError.new("invalid value for \"display_name\", the character length must be smaller than or equal to 50.")
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] jurisdiction Value to be assigned
    def jurisdiction=(jurisdiction)
      if !jurisdiction.nil? && jurisdiction.to_s.size > 50
        raise ArgumentError.new("invalid value for \"jurisdiction\", the character length must be smaller than or equal to 50.")
      end

      @jurisdiction = jurisdiction
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.size > 2
        raise ArgumentError.new("invalid value for \"state\", the character length must be smaller than or equal to 2.")
      end

      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_type Object to be assigned
    def tax_type=(tax_type)
      ENUM_VALIDATOR_FOR_TAX_TYPE.valid!(tax_type)
      @tax_type = tax_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @country, @description, @display_name, @expand, @jurisdiction, @metadata, @state, @tax_type)
  end
end
