#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
  class IssuingCard
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # The brand of the card.
    @[JSON::Field(key: "brand", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter brand : String? = nil

    @[JSON::Field(key: "cardholder", type: Stripe::IssuingCardholder?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cardholder : Stripe::IssuingCardholder? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # The expiration month of the card.
    @[JSON::Field(key: "exp_month", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter exp_month : Int64? = nil

    # The expiration year of the card.
    @[JSON::Field(key: "exp_year", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter exp_year : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The last 4 digits of the card number.
    @[JSON::Field(key: "last4", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter last4 : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["issuing.card"])

    @[JSON::Field(key: "spending_controls", type: Stripe::IssuingCardAuthorizationControls?, default: nil, required: true, nullable: false, emit_null: false)]
    getter spending_controls : Stripe::IssuingCardAuthorizationControls? = nil

    # Whether authorizations can be approved on this card.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["active", "canceled", "inactive"])

    # The type of the card.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["physical", "virtual"])

    # Optional properties

    # The reason why the card was canceled.
    @[JSON::Field(key: "cancellation_reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cancellation_reason.nil? && !cancellation_reason_present?)]
    getter cancellation_reason : String? = nil

    @[JSON::Field(ignore: true)]
    property? cancellation_reason_present : Bool = false

    ENUM_VALIDATOR_FOR_CANCELLATION_REASON = EnumValidator.new("cancellation_reason", "String", ["design_rejected", "lost", "stolen"])

    # The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the [\"Retrieve a card\" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via \"List all cards\" or any other endpoint.
    @[JSON::Field(key: "cvc", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cvc : String? = nil

    # The financial account this card is attached to.
    @[JSON::Field(key: "financial_account", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: financial_account.nil? && !financial_account_present?)]
    getter financial_account : String? = nil

    @[JSON::Field(ignore: true)]
    property? financial_account_present : Bool = false

    # The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the [\"Retrieve a card\" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via \"List all cards\" or any other endpoint.
    @[JSON::Field(key: "number", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter number : String? = nil

    @[JSON::Field(key: "replaced_by", type: Stripe::IssuingCardReplacedBy?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: replaced_by.nil? && !replaced_by_present?)]
    getter replaced_by : Stripe::IssuingCardReplacedBy? = nil

    @[JSON::Field(ignore: true)]
    property? replaced_by_present : Bool = false

    @[JSON::Field(key: "replacement_for", type: Stripe::IssuingCardReplacementFor?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: replacement_for.nil? && !replacement_for_present?)]
    getter replacement_for : Stripe::IssuingCardReplacementFor? = nil

    @[JSON::Field(ignore: true)]
    property? replacement_for_present : Bool = false

    # The reason why the previous card needed to be replaced.
    @[JSON::Field(key: "replacement_reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: replacement_reason.nil? && !replacement_reason_present?)]
    getter replacement_reason : String? = nil

    @[JSON::Field(ignore: true)]
    property? replacement_reason_present : Bool = false

    ENUM_VALIDATOR_FOR_REPLACEMENT_REASON = EnumValidator.new("replacement_reason", "String", ["damaged", "expired", "lost", "stolen"])

    @[JSON::Field(key: "shipping", type: Stripe::IssuingCardShipping1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping.nil? && !shipping_present?)]
    getter shipping : Stripe::IssuingCardShipping1? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_present : Bool = false

    @[JSON::Field(key: "wallets", type: Stripe::IssuingCardWallets1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: wallets.nil? && !wallets_present?)]
    getter wallets : Stripe::IssuingCardWallets1? = nil

    @[JSON::Field(ignore: true)]
    property? wallets_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @brand : String? = nil,
      @cardholder : Stripe::IssuingCardholder? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @exp_month : Int64? = nil,
      @exp_year : Int64? = nil,
      @id : String? = nil,
      @last4 : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @spending_controls : Stripe::IssuingCardAuthorizationControls? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @cancellation_reason : String? = nil,
      @cvc : String? = nil,
      @financial_account : String? = nil,
      @number : String? = nil,
      @replaced_by : Stripe::IssuingCardReplacedBy? = nil,
      @replacement_for : Stripe::IssuingCardReplacementFor? = nil,
      @replacement_reason : String? = nil,
      @shipping : Stripe::IssuingCardShipping1? = nil,
      @wallets : Stripe::IssuingCardWallets1? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"brand\" is required and cannot be null") if @brand.nil?
      if _brand = @brand
        if _brand.to_s.size > 5000
          invalid_properties.push("invalid value for \"brand\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"cardholder\" is required and cannot be null") if @cardholder.nil?
      if _cardholder = @cardholder
        if _cardholder.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_cardholder.list_invalid_properties_for("cardholder"))
        end
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"exp_month\" is required and cannot be null") if @exp_month.nil?

      invalid_properties.push("\"exp_year\" is required and cannot be null") if @exp_year.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"last4\" is required and cannot be null") if @last4.nil?
      if _last4 = @last4
        if _last4.to_s.size > 5000
          invalid_properties.push("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"spending_controls\" is required and cannot be null") if @spending_controls.nil?
      if _spending_controls = @spending_controls
        if _spending_controls.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_spending_controls.list_invalid_properties_for("spending_controls"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_CANCELLATION_REASON.error_message) unless ENUM_VALIDATOR_FOR_CANCELLATION_REASON.valid?(@cancellation_reason)
      if _cvc = @cvc
        if _cvc.to_s.size > 5000
          invalid_properties.push("invalid value for \"cvc\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _financial_account = @financial_account
        if _financial_account.to_s.size > 5000
          invalid_properties.push("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _number = @number
        if _number.to_s.size > 5000
          invalid_properties.push("invalid value for \"number\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _replaced_by = @replaced_by
        if _replaced_by.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_replaced_by.list_invalid_properties_for("replaced_by"))
        end
      end
      if _replacement_for = @replacement_for
        if _replacement_for.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_replacement_for.list_invalid_properties_for("replacement_for"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_REPLACEMENT_REASON.error_message) unless ENUM_VALIDATOR_FOR_REPLACEMENT_REASON.valid?(@replacement_reason)
      if _shipping = @shipping
        if _shipping.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_shipping.list_invalid_properties_for("shipping"))
        end
      end
      if _wallets = @wallets
        if _wallets.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_wallets.list_invalid_properties_for("wallets"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @brand.nil?
      if _brand = @brand
        return false if _brand.to_s.size > 5000
      end
      return false if @cardholder.nil?
      if _cardholder = @cardholder
        if _cardholder.is_a?(OpenApi::Validatable)
          return false unless _cardholder.valid?
        end
      end
      return false if @created.nil?

      return false if @currency.nil?

      return false if @exp_month.nil?

      return false if @exp_year.nil?

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @last4.nil?
      if _last4 = @last4
        return false if _last4.to_s.size > 5000
      end
      return false if @livemode.nil?

      return false if @metadata.nil?

      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @spending_controls.nil?
      if _spending_controls = @spending_controls
        if _spending_controls.is_a?(OpenApi::Validatable)
          return false unless _spending_controls.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      return false unless ENUM_VALIDATOR_FOR_CANCELLATION_REASON.valid?(@cancellation_reason)
      if _cvc = @cvc
        return false if _cvc.to_s.size > 5000
      end
      if _financial_account = @financial_account
        return false if _financial_account.to_s.size > 5000
      end
      if _number = @number
        return false if _number.to_s.size > 5000
      end
      if _replaced_by = @replaced_by
        if _replaced_by.is_a?(OpenApi::Validatable)
          return false unless _replaced_by.valid?
        end
      end
      if _replacement_for = @replacement_for
        if _replacement_for.is_a?(OpenApi::Validatable)
          return false unless _replacement_for.valid?
        end
      end
      return false unless ENUM_VALIDATOR_FOR_REPLACEMENT_REASON.valid?(@replacement_reason)
      if _shipping = @shipping
        if _shipping.is_a?(OpenApi::Validatable)
          return false unless _shipping.valid?
        end
      end
      if _wallets = @wallets
        if _wallets.is_a?(OpenApi::Validatable)
          return false unless _wallets.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] brand Object to be assigned
    def brand=(brand : String?)
      if brand.nil?
        raise ArgumentError.new("\"brand\" is required and cannot be null")
      end
      _brand = brand.not_nil!
      if _brand.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"brand\", the character length must be smaller than or equal to 5000.")
      end

      @brand = _brand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cardholder Object to be assigned
    def cardholder=(cardholder : Stripe::IssuingCardholder?)
      if cardholder.nil?
        raise ArgumentError.new("\"cardholder\" is required and cannot be null")
      end
      _cardholder = cardholder.not_nil!
      if _cardholder.is_a?(OpenApi::Validatable)
        _cardholder.validate
      end
      @cardholder = _cardholder
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exp_month Object to be assigned
    def exp_month=(exp_month : Int64?)
      if exp_month.nil?
        raise ArgumentError.new("\"exp_month\" is required and cannot be null")
      end
      _exp_month = exp_month.not_nil!
      @exp_month = _exp_month
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exp_year Object to be assigned
    def exp_year=(exp_year : Int64?)
      if exp_year.nil?
        raise ArgumentError.new("\"exp_year\" is required and cannot be null")
      end
      _exp_year = exp_year.not_nil!
      @exp_year = _exp_year
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last4 Object to be assigned
    def last4=(last4 : String?)
      if last4.nil?
        raise ArgumentError.new("\"last4\" is required and cannot be null")
      end
      _last4 = last4.not_nil!
      if _last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      @last4 = _last4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] spending_controls Object to be assigned
    def spending_controls=(spending_controls : Stripe::IssuingCardAuthorizationControls?)
      if spending_controls.nil?
        raise ArgumentError.new("\"spending_controls\" is required and cannot be null")
      end
      _spending_controls = spending_controls.not_nil!
      if _spending_controls.is_a?(OpenApi::Validatable)
        _spending_controls.validate
      end
      @spending_controls = _spending_controls
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_reason Object to be assigned
    def cancellation_reason=(cancellation_reason : String?)
      if cancellation_reason.nil?
        return @cancellation_reason = nil
      end
      _cancellation_reason = cancellation_reason.not_nil!
      ENUM_VALIDATOR_FOR_CANCELLATION_REASON.valid!(_cancellation_reason)
      @cancellation_reason = _cancellation_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc Object to be assigned
    def cvc=(cvc : String?)
      if cvc.nil?
        return @cvc = nil
      end
      _cvc = cvc.not_nil!
      if _cvc.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cvc\", the character length must be smaller than or equal to 5000.")
      end

      @cvc = _cvc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_account Object to be assigned
    def financial_account=(financial_account : String?)
      if financial_account.nil?
        return @financial_account = nil
      end
      _financial_account = financial_account.not_nil!
      if _financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      @financial_account = _financial_account
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number Object to be assigned
    def number=(number : String?)
      if number.nil?
        return @number = nil
      end
      _number = number.not_nil!
      if _number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"number\", the character length must be smaller than or equal to 5000.")
      end

      @number = _number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replaced_by Object to be assigned
    def replaced_by=(replaced_by : Stripe::IssuingCardReplacedBy?)
      if replaced_by.nil?
        return @replaced_by = nil
      end
      _replaced_by = replaced_by.not_nil!
      if _replaced_by.is_a?(OpenApi::Validatable)
        _replaced_by.validate
      end
      @replaced_by = _replaced_by
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replacement_for Object to be assigned
    def replacement_for=(replacement_for : Stripe::IssuingCardReplacementFor?)
      if replacement_for.nil?
        return @replacement_for = nil
      end
      _replacement_for = replacement_for.not_nil!
      if _replacement_for.is_a?(OpenApi::Validatable)
        _replacement_for.validate
      end
      @replacement_for = _replacement_for
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replacement_reason Object to be assigned
    def replacement_reason=(replacement_reason : String?)
      if replacement_reason.nil?
        return @replacement_reason = nil
      end
      _replacement_reason = replacement_reason.not_nil!
      ENUM_VALIDATOR_FOR_REPLACEMENT_REASON.valid!(_replacement_reason)
      @replacement_reason = _replacement_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping Object to be assigned
    def shipping=(shipping : Stripe::IssuingCardShipping1?)
      if shipping.nil?
        return @shipping = nil
      end
      _shipping = shipping.not_nil!
      if _shipping.is_a?(OpenApi::Validatable)
        _shipping.validate
      end
      @shipping = _shipping
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallets Object to be assigned
    def wallets=(wallets : Stripe::IssuingCardWallets1?)
      if wallets.nil?
        return @wallets = nil
      end
      _wallets = wallets.not_nil!
      if _wallets.is_a?(OpenApi::Validatable)
        _wallets.validate
      end
      @wallets = _wallets
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@brand, @cardholder, @created, @currency, @exp_month, @exp_year, @id, @last4, @livemode, @metadata, @object, @spending_controls, @status, @_type, @cancellation_reason, @cancellation_reason_present, @cvc, @financial_account, @financial_account_present, @number, @replaced_by, @replaced_by_present, @replacement_for, @replacement_for_present, @replacement_reason, @replacement_reason_present, @shipping, @shipping_present, @wallets, @wallets_present)
  end
end
