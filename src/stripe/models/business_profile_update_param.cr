#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./business_profile_create_param_headline"
require "./business_profile_update_param_privacy_policy_url"
require "./business_profile_update_param_terms_of_service_url"

module Stripe
  class BusinessProfileUpdateParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "headline", type: Stripe::BusinessProfileCreateParamHeadline?, default: nil, required: false, nullable: false, emit_null: false)]
    getter headline : Stripe::BusinessProfileCreateParamHeadline? = nil

    @[JSON::Field(key: "privacy_policy_url", type: Stripe::BusinessProfileUpdateParamPrivacyPolicyUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter privacy_policy_url : Stripe::BusinessProfileUpdateParamPrivacyPolicyUrl? = nil

    @[JSON::Field(key: "terms_of_service_url", type: Stripe::BusinessProfileUpdateParamTermsOfServiceUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter terms_of_service_url : Stripe::BusinessProfileUpdateParamTermsOfServiceUrl? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @headline : Stripe::BusinessProfileCreateParamHeadline? = nil,
      @privacy_policy_url : Stripe::BusinessProfileUpdateParamPrivacyPolicyUrl? = nil,
      @terms_of_service_url : Stripe::BusinessProfileUpdateParamTermsOfServiceUrl? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_headline = @headline).nil?
        invalid_properties.concat(_headline.list_invalid_properties_for("headline")) if _headline.is_a?(OpenApi::Validatable)
      end
      unless (_privacy_policy_url = @privacy_policy_url).nil?
        invalid_properties.concat(_privacy_policy_url.list_invalid_properties_for("privacy_policy_url")) if _privacy_policy_url.is_a?(OpenApi::Validatable)
      end
      unless (_terms_of_service_url = @terms_of_service_url).nil?
        invalid_properties.concat(_terms_of_service_url.list_invalid_properties_for("terms_of_service_url")) if _terms_of_service_url.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_headline = @headline).nil?
        return false if _headline.is_a?(OpenApi::Validatable) && !_headline.valid?
      end

      unless (_privacy_policy_url = @privacy_policy_url).nil?
        return false if _privacy_policy_url.is_a?(OpenApi::Validatable) && !_privacy_policy_url.valid?
      end

      unless (_terms_of_service_url = @terms_of_service_url).nil?
        return false if _terms_of_service_url.is_a?(OpenApi::Validatable) && !_terms_of_service_url.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] headline Object to be assigned
    def headline=(new_value : Stripe::BusinessProfileCreateParamHeadline?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @headline = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] privacy_policy_url Object to be assigned
    def privacy_policy_url=(new_value : Stripe::BusinessProfileUpdateParamPrivacyPolicyUrl?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @privacy_policy_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terms_of_service_url Object to be assigned
    def terms_of_service_url=(new_value : Stripe::BusinessProfileUpdateParamTermsOfServiceUrl?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @terms_of_service_url = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@headline, @privacy_policy_url, @terms_of_service_url)
  end
end
