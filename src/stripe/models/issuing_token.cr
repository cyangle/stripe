#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_network_token_network_data"
require "./issuing_token_card"

module Stripe
  # An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.
  class IssuingToken
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "card", type: Stripe::IssuingTokenCard?, default: nil, required: true, nullable: false, emit_null: false)]
    getter card : Stripe::IssuingTokenCard? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # The hashed ID derived from the device ID from the card network associated with the token.
    @[JSON::Field(key: "device_fingerprint", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter device_fingerprint : String? = nil
    MAX_LENGTH_FOR_DEVICE_FINGERPRINT = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The token service provider / card network associated with the token.
    @[JSON::Field(key: "network", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network : String? = nil
    ERROR_MESSAGE_FOR_NETWORK = "invalid value for \"network\", must be one of [mastercard, visa]."
    VALID_VALUES_FOR_NETWORK  = String.static_array("mastercard", "visa")

    # Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "network_updated_at", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network_updated_at : Int64? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [issuing.token]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("issuing.token")

    # The usage state of the token.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, deleted, requested, suspended]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "deleted", "requested", "suspended")

    # End of Required Properties

    # Optional Properties

    # The last four digits of the token.
    @[JSON::Field(key: "last4", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter last4 : String? = nil
    MAX_LENGTH_FOR_LAST4 = 5000

    @[JSON::Field(key: "network_data", type: Stripe::IssuingNetworkTokenNetworkData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter network_data : Stripe::IssuingNetworkTokenNetworkData? = nil

    # The digital wallet for this token, if one was used.
    @[JSON::Field(key: "wallet_provider", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wallet_provider : String? = nil
    ERROR_MESSAGE_FOR_WALLET_PROVIDER = "invalid value for \"wallet_provider\", must be one of [apple_pay, google_pay, samsung_pay]."
    VALID_VALUES_FOR_WALLET_PROVIDER  = String.static_array("apple_pay", "google_pay", "samsung_pay")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @card : Stripe::IssuingTokenCard? = nil,
      @created : Int64? = nil,
      @device_fingerprint : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @network : String? = nil,
      @network_updated_at : Int64? = nil,
      @object : String? = nil,
      @status : String? = nil,
      # Optional properties
      @last4 : String? = nil,
      @network_data : Stripe::IssuingNetworkTokenNetworkData? = nil,
      @wallet_provider : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"card\" is required and cannot be null") if @card.nil?

      unless (_card = @card).nil?
        invalid_properties.concat(_card.list_invalid_properties_for("card")) if _card.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      unless (_device_fingerprint = @device_fingerprint).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("device_fingerprint", _device_fingerprint.to_s.size, MAX_LENGTH_FOR_DEVICE_FINGERPRINT)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"network\" is required and cannot be null") if @network.nil?

      unless (_network = @network).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_NETWORK) unless OpenApi::EnumValidator.valid?(_network, VALID_VALUES_FOR_NETWORK)
      end
      invalid_properties.push("\"network_updated_at\" is required and cannot be null") if @network_updated_at.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      unless (_last4 = @last4).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("last4", _last4.to_s.size, MAX_LENGTH_FOR_LAST4)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_network_data = @network_data).nil?
        invalid_properties.concat(_network_data.list_invalid_properties_for("network_data")) if _network_data.is_a?(OpenApi::Validatable)
      end
      unless (_wallet_provider = @wallet_provider).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_WALLET_PROVIDER) unless OpenApi::EnumValidator.valid?(_wallet_provider, VALID_VALUES_FOR_WALLET_PROVIDER)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @card.nil?
      unless (_card = @card).nil?
        return false if _card.is_a?(OpenApi::Validatable) && !_card.valid?
      end

      return false if @created.nil?

      unless (_device_fingerprint = @device_fingerprint).nil?
        return false if _device_fingerprint.to_s.size > MAX_LENGTH_FOR_DEVICE_FINGERPRINT
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @network.nil?
      unless (_network = @network).nil?
        return false unless OpenApi::EnumValidator.valid?(_network, VALID_VALUES_FOR_NETWORK)
      end

      return false if @network_updated_at.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      unless (_last4 = @last4).nil?
        return false if _last4.to_s.size > MAX_LENGTH_FOR_LAST4
      end

      unless (_network_data = @network_data).nil?
        return false if _network_data.is_a?(OpenApi::Validatable) && !_network_data.valid?
      end

      unless (_wallet_provider = @wallet_provider).nil?
        return false unless OpenApi::EnumValidator.valid?(_wallet_provider, VALID_VALUES_FOR_WALLET_PROVIDER)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : Stripe::IssuingTokenCard?)
      raise ArgumentError.new("\"card\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_fingerprint Object to be assigned
    def device_fingerprint=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("device_fingerprint", new_value.to_s.size, MAX_LENGTH_FOR_DEVICE_FINGERPRINT)
      end

      @device_fingerprint = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : String?)
      raise ArgumentError.new("\"network\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("network", new_value, VALID_VALUES_FOR_NETWORK)
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_updated_at Object to be assigned
    def network_updated_at=(new_value : Int64?)
      raise ArgumentError.new("\"network_updated_at\" is required and cannot be null") if new_value.nil?

      @network_updated_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last4 Object to be assigned
    def last4=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("last4", new_value.to_s.size, MAX_LENGTH_FOR_LAST4)
      end

      @last4 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_data Object to be assigned
    def network_data=(new_value : Stripe::IssuingNetworkTokenNetworkData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @network_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet_provider Object to be assigned
    def wallet_provider=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("wallet_provider", new_value, VALID_VALUES_FOR_WALLET_PROVIDER)
      end

      @wallet_provider = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@card, @created, @device_fingerprint, @id, @livemode, @network, @network_updated_at, @object, @status, @last4, @network_data, @wallet_provider)
  end
end
