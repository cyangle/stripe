#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_card_specs"
require "./networks_param_specs"

module Stripe
  # The card this token will represent. If you also pass in a customer, the card must be the ID of a card belonging to the customer. Otherwise, if you do not pass in a customer, this is a dictionary containing a user's credit card details, with the options described below.
  class PostTokensRequestCard
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Two-digit number representing the card's expiration month.
    @[JSON::Field(key: "exp_month", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property exp_month : String? = nil
    MAX_LENGTH_FOR_EXP_MONTH = 5000

    # Two- or four-digit number representing the card's expiration year.
    @[JSON::Field(key: "exp_year", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property exp_year : String? = nil
    MAX_LENGTH_FOR_EXP_YEAR = 5000

    # The card number, as a string without any separators.
    @[JSON::Field(key: "number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property number : String? = nil
    MAX_LENGTH_FOR_NUMBER = 5000

    # End of Required Properties

    # Optional Properties

    # City / District / Suburb / Town / Village.
    @[JSON::Field(key: "address_city", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property address_city : String? = nil
    MAX_LENGTH_FOR_ADDRESS_CITY = 5000

    # Billing address country, if provided.
    @[JSON::Field(key: "address_country", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property address_country : String? = nil
    MAX_LENGTH_FOR_ADDRESS_COUNTRY = 5000

    # Address line 1 (Street address / PO Box / Company name).
    @[JSON::Field(key: "address_line1", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property address_line1 : String? = nil
    MAX_LENGTH_FOR_ADDRESS_LINE1 = 5000

    # Address line 2 (Apartment / Suite / Unit / Building).
    @[JSON::Field(key: "address_line2", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property address_line2 : String? = nil
    MAX_LENGTH_FOR_ADDRESS_LINE2 = 5000

    # State / County / Province / Region.
    @[JSON::Field(key: "address_state", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property address_state : String? = nil
    MAX_LENGTH_FOR_ADDRESS_STATE = 5000

    # ZIP or postal code.
    @[JSON::Field(key: "address_zip", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property address_zip : String? = nil
    MAX_LENGTH_FOR_ADDRESS_ZIP = 5000

    # Required in order to add the card to an account; in all other cases, this parameter is not used. When added to an account, the card (which must be a debit card) can be used as a transfer destination for funds in this currency.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property currency : String? = nil
    MAX_LENGTH_FOR_CURRENCY = 5000

    # Card security code. Highly recommended to always include this value.
    @[JSON::Field(key: "cvc", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property cvc : String? = nil
    MAX_LENGTH_FOR_CVC = 5000

    # Cardholder's full name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    property name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    @[JSON::Field(key: "networks", type: Stripe::NetworksParamSpecs?, default: nil, required: false, nullable: false, emit_null: false)]
    property networks : Stripe::NetworksParamSpecs? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::CreditCardSpecs,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @exp_month : String? = nil,
      @exp_year : String? = nil,
      @number : String? = nil,
      # Optional properties
      @address_city : String? = nil,
      @address_country : String? = nil,
      @address_line1 : String? = nil,
      @address_line2 : String? = nil,
      @address_state : String? = nil,
      @address_zip : String? = nil,
      @currency : String? = nil,
      @cvc : String? = nil,
      @name : String? = nil,
      @networks : Stripe::NetworksParamSpecs? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@exp_month, @exp_year, @number, @address_city, @address_country, @address_line1, @address_line2, @address_state, @address_zip, @currency, @cvc, @name, @networks)
  end
end
