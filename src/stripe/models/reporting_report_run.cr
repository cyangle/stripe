#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # The Report Run object represents an instance of a report type generated with specific run parameters. Once the object is created, Stripe begins processing the report. When the report has finished running, it will give you a reference to a file where you can retrieve your results. For an overview, see [API Access to Reports](https://stripe.com/docs/reporting/statements/api).  Note that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ReportingReportRun
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # `true` if the report is run on live mode data and `false` if it is run on test mode data.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["reporting.report_run"])

    @[JSON::Field(key: "parameters", type: FinancialReportingFinanceReportRunRunParameters)]
    property parameters : FinancialReportingFinanceReportRunRunParameters

    # The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `\"balance.summary.1\"`.
    @[JSON::Field(key: "report_type", type: String)]
    getter report_type : String

    # Status of this report run. This will be `pending` when the run is initially created.  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    # Optional properties

    # If something should go wrong during the run, a message about the failure (populated when  `status=failed`).
    @[JSON::Field(key: "error", type: String?, presence: true, ignore_serialize: error.nil? && !error_present?)]
    getter error : String?

    @[JSON::Field(ignore: true)]
    property? error_present : Bool = false

    @[JSON::Field(key: "result", type: ReportingReportRunResult?, presence: true, ignore_serialize: result.nil? && !result_present?)]
    property result : ReportingReportRunResult?

    @[JSON::Field(ignore: true)]
    property? result_present : Bool = false

    # Timestamp at which this run successfully finished (populated when  `status=succeeded`). Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "succeeded_at", type: Int64?, presence: true, ignore_serialize: succeeded_at.nil? && !succeeded_at_present?)]
    property succeeded_at : Int64?

    @[JSON::Field(ignore: true)]
    property? succeeded_at_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64,
      @id : String,
      @livemode : Bool,
      @object : String,
      @parameters : FinancialReportingFinanceReportRunRunParameters,
      @report_type : String,
      @status : String,
      # Optional properties
      @error : String? = nil,
      @result : ReportingReportRunResult? = nil,
      @succeeded_at : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @report_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"report_type\", the character length must be smaller than or equal to 5000.")
      end

      if @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      if !@error.nil? && @error.to_s.size > 5000
        invalid_properties.push("invalid value for \"error\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @report_type.to_s.size > 5000
      return false if @status.to_s.size > 5000
      return false if !@error.nil? && @error.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] report_type Value to be assigned
    def report_type=(report_type : String)
      if report_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"report_type\", the character length must be smaller than or equal to 5000.")
      end

      @report_type = report_type
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status : String)
      if status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] error Value to be assigned
    def error=(error : String?)
      if !error.nil? && error.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"error\", the character length must be smaller than or equal to 5000.")
      end

      @error = error
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @id, @livemode, @object, @parameters, @report_type, @status, @error, @error_present, @result, @result_present, @succeeded_at, @succeeded_at_present)
  end
end
