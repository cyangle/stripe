#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Parameters to be passed to Shipping Rate creation for this shipping option
  @[JSON::Serializable::Options(emit_nulls: true)]
  class MethodParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    @[JSON::Field(key: "display_name", type: String)]
    getter display_name : String

    # Optional properties
    @[JSON::Field(key: "delivery_estimate", type: DeliveryEstimate?, presence: true, ignore_serialize: delivery_estimate.nil? && !delivery_estimate_present?)]
    property delivery_estimate : DeliveryEstimate?

    @[JSON::Field(ignore: true)]
    property? delivery_estimate_present : Bool = false

    @[JSON::Field(key: "fixed_amount", type: FixedAmount?, presence: true, ignore_serialize: fixed_amount.nil? && !fixed_amount_present?)]
    property fixed_amount : FixedAmount?

    @[JSON::Field(ignore: true)]
    property? fixed_amount_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    @[JSON::Field(key: "tax_behavior", type: String?, presence: true, ignore_serialize: tax_behavior.nil? && !tax_behavior_present?)]
    getter tax_behavior : String?

    @[JSON::Field(ignore: true)]
    property? tax_behavior_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_BEHAVIOR = EnumValidator.new("tax_behavior", "String", ["exclusive", "inclusive", "unspecified"])

    # A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
    @[JSON::Field(key: "tax_code", type: String?, presence: true, ignore_serialize: tax_code.nil? && !tax_code_present?)]
    property tax_code : String?

    @[JSON::Field(ignore: true)]
    property? tax_code_present : Bool = false

    # The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    @[JSON::Field(key: "type", type: String?, presence: true, ignore_serialize: _type.nil? && !_type_present?)]
    getter _type : String?

    @[JSON::Field(ignore: true)]
    property? _type_present : Bool = false

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["fixed_amount"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @display_name : String, @delivery_estimate : DeliveryEstimate? = nil, @fixed_amount : FixedAmount? = nil, @metadata : Hash(String, String)? = nil, @tax_behavior : String? = nil, @tax_code : String? = nil, @_type : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @display_name.to_s.size > 100
        invalid_properties.push("invalid value for \"display_name\", the character length must be smaller than or equal to 100.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @display_name.to_s.size > 100
      return false unless ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid?(@tax_behavior)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if display_name.to_s.size > 100
        raise ArgumentError.new("invalid value for \"display_name\", the character length must be smaller than or equal to 100.")
      end

      @display_name = display_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_behavior Object to be assigned
    def tax_behavior=(tax_behavior)
      ENUM_VALIDATOR_FOR_TAX_BEHAVIOR.valid!(tax_behavior)
      @tax_behavior = tax_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        delivery_estimate == o.delivery_estimate &&
        display_name == o.display_name &&
        fixed_amount == o.fixed_amount &&
        metadata == o.metadata &&
        tax_behavior == o.tax_behavior &&
        tax_code == o.tax_code &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@delivery_estimate, @display_name, @fixed_amount, @metadata, @tax_behavior, @tax_code, @_type)
  end
end
