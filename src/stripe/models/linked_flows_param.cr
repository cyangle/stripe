#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class LinkedFlowsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "source_flow_type", type: String)]
    getter source_flow_type : String

    ENUM_VALIDATOR_FOR_SOURCE_FLOW_TYPE = EnumValidator.new("source_flow_type", "String", ["credit_reversal", "other", "outbound_payment", "payout"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @source_flow_type : String
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_SOURCE_FLOW_TYPE.error_message) unless ENUM_VALIDATOR_FOR_SOURCE_FLOW_TYPE.valid?(@source_flow_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_SOURCE_FLOW_TYPE.valid?(@source_flow_type, false)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_flow_type Object to be assigned
    def source_flow_type=(source_flow_type)
      ENUM_VALIDATOR_FOR_SOURCE_FLOW_TYPE.valid!(source_flow_type, false)
      @source_flow_type = source_flow_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@source_flow_type)
  end
end
