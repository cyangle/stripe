#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./tax_param_ip_address"

module Stripe
  class TaxParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "ip_address", type: Stripe::TaxParamIpAddress?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ip_address : Stripe::TaxParamIpAddress? = nil

    # A flag that indicates when Stripe should validate the customer tax location. Defaults to `deferred`.
    @[JSON::Field(key: "validate_location", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter validate_location : String? = nil
    ERROR_MESSAGE_FOR_VALIDATE_LOCATION = "invalid value for \"validate_location\", must be one of [deferred, immediately]."
    VALID_VALUES_FOR_VALIDATE_LOCATION  = String.static_array("deferred", "immediately")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @ip_address : Stripe::TaxParamIpAddress? = nil,
      @validate_location : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_ip_address = @ip_address).nil?
        invalid_properties.concat(_ip_address.list_invalid_properties_for("ip_address")) if _ip_address.is_a?(OpenApi::Validatable)
      end
      unless (_validate_location = @validate_location).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_VALIDATE_LOCATION) unless OpenApi::EnumValidator.valid?(_validate_location, VALID_VALUES_FOR_VALIDATE_LOCATION)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_ip_address = @ip_address).nil?
        return false if _ip_address.is_a?(OpenApi::Validatable) && !_ip_address.valid?
      end

      unless (_validate_location = @validate_location).nil?
        return false unless OpenApi::EnumValidator.valid?(_validate_location, VALID_VALUES_FOR_VALIDATE_LOCATION)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(new_value : Stripe::TaxParamIpAddress?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ip_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] validate_location Object to be assigned
    def validate_location=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("validate_location", new_value, VALID_VALUES_FOR_VALIDATE_LOCATION)
      end

      @validate_location = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@ip_address, @validate_location)
  end
end
