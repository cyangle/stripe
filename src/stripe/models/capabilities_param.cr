#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
  class CapabilitiesParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "acss_debit_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "affirm_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "afterpay_clearpay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "au_becs_debit_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "bacs_debit_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "bancontact_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "bank_transfer_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_transfer_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "blik_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "boleto_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "card_issuing", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_issuing : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "card_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "cartes_bancaires_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cartes_bancaires_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "eps_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "fpx_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "giropay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "grabpay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "ideal_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "jcb_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jcb_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "klarna_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "konbini_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "legacy_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter legacy_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "link_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "oxxo_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "p24_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "paynow_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "promptpay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "sepa_debit_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "sofort_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "tax_reporting_us_1099_k", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_reporting_us_1099_k : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "tax_reporting_us_1099_misc", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_reporting_us_1099_misc : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "transfers", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfers : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "treasury", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter treasury : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "us_bank_account_ach_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account_ach_payments : Stripe::CapabilityParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit_payments : Stripe::CapabilityParam? = nil,
      @affirm_payments : Stripe::CapabilityParam? = nil,
      @afterpay_clearpay_payments : Stripe::CapabilityParam? = nil,
      @au_becs_debit_payments : Stripe::CapabilityParam? = nil,
      @bacs_debit_payments : Stripe::CapabilityParam? = nil,
      @bancontact_payments : Stripe::CapabilityParam? = nil,
      @bank_transfer_payments : Stripe::CapabilityParam? = nil,
      @blik_payments : Stripe::CapabilityParam? = nil,
      @boleto_payments : Stripe::CapabilityParam? = nil,
      @card_issuing : Stripe::CapabilityParam? = nil,
      @card_payments : Stripe::CapabilityParam? = nil,
      @cartes_bancaires_payments : Stripe::CapabilityParam? = nil,
      @eps_payments : Stripe::CapabilityParam? = nil,
      @fpx_payments : Stripe::CapabilityParam? = nil,
      @giropay_payments : Stripe::CapabilityParam? = nil,
      @grabpay_payments : Stripe::CapabilityParam? = nil,
      @ideal_payments : Stripe::CapabilityParam? = nil,
      @jcb_payments : Stripe::CapabilityParam? = nil,
      @klarna_payments : Stripe::CapabilityParam? = nil,
      @konbini_payments : Stripe::CapabilityParam? = nil,
      @legacy_payments : Stripe::CapabilityParam? = nil,
      @link_payments : Stripe::CapabilityParam? = nil,
      @oxxo_payments : Stripe::CapabilityParam? = nil,
      @p24_payments : Stripe::CapabilityParam? = nil,
      @paynow_payments : Stripe::CapabilityParam? = nil,
      @promptpay_payments : Stripe::CapabilityParam? = nil,
      @sepa_debit_payments : Stripe::CapabilityParam? = nil,
      @sofort_payments : Stripe::CapabilityParam? = nil,
      @tax_reporting_us_1099_k : Stripe::CapabilityParam? = nil,
      @tax_reporting_us_1099_misc : Stripe::CapabilityParam? = nil,
      @transfers : Stripe::CapabilityParam? = nil,
      @treasury : Stripe::CapabilityParam? = nil,
      @us_bank_account_ach_payments : Stripe::CapabilityParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _acss_debit_payments = @acss_debit_payments
        invalid_properties.concat(_acss_debit_payments.list_invalid_properties_for("acss_debit_payments")) if _acss_debit_payments.is_a?(OpenApi::Validatable)
      end
      if _affirm_payments = @affirm_payments
        invalid_properties.concat(_affirm_payments.list_invalid_properties_for("affirm_payments")) if _affirm_payments.is_a?(OpenApi::Validatable)
      end
      if _afterpay_clearpay_payments = @afterpay_clearpay_payments
        invalid_properties.concat(_afterpay_clearpay_payments.list_invalid_properties_for("afterpay_clearpay_payments")) if _afterpay_clearpay_payments.is_a?(OpenApi::Validatable)
      end
      if _au_becs_debit_payments = @au_becs_debit_payments
        invalid_properties.concat(_au_becs_debit_payments.list_invalid_properties_for("au_becs_debit_payments")) if _au_becs_debit_payments.is_a?(OpenApi::Validatable)
      end
      if _bacs_debit_payments = @bacs_debit_payments
        invalid_properties.concat(_bacs_debit_payments.list_invalid_properties_for("bacs_debit_payments")) if _bacs_debit_payments.is_a?(OpenApi::Validatable)
      end
      if _bancontact_payments = @bancontact_payments
        invalid_properties.concat(_bancontact_payments.list_invalid_properties_for("bancontact_payments")) if _bancontact_payments.is_a?(OpenApi::Validatable)
      end
      if _bank_transfer_payments = @bank_transfer_payments
        invalid_properties.concat(_bank_transfer_payments.list_invalid_properties_for("bank_transfer_payments")) if _bank_transfer_payments.is_a?(OpenApi::Validatable)
      end
      if _blik_payments = @blik_payments
        invalid_properties.concat(_blik_payments.list_invalid_properties_for("blik_payments")) if _blik_payments.is_a?(OpenApi::Validatable)
      end
      if _boleto_payments = @boleto_payments
        invalid_properties.concat(_boleto_payments.list_invalid_properties_for("boleto_payments")) if _boleto_payments.is_a?(OpenApi::Validatable)
      end
      if _card_issuing = @card_issuing
        invalid_properties.concat(_card_issuing.list_invalid_properties_for("card_issuing")) if _card_issuing.is_a?(OpenApi::Validatable)
      end
      if _card_payments = @card_payments
        invalid_properties.concat(_card_payments.list_invalid_properties_for("card_payments")) if _card_payments.is_a?(OpenApi::Validatable)
      end
      if _cartes_bancaires_payments = @cartes_bancaires_payments
        invalid_properties.concat(_cartes_bancaires_payments.list_invalid_properties_for("cartes_bancaires_payments")) if _cartes_bancaires_payments.is_a?(OpenApi::Validatable)
      end
      if _eps_payments = @eps_payments
        invalid_properties.concat(_eps_payments.list_invalid_properties_for("eps_payments")) if _eps_payments.is_a?(OpenApi::Validatable)
      end
      if _fpx_payments = @fpx_payments
        invalid_properties.concat(_fpx_payments.list_invalid_properties_for("fpx_payments")) if _fpx_payments.is_a?(OpenApi::Validatable)
      end
      if _giropay_payments = @giropay_payments
        invalid_properties.concat(_giropay_payments.list_invalid_properties_for("giropay_payments")) if _giropay_payments.is_a?(OpenApi::Validatable)
      end
      if _grabpay_payments = @grabpay_payments
        invalid_properties.concat(_grabpay_payments.list_invalid_properties_for("grabpay_payments")) if _grabpay_payments.is_a?(OpenApi::Validatable)
      end
      if _ideal_payments = @ideal_payments
        invalid_properties.concat(_ideal_payments.list_invalid_properties_for("ideal_payments")) if _ideal_payments.is_a?(OpenApi::Validatable)
      end
      if _jcb_payments = @jcb_payments
        invalid_properties.concat(_jcb_payments.list_invalid_properties_for("jcb_payments")) if _jcb_payments.is_a?(OpenApi::Validatable)
      end
      if _klarna_payments = @klarna_payments
        invalid_properties.concat(_klarna_payments.list_invalid_properties_for("klarna_payments")) if _klarna_payments.is_a?(OpenApi::Validatable)
      end
      if _konbini_payments = @konbini_payments
        invalid_properties.concat(_konbini_payments.list_invalid_properties_for("konbini_payments")) if _konbini_payments.is_a?(OpenApi::Validatable)
      end
      if _legacy_payments = @legacy_payments
        invalid_properties.concat(_legacy_payments.list_invalid_properties_for("legacy_payments")) if _legacy_payments.is_a?(OpenApi::Validatable)
      end
      if _link_payments = @link_payments
        invalid_properties.concat(_link_payments.list_invalid_properties_for("link_payments")) if _link_payments.is_a?(OpenApi::Validatable)
      end
      if _oxxo_payments = @oxxo_payments
        invalid_properties.concat(_oxxo_payments.list_invalid_properties_for("oxxo_payments")) if _oxxo_payments.is_a?(OpenApi::Validatable)
      end
      if _p24_payments = @p24_payments
        invalid_properties.concat(_p24_payments.list_invalid_properties_for("p24_payments")) if _p24_payments.is_a?(OpenApi::Validatable)
      end
      if _paynow_payments = @paynow_payments
        invalid_properties.concat(_paynow_payments.list_invalid_properties_for("paynow_payments")) if _paynow_payments.is_a?(OpenApi::Validatable)
      end
      if _promptpay_payments = @promptpay_payments
        invalid_properties.concat(_promptpay_payments.list_invalid_properties_for("promptpay_payments")) if _promptpay_payments.is_a?(OpenApi::Validatable)
      end
      if _sepa_debit_payments = @sepa_debit_payments
        invalid_properties.concat(_sepa_debit_payments.list_invalid_properties_for("sepa_debit_payments")) if _sepa_debit_payments.is_a?(OpenApi::Validatable)
      end
      if _sofort_payments = @sofort_payments
        invalid_properties.concat(_sofort_payments.list_invalid_properties_for("sofort_payments")) if _sofort_payments.is_a?(OpenApi::Validatable)
      end
      if _tax_reporting_us_1099_k = @tax_reporting_us_1099_k
        invalid_properties.concat(_tax_reporting_us_1099_k.list_invalid_properties_for("tax_reporting_us_1099_k")) if _tax_reporting_us_1099_k.is_a?(OpenApi::Validatable)
      end
      if _tax_reporting_us_1099_misc = @tax_reporting_us_1099_misc
        invalid_properties.concat(_tax_reporting_us_1099_misc.list_invalid_properties_for("tax_reporting_us_1099_misc")) if _tax_reporting_us_1099_misc.is_a?(OpenApi::Validatable)
      end
      if _transfers = @transfers
        invalid_properties.concat(_transfers.list_invalid_properties_for("transfers")) if _transfers.is_a?(OpenApi::Validatable)
      end
      if _treasury = @treasury
        invalid_properties.concat(_treasury.list_invalid_properties_for("treasury")) if _treasury.is_a?(OpenApi::Validatable)
      end
      if _us_bank_account_ach_payments = @us_bank_account_ach_payments
        invalid_properties.concat(_us_bank_account_ach_payments.list_invalid_properties_for("us_bank_account_ach_payments")) if _us_bank_account_ach_payments.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _acss_debit_payments = @acss_debit_payments
        return false if _acss_debit_payments.is_a?(OpenApi::Validatable) && !_acss_debit_payments.valid?
      end
      if _affirm_payments = @affirm_payments
        return false if _affirm_payments.is_a?(OpenApi::Validatable) && !_affirm_payments.valid?
      end
      if _afterpay_clearpay_payments = @afterpay_clearpay_payments
        return false if _afterpay_clearpay_payments.is_a?(OpenApi::Validatable) && !_afterpay_clearpay_payments.valid?
      end
      if _au_becs_debit_payments = @au_becs_debit_payments
        return false if _au_becs_debit_payments.is_a?(OpenApi::Validatable) && !_au_becs_debit_payments.valid?
      end
      if _bacs_debit_payments = @bacs_debit_payments
        return false if _bacs_debit_payments.is_a?(OpenApi::Validatable) && !_bacs_debit_payments.valid?
      end
      if _bancontact_payments = @bancontact_payments
        return false if _bancontact_payments.is_a?(OpenApi::Validatable) && !_bancontact_payments.valid?
      end
      if _bank_transfer_payments = @bank_transfer_payments
        return false if _bank_transfer_payments.is_a?(OpenApi::Validatable) && !_bank_transfer_payments.valid?
      end
      if _blik_payments = @blik_payments
        return false if _blik_payments.is_a?(OpenApi::Validatable) && !_blik_payments.valid?
      end
      if _boleto_payments = @boleto_payments
        return false if _boleto_payments.is_a?(OpenApi::Validatable) && !_boleto_payments.valid?
      end
      if _card_issuing = @card_issuing
        return false if _card_issuing.is_a?(OpenApi::Validatable) && !_card_issuing.valid?
      end
      if _card_payments = @card_payments
        return false if _card_payments.is_a?(OpenApi::Validatable) && !_card_payments.valid?
      end
      if _cartes_bancaires_payments = @cartes_bancaires_payments
        return false if _cartes_bancaires_payments.is_a?(OpenApi::Validatable) && !_cartes_bancaires_payments.valid?
      end
      if _eps_payments = @eps_payments
        return false if _eps_payments.is_a?(OpenApi::Validatable) && !_eps_payments.valid?
      end
      if _fpx_payments = @fpx_payments
        return false if _fpx_payments.is_a?(OpenApi::Validatable) && !_fpx_payments.valid?
      end
      if _giropay_payments = @giropay_payments
        return false if _giropay_payments.is_a?(OpenApi::Validatable) && !_giropay_payments.valid?
      end
      if _grabpay_payments = @grabpay_payments
        return false if _grabpay_payments.is_a?(OpenApi::Validatable) && !_grabpay_payments.valid?
      end
      if _ideal_payments = @ideal_payments
        return false if _ideal_payments.is_a?(OpenApi::Validatable) && !_ideal_payments.valid?
      end
      if _jcb_payments = @jcb_payments
        return false if _jcb_payments.is_a?(OpenApi::Validatable) && !_jcb_payments.valid?
      end
      if _klarna_payments = @klarna_payments
        return false if _klarna_payments.is_a?(OpenApi::Validatable) && !_klarna_payments.valid?
      end
      if _konbini_payments = @konbini_payments
        return false if _konbini_payments.is_a?(OpenApi::Validatable) && !_konbini_payments.valid?
      end
      if _legacy_payments = @legacy_payments
        return false if _legacy_payments.is_a?(OpenApi::Validatable) && !_legacy_payments.valid?
      end
      if _link_payments = @link_payments
        return false if _link_payments.is_a?(OpenApi::Validatable) && !_link_payments.valid?
      end
      if _oxxo_payments = @oxxo_payments
        return false if _oxxo_payments.is_a?(OpenApi::Validatable) && !_oxxo_payments.valid?
      end
      if _p24_payments = @p24_payments
        return false if _p24_payments.is_a?(OpenApi::Validatable) && !_p24_payments.valid?
      end
      if _paynow_payments = @paynow_payments
        return false if _paynow_payments.is_a?(OpenApi::Validatable) && !_paynow_payments.valid?
      end
      if _promptpay_payments = @promptpay_payments
        return false if _promptpay_payments.is_a?(OpenApi::Validatable) && !_promptpay_payments.valid?
      end
      if _sepa_debit_payments = @sepa_debit_payments
        return false if _sepa_debit_payments.is_a?(OpenApi::Validatable) && !_sepa_debit_payments.valid?
      end
      if _sofort_payments = @sofort_payments
        return false if _sofort_payments.is_a?(OpenApi::Validatable) && !_sofort_payments.valid?
      end
      if _tax_reporting_us_1099_k = @tax_reporting_us_1099_k
        return false if _tax_reporting_us_1099_k.is_a?(OpenApi::Validatable) && !_tax_reporting_us_1099_k.valid?
      end
      if _tax_reporting_us_1099_misc = @tax_reporting_us_1099_misc
        return false if _tax_reporting_us_1099_misc.is_a?(OpenApi::Validatable) && !_tax_reporting_us_1099_misc.valid?
      end
      if _transfers = @transfers
        return false if _transfers.is_a?(OpenApi::Validatable) && !_transfers.valid?
      end
      if _treasury = @treasury
        return false if _treasury.is_a?(OpenApi::Validatable) && !_treasury.valid?
      end
      if _us_bank_account_ach_payments = @us_bank_account_ach_payments
        return false if _us_bank_account_ach_payments.is_a?(OpenApi::Validatable) && !_us_bank_account_ach_payments.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit_payments Object to be assigned
    def acss_debit_payments=(acss_debit_payments : Stripe::CapabilityParam?)
      if acss_debit_payments.nil?
        return @acss_debit_payments = nil
      end
      _acss_debit_payments = acss_debit_payments.not_nil!
      _acss_debit_payments.validate if _acss_debit_payments.is_a?(OpenApi::Validatable)
      @acss_debit_payments = _acss_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm_payments Object to be assigned
    def affirm_payments=(affirm_payments : Stripe::CapabilityParam?)
      if affirm_payments.nil?
        return @affirm_payments = nil
      end
      _affirm_payments = affirm_payments.not_nil!
      _affirm_payments.validate if _affirm_payments.is_a?(OpenApi::Validatable)
      @affirm_payments = _affirm_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay_payments Object to be assigned
    def afterpay_clearpay_payments=(afterpay_clearpay_payments : Stripe::CapabilityParam?)
      if afterpay_clearpay_payments.nil?
        return @afterpay_clearpay_payments = nil
      end
      _afterpay_clearpay_payments = afterpay_clearpay_payments.not_nil!
      _afterpay_clearpay_payments.validate if _afterpay_clearpay_payments.is_a?(OpenApi::Validatable)
      @afterpay_clearpay_payments = _afterpay_clearpay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit_payments Object to be assigned
    def au_becs_debit_payments=(au_becs_debit_payments : Stripe::CapabilityParam?)
      if au_becs_debit_payments.nil?
        return @au_becs_debit_payments = nil
      end
      _au_becs_debit_payments = au_becs_debit_payments.not_nil!
      _au_becs_debit_payments.validate if _au_becs_debit_payments.is_a?(OpenApi::Validatable)
      @au_becs_debit_payments = _au_becs_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit_payments Object to be assigned
    def bacs_debit_payments=(bacs_debit_payments : Stripe::CapabilityParam?)
      if bacs_debit_payments.nil?
        return @bacs_debit_payments = nil
      end
      _bacs_debit_payments = bacs_debit_payments.not_nil!
      _bacs_debit_payments.validate if _bacs_debit_payments.is_a?(OpenApi::Validatable)
      @bacs_debit_payments = _bacs_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact_payments Object to be assigned
    def bancontact_payments=(bancontact_payments : Stripe::CapabilityParam?)
      if bancontact_payments.nil?
        return @bancontact_payments = nil
      end
      _bancontact_payments = bancontact_payments.not_nil!
      _bancontact_payments.validate if _bancontact_payments.is_a?(OpenApi::Validatable)
      @bancontact_payments = _bancontact_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_payments Object to be assigned
    def bank_transfer_payments=(bank_transfer_payments : Stripe::CapabilityParam?)
      if bank_transfer_payments.nil?
        return @bank_transfer_payments = nil
      end
      _bank_transfer_payments = bank_transfer_payments.not_nil!
      _bank_transfer_payments.validate if _bank_transfer_payments.is_a?(OpenApi::Validatable)
      @bank_transfer_payments = _bank_transfer_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik_payments Object to be assigned
    def blik_payments=(blik_payments : Stripe::CapabilityParam?)
      if blik_payments.nil?
        return @blik_payments = nil
      end
      _blik_payments = blik_payments.not_nil!
      _blik_payments.validate if _blik_payments.is_a?(OpenApi::Validatable)
      @blik_payments = _blik_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto_payments Object to be assigned
    def boleto_payments=(boleto_payments : Stripe::CapabilityParam?)
      if boleto_payments.nil?
        return @boleto_payments = nil
      end
      _boleto_payments = boleto_payments.not_nil!
      _boleto_payments.validate if _boleto_payments.is_a?(OpenApi::Validatable)
      @boleto_payments = _boleto_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_issuing Object to be assigned
    def card_issuing=(card_issuing : Stripe::CapabilityParam?)
      if card_issuing.nil?
        return @card_issuing = nil
      end
      _card_issuing = card_issuing.not_nil!
      _card_issuing.validate if _card_issuing.is_a?(OpenApi::Validatable)
      @card_issuing = _card_issuing
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_payments Object to be assigned
    def card_payments=(card_payments : Stripe::CapabilityParam?)
      if card_payments.nil?
        return @card_payments = nil
      end
      _card_payments = card_payments.not_nil!
      _card_payments.validate if _card_payments.is_a?(OpenApi::Validatable)
      @card_payments = _card_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cartes_bancaires_payments Object to be assigned
    def cartes_bancaires_payments=(cartes_bancaires_payments : Stripe::CapabilityParam?)
      if cartes_bancaires_payments.nil?
        return @cartes_bancaires_payments = nil
      end
      _cartes_bancaires_payments = cartes_bancaires_payments.not_nil!
      _cartes_bancaires_payments.validate if _cartes_bancaires_payments.is_a?(OpenApi::Validatable)
      @cartes_bancaires_payments = _cartes_bancaires_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps_payments Object to be assigned
    def eps_payments=(eps_payments : Stripe::CapabilityParam?)
      if eps_payments.nil?
        return @eps_payments = nil
      end
      _eps_payments = eps_payments.not_nil!
      _eps_payments.validate if _eps_payments.is_a?(OpenApi::Validatable)
      @eps_payments = _eps_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx_payments Object to be assigned
    def fpx_payments=(fpx_payments : Stripe::CapabilityParam?)
      if fpx_payments.nil?
        return @fpx_payments = nil
      end
      _fpx_payments = fpx_payments.not_nil!
      _fpx_payments.validate if _fpx_payments.is_a?(OpenApi::Validatable)
      @fpx_payments = _fpx_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay_payments Object to be assigned
    def giropay_payments=(giropay_payments : Stripe::CapabilityParam?)
      if giropay_payments.nil?
        return @giropay_payments = nil
      end
      _giropay_payments = giropay_payments.not_nil!
      _giropay_payments.validate if _giropay_payments.is_a?(OpenApi::Validatable)
      @giropay_payments = _giropay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay_payments Object to be assigned
    def grabpay_payments=(grabpay_payments : Stripe::CapabilityParam?)
      if grabpay_payments.nil?
        return @grabpay_payments = nil
      end
      _grabpay_payments = grabpay_payments.not_nil!
      _grabpay_payments.validate if _grabpay_payments.is_a?(OpenApi::Validatable)
      @grabpay_payments = _grabpay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal_payments Object to be assigned
    def ideal_payments=(ideal_payments : Stripe::CapabilityParam?)
      if ideal_payments.nil?
        return @ideal_payments = nil
      end
      _ideal_payments = ideal_payments.not_nil!
      _ideal_payments.validate if _ideal_payments.is_a?(OpenApi::Validatable)
      @ideal_payments = _ideal_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jcb_payments Object to be assigned
    def jcb_payments=(jcb_payments : Stripe::CapabilityParam?)
      if jcb_payments.nil?
        return @jcb_payments = nil
      end
      _jcb_payments = jcb_payments.not_nil!
      _jcb_payments.validate if _jcb_payments.is_a?(OpenApi::Validatable)
      @jcb_payments = _jcb_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna_payments Object to be assigned
    def klarna_payments=(klarna_payments : Stripe::CapabilityParam?)
      if klarna_payments.nil?
        return @klarna_payments = nil
      end
      _klarna_payments = klarna_payments.not_nil!
      _klarna_payments.validate if _klarna_payments.is_a?(OpenApi::Validatable)
      @klarna_payments = _klarna_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini_payments Object to be assigned
    def konbini_payments=(konbini_payments : Stripe::CapabilityParam?)
      if konbini_payments.nil?
        return @konbini_payments = nil
      end
      _konbini_payments = konbini_payments.not_nil!
      _konbini_payments.validate if _konbini_payments.is_a?(OpenApi::Validatable)
      @konbini_payments = _konbini_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] legacy_payments Object to be assigned
    def legacy_payments=(legacy_payments : Stripe::CapabilityParam?)
      if legacy_payments.nil?
        return @legacy_payments = nil
      end
      _legacy_payments = legacy_payments.not_nil!
      _legacy_payments.validate if _legacy_payments.is_a?(OpenApi::Validatable)
      @legacy_payments = _legacy_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_payments Object to be assigned
    def link_payments=(link_payments : Stripe::CapabilityParam?)
      if link_payments.nil?
        return @link_payments = nil
      end
      _link_payments = link_payments.not_nil!
      _link_payments.validate if _link_payments.is_a?(OpenApi::Validatable)
      @link_payments = _link_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo_payments Object to be assigned
    def oxxo_payments=(oxxo_payments : Stripe::CapabilityParam?)
      if oxxo_payments.nil?
        return @oxxo_payments = nil
      end
      _oxxo_payments = oxxo_payments.not_nil!
      _oxxo_payments.validate if _oxxo_payments.is_a?(OpenApi::Validatable)
      @oxxo_payments = _oxxo_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24_payments Object to be assigned
    def p24_payments=(p24_payments : Stripe::CapabilityParam?)
      if p24_payments.nil?
        return @p24_payments = nil
      end
      _p24_payments = p24_payments.not_nil!
      _p24_payments.validate if _p24_payments.is_a?(OpenApi::Validatable)
      @p24_payments = _p24_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow_payments Object to be assigned
    def paynow_payments=(paynow_payments : Stripe::CapabilityParam?)
      if paynow_payments.nil?
        return @paynow_payments = nil
      end
      _paynow_payments = paynow_payments.not_nil!
      _paynow_payments.validate if _paynow_payments.is_a?(OpenApi::Validatable)
      @paynow_payments = _paynow_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay_payments Object to be assigned
    def promptpay_payments=(promptpay_payments : Stripe::CapabilityParam?)
      if promptpay_payments.nil?
        return @promptpay_payments = nil
      end
      _promptpay_payments = promptpay_payments.not_nil!
      _promptpay_payments.validate if _promptpay_payments.is_a?(OpenApi::Validatable)
      @promptpay_payments = _promptpay_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit_payments Object to be assigned
    def sepa_debit_payments=(sepa_debit_payments : Stripe::CapabilityParam?)
      if sepa_debit_payments.nil?
        return @sepa_debit_payments = nil
      end
      _sepa_debit_payments = sepa_debit_payments.not_nil!
      _sepa_debit_payments.validate if _sepa_debit_payments.is_a?(OpenApi::Validatable)
      @sepa_debit_payments = _sepa_debit_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort_payments Object to be assigned
    def sofort_payments=(sofort_payments : Stripe::CapabilityParam?)
      if sofort_payments.nil?
        return @sofort_payments = nil
      end
      _sofort_payments = sofort_payments.not_nil!
      _sofort_payments.validate if _sofort_payments.is_a?(OpenApi::Validatable)
      @sofort_payments = _sofort_payments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_k Object to be assigned
    def tax_reporting_us_1099_k=(tax_reporting_us_1099_k : Stripe::CapabilityParam?)
      if tax_reporting_us_1099_k.nil?
        return @tax_reporting_us_1099_k = nil
      end
      _tax_reporting_us_1099_k = tax_reporting_us_1099_k.not_nil!
      _tax_reporting_us_1099_k.validate if _tax_reporting_us_1099_k.is_a?(OpenApi::Validatable)
      @tax_reporting_us_1099_k = _tax_reporting_us_1099_k
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_misc Object to be assigned
    def tax_reporting_us_1099_misc=(tax_reporting_us_1099_misc : Stripe::CapabilityParam?)
      if tax_reporting_us_1099_misc.nil?
        return @tax_reporting_us_1099_misc = nil
      end
      _tax_reporting_us_1099_misc = tax_reporting_us_1099_misc.not_nil!
      _tax_reporting_us_1099_misc.validate if _tax_reporting_us_1099_misc.is_a?(OpenApi::Validatable)
      @tax_reporting_us_1099_misc = _tax_reporting_us_1099_misc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfers Object to be assigned
    def transfers=(transfers : Stripe::CapabilityParam?)
      if transfers.nil?
        return @transfers = nil
      end
      _transfers = transfers.not_nil!
      _transfers.validate if _transfers.is_a?(OpenApi::Validatable)
      @transfers = _transfers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treasury Object to be assigned
    def treasury=(treasury : Stripe::CapabilityParam?)
      if treasury.nil?
        return @treasury = nil
      end
      _treasury = treasury.not_nil!
      _treasury.validate if _treasury.is_a?(OpenApi::Validatable)
      @treasury = _treasury
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account_ach_payments Object to be assigned
    def us_bank_account_ach_payments=(us_bank_account_ach_payments : Stripe::CapabilityParam?)
      if us_bank_account_ach_payments.nil?
        return @us_bank_account_ach_payments = nil
      end
      _us_bank_account_ach_payments = us_bank_account_ach_payments.not_nil!
      _us_bank_account_ach_payments.validate if _us_bank_account_ach_payments.is_a?(OpenApi::Validatable)
      @us_bank_account_ach_payments = _us_bank_account_ach_payments
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit_payments, @affirm_payments, @afterpay_clearpay_payments, @au_becs_debit_payments, @bacs_debit_payments, @bancontact_payments, @bank_transfer_payments, @blik_payments, @boleto_payments, @card_issuing, @card_payments, @cartes_bancaires_payments, @eps_payments, @fpx_payments, @giropay_payments, @grabpay_payments, @ideal_payments, @jcb_payments, @klarna_payments, @konbini_payments, @legacy_payments, @link_payments, @oxxo_payments, @p24_payments, @paynow_payments, @promptpay_payments, @sepa_debit_payments, @sofort_payments, @tax_reporting_us_1099_k, @tax_reporting_us_1099_misc, @transfers, @treasury, @us_bank_account_ach_payments)
  end
end
