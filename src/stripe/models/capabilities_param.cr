#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./capability_param"

module Stripe
  class CapabilitiesParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "acss_debit_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acss_debit_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "affirm_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter affirm_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "afterpay_clearpay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter afterpay_clearpay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "amazon_pay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amazon_pay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "au_becs_debit_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter au_becs_debit_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "bacs_debit_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_debit_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "bancontact_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bancontact_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "bank_transfer_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_transfer_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "blik_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter blik_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "boleto_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter boleto_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "card_issuing", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_issuing : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "card_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "cartes_bancaires_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cartes_bancaires_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "cashapp_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cashapp_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "eps_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eps_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "fpx_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fpx_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "gb_bank_transfer_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter gb_bank_transfer_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "giropay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter giropay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "grabpay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter grabpay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "ideal_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ideal_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "india_international_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter india_international_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "jcb_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jcb_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "jp_bank_transfer_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jp_bank_transfer_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "klarna_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter klarna_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "konbini_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter konbini_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "legacy_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter legacy_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "link_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "mobilepay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mobilepay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "multibanco_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter multibanco_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "mx_bank_transfer_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mx_bank_transfer_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "oxxo_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter oxxo_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "p24_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter p24_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "paynow_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paynow_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "promptpay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter promptpay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "revolut_pay_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter revolut_pay_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "sepa_bank_transfer_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_bank_transfer_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "sepa_debit_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sepa_debit_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "sofort_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sofort_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "swish_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter swish_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "tax_reporting_us_1099_k", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_reporting_us_1099_k : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "tax_reporting_us_1099_misc", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_reporting_us_1099_misc : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "transfers", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfers : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "treasury", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter treasury : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "twint_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter twint_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "us_bank_account_ach_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_account_ach_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "us_bank_transfer_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter us_bank_transfer_payments : Stripe::CapabilityParam? = nil

    @[JSON::Field(key: "zip_payments", type: Stripe::CapabilityParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter zip_payments : Stripe::CapabilityParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit_payments : Stripe::CapabilityParam? = nil,
      @affirm_payments : Stripe::CapabilityParam? = nil,
      @afterpay_clearpay_payments : Stripe::CapabilityParam? = nil,
      @amazon_pay_payments : Stripe::CapabilityParam? = nil,
      @au_becs_debit_payments : Stripe::CapabilityParam? = nil,
      @bacs_debit_payments : Stripe::CapabilityParam? = nil,
      @bancontact_payments : Stripe::CapabilityParam? = nil,
      @bank_transfer_payments : Stripe::CapabilityParam? = nil,
      @blik_payments : Stripe::CapabilityParam? = nil,
      @boleto_payments : Stripe::CapabilityParam? = nil,
      @card_issuing : Stripe::CapabilityParam? = nil,
      @card_payments : Stripe::CapabilityParam? = nil,
      @cartes_bancaires_payments : Stripe::CapabilityParam? = nil,
      @cashapp_payments : Stripe::CapabilityParam? = nil,
      @eps_payments : Stripe::CapabilityParam? = nil,
      @fpx_payments : Stripe::CapabilityParam? = nil,
      @gb_bank_transfer_payments : Stripe::CapabilityParam? = nil,
      @giropay_payments : Stripe::CapabilityParam? = nil,
      @grabpay_payments : Stripe::CapabilityParam? = nil,
      @ideal_payments : Stripe::CapabilityParam? = nil,
      @india_international_payments : Stripe::CapabilityParam? = nil,
      @jcb_payments : Stripe::CapabilityParam? = nil,
      @jp_bank_transfer_payments : Stripe::CapabilityParam? = nil,
      @klarna_payments : Stripe::CapabilityParam? = nil,
      @konbini_payments : Stripe::CapabilityParam? = nil,
      @legacy_payments : Stripe::CapabilityParam? = nil,
      @link_payments : Stripe::CapabilityParam? = nil,
      @mobilepay_payments : Stripe::CapabilityParam? = nil,
      @multibanco_payments : Stripe::CapabilityParam? = nil,
      @mx_bank_transfer_payments : Stripe::CapabilityParam? = nil,
      @oxxo_payments : Stripe::CapabilityParam? = nil,
      @p24_payments : Stripe::CapabilityParam? = nil,
      @paynow_payments : Stripe::CapabilityParam? = nil,
      @promptpay_payments : Stripe::CapabilityParam? = nil,
      @revolut_pay_payments : Stripe::CapabilityParam? = nil,
      @sepa_bank_transfer_payments : Stripe::CapabilityParam? = nil,
      @sepa_debit_payments : Stripe::CapabilityParam? = nil,
      @sofort_payments : Stripe::CapabilityParam? = nil,
      @swish_payments : Stripe::CapabilityParam? = nil,
      @tax_reporting_us_1099_k : Stripe::CapabilityParam? = nil,
      @tax_reporting_us_1099_misc : Stripe::CapabilityParam? = nil,
      @transfers : Stripe::CapabilityParam? = nil,
      @treasury : Stripe::CapabilityParam? = nil,
      @twint_payments : Stripe::CapabilityParam? = nil,
      @us_bank_account_ach_payments : Stripe::CapabilityParam? = nil,
      @us_bank_transfer_payments : Stripe::CapabilityParam? = nil,
      @zip_payments : Stripe::CapabilityParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_acss_debit_payments = @acss_debit_payments).nil?
        invalid_properties.concat(_acss_debit_payments.list_invalid_properties_for("acss_debit_payments")) if _acss_debit_payments.is_a?(OpenApi::Validatable)
      end
      unless (_affirm_payments = @affirm_payments).nil?
        invalid_properties.concat(_affirm_payments.list_invalid_properties_for("affirm_payments")) if _affirm_payments.is_a?(OpenApi::Validatable)
      end
      unless (_afterpay_clearpay_payments = @afterpay_clearpay_payments).nil?
        invalid_properties.concat(_afterpay_clearpay_payments.list_invalid_properties_for("afterpay_clearpay_payments")) if _afterpay_clearpay_payments.is_a?(OpenApi::Validatable)
      end
      unless (_amazon_pay_payments = @amazon_pay_payments).nil?
        invalid_properties.concat(_amazon_pay_payments.list_invalid_properties_for("amazon_pay_payments")) if _amazon_pay_payments.is_a?(OpenApi::Validatable)
      end
      unless (_au_becs_debit_payments = @au_becs_debit_payments).nil?
        invalid_properties.concat(_au_becs_debit_payments.list_invalid_properties_for("au_becs_debit_payments")) if _au_becs_debit_payments.is_a?(OpenApi::Validatable)
      end
      unless (_bacs_debit_payments = @bacs_debit_payments).nil?
        invalid_properties.concat(_bacs_debit_payments.list_invalid_properties_for("bacs_debit_payments")) if _bacs_debit_payments.is_a?(OpenApi::Validatable)
      end
      unless (_bancontact_payments = @bancontact_payments).nil?
        invalid_properties.concat(_bancontact_payments.list_invalid_properties_for("bancontact_payments")) if _bancontact_payments.is_a?(OpenApi::Validatable)
      end
      unless (_bank_transfer_payments = @bank_transfer_payments).nil?
        invalid_properties.concat(_bank_transfer_payments.list_invalid_properties_for("bank_transfer_payments")) if _bank_transfer_payments.is_a?(OpenApi::Validatable)
      end
      unless (_blik_payments = @blik_payments).nil?
        invalid_properties.concat(_blik_payments.list_invalid_properties_for("blik_payments")) if _blik_payments.is_a?(OpenApi::Validatable)
      end
      unless (_boleto_payments = @boleto_payments).nil?
        invalid_properties.concat(_boleto_payments.list_invalid_properties_for("boleto_payments")) if _boleto_payments.is_a?(OpenApi::Validatable)
      end
      unless (_card_issuing = @card_issuing).nil?
        invalid_properties.concat(_card_issuing.list_invalid_properties_for("card_issuing")) if _card_issuing.is_a?(OpenApi::Validatable)
      end
      unless (_card_payments = @card_payments).nil?
        invalid_properties.concat(_card_payments.list_invalid_properties_for("card_payments")) if _card_payments.is_a?(OpenApi::Validatable)
      end
      unless (_cartes_bancaires_payments = @cartes_bancaires_payments).nil?
        invalid_properties.concat(_cartes_bancaires_payments.list_invalid_properties_for("cartes_bancaires_payments")) if _cartes_bancaires_payments.is_a?(OpenApi::Validatable)
      end
      unless (_cashapp_payments = @cashapp_payments).nil?
        invalid_properties.concat(_cashapp_payments.list_invalid_properties_for("cashapp_payments")) if _cashapp_payments.is_a?(OpenApi::Validatable)
      end
      unless (_eps_payments = @eps_payments).nil?
        invalid_properties.concat(_eps_payments.list_invalid_properties_for("eps_payments")) if _eps_payments.is_a?(OpenApi::Validatable)
      end
      unless (_fpx_payments = @fpx_payments).nil?
        invalid_properties.concat(_fpx_payments.list_invalid_properties_for("fpx_payments")) if _fpx_payments.is_a?(OpenApi::Validatable)
      end
      unless (_gb_bank_transfer_payments = @gb_bank_transfer_payments).nil?
        invalid_properties.concat(_gb_bank_transfer_payments.list_invalid_properties_for("gb_bank_transfer_payments")) if _gb_bank_transfer_payments.is_a?(OpenApi::Validatable)
      end
      unless (_giropay_payments = @giropay_payments).nil?
        invalid_properties.concat(_giropay_payments.list_invalid_properties_for("giropay_payments")) if _giropay_payments.is_a?(OpenApi::Validatable)
      end
      unless (_grabpay_payments = @grabpay_payments).nil?
        invalid_properties.concat(_grabpay_payments.list_invalid_properties_for("grabpay_payments")) if _grabpay_payments.is_a?(OpenApi::Validatable)
      end
      unless (_ideal_payments = @ideal_payments).nil?
        invalid_properties.concat(_ideal_payments.list_invalid_properties_for("ideal_payments")) if _ideal_payments.is_a?(OpenApi::Validatable)
      end
      unless (_india_international_payments = @india_international_payments).nil?
        invalid_properties.concat(_india_international_payments.list_invalid_properties_for("india_international_payments")) if _india_international_payments.is_a?(OpenApi::Validatable)
      end
      unless (_jcb_payments = @jcb_payments).nil?
        invalid_properties.concat(_jcb_payments.list_invalid_properties_for("jcb_payments")) if _jcb_payments.is_a?(OpenApi::Validatable)
      end
      unless (_jp_bank_transfer_payments = @jp_bank_transfer_payments).nil?
        invalid_properties.concat(_jp_bank_transfer_payments.list_invalid_properties_for("jp_bank_transfer_payments")) if _jp_bank_transfer_payments.is_a?(OpenApi::Validatable)
      end
      unless (_klarna_payments = @klarna_payments).nil?
        invalid_properties.concat(_klarna_payments.list_invalid_properties_for("klarna_payments")) if _klarna_payments.is_a?(OpenApi::Validatable)
      end
      unless (_konbini_payments = @konbini_payments).nil?
        invalid_properties.concat(_konbini_payments.list_invalid_properties_for("konbini_payments")) if _konbini_payments.is_a?(OpenApi::Validatable)
      end
      unless (_legacy_payments = @legacy_payments).nil?
        invalid_properties.concat(_legacy_payments.list_invalid_properties_for("legacy_payments")) if _legacy_payments.is_a?(OpenApi::Validatable)
      end
      unless (_link_payments = @link_payments).nil?
        invalid_properties.concat(_link_payments.list_invalid_properties_for("link_payments")) if _link_payments.is_a?(OpenApi::Validatable)
      end
      unless (_mobilepay_payments = @mobilepay_payments).nil?
        invalid_properties.concat(_mobilepay_payments.list_invalid_properties_for("mobilepay_payments")) if _mobilepay_payments.is_a?(OpenApi::Validatable)
      end
      unless (_multibanco_payments = @multibanco_payments).nil?
        invalid_properties.concat(_multibanco_payments.list_invalid_properties_for("multibanco_payments")) if _multibanco_payments.is_a?(OpenApi::Validatable)
      end
      unless (_mx_bank_transfer_payments = @mx_bank_transfer_payments).nil?
        invalid_properties.concat(_mx_bank_transfer_payments.list_invalid_properties_for("mx_bank_transfer_payments")) if _mx_bank_transfer_payments.is_a?(OpenApi::Validatable)
      end
      unless (_oxxo_payments = @oxxo_payments).nil?
        invalid_properties.concat(_oxxo_payments.list_invalid_properties_for("oxxo_payments")) if _oxxo_payments.is_a?(OpenApi::Validatable)
      end
      unless (_p24_payments = @p24_payments).nil?
        invalid_properties.concat(_p24_payments.list_invalid_properties_for("p24_payments")) if _p24_payments.is_a?(OpenApi::Validatable)
      end
      unless (_paynow_payments = @paynow_payments).nil?
        invalid_properties.concat(_paynow_payments.list_invalid_properties_for("paynow_payments")) if _paynow_payments.is_a?(OpenApi::Validatable)
      end
      unless (_promptpay_payments = @promptpay_payments).nil?
        invalid_properties.concat(_promptpay_payments.list_invalid_properties_for("promptpay_payments")) if _promptpay_payments.is_a?(OpenApi::Validatable)
      end
      unless (_revolut_pay_payments = @revolut_pay_payments).nil?
        invalid_properties.concat(_revolut_pay_payments.list_invalid_properties_for("revolut_pay_payments")) if _revolut_pay_payments.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_bank_transfer_payments = @sepa_bank_transfer_payments).nil?
        invalid_properties.concat(_sepa_bank_transfer_payments.list_invalid_properties_for("sepa_bank_transfer_payments")) if _sepa_bank_transfer_payments.is_a?(OpenApi::Validatable)
      end
      unless (_sepa_debit_payments = @sepa_debit_payments).nil?
        invalid_properties.concat(_sepa_debit_payments.list_invalid_properties_for("sepa_debit_payments")) if _sepa_debit_payments.is_a?(OpenApi::Validatable)
      end
      unless (_sofort_payments = @sofort_payments).nil?
        invalid_properties.concat(_sofort_payments.list_invalid_properties_for("sofort_payments")) if _sofort_payments.is_a?(OpenApi::Validatable)
      end
      unless (_swish_payments = @swish_payments).nil?
        invalid_properties.concat(_swish_payments.list_invalid_properties_for("swish_payments")) if _swish_payments.is_a?(OpenApi::Validatable)
      end
      unless (_tax_reporting_us_1099_k = @tax_reporting_us_1099_k).nil?
        invalid_properties.concat(_tax_reporting_us_1099_k.list_invalid_properties_for("tax_reporting_us_1099_k")) if _tax_reporting_us_1099_k.is_a?(OpenApi::Validatable)
      end
      unless (_tax_reporting_us_1099_misc = @tax_reporting_us_1099_misc).nil?
        invalid_properties.concat(_tax_reporting_us_1099_misc.list_invalid_properties_for("tax_reporting_us_1099_misc")) if _tax_reporting_us_1099_misc.is_a?(OpenApi::Validatable)
      end
      unless (_transfers = @transfers).nil?
        invalid_properties.concat(_transfers.list_invalid_properties_for("transfers")) if _transfers.is_a?(OpenApi::Validatable)
      end
      unless (_treasury = @treasury).nil?
        invalid_properties.concat(_treasury.list_invalid_properties_for("treasury")) if _treasury.is_a?(OpenApi::Validatable)
      end
      unless (_twint_payments = @twint_payments).nil?
        invalid_properties.concat(_twint_payments.list_invalid_properties_for("twint_payments")) if _twint_payments.is_a?(OpenApi::Validatable)
      end
      unless (_us_bank_account_ach_payments = @us_bank_account_ach_payments).nil?
        invalid_properties.concat(_us_bank_account_ach_payments.list_invalid_properties_for("us_bank_account_ach_payments")) if _us_bank_account_ach_payments.is_a?(OpenApi::Validatable)
      end
      unless (_us_bank_transfer_payments = @us_bank_transfer_payments).nil?
        invalid_properties.concat(_us_bank_transfer_payments.list_invalid_properties_for("us_bank_transfer_payments")) if _us_bank_transfer_payments.is_a?(OpenApi::Validatable)
      end
      unless (_zip_payments = @zip_payments).nil?
        invalid_properties.concat(_zip_payments.list_invalid_properties_for("zip_payments")) if _zip_payments.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_acss_debit_payments = @acss_debit_payments).nil?
        return false if _acss_debit_payments.is_a?(OpenApi::Validatable) && !_acss_debit_payments.valid?
      end

      unless (_affirm_payments = @affirm_payments).nil?
        return false if _affirm_payments.is_a?(OpenApi::Validatable) && !_affirm_payments.valid?
      end

      unless (_afterpay_clearpay_payments = @afterpay_clearpay_payments).nil?
        return false if _afterpay_clearpay_payments.is_a?(OpenApi::Validatable) && !_afterpay_clearpay_payments.valid?
      end

      unless (_amazon_pay_payments = @amazon_pay_payments).nil?
        return false if _amazon_pay_payments.is_a?(OpenApi::Validatable) && !_amazon_pay_payments.valid?
      end

      unless (_au_becs_debit_payments = @au_becs_debit_payments).nil?
        return false if _au_becs_debit_payments.is_a?(OpenApi::Validatable) && !_au_becs_debit_payments.valid?
      end

      unless (_bacs_debit_payments = @bacs_debit_payments).nil?
        return false if _bacs_debit_payments.is_a?(OpenApi::Validatable) && !_bacs_debit_payments.valid?
      end

      unless (_bancontact_payments = @bancontact_payments).nil?
        return false if _bancontact_payments.is_a?(OpenApi::Validatable) && !_bancontact_payments.valid?
      end

      unless (_bank_transfer_payments = @bank_transfer_payments).nil?
        return false if _bank_transfer_payments.is_a?(OpenApi::Validatable) && !_bank_transfer_payments.valid?
      end

      unless (_blik_payments = @blik_payments).nil?
        return false if _blik_payments.is_a?(OpenApi::Validatable) && !_blik_payments.valid?
      end

      unless (_boleto_payments = @boleto_payments).nil?
        return false if _boleto_payments.is_a?(OpenApi::Validatable) && !_boleto_payments.valid?
      end

      unless (_card_issuing = @card_issuing).nil?
        return false if _card_issuing.is_a?(OpenApi::Validatable) && !_card_issuing.valid?
      end

      unless (_card_payments = @card_payments).nil?
        return false if _card_payments.is_a?(OpenApi::Validatable) && !_card_payments.valid?
      end

      unless (_cartes_bancaires_payments = @cartes_bancaires_payments).nil?
        return false if _cartes_bancaires_payments.is_a?(OpenApi::Validatable) && !_cartes_bancaires_payments.valid?
      end

      unless (_cashapp_payments = @cashapp_payments).nil?
        return false if _cashapp_payments.is_a?(OpenApi::Validatable) && !_cashapp_payments.valid?
      end

      unless (_eps_payments = @eps_payments).nil?
        return false if _eps_payments.is_a?(OpenApi::Validatable) && !_eps_payments.valid?
      end

      unless (_fpx_payments = @fpx_payments).nil?
        return false if _fpx_payments.is_a?(OpenApi::Validatable) && !_fpx_payments.valid?
      end

      unless (_gb_bank_transfer_payments = @gb_bank_transfer_payments).nil?
        return false if _gb_bank_transfer_payments.is_a?(OpenApi::Validatable) && !_gb_bank_transfer_payments.valid?
      end

      unless (_giropay_payments = @giropay_payments).nil?
        return false if _giropay_payments.is_a?(OpenApi::Validatable) && !_giropay_payments.valid?
      end

      unless (_grabpay_payments = @grabpay_payments).nil?
        return false if _grabpay_payments.is_a?(OpenApi::Validatable) && !_grabpay_payments.valid?
      end

      unless (_ideal_payments = @ideal_payments).nil?
        return false if _ideal_payments.is_a?(OpenApi::Validatable) && !_ideal_payments.valid?
      end

      unless (_india_international_payments = @india_international_payments).nil?
        return false if _india_international_payments.is_a?(OpenApi::Validatable) && !_india_international_payments.valid?
      end

      unless (_jcb_payments = @jcb_payments).nil?
        return false if _jcb_payments.is_a?(OpenApi::Validatable) && !_jcb_payments.valid?
      end

      unless (_jp_bank_transfer_payments = @jp_bank_transfer_payments).nil?
        return false if _jp_bank_transfer_payments.is_a?(OpenApi::Validatable) && !_jp_bank_transfer_payments.valid?
      end

      unless (_klarna_payments = @klarna_payments).nil?
        return false if _klarna_payments.is_a?(OpenApi::Validatable) && !_klarna_payments.valid?
      end

      unless (_konbini_payments = @konbini_payments).nil?
        return false if _konbini_payments.is_a?(OpenApi::Validatable) && !_konbini_payments.valid?
      end

      unless (_legacy_payments = @legacy_payments).nil?
        return false if _legacy_payments.is_a?(OpenApi::Validatable) && !_legacy_payments.valid?
      end

      unless (_link_payments = @link_payments).nil?
        return false if _link_payments.is_a?(OpenApi::Validatable) && !_link_payments.valid?
      end

      unless (_mobilepay_payments = @mobilepay_payments).nil?
        return false if _mobilepay_payments.is_a?(OpenApi::Validatable) && !_mobilepay_payments.valid?
      end

      unless (_multibanco_payments = @multibanco_payments).nil?
        return false if _multibanco_payments.is_a?(OpenApi::Validatable) && !_multibanco_payments.valid?
      end

      unless (_mx_bank_transfer_payments = @mx_bank_transfer_payments).nil?
        return false if _mx_bank_transfer_payments.is_a?(OpenApi::Validatable) && !_mx_bank_transfer_payments.valid?
      end

      unless (_oxxo_payments = @oxxo_payments).nil?
        return false if _oxxo_payments.is_a?(OpenApi::Validatable) && !_oxxo_payments.valid?
      end

      unless (_p24_payments = @p24_payments).nil?
        return false if _p24_payments.is_a?(OpenApi::Validatable) && !_p24_payments.valid?
      end

      unless (_paynow_payments = @paynow_payments).nil?
        return false if _paynow_payments.is_a?(OpenApi::Validatable) && !_paynow_payments.valid?
      end

      unless (_promptpay_payments = @promptpay_payments).nil?
        return false if _promptpay_payments.is_a?(OpenApi::Validatable) && !_promptpay_payments.valid?
      end

      unless (_revolut_pay_payments = @revolut_pay_payments).nil?
        return false if _revolut_pay_payments.is_a?(OpenApi::Validatable) && !_revolut_pay_payments.valid?
      end

      unless (_sepa_bank_transfer_payments = @sepa_bank_transfer_payments).nil?
        return false if _sepa_bank_transfer_payments.is_a?(OpenApi::Validatable) && !_sepa_bank_transfer_payments.valid?
      end

      unless (_sepa_debit_payments = @sepa_debit_payments).nil?
        return false if _sepa_debit_payments.is_a?(OpenApi::Validatable) && !_sepa_debit_payments.valid?
      end

      unless (_sofort_payments = @sofort_payments).nil?
        return false if _sofort_payments.is_a?(OpenApi::Validatable) && !_sofort_payments.valid?
      end

      unless (_swish_payments = @swish_payments).nil?
        return false if _swish_payments.is_a?(OpenApi::Validatable) && !_swish_payments.valid?
      end

      unless (_tax_reporting_us_1099_k = @tax_reporting_us_1099_k).nil?
        return false if _tax_reporting_us_1099_k.is_a?(OpenApi::Validatable) && !_tax_reporting_us_1099_k.valid?
      end

      unless (_tax_reporting_us_1099_misc = @tax_reporting_us_1099_misc).nil?
        return false if _tax_reporting_us_1099_misc.is_a?(OpenApi::Validatable) && !_tax_reporting_us_1099_misc.valid?
      end

      unless (_transfers = @transfers).nil?
        return false if _transfers.is_a?(OpenApi::Validatable) && !_transfers.valid?
      end

      unless (_treasury = @treasury).nil?
        return false if _treasury.is_a?(OpenApi::Validatable) && !_treasury.valid?
      end

      unless (_twint_payments = @twint_payments).nil?
        return false if _twint_payments.is_a?(OpenApi::Validatable) && !_twint_payments.valid?
      end

      unless (_us_bank_account_ach_payments = @us_bank_account_ach_payments).nil?
        return false if _us_bank_account_ach_payments.is_a?(OpenApi::Validatable) && !_us_bank_account_ach_payments.valid?
      end

      unless (_us_bank_transfer_payments = @us_bank_transfer_payments).nil?
        return false if _us_bank_transfer_payments.is_a?(OpenApi::Validatable) && !_us_bank_transfer_payments.valid?
      end

      unless (_zip_payments = @zip_payments).nil?
        return false if _zip_payments.is_a?(OpenApi::Validatable) && !_zip_payments.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit_payments Object to be assigned
    def acss_debit_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @acss_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] affirm_payments Object to be assigned
    def affirm_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @affirm_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] afterpay_clearpay_payments Object to be assigned
    def afterpay_clearpay_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @afterpay_clearpay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amazon_pay_payments Object to be assigned
    def amazon_pay_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amazon_pay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] au_becs_debit_payments Object to be assigned
    def au_becs_debit_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @au_becs_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_debit_payments Object to be assigned
    def bacs_debit_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact_payments Object to be assigned
    def bancontact_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bancontact_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_payments Object to be assigned
    def bank_transfer_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] blik_payments Object to be assigned
    def blik_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @blik_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boleto_payments Object to be assigned
    def boleto_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @boleto_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_issuing Object to be assigned
    def card_issuing=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_issuing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_payments Object to be assigned
    def card_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cartes_bancaires_payments Object to be assigned
    def cartes_bancaires_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cartes_bancaires_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cashapp_payments Object to be assigned
    def cashapp_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cashapp_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eps_payments Object to be assigned
    def eps_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eps_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fpx_payments Object to be assigned
    def fpx_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fpx_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gb_bank_transfer_payments Object to be assigned
    def gb_bank_transfer_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @gb_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] giropay_payments Object to be assigned
    def giropay_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @giropay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grabpay_payments Object to be assigned
    def grabpay_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @grabpay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ideal_payments Object to be assigned
    def ideal_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ideal_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] india_international_payments Object to be assigned
    def india_international_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @india_international_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jcb_payments Object to be assigned
    def jcb_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @jcb_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jp_bank_transfer_payments Object to be assigned
    def jp_bank_transfer_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @jp_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] klarna_payments Object to be assigned
    def klarna_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @klarna_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini_payments Object to be assigned
    def konbini_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @konbini_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] legacy_payments Object to be assigned
    def legacy_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @legacy_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_payments Object to be assigned
    def link_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @link_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mobilepay_payments Object to be assigned
    def mobilepay_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mobilepay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multibanco_payments Object to be assigned
    def multibanco_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @multibanco_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mx_bank_transfer_payments Object to be assigned
    def mx_bank_transfer_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @mx_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oxxo_payments Object to be assigned
    def oxxo_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @oxxo_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] p24_payments Object to be assigned
    def p24_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @p24_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paynow_payments Object to be assigned
    def paynow_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @paynow_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promptpay_payments Object to be assigned
    def promptpay_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @promptpay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] revolut_pay_payments Object to be assigned
    def revolut_pay_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @revolut_pay_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_bank_transfer_payments Object to be assigned
    def sepa_bank_transfer_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sepa_debit_payments Object to be assigned
    def sepa_debit_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sepa_debit_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sofort_payments Object to be assigned
    def sofort_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sofort_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swish_payments Object to be assigned
    def swish_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @swish_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_k Object to be assigned
    def tax_reporting_us_1099_k=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_reporting_us_1099_k = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_reporting_us_1099_misc Object to be assigned
    def tax_reporting_us_1099_misc=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_reporting_us_1099_misc = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfers Object to be assigned
    def transfers=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfers = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treasury Object to be assigned
    def treasury=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @treasury = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] twint_payments Object to be assigned
    def twint_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @twint_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account_ach_payments Object to be assigned
    def us_bank_account_ach_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @us_bank_account_ach_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_transfer_payments Object to be assigned
    def us_bank_transfer_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @us_bank_transfer_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] zip_payments Object to be assigned
    def zip_payments=(new_value : Stripe::CapabilityParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @zip_payments = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit_payments, @affirm_payments, @afterpay_clearpay_payments, @amazon_pay_payments, @au_becs_debit_payments, @bacs_debit_payments, @bancontact_payments, @bank_transfer_payments, @blik_payments, @boleto_payments, @card_issuing, @card_payments, @cartes_bancaires_payments, @cashapp_payments, @eps_payments, @fpx_payments, @gb_bank_transfer_payments, @giropay_payments, @grabpay_payments, @ideal_payments, @india_international_payments, @jcb_payments, @jp_bank_transfer_payments, @klarna_payments, @konbini_payments, @legacy_payments, @link_payments, @mobilepay_payments, @multibanco_payments, @mx_bank_transfer_payments, @oxxo_payments, @p24_payments, @paynow_payments, @promptpay_payments, @revolut_pay_payments, @sepa_bank_transfer_payments, @sepa_debit_payments, @sofort_payments, @swish_payments, @tax_reporting_us_1099_k, @tax_reporting_us_1099_misc, @transfers, @treasury, @twint_payments, @us_bank_account_ach_payments, @us_bank_transfer_payments, @zip_payments)
  end
end
