#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A phase item describes the price and quantity of a phase.
  class SubscriptionScheduleConfigurationItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "price", type: Stripe::SubscriptionScheduleConfigurationItemPrice?, default: nil, required: true, nullable: false, emit_null: false)]
    getter price : Stripe::SubscriptionScheduleConfigurationItemPrice? = nil

    # Optional properties

    @[JSON::Field(key: "billing_thresholds", type: Stripe::SubscriptionItemBillingThresholds1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_thresholds.nil? && !billing_thresholds_present?)]
    getter billing_thresholds : Stripe::SubscriptionItemBillingThresholds1? = nil

    @[JSON::Field(ignore: true)]
    property? billing_thresholds_present : Bool = false

    # Quantity of the plan to which the customer should be subscribed.
    @[JSON::Field(key: "quantity", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter quantity : Int64? = nil

    # The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
    @[JSON::Field(key: "tax_rates", type: Array(Stripe::TaxRate)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tax_rates.nil? && !tax_rates_present?)]
    getter tax_rates : Array(Stripe::TaxRate)? = nil

    @[JSON::Field(ignore: true)]
    property? tax_rates_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @price : Stripe::SubscriptionScheduleConfigurationItemPrice? = nil,
      # Optional properties
      @billing_thresholds : Stripe::SubscriptionItemBillingThresholds1? = nil,
      @quantity : Int64? = nil,
      @tax_rates : Array(Stripe::TaxRate)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"price\" is required and cannot be null") if @price.nil?
      # This is a model price : Stripe::SubscriptionScheduleConfigurationItemPrice?
      # This is a model billing_thresholds : Stripe::SubscriptionItemBillingThresholds1?
      # Container tax_rates array has values of Stripe::TaxRate

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @price.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price Object to be assigned
    def price=(price : Stripe::SubscriptionScheduleConfigurationItemPrice?)
      if price.nil?
        raise ArgumentError.new("\"price\" is required and cannot be null")
      end
      @price = price
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_thresholds Object to be assigned
    def billing_thresholds=(billing_thresholds : Stripe::SubscriptionItemBillingThresholds1?)
      if billing_thresholds.nil?
        return @billing_thresholds = nil
      end
      @billing_thresholds = billing_thresholds
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(quantity : Int64?)
      if quantity.nil?
        return @quantity = nil
      end
      @quantity = quantity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_rates Object to be assigned
    def tax_rates=(tax_rates : Array(Stripe::TaxRate)?)
      if tax_rates.nil?
        return @tax_rates = nil
      end
      @tax_rates = tax_rates
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@price, @billing_thresholds, @billing_thresholds_present, @quantity, @tax_rates, @tax_rates_present)
  end
end
