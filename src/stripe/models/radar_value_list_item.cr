#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.  Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class RadarValueListItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # The name or email address of the user who added this item to the value list.
    @[JSON::Field(key: "created_by", type: String)]
    getter created_by : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["radar.value_list_item"])

    # The value of the item.
    @[JSON::Field(key: "value", type: String)]
    getter value : String

    # The identifier of the value list this item belongs to.
    @[JSON::Field(key: "value_list", type: String)]
    getter value_list : String

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @created : Int64, @created_by : String, @id : String, @livemode : Bool, @object : String, @value : String, @value_list : String)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @created_by.to_s.size > 5000
        invalid_properties.push("invalid value for \"created_by\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @value.to_s.size > 5000
        invalid_properties.push("invalid value for \"value\", the character length must be smaller than or equal to 5000.")
      end

      if @value_list.to_s.size > 5000
        invalid_properties.push("invalid value for \"value_list\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @created_by.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @value.to_s.size > 5000
      return false if @value_list.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] created_by Value to be assigned
    def created_by=(created_by)
      if created_by.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"created_by\", the character length must be smaller than or equal to 5000.")
      end

      @created_by = created_by
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] value Value to be assigned
    def value=(value)
      if value.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"value\", the character length must be smaller than or equal to 5000.")
      end

      @value = value
    end

    # Custom attribute writer method with validation
    # @param [Object] value_list Value to be assigned
    def value_list=(value_list)
      if value_list.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"value_list\", the character length must be smaller than or equal to 5000.")
      end

      @value_list = value_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        created == o.created &&
        created_by == o.created_by &&
        id == o.id &&
        livemode == o.livemode &&
        object == o.object &&
        value == o.value &&
        value_list == o.value_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@created, @created_by, @id, @livemode, @object, @value, @value_list)
  end
end
