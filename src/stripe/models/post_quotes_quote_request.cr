#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostQuotesQuoteRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "application_fee_amount", type: PostQuotesRequestApplicationFeeAmount?, presence: true, ignore_serialize: application_fee_amount.nil? && !application_fee_amount_present?)]
    property application_fee_amount : PostQuotesRequestApplicationFeeAmount?

    @[JSON::Field(ignore: true)]
    property? application_fee_amount_present : Bool = false

    @[JSON::Field(key: "application_fee_percent", type: PostQuotesRequestApplicationFeePercent?, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    property application_fee_percent : PostQuotesRequestApplicationFeePercent?

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    @[JSON::Field(key: "automatic_tax", type: AutomaticTaxParam2?, presence: true, ignore_serialize: automatic_tax.nil? && !automatic_tax_present?)]
    property automatic_tax : AutomaticTaxParam2?

    @[JSON::Field(ignore: true)]
    property? automatic_tax_present : Bool = false

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
    @[JSON::Field(key: "collection_method", type: String?, presence: true, ignore_serialize: collection_method.nil? && !collection_method_present?)]
    getter collection_method : String?

    @[JSON::Field(ignore: true)]
    property? collection_method_present : Bool = false

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    # The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    @[JSON::Field(key: "customer", type: String?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    @[JSON::Field(key: "default_tax_rates", type: PostQuotesRequestDefaultTaxRates?, presence: true, ignore_serialize: default_tax_rates.nil? && !default_tax_rates_present?)]
    property default_tax_rates : PostQuotesRequestDefaultTaxRates?

    @[JSON::Field(ignore: true)]
    property? default_tax_rates_present : Bool = false

    # A description that will be displayed on the quote PDF.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "discounts", type: PostQuotesRequestDiscounts?, presence: true, ignore_serialize: discounts.nil? && !discounts_present?)]
    property discounts : PostQuotesRequestDiscounts?

    @[JSON::Field(ignore: true)]
    property? discounts_present : Bool = false

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "expires_at", type: Int64?, presence: true, ignore_serialize: expires_at.nil? && !expires_at_present?)]
    property expires_at : Int64?

    @[JSON::Field(ignore: true)]
    property? expires_at_present : Bool = false

    # A footer that will be displayed on the quote PDF.
    @[JSON::Field(key: "footer", type: String?, presence: true, ignore_serialize: footer.nil? && !footer_present?)]
    getter footer : String?

    @[JSON::Field(ignore: true)]
    property? footer_present : Bool = false

    # A header that will be displayed on the quote PDF.
    @[JSON::Field(key: "header", type: String?, presence: true, ignore_serialize: header.nil? && !header_present?)]
    getter header : String?

    @[JSON::Field(ignore: true)]
    property? header_present : Bool = false

    @[JSON::Field(key: "invoice_settings", type: QuoteParam?, presence: true, ignore_serialize: invoice_settings.nil? && !invoice_settings_present?)]
    property invoice_settings : QuoteParam?

    @[JSON::Field(ignore: true)]
    property? invoice_settings_present : Bool = false

    # A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    @[JSON::Field(key: "line_items", type: Array(LineItemUpdateParams)?, presence: true, ignore_serialize: line_items.nil? && !line_items_present?)]
    property line_items : Array(LineItemUpdateParams)?

    @[JSON::Field(ignore: true)]
    property? line_items_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "on_behalf_of", type: PostQuotesRequestOnBehalfOf?, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    property on_behalf_of : PostQuotesRequestOnBehalfOf?

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "subscription_data", type: SubscriptionDataUpdateParams?, presence: true, ignore_serialize: subscription_data.nil? && !subscription_data_present?)]
    property subscription_data : SubscriptionDataUpdateParams?

    @[JSON::Field(ignore: true)]
    property? subscription_data_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: PostQuotesRequestTransferData?, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    property transfer_data : PostQuotesRequestTransferData?

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil,
      @application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil,
      @automatic_tax : AutomaticTaxParam2? = nil,
      @collection_method : String? = nil,
      @customer : String? = nil,
      @default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil,
      @description : String? = nil,
      @discounts : PostQuotesRequestDiscounts? = nil,
      @expand : Array(String)? = nil,
      @expires_at : Int64? = nil,
      @footer : String? = nil,
      @header : String? = nil,
      @invoice_settings : QuoteParam? = nil,
      @line_items : Array(LineItemUpdateParams)? = nil,
      @metadata : Hash(String, String)? = nil,
      @on_behalf_of : PostQuotesRequestOnBehalfOf? = nil,
      @subscription_data : SubscriptionDataUpdateParams? = nil,
      @transfer_data : PostQuotesRequestTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)

      if !@customer.nil? && @customer.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && @description.to_s.size > 500
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 500.")
      end

      if !@footer.nil? && @footer.to_s.size > 500
        invalid_properties.push("invalid value for \"footer\", the character length must be smaller than or equal to 500.")
      end

      if !@header.nil? && @header.to_s.size > 50
        invalid_properties.push("invalid value for \"header\", the character length must be smaller than or equal to 50.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      return false if !@customer.nil? && @customer.to_s.size > 5000
      return false if !@description.nil? && @description.to_s.size > 500
      return false if !@footer.nil? && @footer.to_s.size > 500
      return false if !@header.nil? && @header.to_s.size > 50

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method)
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(collection_method)
      @collection_method = collection_method
    end

    # Custom attribute writer method with validation
    # @param [Object] customer Value to be assigned
    def customer=(customer)
      if !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 500
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 500.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] footer Value to be assigned
    def footer=(footer)
      if !footer.nil? && footer.to_s.size > 500
        raise ArgumentError.new("invalid value for \"footer\", the character length must be smaller than or equal to 500.")
      end

      @footer = footer
    end

    # Custom attribute writer method with validation
    # @param [Object] header Value to be assigned
    def header=(header)
      if !header.nil? && header.to_s.size > 50
        raise ArgumentError.new("invalid value for \"header\", the character length must be smaller than or equal to 50.")
      end

      @header = header
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@application_fee_amount, @application_fee_percent, @automatic_tax, @collection_method, @customer, @default_tax_rates, @description, @discounts, @expand, @expires_at, @footer, @header, @invoice_settings, @line_items, @metadata, @on_behalf_of, @subscription_data, @transfer_data)
  end
end
