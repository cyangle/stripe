#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  # Zengin Records contain Japan bank account details per the Zengin format.
  class FundingInstructionsBankTransferZenginRecord
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The account holder name
    @[JSON::Field(key: "account_holder_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_holder_name : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_HOLDER_NAME = 5000

    # The account number
    @[JSON::Field(key: "account_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_number : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_NUMBER = 5000

    # The bank account type. In Japan, this can only be `futsu` or `toza`.
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_type : String? = nil
    MAX_LENGTH_FOR_ACCOUNT_TYPE = 5000

    # The bank code of the account
    @[JSON::Field(key: "bank_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter bank_code : String? = nil
    MAX_LENGTH_FOR_BANK_CODE = 5000

    # The bank name of the account
    @[JSON::Field(key: "bank_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter bank_name : String? = nil
    MAX_LENGTH_FOR_BANK_NAME = 5000

    # The branch code of the account
    @[JSON::Field(key: "branch_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter branch_code : String? = nil
    MAX_LENGTH_FOR_BRANCH_CODE = 5000

    # The branch name of the account
    @[JSON::Field(key: "branch_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter branch_name : String? = nil
    MAX_LENGTH_FOR_BRANCH_NAME = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_holder_name : String? = nil,
      @account_number : String? = nil,
      @account_type : String? = nil,
      @bank_code : String? = nil,
      @bank_name : String? = nil,
      @branch_code : String? = nil,
      @branch_name : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_holder_name = @account_holder_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_holder_name", _account_holder_name.to_s.size, MAX_LENGTH_FOR_ACCOUNT_HOLDER_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_account_number = @account_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_number", _account_number.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_account_type = @account_type).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("account_type", _account_type.to_s.size, MAX_LENGTH_FOR_ACCOUNT_TYPE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_bank_code = @bank_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("bank_code", _bank_code.to_s.size, MAX_LENGTH_FOR_BANK_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_bank_name = @bank_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("bank_name", _bank_name.to_s.size, MAX_LENGTH_FOR_BANK_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_branch_code = @branch_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("branch_code", _branch_code.to_s.size, MAX_LENGTH_FOR_BRANCH_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_branch_name = @branch_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("branch_name", _branch_name.to_s.size, MAX_LENGTH_FOR_BRANCH_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_holder_name = @account_holder_name).nil?
        return false if _account_holder_name.to_s.size > MAX_LENGTH_FOR_ACCOUNT_HOLDER_NAME
      end

      unless (_account_number = @account_number).nil?
        return false if _account_number.to_s.size > MAX_LENGTH_FOR_ACCOUNT_NUMBER
      end

      unless (_account_type = @account_type).nil?
        return false if _account_type.to_s.size > MAX_LENGTH_FOR_ACCOUNT_TYPE
      end

      unless (_bank_code = @bank_code).nil?
        return false if _bank_code.to_s.size > MAX_LENGTH_FOR_BANK_CODE
      end

      unless (_bank_name = @bank_name).nil?
        return false if _bank_name.to_s.size > MAX_LENGTH_FOR_BANK_NAME
      end

      unless (_branch_code = @branch_code).nil?
        return false if _branch_code.to_s.size > MAX_LENGTH_FOR_BRANCH_CODE
      end

      unless (_branch_name = @branch_name).nil?
        return false if _branch_name.to_s.size > MAX_LENGTH_FOR_BRANCH_NAME
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_holder_name Object to be assigned
    def account_holder_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_holder_name", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_HOLDER_NAME)
      end

      @account_holder_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_number Object to be assigned
    def account_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_number", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_NUMBER)
      end

      @account_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("account_type", new_value.to_s.size, MAX_LENGTH_FOR_ACCOUNT_TYPE)
      end

      @account_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_code Object to be assigned
    def bank_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("bank_code", new_value.to_s.size, MAX_LENGTH_FOR_BANK_CODE)
      end

      @bank_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_name Object to be assigned
    def bank_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("bank_name", new_value.to_s.size, MAX_LENGTH_FOR_BANK_NAME)
      end

      @bank_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] branch_code Object to be assigned
    def branch_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("branch_code", new_value.to_s.size, MAX_LENGTH_FOR_BRANCH_CODE)
      end

      @branch_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] branch_name Object to be assigned
    def branch_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("branch_name", new_value.to_s.size, MAX_LENGTH_FOR_BRANCH_NAME)
      end

      @branch_name = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_holder_name, @account_number, @account_type, @bank_code, @bank_name, @branch_code, @branch_name)
  end
end
