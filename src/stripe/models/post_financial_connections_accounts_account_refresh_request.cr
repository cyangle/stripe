#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostFinancialConnectionsAccountsAccountRefreshRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The list of account features that you would like to refresh. Either: `balance` or `ownership`.
    @[JSON::Field(key: "features", type: Array(String))]
    getter features : Array(String)

    ENUM_VALIDATOR_FOR_FEATURES = EnumValidator.new("features", "Array(String)", ["balance", "ownership"])

    # Optional properties
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @features : Array(String), @expand : Array(String)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_FEATURES.error_message) unless ENUM_VALIDATOR_FOR_FEATURES.all_valid?(@features, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_FEATURES.all_valid?(@features, false)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] features Object to be assigned
    def features=(features)
      ENUM_VALIDATOR_FOR_FEATURES.all_valid!(features, false)
      @features = features
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        expand == o.expand &&
        features == o.features
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@expand, @features)
  end
end
