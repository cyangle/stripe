#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class IssuingTransactionReceiptData
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # The description of the item. The maximum length of this field is 26 characters.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The quantity of the item.
    @[JSON::Field(key: "quantity", type: Float64?, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    property quantity : Float64?

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    # The total for this line item in cents.
    @[JSON::Field(key: "total", type: Int64?, presence: true, ignore_serialize: total.nil? && !total_present?)]
    property total : Int64?

    @[JSON::Field(ignore: true)]
    property? total_present : Bool = false

    # The unit cost of the item in cents.
    @[JSON::Field(key: "unit_cost", type: Int64?, presence: true, ignore_serialize: unit_cost.nil? && !unit_cost_present?)]
    property unit_cost : Int64?

    @[JSON::Field(ignore: true)]
    property? unit_cost_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @description : String? = nil,
      @quantity : Float64? = nil,
      @total : Int64? = nil,
      @unit_cost : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@description.nil? && @description.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description : String?)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@description, @description_present, @quantity, @quantity_present, @total, @total_present, @unit_cost, @unit_cost_present)
  end
end
