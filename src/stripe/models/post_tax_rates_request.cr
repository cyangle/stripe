#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostTaxRatesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The display name of the tax rate, which will be shown to users.
    @[JSON::Field(key: "display_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter display_name : String? = nil

    # This specifies if the tax rate is inclusive or exclusive.
    @[JSON::Field(key: "inclusive", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter inclusive : Bool? = nil

    # This represents the tax rate percent out of 100.
    @[JSON::Field(key: "percentage", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter percentage : Float64? = nil

    # Optional properties

    # Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    @[JSON::Field(key: "active", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter active : Bool? = nil

    # Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    @[JSON::Field(key: "country", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter country : String? = nil

    # An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.
    @[JSON::Field(key: "jurisdiction", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter jurisdiction : String? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \"NY\" for New York, United States.
    @[JSON::Field(key: "state", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter state : String? = nil

    # The high-level tax type, such as `vat` or `sales_tax`.
    @[JSON::Field(key: "tax_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_type : String? = nil

    ENUM_VALIDATOR_FOR_TAX_TYPE = EnumValidator.new("tax_type", "String", ["gst", "hst", "jct", "pst", "qst", "rst", "sales_tax", "vat"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @display_name : String? = nil,
      @inclusive : Bool? = nil,
      @percentage : Float64? = nil,
      # Optional properties
      @active : Bool? = nil,
      @country : String? = nil,
      @description : String? = nil,
      @expand : Array(String)? = nil,
      @jurisdiction : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @state : String? = nil,
      @tax_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"display_name\" is required and cannot be null") if @display_name.nil?
      if _display_name = @display_name
        if _display_name.to_s.size > 50
          invalid_properties.push("invalid value for \"display_name\", the character length must be smaller than or equal to 50.")
        end
      end
      invalid_properties.push("\"inclusive\" is required and cannot be null") if @inclusive.nil?
      invalid_properties.push("\"percentage\" is required and cannot be null") if @percentage.nil?
      if _country = @country
        if _country.to_s.size > 5000
          invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _jurisdiction = @jurisdiction
        if _jurisdiction.to_s.size > 50
          invalid_properties.push("invalid value for \"jurisdiction\", the character length must be smaller than or equal to 50.")
        end
      end
      if _state = @state
        if _state.to_s.size > 2
          invalid_properties.push("invalid value for \"state\", the character length must be smaller than or equal to 2.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_TYPE.error_message) unless ENUM_VALIDATOR_FOR_TAX_TYPE.valid?(@tax_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @display_name.nil?
      if _display_name = @display_name
        return false if _display_name.to_s.size > 50
      end
      return false if @inclusive.nil?
      return false if @percentage.nil?
      if _country = @country
        return false if _country.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      if _jurisdiction = @jurisdiction
        return false if _jurisdiction.to_s.size > 50
      end
      if _state = @state
        return false if _state.to_s.size > 2
      end
      return false unless ENUM_VALIDATOR_FOR_TAX_TYPE.valid?(@tax_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_name Object to be assigned
    def display_name=(display_name : String?)
      if display_name.nil?
        raise ArgumentError.new("\"display_name\" is required and cannot be null")
      end
      _display_name = display_name.not_nil!
      if _display_name.to_s.size > 50
        raise ArgumentError.new("invalid value for \"display_name\", the character length must be smaller than or equal to 50.")
      end

      @display_name = display_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inclusive Object to be assigned
    def inclusive=(inclusive : Bool?)
      if inclusive.nil?
        raise ArgumentError.new("\"inclusive\" is required and cannot be null")
      end
      @inclusive = inclusive
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] percentage Object to be assigned
    def percentage=(percentage : Float64?)
      if percentage.nil?
        raise ArgumentError.new("\"percentage\" is required and cannot be null")
      end
      @percentage = percentage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] active Object to be assigned
    def active=(active : Bool?)
      if active.nil?
        return @active = nil
      end
      @active = active
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(country : String?)
      if country.nil?
        return @country = nil
      end
      _country = country.not_nil!
      if _country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jurisdiction Object to be assigned
    def jurisdiction=(jurisdiction : String?)
      if jurisdiction.nil?
        return @jurisdiction = nil
      end
      _jurisdiction = jurisdiction.not_nil!
      if _jurisdiction.to_s.size > 50
        raise ArgumentError.new("invalid value for \"jurisdiction\", the character length must be smaller than or equal to 50.")
      end

      @jurisdiction = jurisdiction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state : String?)
      if state.nil?
        return @state = nil
      end
      _state = state.not_nil!
      if _state.to_s.size > 2
        raise ArgumentError.new("invalid value for \"state\", the character length must be smaller than or equal to 2.")
      end

      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_type Object to be assigned
    def tax_type=(tax_type : String?)
      if tax_type.nil?
        return @tax_type = nil
      end
      _tax_type = tax_type.not_nil!
      ENUM_VALIDATOR_FOR_TAX_TYPE.valid!(_tax_type)
      @tax_type = tax_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@display_name, @inclusive, @percentage, @active, @country, @description, @expand, @jurisdiction, @metadata, @state, @tax_type)
  end
end
