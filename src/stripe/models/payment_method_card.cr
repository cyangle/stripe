#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentMethodCard
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    @[JSON::Field(key: "brand", type: String)]
    getter brand : String

    # Two-digit number representing the card's expiration month.
    @[JSON::Field(key: "exp_month", type: Int64)]
    property exp_month : Int64

    # Four-digit number representing the card's expiration year.
    @[JSON::Field(key: "exp_year", type: Int64)]
    property exp_year : Int64

    # Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    @[JSON::Field(key: "funding", type: String)]
    getter funding : String

    # The last four digits of the card.
    @[JSON::Field(key: "last4", type: String)]
    getter last4 : String

    # Optional properties

    @[JSON::Field(key: "checks", type: PaymentMethodCardChecks1?, presence: true, ignore_serialize: checks.nil? && !checks_present?)]
    property checks : PaymentMethodCardChecks1?

    @[JSON::Field(ignore: true)]
    property? checks_present : Bool = false

    # Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    @[JSON::Field(key: "country", type: String?, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String?

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    @[JSON::Field(key: "fingerprint", type: String?, presence: true, ignore_serialize: fingerprint.nil? && !fingerprint_present?)]
    getter fingerprint : String?

    @[JSON::Field(ignore: true)]
    property? fingerprint_present : Bool = false

    @[JSON::Field(key: "generated_from", type: PaymentMethodCardGeneratedFrom?, presence: true, ignore_serialize: generated_from.nil? && !generated_from_present?)]
    property generated_from : PaymentMethodCardGeneratedFrom?

    @[JSON::Field(ignore: true)]
    property? generated_from_present : Bool = false

    @[JSON::Field(key: "networks", type: PaymentMethodCardNetworks?, presence: true, ignore_serialize: networks.nil? && !networks_present?)]
    property networks : PaymentMethodCardNetworks?

    @[JSON::Field(ignore: true)]
    property? networks_present : Bool = false

    @[JSON::Field(key: "three_d_secure_usage", type: PaymentMethodCardThreeDSecureUsage?, presence: true, ignore_serialize: three_d_secure_usage.nil? && !three_d_secure_usage_present?)]
    property three_d_secure_usage : PaymentMethodCardThreeDSecureUsage?

    @[JSON::Field(ignore: true)]
    property? three_d_secure_usage_present : Bool = false

    @[JSON::Field(key: "wallet", type: PaymentMethodCardWallet1?, presence: true, ignore_serialize: wallet.nil? && !wallet_present?)]
    property wallet : PaymentMethodCardWallet1?

    @[JSON::Field(ignore: true)]
    property? wallet_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @brand : String,
      @exp_month : Int64,
      @exp_year : Int64,
      @funding : String,
      @last4 : String,
      # Optional properties
      @checks : PaymentMethodCardChecks1? = nil,
      @country : String? = nil,
      @fingerprint : String? = nil,
      @generated_from : PaymentMethodCardGeneratedFrom? = nil,
      @networks : PaymentMethodCardNetworks? = nil,
      @three_d_secure_usage : PaymentMethodCardThreeDSecureUsage? = nil,
      @wallet : PaymentMethodCardWallet1? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @brand.to_s.size > 5000
        invalid_properties.push("invalid value for \"brand\", the character length must be smaller than or equal to 5000.")
      end

      if @funding.to_s.size > 5000
        invalid_properties.push("invalid value for \"funding\", the character length must be smaller than or equal to 5000.")
      end

      if @last4.to_s.size > 5000
        invalid_properties.push("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      if !@country.nil? && @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if !@fingerprint.nil? && @fingerprint.to_s.size > 5000
        invalid_properties.push("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @brand.to_s.size > 5000
      return false if @funding.to_s.size > 5000
      return false if @last4.to_s.size > 5000
      return false if !@country.nil? && @country.to_s.size > 5000
      return false if !@fingerprint.nil? && @fingerprint.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] brand Value to be assigned
    def brand=(brand)
      if brand.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"brand\", the character length must be smaller than or equal to 5000.")
      end

      @brand = brand
    end

    # Custom attribute writer method with validation
    # @param [Object] funding Value to be assigned
    def funding=(funding)
      if funding.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"funding\", the character length must be smaller than or equal to 5000.")
      end

      @funding = funding
    end

    # Custom attribute writer method with validation
    # @param [Object] last4 Value to be assigned
    def last4=(last4)
      if last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      @last4 = last4
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] fingerprint Value to be assigned
    def fingerprint=(fingerprint)
      if !fingerprint.nil? && fingerprint.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      @fingerprint = fingerprint
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@brand, @exp_month, @exp_year, @funding, @last4, @checks, @country, @fingerprint, @generated_from, @networks, @three_d_secure_usage, @wallet)
  end
end
