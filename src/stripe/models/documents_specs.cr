#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class DocumentsSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "bank_account_ownership_verification", type: Stripe::DocumentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_account_ownership_verification : Stripe::DocumentsParam? = nil

    @[JSON::Field(key: "company_license", type: Stripe::DocumentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter company_license : Stripe::DocumentsParam? = nil

    @[JSON::Field(key: "company_memorandum_of_association", type: Stripe::DocumentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter company_memorandum_of_association : Stripe::DocumentsParam? = nil

    @[JSON::Field(key: "company_ministerial_decree", type: Stripe::DocumentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter company_ministerial_decree : Stripe::DocumentsParam? = nil

    @[JSON::Field(key: "company_registration_verification", type: Stripe::DocumentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter company_registration_verification : Stripe::DocumentsParam? = nil

    @[JSON::Field(key: "company_tax_id_verification", type: Stripe::DocumentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter company_tax_id_verification : Stripe::DocumentsParam? = nil

    @[JSON::Field(key: "proof_of_registration", type: Stripe::DocumentsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter proof_of_registration : Stripe::DocumentsParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @bank_account_ownership_verification : Stripe::DocumentsParam? = nil,
      @company_license : Stripe::DocumentsParam? = nil,
      @company_memorandum_of_association : Stripe::DocumentsParam? = nil,
      @company_ministerial_decree : Stripe::DocumentsParam? = nil,
      @company_registration_verification : Stripe::DocumentsParam? = nil,
      @company_tax_id_verification : Stripe::DocumentsParam? = nil,
      @proof_of_registration : Stripe::DocumentsParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_bank_account_ownership_verification = @bank_account_ownership_verification).nil?
        invalid_properties.concat(_bank_account_ownership_verification.list_invalid_properties_for("bank_account_ownership_verification")) if _bank_account_ownership_verification.is_a?(OpenApi::Validatable)
      end
      unless (_company_license = @company_license).nil?
        invalid_properties.concat(_company_license.list_invalid_properties_for("company_license")) if _company_license.is_a?(OpenApi::Validatable)
      end
      unless (_company_memorandum_of_association = @company_memorandum_of_association).nil?
        invalid_properties.concat(_company_memorandum_of_association.list_invalid_properties_for("company_memorandum_of_association")) if _company_memorandum_of_association.is_a?(OpenApi::Validatable)
      end
      unless (_company_ministerial_decree = @company_ministerial_decree).nil?
        invalid_properties.concat(_company_ministerial_decree.list_invalid_properties_for("company_ministerial_decree")) if _company_ministerial_decree.is_a?(OpenApi::Validatable)
      end
      unless (_company_registration_verification = @company_registration_verification).nil?
        invalid_properties.concat(_company_registration_verification.list_invalid_properties_for("company_registration_verification")) if _company_registration_verification.is_a?(OpenApi::Validatable)
      end
      unless (_company_tax_id_verification = @company_tax_id_verification).nil?
        invalid_properties.concat(_company_tax_id_verification.list_invalid_properties_for("company_tax_id_verification")) if _company_tax_id_verification.is_a?(OpenApi::Validatable)
      end
      unless (_proof_of_registration = @proof_of_registration).nil?
        invalid_properties.concat(_proof_of_registration.list_invalid_properties_for("proof_of_registration")) if _proof_of_registration.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_bank_account_ownership_verification = @bank_account_ownership_verification).nil?
        return false if _bank_account_ownership_verification.is_a?(OpenApi::Validatable) && !_bank_account_ownership_verification.valid?
      end

      unless (_company_license = @company_license).nil?
        return false if _company_license.is_a?(OpenApi::Validatable) && !_company_license.valid?
      end

      unless (_company_memorandum_of_association = @company_memorandum_of_association).nil?
        return false if _company_memorandum_of_association.is_a?(OpenApi::Validatable) && !_company_memorandum_of_association.valid?
      end

      unless (_company_ministerial_decree = @company_ministerial_decree).nil?
        return false if _company_ministerial_decree.is_a?(OpenApi::Validatable) && !_company_ministerial_decree.valid?
      end

      unless (_company_registration_verification = @company_registration_verification).nil?
        return false if _company_registration_verification.is_a?(OpenApi::Validatable) && !_company_registration_verification.valid?
      end

      unless (_company_tax_id_verification = @company_tax_id_verification).nil?
        return false if _company_tax_id_verification.is_a?(OpenApi::Validatable) && !_company_tax_id_verification.valid?
      end

      unless (_proof_of_registration = @proof_of_registration).nil?
        return false if _proof_of_registration.is_a?(OpenApi::Validatable) && !_proof_of_registration.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_account_ownership_verification Object to be assigned
    def bank_account_ownership_verification=(new_value : Stripe::DocumentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bank_account_ownership_verification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] company_license Object to be assigned
    def company_license=(new_value : Stripe::DocumentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @company_license = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] company_memorandum_of_association Object to be assigned
    def company_memorandum_of_association=(new_value : Stripe::DocumentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @company_memorandum_of_association = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] company_ministerial_decree Object to be assigned
    def company_ministerial_decree=(new_value : Stripe::DocumentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @company_ministerial_decree = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] company_registration_verification Object to be assigned
    def company_registration_verification=(new_value : Stripe::DocumentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @company_registration_verification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] company_tax_id_verification Object to be assigned
    def company_tax_id_verification=(new_value : Stripe::DocumentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @company_tax_id_verification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proof_of_registration Object to be assigned
    def proof_of_registration=(new_value : Stripe::DocumentsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @proof_of_registration = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bank_account_ownership_verification, @company_license, @company_memorandum_of_association, @company_ministerial_decree, @company_registration_verification, @company_tax_id_verification, @proof_of_registration)
  end
end
