#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./billing_meter"
require "./billing_meter_resource_aggregation_settings"
require "./billing_meter_resource_billing_meter_status_transitions"
require "./billing_meter_resource_billing_meter_value"
require "./billing_meter_resource_customer_mapping_settings"

module Stripe
  # The [Billing Meter](/api/billing/meter) ID whose usage is monitored.
  class ThresholdsResourceUsageThresholdConfigMeter
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    @[JSON::Field(key: "customer_mapping", type: Stripe::BillingMeterResourceCustomerMappingSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    property customer_mapping : Stripe::BillingMeterResourceCustomerMappingSettings? = nil

    @[JSON::Field(key: "default_aggregation", type: Stripe::BillingMeterResourceAggregationSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    property default_aggregation : Stripe::BillingMeterResourceAggregationSettings? = nil

    # The meter's name.
    @[JSON::Field(key: "display_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property display_name : String? = nil
    MAX_LENGTH_FOR_DISPLAY_NAME = 5000

    # The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.
    @[JSON::Field(key: "event_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property event_name : String? = nil
    MAX_LENGTH_FOR_EVENT_NAME = 5000

    # The time window to pre-aggregate meter events for, if any.
    @[JSON::Field(key: "event_time_window", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property event_time_window : String? = nil
    ERROR_MESSAGE_FOR_EVENT_TIME_WINDOW = "invalid value for \"event_time_window\", must be one of [day, hour]."
    VALID_VALUES_FOR_EVENT_TIME_WINDOW  = String.static_array("day", "hour")

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [billing.meter]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("billing.meter")

    # The meter's status.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, inactive]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "inactive")

    @[JSON::Field(key: "status_transitions", type: Stripe::BillingMeterResourceBillingMeterStatusTransitions?, default: nil, required: true, nullable: false, emit_null: false)]
    property status_transitions : Stripe::BillingMeterResourceBillingMeterStatusTransitions? = nil

    # Time at which the object was last updated. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "updated", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property updated : Int64? = nil

    @[JSON::Field(key: "value_settings", type: Stripe::BillingMeterResourceBillingMeterValue?, default: nil, required: true, nullable: false, emit_null: false)]
    property value_settings : Stripe::BillingMeterResourceBillingMeterValue? = nil

    # End of Required Properties
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::BillingMeter,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @customer_mapping : Stripe::BillingMeterResourceCustomerMappingSettings? = nil,
      @default_aggregation : Stripe::BillingMeterResourceAggregationSettings? = nil,
      @display_name : String? = nil,
      @event_name : String? = nil,
      @event_time_window : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @status_transitions : Stripe::BillingMeterResourceBillingMeterStatusTransitions? = nil,
      @updated : Int64? = nil,
      @value_settings : Stripe::BillingMeterResourceBillingMeterValue? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @customer_mapping, @default_aggregation, @display_name, @event_name, @event_time_window, @id, @livemode, @object, @status, @status_transitions, @updated, @value_settings)
  end
end
