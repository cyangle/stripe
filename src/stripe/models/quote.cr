#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Quote is a way to model prices that you'd like to provide to a customer. Once accepted, it will automatically create an invoice, subscription or subscription schedule.
  class Quote
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Total before any discounts or taxes are applied.
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_subtotal : Int64? = nil

    # Total after discounts and taxes are applied.
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_total : Int64? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::QuotesResourceAutomaticTax?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::QuotesResourceAutomaticTax? = nil

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter collection_method : String? = nil

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    @[JSON::Field(key: "computed", type: Stripe::QuotesResourceComputed?, default: nil, required: true, nullable: false, emit_null: false)]
    getter computed : Stripe::QuotesResourceComputed? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # The discounts applied to this quote.
    @[JSON::Field(key: "discounts", type: Array(Stripe::InvoiceitemDiscountsInner)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter discounts : Array(Stripe::InvoiceitemDiscountsInner)? = nil

    # The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "expires_at", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expires_at : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["quote"])

    # The status of the quote.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["accepted", "canceled", "draft", "open"])

    @[JSON::Field(key: "status_transitions", type: Stripe::QuotesResourceStatusTransitions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status_transitions : Stripe::QuotesResourceStatusTransitions? = nil

    @[JSON::Field(key: "subscription_data", type: Stripe::QuotesResourceSubscriptionData?, default: nil, required: true, nullable: false, emit_null: false)]
    getter subscription_data : Stripe::QuotesResourceSubscriptionData? = nil

    @[JSON::Field(key: "total_details", type: Stripe::QuotesResourceTotalDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total_details : Stripe::QuotesResourceTotalDetails? = nil

    # Optional properties

    @[JSON::Field(key: "application", type: Stripe::QuoteApplication?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : Stripe::QuoteApplication? = nil

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    # The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application_fee_amount.nil? && !application_fee_amount_present?)]
    getter application_fee_amount : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? application_fee_amount_present : Bool = false

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
    @[JSON::Field(key: "application_fee_percent", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    getter application_fee_percent : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    @[JSON::Field(key: "customer", type: Stripe::QuoteCustomer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : Stripe::QuoteCustomer? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # The tax rates applied to this quote.
    @[JSON::Field(key: "default_tax_rates", type: Array(Stripe::QuoteDefaultTaxRatesInner)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_tax_rates : Array(Stripe::QuoteDefaultTaxRatesInner)? = nil

    # A description that will be displayed on the quote PDF.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # A footer that will be displayed on the quote PDF.
    @[JSON::Field(key: "footer", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: footer.nil? && !footer_present?)]
    getter footer : String? = nil

    @[JSON::Field(ignore: true)]
    property? footer_present : Bool = false

    @[JSON::Field(key: "from_quote", type: Stripe::QuoteFromQuote?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: from_quote.nil? && !from_quote_present?)]
    getter from_quote : Stripe::QuoteFromQuote? = nil

    @[JSON::Field(ignore: true)]
    property? from_quote_present : Bool = false

    # A header that will be displayed on the quote PDF.
    @[JSON::Field(key: "header", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: header.nil? && !header_present?)]
    getter header : String? = nil

    @[JSON::Field(ignore: true)]
    property? header_present : Bool = false

    @[JSON::Field(key: "invoice", type: Stripe::QuoteInvoice?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: invoice.nil? && !invoice_present?)]
    getter invoice : Stripe::QuoteInvoice? = nil

    @[JSON::Field(ignore: true)]
    property? invoice_present : Bool = false

    @[JSON::Field(key: "invoice_settings", type: Stripe::QuoteInvoiceSettings?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: invoice_settings.nil? && !invoice_settings_present?)]
    getter invoice_settings : Stripe::QuoteInvoiceSettings? = nil

    @[JSON::Field(ignore: true)]
    property? invoice_settings_present : Bool = false

    @[JSON::Field(key: "line_items", type: Stripe::QuotesResourceListLineItems1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter line_items : Stripe::QuotesResourceListLineItems1? = nil

    # A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
    @[JSON::Field(key: "number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: number.nil? && !number_present?)]
    getter number : String? = nil

    @[JSON::Field(ignore: true)]
    property? number_present : Bool = false

    @[JSON::Field(key: "on_behalf_of", type: Stripe::PaymentLinkOnBehalfOf?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    getter on_behalf_of : Stripe::PaymentLinkOnBehalfOf? = nil

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "subscription", type: Stripe::QuoteSubscription?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: subscription.nil? && !subscription_present?)]
    getter subscription : Stripe::QuoteSubscription? = nil

    @[JSON::Field(ignore: true)]
    property? subscription_present : Bool = false

    @[JSON::Field(key: "subscription_schedule", type: Stripe::QuoteSubscriptionSchedule?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: subscription_schedule.nil? && !subscription_schedule_present?)]
    getter subscription_schedule : Stripe::QuoteSubscriptionSchedule? = nil

    @[JSON::Field(ignore: true)]
    property? subscription_schedule_present : Bool = false

    @[JSON::Field(key: "test_clock", type: Stripe::QuoteTestClock?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: test_clock.nil? && !test_clock_present?)]
    getter test_clock : Stripe::QuoteTestClock? = nil

    @[JSON::Field(ignore: true)]
    property? test_clock_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: Stripe::QuoteTransferData?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    getter transfer_data : Stripe::QuoteTransferData? = nil

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_subtotal : Int64? = nil,
      @amount_total : Int64? = nil,
      @automatic_tax : Stripe::QuotesResourceAutomaticTax? = nil,
      @collection_method : String? = nil,
      @computed : Stripe::QuotesResourceComputed? = nil,
      @created : Int64? = nil,
      @discounts : Array(Stripe::InvoiceitemDiscountsInner)? = nil,
      @expires_at : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @status_transitions : Stripe::QuotesResourceStatusTransitions? = nil,
      @subscription_data : Stripe::QuotesResourceSubscriptionData? = nil,
      @total_details : Stripe::QuotesResourceTotalDetails? = nil,
      # Optional properties
      @application : Stripe::QuoteApplication? = nil,
      @application_fee_amount : Int64? = nil,
      @application_fee_percent : Float64? = nil,
      @currency : String? = nil,
      @customer : Stripe::QuoteCustomer? = nil,
      @default_tax_rates : Array(Stripe::QuoteDefaultTaxRatesInner)? = nil,
      @description : String? = nil,
      @footer : String? = nil,
      @from_quote : Stripe::QuoteFromQuote? = nil,
      @header : String? = nil,
      @invoice : Stripe::QuoteInvoice? = nil,
      @invoice_settings : Stripe::QuoteInvoiceSettings? = nil,
      @line_items : Stripe::QuotesResourceListLineItems1? = nil,
      @number : String? = nil,
      @on_behalf_of : Stripe::PaymentLinkOnBehalfOf? = nil,
      @subscription : Stripe::QuoteSubscription? = nil,
      @subscription_schedule : Stripe::QuoteSubscriptionSchedule? = nil,
      @test_clock : Stripe::QuoteTestClock? = nil,
      @transfer_data : Stripe::QuoteTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"amount_subtotal\" is required and cannot be null") if @amount_subtotal.nil?
      invalid_properties.push("\"amount_total\" is required and cannot be null") if @amount_total.nil?
      invalid_properties.push("\"automatic_tax\" is required and cannot be null") if @automatic_tax.nil?
      # This is a model automatic_tax : Stripe::QuotesResourceAutomaticTax?

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method, false)
      invalid_properties.push("\"computed\" is required and cannot be null") if @computed.nil?
      # This is a model computed : Stripe::QuotesResourceComputed?
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?
      invalid_properties.push("\"discounts\" is required and cannot be null") if @discounts.nil?
      # Container discounts array has values of Stripe::InvoiceitemDiscountsInner
      invalid_properties.push("\"expires_at\" is required and cannot be null") if @expires_at.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?
      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      invalid_properties.push("\"status_transitions\" is required and cannot be null") if @status_transitions.nil?
      # This is a model status_transitions : Stripe::QuotesResourceStatusTransitions?
      invalid_properties.push("\"subscription_data\" is required and cannot be null") if @subscription_data.nil?
      # This is a model subscription_data : Stripe::QuotesResourceSubscriptionData?
      invalid_properties.push("\"total_details\" is required and cannot be null") if @total_details.nil?
      # This is a model total_details : Stripe::QuotesResourceTotalDetails?
      # This is a model application : Stripe::QuoteApplication?
      if _currency = @currency
        if _currency.to_s.size > 5000
          invalid_properties.push("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model customer : Stripe::QuoteCustomer?
      # Container default_tax_rates array has values of Stripe::QuoteDefaultTaxRatesInner
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _footer = @footer
        if _footer.to_s.size > 5000
          invalid_properties.push("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model from_quote : Stripe::QuoteFromQuote?
      if _header = @header
        if _header.to_s.size > 5000
          invalid_properties.push("invalid value for \"header\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model invoice : Stripe::QuoteInvoice?
      # This is a model invoice_settings : Stripe::QuoteInvoiceSettings?
      # This is a model line_items : Stripe::QuotesResourceListLineItems1?
      if _number = @number
        if _number.to_s.size > 5000
          invalid_properties.push("invalid value for \"number\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model on_behalf_of : Stripe::PaymentLinkOnBehalfOf?
      # This is a model subscription : Stripe::QuoteSubscription?
      # This is a model subscription_schedule : Stripe::QuoteSubscriptionSchedule?
      # This is a model test_clock : Stripe::QuoteTestClock?
      # This is a model transfer_data : Stripe::QuoteTransferData?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @amount_subtotal.nil?
      return false if @amount_total.nil?
      return false if @automatic_tax.nil?
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method, false)
      return false if @computed.nil?
      return false if @created.nil?
      return false if @discounts.nil?
      return false if @expires_at.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false if @metadata.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false if @status_transitions.nil?
      return false if @subscription_data.nil?
      return false if @total_details.nil?
      if _currency = @currency
        return false if _currency.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      if _footer = @footer
        return false if _footer.to_s.size > 5000
      end
      if _header = @header
        return false if _header.to_s.size > 5000
      end
      if _number = @number
        return false if _number.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(amount_subtotal : Int64?)
      if amount_subtotal.nil?
        raise ArgumentError.new("\"amount_subtotal\" is required and cannot be null")
      end
      @amount_subtotal = amount_subtotal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(amount_total : Int64?)
      if amount_total.nil?
        raise ArgumentError.new("\"amount_total\" is required and cannot be null")
      end
      @amount_total = amount_total
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::QuotesResourceAutomaticTax?)
      if automatic_tax.nil?
        raise ArgumentError.new("\"automatic_tax\" is required and cannot be null")
      end
      @automatic_tax = automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method : String?)
      if collection_method.nil?
        raise ArgumentError.new("\"collection_method\" is required and cannot be null")
      end
      _collection_method = collection_method.not_nil!
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(_collection_method)
      @collection_method = collection_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] computed Object to be assigned
    def computed=(computed : Stripe::QuotesResourceComputed?)
      if computed.nil?
        raise ArgumentError.new("\"computed\" is required and cannot be null")
      end
      @computed = computed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      @created = created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(discounts : Array(Stripe::InvoiceitemDiscountsInner)?)
      if discounts.nil?
        raise ArgumentError.new("\"discounts\" is required and cannot be null")
      end
      @discounts = discounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_at Object to be assigned
    def expires_at=(expires_at : Int64?)
      if expires_at.nil?
        raise ArgumentError.new("\"expires_at\" is required and cannot be null")
      end
      @expires_at = expires_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_transitions Object to be assigned
    def status_transitions=(status_transitions : Stripe::QuotesResourceStatusTransitions?)
      if status_transitions.nil?
        raise ArgumentError.new("\"status_transitions\" is required and cannot be null")
      end
      @status_transitions = status_transitions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_data Object to be assigned
    def subscription_data=(subscription_data : Stripe::QuotesResourceSubscriptionData?)
      if subscription_data.nil?
        raise ArgumentError.new("\"subscription_data\" is required and cannot be null")
      end
      @subscription_data = subscription_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_details Object to be assigned
    def total_details=(total_details : Stripe::QuotesResourceTotalDetails?)
      if total_details.nil?
        raise ArgumentError.new("\"total_details\" is required and cannot be null")
      end
      @total_details = total_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(application : Stripe::QuoteApplication?)
      if application.nil?
        return @application = nil
      end
      @application = application
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_amount Object to be assigned
    def application_fee_amount=(application_fee_amount : Int64?)
      if application_fee_amount.nil?
        return @application_fee_amount = nil
      end
      @application_fee_amount = application_fee_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_percent Object to be assigned
    def application_fee_percent=(application_fee_percent : Float64?)
      if application_fee_percent.nil?
        return @application_fee_percent = nil
      end
      @application_fee_percent = application_fee_percent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      _currency = currency.not_nil!
      if _currency.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : Stripe::QuoteCustomer?)
      if customer.nil?
        return @customer = nil
      end
      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_tax_rates Object to be assigned
    def default_tax_rates=(default_tax_rates : Array(Stripe::QuoteDefaultTaxRatesInner)?)
      if default_tax_rates.nil?
        return @default_tax_rates = nil
      end
      @default_tax_rates = default_tax_rates
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] footer Object to be assigned
    def footer=(footer : String?)
      if footer.nil?
        return @footer = nil
      end
      _footer = footer.not_nil!
      if _footer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
      end

      @footer = footer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] from_quote Object to be assigned
    def from_quote=(from_quote : Stripe::QuoteFromQuote?)
      if from_quote.nil?
        return @from_quote = nil
      end
      @from_quote = from_quote
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] header Object to be assigned
    def header=(header : String?)
      if header.nil?
        return @header = nil
      end
      _header = header.not_nil!
      if _header.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"header\", the character length must be smaller than or equal to 5000.")
      end

      @header = header
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice Object to be assigned
    def invoice=(invoice : Stripe::QuoteInvoice?)
      if invoice.nil?
        return @invoice = nil
      end
      @invoice = invoice
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_settings Object to be assigned
    def invoice_settings=(invoice_settings : Stripe::QuoteInvoiceSettings?)
      if invoice_settings.nil?
        return @invoice_settings = nil
      end
      @invoice_settings = invoice_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(line_items : Stripe::QuotesResourceListLineItems1?)
      if line_items.nil?
        return @line_items = nil
      end
      @line_items = line_items
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number Object to be assigned
    def number=(number : String?)
      if number.nil?
        return @number = nil
      end
      _number = number.not_nil!
      if _number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"number\", the character length must be smaller than or equal to 5000.")
      end

      @number = number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(on_behalf_of : Stripe::PaymentLinkOnBehalfOf?)
      if on_behalf_of.nil?
        return @on_behalf_of = nil
      end
      @on_behalf_of = on_behalf_of
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription Object to be assigned
    def subscription=(subscription : Stripe::QuoteSubscription?)
      if subscription.nil?
        return @subscription = nil
      end
      @subscription = subscription
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_schedule Object to be assigned
    def subscription_schedule=(subscription_schedule : Stripe::QuoteSubscriptionSchedule?)
      if subscription_schedule.nil?
        return @subscription_schedule = nil
      end
      @subscription_schedule = subscription_schedule
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock Object to be assigned
    def test_clock=(test_clock : Stripe::QuoteTestClock?)
      if test_clock.nil?
        return @test_clock = nil
      end
      @test_clock = test_clock
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(transfer_data : Stripe::QuoteTransferData?)
      if transfer_data.nil?
        return @transfer_data = nil
      end
      @transfer_data = transfer_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_subtotal, @amount_total, @automatic_tax, @collection_method, @computed, @created, @discounts, @expires_at, @id, @livemode, @metadata, @object, @status, @status_transitions, @subscription_data, @total_details, @application, @application_present, @application_fee_amount, @application_fee_amount_present, @application_fee_percent, @application_fee_percent_present, @currency, @currency_present, @customer, @customer_present, @default_tax_rates, @description, @description_present, @footer, @footer_present, @from_quote, @from_quote_present, @header, @header_present, @invoice, @invoice_present, @invoice_settings, @invoice_settings_present, @line_items, @number, @number_present, @on_behalf_of, @on_behalf_of_present, @subscription, @subscription_present, @subscription_schedule, @subscription_schedule_present, @test_clock, @test_clock_present, @transfer_data, @transfer_data_present)
  end
end
