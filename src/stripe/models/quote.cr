#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # A Quote is a way to model prices that you'd like to provide to a customer. Once accepted, it will automatically create an invoice, subscription or subscription schedule.
  class Quote
    include NASON::Serializable

    # Required properties
    # Total before any discounts or taxes are applied.
    @[NASON::Field(key: "amount_subtotal", type: Int64)]
    property amount_subtotal : Int64

    # Total after discounts and taxes are applied.
    @[NASON::Field(key: "amount_total", type: Int64)]
    property amount_total : Int64

    @[NASON::Field(key: "automatic_tax", type: QuotesResourceAutomaticTax)]
    property automatic_tax : QuotesResourceAutomaticTax

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
    @[NASON::Field(key: "collection_method", type: String)]
    property collection_method : String

    @[NASON::Field(key: "computed", type: QuotesResourceComputed)]
    property computed : QuotesResourceComputed

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # The discounts applied to this quote.
    @[NASON::Field(key: "discounts", type: Array(String | Discount))]
    property discounts : Array(String | Discount)

    # The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "expires_at", type: Int64)]
    property expires_at : Int64

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # The status of the quote.
    @[NASON::Field(key: "status", type: String)]
    property status : String

    @[NASON::Field(key: "status_transitions", type: QuotesResourceStatusTransitions)]
    property status_transitions : QuotesResourceStatusTransitions

    @[NASON::Field(key: "subscription_data", type: QuotesResourceSubscriptionData)]
    property subscription_data : QuotesResourceSubscriptionData

    @[NASON::Field(key: "total_details", type: QuotesResourceTotalDetails)]
    property total_details : QuotesResourceTotalDetails

    # Optional properties
    # The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
    @[NASON::Field(key: "application_fee_amount", type: Int64? | Null, nillable: true)]
    property application_fee_amount : Int64? | Null

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
    @[NASON::Field(key: "application_fee_percent", type: Float64? | Null, nillable: true)]
    property application_fee_percent : Float64? | Null

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String? | Null, nillable: true)]
    property currency : String? | Null

    # The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    @[NASON::Field(key: "customer", type: String | Customer | Nil | Null, nillable: true)]
    property customer : String | Customer | Nil | Null

    # The tax rates applied to this quote.
    @[NASON::Field(key: "default_tax_rates", type: Array(String | TaxRate)?, nillable: true)]
    property default_tax_rates : Array(String | TaxRate)?

    # A description that will be displayed on the quote PDF.
    @[NASON::Field(key: "description", type: String? | Null, nillable: true)]
    property description : String? | Null

    # A footer that will be displayed on the quote PDF.
    @[NASON::Field(key: "footer", type: String? | Null, nillable: true)]
    property footer : String? | Null

    # Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.
    @[NASON::Field(key: "from_quote", type: QuotesResourceFromQuote? | Null, nillable: true)]
    property from_quote : QuotesResourceFromQuote? | Null

    # A header that will be displayed on the quote PDF.
    @[NASON::Field(key: "header", type: String? | Null, nillable: true)]
    property header : String? | Null

    # The invoice that was created from this quote.
    @[NASON::Field(key: "invoice", type: String | Invoice? | Null, nillable: true)]
    property invoice : String | Invoice? | Null

    # All invoices will be billed using the specified settings.
    @[NASON::Field(key: "invoice_settings", type: InvoiceSettingQuoteSetting? | Null, nillable: true)]
    property invoice_settings : InvoiceSettingQuoteSetting? | Null

    @[NASON::Field(key: "line_items", type: QuotesResourceListLineItems1?, nillable: true)]
    property line_items : QuotesResourceListLineItems1?

    # A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
    @[NASON::Field(key: "number", type: String? | Null, nillable: true)]
    property number : String? | Null

    # The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
    @[NASON::Field(key: "on_behalf_of", type: String | Account? | Null, nillable: true)]
    property on_behalf_of : String | Account? | Null

    # The subscription that was created or updated from this quote.
    @[NASON::Field(key: "subscription", type: String | Subscription? | Null, nillable: true)]
    property subscription : String | Subscription? | Null

    # The subscription schedule that was created or updated from this quote.
    @[NASON::Field(key: "subscription_schedule", type: String | SubscriptionSchedule? | Null, nillable: true)]
    property subscription_schedule : String | SubscriptionSchedule? | Null

    # The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
    @[NASON::Field(key: "transfer_data", type: QuotesResourceTransferData? | Null, nillable: true)]
    property transfer_data : QuotesResourceTransferData? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount_subtotal : Int64, @amount_total : Int64, @automatic_tax : QuotesResourceAutomaticTax, @collection_method : String, @computed : QuotesResourceComputed, @created : Int64, @discounts : Array(String | Discount), @expires_at : Int64, @id : String, @livemode : Bool, @metadata : Hash(String, String), @object : String, @status : String, @status_transitions : QuotesResourceStatusTransitions, @subscription_data : QuotesResourceSubscriptionData, @total_details : QuotesResourceTotalDetails, @application_fee_amount : Int64? | Null = nil, @application_fee_percent : Float64? | Null = nil, @currency : String? | Null = nil, @customer : String | Customer | Nil | Null = nil, @default_tax_rates : Array(String | TaxRate)? = nil, @description : String? | Null = nil, @footer : String? | Null = nil, @from_quote : QuotesResourceFromQuote? | Null = nil, @header : String? | Null = nil, @invoice : String | Invoice? | Null = nil, @invoice_settings : InvoiceSettingQuoteSetting? | Null = nil, @line_items : QuotesResourceListLineItems1? = nil, @number : String? | Null = nil, @on_behalf_of : String | Account? | Null = nil, @subscription : String | Subscription? | Null = nil, @subscription_schedule : String | SubscriptionSchedule? | Null = nil, @transfer_data : QuotesResourceTransferData? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@currency.nil? && !@currency.null? && @currency.to_s.size > 5000
        invalid_properties.push("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && !@description.null? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@footer.nil? && !@footer.null? && @footer.to_s.size > 5000
        invalid_properties.push("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
      end

      if !@header.nil? && !@header.null? && @header.to_s.size > 5000
        invalid_properties.push("invalid value for \"header\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@number.nil? && !@number.null? && @number.to_s.size > 5000
        invalid_properties.push("invalid value for \"number\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      collection_method_validator = EnumAttributeValidator.new("String", ["charge_automatically", "send_invoice"])
      return false unless collection_method_validator.valid?(@collection_method)
      return false if !@currency.nil? && !@currency.null? && @currency.to_s.size > 5000
      return false if !@description.nil? && !@description.null? && @description.to_s.size > 5000
      return false if !@footer.nil? && !@footer.null? && @footer.to_s.size > 5000
      return false if !@header.nil? && !@header.null? && @header.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false if !@number.nil? && !@number.null? && @number.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["quote"])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new("String", ["accepted", "canceled", "draft", "open"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method)
      validator = EnumAttributeValidator.new("String", ["charge_automatically", "send_invoice"])
      unless validator.valid?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{validator.allowable_values}.")
      end
      @collection_method = collection_method
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if !currency.nil? && !@currency.null? && currency.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && !@description.null? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] footer Value to be assigned
    def footer=(footer)
      if !footer.nil? && !@footer.null? && footer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"footer\", the character length must be smaller than or equal to 5000.")
      end

      @footer = footer
    end

    # Custom attribute writer method with validation
    # @param [Object] header Value to be assigned
    def header=(header)
      if !header.nil? && !@header.null? && header.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"header\", the character length must be smaller than or equal to 5000.")
      end

      @header = header
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] number Value to be assigned
    def number=(number)
      if !number.nil? && !@number.null? && number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"number\", the character length must be smaller than or equal to 5000.")
      end

      @number = number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["quote"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["accepted", "canceled", "draft", "open"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount_subtotal == o.amount_subtotal &&
        amount_total == o.amount_total &&
        application_fee_amount == o.application_fee_amount &&
        application_fee_percent == o.application_fee_percent &&
        automatic_tax == o.automatic_tax &&
        collection_method == o.collection_method &&
        computed == o.computed &&
        created == o.created &&
        currency == o.currency &&
        customer == o.customer &&
        default_tax_rates == o.default_tax_rates &&
        description == o.description &&
        discounts == o.discounts &&
        expires_at == o.expires_at &&
        footer == o.footer &&
        from_quote == o.from_quote &&
        header == o.header &&
        id == o.id &&
        invoice == o.invoice &&
        invoice_settings == o.invoice_settings &&
        line_items == o.line_items &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        number == o.number &&
        object == o.object &&
        on_behalf_of == o.on_behalf_of &&
        status == o.status &&
        status_transitions == o.status_transitions &&
        subscription == o.subscription &&
        subscription_data == o.subscription_data &&
        subscription_schedule == o.subscription_schedule &&
        total_details == o.total_details &&
        transfer_data == o.transfer_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount_subtotal, amount_total, application_fee_amount, application_fee_percent, automatic_tax, collection_method, computed, created, currency, customer, default_tax_rates, description, discounts, expires_at, footer, from_quote, header, id, invoice, invoice_settings, line_items, livemode, metadata, number, object, on_behalf_of, status, status_transitions, subscription, subscription_data, subscription_schedule, total_details, transfer_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
