#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ChargeOutcome
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as \"pending\" on a cardholder's statement.
    @[JSON::Field(key: "network_status", type: String?, presence: true, ignore_serialize: network_status.nil? && !network_status_present?)]
    getter network_status : String?

    @[JSON::Field(ignore: true)]
    property? network_status_present : Bool = false

    # An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
    @[JSON::Field(key: "reason", type: String?, presence: true, ignore_serialize: reason.nil? && !reason_present?)]
    getter reason : String?

    @[JSON::Field(ignore: true)]
    property? reason_present : Bool = false

    # A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
    @[JSON::Field(key: "seller_message", type: String?, presence: true, ignore_serialize: seller_message.nil? && !seller_message_present?)]
    getter seller_message : String?

    @[JSON::Field(ignore: true)]
    property? seller_message_present : Bool = false

    # Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    # Optional properties
    # Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
    @[JSON::Field(key: "risk_level", type: String?, presence: true, ignore_serialize: risk_level.nil? && !risk_level_present?)]
    getter risk_level : String?

    @[JSON::Field(ignore: true)]
    property? risk_level_present : Bool = false

    # Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
    @[JSON::Field(key: "risk_score", type: Int64?, presence: true, ignore_serialize: risk_score.nil? && !risk_score_present?)]
    property risk_score : Int64?

    @[JSON::Field(ignore: true)]
    property? risk_score_present : Bool = false

    @[JSON::Field(key: "rule", type: ChargeOutcomeRule?, presence: true, ignore_serialize: rule.nil? && !rule_present?)]
    property rule : ChargeOutcomeRule?

    @[JSON::Field(ignore: true)]
    property? rule_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @network_status : String?, @reason : String?, @seller_message : String?, @_type : String, @risk_level : String? = nil, @risk_score : Int64? = nil, @rule : ChargeOutcomeRule? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @network_status.to_s.size > 5000
        invalid_properties.push("invalid value for \"network_status\", the character length must be smaller than or equal to 5000.")
      end

      if @reason.to_s.size > 5000
        invalid_properties.push("invalid value for \"reason\", the character length must be smaller than or equal to 5000.")
      end

      if !@risk_level.nil? && @risk_level.to_s.size > 5000
        invalid_properties.push("invalid value for \"risk_level\", the character length must be smaller than or equal to 5000.")
      end

      if @seller_message.to_s.size > 5000
        invalid_properties.push("invalid value for \"seller_message\", the character length must be smaller than or equal to 5000.")
      end

      if @_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @network_status.to_s.size > 5000
      return false if @reason.to_s.size > 5000
      return false if !@risk_level.nil? && @risk_level.to_s.size > 5000
      return false if @seller_message.to_s.size > 5000
      return false if @_type.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] network_status Value to be assigned
    def network_status=(network_status)
      if network_status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network_status\", the character length must be smaller than or equal to 5000.")
      end

      @network_status = network_status
    end

    # Custom attribute writer method with validation
    # @param [Object] reason Value to be assigned
    def reason=(reason)
      if reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reason\", the character length must be smaller than or equal to 5000.")
      end

      @reason = reason
    end

    # Custom attribute writer method with validation
    # @param [Object] risk_level Value to be assigned
    def risk_level=(risk_level)
      if !risk_level.nil? && risk_level.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"risk_level\", the character length must be smaller than or equal to 5000.")
      end

      @risk_level = risk_level
    end

    # Custom attribute writer method with validation
    # @param [Object] seller_message Value to be assigned
    def seller_message=(seller_message)
      if seller_message.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"seller_message\", the character length must be smaller than or equal to 5000.")
      end

      @seller_message = seller_message
    end

    # Custom attribute writer method with validation
    # @param [Object] _type Value to be assigned
    def _type=(_type)
      if _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\", the character length must be smaller than or equal to 5000.")
      end

      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        network_status == o.network_status &&
        reason == o.reason &&
        risk_level == o.risk_level &&
        risk_score == o.risk_score &&
        rule == o.rule &&
        seller_message == o.seller_message &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@network_status, @reason, @risk_level, @risk_score, @rule, @seller_message, @_type)
  end
end
