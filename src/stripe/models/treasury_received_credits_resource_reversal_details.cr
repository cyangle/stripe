#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class TreasuryReceivedCreditsResourceReversalDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # Time before which a ReceivedCredit can be reversed.
    @[JSON::Field(key: "deadline", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: deadline.nil? && !deadline_present?)]
    getter deadline : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? deadline_present : Bool = false

    # Set if a ReceivedCredit cannot be reversed.
    @[JSON::Field(key: "restricted_reason", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: restricted_reason.nil? && !restricted_reason_present?)]
    getter restricted_reason : String? = nil

    @[JSON::Field(ignore: true)]
    property? restricted_reason_present : Bool = false

    ENUM_VALIDATOR_FOR_RESTRICTED_REASON = EnumValidator.new("restricted_reason", "String", ["already_reversed", "deadline_passed", "network_restricted", "other", "source_flow_restricted"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @deadline : Int64? = nil,
      @restricted_reason : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_RESTRICTED_REASON.error_message) unless ENUM_VALIDATOR_FOR_RESTRICTED_REASON.valid?(@restricted_reason)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false unless ENUM_VALIDATOR_FOR_RESTRICTED_REASON.valid?(@restricted_reason)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deadline Object to be assigned
    def deadline=(deadline : Int64?)
      if deadline.nil?
        return @deadline = nil
      end
      _deadline = deadline.not_nil!
      @deadline = _deadline
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] restricted_reason Object to be assigned
    def restricted_reason=(restricted_reason : String?)
      if restricted_reason.nil?
        return @restricted_reason = nil
      end
      _restricted_reason = restricted_reason.not_nil!
      ENUM_VALIDATOR_FOR_RESTRICTED_REASON.valid!(_restricted_reason)
      @restricted_reason = _restricted_reason
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@deadline, @deadline_present, @restricted_reason, @restricted_reason_present)
  end
end
