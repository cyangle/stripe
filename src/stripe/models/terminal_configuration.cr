#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Configurations object represents how features should be configured for terminal readers.
  class TerminalConfiguration
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = OpenApi::EnumValidator.new("object", "String", ["terminal.configuration"])

    # Optional properties

    @[JSON::Field(key: "bbpos_wisepos_e", type: Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bbpos_wisepos_e : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil

    # Whether this Configuration is the default for your account
    @[JSON::Field(key: "is_account_default", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: is_account_default.nil? && !is_account_default_present?)]
    getter is_account_default : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? is_account_default_present : Bool = false

    @[JSON::Field(key: "tipping", type: Stripe::TerminalConfigurationConfigurationResourceTipping?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tipping : Stripe::TerminalConfigurationConfigurationResourceTipping? = nil

    @[JSON::Field(key: "verifone_p400", type: Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verifone_p400 : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      # Optional properties
      @bbpos_wisepos_e : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil,
      @is_account_default : Bool? = nil,
      @tipping : Stripe::TerminalConfigurationConfigurationResourceTipping? = nil,
      @verifone_p400 : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      if _bbpos_wisepos_e = @bbpos_wisepos_e
        invalid_properties.concat(_bbpos_wisepos_e.list_invalid_properties_for("bbpos_wisepos_e")) if _bbpos_wisepos_e.is_a?(OpenApi::Validatable)
      end

      if _tipping = @tipping
        invalid_properties.concat(_tipping.list_invalid_properties_for("tipping")) if _tipping.is_a?(OpenApi::Validatable)
      end
      if _verifone_p400 = @verifone_p400
        invalid_properties.concat(_verifone_p400.list_invalid_properties_for("verifone_p400")) if _verifone_p400.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?

      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      if _bbpos_wisepos_e = @bbpos_wisepos_e
        return false if _bbpos_wisepos_e.is_a?(OpenApi::Validatable) && !_bbpos_wisepos_e.valid?
      end

      if _tipping = @tipping
        return false if _tipping.is_a?(OpenApi::Validatable) && !_tipping.valid?
      end
      if _verifone_p400 = @verifone_p400
        return false if _verifone_p400.is_a?(OpenApi::Validatable) && !_verifone_p400.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bbpos_wisepos_e Object to be assigned
    def bbpos_wisepos_e=(bbpos_wisepos_e : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?)
      if bbpos_wisepos_e.nil?
        return @bbpos_wisepos_e = nil
      end
      _bbpos_wisepos_e = bbpos_wisepos_e.not_nil!
      _bbpos_wisepos_e.validate if _bbpos_wisepos_e.is_a?(OpenApi::Validatable)
      @bbpos_wisepos_e = _bbpos_wisepos_e
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_account_default Object to be assigned
    def is_account_default=(is_account_default : Bool?)
      if is_account_default.nil?
        return @is_account_default = nil
      end
      _is_account_default = is_account_default.not_nil!
      @is_account_default = _is_account_default
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tipping Object to be assigned
    def tipping=(tipping : Stripe::TerminalConfigurationConfigurationResourceTipping?)
      if tipping.nil?
        return @tipping = nil
      end
      _tipping = tipping.not_nil!
      _tipping.validate if _tipping.is_a?(OpenApi::Validatable)
      @tipping = _tipping
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verifone_p400 Object to be assigned
    def verifone_p400=(verifone_p400 : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?)
      if verifone_p400.nil?
        return @verifone_p400 = nil
      end
      _verifone_p400 = verifone_p400.not_nil!
      _verifone_p400.validate if _verifone_p400.is_a?(OpenApi::Validatable)
      @verifone_p400 = _verifone_p400
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @livemode, @object, @bbpos_wisepos_e, @is_account_default, @is_account_default_present, @tipping, @verifone_p400)
  end
end
