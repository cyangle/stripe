#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Configurations object represents how features should be configured for terminal readers.
  class TerminalConfiguration
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [terminal.configuration]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("terminal.configuration")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "bbpos_wisepos_e", type: Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bbpos_wisepos_e : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil

    # Whether this Configuration is the default for your account
    @[JSON::Field(key: "is_account_default", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: is_account_default.nil? && !is_account_default_present?)]
    getter is_account_default : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? is_account_default_present : Bool = false

    @[JSON::Field(key: "tipping", type: Stripe::TerminalConfigurationConfigurationResourceTipping?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tipping : Stripe::TerminalConfigurationConfigurationResourceTipping? = nil

    @[JSON::Field(key: "verifone_p400", type: Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verifone_p400 : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      # Optional properties
      @bbpos_wisepos_e : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil,
      @is_account_default : Bool? = nil,
      @tipping : Stripe::TerminalConfigurationConfigurationResourceTipping? = nil,
      @verifone_p400 : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_bbpos_wisepos_e = @bbpos_wisepos_e).nil?
        invalid_properties.concat(_bbpos_wisepos_e.list_invalid_properties_for("bbpos_wisepos_e")) if _bbpos_wisepos_e.is_a?(OpenApi::Validatable)
      end

      unless (_tipping = @tipping).nil?
        invalid_properties.concat(_tipping.list_invalid_properties_for("tipping")) if _tipping.is_a?(OpenApi::Validatable)
      end
      unless (_verifone_p400 = @verifone_p400).nil?
        invalid_properties.concat(_verifone_p400.list_invalid_properties_for("verifone_p400")) if _verifone_p400.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_bbpos_wisepos_e = @bbpos_wisepos_e).nil?
        return false if _bbpos_wisepos_e.is_a?(OpenApi::Validatable) && !_bbpos_wisepos_e.valid?
      end

      unless (_tipping = @tipping).nil?
        return false if _tipping.is_a?(OpenApi::Validatable) && !_tipping.valid?
      end

      unless (_verifone_p400 = @verifone_p400).nil?
        return false if _verifone_p400.is_a?(OpenApi::Validatable) && !_verifone_p400.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bbpos_wisepos_e Object to be assigned
    def bbpos_wisepos_e=(new_value : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bbpos_wisepos_e = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_account_default Object to be assigned
    def is_account_default=(new_value : Bool?)
      @is_account_default = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tipping Object to be assigned
    def tipping=(new_value : Stripe::TerminalConfigurationConfigurationResourceTipping?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tipping = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verifone_p400 Object to be assigned
    def verifone_p400=(new_value : Stripe::TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @verifone_p400 = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @livemode, @object, @bbpos_wisepos_e, @is_account_default, @is_account_default_present, @tipping, @verifone_p400)
  end
end
