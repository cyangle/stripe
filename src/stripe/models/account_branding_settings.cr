#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./account_branding_settings_icon"
require "./account_branding_settings_logo"

module Stripe
  #
  class AccountBrandingSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "icon", type: Stripe::AccountBrandingSettingsIcon?, default: nil, required: true, nullable: true, emit_null: true)]
    getter icon : Stripe::AccountBrandingSettingsIcon? = nil

    @[JSON::Field(key: "logo", type: Stripe::AccountBrandingSettingsLogo?, default: nil, required: true, nullable: true, emit_null: true)]
    getter logo : Stripe::AccountBrandingSettingsLogo? = nil

    # A CSS hex color value representing the primary branding color for this account
    @[JSON::Field(key: "primary_color", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter primary_color : String? = nil
    MAX_LENGTH_FOR_PRIMARY_COLOR = 5000

    # A CSS hex color value representing the secondary branding color for this account
    @[JSON::Field(key: "secondary_color", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter secondary_color : String? = nil
    MAX_LENGTH_FOR_SECONDARY_COLOR = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @icon : Stripe::AccountBrandingSettingsIcon? = nil,
      @logo : Stripe::AccountBrandingSettingsLogo? = nil,
      @primary_color : String? = nil,
      @secondary_color : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_icon = @icon).nil?
        invalid_properties.concat(_icon.list_invalid_properties_for("icon")) if _icon.is_a?(OpenApi::Validatable)
      end
      unless (_logo = @logo).nil?
        invalid_properties.concat(_logo.list_invalid_properties_for("logo")) if _logo.is_a?(OpenApi::Validatable)
      end
      unless (_primary_color = @primary_color).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("primary_color", _primary_color.to_s.size, MAX_LENGTH_FOR_PRIMARY_COLOR)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_secondary_color = @secondary_color).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("secondary_color", _secondary_color.to_s.size, MAX_LENGTH_FOR_SECONDARY_COLOR)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_icon = @icon).nil?
        return false if _icon.is_a?(OpenApi::Validatable) && !_icon.valid?
      end

      unless (_logo = @logo).nil?
        return false if _logo.is_a?(OpenApi::Validatable) && !_logo.valid?
      end

      unless (_primary_color = @primary_color).nil?
        return false if _primary_color.to_s.size > MAX_LENGTH_FOR_PRIMARY_COLOR
      end

      unless (_secondary_color = @secondary_color).nil?
        return false if _secondary_color.to_s.size > MAX_LENGTH_FOR_SECONDARY_COLOR
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] icon Object to be assigned
    def icon=(new_value : Stripe::AccountBrandingSettingsIcon?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @icon = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] logo Object to be assigned
    def logo=(new_value : Stripe::AccountBrandingSettingsLogo?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @logo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_color Object to be assigned
    def primary_color=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("primary_color", new_value.to_s.size, MAX_LENGTH_FOR_PRIMARY_COLOR)
      end

      @primary_color = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secondary_color Object to be assigned
    def secondary_color=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("secondary_color", new_value.to_s.size, MAX_LENGTH_FOR_SECONDARY_COLOR)
      end

      @secondary_color = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@icon, @logo, @primary_color, @secondary_color)
  end
end
