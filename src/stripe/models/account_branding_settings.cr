#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AccountBrandingSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "icon", type: AccountBrandingSettingsIcon?, presence: true, ignore_serialize: icon.nil? && !icon_present?)]
    property icon : AccountBrandingSettingsIcon?

    @[JSON::Field(ignore: true)]
    property? icon_present : Bool = false

    @[JSON::Field(key: "logo", type: AccountBrandingSettingsLogo?, presence: true, ignore_serialize: logo.nil? && !logo_present?)]
    property logo : AccountBrandingSettingsLogo?

    @[JSON::Field(ignore: true)]
    property? logo_present : Bool = false

    # A CSS hex color value representing the primary branding color for this account
    @[JSON::Field(key: "primary_color", type: String?, presence: true, ignore_serialize: primary_color.nil? && !primary_color_present?)]
    getter primary_color : String?

    @[JSON::Field(ignore: true)]
    property? primary_color_present : Bool = false

    # A CSS hex color value representing the secondary branding color for this account
    @[JSON::Field(key: "secondary_color", type: String?, presence: true, ignore_serialize: secondary_color.nil? && !secondary_color_present?)]
    getter secondary_color : String?

    @[JSON::Field(ignore: true)]
    property? secondary_color_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @icon : AccountBrandingSettingsIcon? = nil,
      @logo : AccountBrandingSettingsLogo? = nil,
      @primary_color : String? = nil,
      @secondary_color : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@primary_color.nil? && @primary_color.to_s.size > 5000
        invalid_properties.push("invalid value for \"primary_color\", the character length must be smaller than or equal to 5000.")
      end

      if !@secondary_color.nil? && @secondary_color.to_s.size > 5000
        invalid_properties.push("invalid value for \"secondary_color\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@primary_color.nil? && @primary_color.to_s.size > 5000
      return false if !@secondary_color.nil? && @secondary_color.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] primary_color Value to be assigned
    def primary_color=(primary_color : String?)
      if !primary_color.nil? && primary_color.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"primary_color\", the character length must be smaller than or equal to 5000.")
      end

      @primary_color = primary_color
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_color Value to be assigned
    def secondary_color=(secondary_color : String?)
      if !secondary_color.nil? && secondary_color.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"secondary_color\", the character length must be smaller than or equal to 5000.")
      end

      @secondary_color = secondary_color
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@icon, @icon_present, @logo, @logo_present, @primary_color, @primary_color_present, @secondary_color, @secondary_color_present)
  end
end
