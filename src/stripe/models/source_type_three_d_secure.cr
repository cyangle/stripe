#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class SourceTypeThreeDSecure
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "address_line1_check", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address_line1_check.nil? && !address_line1_check_present?)]
    getter address_line1_check : String? = nil

    @[JSON::Field(ignore: true)]
    property? address_line1_check_present : Bool = false

    @[JSON::Field(key: "address_zip_check", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address_zip_check.nil? && !address_zip_check_present?)]
    getter address_zip_check : String? = nil

    @[JSON::Field(ignore: true)]
    property? address_zip_check_present : Bool = false

    @[JSON::Field(key: "authenticated", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: authenticated.nil? && !authenticated_present?)]
    getter authenticated : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? authenticated_present : Bool = false

    @[JSON::Field(key: "brand", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: brand.nil? && !brand_present?)]
    getter brand : String? = nil

    @[JSON::Field(ignore: true)]
    property? brand_present : Bool = false

    @[JSON::Field(key: "card", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: card.nil? && !card_present?)]
    getter card : String? = nil

    @[JSON::Field(ignore: true)]
    property? card_present : Bool = false

    @[JSON::Field(key: "country", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String? = nil

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    @[JSON::Field(key: "cvc_check", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cvc_check.nil? && !cvc_check_present?)]
    getter cvc_check : String? = nil

    @[JSON::Field(ignore: true)]
    property? cvc_check_present : Bool = false

    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "dynamic_last4", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: dynamic_last4.nil? && !dynamic_last4_present?)]
    getter dynamic_last4 : String? = nil

    @[JSON::Field(ignore: true)]
    property? dynamic_last4_present : Bool = false

    @[JSON::Field(key: "exp_month", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: exp_month.nil? && !exp_month_present?)]
    getter exp_month : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? exp_month_present : Bool = false

    @[JSON::Field(key: "exp_year", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: exp_year.nil? && !exp_year_present?)]
    getter exp_year : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? exp_year_present : Bool = false

    @[JSON::Field(key: "fingerprint", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fingerprint : String? = nil

    @[JSON::Field(key: "funding", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: funding.nil? && !funding_present?)]
    getter funding : String? = nil

    @[JSON::Field(ignore: true)]
    property? funding_present : Bool = false

    @[JSON::Field(key: "iin", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter iin : String? = nil

    @[JSON::Field(key: "issuer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter issuer : String? = nil

    @[JSON::Field(key: "last4", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last4.nil? && !last4_present?)]
    getter last4 : String? = nil

    @[JSON::Field(ignore: true)]
    property? last4_present : Bool = false

    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String? = nil

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    @[JSON::Field(key: "three_d_secure", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter three_d_secure : String? = nil

    @[JSON::Field(key: "tokenization_method", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tokenization_method.nil? && !tokenization_method_present?)]
    getter tokenization_method : String? = nil

    @[JSON::Field(ignore: true)]
    property? tokenization_method_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @address_line1_check : String? = nil,
      @address_zip_check : String? = nil,
      @authenticated : Bool? = nil,
      @brand : String? = nil,
      @card : String? = nil,
      @country : String? = nil,
      @customer : String? = nil,
      @cvc_check : String? = nil,
      @description : String? = nil,
      @dynamic_last4 : String? = nil,
      @exp_month : Int64? = nil,
      @exp_year : Int64? = nil,
      @fingerprint : String? = nil,
      @funding : String? = nil,
      @iin : String? = nil,
      @issuer : String? = nil,
      @last4 : String? = nil,
      @name : String? = nil,
      @three_d_secure : String? = nil,
      @tokenization_method : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_line1_check Object to be assigned
    def address_line1_check=(new_value : String?)
      @address_line1_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address_zip_check Object to be assigned
    def address_zip_check=(new_value : String?)
      @address_zip_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authenticated Object to be assigned
    def authenticated=(new_value : Bool?)
      @authenticated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] brand Object to be assigned
    def brand=(new_value : String?)
      @brand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(new_value : String?)
      @card = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(new_value : String?)
      @country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : String?)
      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc_check Object to be assigned
    def cvc_check=(new_value : String?)
      @cvc_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dynamic_last4 Object to be assigned
    def dynamic_last4=(new_value : String?)
      @dynamic_last4 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exp_month Object to be assigned
    def exp_month=(new_value : Int64?)
      @exp_month = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exp_year Object to be assigned
    def exp_year=(new_value : Int64?)
      @exp_year = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fingerprint Object to be assigned
    def fingerprint=(new_value : String?)
      @fingerprint = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding Object to be assigned
    def funding=(new_value : String?)
      @funding = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iin Object to be assigned
    def iin=(new_value : String?)
      @iin = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuer Object to be assigned
    def issuer=(new_value : String?)
      @issuer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last4 Object to be assigned
    def last4=(new_value : String?)
      @last4 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] three_d_secure Object to be assigned
    def three_d_secure=(new_value : String?)
      @three_d_secure = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tokenization_method Object to be assigned
    def tokenization_method=(new_value : String?)
      @tokenization_method = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address_line1_check, @address_line1_check_present, @address_zip_check, @address_zip_check_present, @authenticated, @authenticated_present, @brand, @brand_present, @card, @card_present2, @country, @country_present, @customer, @customer_present, @cvc_check, @cvc_check_present, @description, @dynamic_last4, @dynamic_last4_present, @exp_month, @exp_month_present, @exp_year, @exp_year_present, @fingerprint, @funding, @funding_present, @iin, @issuer, @last4, @last4_present, @name, @name_present, @three_d_secure, @tokenization_method, @tokenization_method_present)
  end
end
