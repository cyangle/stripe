#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Payment settings to pass to invoices created by the subscription.
  class PaymentSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "payment_method_options", type: Stripe::PaymentMethodOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_options : Stripe::PaymentMethodOptions? = nil

    @[JSON::Field(key: "payment_method_types", type: Stripe::PaymentSettingsPaymentMethodTypes?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_types : Stripe::PaymentSettingsPaymentMethodTypes? = nil

    @[JSON::Field(key: "save_default_payment_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter save_default_payment_method : String? = nil
    ERROR_MESSAGE_FOR_SAVE_DEFAULT_PAYMENT_METHOD = "invalid value for \"save_default_payment_method\", must be one of [off, on_subscription]."
    VALID_VALUES_FOR_SAVE_DEFAULT_PAYMENT_METHOD  = String.static_array("off", "on_subscription")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @payment_method_options : Stripe::PaymentMethodOptions? = nil,
      @payment_method_types : Stripe::PaymentSettingsPaymentMethodTypes? = nil,
      @save_default_payment_method : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_payment_method_options = @payment_method_options).nil?
        invalid_properties.concat(_payment_method_options.list_invalid_properties_for("payment_method_options")) if _payment_method_options.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_types = @payment_method_types).nil?
        invalid_properties.concat(_payment_method_types.list_invalid_properties_for("payment_method_types")) if _payment_method_types.is_a?(OpenApi::Validatable)
      end
      unless (_save_default_payment_method = @save_default_payment_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SAVE_DEFAULT_PAYMENT_METHOD) unless OpenApi::EnumValidator.valid?(_save_default_payment_method, VALID_VALUES_FOR_SAVE_DEFAULT_PAYMENT_METHOD)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_payment_method_options = @payment_method_options).nil?
        return false if _payment_method_options.is_a?(OpenApi::Validatable) && !_payment_method_options.valid?
      end

      unless (_payment_method_types = @payment_method_types).nil?
        return false if _payment_method_types.is_a?(OpenApi::Validatable) && !_payment_method_types.valid?
      end

      unless (_save_default_payment_method = @save_default_payment_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_save_default_payment_method, VALID_VALUES_FOR_SAVE_DEFAULT_PAYMENT_METHOD)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(payment_method_options : Stripe::PaymentMethodOptions?)
      if payment_method_options.nil?
        return @payment_method_options = nil
      end
      _payment_method_options = payment_method_options.not_nil!
      _payment_method_options.validate if _payment_method_options.is_a?(OpenApi::Validatable)
      @payment_method_options = _payment_method_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(payment_method_types : Stripe::PaymentSettingsPaymentMethodTypes?)
      if payment_method_types.nil?
        return @payment_method_types = nil
      end
      _payment_method_types = payment_method_types.not_nil!
      _payment_method_types.validate if _payment_method_types.is_a?(OpenApi::Validatable)
      @payment_method_types = _payment_method_types
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] save_default_payment_method Object to be assigned
    def save_default_payment_method=(save_default_payment_method : String?)
      if save_default_payment_method.nil?
        return @save_default_payment_method = nil
      end
      _save_default_payment_method = save_default_payment_method.not_nil!
      OpenApi::EnumValidator.validate("save_default_payment_method", _save_default_payment_method, VALID_VALUES_FOR_SAVE_DEFAULT_PAYMENT_METHOD)
      @save_default_payment_method = _save_default_payment_method
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@payment_method_options, @payment_method_types, @save_default_payment_method)
  end
end
