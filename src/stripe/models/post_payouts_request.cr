#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostPayoutsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # A positive integer in cents representing how much to payout.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # Optional properties

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The ID of a bank account or a card to send the payout to. If no destination is supplied, the default external account for the specified currency will be used.
    @[JSON::Field(key: "destination", type: String?, presence: true, ignore_serialize: destination.nil? && !destination_present?)]
    property destination : String?

    @[JSON::Field(ignore: true)]
    property? destination_present : Bool = false

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces for more information](https://stripe.com/blog/instant-payouts-for-marketplaces).)
    @[JSON::Field(key: "method", type: String?, presence: true, ignore_serialize: method.nil? && !method_present?)]
    getter method : String?

    @[JSON::Field(ignore: true)]
    property? method_present : Bool = false

    ENUM_VALIDATOR_FOR_METHOD = EnumValidator.new("method", "String", ["instant", "standard"])

    # The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. One of `bank_account`, `card`, or `fpx`.
    @[JSON::Field(key: "source_type", type: String?, presence: true, ignore_serialize: source_type.nil? && !source_type_present?)]
    getter source_type : String?

    @[JSON::Field(ignore: true)]
    property? source_type_present : Bool = false

    ENUM_VALIDATOR_FOR_SOURCE_TYPE = EnumValidator.new("source_type", "String", ["bank_account", "card", "fpx"])

    # A string to be displayed on the recipient's bank or card statement. This may be at most 22 characters. Attempting to use a `statement_descriptor` longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all.
    @[JSON::Field(key: "statement_descriptor", type: String?, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String?

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @amount : Int64, 
      @currency : String, 
      # Optional properties
      @description : String? = nil, 
      @destination : String? = nil, 
      @expand : Array(String)? = nil, 
      @metadata : Hash(String, String)? = nil, 
      @method : String? = nil, 
      @source_type : String? = nil, 
      @statement_descriptor : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_METHOD.error_message) unless ENUM_VALIDATOR_FOR_METHOD.valid?(@method)

      if !@method.nil? && @method.to_s.size > 5000
        invalid_properties.push("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_SOURCE_TYPE.error_message) unless ENUM_VALIDATOR_FOR_SOURCE_TYPE.valid?(@source_type)

      if !@source_type.nil? && @source_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.nil? && @statement_descriptor.to_s.size > 22
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 22.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@description.nil? && @description.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_METHOD.valid?(@method)
      return false if !@method.nil? && @method.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_SOURCE_TYPE.valid?(@source_type)
      return false if !@source_type.nil? && @source_type.to_s.size > 5000
      return false if !@statement_descriptor.nil? && @statement_descriptor.to_s.size > 22

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] method Object to be assigned
    def method=(method)
      ENUM_VALIDATOR_FOR_METHOD.valid!(method)
      @method = method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_type Object to be assigned
    def source_type=(source_type)
      ENUM_VALIDATOR_FOR_SOURCE_TYPE.valid!(source_type)
      @source_type = source_type
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor)
      if !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 22.")
      end

      @statement_descriptor = statement_descriptor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @currency, @description, @destination, @expand, @metadata, @method, @source_type, @statement_descriptor)
  end
end
