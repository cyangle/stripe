#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # To charge a credit or a debit card, you create a `Charge` object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.  Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
  class Charge
    include NASON::Serializable

    # Required properties
    # Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
    @[NASON::Field(key: "amount_captured", type: Int64)]
    property amount_captured : Int64

    # Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    @[NASON::Field(key: "amount_refunded", type: Int64)]
    property amount_refunded : Int64

    @[NASON::Field(key: "billing_details", type: BillingDetails)]
    property billing_details : BillingDetails

    # If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    @[NASON::Field(key: "captured", type: Bool)]
    property captured : Bool

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Whether the charge has been disputed.
    @[NASON::Field(key: "disputed", type: Bool)]
    property disputed : Bool

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # `true` if the charge succeeded, or was successfully authorized for later capture.
    @[NASON::Field(key: "paid", type: Bool)]
    property paid : Bool

    # Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    @[NASON::Field(key: "refunded", type: Bool)]
    property refunded : Bool

    @[NASON::Field(key: "refunds", type: RefundList1)]
    property refunds : RefundList1

    # The status of the payment is either `succeeded`, `pending`, or `failed`.
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # Optional properties
    # ID of the Connect application that created the charge.
    @[NASON::Field(key: "application", type: String | Application? | Null, nillable: true)]
    property application : String | Application? | Null

    # The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    @[NASON::Field(key: "application_fee", type: String | ApplicationFee? | Null, nillable: true)]
    property application_fee : String | ApplicationFee? | Null

    # The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    @[NASON::Field(key: "application_fee_amount", type: Int64? | Null, nillable: true)]
    property application_fee_amount : Int64? | Null

    # ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
    @[NASON::Field(key: "balance_transaction", type: String | BalanceTransaction? | Null, nillable: true)]
    property balance_transaction : String | BalanceTransaction? | Null

    # The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
    @[NASON::Field(key: "calculated_statement_descriptor", type: String? | Null, nillable: true)]
    property calculated_statement_descriptor : String? | Null

    # ID of the customer this charge is for if one exists.
    @[NASON::Field(key: "customer", type: String | Customer | Nil | Null, nillable: true)]
    property customer : String | Customer | Nil | Null

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[NASON::Field(key: "description", type: String? | Null, nillable: true)]
    property description : String? | Null

    # Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
    @[NASON::Field(key: "failure_code", type: String? | Null, nillable: true)]
    property failure_code : String? | Null

    # Message to user further explaining reason for charge failure if available.
    @[NASON::Field(key: "failure_message", type: String? | Null, nillable: true)]
    property failure_message : String? | Null

    # Information on fraud assessments for the charge.
    @[NASON::Field(key: "fraud_details", type: ChargeFraudDetails? | Null, nillable: true)]
    property fraud_details : ChargeFraudDetails? | Null

    # ID of the invoice this charge is for if one exists.
    @[NASON::Field(key: "invoice", type: String | Invoice? | Null, nillable: true)]
    property invoice : String | Invoice? | Null

    # The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details.
    @[NASON::Field(key: "on_behalf_of", type: String | Account? | Null, nillable: true)]
    property on_behalf_of : String | Account? | Null

    # ID of the order this charge is for if one exists.
    @[NASON::Field(key: "order", type: String | Order? | Null, nillable: true)]
    property order : String | Order? | Null

    # Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
    @[NASON::Field(key: "outcome", type: ChargeOutcome? | Null, nillable: true)]
    property outcome : ChargeOutcome? | Null

    # ID of the PaymentIntent associated with this charge, if one exists.
    @[NASON::Field(key: "payment_intent", type: String | PaymentIntent? | Null, nillable: true)]
    property payment_intent : String | PaymentIntent? | Null

    # ID of the payment method used in this charge.
    @[NASON::Field(key: "payment_method", type: String? | Null, nillable: true)]
    property payment_method : String? | Null

    # Details about the payment method at the time of the transaction.
    @[NASON::Field(key: "payment_method_details", type: PaymentMethodDetails? | Null, nillable: true)]
    property payment_method_details : PaymentMethodDetails? | Null

    # This is the email address that the receipt for this charge was sent to.
    @[NASON::Field(key: "receipt_email", type: String? | Null, nillable: true)]
    property receipt_email : String? | Null

    # This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
    @[NASON::Field(key: "receipt_number", type: String? | Null, nillable: true)]
    property receipt_number : String? | Null

    # This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    @[NASON::Field(key: "receipt_url", type: String? | Null, nillable: true)]
    property receipt_url : String? | Null

    # ID of the review associated with this charge if one exists.
    @[NASON::Field(key: "review", type: String | Review? | Null, nillable: true)]
    property review : String | Review? | Null

    # Shipping information for the charge.
    @[NASON::Field(key: "shipping", type: Shipping? | Null, nillable: true)]
    property shipping : Shipping? | Null

    # The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
    @[NASON::Field(key: "source_transfer", type: String | Transfer? | Null, nillable: true)]
    property source_transfer : String | Transfer? | Null

    # For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customersâ statements. Must contain at least one letter, maximum 22 characters.
    @[NASON::Field(key: "statement_descriptor", type: String? | Null, nillable: true)]
    property statement_descriptor : String? | Null

    # Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâs set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    @[NASON::Field(key: "statement_descriptor_suffix", type: String? | Null, nillable: true)]
    property statement_descriptor_suffix : String? | Null

    # ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
    @[NASON::Field(key: "transfer", type: String | Transfer? | Null, nillable: true)]
    property transfer : String | Transfer? | Null

    # An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
    @[NASON::Field(key: "transfer_data", type: ChargeTransferData? | Null, nillable: true)]
    property transfer_data : ChargeTransferData? | Null

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    @[NASON::Field(key: "transfer_group", type: String? | Null, nillable: true)]
    property transfer_group : String? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @amount_captured : Int64, @amount_refunded : Int64, @billing_details : BillingDetails, @captured : Bool, @created : Int64, @currency : String, @disputed : Bool, @id : String, @livemode : Bool, @metadata : Hash(String, String), @object : String, @paid : Bool, @refunded : Bool, @refunds : RefundList1, @status : String, @application : String | Application? | Null = nil, @application_fee : String | ApplicationFee? | Null = nil, @application_fee_amount : Int64? | Null = nil, @balance_transaction : String | BalanceTransaction? | Null = nil, @calculated_statement_descriptor : String? | Null = nil, @customer : String | Customer | Nil | Null = nil, @description : String? | Null = nil, @failure_code : String? | Null = nil, @failure_message : String? | Null = nil, @fraud_details : ChargeFraudDetails? | Null = nil, @invoice : String | Invoice? | Null = nil, @on_behalf_of : String | Account? | Null = nil, @order : String | Order? | Null = nil, @outcome : ChargeOutcome? | Null = nil, @payment_intent : String | PaymentIntent? | Null = nil, @payment_method : String? | Null = nil, @payment_method_details : PaymentMethodDetails? | Null = nil, @receipt_email : String? | Null = nil, @receipt_number : String? | Null = nil, @receipt_url : String? | Null = nil, @review : String | Review? | Null = nil, @shipping : Shipping? | Null = nil, @source_transfer : String | Transfer? | Null = nil, @statement_descriptor : String? | Null = nil, @statement_descriptor_suffix : String? | Null = nil, @transfer : String | Transfer? | Null = nil, @transfer_data : ChargeTransferData? | Null = nil, @transfer_group : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@calculated_statement_descriptor.nil? && !@calculated_statement_descriptor.null? && @calculated_statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"calculated_statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && !@description.null? && @description.to_s.size > 40000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 40000.")
      end

      if !@failure_code.nil? && !@failure_code.null? && @failure_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      if !@failure_message.nil? && !@failure_message.null? && @failure_message.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@payment_method.nil? && !@payment_method.null? && @payment_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"payment_method\", the character length must be smaller than or equal to 5000.")
      end

      if !@receipt_email.nil? && !@receipt_email.null? && @receipt_email.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_email\", the character length must be smaller than or equal to 5000.")
      end

      if !@receipt_number.nil? && !@receipt_number.null? && @receipt_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      if !@receipt_url.nil? && !@receipt_url.null? && @receipt_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.nil? && !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor_suffix.nil? && !@statement_descriptor_suffix.null? && @statement_descriptor_suffix.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 5000.")
      end

      if !@transfer_group.nil? && !@transfer_group.null? && @transfer_group.to_s.size > 5000
        invalid_properties.push("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@calculated_statement_descriptor.nil? && !@calculated_statement_descriptor.null? && @calculated_statement_descriptor.to_s.size > 5000
      return false if !@description.nil? && !@description.null? && @description.to_s.size > 40000
      return false if !@failure_code.nil? && !@failure_code.null? && @failure_code.to_s.size > 5000
      return false if !@failure_message.nil? && !@failure_message.null? && @failure_message.to_s.size > 5000
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["charge"])
      return false unless object_validator.valid?(@object)
      return false if !@payment_method.nil? && !@payment_method.null? && @payment_method.to_s.size > 5000
      return false if !@receipt_email.nil? && !@receipt_email.null? && @receipt_email.to_s.size > 5000
      return false if !@receipt_number.nil? && !@receipt_number.null? && @receipt_number.to_s.size > 5000
      return false if !@receipt_url.nil? && !@receipt_url.null? && @receipt_url.to_s.size > 5000
      return false if !@statement_descriptor.nil? && !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
      return false if !@statement_descriptor_suffix.nil? && !@statement_descriptor_suffix.null? && @statement_descriptor_suffix.to_s.size > 5000
      status_validator = EnumAttributeValidator.new("String", ["failed", "pending", "succeeded"])
      return false unless status_validator.valid?(@status)
      return false if !@transfer_group.nil? && !@transfer_group.null? && @transfer_group.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] calculated_statement_descriptor Value to be assigned
    def calculated_statement_descriptor=(calculated_statement_descriptor)
      if !calculated_statement_descriptor.nil? && !@calculated_statement_descriptor.null? && calculated_statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"calculated_statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @calculated_statement_descriptor = calculated_statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && !@description.null? && description.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 40000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_code Value to be assigned
    def failure_code=(failure_code)
      if !failure_code.nil? && !@failure_code.null? && failure_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      @failure_code = failure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_message Value to be assigned
    def failure_message=(failure_message)
      if !failure_message.nil? && !@failure_message.null? && failure_message.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      @failure_message = failure_message
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["charge"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method Value to be assigned
    def payment_method=(payment_method)
      if !payment_method.nil? && !@payment_method.null? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @payment_method = payment_method
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_email Value to be assigned
    def receipt_email=(receipt_email)
      if !receipt_email.nil? && !@receipt_email.null? && receipt_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_email\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_email = receipt_email
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_number Value to be assigned
    def receipt_number=(receipt_number)
      if !receipt_number.nil? && !@receipt_number.null? && receipt_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_number\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_number = receipt_number
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_url Value to be assigned
    def receipt_url=(receipt_url)
      if !receipt_url.nil? && !@receipt_url.null? && receipt_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_url = receipt_url
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor)
      if !statement_descriptor.nil? && !@statement_descriptor.null? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor_suffix Value to be assigned
    def statement_descriptor_suffix=(statement_descriptor_suffix)
      if !statement_descriptor_suffix.nil? && !@statement_descriptor_suffix.null? && statement_descriptor_suffix.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor_suffix = statement_descriptor_suffix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["failed", "pending", "succeeded"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] transfer_group Value to be assigned
    def transfer_group=(transfer_group)
      if !transfer_group.nil? && !@transfer_group.null? && transfer_group.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      @transfer_group = transfer_group
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        amount_captured == o.amount_captured &&
        amount_refunded == o.amount_refunded &&
        application == o.application &&
        application_fee == o.application_fee &&
        application_fee_amount == o.application_fee_amount &&
        balance_transaction == o.balance_transaction &&
        billing_details == o.billing_details &&
        calculated_statement_descriptor == o.calculated_statement_descriptor &&
        captured == o.captured &&
        created == o.created &&
        currency == o.currency &&
        customer == o.customer &&
        description == o.description &&
        disputed == o.disputed &&
        failure_code == o.failure_code &&
        failure_message == o.failure_message &&
        fraud_details == o.fraud_details &&
        id == o.id &&
        invoice == o.invoice &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        object == o.object &&
        on_behalf_of == o.on_behalf_of &&
        order == o.order &&
        outcome == o.outcome &&
        paid == o.paid &&
        payment_intent == o.payment_intent &&
        payment_method == o.payment_method &&
        payment_method_details == o.payment_method_details &&
        receipt_email == o.receipt_email &&
        receipt_number == o.receipt_number &&
        receipt_url == o.receipt_url &&
        refunded == o.refunded &&
        refunds == o.refunds &&
        review == o.review &&
        shipping == o.shipping &&
        source_transfer == o.source_transfer &&
        statement_descriptor == o.statement_descriptor &&
        statement_descriptor_suffix == o.statement_descriptor_suffix &&
        status == o.status &&
        transfer == o.transfer &&
        transfer_data == o.transfer_data &&
        transfer_group == o.transfer_group
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, amount_captured, amount_refunded, application, application_fee, application_fee_amount, balance_transaction, billing_details, calculated_statement_descriptor, captured, created, currency, customer, description, disputed, failure_code, failure_message, fraud_details, id, invoice, livemode, metadata, object, on_behalf_of, order, outcome, paid, payment_intent, payment_method, payment_method_details, receipt_email, receipt_number, receipt_url, refunded, refunds, review, shipping, source_transfer, statement_descriptor, statement_descriptor_suffix, status, transfer, transfer_data, transfer_group].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
