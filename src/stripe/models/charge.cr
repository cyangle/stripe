#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./billing_details"
require "./charge_application"
require "./charge_application_fee"
require "./charge_balance_transaction"
require "./charge_customer"
require "./charge_failure_balance_transaction"
require "./charge_fraud_details"
require "./charge_invoice"
require "./charge_on_behalf_of"
require "./charge_outcome"
require "./charge_payment_intent"
require "./charge_review"
require "./charge_source_transfer"
require "./charge_transfer"
require "./charge_transfer_data"
require "./level3"
require "./payment_method_details"
require "./payment_source"
require "./radar_radar_options"
require "./refund_list"
require "./shipping"

module Stripe
  # The `Charge` object represents a single attempt to move money into your Stripe account. PaymentIntent confirmation is the most common way to create Charges, but transferring money to a different Stripe account through Connect also creates Charges. Some legacy payment flows create Charges directly, which is not recommended for new integrations.
  class Charge
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).
    @[JSON::Field(key: "amount_captured", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_captured : Int64? = nil

    # Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    @[JSON::Field(key: "amount_refunded", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_refunded : Int64? = nil

    @[JSON::Field(key: "application", type: Stripe::ChargeApplication?, default: nil, required: true, nullable: true, emit_null: true)]
    getter application : Stripe::ChargeApplication? = nil

    @[JSON::Field(key: "application_fee", type: Stripe::ChargeApplicationFee?, default: nil, required: true, nullable: true, emit_null: true)]
    getter application_fee : Stripe::ChargeApplicationFee? = nil

    # The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter application_fee_amount : Int64? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::ChargeBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    getter balance_transaction : Stripe::ChargeBalanceTransaction? = nil

    @[JSON::Field(key: "billing_details", type: Stripe::BillingDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter billing_details : Stripe::BillingDetails? = nil

    # The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments.
    @[JSON::Field(key: "calculated_statement_descriptor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter calculated_statement_descriptor : String? = nil
    MAX_LENGTH_FOR_CALCULATED_STATEMENT_DESCRIPTOR = 5000

    # If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    @[JSON::Field(key: "captured", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter captured : Bool? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    @[JSON::Field(key: "customer", type: Stripe::ChargeCustomer?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer : Stripe::ChargeCustomer? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 40000

    # Whether the charge has been disputed.
    @[JSON::Field(key: "disputed", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter disputed : Bool? = nil

    @[JSON::Field(key: "failure_balance_transaction", type: Stripe::ChargeFailureBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    getter failure_balance_transaction : Stripe::ChargeFailureBalanceTransaction? = nil

    # Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes).
    @[JSON::Field(key: "failure_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter failure_code : String? = nil
    MAX_LENGTH_FOR_FAILURE_CODE = 5000

    # Message to user further explaining reason for charge failure if available.
    @[JSON::Field(key: "failure_message", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter failure_message : String? = nil
    MAX_LENGTH_FOR_FAILURE_MESSAGE = 5000

    @[JSON::Field(key: "fraud_details", type: Stripe::ChargeFraudDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter fraud_details : Stripe::ChargeFraudDetails? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "invoice", type: Stripe::ChargeInvoice?, default: nil, required: true, nullable: true, emit_null: true)]
    getter invoice : Stripe::ChargeInvoice? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [charge]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("charge")

    @[JSON::Field(key: "on_behalf_of", type: Stripe::ChargeOnBehalfOf?, default: nil, required: true, nullable: true, emit_null: true)]
    getter on_behalf_of : Stripe::ChargeOnBehalfOf? = nil

    @[JSON::Field(key: "outcome", type: Stripe::ChargeOutcome?, default: nil, required: true, nullable: true, emit_null: true)]
    getter outcome : Stripe::ChargeOutcome? = nil

    # `true` if the charge succeeded, or was successfully authorized for later capture.
    @[JSON::Field(key: "paid", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter paid : Bool? = nil

    @[JSON::Field(key: "payment_intent", type: Stripe::ChargePaymentIntent?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_intent : Stripe::ChargePaymentIntent? = nil

    # ID of the payment method used in this charge.
    @[JSON::Field(key: "payment_method", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method : String? = nil
    MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    @[JSON::Field(key: "payment_method_details", type: Stripe::PaymentMethodDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method_details : Stripe::PaymentMethodDetails? = nil

    # This is the email address that the receipt for this charge was sent to.
    @[JSON::Field(key: "receipt_email", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter receipt_email : String? = nil
    MAX_LENGTH_FOR_RECEIPT_EMAIL = 5000

    # This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
    @[JSON::Field(key: "receipt_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter receipt_number : String? = nil
    MAX_LENGTH_FOR_RECEIPT_NUMBER = 5000

    # This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    @[JSON::Field(key: "receipt_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter receipt_url : String? = nil
    MAX_LENGTH_FOR_RECEIPT_URL = 5000

    # Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    @[JSON::Field(key: "refunded", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter refunded : Bool? = nil

    @[JSON::Field(key: "review", type: Stripe::ChargeReview?, default: nil, required: true, nullable: true, emit_null: true)]
    getter review : Stripe::ChargeReview? = nil

    @[JSON::Field(key: "shipping", type: Stripe::Shipping?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping : Stripe::Shipping? = nil

    @[JSON::Field(key: "source", type: Stripe::PaymentSource?, default: nil, required: true, nullable: true, emit_null: true)]
    getter source : Stripe::PaymentSource? = nil

    @[JSON::Field(key: "source_transfer", type: Stripe::ChargeSourceTransfer?, default: nil, required: true, nullable: true, emit_null: true)]
    getter source_transfer : Stripe::ChargeSourceTransfer? = nil

    # For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    # Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
    @[JSON::Field(key: "statement_descriptor_suffix", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter statement_descriptor_suffix : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX = 5000

    # The status of the payment is either `succeeded`, `pending`, or `failed`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [failed, pending, succeeded]."
    VALID_VALUES_FOR_STATUS  = String.static_array("failed", "pending", "succeeded")

    @[JSON::Field(key: "transfer_data", type: Stripe::ChargeTransferData?, default: nil, required: true, nullable: true, emit_null: true)]
    getter transfer_data : Stripe::ChargeTransferData? = nil

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
    @[JSON::Field(key: "transfer_group", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter transfer_group : String? = nil
    MAX_LENGTH_FOR_TRANSFER_GROUP = 5000

    # End of Required Properties

    # Optional Properties

    # Authorization code on the charge.
    @[JSON::Field(key: "authorization_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter authorization_code : String? = nil
    MAX_LENGTH_FOR_AUTHORIZATION_CODE = 5000

    @[JSON::Field(key: "level3", type: Stripe::Level3?, default: nil, required: false, nullable: false, emit_null: false)]
    getter level3 : Stripe::Level3? = nil

    @[JSON::Field(key: "radar_options", type: Stripe::RadarRadarOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter radar_options : Stripe::RadarRadarOptions? = nil

    @[JSON::Field(key: "refunds", type: Stripe::RefundList?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refunds.nil? && !refunds_present?)]
    getter refunds : Stripe::RefundList? = nil

    @[JSON::Field(ignore: true)]
    property? refunds_present : Bool = false

    @[JSON::Field(key: "transfer", type: Stripe::ChargeTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfer : Stripe::ChargeTransfer? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_captured : Int64? = nil,
      @amount_refunded : Int64? = nil,
      @application : Stripe::ChargeApplication? = nil,
      @application_fee : Stripe::ChargeApplicationFee? = nil,
      @application_fee_amount : Int64? = nil,
      @balance_transaction : Stripe::ChargeBalanceTransaction? = nil,
      @billing_details : Stripe::BillingDetails? = nil,
      @calculated_statement_descriptor : String? = nil,
      @captured : Bool? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @customer : Stripe::ChargeCustomer? = nil,
      @description : String? = nil,
      @disputed : Bool? = nil,
      @failure_balance_transaction : Stripe::ChargeFailureBalanceTransaction? = nil,
      @failure_code : String? = nil,
      @failure_message : String? = nil,
      @fraud_details : Stripe::ChargeFraudDetails? = nil,
      @id : String? = nil,
      @invoice : Stripe::ChargeInvoice? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @on_behalf_of : Stripe::ChargeOnBehalfOf? = nil,
      @outcome : Stripe::ChargeOutcome? = nil,
      @paid : Bool? = nil,
      @payment_intent : Stripe::ChargePaymentIntent? = nil,
      @payment_method : String? = nil,
      @payment_method_details : Stripe::PaymentMethodDetails? = nil,
      @receipt_email : String? = nil,
      @receipt_number : String? = nil,
      @receipt_url : String? = nil,
      @refunded : Bool? = nil,
      @review : Stripe::ChargeReview? = nil,
      @shipping : Stripe::Shipping? = nil,
      @source : Stripe::PaymentSource? = nil,
      @source_transfer : Stripe::ChargeSourceTransfer? = nil,
      @statement_descriptor : String? = nil,
      @statement_descriptor_suffix : String? = nil,
      @status : String? = nil,
      @transfer_data : Stripe::ChargeTransferData? = nil,
      @transfer_group : String? = nil,
      # Optional properties
      @authorization_code : String? = nil,
      @level3 : Stripe::Level3? = nil,
      @radar_options : Stripe::RadarRadarOptions? = nil,
      @refunds : Stripe::RefundList? = nil,
      @transfer : Stripe::ChargeTransfer? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"amount_captured\" is required and cannot be null") if @amount_captured.nil?

      invalid_properties.push("\"amount_refunded\" is required and cannot be null") if @amount_refunded.nil?

      unless (_application = @application).nil?
        invalid_properties.concat(_application.list_invalid_properties_for("application")) if _application.is_a?(OpenApi::Validatable)
      end
      unless (_application_fee = @application_fee).nil?
        invalid_properties.concat(_application_fee.list_invalid_properties_for("application_fee")) if _application_fee.is_a?(OpenApi::Validatable)
      end

      unless (_balance_transaction = @balance_transaction).nil?
        invalid_properties.concat(_balance_transaction.list_invalid_properties_for("balance_transaction")) if _balance_transaction.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"billing_details\" is required and cannot be null") if @billing_details.nil?

      unless (_billing_details = @billing_details).nil?
        invalid_properties.concat(_billing_details.list_invalid_properties_for("billing_details")) if _billing_details.is_a?(OpenApi::Validatable)
      end
      unless (_calculated_statement_descriptor = @calculated_statement_descriptor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("calculated_statement_descriptor", _calculated_statement_descriptor.to_s.size, MAX_LENGTH_FOR_CALCULATED_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"captured\" is required and cannot be null") if @captured.nil?

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_customer = @customer).nil?
        invalid_properties.concat(_customer.list_invalid_properties_for("customer")) if _customer.is_a?(OpenApi::Validatable)
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"disputed\" is required and cannot be null") if @disputed.nil?

      unless (_failure_balance_transaction = @failure_balance_transaction).nil?
        invalid_properties.concat(_failure_balance_transaction.list_invalid_properties_for("failure_balance_transaction")) if _failure_balance_transaction.is_a?(OpenApi::Validatable)
      end
      unless (_failure_code = @failure_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_code", _failure_code.to_s.size, MAX_LENGTH_FOR_FAILURE_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_failure_message = @failure_message).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_message", _failure_message.to_s.size, MAX_LENGTH_FOR_FAILURE_MESSAGE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_fraud_details = @fraud_details).nil?
        invalid_properties.concat(_fraud_details.list_invalid_properties_for("fraud_details")) if _fraud_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_invoice = @invoice).nil?
        invalid_properties.concat(_invoice.list_invalid_properties_for("invoice")) if _invoice.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_on_behalf_of = @on_behalf_of).nil?
        invalid_properties.concat(_on_behalf_of.list_invalid_properties_for("on_behalf_of")) if _on_behalf_of.is_a?(OpenApi::Validatable)
      end
      unless (_outcome = @outcome).nil?
        invalid_properties.concat(_outcome.list_invalid_properties_for("outcome")) if _outcome.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"paid\" is required and cannot be null") if @paid.nil?

      unless (_payment_intent = @payment_intent).nil?
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method = @payment_method).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_method", _payment_method.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_payment_method_details = @payment_method_details).nil?
        invalid_properties.concat(_payment_method_details.list_invalid_properties_for("payment_method_details")) if _payment_method_details.is_a?(OpenApi::Validatable)
      end
      unless (_receipt_email = @receipt_email).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_email", _receipt_email.to_s.size, MAX_LENGTH_FOR_RECEIPT_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_receipt_number = @receipt_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_number", _receipt_number.to_s.size, MAX_LENGTH_FOR_RECEIPT_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_receipt_url = @receipt_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_url", _receipt_url.to_s.size, MAX_LENGTH_FOR_RECEIPT_URL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"refunded\" is required and cannot be null") if @refunded.nil?

      unless (_review = @review).nil?
        invalid_properties.concat(_review.list_invalid_properties_for("review")) if _review.is_a?(OpenApi::Validatable)
      end
      unless (_shipping = @shipping).nil?
        invalid_properties.concat(_shipping.list_invalid_properties_for("shipping")) if _shipping.is_a?(OpenApi::Validatable)
      end
      unless (_source = @source).nil?
        invalid_properties.concat(_source.list_invalid_properties_for("source")) if _source.is_a?(OpenApi::Validatable)
      end
      unless (_source_transfer = @source_transfer).nil?
        invalid_properties.concat(_source_transfer.list_invalid_properties_for("source_transfer")) if _source_transfer.is_a?(OpenApi::Validatable)
      end
      unless (_statement_descriptor = @statement_descriptor).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_statement_descriptor_suffix = @statement_descriptor_suffix).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_suffix", _statement_descriptor_suffix.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      unless (_transfer_data = @transfer_data).nil?
        invalid_properties.concat(_transfer_data.list_invalid_properties_for("transfer_data")) if _transfer_data.is_a?(OpenApi::Validatable)
      end
      unless (_transfer_group = @transfer_group).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transfer_group", _transfer_group.to_s.size, MAX_LENGTH_FOR_TRANSFER_GROUP)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_authorization_code = @authorization_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("authorization_code", _authorization_code.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_level3 = @level3).nil?
        invalid_properties.concat(_level3.list_invalid_properties_for("level3")) if _level3.is_a?(OpenApi::Validatable)
      end
      unless (_radar_options = @radar_options).nil?
        invalid_properties.concat(_radar_options.list_invalid_properties_for("radar_options")) if _radar_options.is_a?(OpenApi::Validatable)
      end
      unless (_refunds = @refunds).nil?
        invalid_properties.concat(_refunds.list_invalid_properties_for("refunds")) if _refunds.is_a?(OpenApi::Validatable)
      end
      unless (_transfer = @transfer).nil?
        invalid_properties.concat(_transfer.list_invalid_properties_for("transfer")) if _transfer.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @amount_captured.nil?

      return false if @amount_refunded.nil?

      unless (_application = @application).nil?
        return false if _application.is_a?(OpenApi::Validatable) && !_application.valid?
      end

      unless (_application_fee = @application_fee).nil?
        return false if _application_fee.is_a?(OpenApi::Validatable) && !_application_fee.valid?
      end

      unless (_balance_transaction = @balance_transaction).nil?
        return false if _balance_transaction.is_a?(OpenApi::Validatable) && !_balance_transaction.valid?
      end

      return false if @billing_details.nil?
      unless (_billing_details = @billing_details).nil?
        return false if _billing_details.is_a?(OpenApi::Validatable) && !_billing_details.valid?
      end

      unless (_calculated_statement_descriptor = @calculated_statement_descriptor).nil?
        return false if _calculated_statement_descriptor.to_s.size > MAX_LENGTH_FOR_CALCULATED_STATEMENT_DESCRIPTOR
      end

      return false if @captured.nil?

      return false if @created.nil?

      return false if @currency.nil?

      unless (_customer = @customer).nil?
        return false if _customer.is_a?(OpenApi::Validatable) && !_customer.valid?
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      return false if @disputed.nil?

      unless (_failure_balance_transaction = @failure_balance_transaction).nil?
        return false if _failure_balance_transaction.is_a?(OpenApi::Validatable) && !_failure_balance_transaction.valid?
      end

      unless (_failure_code = @failure_code).nil?
        return false if _failure_code.to_s.size > MAX_LENGTH_FOR_FAILURE_CODE
      end

      unless (_failure_message = @failure_message).nil?
        return false if _failure_message.to_s.size > MAX_LENGTH_FOR_FAILURE_MESSAGE
      end

      unless (_fraud_details = @fraud_details).nil?
        return false if _fraud_details.is_a?(OpenApi::Validatable) && !_fraud_details.valid?
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      unless (_invoice = @invoice).nil?
        return false if _invoice.is_a?(OpenApi::Validatable) && !_invoice.valid?
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_on_behalf_of = @on_behalf_of).nil?
        return false if _on_behalf_of.is_a?(OpenApi::Validatable) && !_on_behalf_of.valid?
      end

      unless (_outcome = @outcome).nil?
        return false if _outcome.is_a?(OpenApi::Validatable) && !_outcome.valid?
      end

      return false if @paid.nil?

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      unless (_payment_method = @payment_method).nil?
        return false if _payment_method.to_s.size > MAX_LENGTH_FOR_PAYMENT_METHOD
      end

      unless (_payment_method_details = @payment_method_details).nil?
        return false if _payment_method_details.is_a?(OpenApi::Validatable) && !_payment_method_details.valid?
      end

      unless (_receipt_email = @receipt_email).nil?
        return false if _receipt_email.to_s.size > MAX_LENGTH_FOR_RECEIPT_EMAIL
      end

      unless (_receipt_number = @receipt_number).nil?
        return false if _receipt_number.to_s.size > MAX_LENGTH_FOR_RECEIPT_NUMBER
      end

      unless (_receipt_url = @receipt_url).nil?
        return false if _receipt_url.to_s.size > MAX_LENGTH_FOR_RECEIPT_URL
      end

      return false if @refunded.nil?

      unless (_review = @review).nil?
        return false if _review.is_a?(OpenApi::Validatable) && !_review.valid?
      end

      unless (_shipping = @shipping).nil?
        return false if _shipping.is_a?(OpenApi::Validatable) && !_shipping.valid?
      end

      unless (_source = @source).nil?
        return false if _source.is_a?(OpenApi::Validatable) && !_source.valid?
      end

      unless (_source_transfer = @source_transfer).nil?
        return false if _source_transfer.is_a?(OpenApi::Validatable) && !_source_transfer.valid?
      end

      unless (_statement_descriptor = @statement_descriptor).nil?
        return false if _statement_descriptor.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR
      end

      unless (_statement_descriptor_suffix = @statement_descriptor_suffix).nil?
        return false if _statement_descriptor_suffix.to_s.size > MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      unless (_transfer_data = @transfer_data).nil?
        return false if _transfer_data.is_a?(OpenApi::Validatable) && !_transfer_data.valid?
      end

      unless (_transfer_group = @transfer_group).nil?
        return false if _transfer_group.to_s.size > MAX_LENGTH_FOR_TRANSFER_GROUP
      end

      unless (_authorization_code = @authorization_code).nil?
        return false if _authorization_code.to_s.size > MAX_LENGTH_FOR_AUTHORIZATION_CODE
      end

      unless (_level3 = @level3).nil?
        return false if _level3.is_a?(OpenApi::Validatable) && !_level3.valid?
      end

      unless (_radar_options = @radar_options).nil?
        return false if _radar_options.is_a?(OpenApi::Validatable) && !_radar_options.valid?
      end

      unless (_refunds = @refunds).nil?
        return false if _refunds.is_a?(OpenApi::Validatable) && !_refunds.valid?
      end

      unless (_transfer = @transfer).nil?
        return false if _transfer.is_a?(OpenApi::Validatable) && !_transfer.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_captured Object to be assigned
    def amount_captured=(new_value : Int64?)
      raise ArgumentError.new("\"amount_captured\" is required and cannot be null") if new_value.nil?

      @amount_captured = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_refunded Object to be assigned
    def amount_refunded=(new_value : Int64?)
      raise ArgumentError.new("\"amount_refunded\" is required and cannot be null") if new_value.nil?

      @amount_refunded = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(new_value : Stripe::ChargeApplication?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @application = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee Object to be assigned
    def application_fee=(new_value : Stripe::ChargeApplicationFee?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @application_fee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_amount Object to be assigned
    def application_fee_amount=(new_value : Int64?)
      @application_fee_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_transaction Object to be assigned
    def balance_transaction=(new_value : Stripe::ChargeBalanceTransaction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @balance_transaction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_details Object to be assigned
    def billing_details=(new_value : Stripe::BillingDetails?)
      raise ArgumentError.new("\"billing_details\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @billing_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] calculated_statement_descriptor Object to be assigned
    def calculated_statement_descriptor=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("calculated_statement_descriptor", new_value.to_s.size, MAX_LENGTH_FOR_CALCULATED_STATEMENT_DESCRIPTOR)
      end

      @calculated_statement_descriptor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] captured Object to be assigned
    def captured=(new_value : Bool?)
      raise ArgumentError.new("\"captured\" is required and cannot be null") if new_value.nil?

      @captured = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : Stripe::ChargeCustomer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] disputed Object to be assigned
    def disputed=(new_value : Bool?)
      raise ArgumentError.new("\"disputed\" is required and cannot be null") if new_value.nil?

      @disputed = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_balance_transaction Object to be assigned
    def failure_balance_transaction=(new_value : Stripe::ChargeFailureBalanceTransaction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @failure_balance_transaction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_code Object to be assigned
    def failure_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("failure_code", new_value.to_s.size, MAX_LENGTH_FOR_FAILURE_CODE)
      end

      @failure_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_message Object to be assigned
    def failure_message=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("failure_message", new_value.to_s.size, MAX_LENGTH_FOR_FAILURE_MESSAGE)
      end

      @failure_message = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fraud_details Object to be assigned
    def fraud_details=(new_value : Stripe::ChargeFraudDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fraud_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice Object to be assigned
    def invoice=(new_value : Stripe::ChargeInvoice?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"metadata\" is required and cannot be null") if new_value.nil?

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(new_value : Stripe::ChargeOnBehalfOf?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @on_behalf_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outcome Object to be assigned
    def outcome=(new_value : Stripe::ChargeOutcome?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @outcome = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paid Object to be assigned
    def paid=(new_value : Bool?)
      raise ArgumentError.new("\"paid\" is required and cannot be null") if new_value.nil?

      @paid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(new_value : Stripe::ChargePaymentIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("payment_method", new_value.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD)
      end

      @payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_details Object to be assigned
    def payment_method_details=(new_value : Stripe::PaymentMethodDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_email Object to be assigned
    def receipt_email=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("receipt_email", new_value.to_s.size, MAX_LENGTH_FOR_RECEIPT_EMAIL)
      end

      @receipt_email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_number Object to be assigned
    def receipt_number=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("receipt_number", new_value.to_s.size, MAX_LENGTH_FOR_RECEIPT_NUMBER)
      end

      @receipt_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_url Object to be assigned
    def receipt_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("receipt_url", new_value.to_s.size, MAX_LENGTH_FOR_RECEIPT_URL)
      end

      @receipt_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refunded Object to be assigned
    def refunded=(new_value : Bool?)
      raise ArgumentError.new("\"refunded\" is required and cannot be null") if new_value.nil?

      @refunded = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] review Object to be assigned
    def review=(new_value : Stripe::ChargeReview?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @review = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping Object to be assigned
    def shipping=(new_value : Stripe::Shipping?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(new_value : Stripe::PaymentSource?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_transfer Object to be assigned
    def source_transfer=(new_value : Stripe::ChargeSourceTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @source_transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
      end

      @statement_descriptor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix Object to be assigned
    def statement_descriptor_suffix=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor_suffix", new_value.to_s.size, MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR_SUFFIX)
      end

      @statement_descriptor_suffix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(new_value : Stripe::ChargeTransferData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfer_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_group Object to be assigned
    def transfer_group=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("transfer_group", new_value.to_s.size, MAX_LENGTH_FOR_TRANSFER_GROUP)
      end

      @transfer_group = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorization_code Object to be assigned
    def authorization_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("authorization_code", new_value.to_s.size, MAX_LENGTH_FOR_AUTHORIZATION_CODE)
      end

      @authorization_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level3 Object to be assigned
    def level3=(new_value : Stripe::Level3?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @level3 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] radar_options Object to be assigned
    def radar_options=(new_value : Stripe::RadarRadarOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @radar_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refunds Object to be assigned
    def refunds=(new_value : Stripe::RefundList?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @refunds = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer Object to be assigned
    def transfer=(new_value : Stripe::ChargeTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfer = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_captured, @amount_refunded, @application, @application_fee, @application_fee_amount, @balance_transaction, @billing_details, @calculated_statement_descriptor, @captured, @created, @currency, @customer, @description, @disputed, @failure_balance_transaction, @failure_code, @failure_message, @fraud_details, @id, @invoice, @livemode, @metadata, @object, @on_behalf_of, @outcome, @paid, @payment_intent, @payment_method, @payment_method_details, @receipt_email, @receipt_number, @receipt_url, @refunded, @review, @shipping, @source, @source_transfer, @statement_descriptor, @statement_descriptor_suffix, @status, @transfer_data, @transfer_group, @authorization_code, @level3, @radar_options, @refunds, @refunds_present, @transfer)
  end
end
