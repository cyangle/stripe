#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # To charge a credit or a debit card, you create a `Charge` object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.  Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
  class Charge
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
    @[JSON::Field(key: "amount_captured", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_captured : Int64? = nil

    # Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    @[JSON::Field(key: "amount_refunded", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_refunded : Int64? = nil

    @[JSON::Field(key: "billing_details", type: Stripe::BillingDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter billing_details : Stripe::BillingDetails? = nil

    # If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    @[JSON::Field(key: "captured", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter captured : Bool? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Whether the charge has been disputed.
    @[JSON::Field(key: "disputed", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter disputed : Bool? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    VALID_VALUES_FOR_OBJECT = StaticArray["charge"]

    # `true` if the charge succeeded, or was successfully authorized for later capture.
    @[JSON::Field(key: "paid", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter paid : Bool? = nil

    # Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    @[JSON::Field(key: "refunded", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter refunded : Bool? = nil

    # The status of the payment is either `succeeded`, `pending`, or `failed`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    VALID_VALUES_FOR_STATUS = StaticArray["failed", "pending", "succeeded"]

    # Optional properties

    @[JSON::Field(key: "application", type: Stripe::ChargeApplication?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application.nil? && !application_present?)]
    getter application : Stripe::ChargeApplication? = nil

    @[JSON::Field(ignore: true)]
    property? application_present : Bool = false

    @[JSON::Field(key: "application_fee", type: Stripe::ChargeApplicationFee?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application_fee.nil? && !application_fee_present?)]
    getter application_fee : Stripe::ChargeApplicationFee? = nil

    @[JSON::Field(ignore: true)]
    property? application_fee_present : Bool = false

    # The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application_fee_amount.nil? && !application_fee_amount_present?)]
    getter application_fee_amount : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? application_fee_amount_present : Bool = false

    @[JSON::Field(key: "balance_transaction", type: Stripe::ChargeBalanceTransaction?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: balance_transaction.nil? && !balance_transaction_present?)]
    getter balance_transaction : Stripe::ChargeBalanceTransaction? = nil

    @[JSON::Field(ignore: true)]
    property? balance_transaction_present : Bool = false

    # The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
    @[JSON::Field(key: "calculated_statement_descriptor", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: calculated_statement_descriptor.nil? && !calculated_statement_descriptor_present?)]
    getter calculated_statement_descriptor : String? = nil

    @[JSON::Field(ignore: true)]
    property? calculated_statement_descriptor_present : Bool = false

    @[JSON::Field(key: "customer", type: Stripe::ChargeCustomer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : Stripe::ChargeCustomer? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "failure_balance_transaction", type: Stripe::ChargeFailureBalanceTransaction?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_balance_transaction.nil? && !failure_balance_transaction_present?)]
    getter failure_balance_transaction : Stripe::ChargeFailureBalanceTransaction? = nil

    @[JSON::Field(ignore: true)]
    property? failure_balance_transaction_present : Bool = false

    # Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
    @[JSON::Field(key: "failure_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_code.nil? && !failure_code_present?)]
    getter failure_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? failure_code_present : Bool = false

    # Message to user further explaining reason for charge failure if available.
    @[JSON::Field(key: "failure_message", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_message.nil? && !failure_message_present?)]
    getter failure_message : String? = nil

    @[JSON::Field(ignore: true)]
    property? failure_message_present : Bool = false

    @[JSON::Field(key: "fraud_details", type: Stripe::ChargeFraudDetails1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: fraud_details.nil? && !fraud_details_present?)]
    getter fraud_details : Stripe::ChargeFraudDetails1? = nil

    @[JSON::Field(ignore: true)]
    property? fraud_details_present : Bool = false

    @[JSON::Field(key: "invoice", type: Stripe::ChargeInvoice?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: invoice.nil? && !invoice_present?)]
    getter invoice : Stripe::ChargeInvoice? = nil

    @[JSON::Field(ignore: true)]
    property? invoice_present : Bool = false

    @[JSON::Field(key: "on_behalf_of", type: Stripe::ChargeOnBehalfOf?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    getter on_behalf_of : Stripe::ChargeOnBehalfOf? = nil

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "outcome", type: Stripe::ChargeOutcome1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: outcome.nil? && !outcome_present?)]
    getter outcome : Stripe::ChargeOutcome1? = nil

    @[JSON::Field(ignore: true)]
    property? outcome_present : Bool = false

    @[JSON::Field(key: "payment_intent", type: Stripe::ChargePaymentIntent?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_intent.nil? && !payment_intent_present?)]
    getter payment_intent : Stripe::ChargePaymentIntent? = nil

    @[JSON::Field(ignore: true)]
    property? payment_intent_present : Bool = false

    # ID of the payment method used in this charge.
    @[JSON::Field(key: "payment_method", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method.nil? && !payment_method_present?)]
    getter payment_method : String? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_present : Bool = false

    @[JSON::Field(key: "payment_method_details", type: Stripe::ChargePaymentMethodDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method_details.nil? && !payment_method_details_present?)]
    getter payment_method_details : Stripe::ChargePaymentMethodDetails? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_details_present : Bool = false

    @[JSON::Field(key: "radar_options", type: Stripe::RadarRadarOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter radar_options : Stripe::RadarRadarOptions? = nil

    # This is the email address that the receipt for this charge was sent to.
    @[JSON::Field(key: "receipt_email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: receipt_email.nil? && !receipt_email_present?)]
    getter receipt_email : String? = nil

    @[JSON::Field(ignore: true)]
    property? receipt_email_present : Bool = false

    # This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
    @[JSON::Field(key: "receipt_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: receipt_number.nil? && !receipt_number_present?)]
    getter receipt_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? receipt_number_present : Bool = false

    # This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    @[JSON::Field(key: "receipt_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: receipt_url.nil? && !receipt_url_present?)]
    getter receipt_url : String? = nil

    @[JSON::Field(ignore: true)]
    property? receipt_url_present : Bool = false

    @[JSON::Field(key: "refunds", type: Stripe::RefundList1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter refunds : Stripe::RefundList1? = nil

    @[JSON::Field(key: "review", type: Stripe::ChargeReview?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: review.nil? && !review_present?)]
    getter review : Stripe::ChargeReview? = nil

    @[JSON::Field(ignore: true)]
    property? review_present : Bool = false

    @[JSON::Field(key: "shipping", type: Stripe::ChargeShipping?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping.nil? && !shipping_present?)]
    getter shipping : Stripe::ChargeShipping? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_present : Bool = false

    @[JSON::Field(key: "source_transfer", type: Stripe::ChargeSourceTransfer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: source_transfer.nil? && !source_transfer_present?)]
    getter source_transfer : Stripe::ChargeSourceTransfer? = nil

    @[JSON::Field(ignore: true)]
    property? source_transfer_present : Bool = false

    # For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customersâ statements. Must contain at least one letter, maximum 22 characters.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String? = nil

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâs set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    @[JSON::Field(key: "statement_descriptor_suffix", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statement_descriptor_suffix.nil? && !statement_descriptor_suffix_present?)]
    getter statement_descriptor_suffix : String? = nil

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_suffix_present : Bool = false

    @[JSON::Field(key: "transfer", type: Stripe::ChargeTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfer : Stripe::ChargeTransfer? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::ChargeTransferData1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    getter transfer_data : Stripe::ChargeTransferData1? = nil

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    @[JSON::Field(key: "transfer_group", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transfer_group.nil? && !transfer_group_present?)]
    getter transfer_group : String? = nil

    @[JSON::Field(ignore: true)]
    property? transfer_group_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @amount_captured : Int64? = nil,
      @amount_refunded : Int64? = nil,
      @billing_details : Stripe::BillingDetails? = nil,
      @captured : Bool? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @disputed : Bool? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @paid : Bool? = nil,
      @refunded : Bool? = nil,
      @status : String? = nil,
      # Optional properties
      @application : Stripe::ChargeApplication? = nil,
      @application_fee : Stripe::ChargeApplicationFee? = nil,
      @application_fee_amount : Int64? = nil,
      @balance_transaction : Stripe::ChargeBalanceTransaction? = nil,
      @calculated_statement_descriptor : String? = nil,
      @customer : Stripe::ChargeCustomer? = nil,
      @description : String? = nil,
      @failure_balance_transaction : Stripe::ChargeFailureBalanceTransaction? = nil,
      @failure_code : String? = nil,
      @failure_message : String? = nil,
      @fraud_details : Stripe::ChargeFraudDetails1? = nil,
      @invoice : Stripe::ChargeInvoice? = nil,
      @on_behalf_of : Stripe::ChargeOnBehalfOf? = nil,
      @outcome : Stripe::ChargeOutcome1? = nil,
      @payment_intent : Stripe::ChargePaymentIntent? = nil,
      @payment_method : String? = nil,
      @payment_method_details : Stripe::ChargePaymentMethodDetails? = nil,
      @radar_options : Stripe::RadarRadarOptions? = nil,
      @receipt_email : String? = nil,
      @receipt_number : String? = nil,
      @receipt_url : String? = nil,
      @refunds : Stripe::RefundList1? = nil,
      @review : Stripe::ChargeReview? = nil,
      @shipping : Stripe::ChargeShipping? = nil,
      @source_transfer : Stripe::ChargeSourceTransfer? = nil,
      @statement_descriptor : String? = nil,
      @statement_descriptor_suffix : String? = nil,
      @transfer : Stripe::ChargeTransfer? = nil,
      @transfer_data : Stripe::ChargeTransferData1? = nil,
      @transfer_group : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"amount_captured\" is required and cannot be null") if @amount_captured.nil?

      invalid_properties.push("\"amount_refunded\" is required and cannot be null") if @amount_refunded.nil?

      invalid_properties.push("\"billing_details\" is required and cannot be null") if @billing_details.nil?

      if _billing_details = @billing_details
        invalid_properties.concat(_billing_details.list_invalid_properties_for("billing_details")) if _billing_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"captured\" is required and cannot be null") if @captured.nil?

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"disputed\" is required and cannot be null") if @disputed.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      if _id = @id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      if _object = @object
        invalid_properties.push(OpenApi::EnumValidator.error_message("object", VALID_VALUES_FOR_OBJECT)) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"paid\" is required and cannot be null") if @paid.nil?

      invalid_properties.push("\"refunded\" is required and cannot be null") if @refunded.nil?

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      if _status = @status
        invalid_properties.push(OpenApi::EnumValidator.error_message("status", VALID_VALUES_FOR_STATUS)) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      if _application = @application
        invalid_properties.concat(_application.list_invalid_properties_for("application")) if _application.is_a?(OpenApi::Validatable)
      end
      if _application_fee = @application_fee
        invalid_properties.concat(_application_fee.list_invalid_properties_for("application_fee")) if _application_fee.is_a?(OpenApi::Validatable)
      end

      if _balance_transaction = @balance_transaction
        invalid_properties.concat(_balance_transaction.list_invalid_properties_for("balance_transaction")) if _balance_transaction.is_a?(OpenApi::Validatable)
      end
      if _calculated_statement_descriptor = @calculated_statement_descriptor
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("calculated_statement_descriptor", _calculated_statement_descriptor.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _customer = @customer
        invalid_properties.concat(_customer.list_invalid_properties_for("customer")) if _customer.is_a?(OpenApi::Validatable)
      end
      if _description = @description
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, 40000)
          invalid_properties.push(max_length_error)
        end
      end
      if _failure_balance_transaction = @failure_balance_transaction
        invalid_properties.concat(_failure_balance_transaction.list_invalid_properties_for("failure_balance_transaction")) if _failure_balance_transaction.is_a?(OpenApi::Validatable)
      end
      if _failure_code = @failure_code
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_code", _failure_code.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _failure_message = @failure_message
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_message", _failure_message.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _fraud_details = @fraud_details
        invalid_properties.concat(_fraud_details.list_invalid_properties_for("fraud_details")) if _fraud_details.is_a?(OpenApi::Validatable)
      end
      if _invoice = @invoice
        invalid_properties.concat(_invoice.list_invalid_properties_for("invoice")) if _invoice.is_a?(OpenApi::Validatable)
      end
      if _on_behalf_of = @on_behalf_of
        invalid_properties.concat(_on_behalf_of.list_invalid_properties_for("on_behalf_of")) if _on_behalf_of.is_a?(OpenApi::Validatable)
      end
      if _outcome = @outcome
        invalid_properties.concat(_outcome.list_invalid_properties_for("outcome")) if _outcome.is_a?(OpenApi::Validatable)
      end
      if _payment_intent = @payment_intent
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      if _payment_method = @payment_method
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_method", _payment_method.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _payment_method_details = @payment_method_details
        invalid_properties.concat(_payment_method_details.list_invalid_properties_for("payment_method_details")) if _payment_method_details.is_a?(OpenApi::Validatable)
      end
      if _radar_options = @radar_options
        invalid_properties.concat(_radar_options.list_invalid_properties_for("radar_options")) if _radar_options.is_a?(OpenApi::Validatable)
      end
      if _receipt_email = @receipt_email
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_email", _receipt_email.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _receipt_number = @receipt_number
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_number", _receipt_number.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _receipt_url = @receipt_url
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_url", _receipt_url.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _refunds = @refunds
        invalid_properties.concat(_refunds.list_invalid_properties_for("refunds")) if _refunds.is_a?(OpenApi::Validatable)
      end
      if _review = @review
        invalid_properties.concat(_review.list_invalid_properties_for("review")) if _review.is_a?(OpenApi::Validatable)
      end
      if _shipping = @shipping
        invalid_properties.concat(_shipping.list_invalid_properties_for("shipping")) if _shipping.is_a?(OpenApi::Validatable)
      end
      if _source_transfer = @source_transfer
        invalid_properties.concat(_source_transfer.list_invalid_properties_for("source_transfer")) if _source_transfer.is_a?(OpenApi::Validatable)
      end
      if _statement_descriptor = @statement_descriptor
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _statement_descriptor_suffix = @statement_descriptor_suffix
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_suffix", _statement_descriptor_suffix.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _transfer = @transfer
        invalid_properties.concat(_transfer.list_invalid_properties_for("transfer")) if _transfer.is_a?(OpenApi::Validatable)
      end
      if _transfer_data = @transfer_data
        invalid_properties.concat(_transfer_data.list_invalid_properties_for("transfer_data")) if _transfer_data.is_a?(OpenApi::Validatable)
      end
      if _transfer_group = @transfer_group
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transfer_group", _transfer_group.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @amount_captured.nil?

      return false if @amount_refunded.nil?

      return false if @billing_details.nil?
      if _billing_details = @billing_details
        return false if _billing_details.is_a?(OpenApi::Validatable) && !_billing_details.valid?
      end

      return false if @captured.nil?

      return false if @created.nil?

      return false if @currency.nil?

      return false if @disputed.nil?

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      if _object = @object
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @paid.nil?

      return false if @refunded.nil?

      return false if @status.nil?
      if _status = @status
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      if _application = @application
        return false if _application.is_a?(OpenApi::Validatable) && !_application.valid?
      end

      if _application_fee = @application_fee
        return false if _application_fee.is_a?(OpenApi::Validatable) && !_application_fee.valid?
      end

      if _balance_transaction = @balance_transaction
        return false if _balance_transaction.is_a?(OpenApi::Validatable) && !_balance_transaction.valid?
      end

      if _calculated_statement_descriptor = @calculated_statement_descriptor
        return false if _calculated_statement_descriptor.to_s.size > 5000
      end

      if _customer = @customer
        return false if _customer.is_a?(OpenApi::Validatable) && !_customer.valid?
      end

      if _description = @description
        return false if _description.to_s.size > 40000
      end

      if _failure_balance_transaction = @failure_balance_transaction
        return false if _failure_balance_transaction.is_a?(OpenApi::Validatable) && !_failure_balance_transaction.valid?
      end

      if _failure_code = @failure_code
        return false if _failure_code.to_s.size > 5000
      end

      if _failure_message = @failure_message
        return false if _failure_message.to_s.size > 5000
      end

      if _fraud_details = @fraud_details
        return false if _fraud_details.is_a?(OpenApi::Validatable) && !_fraud_details.valid?
      end

      if _invoice = @invoice
        return false if _invoice.is_a?(OpenApi::Validatable) && !_invoice.valid?
      end

      if _on_behalf_of = @on_behalf_of
        return false if _on_behalf_of.is_a?(OpenApi::Validatable) && !_on_behalf_of.valid?
      end

      if _outcome = @outcome
        return false if _outcome.is_a?(OpenApi::Validatable) && !_outcome.valid?
      end

      if _payment_intent = @payment_intent
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      if _payment_method = @payment_method
        return false if _payment_method.to_s.size > 5000
      end

      if _payment_method_details = @payment_method_details
        return false if _payment_method_details.is_a?(OpenApi::Validatable) && !_payment_method_details.valid?
      end

      if _radar_options = @radar_options
        return false if _radar_options.is_a?(OpenApi::Validatable) && !_radar_options.valid?
      end

      if _receipt_email = @receipt_email
        return false if _receipt_email.to_s.size > 5000
      end

      if _receipt_number = @receipt_number
        return false if _receipt_number.to_s.size > 5000
      end

      if _receipt_url = @receipt_url
        return false if _receipt_url.to_s.size > 5000
      end

      if _refunds = @refunds
        return false if _refunds.is_a?(OpenApi::Validatable) && !_refunds.valid?
      end

      if _review = @review
        return false if _review.is_a?(OpenApi::Validatable) && !_review.valid?
      end

      if _shipping = @shipping
        return false if _shipping.is_a?(OpenApi::Validatable) && !_shipping.valid?
      end

      if _source_transfer = @source_transfer
        return false if _source_transfer.is_a?(OpenApi::Validatable) && !_source_transfer.valid?
      end

      if _statement_descriptor = @statement_descriptor
        return false if _statement_descriptor.to_s.size > 5000
      end

      if _statement_descriptor_suffix = @statement_descriptor_suffix
        return false if _statement_descriptor_suffix.to_s.size > 5000
      end

      if _transfer = @transfer
        return false if _transfer.is_a?(OpenApi::Validatable) && !_transfer.valid?
      end

      if _transfer_data = @transfer_data
        return false if _transfer_data.is_a?(OpenApi::Validatable) && !_transfer_data.valid?
      end

      if _transfer_group = @transfer_group
        return false if _transfer_group.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        raise ArgumentError.new("\"amount\" is required and cannot be null")
      end
      _amount = amount.not_nil!
      @amount = _amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_captured Object to be assigned
    def amount_captured=(amount_captured : Int64?)
      if amount_captured.nil?
        raise ArgumentError.new("\"amount_captured\" is required and cannot be null")
      end
      _amount_captured = amount_captured.not_nil!
      @amount_captured = _amount_captured
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_refunded Object to be assigned
    def amount_refunded=(amount_refunded : Int64?)
      if amount_refunded.nil?
        raise ArgumentError.new("\"amount_refunded\" is required and cannot be null")
      end
      _amount_refunded = amount_refunded.not_nil!
      @amount_refunded = _amount_refunded
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_details Object to be assigned
    def billing_details=(billing_details : Stripe::BillingDetails?)
      if billing_details.nil?
        raise ArgumentError.new("\"billing_details\" is required and cannot be null")
      end
      _billing_details = billing_details.not_nil!
      _billing_details.validate if _billing_details.is_a?(OpenApi::Validatable)
      @billing_details = _billing_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] captured Object to be assigned
    def captured=(captured : Bool?)
      if captured.nil?
        raise ArgumentError.new("\"captured\" is required and cannot be null")
      end
      _captured = captured.not_nil!
      @captured = _captured
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] disputed Object to be assigned
    def disputed=(disputed : Bool?)
      if disputed.nil?
        raise ArgumentError.new("\"disputed\" is required and cannot be null")
      end
      _disputed = disputed.not_nil!
      @disputed = _disputed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paid Object to be assigned
    def paid=(paid : Bool?)
      if paid.nil?
        raise ArgumentError.new("\"paid\" is required and cannot be null")
      end
      _paid = paid.not_nil!
      @paid = _paid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refunded Object to be assigned
    def refunded=(refunded : Bool?)
      if refunded.nil?
        raise ArgumentError.new("\"refunded\" is required and cannot be null")
      end
      _refunded = refunded.not_nil!
      @refunded = _refunded
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      OpenApi::EnumValidator.validate("status", _status, VALID_VALUES_FOR_STATUS)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(application : Stripe::ChargeApplication?)
      if application.nil?
        return @application = nil
      end
      _application = application.not_nil!
      _application.validate if _application.is_a?(OpenApi::Validatable)
      @application = _application
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee Object to be assigned
    def application_fee=(application_fee : Stripe::ChargeApplicationFee?)
      if application_fee.nil?
        return @application_fee = nil
      end
      _application_fee = application_fee.not_nil!
      _application_fee.validate if _application_fee.is_a?(OpenApi::Validatable)
      @application_fee = _application_fee
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_amount Object to be assigned
    def application_fee_amount=(application_fee_amount : Int64?)
      if application_fee_amount.nil?
        return @application_fee_amount = nil
      end
      _application_fee_amount = application_fee_amount.not_nil!
      @application_fee_amount = _application_fee_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_transaction Object to be assigned
    def balance_transaction=(balance_transaction : Stripe::ChargeBalanceTransaction?)
      if balance_transaction.nil?
        return @balance_transaction = nil
      end
      _balance_transaction = balance_transaction.not_nil!
      _balance_transaction.validate if _balance_transaction.is_a?(OpenApi::Validatable)
      @balance_transaction = _balance_transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] calculated_statement_descriptor Object to be assigned
    def calculated_statement_descriptor=(calculated_statement_descriptor : String?)
      if calculated_statement_descriptor.nil?
        return @calculated_statement_descriptor = nil
      end
      _calculated_statement_descriptor = calculated_statement_descriptor.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("calculated_statement_descriptor", _calculated_statement_descriptor.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @calculated_statement_descriptor = _calculated_statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : Stripe::ChargeCustomer?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      _customer.validate if _customer.is_a?(OpenApi::Validatable)
      @customer = _customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, 40000)
        raise ArgumentError.new(max_length_error)
      end

      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_balance_transaction Object to be assigned
    def failure_balance_transaction=(failure_balance_transaction : Stripe::ChargeFailureBalanceTransaction?)
      if failure_balance_transaction.nil?
        return @failure_balance_transaction = nil
      end
      _failure_balance_transaction = failure_balance_transaction.not_nil!
      _failure_balance_transaction.validate if _failure_balance_transaction.is_a?(OpenApi::Validatable)
      @failure_balance_transaction = _failure_balance_transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_code Object to be assigned
    def failure_code=(failure_code : String?)
      if failure_code.nil?
        return @failure_code = nil
      end
      _failure_code = failure_code.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_code", _failure_code.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @failure_code = _failure_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_message Object to be assigned
    def failure_message=(failure_message : String?)
      if failure_message.nil?
        return @failure_message = nil
      end
      _failure_message = failure_message.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("failure_message", _failure_message.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @failure_message = _failure_message
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fraud_details Object to be assigned
    def fraud_details=(fraud_details : Stripe::ChargeFraudDetails1?)
      if fraud_details.nil?
        return @fraud_details = nil
      end
      _fraud_details = fraud_details.not_nil!
      _fraud_details.validate if _fraud_details.is_a?(OpenApi::Validatable)
      @fraud_details = _fraud_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice Object to be assigned
    def invoice=(invoice : Stripe::ChargeInvoice?)
      if invoice.nil?
        return @invoice = nil
      end
      _invoice = invoice.not_nil!
      _invoice.validate if _invoice.is_a?(OpenApi::Validatable)
      @invoice = _invoice
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_behalf_of Object to be assigned
    def on_behalf_of=(on_behalf_of : Stripe::ChargeOnBehalfOf?)
      if on_behalf_of.nil?
        return @on_behalf_of = nil
      end
      _on_behalf_of = on_behalf_of.not_nil!
      _on_behalf_of.validate if _on_behalf_of.is_a?(OpenApi::Validatable)
      @on_behalf_of = _on_behalf_of
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outcome Object to be assigned
    def outcome=(outcome : Stripe::ChargeOutcome1?)
      if outcome.nil?
        return @outcome = nil
      end
      _outcome = outcome.not_nil!
      _outcome.validate if _outcome.is_a?(OpenApi::Validatable)
      @outcome = _outcome
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(payment_intent : Stripe::ChargePaymentIntent?)
      if payment_intent.nil?
        return @payment_intent = nil
      end
      _payment_intent = payment_intent.not_nil!
      _payment_intent.validate if _payment_intent.is_a?(OpenApi::Validatable)
      @payment_intent = _payment_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(payment_method : String?)
      if payment_method.nil?
        return @payment_method = nil
      end
      _payment_method = payment_method.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_method", _payment_method.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @payment_method = _payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_details Object to be assigned
    def payment_method_details=(payment_method_details : Stripe::ChargePaymentMethodDetails?)
      if payment_method_details.nil?
        return @payment_method_details = nil
      end
      _payment_method_details = payment_method_details.not_nil!
      _payment_method_details.validate if _payment_method_details.is_a?(OpenApi::Validatable)
      @payment_method_details = _payment_method_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] radar_options Object to be assigned
    def radar_options=(radar_options : Stripe::RadarRadarOptions?)
      if radar_options.nil?
        return @radar_options = nil
      end
      _radar_options = radar_options.not_nil!
      _radar_options.validate if _radar_options.is_a?(OpenApi::Validatable)
      @radar_options = _radar_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_email Object to be assigned
    def receipt_email=(receipt_email : String?)
      if receipt_email.nil?
        return @receipt_email = nil
      end
      _receipt_email = receipt_email.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_email", _receipt_email.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @receipt_email = _receipt_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_number Object to be assigned
    def receipt_number=(receipt_number : String?)
      if receipt_number.nil?
        return @receipt_number = nil
      end
      _receipt_number = receipt_number.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_number", _receipt_number.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @receipt_number = _receipt_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] receipt_url Object to be assigned
    def receipt_url=(receipt_url : String?)
      if receipt_url.nil?
        return @receipt_url = nil
      end
      _receipt_url = receipt_url.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("receipt_url", _receipt_url.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @receipt_url = _receipt_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refunds Object to be assigned
    def refunds=(refunds : Stripe::RefundList1?)
      if refunds.nil?
        return @refunds = nil
      end
      _refunds = refunds.not_nil!
      _refunds.validate if _refunds.is_a?(OpenApi::Validatable)
      @refunds = _refunds
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] review Object to be assigned
    def review=(review : Stripe::ChargeReview?)
      if review.nil?
        return @review = nil
      end
      _review = review.not_nil!
      _review.validate if _review.is_a?(OpenApi::Validatable)
      @review = _review
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping Object to be assigned
    def shipping=(shipping : Stripe::ChargeShipping?)
      if shipping.nil?
        return @shipping = nil
      end
      _shipping = shipping.not_nil!
      _shipping.validate if _shipping.is_a?(OpenApi::Validatable)
      @shipping = _shipping
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_transfer Object to be assigned
    def source_transfer=(source_transfer : Stripe::ChargeSourceTransfer?)
      if source_transfer.nil?
        return @source_transfer = nil
      end
      _source_transfer = source_transfer.not_nil!
      _source_transfer.validate if _source_transfer.is_a?(OpenApi::Validatable)
      @source_transfer = _source_transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        return @statement_descriptor = nil
      end
      _statement_descriptor = statement_descriptor.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor", _statement_descriptor.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @statement_descriptor = _statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor_suffix Object to be assigned
    def statement_descriptor_suffix=(statement_descriptor_suffix : String?)
      if statement_descriptor_suffix.nil?
        return @statement_descriptor_suffix = nil
      end
      _statement_descriptor_suffix = statement_descriptor_suffix.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("statement_descriptor_suffix", _statement_descriptor_suffix.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @statement_descriptor_suffix = _statement_descriptor_suffix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer Object to be assigned
    def transfer=(transfer : Stripe::ChargeTransfer?)
      if transfer.nil?
        return @transfer = nil
      end
      _transfer = transfer.not_nil!
      _transfer.validate if _transfer.is_a?(OpenApi::Validatable)
      @transfer = _transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(transfer_data : Stripe::ChargeTransferData1?)
      if transfer_data.nil?
        return @transfer_data = nil
      end
      _transfer_data = transfer_data.not_nil!
      _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
      @transfer_data = _transfer_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_group Object to be assigned
    def transfer_group=(transfer_group : String?)
      if transfer_group.nil?
        return @transfer_group = nil
      end
      _transfer_group = transfer_group.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transfer_group", _transfer_group.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @transfer_group = _transfer_group
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_captured, @amount_refunded, @billing_details, @captured, @created, @currency, @disputed, @id, @livemode, @metadata, @object, @paid, @refunded, @status, @application, @application_present, @application_fee, @application_fee_present, @application_fee_amount, @application_fee_amount_present, @balance_transaction, @balance_transaction_present, @calculated_statement_descriptor, @calculated_statement_descriptor_present, @customer, @customer_present, @description, @description_present, @failure_balance_transaction, @failure_balance_transaction_present, @failure_code, @failure_code_present, @failure_message, @failure_message_present, @fraud_details, @fraud_details_present, @invoice, @invoice_present, @on_behalf_of, @on_behalf_of_present, @outcome, @outcome_present, @payment_intent, @payment_intent_present, @payment_method, @payment_method_present, @payment_method_details, @payment_method_details_present, @radar_options, @receipt_email, @receipt_email_present, @receipt_number, @receipt_number_present, @receipt_url, @receipt_url_present, @refunds, @review, @review_present, @shipping, @shipping_present, @source_transfer, @source_transfer_present, @statement_descriptor, @statement_descriptor_present, @statement_descriptor_suffix, @statement_descriptor_suffix_present, @transfer, @transfer_data, @transfer_data_present, @transfer_group, @transfer_group_present)
  end
end
