#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./thresholds_resource_alert_filter"
require "./thresholds_resource_usage_threshold_config"

module Stripe
  # A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.
  class BillingAlert
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Defines the type of the alert.
    @[JSON::Field(key: "alert_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter alert_type : String? = nil
    ERROR_MESSAGE_FOR_ALERT_TYPE = "invalid value for \"alert_type\", must be one of [usage_threshold]."
    VALID_VALUES_FOR_ALERT_TYPE  = String.static_array("usage_threshold")

    @[JSON::Field(key: "filter", type: Stripe::ThresholdsResourceAlertFilter?, default: nil, required: true, nullable: true, emit_null: true)]
    getter filter : Stripe::ThresholdsResourceAlertFilter? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [billing.alert]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("billing.alert")

    # Status of the alert. This can be active, inactive or archived.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, archived, inactive]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "archived", "inactive")

    # Title of the alert.
    @[JSON::Field(key: "title", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter title : String? = nil
    MAX_LENGTH_FOR_TITLE = 5000

    @[JSON::Field(key: "usage_threshold_config", type: Stripe::ThresholdsResourceUsageThresholdConfig?, default: nil, required: true, nullable: true, emit_null: true)]
    getter usage_threshold_config : Stripe::ThresholdsResourceUsageThresholdConfig? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @alert_type : String? = nil,
      @filter : Stripe::ThresholdsResourceAlertFilter? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @title : String? = nil,
      @usage_threshold_config : Stripe::ThresholdsResourceUsageThresholdConfig? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"alert_type\" is required and cannot be null") if @alert_type.nil?

      unless (_alert_type = @alert_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ALERT_TYPE) unless OpenApi::EnumValidator.valid?(_alert_type, VALID_VALUES_FOR_ALERT_TYPE)
      end
      unless (_filter = @filter).nil?
        invalid_properties.concat(_filter.list_invalid_properties_for("filter")) if _filter.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"title\" is required and cannot be null") if @title.nil?

      unless (_title = @title).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("title", _title.to_s.size, MAX_LENGTH_FOR_TITLE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_usage_threshold_config = @usage_threshold_config).nil?
        invalid_properties.concat(_usage_threshold_config.list_invalid_properties_for("usage_threshold_config")) if _usage_threshold_config.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @alert_type.nil?
      unless (_alert_type = @alert_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_alert_type, VALID_VALUES_FOR_ALERT_TYPE)
      end

      unless (_filter = @filter).nil?
        return false if _filter.is_a?(OpenApi::Validatable) && !_filter.valid?
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @title.nil?
      unless (_title = @title).nil?
        return false if _title.to_s.size > MAX_LENGTH_FOR_TITLE
      end

      unless (_usage_threshold_config = @usage_threshold_config).nil?
        return false if _usage_threshold_config.is_a?(OpenApi::Validatable) && !_usage_threshold_config.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alert_type Object to be assigned
    def alert_type=(new_value : String?)
      raise ArgumentError.new("\"alert_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("alert_type", new_value, VALID_VALUES_FOR_ALERT_TYPE)
      end

      @alert_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filter Object to be assigned
    def filter=(new_value : Stripe::ThresholdsResourceAlertFilter?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @filter = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] title Object to be assigned
    def title=(new_value : String?)
      raise ArgumentError.new("\"title\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("title", new_value.to_s.size, MAX_LENGTH_FOR_TITLE)
      end

      @title = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usage_threshold_config Object to be assigned
    def usage_threshold_config=(new_value : Stripe::ThresholdsResourceUsageThresholdConfig?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @usage_threshold_config = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@alert_type, @filter, @id, @livemode, @object, @status, @title, @usage_threshold_config)
  end
end
