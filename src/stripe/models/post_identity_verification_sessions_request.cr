#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./provided_details_param"
require "./session_options_param"

module Stripe
  class PostIdentityVerificationSessionsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
    @[JSON::Field(key: "client_reference_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_reference_id : String? = nil
    MAX_LENGTH_FOR_CLIENT_REFERENCE_ID = 5000

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(key: "options", type: Stripe::SessionOptionsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter options : Stripe::SessionOptionsParam? = nil

    @[JSON::Field(key: "provided_details", type: Stripe::ProvidedDetailsParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter provided_details : Stripe::ProvidedDetailsParam? = nil

    # Token referencing a Customer resource.
    @[JSON::Field(key: "related_customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter related_customer : String? = nil
    MAX_LENGTH_FOR_RELATED_CUSTOMER = 5000

    # The URL that the user will be redirected to upon completing the verification flow.
    @[JSON::Field(key: "return_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter return_url : String? = nil

    # The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [document, id_number]."
    VALID_VALUES_FOR__TYPE  = String.static_array("document", "id_number")

    # The ID of a Verification Flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.
    @[JSON::Field(key: "verification_flow", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter verification_flow : String? = nil
    MAX_LENGTH_FOR_VERIFICATION_FLOW = 5000

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @client_reference_id : String? = nil,
      @expand : Array(String)? = nil,
      @metadata : Hash(String, String)? = nil,
      @options : Stripe::SessionOptionsParam? = nil,
      @provided_details : Stripe::ProvidedDetailsParam? = nil,
      @related_customer : String? = nil,
      @return_url : String? = nil,
      @_type : String? = nil,
      @verification_flow : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_client_reference_id = @client_reference_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_reference_id", _client_reference_id.to_s.size, MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_options = @options).nil?
        invalid_properties.concat(_options.list_invalid_properties_for("options")) if _options.is_a?(OpenApi::Validatable)
      end
      unless (_provided_details = @provided_details).nil?
        invalid_properties.concat(_provided_details.list_invalid_properties_for("provided_details")) if _provided_details.is_a?(OpenApi::Validatable)
      end
      unless (_related_customer = @related_customer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("related_customer", _related_customer.to_s.size, MAX_LENGTH_FOR_RELATED_CUSTOMER)
          invalid_properties.push(max_length_error)
        end
      end

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_verification_flow = @verification_flow).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("verification_flow", _verification_flow.to_s.size, MAX_LENGTH_FOR_VERIFICATION_FLOW)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_client_reference_id = @client_reference_id).nil?
        return false if _client_reference_id.to_s.size > MAX_LENGTH_FOR_CLIENT_REFERENCE_ID
      end

      unless (_options = @options).nil?
        return false if _options.is_a?(OpenApi::Validatable) && !_options.valid?
      end

      unless (_provided_details = @provided_details).nil?
        return false if _provided_details.is_a?(OpenApi::Validatable) && !_provided_details.valid?
      end

      unless (_related_customer = @related_customer).nil?
        return false if _related_customer.to_s.size > MAX_LENGTH_FOR_RELATED_CUSTOMER
      end

      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_verification_flow = @verification_flow).nil?
        return false if _verification_flow.to_s.size > MAX_LENGTH_FOR_VERIFICATION_FLOW
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_reference_id Object to be assigned
    def client_reference_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_reference_id", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
      end

      @client_reference_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(new_value : Array(String)?)
      @expand = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] options Object to be assigned
    def options=(new_value : Stripe::SessionOptionsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] provided_details Object to be assigned
    def provided_details=(new_value : Stripe::ProvidedDetailsParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @provided_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] related_customer Object to be assigned
    def related_customer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("related_customer", new_value.to_s.size, MAX_LENGTH_FOR_RELATED_CUSTOMER)
      end

      @related_customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_url Object to be assigned
    def return_url=(new_value : String?)
      @return_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_flow Object to be assigned
    def verification_flow=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("verification_flow", new_value.to_s.size, MAX_LENGTH_FOR_VERIFICATION_FLOW)
      end

      @verification_flow = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@client_reference_id, @expand, @metadata, @options, @provided_details, @related_customer, @return_url, @_type, @verification_flow)
  end
end
