#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class PaymentMethodConfigResourceDisplayPreference
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
    @[JSON::Field(key: "overridable", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter overridable : Bool? = nil

    # The account's display preference.
    @[JSON::Field(key: "preference", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter preference : String? = nil
    ERROR_MESSAGE_FOR_PREFERENCE = "invalid value for \"preference\", must be one of [none, off, on]."
    VALID_VALUES_FOR_PREFERENCE  = String.static_array("none", "off", "on")

    # The effective display preference value.
    @[JSON::Field(key: "value", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter value : String? = nil
    ERROR_MESSAGE_FOR_VALUE = "invalid value for \"value\", must be one of [off, on]."
    VALID_VALUES_FOR_VALUE  = String.static_array("off", "on")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @overridable : Bool? = nil,
      @preference : String? = nil,
      @value : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"preference\" is required and cannot be null") if @preference.nil?

      unless (_preference = @preference).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PREFERENCE) unless OpenApi::EnumValidator.valid?(_preference, VALID_VALUES_FOR_PREFERENCE)
      end
      invalid_properties.push("\"value\" is required and cannot be null") if @value.nil?

      unless (_value = @value).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_VALUE) unless OpenApi::EnumValidator.valid?(_value, VALID_VALUES_FOR_VALUE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @preference.nil?
      unless (_preference = @preference).nil?
        return false unless OpenApi::EnumValidator.valid?(_preference, VALID_VALUES_FOR_PREFERENCE)
      end

      return false if @value.nil?
      unless (_value = @value).nil?
        return false unless OpenApi::EnumValidator.valid?(_value, VALID_VALUES_FOR_VALUE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] overridable Object to be assigned
    def overridable=(new_value : Bool?)
      @overridable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preference Object to be assigned
    def preference=(new_value : String?)
      raise ArgumentError.new("\"preference\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("preference", new_value, VALID_VALUES_FOR_PREFERENCE)
      end

      @preference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value Object to be assigned
    def value=(new_value : String?)
      raise ArgumentError.new("\"value\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("value", new_value, VALID_VALUES_FOR_VALUE)
      end

      @value = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@overridable, @preference, @value)
  end
end
