#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./coupon_applies_to"
require "./coupon_currency_option"

module Stripe
  # A coupon contains information about a percent-off or amount-off discount you might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices), [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  class Coupon
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
    @[JSON::Field(key: "amount_off", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_off : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter currency : String? = nil

    # One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
    @[JSON::Field(key: "duration", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter duration : String? = nil
    ERROR_MESSAGE_FOR_DURATION = "invalid value for \"duration\", must be one of [forever, once, repeating]."
    VALID_VALUES_FOR_DURATION  = String.static_array("forever", "once", "repeating")

    # If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
    @[JSON::Field(key: "duration_in_months", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter duration_in_months : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
    @[JSON::Field(key: "max_redemptions", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter max_redemptions : Int64? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter metadata : Hash(String, String)? = nil

    # Name of the coupon displayed to customers on for instance invoices or receipts.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [coupon]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("coupon")

    # Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.
    @[JSON::Field(key: "percent_off", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter percent_off : Float64? = nil

    # Date after which the coupon can no longer be redeemed.
    @[JSON::Field(key: "redeem_by", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter redeem_by : Int64? = nil

    # Number of times this coupon has been applied to a customer.
    @[JSON::Field(key: "times_redeemed", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter times_redeemed : Int64? = nil

    # Taking account of the above properties, whether this coupon can still be applied to a customer.
    @[JSON::Field(key: "valid", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter valid : Bool? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "applies_to", type: Stripe::CouponAppliesTo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter applies_to : Stripe::CouponAppliesTo? = nil

    @[JSON::Field(key: "currency_options", type: Hash(String, Stripe::CouponCurrencyOption)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency_options : Hash(String, Stripe::CouponCurrencyOption)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_off : Int64? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @duration : String? = nil,
      @duration_in_months : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @max_redemptions : Int64? = nil,
      @metadata : Hash(String, String)? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @percent_off : Float64? = nil,
      @redeem_by : Int64? = nil,
      @times_redeemed : Int64? = nil,
      @valid : Bool? = nil,
      # Optional properties
      @applies_to : Stripe::CouponAppliesTo? = nil,
      @currency_options : Hash(String, Stripe::CouponCurrencyOption)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"duration\" is required and cannot be null") if @duration.nil?

      unless (_duration = @duration).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_DURATION) unless OpenApi::EnumValidator.valid?(_duration, VALID_VALUES_FOR_DURATION)
      end

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      invalid_properties.push("\"times_redeemed\" is required and cannot be null") if @times_redeemed.nil?

      invalid_properties.push("\"valid\" is required and cannot be null") if @valid.nil?

      unless (_applies_to = @applies_to).nil?
        invalid_properties.concat(_applies_to.list_invalid_properties_for("applies_to")) if _applies_to.is_a?(OpenApi::Validatable)
      end
      unless (_currency_options = @currency_options).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "currency_options", container: _currency_options)) if _currency_options.is_a?(Hash)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @duration.nil?
      unless (_duration = @duration).nil?
        return false unless OpenApi::EnumValidator.valid?(_duration, VALID_VALUES_FOR_DURATION)
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @times_redeemed.nil?

      return false if @valid.nil?

      unless (_applies_to = @applies_to).nil?
        return false if _applies_to.is_a?(OpenApi::Validatable) && !_applies_to.valid?
      end

      unless (_currency_options = @currency_options).nil?
        return false if _currency_options.is_a?(Hash) && !OpenApi::ContainerValidator.valid?(container: _currency_options)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_off Object to be assigned
    def amount_off=(new_value : Int64?)
      @amount_off = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duration Object to be assigned
    def duration=(new_value : String?)
      raise ArgumentError.new("\"duration\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("duration", new_value, VALID_VALUES_FOR_DURATION)
      end

      @duration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duration_in_months Object to be assigned
    def duration_in_months=(new_value : Int64?)
      @duration_in_months = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] max_redemptions Object to be assigned
    def max_redemptions=(new_value : Int64?)
      @max_redemptions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("name", new_value.to_s.size, MAX_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] percent_off Object to be assigned
    def percent_off=(new_value : Float64?)
      @percent_off = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redeem_by Object to be assigned
    def redeem_by=(new_value : Int64?)
      @redeem_by = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] times_redeemed Object to be assigned
    def times_redeemed=(new_value : Int64?)
      raise ArgumentError.new("\"times_redeemed\" is required and cannot be null") if new_value.nil?

      @times_redeemed = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] valid Object to be assigned
    def valid=(new_value : Bool?)
      raise ArgumentError.new("\"valid\" is required and cannot be null") if new_value.nil?

      @valid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] applies_to Object to be assigned
    def applies_to=(new_value : Stripe::CouponAppliesTo?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @applies_to = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency_options Object to be assigned
    def currency_options=(new_value : Hash(String, Stripe::CouponCurrencyOption)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Hash)
      end

      @currency_options = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_off, @created, @currency, @duration, @duration_in_months, @id, @livemode, @max_redemptions, @metadata, @name, @object, @percent_off, @redeem_by, @times_redeemed, @valid, @applies_to, @currency_options)
  end
end
