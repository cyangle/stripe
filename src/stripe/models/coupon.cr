#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A coupon contains information about a percent-off or amount-off discount you might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices), [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  class Coupon
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
    @[JSON::Field(key: "duration", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter duration : String? = nil

    ENUM_VALIDATOR_FOR_DURATION = OpenApi::EnumValidator.new("duration", "String", ["forever", "once", "repeating"])

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = OpenApi::EnumValidator.new("object", "String", ["coupon"])

    # Number of times this coupon has been applied to a customer.
    @[JSON::Field(key: "times_redeemed", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter times_redeemed : Int64? = nil

    # Taking account of the above properties, whether this coupon can still be applied to a customer.
    @[JSON::Field(key: "valid", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter valid : Bool? = nil

    # Optional properties

    # Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
    @[JSON::Field(key: "amount_off", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount_off.nil? && !amount_off_present?)]
    getter amount_off : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_off_present : Bool = false

    @[JSON::Field(key: "applies_to", type: Stripe::CouponAppliesTo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter applies_to : Stripe::CouponAppliesTo? = nil

    # If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency_options", type: Hash(String, Stripe::CouponCurrencyOption)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency_options : Hash(String, Stripe::CouponCurrencyOption)? = nil

    # If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
    @[JSON::Field(key: "duration_in_months", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: duration_in_months.nil? && !duration_in_months_present?)]
    getter duration_in_months : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? duration_in_months_present : Bool = false

    # Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
    @[JSON::Field(key: "max_redemptions", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: max_redemptions.nil? && !max_redemptions_present?)]
    getter max_redemptions : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? max_redemptions_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # Name of the coupon displayed to customers on for instance invoices or receipts.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String? = nil

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
    @[JSON::Field(key: "percent_off", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: percent_off.nil? && !percent_off_present?)]
    getter percent_off : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? percent_off_present : Bool = false

    # Date after which the coupon can no longer be redeemed.
    @[JSON::Field(key: "redeem_by", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: redeem_by.nil? && !redeem_by_present?)]
    getter redeem_by : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? redeem_by_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @duration : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @times_redeemed : Int64? = nil,
      @valid : Bool? = nil,
      # Optional properties
      @amount_off : Int64? = nil,
      @applies_to : Stripe::CouponAppliesTo? = nil,
      @currency : String? = nil,
      @currency_options : Hash(String, Stripe::CouponCurrencyOption)? = nil,
      @duration_in_months : Int64? = nil,
      @max_redemptions : Int64? = nil,
      @metadata : Hash(String, String)? = nil,
      @name : String? = nil,
      @percent_off : Float64? = nil,
      @redeem_by : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_DURATION.error_message) unless ENUM_VALIDATOR_FOR_DURATION.valid?(@duration, false)
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"times_redeemed\" is required and cannot be null") if @times_redeemed.nil?

      invalid_properties.push("\"valid\" is required and cannot be null") if @valid.nil?

      if _applies_to = @applies_to
        invalid_properties.concat(_applies_to.list_invalid_properties_for("applies_to")) if _applies_to.is_a?(OpenApi::Validatable)
      end

      if _currency_options = @currency_options
        invalid_properties.concat(OpenApi::HashValidator.list_invalid_properties_for(key: "currency_options", hash: _currency_options)) if _currency_options.is_a?(Hash)
      end

      if _name = @name
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false unless ENUM_VALIDATOR_FOR_DURATION.valid?(@duration, false)
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?

      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @times_redeemed.nil?

      return false if @valid.nil?

      if _applies_to = @applies_to
        return false if _applies_to.is_a?(OpenApi::Validatable) && !_applies_to.valid?
      end

      if _currency_options = @currency_options
        return false if _currency_options.is_a?(Hash) && !OpenApi::HashValidator.valid?(hash: _currency_options)
      end

      if _name = @name
        return false if _name.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duration Object to be assigned
    def duration=(duration : String?)
      if duration.nil?
        raise ArgumentError.new("\"duration\" is required and cannot be null")
      end
      _duration = duration.not_nil!
      ENUM_VALIDATOR_FOR_DURATION.valid!(_duration)
      @duration = _duration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] times_redeemed Object to be assigned
    def times_redeemed=(times_redeemed : Int64?)
      if times_redeemed.nil?
        raise ArgumentError.new("\"times_redeemed\" is required and cannot be null")
      end
      _times_redeemed = times_redeemed.not_nil!
      @times_redeemed = _times_redeemed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] valid Object to be assigned
    def valid=(valid : Bool?)
      if valid.nil?
        raise ArgumentError.new("\"valid\" is required and cannot be null")
      end
      _valid = valid.not_nil!
      @valid = _valid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_off Object to be assigned
    def amount_off=(amount_off : Int64?)
      if amount_off.nil?
        return @amount_off = nil
      end
      _amount_off = amount_off.not_nil!
      @amount_off = _amount_off
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] applies_to Object to be assigned
    def applies_to=(applies_to : Stripe::CouponAppliesTo?)
      if applies_to.nil?
        return @applies_to = nil
      end
      _applies_to = applies_to.not_nil!
      _applies_to.validate if _applies_to.is_a?(OpenApi::Validatable)
      @applies_to = _applies_to
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency_options Object to be assigned
    def currency_options=(currency_options : Hash(String, Stripe::CouponCurrencyOption)?)
      if currency_options.nil?
        return @currency_options = nil
      end
      _currency_options = currency_options.not_nil!
      OpenApi::HashValidator.validate(hash: _currency_options) if _currency_options.is_a?(Hash)
      @currency_options = _currency_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duration_in_months Object to be assigned
    def duration_in_months=(duration_in_months : Int64?)
      if duration_in_months.nil?
        return @duration_in_months = nil
      end
      _duration_in_months = duration_in_months.not_nil!
      @duration_in_months = _duration_in_months
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] max_redemptions Object to be assigned
    def max_redemptions=(max_redemptions : Int64?)
      if max_redemptions.nil?
        return @max_redemptions = nil
      end
      _max_redemptions = max_redemptions.not_nil!
      @max_redemptions = _max_redemptions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        return @name = nil
      end
      _name = name.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @name = _name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] percent_off Object to be assigned
    def percent_off=(percent_off : Float64?)
      if percent_off.nil?
        return @percent_off = nil
      end
      _percent_off = percent_off.not_nil!
      @percent_off = _percent_off
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redeem_by Object to be assigned
    def redeem_by=(redeem_by : Int64?)
      if redeem_by.nil?
        return @redeem_by = nil
      end
      _redeem_by = redeem_by.not_nil!
      @redeem_by = _redeem_by
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @duration, @id, @livemode, @object, @times_redeemed, @valid, @amount_off, @amount_off_present, @applies_to, @currency, @currency_present, @currency_options, @duration_in_months, @duration_in_months_present, @max_redemptions, @max_redemptions_present, @metadata, @metadata_present, @name, @name_present, @percent_off, @percent_off_present, @redeem_by, @redeem_by_present)
  end
end
