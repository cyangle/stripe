#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./application_fee"
require "./application_fee_account"
require "./application_fee_application"
require "./application_fee_balance_transaction"
require "./application_fee_charge"
require "./application_fee_originating_transaction"
require "./fee_refund_list"
require "./platform_earning_fee_source"

module Stripe
  # The application fee (if any) for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.
  class PayoutApplicationFee
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "account", type: Stripe::ApplicationFeeAccount?, default: nil, required: true, nullable: false, emit_null: false)]
    property account : Stripe::ApplicationFeeAccount? = nil

    # Amount earned, in cents (or local equivalent).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount : Int64? = nil

    # Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)
    @[JSON::Field(key: "amount_refunded", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property amount_refunded : Int64? = nil

    @[JSON::Field(key: "application", type: Stripe::ApplicationFeeApplication?, default: nil, required: true, nullable: false, emit_null: false)]
    property application : Stripe::ApplicationFeeApplication? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::ApplicationFeeBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property balance_transaction : Stripe::ApplicationFeeBalanceTransaction? = nil

    @[JSON::Field(key: "charge", type: Stripe::ApplicationFeeCharge?, default: nil, required: true, nullable: false, emit_null: false)]
    property charge : Stripe::ApplicationFeeCharge? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    @[JSON::Field(key: "fee_source", type: Stripe::PlatformEarningFeeSource?, default: nil, required: true, nullable: false, emit_null: false)]
    property fee_source : Stripe::PlatformEarningFeeSource? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [application_fee]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("application_fee")

    @[JSON::Field(key: "originating_transaction", type: Stripe::ApplicationFeeOriginatingTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    property originating_transaction : Stripe::ApplicationFeeOriginatingTransaction? = nil

    # Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
    @[JSON::Field(key: "refunded", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property refunded : Bool? = nil

    @[JSON::Field(key: "refunds", type: Stripe::FeeRefundList?, default: nil, required: true, nullable: false, emit_null: false)]
    property refunds : Stripe::FeeRefundList? = nil

    # End of Required Properties
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::ApplicationFee,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account : Stripe::ApplicationFeeAccount? = nil,
      @amount : Int64? = nil,
      @amount_refunded : Int64? = nil,
      @application : Stripe::ApplicationFeeApplication? = nil,
      @balance_transaction : Stripe::ApplicationFeeBalanceTransaction? = nil,
      @charge : Stripe::ApplicationFeeCharge? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @fee_source : Stripe::PlatformEarningFeeSource? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @originating_transaction : Stripe::ApplicationFeeOriginatingTransaction? = nil,
      @refunded : Bool? = nil,
      @refunds : Stripe::FeeRefundList? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @amount, @amount_refunded, @application, @balance_transaction, @charge, @created, @currency, @fee_source, @id, @livemode, @object, @originating_transaction, @refunded, @refunds)
  end
end
