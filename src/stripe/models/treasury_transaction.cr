#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TreasuryTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Amount (in cents) transferred.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    @[JSON::Field(key: "balance_impact", type: TransactionsResourceBalanceImpact)]
    property balance_impact : TransactionsResourceBalanceImpact

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String)]
    getter description : String

    @[JSON::Field(key: "entries", type: TransactionsResourceTreasuryTransactionEntryList1?, presence: true, ignore_serialize: entries.nil? && !entries_present?)]
    property entries : TransactionsResourceTreasuryTransactionEntryList1?

    @[JSON::Field(ignore: true)]
    property? entries_present : Bool = false

    # The FinancialAccount associated with this object.
    @[JSON::Field(key: "financial_account", type: String)]
    getter financial_account : String

    # ID of the flow that created the Transaction.
    @[JSON::Field(key: "flow", type: String?, presence: true, ignore_serialize: flow.nil? && !flow_present?)]
    getter flow : String?

    @[JSON::Field(ignore: true)]
    property? flow_present : Bool = false

    @[JSON::Field(key: "flow_details", type: TreasuryTransactionFlowDetails?, presence: true, ignore_serialize: flow_details.nil? && !flow_details_present?)]
    property flow_details : TreasuryTransactionFlowDetails?

    @[JSON::Field(ignore: true)]
    property? flow_details_present : Bool = false

    # Type of the flow that created the Transaction.
    @[JSON::Field(key: "flow_type", type: String)]
    getter flow_type : String

    ENUM_VALIDATOR_FOR_FLOW_TYPE = EnumValidator.new("flow_type", "String", ["credit_reversal", "debit_reversal", "inbound_transfer", "issuing_authorization", "other", "outbound_payment", "outbound_transfer", "received_credit", "received_debit"])

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["treasury.transaction"])

    # Status of the Transaction.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["open", "posted", "void"])

    @[JSON::Field(key: "status_transitions", type: TransactionsResourceAbstractTransactionResourceStatusTransitions)]
    property status_transitions : TransactionsResourceAbstractTransactionResourceStatusTransitions

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @balance_impact : TransactionsResourceBalanceImpact, @created : Int64, @currency : String, @description : String, @entries : TransactionsResourceTreasuryTransactionEntryList1?, @financial_account : String, @flow : String?, @flow_details : TreasuryTransactionFlowDetails?, @flow_type : String, @id : String, @livemode : Bool, @object : String, @status : String, @status_transitions : TransactionsResourceAbstractTransactionResourceStatusTransitions)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @financial_account.to_s.size > 5000
        invalid_properties.push("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      if @flow.to_s.size > 5000
        invalid_properties.push("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_FLOW_TYPE.error_message) unless ENUM_VALIDATOR_FOR_FLOW_TYPE.valid?(@flow_type, false)

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @description.to_s.size > 5000
      return false if @financial_account.to_s.size > 5000
      return false if @flow.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_FLOW_TYPE.valid?(@flow_type, false)
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] financial_account Value to be assigned
    def financial_account=(financial_account)
      if financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      @financial_account = financial_account
    end

    # Custom attribute writer method with validation
    # @param [Object] flow Value to be assigned
    def flow=(flow)
      if flow.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"flow\", the character length must be smaller than or equal to 5000.")
      end

      @flow = flow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flow_type Object to be assigned
    def flow_type=(flow_type)
      ENUM_VALIDATOR_FOR_FLOW_TYPE.valid!(flow_type, false)
      @flow_type = flow_type
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        balance_impact == o.balance_impact &&
        created == o.created &&
        currency == o.currency &&
        description == o.description &&
        entries == o.entries &&
        financial_account == o.financial_account &&
        flow == o.flow &&
        flow_details == o.flow_details &&
        flow_type == o.flow_type &&
        id == o.id &&
        livemode == o.livemode &&
        object == o.object &&
        status == o.status &&
        status_transitions == o.status_transitions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amount, @balance_impact, @created, @currency, @description, @entries, @financial_account, @flow, @flow_details, @flow_type, @id, @livemode, @object, @status, @status_transitions)
  end
end
