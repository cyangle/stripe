#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Reader represents a physical device for accepting payment details.  Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/payments/connect-reader).
  class TerminalReader
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, or `simulated_wisepos_e`.
    @[JSON::Field(key: "device_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter device_type : String? = nil

    VALID_VALUES_FOR_DEVICE_TYPE = StaticArray["bbpos_chipper2x", "bbpos_wisepad3", "bbpos_wisepos_e", "simulated_wisepos_e", "stripe_m2", "verifone_P400"]

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Custom label given to the reader for easier identification.
    @[JSON::Field(key: "label", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter label : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    VALID_VALUES_FOR_OBJECT = StaticArray["terminal.reader"]

    # Serial number of the reader.
    @[JSON::Field(key: "serial_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter serial_number : String? = nil

    # Optional properties

    @[JSON::Field(key: "action", type: Stripe::TerminalReaderAction?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: action.nil? && !action_present?)]
    getter action : Stripe::TerminalReaderAction? = nil

    @[JSON::Field(ignore: true)]
    property? action_present : Bool = false

    # The current software version of the reader.
    @[JSON::Field(key: "device_sw_version", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: device_sw_version.nil? && !device_sw_version_present?)]
    getter device_sw_version : String? = nil

    @[JSON::Field(ignore: true)]
    property? device_sw_version_present : Bool = false

    # The local IP address of the reader.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "location", type: Stripe::TerminalReaderLocation?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: location.nil? && !location_present?)]
    getter location : Stripe::TerminalReaderLocation? = nil

    @[JSON::Field(ignore: true)]
    property? location_present : Bool = false

    # The networking status of the reader.
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String? = nil

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @device_type : String? = nil,
      @id : String? = nil,
      @label : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @serial_number : String? = nil,
      # Optional properties
      @action : Stripe::TerminalReaderAction? = nil,
      @device_sw_version : String? = nil,
      @ip_address : String? = nil,
      @location : Stripe::TerminalReaderLocation? = nil,
      @status : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"device_type\" is required and cannot be null") if @device_type.nil?

      if _device_type = @device_type
        invalid_properties.push(OpenApi::EnumValidator.error_message("device_type", VALID_VALUES_FOR_DEVICE_TYPE)) unless OpenApi::EnumValidator.valid?(_device_type, VALID_VALUES_FOR_DEVICE_TYPE)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      if _id = @id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"label\" is required and cannot be null") if @label.nil?

      if _label = @label
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("label", _label.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      if _object = @object
        invalid_properties.push(OpenApi::EnumValidator.error_message("object", VALID_VALUES_FOR_OBJECT)) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"serial_number\" is required and cannot be null") if @serial_number.nil?

      if _serial_number = @serial_number
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("serial_number", _serial_number.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _action = @action
        invalid_properties.concat(_action.list_invalid_properties_for("action")) if _action.is_a?(OpenApi::Validatable)
      end
      if _device_sw_version = @device_sw_version
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("device_sw_version", _device_sw_version.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _ip_address = @ip_address
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("ip_address", _ip_address.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _location = @location
        invalid_properties.concat(_location.list_invalid_properties_for("location")) if _location.is_a?(OpenApi::Validatable)
      end
      if _status = @status
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("status", _status.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @device_type.nil?
      if _device_type = @device_type
        return false unless OpenApi::EnumValidator.valid?(_device_type, VALID_VALUES_FOR_DEVICE_TYPE)
      end

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end

      return false if @label.nil?
      if _label = @label
        return false if _label.to_s.size > 5000
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      if _object = @object
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @serial_number.nil?
      if _serial_number = @serial_number
        return false if _serial_number.to_s.size > 5000
      end

      if _action = @action
        return false if _action.is_a?(OpenApi::Validatable) && !_action.valid?
      end

      if _device_sw_version = @device_sw_version
        return false if _device_sw_version.to_s.size > 5000
      end

      if _ip_address = @ip_address
        return false if _ip_address.to_s.size > 5000
      end

      if _location = @location
        return false if _location.is_a?(OpenApi::Validatable) && !_location.valid?
      end

      if _status = @status
        return false if _status.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_type Object to be assigned
    def device_type=(device_type : String?)
      if device_type.nil?
        raise ArgumentError.new("\"device_type\" is required and cannot be null")
      end
      _device_type = device_type.not_nil!
      OpenApi::EnumValidator.validate("device_type", _device_type, VALID_VALUES_FOR_DEVICE_TYPE)
      @device_type = _device_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] label Object to be assigned
    def label=(label : String?)
      if label.nil?
        raise ArgumentError.new("\"label\" is required and cannot be null")
      end
      _label = label.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("label", _label.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @label = _label
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] serial_number Object to be assigned
    def serial_number=(serial_number : String?)
      if serial_number.nil?
        raise ArgumentError.new("\"serial_number\" is required and cannot be null")
      end
      _serial_number = serial_number.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("serial_number", _serial_number.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @serial_number = _serial_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action : Stripe::TerminalReaderAction?)
      if action.nil?
        return @action = nil
      end
      _action = action.not_nil!
      _action.validate if _action.is_a?(OpenApi::Validatable)
      @action = _action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_sw_version Object to be assigned
    def device_sw_version=(device_sw_version : String?)
      if device_sw_version.nil?
        return @device_sw_version = nil
      end
      _device_sw_version = device_sw_version.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("device_sw_version", _device_sw_version.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @device_sw_version = _device_sw_version
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(ip_address : String?)
      if ip_address.nil?
        return @ip_address = nil
      end
      _ip_address = ip_address.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("ip_address", _ip_address.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @ip_address = _ip_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(location : Stripe::TerminalReaderLocation?)
      if location.nil?
        return @location = nil
      end
      _location = location.not_nil!
      _location.validate if _location.is_a?(OpenApi::Validatable)
      @location = _location
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("status", _status.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @status = _status
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@device_type, @id, @label, @livemode, @metadata, @object, @serial_number, @action, @action_present, @device_sw_version, @device_sw_version_present, @ip_address, @ip_address_present, @location, @location_present, @status, @status_present)
  end
end
