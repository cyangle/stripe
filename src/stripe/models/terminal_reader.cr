#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Reader represents a physical device for accepting payment details.  Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/payments/connect-reader).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TerminalReader
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, or `simulated_wisepos_e`.
    @[JSON::Field(key: "device_type", type: String)]
    getter device_type : String

    ENUM_VALIDATOR_FOR_DEVICE_TYPE = EnumValidator.new("device_type", "String", ["bbpos_chipper2x", "bbpos_wisepad3", "bbpos_wisepos_e", "simulated_wisepos_e", "stripe_m2", "verifone_P400"])

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Custom label given to the reader for easier identification.
    @[JSON::Field(key: "label", type: String)]
    getter label : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["terminal.reader"])

    # Serial number of the reader.
    @[JSON::Field(key: "serial_number", type: String)]
    getter serial_number : String

    # Optional properties

    @[JSON::Field(key: "action", type: TerminalReaderAction?, presence: true, ignore_serialize: action.nil? && !action_present?)]
    property action : TerminalReaderAction?

    @[JSON::Field(ignore: true)]
    property? action_present : Bool = false

    # The current software version of the reader.
    @[JSON::Field(key: "device_sw_version", type: String?, presence: true, ignore_serialize: device_sw_version.nil? && !device_sw_version_present?)]
    getter device_sw_version : String?

    @[JSON::Field(ignore: true)]
    property? device_sw_version_present : Bool = false

    # The local IP address of the reader.
    @[JSON::Field(key: "ip_address", type: String?, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String?

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "location", type: TerminalReaderLocation?, presence: true, ignore_serialize: location.nil? && !location_present?)]
    property location : TerminalReaderLocation?

    @[JSON::Field(ignore: true)]
    property? location_present : Bool = false

    # The networking status of the reader.
    @[JSON::Field(key: "status", type: String?, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String?

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @device_type : String,
      @id : String,
      @label : String,
      @livemode : Bool,
      @metadata : Hash(String, String),
      @object : String,
      @serial_number : String,
      # Optional properties
      @action : TerminalReaderAction? = nil,
      @device_sw_version : String? = nil,
      @ip_address : String? = nil,
      @location : TerminalReaderLocation? = nil,
      @status : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_DEVICE_TYPE.error_message) unless ENUM_VALIDATOR_FOR_DEVICE_TYPE.valid?(@device_type, false)

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if @label.to_s.size > 5000
        invalid_properties.push("invalid value for \"label\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @serial_number.to_s.size > 5000
        invalid_properties.push("invalid value for \"serial_number\", the character length must be smaller than or equal to 5000.")
      end

      if !@device_sw_version.nil? && @device_sw_version.to_s.size > 5000
        invalid_properties.push("invalid value for \"device_sw_version\", the character length must be smaller than or equal to 5000.")
      end

      if !@ip_address.nil? && @ip_address.to_s.size > 5000
        invalid_properties.push("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
      end

      if !@status.nil? && @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_DEVICE_TYPE.valid?(@device_type, false)
      return false if @id.to_s.size > 5000
      return false if @label.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @serial_number.to_s.size > 5000
      return false if !@device_sw_version.nil? && @device_sw_version.to_s.size > 5000
      return false if !@ip_address.nil? && @ip_address.to_s.size > 5000
      return false if !@status.nil? && @status.to_s.size > 5000

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_type Object to be assigned
    def device_type=(device_type)
      ENUM_VALIDATOR_FOR_DEVICE_TYPE.valid!(device_type, false)
      @device_type = device_type
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] label Value to be assigned
    def label=(label)
      if label.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"label\", the character length must be smaller than or equal to 5000.")
      end

      @label = label
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] serial_number Value to be assigned
    def serial_number=(serial_number)
      if serial_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"serial_number\", the character length must be smaller than or equal to 5000.")
      end

      @serial_number = serial_number
    end

    # Custom attribute writer method with validation
    # @param [Object] device_sw_version Value to be assigned
    def device_sw_version=(device_sw_version)
      if !device_sw_version.nil? && device_sw_version.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"device_sw_version\", the character length must be smaller than or equal to 5000.")
      end

      @device_sw_version = device_sw_version
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address Value to be assigned
    def ip_address=(ip_address)
      if !ip_address.nil? && ip_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
      end

      @ip_address = ip_address
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if !status.nil? && status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@device_type, @id, @label, @livemode, @metadata, @object, @serial_number, @action, @device_sw_version, @ip_address, @location, @status)
  end
end
