#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Reader represents a physical device for accepting payment details.  Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/payments/connect-reader).
  class TerminalReader
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, or `simulated_wisepos_e`.
    @[JSON::Field(key: "device_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter device_type : String? = nil
    ERROR_MESSAGE_FOR_DEVICE_TYPE = "invalid value for \"device_type\", must be one of [bbpos_chipper2x, bbpos_wisepad3, bbpos_wisepos_e, simulated_wisepos_e, stripe_m2, verifone_P400]."
    VALID_VALUES_FOR_DEVICE_TYPE  = String.static_array("bbpos_chipper2x", "bbpos_wisepad3", "bbpos_wisepos_e", "simulated_wisepos_e", "stripe_m2", "verifone_P400")

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Custom label given to the reader for easier identification.
    @[JSON::Field(key: "label", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter label : String? = nil
    MAX_LENGTH_FOR_LABEL = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [terminal.reader]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("terminal.reader")

    # Serial number of the reader.
    @[JSON::Field(key: "serial_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter serial_number : String? = nil
    MAX_LENGTH_FOR_SERIAL_NUMBER = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "action", type: Stripe::TerminalReaderAction?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: action.nil? && !action_present?)]
    getter action : Stripe::TerminalReaderAction? = nil

    @[JSON::Field(ignore: true)]
    property? action_present : Bool = false

    # The current software version of the reader.
    @[JSON::Field(key: "device_sw_version", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: device_sw_version.nil? && !device_sw_version_present?)]
    getter device_sw_version : String? = nil
    MAX_LENGTH_FOR_DEVICE_SW_VERSION = 5000

    @[JSON::Field(ignore: true)]
    property? device_sw_version_present : Bool = false

    # The local IP address of the reader.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String? = nil
    MAX_LENGTH_FOR_IP_ADDRESS = 5000

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "location", type: Stripe::TerminalReaderLocation?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: location.nil? && !location_present?)]
    getter location : Stripe::TerminalReaderLocation? = nil

    @[JSON::Field(ignore: true)]
    property? location_present : Bool = false

    # The networking status of the reader.
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String? = nil
    MAX_LENGTH_FOR_STATUS = 5000

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @device_type : String? = nil,
      @id : String? = nil,
      @label : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @serial_number : String? = nil,
      # Optional properties
      @action : Stripe::TerminalReaderAction? = nil,
      @device_sw_version : String? = nil,
      @ip_address : String? = nil,
      @location : Stripe::TerminalReaderLocation? = nil,
      @status : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"device_type\" is required and cannot be null") if @device_type.nil?

      unless (_device_type = @device_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_DEVICE_TYPE) unless OpenApi::EnumValidator.valid?(_device_type, VALID_VALUES_FOR_DEVICE_TYPE)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"label\" is required and cannot be null") if @label.nil?

      unless (_label = @label).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("label", _label.to_s.size, MAX_LENGTH_FOR_LABEL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"serial_number\" is required and cannot be null") if @serial_number.nil?

      unless (_serial_number = @serial_number).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("serial_number", _serial_number.to_s.size, MAX_LENGTH_FOR_SERIAL_NUMBER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_action = @action).nil?
        invalid_properties.concat(_action.list_invalid_properties_for("action")) if _action.is_a?(OpenApi::Validatable)
      end
      unless (_device_sw_version = @device_sw_version).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("device_sw_version", _device_sw_version.to_s.size, MAX_LENGTH_FOR_DEVICE_SW_VERSION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_ip_address = @ip_address).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("ip_address", _ip_address.to_s.size, MAX_LENGTH_FOR_IP_ADDRESS)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_location = @location).nil?
        invalid_properties.concat(_location.list_invalid_properties_for("location")) if _location.is_a?(OpenApi::Validatable)
      end
      unless (_status = @status).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("status", _status.to_s.size, MAX_LENGTH_FOR_STATUS)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @device_type.nil?
      unless (_device_type = @device_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_device_type, VALID_VALUES_FOR_DEVICE_TYPE)
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @label.nil?
      unless (_label = @label).nil?
        return false if _label.to_s.size > MAX_LENGTH_FOR_LABEL
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @serial_number.nil?
      unless (_serial_number = @serial_number).nil?
        return false if _serial_number.to_s.size > MAX_LENGTH_FOR_SERIAL_NUMBER
      end

      unless (_action = @action).nil?
        return false if _action.is_a?(OpenApi::Validatable) && !_action.valid?
      end

      unless (_device_sw_version = @device_sw_version).nil?
        return false if _device_sw_version.to_s.size > MAX_LENGTH_FOR_DEVICE_SW_VERSION
      end

      unless (_ip_address = @ip_address).nil?
        return false if _ip_address.to_s.size > MAX_LENGTH_FOR_IP_ADDRESS
      end

      unless (_location = @location).nil?
        return false if _location.is_a?(OpenApi::Validatable) && !_location.valid?
      end

      unless (_status = @status).nil?
        return false if _status.to_s.size > MAX_LENGTH_FOR_STATUS
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_type Object to be assigned
    def device_type=(new_value : String?)
      raise ArgumentError.new("\"device_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("device_type", new_value, VALID_VALUES_FOR_DEVICE_TYPE)
      end

      @device_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] label Object to be assigned
    def label=(new_value : String?)
      raise ArgumentError.new("\"label\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("label", new_value.to_s.size, MAX_LENGTH_FOR_LABEL)
      end

      @label = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"metadata\" is required and cannot be null") if new_value.nil?

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] serial_number Object to be assigned
    def serial_number=(new_value : String?)
      raise ArgumentError.new("\"serial_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("serial_number", new_value.to_s.size, MAX_LENGTH_FOR_SERIAL_NUMBER)
      end

      @serial_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(new_value : Stripe::TerminalReaderAction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @action = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_sw_version Object to be assigned
    def device_sw_version=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("device_sw_version", new_value.to_s.size, MAX_LENGTH_FOR_DEVICE_SW_VERSION)
      end

      @device_sw_version = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("ip_address", new_value.to_s.size, MAX_LENGTH_FOR_IP_ADDRESS)
      end

      @ip_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(new_value : Stripe::TerminalReaderLocation?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @location = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("status", new_value.to_s.size, MAX_LENGTH_FOR_STATUS)
      end

      @status = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@device_type, @id, @label, @livemode, @metadata, @object, @serial_number, @action, @action_present, @device_sw_version, @device_sw_version_present, @ip_address, @ip_address_present, @location, @location_present, @status, @status_present)
  end
end
