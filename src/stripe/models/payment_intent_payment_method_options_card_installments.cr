#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Installment details for this payment (Mexico only).  For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentIntentPaymentMethodOptionsCardInstallments
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Installment plans that may be selected for this PaymentIntent.
    @[JSON::Field(key: "available_plans", type: Array(PaymentMethodDetailsCardInstallmentsPlan), presence: true, ignore_serialize: available_plans.nil? && !available_plans_present?)]
    property available_plans : Array(PaymentMethodDetailsCardInstallmentsPlan)

    @[JSON::Field(ignore: true)]
    property? available_plans_present : Bool = false

    # Whether Installments are enabled for this PaymentIntent.
    @[JSON::Field(key: "enabled", type: Bool?)]
    property enabled : Bool?

    @[JSON::Field(key: "plan", type: PaymentMethodOptionsCardInstallmentsPlan, presence: true, ignore_serialize: plan.nil? && !plan_present?)]
    property plan : PaymentMethodOptionsCardInstallmentsPlan

    @[JSON::Field(ignore: true)]
    property? plan_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::PaymentMethodOptionsCardInstallments,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @available_plans : Array(PaymentMethodDetailsCardInstallmentsPlan)?, @enabled : Bool, @plan : PaymentMethodOptionsCardInstallmentsPlan?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        available_plans == o.available_plans &&
        enabled == o.enabled &&
        plan == o.plan
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@available_plans, @enabled, @plan)
  end
end
