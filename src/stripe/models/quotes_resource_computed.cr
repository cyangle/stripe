#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./quotes_resource_recurring"
require "./quotes_resource_upfront"

module Stripe
  #
  class QuotesResourceComputed
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "recurring", type: Stripe::QuotesResourceRecurring?, default: nil, required: true, nullable: true, emit_null: true)]
    getter recurring : Stripe::QuotesResourceRecurring? = nil

    @[JSON::Field(key: "upfront", type: Stripe::QuotesResourceUpfront?, default: nil, required: true, nullable: false, emit_null: false)]
    getter upfront : Stripe::QuotesResourceUpfront? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @recurring : Stripe::QuotesResourceRecurring? = nil,
      @upfront : Stripe::QuotesResourceUpfront? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_recurring = @recurring).nil?
        invalid_properties.concat(_recurring.list_invalid_properties_for("recurring")) if _recurring.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"upfront\" is required and cannot be null") if @upfront.nil?

      unless (_upfront = @upfront).nil?
        invalid_properties.concat(_upfront.list_invalid_properties_for("upfront")) if _upfront.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_recurring = @recurring).nil?
        return false if _recurring.is_a?(OpenApi::Validatable) && !_recurring.valid?
      end

      return false if @upfront.nil?
      unless (_upfront = @upfront).nil?
        return false if _upfront.is_a?(OpenApi::Validatable) && !_upfront.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recurring Object to be assigned
    def recurring=(new_value : Stripe::QuotesResourceRecurring?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @recurring = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] upfront Object to be assigned
    def upfront=(new_value : Stripe::QuotesResourceUpfront?)
      raise ArgumentError.new("\"upfront\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @upfront = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@recurring, @upfront)
  end
end
