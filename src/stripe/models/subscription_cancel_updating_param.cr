#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class SubscriptionCancelUpdatingParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "cancellation_reason", type: Stripe::SubscriptionCancellationReasonUpdatingParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cancellation_reason : Stripe::SubscriptionCancellationReasonUpdatingParam? = nil

    @[JSON::Field(key: "enabled", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter enabled : Bool? = nil

    @[JSON::Field(key: "mode", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mode : String? = nil

    ENUM_VALIDATOR_FOR_MODE = EnumValidator.new("mode", "String", ["at_period_end", "immediately"])

    @[JSON::Field(key: "proration_behavior", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter proration_behavior : String? = nil

    ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR = EnumValidator.new("proration_behavior", "String", ["always_invoice", "create_prorations", "none"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @cancellation_reason : Stripe::SubscriptionCancellationReasonUpdatingParam? = nil,
      @enabled : Bool? = nil,
      @mode : String? = nil,
      @proration_behavior : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _cancellation_reason = @cancellation_reason
        if _cancellation_reason.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_cancellation_reason.list_invalid_properties_for("cancellation_reason"))
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_MODE.error_message) unless ENUM_VALIDATOR_FOR_MODE.valid?(@mode)

      invalid_properties.push(ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _cancellation_reason = @cancellation_reason
        if _cancellation_reason.is_a?(OpenApi::Validatable)
          return false unless _cancellation_reason.valid?
        end
      end

      return false unless ENUM_VALIDATOR_FOR_MODE.valid?(@mode)
      return false unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_reason Object to be assigned
    def cancellation_reason=(cancellation_reason : Stripe::SubscriptionCancellationReasonUpdatingParam?)
      if cancellation_reason.nil?
        return @cancellation_reason = nil
      end
      _cancellation_reason = cancellation_reason.not_nil!
      if _cancellation_reason.is_a?(OpenApi::Validatable)
        _cancellation_reason.validate
      end
      @cancellation_reason = _cancellation_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enabled Object to be assigned
    def enabled=(enabled : Bool?)
      if enabled.nil?
        return @enabled = nil
      end
      _enabled = enabled.not_nil!
      @enabled = _enabled
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(mode : String?)
      if mode.nil?
        return @mode = nil
      end
      _mode = mode.not_nil!
      ENUM_VALIDATOR_FOR_MODE.valid!(_mode)
      @mode = _mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_behavior Object to be assigned
    def proration_behavior=(proration_behavior : String?)
      if proration_behavior.nil?
        return @proration_behavior = nil
      end
      _proration_behavior = proration_behavior.not_nil!
      ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid!(_proration_behavior)
      @proration_behavior = _proration_behavior
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@cancellation_reason, @enabled, @mode, @proration_behavior)
  end
end
