#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Information related to the browsing session of the user who initiated the payment.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ReviewSession
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The browser used in this browser session (e.g., `Chrome`).
    @[JSON::Field(key: "browser", type: String, presence: true, ignore_serialize: browser.nil? && !browser_present?)]
    getter browser : String

    @[JSON::Field(ignore: true)]
    property? browser_present : Bool = false

    # Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
    @[JSON::Field(key: "device", type: String, presence: true, ignore_serialize: device.nil? && !device_present?)]
    getter device : String

    @[JSON::Field(ignore: true)]
    property? device_present : Bool = false

    # The platform for the browser session (e.g., `Macintosh`).
    @[JSON::Field(key: "platform", type: String, presence: true, ignore_serialize: platform.nil? && !platform_present?)]
    getter platform : String

    @[JSON::Field(ignore: true)]
    property? platform_present : Bool = false

    # The version for the browser session (e.g., `61.0.3163.100`).
    @[JSON::Field(key: "version", type: String, presence: true, ignore_serialize: version.nil? && !version_present?)]
    getter version : String

    @[JSON::Field(ignore: true)]
    property? version_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::RadarReviewResourceSession,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @browser : String?, @device : String?, @platform : String?, @version : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @browser.to_s.size > 5000
        invalid_properties.push("invalid value for \"browser\", the character length must be smaller than or equal to 5000.")
      end

      if @device.to_s.size > 5000
        invalid_properties.push("invalid value for \"device\", the character length must be smaller than or equal to 5000.")
      end

      if @platform.to_s.size > 5000
        invalid_properties.push("invalid value for \"platform\", the character length must be smaller than or equal to 5000.")
      end

      if @version.to_s.size > 5000
        invalid_properties.push("invalid value for \"version\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @browser.to_s.size > 5000
      return false if @device.to_s.size > 5000
      return false if @platform.to_s.size > 5000
      return false if @version.to_s.size > 5000
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] browser Value to be assigned
    def browser=(browser)
      if browser.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"browser\", the character length must be smaller than or equal to 5000.")
      end

      @browser = browser
    end

    # Custom attribute writer method with validation
    # @param [Object] device Value to be assigned
    def device=(device)
      if device.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"device\", the character length must be smaller than or equal to 5000.")
      end

      @device = device
    end

    # Custom attribute writer method with validation
    # @param [Object] platform Value to be assigned
    def platform=(platform)
      if platform.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"platform\", the character length must be smaller than or equal to 5000.")
      end

      @platform = platform
    end

    # Custom attribute writer method with validation
    # @param [Object] version Value to be assigned
    def version=(version)
      if version.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"version\", the character length must be smaller than or equal to 5000.")
      end

      @version = version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        browser == o.browser &&
        device == o.device &&
        platform == o.platform &&
        version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@browser, @device, @platform, @version)
  end
end
