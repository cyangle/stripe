#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Settings that restrict the redemption of the promotion code.
  class RestrictionsParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "currency_options", type: Hash(String, Stripe::RestrictionsParamsCurrencyOptionsValue)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency_options : Hash(String, Stripe::RestrictionsParamsCurrencyOptionsValue)? = nil

    @[JSON::Field(key: "first_time_transaction", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter first_time_transaction : Bool? = nil

    @[JSON::Field(key: "minimum_amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter minimum_amount : Int64? = nil

    @[JSON::Field(key: "minimum_amount_currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter minimum_amount_currency : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @currency_options : Hash(String, Stripe::RestrictionsParamsCurrencyOptionsValue)? = nil,
      @first_time_transaction : Bool? = nil,
      @minimum_amount : Int64? = nil,
      @minimum_amount_currency : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _currency_options = @currency_options
        if _currency_options.is_a?(Hash)
          _currency_options.each do |_key, value|
            if value.is_a?(OpenApi::Validatable)
              invalid_properties.concat(value.list_invalid_properties_for("currency_options"))
            end
          end
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _currency_options = @currency_options
        if _currency_options.is_a?(Hash)
          _currency_options.each do |_key, value|
            if value.is_a?(OpenApi::Validatable)
              return false unless value.valid?
            end
          end
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency_options Object to be assigned
    def currency_options=(currency_options : Hash(String, Stripe::RestrictionsParamsCurrencyOptionsValue)?)
      if currency_options.nil?
        return @currency_options = nil
      end
      _currency_options = currency_options.not_nil!
      if _currency_options.is_a?(Hash)
        _currency_options.each do |_key, value|
          if value.is_a?(OpenApi::Validatable)
            value.validate
          end
        end
      end
      @currency_options = _currency_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_time_transaction Object to be assigned
    def first_time_transaction=(first_time_transaction : Bool?)
      if first_time_transaction.nil?
        return @first_time_transaction = nil
      end
      _first_time_transaction = first_time_transaction.not_nil!
      @first_time_transaction = _first_time_transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minimum_amount Object to be assigned
    def minimum_amount=(minimum_amount : Int64?)
      if minimum_amount.nil?
        return @minimum_amount = nil
      end
      _minimum_amount = minimum_amount.not_nil!
      @minimum_amount = _minimum_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minimum_amount_currency Object to be assigned
    def minimum_amount_currency=(minimum_amount_currency : String?)
      if minimum_amount_currency.nil?
        return @minimum_amount_currency = nil
      end
      _minimum_amount_currency = minimum_amount_currency.not_nil!
      @minimum_amount_currency = _minimum_amount_currency
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@currency_options, @first_time_transaction, @minimum_amount, @minimum_amount_currency)
  end
end
