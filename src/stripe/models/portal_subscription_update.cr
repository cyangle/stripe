#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PortalSubscriptionUpdate
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable.
    @[JSON::Field(key: "default_allowed_updates", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter default_allowed_updates : Array(String)? = nil

    ENUM_VALIDATOR_FOR_DEFAULT_ALLOWED_UPDATES = OpenApi::EnumValidator.new("default_allowed_updates", "Array(String)", ["price", "promotion_code", "quantity"])

    # Whether the feature is enabled.
    @[JSON::Field(key: "enabled", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter enabled : Bool? = nil

    # Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`.
    @[JSON::Field(key: "proration_behavior", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter proration_behavior : String? = nil

    ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR = OpenApi::EnumValidator.new("proration_behavior", "String", ["always_invoice", "create_prorations", "none"])

    # Optional properties

    # The list of products that support subscription updates.
    @[JSON::Field(key: "products", type: Array(Stripe::PortalSubscriptionUpdateProduct)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: products.nil? && !products_present?)]
    getter products : Array(Stripe::PortalSubscriptionUpdateProduct)? = nil

    @[JSON::Field(ignore: true)]
    property? products_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @default_allowed_updates : Array(String)? = nil,
      @enabled : Bool? = nil,
      @proration_behavior : String? = nil,
      # Optional properties
      @products : Array(Stripe::PortalSubscriptionUpdateProduct)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_DEFAULT_ALLOWED_UPDATES.error_message) unless ENUM_VALIDATOR_FOR_DEFAULT_ALLOWED_UPDATES.all_valid?(@default_allowed_updates, false)
      invalid_properties.push("\"enabled\" is required and cannot be null") if @enabled.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior, false)
      if _products = @products
        invalid_properties.concat(OpenApi::ArrayValidator.list_invalid_properties_for(key: "products", array: _products)) if _products.is_a?(Array)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false unless ENUM_VALIDATOR_FOR_DEFAULT_ALLOWED_UPDATES.all_valid?(@default_allowed_updates, false)
      return false if @enabled.nil?

      return false unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior, false)
      if _products = @products
        return false if _products.is_a?(Array) && !OpenApi::ArrayValidator.valid?(array: _products)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_allowed_updates Object to be assigned
    def default_allowed_updates=(default_allowed_updates : Array(String)?)
      if default_allowed_updates.nil?
        raise ArgumentError.new("\"default_allowed_updates\" is required and cannot be null")
      end
      _default_allowed_updates = default_allowed_updates.not_nil!
      ENUM_VALIDATOR_FOR_DEFAULT_ALLOWED_UPDATES.all_valid!(_default_allowed_updates)
      @default_allowed_updates = _default_allowed_updates
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enabled Object to be assigned
    def enabled=(enabled : Bool?)
      if enabled.nil?
        raise ArgumentError.new("\"enabled\" is required and cannot be null")
      end
      _enabled = enabled.not_nil!
      @enabled = _enabled
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_behavior Object to be assigned
    def proration_behavior=(proration_behavior : String?)
      if proration_behavior.nil?
        raise ArgumentError.new("\"proration_behavior\" is required and cannot be null")
      end
      _proration_behavior = proration_behavior.not_nil!
      ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid!(_proration_behavior)
      @proration_behavior = _proration_behavior
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] products Object to be assigned
    def products=(products : Array(Stripe::PortalSubscriptionUpdateProduct)?)
      if products.nil?
        return @products = nil
      end
      _products = products.not_nil!
      OpenApi::ArrayValidator.validate(array: _products) if _products.is_a?(Array)
      @products = _products
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@default_allowed_updates, @enabled, @proration_behavior, @products, @products_present)
  end
end
