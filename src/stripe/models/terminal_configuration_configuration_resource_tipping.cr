#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class TerminalConfigurationConfigurationResourceTipping
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "aud", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter aud : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "cad", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cad : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "chf", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter chf : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "czk", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter czk : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "dkk", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter dkk : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "eur", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eur : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "gbp", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter gbp : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "hkd", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter hkd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "myr", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter myr : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "nok", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter nok : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "nzd", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter nzd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "sek", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sek : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "sgd", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sgd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    @[JSON::Field(key: "usd", type: Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter usd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @aud : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @cad : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @chf : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @czk : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @dkk : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @eur : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @gbp : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @hkd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @myr : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @nok : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @nzd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @sek : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @sgd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil,
      @usd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model aud : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model cad : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model chf : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model czk : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model dkk : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model eur : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model gbp : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model hkd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model myr : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model nok : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model nzd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model sek : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model sgd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?
      # This is a model usd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aud Object to be assigned
    def aud=(aud : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if aud.nil?
        return @aud = nil
      end
      @aud = aud
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cad Object to be assigned
    def cad=(cad : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if cad.nil?
        return @cad = nil
      end
      @cad = cad
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] chf Object to be assigned
    def chf=(chf : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if chf.nil?
        return @chf = nil
      end
      @chf = chf
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] czk Object to be assigned
    def czk=(czk : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if czk.nil?
        return @czk = nil
      end
      @czk = czk
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dkk Object to be assigned
    def dkk=(dkk : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if dkk.nil?
        return @dkk = nil
      end
      @dkk = dkk
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eur Object to be assigned
    def eur=(eur : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if eur.nil?
        return @eur = nil
      end
      @eur = eur
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gbp Object to be assigned
    def gbp=(gbp : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if gbp.nil?
        return @gbp = nil
      end
      @gbp = gbp
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hkd Object to be assigned
    def hkd=(hkd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if hkd.nil?
        return @hkd = nil
      end
      @hkd = hkd
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] myr Object to be assigned
    def myr=(myr : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if myr.nil?
        return @myr = nil
      end
      @myr = myr
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nok Object to be assigned
    def nok=(nok : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if nok.nil?
        return @nok = nil
      end
      @nok = nok
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nzd Object to be assigned
    def nzd=(nzd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if nzd.nil?
        return @nzd = nil
      end
      @nzd = nzd
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sek Object to be assigned
    def sek=(sek : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if sek.nil?
        return @sek = nil
      end
      @sek = sek
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sgd Object to be assigned
    def sgd=(sgd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if sgd.nil?
        return @sgd = nil
      end
      @sgd = sgd
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usd Object to be assigned
    def usd=(usd : Stripe::TerminalConfigurationConfigurationResourceCurrencySpecificConfig?)
      if usd.nil?
        return @usd = nil
      end
      @usd = usd
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@aud, @cad, @chf, @czk, @dkk, @eur, @gbp, @hkd, @myr, @nok, @nzd, @sek, @sgd, @usd)
  end
end
