#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class CreditNoteLineItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # The integer amount in %s representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # The integer amount in %s representing the discount being credited for this line item.
    @[JSON::Field(key: "discount_amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter discount_amount : Int64? = nil

    # The amount of discount calculated per discount for this line item
    @[JSON::Field(key: "discount_amounts", type: Array(Stripe::DiscountsResourceDiscountAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["credit_note_line_item"])

    # The amount of tax calculated per tax rate for this line item
    @[JSON::Field(key: "tax_amounts", type: Array(Stripe::CreditNoteTaxAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_amounts : Array(Stripe::CreditNoteTaxAmount)? = nil

    # The tax rates which apply to the line item.
    @[JSON::Field(key: "tax_rates", type: Array(Stripe::TaxRate)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_rates : Array(Stripe::TaxRate)? = nil

    # The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["custom_line_item", "invoice_line_item"])

    # Optional properties

    # The integer amount in %s representing the amount being credited for this line item, excluding all tax and discounts.
    @[JSON::Field(key: "amount_excluding_tax", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount_excluding_tax.nil? && !amount_excluding_tax_present?)]
    getter amount_excluding_tax : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_excluding_tax_present : Bool = false

    # Description of the item being credited.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # ID of the invoice line item being credited
    @[JSON::Field(key: "invoice_line_item", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_line_item : String? = nil

    # The number of units of product being credited.
    @[JSON::Field(key: "quantity", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    getter quantity : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    # The cost of each unit of product being credited.
    @[JSON::Field(key: "unit_amount", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unit_amount.nil? && !unit_amount_present?)]
    getter unit_amount : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? unit_amount_present : Bool = false

    # Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    @[JSON::Field(key: "unit_amount_decimal", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unit_amount_decimal.nil? && !unit_amount_decimal_present?)]
    getter unit_amount_decimal : String? = nil

    @[JSON::Field(ignore: true)]
    property? unit_amount_decimal_present : Bool = false

    # The amount in %s representing the unit amount being credited for this line item, excluding all tax and discounts.
    @[JSON::Field(key: "unit_amount_excluding_tax", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unit_amount_excluding_tax.nil? && !unit_amount_excluding_tax_present?)]
    getter unit_amount_excluding_tax : String? = nil

    @[JSON::Field(ignore: true)]
    property? unit_amount_excluding_tax_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @discount_amount : Int64? = nil,
      @discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @tax_amounts : Array(Stripe::CreditNoteTaxAmount)? = nil,
      @tax_rates : Array(Stripe::TaxRate)? = nil,
      @_type : String? = nil,
      # Optional properties
      @amount_excluding_tax : Int64? = nil,
      @description : String? = nil,
      @invoice_line_item : String? = nil,
      @quantity : Int64? = nil,
      @unit_amount : Int64? = nil,
      @unit_amount_decimal : String? = nil,
      @unit_amount_excluding_tax : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?
      invalid_properties.push("\"discount_amount\" is required and cannot be null") if @discount_amount.nil?
      invalid_properties.push("\"discount_amounts\" is required and cannot be null") if @discount_amounts.nil?
      # Container discount_amounts array has values of Stripe::DiscountsResourceDiscountAmount
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"tax_amounts\" is required and cannot be null") if @tax_amounts.nil?
      # Container tax_amounts array has values of Stripe::CreditNoteTaxAmount
      invalid_properties.push("\"tax_rates\" is required and cannot be null") if @tax_rates.nil?
      # Container tax_rates array has values of Stripe::TaxRate

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _invoice_line_item = @invoice_line_item
        if _invoice_line_item.to_s.size > 5000
          invalid_properties.push("invalid value for \"invoice_line_item\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @amount.nil?
      return false if @discount_amount.nil?
      return false if @discount_amounts.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @tax_amounts.nil?
      return false if @tax_rates.nil?
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      if _invoice_line_item = @invoice_line_item
        return false if _invoice_line_item.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        raise ArgumentError.new("\"amount\" is required and cannot be null")
      end
      @amount = amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount_amount Object to be assigned
    def discount_amount=(discount_amount : Int64?)
      if discount_amount.nil?
        raise ArgumentError.new("\"discount_amount\" is required and cannot be null")
      end
      @discount_amount = discount_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount_amounts Object to be assigned
    def discount_amounts=(discount_amounts : Array(Stripe::DiscountsResourceDiscountAmount)?)
      if discount_amounts.nil?
        raise ArgumentError.new("\"discount_amounts\" is required and cannot be null")
      end
      @discount_amounts = discount_amounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_amounts Object to be assigned
    def tax_amounts=(tax_amounts : Array(Stripe::CreditNoteTaxAmount)?)
      if tax_amounts.nil?
        raise ArgumentError.new("\"tax_amounts\" is required and cannot be null")
      end
      @tax_amounts = tax_amounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_rates Object to be assigned
    def tax_rates=(tax_rates : Array(Stripe::TaxRate)?)
      if tax_rates.nil?
        raise ArgumentError.new("\"tax_rates\" is required and cannot be null")
      end
      @tax_rates = tax_rates
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = _type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_excluding_tax Object to be assigned
    def amount_excluding_tax=(amount_excluding_tax : Int64?)
      if amount_excluding_tax.nil?
        return @amount_excluding_tax = nil
      end
      @amount_excluding_tax = amount_excluding_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_line_item Object to be assigned
    def invoice_line_item=(invoice_line_item : String?)
      if invoice_line_item.nil?
        return @invoice_line_item = nil
      end
      _invoice_line_item = invoice_line_item.not_nil!
      if _invoice_line_item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice_line_item\", the character length must be smaller than or equal to 5000.")
      end

      @invoice_line_item = invoice_line_item
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(quantity : Int64?)
      if quantity.nil?
        return @quantity = nil
      end
      @quantity = quantity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount Object to be assigned
    def unit_amount=(unit_amount : Int64?)
      if unit_amount.nil?
        return @unit_amount = nil
      end
      @unit_amount = unit_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount_decimal Object to be assigned
    def unit_amount_decimal=(unit_amount_decimal : String?)
      if unit_amount_decimal.nil?
        return @unit_amount_decimal = nil
      end
      @unit_amount_decimal = unit_amount_decimal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_amount_excluding_tax Object to be assigned
    def unit_amount_excluding_tax=(unit_amount_excluding_tax : String?)
      if unit_amount_excluding_tax.nil?
        return @unit_amount_excluding_tax = nil
      end
      @unit_amount_excluding_tax = unit_amount_excluding_tax
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @discount_amount, @discount_amounts, @id, @livemode, @object, @tax_amounts, @tax_rates, @_type, @amount_excluding_tax, @amount_excluding_tax_present, @description, @description_present, @invoice_line_item, @quantity, @quantity_present, @unit_amount, @unit_amount_present, @unit_amount_decimal, @unit_amount_decimal_present, @unit_amount_excluding_tax, @unit_amount_excluding_tax_present)
  end
end
