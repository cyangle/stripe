#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CreditNoteLineItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The integer amount in %s representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Description of the item being credited.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The integer amount in %s representing the discount being credited for this line item.
    @[JSON::Field(key: "discount_amount", type: Int64)]
    property discount_amount : Int64

    # The amount of discount calculated per discount for this line item
    @[JSON::Field(key: "discount_amounts", type: Array(DiscountsResourceDiscountAmount))]
    property discount_amounts : Array(DiscountsResourceDiscountAmount)

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["credit_note_line_item"])

    # The number of units of product being credited.
    @[JSON::Field(key: "quantity", type: Int64?, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    property quantity : Int64?

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    # The amount of tax calculated per tax rate for this line item
    @[JSON::Field(key: "tax_amounts", type: Array(CreditNoteTaxAmount))]
    property tax_amounts : Array(CreditNoteTaxAmount)

    # The tax rates which apply to the line item.
    @[JSON::Field(key: "tax_rates", type: Array(TaxRate))]
    property tax_rates : Array(TaxRate)

    # The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
    @[JSON::Field(key: "type", type: String)]
    getter _type : String

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["custom_line_item", "invoice_line_item"])

    # The cost of each unit of product being credited.
    @[JSON::Field(key: "unit_amount", type: Int64?, presence: true, ignore_serialize: unit_amount.nil? && !unit_amount_present?)]
    property unit_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? unit_amount_present : Bool = false

    # Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    @[JSON::Field(key: "unit_amount_decimal", type: String?, presence: true, ignore_serialize: unit_amount_decimal.nil? && !unit_amount_decimal_present?)]
    property unit_amount_decimal : String?

    @[JSON::Field(ignore: true)]
    property? unit_amount_decimal_present : Bool = false

    # Optional properties
    # ID of the invoice line item being credited
    @[JSON::Field(key: "invoice_line_item", type: String?, presence: true, ignore_serialize: invoice_line_item.nil? && !invoice_line_item_present?)]
    getter invoice_line_item : String?

    @[JSON::Field(ignore: true)]
    property? invoice_line_item_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @description : String?, @discount_amount : Int64, @discount_amounts : Array(DiscountsResourceDiscountAmount), @id : String, @livemode : Bool, @object : String, @quantity : Int64?, @tax_amounts : Array(CreditNoteTaxAmount), @tax_rates : Array(TaxRate), @_type : String, @unit_amount : Int64?, @unit_amount_decimal : String?, @invoice_line_item : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@invoice_line_item.nil? && @invoice_line_item.to_s.size > 5000
        invalid_properties.push("invalid value for \"invoice_line_item\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @description.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false if !@invoice_line_item.nil? && @invoice_line_item.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_line_item Value to be assigned
    def invoice_line_item=(invoice_line_item)
      if !invoice_line_item.nil? && invoice_line_item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice_line_item\", the character length must be smaller than or equal to 5000.")
      end

      @invoice_line_item = invoice_line_item
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      ENUM_VALIDATOR_FOR__TYPE.valid!(_type, false)
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        description == o.description &&
        discount_amount == o.discount_amount &&
        discount_amounts == o.discount_amounts &&
        id == o.id &&
        invoice_line_item == o.invoice_line_item &&
        livemode == o.livemode &&
        object == o.object &&
        quantity == o.quantity &&
        tax_amounts == o.tax_amounts &&
        tax_rates == o.tax_rates &&
        _type == o._type &&
        unit_amount == o.unit_amount &&
        unit_amount_decimal == o.unit_amount_decimal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amount, @description, @discount_amount, @discount_amounts, @id, @invoice_line_item, @livemode, @object, @quantity, @tax_amounts, @tax_rates, @_type, @unit_amount, @unit_amount_decimal)
  end
end
