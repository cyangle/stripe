#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class FeatureAccess
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "card_issuing", type: Stripe::Access?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_issuing : Stripe::Access? = nil

    @[JSON::Field(key: "deposit_insurance", type: Stripe::Access?, default: nil, required: false, nullable: false, emit_null: false)]
    getter deposit_insurance : Stripe::Access? = nil

    @[JSON::Field(key: "financial_addresses", type: Stripe::FinancialAddresses?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_addresses : Stripe::FinancialAddresses? = nil

    @[JSON::Field(key: "inbound_transfers", type: Stripe::InboundTransfers?, default: nil, required: false, nullable: false, emit_null: false)]
    getter inbound_transfers : Stripe::InboundTransfers? = nil

    @[JSON::Field(key: "intra_stripe_flows", type: Stripe::Access?, default: nil, required: false, nullable: false, emit_null: false)]
    getter intra_stripe_flows : Stripe::Access? = nil

    @[JSON::Field(key: "outbound_payments", type: Stripe::OutboundPayments?, default: nil, required: false, nullable: false, emit_null: false)]
    getter outbound_payments : Stripe::OutboundPayments? = nil

    @[JSON::Field(key: "outbound_transfers", type: Stripe::OutboundTransfers?, default: nil, required: false, nullable: false, emit_null: false)]
    getter outbound_transfers : Stripe::OutboundTransfers? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @card_issuing : Stripe::Access? = nil,
      @deposit_insurance : Stripe::Access? = nil,
      @financial_addresses : Stripe::FinancialAddresses? = nil,
      @inbound_transfers : Stripe::InboundTransfers? = nil,
      @intra_stripe_flows : Stripe::Access? = nil,
      @outbound_payments : Stripe::OutboundPayments? = nil,
      @outbound_transfers : Stripe::OutboundTransfers? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_card_issuing = @card_issuing).nil?
        invalid_properties.concat(_card_issuing.list_invalid_properties_for("card_issuing")) if _card_issuing.is_a?(OpenApi::Validatable)
      end
      unless (_deposit_insurance = @deposit_insurance).nil?
        invalid_properties.concat(_deposit_insurance.list_invalid_properties_for("deposit_insurance")) if _deposit_insurance.is_a?(OpenApi::Validatable)
      end
      unless (_financial_addresses = @financial_addresses).nil?
        invalid_properties.concat(_financial_addresses.list_invalid_properties_for("financial_addresses")) if _financial_addresses.is_a?(OpenApi::Validatable)
      end
      unless (_inbound_transfers = @inbound_transfers).nil?
        invalid_properties.concat(_inbound_transfers.list_invalid_properties_for("inbound_transfers")) if _inbound_transfers.is_a?(OpenApi::Validatable)
      end
      unless (_intra_stripe_flows = @intra_stripe_flows).nil?
        invalid_properties.concat(_intra_stripe_flows.list_invalid_properties_for("intra_stripe_flows")) if _intra_stripe_flows.is_a?(OpenApi::Validatable)
      end
      unless (_outbound_payments = @outbound_payments).nil?
        invalid_properties.concat(_outbound_payments.list_invalid_properties_for("outbound_payments")) if _outbound_payments.is_a?(OpenApi::Validatable)
      end
      unless (_outbound_transfers = @outbound_transfers).nil?
        invalid_properties.concat(_outbound_transfers.list_invalid_properties_for("outbound_transfers")) if _outbound_transfers.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_card_issuing = @card_issuing).nil?
        return false if _card_issuing.is_a?(OpenApi::Validatable) && !_card_issuing.valid?
      end

      unless (_deposit_insurance = @deposit_insurance).nil?
        return false if _deposit_insurance.is_a?(OpenApi::Validatable) && !_deposit_insurance.valid?
      end

      unless (_financial_addresses = @financial_addresses).nil?
        return false if _financial_addresses.is_a?(OpenApi::Validatable) && !_financial_addresses.valid?
      end

      unless (_inbound_transfers = @inbound_transfers).nil?
        return false if _inbound_transfers.is_a?(OpenApi::Validatable) && !_inbound_transfers.valid?
      end

      unless (_intra_stripe_flows = @intra_stripe_flows).nil?
        return false if _intra_stripe_flows.is_a?(OpenApi::Validatable) && !_intra_stripe_flows.valid?
      end

      unless (_outbound_payments = @outbound_payments).nil?
        return false if _outbound_payments.is_a?(OpenApi::Validatable) && !_outbound_payments.valid?
      end

      unless (_outbound_transfers = @outbound_transfers).nil?
        return false if _outbound_transfers.is_a?(OpenApi::Validatable) && !_outbound_transfers.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_issuing Object to be assigned
    def card_issuing=(new_value : Stripe::Access?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_issuing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deposit_insurance Object to be assigned
    def deposit_insurance=(new_value : Stripe::Access?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @deposit_insurance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_addresses Object to be assigned
    def financial_addresses=(new_value : Stripe::FinancialAddresses?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @financial_addresses = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inbound_transfers Object to be assigned
    def inbound_transfers=(new_value : Stripe::InboundTransfers?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @inbound_transfers = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intra_stripe_flows Object to be assigned
    def intra_stripe_flows=(new_value : Stripe::Access?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @intra_stripe_flows = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outbound_payments Object to be assigned
    def outbound_payments=(new_value : Stripe::OutboundPayments?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @outbound_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outbound_transfers Object to be assigned
    def outbound_transfers=(new_value : Stripe::OutboundTransfers?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @outbound_transfers = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@card_issuing, @deposit_insurance, @financial_addresses, @inbound_transfers, @intra_stripe_flows, @outbound_payments, @outbound_transfers)
  end
end
