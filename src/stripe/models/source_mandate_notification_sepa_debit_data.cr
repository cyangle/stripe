#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SourceMandateNotificationSepaDebitData
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # SEPA creditor ID.
    @[JSON::Field(key: "creditor_identifier", type: String?, presence: true, ignore_serialize: creditor_identifier.nil? && !creditor_identifier_present?)]
    getter creditor_identifier : String?

    @[JSON::Field(ignore: true)]
    property? creditor_identifier_present : Bool = false

    # Last 4 digits of the account number associated with the debit.
    @[JSON::Field(key: "last4", type: String?, presence: true, ignore_serialize: last4.nil? && !last4_present?)]
    getter last4 : String?

    @[JSON::Field(ignore: true)]
    property? last4_present : Bool = false

    # Mandate reference associated with the debit.
    @[JSON::Field(key: "mandate_reference", type: String?, presence: true, ignore_serialize: mandate_reference.nil? && !mandate_reference_present?)]
    getter mandate_reference : String?

    @[JSON::Field(ignore: true)]
    property? mandate_reference_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @creditor_identifier : String? = nil,
      @last4 : String? = nil,
      @mandate_reference : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@creditor_identifier.nil? && @creditor_identifier.to_s.size > 5000
        invalid_properties.push("invalid value for \"creditor_identifier\", the character length must be smaller than or equal to 5000.")
      end

      if !@last4.nil? && @last4.to_s.size > 5000
        invalid_properties.push("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      if !@mandate_reference.nil? && @mandate_reference.to_s.size > 5000
        invalid_properties.push("invalid value for \"mandate_reference\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@creditor_identifier.nil? && @creditor_identifier.to_s.size > 5000
      return false if !@last4.nil? && @last4.to_s.size > 5000
      return false if !@mandate_reference.nil? && @mandate_reference.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] creditor_identifier Value to be assigned
    def creditor_identifier=(creditor_identifier : String?)
      if !creditor_identifier.nil? && creditor_identifier.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"creditor_identifier\", the character length must be smaller than or equal to 5000.")
      end

      @creditor_identifier = creditor_identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] last4 Value to be assigned
    def last4=(last4 : String?)
      if !last4.nil? && last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      @last4 = last4
    end

    # Custom attribute writer method with validation
    # @param [Object] mandate_reference Value to be assigned
    def mandate_reference=(mandate_reference : String?)
      if !mandate_reference.nil? && mandate_reference.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"mandate_reference\", the character length must be smaller than or equal to 5000.")
      end

      @mandate_reference = mandate_reference
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@creditor_identifier, @creditor_identifier_present, @last4, @last4_present, @mandate_reference, @mandate_reference_present)
  end
end
