#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Use InboundTransfers to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TreasuryInboundTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Amount (in cents) transferred.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Returns `true` if the InboundTransfer is able to be canceled.
    @[JSON::Field(key: "cancelable", type: Bool)]
    property cancelable : Bool

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # The FinancialAccount that received the funds.
    @[JSON::Field(key: "financial_account", type: String)]
    getter financial_account : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    @[JSON::Field(key: "linked_flows", type: InboundTransfersResourceTreasuryInboundTransferResourceLinkedFlows)]
    property linked_flows : InboundTransfersResourceTreasuryInboundTransferResourceLinkedFlows

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String))]
    property metadata : Hash(String, String)

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["treasury.inbound_transfer"])

    # The origin payment method to be debited for an InboundTransfer.
    @[JSON::Field(key: "origin_payment_method", type: String)]
    getter origin_payment_method : String

    # Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.
    @[JSON::Field(key: "statement_descriptor", type: String)]
    getter statement_descriptor : String

    # Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been \"confirmed\" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.
    @[JSON::Field(key: "status", type: String)]
    getter status : String

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["canceled", "failed", "processing", "succeeded"])

    @[JSON::Field(key: "status_transitions", type: InboundTransfersResourceInboundTransferResourceStatusTransitions)]
    property status_transitions : InboundTransfersResourceInboundTransferResourceStatusTransitions

    # Optional properties

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "failure_details", type: TreasuryInboundTransferFailureDetails?, presence: true, ignore_serialize: failure_details.nil? && !failure_details_present?)]
    property failure_details : TreasuryInboundTransferFailureDetails?

    @[JSON::Field(ignore: true)]
    property? failure_details_present : Bool = false

    # A hosted transaction receipt URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
    @[JSON::Field(key: "hosted_regulatory_receipt_url", type: String?, presence: true, ignore_serialize: hosted_regulatory_receipt_url.nil? && !hosted_regulatory_receipt_url_present?)]
    getter hosted_regulatory_receipt_url : String?

    @[JSON::Field(ignore: true)]
    property? hosted_regulatory_receipt_url_present : Bool = false

    @[JSON::Field(key: "origin_payment_method_details", type: TreasuryInboundTransferOriginPaymentMethodDetails?, presence: true, ignore_serialize: origin_payment_method_details.nil? && !origin_payment_method_details_present?)]
    property origin_payment_method_details : TreasuryInboundTransferOriginPaymentMethodDetails?

    @[JSON::Field(ignore: true)]
    property? origin_payment_method_details_present : Bool = false

    # Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.
    @[JSON::Field(key: "returned", type: Bool?, presence: true, ignore_serialize: returned.nil? && !returned_present?)]
    property returned : Bool?

    @[JSON::Field(ignore: true)]
    property? returned_present : Bool = false

    @[JSON::Field(key: "transaction", type: TreasuryCreditReversalTransaction?, presence: true, ignore_serialize: transaction.nil? && !transaction_present?)]
    property transaction : TreasuryCreditReversalTransaction?

    @[JSON::Field(ignore: true)]
    property? transaction_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64,
      @cancelable : Bool,
      @created : Int64,
      @currency : String,
      @financial_account : String,
      @id : String,
      @linked_flows : InboundTransfersResourceTreasuryInboundTransferResourceLinkedFlows,
      @livemode : Bool,
      @metadata : Hash(String, String),
      @object : String,
      @origin_payment_method : String,
      @statement_descriptor : String,
      @status : String,
      @status_transitions : InboundTransfersResourceInboundTransferResourceStatusTransitions,
      # Optional properties
      @description : String? = nil,
      @failure_details : TreasuryInboundTransferFailureDetails? = nil,
      @hosted_regulatory_receipt_url : String? = nil,
      @origin_payment_method_details : TreasuryInboundTransferOriginPaymentMethodDetails? = nil,
      @returned : Bool? = nil,
      @transaction : TreasuryCreditReversalTransaction? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @financial_account.to_s.size > 5000
        invalid_properties.push("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @origin_payment_method.to_s.size > 5000
        invalid_properties.push("invalid value for \"origin_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      if @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@hosted_regulatory_receipt_url.nil? && @hosted_regulatory_receipt_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"hosted_regulatory_receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @financial_account.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @origin_payment_method.to_s.size > 5000
      return false if @statement_descriptor.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status, false)
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if !@hosted_regulatory_receipt_url.nil? && @hosted_regulatory_receipt_url.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] financial_account Value to be assigned
    def financial_account=(financial_account : String)
      if financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\", the character length must be smaller than or equal to 5000.")
      end

      @financial_account = financial_account
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id : String)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] origin_payment_method Value to be assigned
    def origin_payment_method=(origin_payment_method : String)
      if origin_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"origin_payment_method\", the character length must be smaller than or equal to 5000.")
      end

      @origin_payment_method = origin_payment_method
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor : String)
      if statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status, false)
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description : String?)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] hosted_regulatory_receipt_url Value to be assigned
    def hosted_regulatory_receipt_url=(hosted_regulatory_receipt_url : String?)
      if !hosted_regulatory_receipt_url.nil? && hosted_regulatory_receipt_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"hosted_regulatory_receipt_url\", the character length must be smaller than or equal to 5000.")
      end

      @hosted_regulatory_receipt_url = hosted_regulatory_receipt_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @cancelable, @created, @currency, @financial_account, @id, @linked_flows, @livemode, @metadata, @object, @origin_payment_method, @statement_descriptor, @status, @status_transitions, @description, @description_present, @failure_details, @failure_details_present, @hosted_regulatory_receipt_url, @hosted_regulatory_receipt_url_present, @origin_payment_method_details, @origin_payment_method_details_present, @returned, @returned_present, @transaction, @transaction_present)
  end
end
