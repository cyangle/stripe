#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A VerificationSession guides you through the process of collecting and verifying the identities of your users. It contains details about the type of verification, such as what [verification check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for each verification in your system.  A VerificationSession transitions through [multiple statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through the verification flow. The VerificationSession contains the user's verified data after verification checks are complete.  Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
  class IdentityVerificationSession
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [identity.verification_session]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("identity.verification_session")

    @[JSON::Field(key: "options", type: Stripe::GelatoVerificationSessionOptions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter options : Stripe::GelatoVerificationSessionOptions? = nil

    # Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [canceled, processing, requires_input, verified]."
    VALID_VALUES_FOR_STATUS  = String.static_array("canceled", "processing", "requires_input", "verified")

    # The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [document, id_number]."
    VALID_VALUES_FOR__TYPE  = String.static_array("document", "id_number")

    # End of Required Properties

    # Optional Properties

    # The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: client_secret.nil? && !client_secret_present?)]
    getter client_secret : String? = nil
    MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    @[JSON::Field(ignore: true)]
    property? client_secret_present : Bool = false

    @[JSON::Field(key: "last_error", type: Stripe::IdentityVerificationSessionLastError?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last_error.nil? && !last_error_present?)]
    getter last_error : Stripe::IdentityVerificationSessionLastError? = nil

    @[JSON::Field(ignore: true)]
    property? last_error_present : Bool = false

    @[JSON::Field(key: "last_verification_report", type: Stripe::IdentityVerificationSessionLastVerificationReport?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last_verification_report.nil? && !last_verification_report_present?)]
    getter last_verification_report : Stripe::IdentityVerificationSessionLastVerificationReport? = nil

    @[JSON::Field(ignore: true)]
    property? last_verification_report_present : Bool = false

    @[JSON::Field(key: "redaction", type: Stripe::IdentityVerificationSessionRedaction?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: redaction.nil? && !redaction_present?)]
    getter redaction : Stripe::IdentityVerificationSessionRedaction? = nil

    @[JSON::Field(ignore: true)]
    property? redaction_present : Bool = false

    # The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
    @[JSON::Field(key: "url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: url.nil? && !url_present?)]
    getter url : String? = nil
    MAX_LENGTH_FOR_URL = 5000

    @[JSON::Field(ignore: true)]
    property? url_present : Bool = false

    @[JSON::Field(key: "verified_outputs", type: Stripe::IdentityVerificationSessionVerifiedOutputs?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: verified_outputs.nil? && !verified_outputs_present?)]
    getter verified_outputs : Stripe::IdentityVerificationSessionVerifiedOutputs? = nil

    @[JSON::Field(ignore: true)]
    property? verified_outputs_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @options : Stripe::GelatoVerificationSessionOptions? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @client_secret : String? = nil,
      @last_error : Stripe::IdentityVerificationSessionLastError? = nil,
      @last_verification_report : Stripe::IdentityVerificationSessionLastVerificationReport? = nil,
      @redaction : Stripe::IdentityVerificationSessionRedaction? = nil,
      @url : String? = nil,
      @verified_outputs : Stripe::IdentityVerificationSessionVerifiedOutputs? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"options\" is required and cannot be null") if @options.nil?

      unless (_options = @options).nil?
        invalid_properties.concat(_options.list_invalid_properties_for("options")) if _options.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      unless (_client_secret = @client_secret).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_secret", _client_secret.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_last_error = @last_error).nil?
        invalid_properties.concat(_last_error.list_invalid_properties_for("last_error")) if _last_error.is_a?(OpenApi::Validatable)
      end
      unless (_last_verification_report = @last_verification_report).nil?
        invalid_properties.concat(_last_verification_report.list_invalid_properties_for("last_verification_report")) if _last_verification_report.is_a?(OpenApi::Validatable)
      end
      unless (_redaction = @redaction).nil?
        invalid_properties.concat(_redaction.list_invalid_properties_for("redaction")) if _redaction.is_a?(OpenApi::Validatable)
      end
      unless (_url = @url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("url", _url.to_s.size, MAX_LENGTH_FOR_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_verified_outputs = @verified_outputs).nil?
        invalid_properties.concat(_verified_outputs.list_invalid_properties_for("verified_outputs")) if _verified_outputs.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @options.nil?
      unless (_options = @options).nil?
        return false if _options.is_a?(OpenApi::Validatable) && !_options.valid?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      unless (_client_secret = @client_secret).nil?
        return false if _client_secret.to_s.size > MAX_LENGTH_FOR_CLIENT_SECRET
      end

      unless (_last_error = @last_error).nil?
        return false if _last_error.is_a?(OpenApi::Validatable) && !_last_error.valid?
      end

      unless (_last_verification_report = @last_verification_report).nil?
        return false if _last_verification_report.is_a?(OpenApi::Validatable) && !_last_verification_report.valid?
      end

      unless (_redaction = @redaction).nil?
        return false if _redaction.is_a?(OpenApi::Validatable) && !_redaction.valid?
      end

      unless (_url = @url).nil?
        return false if _url.to_s.size > MAX_LENGTH_FOR_URL
      end

      unless (_verified_outputs = @verified_outputs).nil?
        return false if _verified_outputs.is_a?(OpenApi::Validatable) && !_verified_outputs.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        raise ArgumentError.new("\"metadata\" is required and cannot be null")
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] options Object to be assigned
    def options=(options : Stripe::GelatoVerificationSessionOptions?)
      if options.nil?
        raise ArgumentError.new("\"options\" is required and cannot be null")
      end
      _options = options.not_nil!
      _options.validate if _options.is_a?(OpenApi::Validatable)
      @options = _options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      OpenApi::EnumValidator.validate("status", _status, VALID_VALUES_FOR_STATUS)
      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      OpenApi::EnumValidator.validate("_type", __type, VALID_VALUES_FOR__TYPE)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_secret Object to be assigned
    def client_secret=(client_secret : String?)
      if client_secret.nil?
        return @client_secret = nil
      end
      _client_secret = client_secret.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("client_secret", _client_secret.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
      @client_secret = _client_secret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_error Object to be assigned
    def last_error=(last_error : Stripe::IdentityVerificationSessionLastError?)
      if last_error.nil?
        return @last_error = nil
      end
      _last_error = last_error.not_nil!
      _last_error.validate if _last_error.is_a?(OpenApi::Validatable)
      @last_error = _last_error
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_verification_report Object to be assigned
    def last_verification_report=(last_verification_report : Stripe::IdentityVerificationSessionLastVerificationReport?)
      if last_verification_report.nil?
        return @last_verification_report = nil
      end
      _last_verification_report = last_verification_report.not_nil!
      _last_verification_report.validate if _last_verification_report.is_a?(OpenApi::Validatable)
      @last_verification_report = _last_verification_report
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redaction Object to be assigned
    def redaction=(redaction : Stripe::IdentityVerificationSessionRedaction?)
      if redaction.nil?
        return @redaction = nil
      end
      _redaction = redaction.not_nil!
      _redaction.validate if _redaction.is_a?(OpenApi::Validatable)
      @redaction = _redaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(url : String?)
      if url.nil?
        return @url = nil
      end
      _url = url.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("url", _url.to_s.size, MAX_LENGTH_FOR_URL)
      @url = _url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verified_outputs Object to be assigned
    def verified_outputs=(verified_outputs : Stripe::IdentityVerificationSessionVerifiedOutputs?)
      if verified_outputs.nil?
        return @verified_outputs = nil
      end
      _verified_outputs = verified_outputs.not_nil!
      _verified_outputs.validate if _verified_outputs.is_a?(OpenApi::Validatable)
      @verified_outputs = _verified_outputs
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @id, @livemode, @metadata, @object, @options, @status, @_type, @client_secret, @client_secret_present, @last_error, @last_error_present, @last_verification_report, @last_verification_report_present, @redaction, @redaction_present, @url, @url_present, @verified_outputs, @verified_outputs_present)
  end
end
