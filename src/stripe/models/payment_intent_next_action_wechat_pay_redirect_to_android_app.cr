#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentIntentNextActionWechatPayRedirectToAndroidApp
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # app_id is the APP ID registered on WeChat open platform
    @[JSON::Field(key: "app_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter app_id : String? = nil
    MAX_LENGTH_FOR_APP_ID = 5000

    # nonce_str is a random string
    @[JSON::Field(key: "nonce_str", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter nonce_str : String? = nil
    MAX_LENGTH_FOR_NONCE_STR = 5000

    # package is static value
    @[JSON::Field(key: "package", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter package : String? = nil
    MAX_LENGTH_FOR_PACKAGE = 5000

    # an unique merchant ID assigned by WeChat Pay
    @[JSON::Field(key: "partner_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter partner_id : String? = nil
    MAX_LENGTH_FOR_PARTNER_ID = 5000

    # an unique trading ID assigned by WeChat Pay
    @[JSON::Field(key: "prepay_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter prepay_id : String? = nil
    MAX_LENGTH_FOR_PREPAY_ID = 5000

    # A signature
    @[JSON::Field(key: "sign", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter sign : String? = nil
    MAX_LENGTH_FOR_SIGN = 5000

    # Specifies the current time in epoch format
    @[JSON::Field(key: "timestamp", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter timestamp : String? = nil
    MAX_LENGTH_FOR_TIMESTAMP = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @app_id : String? = nil,
      @nonce_str : String? = nil,
      @package : String? = nil,
      @partner_id : String? = nil,
      @prepay_id : String? = nil,
      @sign : String? = nil,
      @timestamp : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"app_id\" is required and cannot be null") if @app_id.nil?

      unless (_app_id = @app_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("app_id", _app_id.to_s.size, MAX_LENGTH_FOR_APP_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"nonce_str\" is required and cannot be null") if @nonce_str.nil?

      unless (_nonce_str = @nonce_str).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("nonce_str", _nonce_str.to_s.size, MAX_LENGTH_FOR_NONCE_STR)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"package\" is required and cannot be null") if @package.nil?

      unless (_package = @package).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("package", _package.to_s.size, MAX_LENGTH_FOR_PACKAGE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"partner_id\" is required and cannot be null") if @partner_id.nil?

      unless (_partner_id = @partner_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("partner_id", _partner_id.to_s.size, MAX_LENGTH_FOR_PARTNER_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"prepay_id\" is required and cannot be null") if @prepay_id.nil?

      unless (_prepay_id = @prepay_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("prepay_id", _prepay_id.to_s.size, MAX_LENGTH_FOR_PREPAY_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"sign\" is required and cannot be null") if @sign.nil?

      unless (_sign = @sign).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("sign", _sign.to_s.size, MAX_LENGTH_FOR_SIGN)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"timestamp\" is required and cannot be null") if @timestamp.nil?

      unless (_timestamp = @timestamp).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("timestamp", _timestamp.to_s.size, MAX_LENGTH_FOR_TIMESTAMP)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @app_id.nil?
      unless (_app_id = @app_id).nil?
        return false if _app_id.to_s.size > MAX_LENGTH_FOR_APP_ID
      end

      return false if @nonce_str.nil?
      unless (_nonce_str = @nonce_str).nil?
        return false if _nonce_str.to_s.size > MAX_LENGTH_FOR_NONCE_STR
      end

      return false if @package.nil?
      unless (_package = @package).nil?
        return false if _package.to_s.size > MAX_LENGTH_FOR_PACKAGE
      end

      return false if @partner_id.nil?
      unless (_partner_id = @partner_id).nil?
        return false if _partner_id.to_s.size > MAX_LENGTH_FOR_PARTNER_ID
      end

      return false if @prepay_id.nil?
      unless (_prepay_id = @prepay_id).nil?
        return false if _prepay_id.to_s.size > MAX_LENGTH_FOR_PREPAY_ID
      end

      return false if @sign.nil?
      unless (_sign = @sign).nil?
        return false if _sign.to_s.size > MAX_LENGTH_FOR_SIGN
      end

      return false if @timestamp.nil?
      unless (_timestamp = @timestamp).nil?
        return false if _timestamp.to_s.size > MAX_LENGTH_FOR_TIMESTAMP
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] app_id Object to be assigned
    def app_id=(app_id : String?)
      if app_id.nil?
        raise ArgumentError.new("\"app_id\" is required and cannot be null")
      end
      _app_id = app_id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("app_id", _app_id.to_s.size, MAX_LENGTH_FOR_APP_ID)
      @app_id = _app_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nonce_str Object to be assigned
    def nonce_str=(nonce_str : String?)
      if nonce_str.nil?
        raise ArgumentError.new("\"nonce_str\" is required and cannot be null")
      end
      _nonce_str = nonce_str.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("nonce_str", _nonce_str.to_s.size, MAX_LENGTH_FOR_NONCE_STR)
      @nonce_str = _nonce_str
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] package Object to be assigned
    def package=(package : String?)
      if package.nil?
        raise ArgumentError.new("\"package\" is required and cannot be null")
      end
      _package = package.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("package", _package.to_s.size, MAX_LENGTH_FOR_PACKAGE)
      @package = _package
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] partner_id Object to be assigned
    def partner_id=(partner_id : String?)
      if partner_id.nil?
        raise ArgumentError.new("\"partner_id\" is required and cannot be null")
      end
      _partner_id = partner_id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("partner_id", _partner_id.to_s.size, MAX_LENGTH_FOR_PARTNER_ID)
      @partner_id = _partner_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prepay_id Object to be assigned
    def prepay_id=(prepay_id : String?)
      if prepay_id.nil?
        raise ArgumentError.new("\"prepay_id\" is required and cannot be null")
      end
      _prepay_id = prepay_id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("prepay_id", _prepay_id.to_s.size, MAX_LENGTH_FOR_PREPAY_ID)
      @prepay_id = _prepay_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sign Object to be assigned
    def sign=(sign : String?)
      if sign.nil?
        raise ArgumentError.new("\"sign\" is required and cannot be null")
      end
      _sign = sign.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("sign", _sign.to_s.size, MAX_LENGTH_FOR_SIGN)
      @sign = _sign
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] timestamp Object to be assigned
    def timestamp=(timestamp : String?)
      if timestamp.nil?
        raise ArgumentError.new("\"timestamp\" is required and cannot be null")
      end
      _timestamp = timestamp.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("timestamp", _timestamp.to_s.size, MAX_LENGTH_FOR_TIMESTAMP)
      @timestamp = _timestamp
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@app_id, @nonce_str, @package, @partner_id, @prepay_id, @sign, @timestamp)
  end
end
