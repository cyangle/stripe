#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class PaymentPagesCheckoutSessionCurrencyConversion
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Total of all items in source currency before discounts or taxes are applied.
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_subtotal : Int64? = nil

    # Total of all items in source currency after discounts and taxes are applied.
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_total : Int64? = nil

    # Exchange rate used to convert source currency amounts to customer currency amounts
    @[JSON::Field(key: "fx_rate", type: BigDecimal?, default: nil, required: true, nullable: false, emit_null: false)]
    getter fx_rate : BigDecimal? = nil

    # Creation currency of the CheckoutSession before localization
    @[JSON::Field(key: "source_currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter source_currency : String? = nil
    MAX_LENGTH_FOR_SOURCE_CURRENCY = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_subtotal : Int64? = nil,
      @amount_total : Int64? = nil,
      @fx_rate : BigDecimal? = nil,
      @source_currency : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount_subtotal\" is required and cannot be null") if @amount_subtotal.nil?

      invalid_properties.push("\"amount_total\" is required and cannot be null") if @amount_total.nil?

      invalid_properties.push("\"fx_rate\" is required and cannot be null") if @fx_rate.nil?

      invalid_properties.push("\"source_currency\" is required and cannot be null") if @source_currency.nil?

      unless (_source_currency = @source_currency).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("source_currency", _source_currency.to_s.size, MAX_LENGTH_FOR_SOURCE_CURRENCY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount_subtotal.nil?

      return false if @amount_total.nil?

      return false if @fx_rate.nil?

      return false if @source_currency.nil?
      unless (_source_currency = @source_currency).nil?
        return false if _source_currency.to_s.size > MAX_LENGTH_FOR_SOURCE_CURRENCY
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(new_value : Int64?)
      raise ArgumentError.new("\"amount_subtotal\" is required and cannot be null") if new_value.nil?

      @amount_subtotal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(new_value : Int64?)
      raise ArgumentError.new("\"amount_total\" is required and cannot be null") if new_value.nil?

      @amount_total = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fx_rate Object to be assigned
    def fx_rate=(new_value : BigDecimal?)
      raise ArgumentError.new("\"fx_rate\" is required and cannot be null") if new_value.nil?

      @fx_rate = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_currency Object to be assigned
    def source_currency=(new_value : String?)
      raise ArgumentError.new("\"source_currency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("source_currency", new_value.to_s.size, MAX_LENGTH_FOR_SOURCE_CURRENCY)
      end

      @source_currency = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_subtotal, @amount_total, @fx_rate, @source_currency)
  end
end
