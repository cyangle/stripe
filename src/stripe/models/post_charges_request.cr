#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostChargesRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    @[JSON::Field(key: "amount", type: Int64?, presence: true, ignore_serialize: amount.nil? && !amount_present?)]
    property amount : Int64?

    @[JSON::Field(ignore: true)]
    property? amount_present : Bool = false

    @[JSON::Field(key: "application_fee", type: Int64?, presence: true, ignore_serialize: application_fee.nil? && !application_fee_present?)]
    property application_fee : Int64?

    @[JSON::Field(ignore: true)]
    property? application_fee_present : Bool = false

    # A fee in cents (or local equivalent) that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees).
    @[JSON::Field(key: "application_fee_amount", type: Int64?, presence: true, ignore_serialize: application_fee_amount.nil? && !application_fee_amount_present?)]
    property application_fee_amount : Int64?

    @[JSON::Field(ignore: true)]
    property? application_fee_amount_present : Bool = false

    # Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire after a set number of days (7 by default). For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation.
    @[JSON::Field(key: "capture", type: Bool?, presence: true, ignore_serialize: capture.nil? && !capture_present?)]
    property capture : Bool?

    @[JSON::Field(ignore: true)]
    property? capture_present : Bool = false

    @[JSON::Field(key: "card", type: PostChargesRequestCard?, presence: true, ignore_serialize: card.nil? && !card_present?)]
    property card : PostChargesRequestCard?

    @[JSON::Field(ignore: true)]
    property? card_present : Bool = false

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    property currency : String?

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # The ID of an existing customer that will be charged in this request.
    @[JSON::Field(key: "customer", type: String?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "destination", type: PostChargesRequestDestination?, presence: true, ignore_serialize: destination.nil? && !destination_present?)]
    property destination : PostChargesRequestDestination?

    @[JSON::Field(ignore: true)]
    property? destination_present : Bool = false

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    @[JSON::Field(key: "metadata", type: PostAccountRequestMetadata?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : PostAccountRequestMetadata?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers#on-behalf-of).
    @[JSON::Field(key: "on_behalf_of", type: String?, presence: true, ignore_serialize: on_behalf_of.nil? && !on_behalf_of_present?)]
    getter on_behalf_of : String?

    @[JSON::Field(ignore: true)]
    property? on_behalf_of_present : Bool = false

    @[JSON::Field(key: "radar_options", type: RadarOptions?, presence: true, ignore_serialize: radar_options.nil? && !radar_options_present?)]
    property radar_options : RadarOptions?

    @[JSON::Field(ignore: true)]
    property? radar_options_present : Bool = false

    # The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    @[JSON::Field(key: "receipt_email", type: String?, presence: true, ignore_serialize: receipt_email.nil? && !receipt_email_present?)]
    property receipt_email : String?

    @[JSON::Field(ignore: true)]
    property? receipt_email_present : Bool = false

    @[JSON::Field(key: "shipping", type: OptionalFieldsShipping?, presence: true, ignore_serialize: shipping.nil? && !shipping_present?)]
    property shipping : OptionalFieldsShipping?

    @[JSON::Field(ignore: true)]
    property? shipping_present : Bool = false

    # A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer.
    @[JSON::Field(key: "source", type: String?, presence: true, ignore_serialize: source.nil? && !source_present?)]
    getter source : String?

    @[JSON::Field(ignore: true)]
    property? source_present : Bool = false

    # For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
    @[JSON::Field(key: "statement_descriptor", type: String?, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String?

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    @[JSON::Field(key: "statement_descriptor_suffix", type: String?, presence: true, ignore_serialize: statement_descriptor_suffix.nil? && !statement_descriptor_suffix_present?)]
    getter statement_descriptor_suffix : String?

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_suffix_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: TransferDataSpecs?, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    property transfer_data : TransferDataSpecs?

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/charges-transfers#transfer-options).
    @[JSON::Field(key: "transfer_group", type: String?, presence: true, ignore_serialize: transfer_group.nil? && !transfer_group_present?)]
    property transfer_group : String?

    @[JSON::Field(ignore: true)]
    property? transfer_group_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount : Int64? = nil,
      @application_fee : Int64? = nil,
      @application_fee_amount : Int64? = nil,
      @capture : Bool? = nil,
      @card : PostChargesRequestCard? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @description : String? = nil,
      @destination : PostChargesRequestDestination? = nil,
      @expand : Array(String)? = nil,
      @metadata : PostAccountRequestMetadata? = nil,
      @on_behalf_of : String? = nil,
      @radar_options : RadarOptions? = nil,
      @receipt_email : String? = nil,
      @shipping : OptionalFieldsShipping? = nil,
      @source : String? = nil,
      @statement_descriptor : String? = nil,
      @statement_descriptor_suffix : String? = nil,
      @transfer_data : TransferDataSpecs? = nil,
      @transfer_group : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@customer.nil? && @customer.to_s.size > 500
        invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 500.")
      end

      if !@description.nil? && @description.to_s.size > 40000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 40000.")
      end

      if !@on_behalf_of.nil? && @on_behalf_of.to_s.size > 5000
        invalid_properties.push("invalid value for \"on_behalf_of\", the character length must be smaller than or equal to 5000.")
      end

      if !@source.nil? && @source.to_s.size > 5000
        invalid_properties.push("invalid value for \"source\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.nil? && @statement_descriptor.to_s.size > 22
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 22.")
      end

      if !@statement_descriptor_suffix.nil? && @statement_descriptor_suffix.to_s.size > 22
        invalid_properties.push("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 22.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer.nil? && @customer.to_s.size > 500
      return false if !@description.nil? && @description.to_s.size > 40000
      return false if !@on_behalf_of.nil? && @on_behalf_of.to_s.size > 5000
      return false if !@source.nil? && @source.to_s.size > 5000
      return false if !@statement_descriptor.nil? && @statement_descriptor.to_s.size > 22
      return false if !@statement_descriptor_suffix.nil? && @statement_descriptor_suffix.to_s.size > 22

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer Value to be assigned
    def customer=(customer : String?)
      if !customer.nil? && customer.to_s.size > 500
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 500.")
      end

      @customer = customer
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description : String?)
      if !description.nil? && description.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 40000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] on_behalf_of Value to be assigned
    def on_behalf_of=(on_behalf_of : String?)
      if !on_behalf_of.nil? && on_behalf_of.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"on_behalf_of\", the character length must be smaller than or equal to 5000.")
      end

      @on_behalf_of = on_behalf_of
    end

    # Custom attribute writer method with validation
    # @param [Object] source Value to be assigned
    def source=(source : String?)
      if !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\", the character length must be smaller than or equal to 5000.")
      end

      @source = source
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 22.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor_suffix Value to be assigned
    def statement_descriptor_suffix=(statement_descriptor_suffix : String?)
      if !statement_descriptor_suffix.nil? && statement_descriptor_suffix.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 22.")
      end

      @statement_descriptor_suffix = statement_descriptor_suffix
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @amount_present, @application_fee, @application_fee_present, @application_fee_amount, @application_fee_amount_present, @capture, @capture_present, @card, @card_present2, @currency, @currency_present, @customer, @customer_present, @description, @description_present, @destination, @destination_present, @expand, @expand_present, @metadata, @metadata_present, @on_behalf_of, @on_behalf_of_present, @radar_options, @radar_options_present, @receipt_email, @receipt_email_present, @shipping, @shipping_present, @source, @source_present, @statement_descriptor, @statement_descriptor_present, @statement_descriptor_suffix, @statement_descriptor_suffix_present, @transfer_data, @transfer_data_present, @transfer_group, @transfer_group_present)
  end
end
