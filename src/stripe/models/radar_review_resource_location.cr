#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class RadarReviewResourceLocation
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The city where the payment originated.
    @[JSON::Field(key: "city", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: city.nil? && !city_present?)]
    getter city : String? = nil

    @[JSON::Field(ignore: true)]
    property? city_present : Bool = false

    # Two-letter ISO code representing the country where the payment originated.
    @[JSON::Field(key: "country", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String? = nil

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # The geographic latitude where the payment originated.
    @[JSON::Field(key: "latitude", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: latitude.nil? && !latitude_present?)]
    getter latitude : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? latitude_present : Bool = false

    # The geographic longitude where the payment originated.
    @[JSON::Field(key: "longitude", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: longitude.nil? && !longitude_present?)]
    getter longitude : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? longitude_present : Bool = false

    # The state/county/province/region where the payment originated.
    @[JSON::Field(key: "region", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: region.nil? && !region_present?)]
    getter region : String? = nil

    @[JSON::Field(ignore: true)]
    property? region_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @city : String? = nil,
      @country : String? = nil,
      @latitude : Float64? = nil,
      @longitude : Float64? = nil,
      @region : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _city = @city
        if _city.to_s.size > 5000
          invalid_properties.push("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _country = @country
        if _country.to_s.size > 5000
          invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
        end
      end

      if _region = @region
        if _region.to_s.size > 5000
          invalid_properties.push("invalid value for \"region\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _city = @city
        return false if _city.to_s.size > 5000
      end
      if _country = @country
        return false if _country.to_s.size > 5000
      end

      if _region = @region
        return false if _region.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(city : String?)
      if city.nil?
        return @city = nil
      end
      _city = city.not_nil!
      if _city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
      end

      @city = _city
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(country : String?)
      if country.nil?
        return @country = nil
      end
      _country = country.not_nil!
      if _country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = _country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] latitude Object to be assigned
    def latitude=(latitude : Float64?)
      if latitude.nil?
        return @latitude = nil
      end
      _latitude = latitude.not_nil!
      @latitude = _latitude
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] longitude Object to be assigned
    def longitude=(longitude : Float64?)
      if longitude.nil?
        return @longitude = nil
      end
      _longitude = longitude.not_nil!
      @longitude = _longitude
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(region : String?)
      if region.nil?
        return @region = nil
      end
      _region = region.not_nil!
      if _region.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"region\", the character length must be smaller than or equal to 5000.")
      end

      @region = _region
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@city, @city_present, @country, @country_present, @latitude, @latitude_present, @longitude, @longitude_present, @region, @region_present)
  end
end
