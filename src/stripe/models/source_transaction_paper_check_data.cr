#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class SourceTransactionPaperCheckData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "available_at", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter available_at : String? = nil

    # Comma-separated list of invoice IDs associated with the paper check.
    @[JSON::Field(key: "invoices", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoices : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @available_at : String? = nil,
      @invoices : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _available_at = @available_at
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("available_at", _available_at.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _invoices = @invoices
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("invoices", _invoices.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _available_at = @available_at
        return false if _available_at.to_s.size > 5000
      end
      if _invoices = @invoices
        return false if _invoices.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] available_at Object to be assigned
    def available_at=(available_at : String?)
      if available_at.nil?
        return @available_at = nil
      end
      _available_at = available_at.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("available_at", _available_at.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @available_at = _available_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoices Object to be assigned
    def invoices=(invoices : String?)
      if invoices.nil?
        return @invoices = nil
      end
      _invoices = invoices.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("invoices", _invoices.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @invoices = _invoices
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@available_at, @invoices)
  end
end
