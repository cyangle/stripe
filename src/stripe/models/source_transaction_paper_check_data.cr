#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SourceTransactionPaperCheckData
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "available_at", type: String?, presence: true, ignore_serialize: available_at.nil? && !available_at_present?)]
    getter available_at : String?

    @[JSON::Field(ignore: true)]
    property? available_at_present : Bool = false

    # Comma-separated list of invoice IDs associated with the paper check.
    @[JSON::Field(key: "invoices", type: String?, presence: true, ignore_serialize: invoices.nil? && !invoices_present?)]
    getter invoices : String?

    @[JSON::Field(ignore: true)]
    property? invoices_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @available_at : String? = nil,
      @invoices : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@available_at.nil? && @available_at.to_s.size > 5000
        invalid_properties.push("invalid value for \"available_at\", the character length must be smaller than or equal to 5000.")
      end

      if !@invoices.nil? && @invoices.to_s.size > 5000
        invalid_properties.push("invalid value for \"invoices\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@available_at.nil? && @available_at.to_s.size > 5000
      return false if !@invoices.nil? && @invoices.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] available_at Value to be assigned
    def available_at=(available_at : String?)
      if !available_at.nil? && available_at.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"available_at\", the character length must be smaller than or equal to 5000.")
      end

      @available_at = available_at
    end

    # Custom attribute writer method with validation
    # @param [Object] invoices Value to be assigned
    def invoices=(invoices : String?)
      if !invoices.nil? && invoices.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoices\", the character length must be smaller than or equal to 5000.")
      end

      @invoices = invoices
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@available_at, @available_at_present, @invoices, @invoices_present)
  end
end
