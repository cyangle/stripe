#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./billing_meter_resource_aggregation_settings"
require "./billing_meter_resource_billing_meter_status_transitions"
require "./billing_meter_resource_billing_meter_value"
require "./billing_meter_resource_customer_mapping_settings"

module Stripe
  # A billing meter is a resource that allows you to track usage of a particular event. For example, you might create a billing meter to track the number of API calls made by a particular user. You can then attach the billing meter to a price and attach the price to a subscription to charge the user for the number of API calls they make.
  class BillingMeter
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    @[JSON::Field(key: "customer_mapping", type: Stripe::BillingMeterResourceCustomerMappingSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter customer_mapping : Stripe::BillingMeterResourceCustomerMappingSettings? = nil

    @[JSON::Field(key: "default_aggregation", type: Stripe::BillingMeterResourceAggregationSettings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter default_aggregation : Stripe::BillingMeterResourceAggregationSettings? = nil

    # The meter's name.
    @[JSON::Field(key: "display_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter display_name : String? = nil
    MAX_LENGTH_FOR_DISPLAY_NAME = 5000

    # The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.
    @[JSON::Field(key: "event_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter event_name : String? = nil
    MAX_LENGTH_FOR_EVENT_NAME = 5000

    # The time window to pre-aggregate meter events for, if any.
    @[JSON::Field(key: "event_time_window", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter event_time_window : String? = nil
    ERROR_MESSAGE_FOR_EVENT_TIME_WINDOW = "invalid value for \"event_time_window\", must be one of [day, hour]."
    VALID_VALUES_FOR_EVENT_TIME_WINDOW  = String.static_array("day", "hour")

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [billing.meter]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("billing.meter")

    # The meter's status.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, inactive]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "inactive")

    @[JSON::Field(key: "status_transitions", type: Stripe::BillingMeterResourceBillingMeterStatusTransitions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status_transitions : Stripe::BillingMeterResourceBillingMeterStatusTransitions? = nil

    # Time at which the object was last updated. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "updated", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter updated : Int64? = nil

    @[JSON::Field(key: "value_settings", type: Stripe::BillingMeterResourceBillingMeterValue?, default: nil, required: true, nullable: false, emit_null: false)]
    getter value_settings : Stripe::BillingMeterResourceBillingMeterValue? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @customer_mapping : Stripe::BillingMeterResourceCustomerMappingSettings? = nil,
      @default_aggregation : Stripe::BillingMeterResourceAggregationSettings? = nil,
      @display_name : String? = nil,
      @event_name : String? = nil,
      @event_time_window : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @status : String? = nil,
      @status_transitions : Stripe::BillingMeterResourceBillingMeterStatusTransitions? = nil,
      @updated : Int64? = nil,
      @value_settings : Stripe::BillingMeterResourceBillingMeterValue? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"customer_mapping\" is required and cannot be null") if @customer_mapping.nil?

      unless (_customer_mapping = @customer_mapping).nil?
        invalid_properties.concat(_customer_mapping.list_invalid_properties_for("customer_mapping")) if _customer_mapping.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"default_aggregation\" is required and cannot be null") if @default_aggregation.nil?

      unless (_default_aggregation = @default_aggregation).nil?
        invalid_properties.concat(_default_aggregation.list_invalid_properties_for("default_aggregation")) if _default_aggregation.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"display_name\" is required and cannot be null") if @display_name.nil?

      unless (_display_name = @display_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("display_name", _display_name.to_s.size, MAX_LENGTH_FOR_DISPLAY_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"event_name\" is required and cannot be null") if @event_name.nil?

      unless (_event_name = @event_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("event_name", _event_name.to_s.size, MAX_LENGTH_FOR_EVENT_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_event_time_window = @event_time_window).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_EVENT_TIME_WINDOW) unless OpenApi::EnumValidator.valid?(_event_time_window, VALID_VALUES_FOR_EVENT_TIME_WINDOW)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"status_transitions\" is required and cannot be null") if @status_transitions.nil?

      unless (_status_transitions = @status_transitions).nil?
        invalid_properties.concat(_status_transitions.list_invalid_properties_for("status_transitions")) if _status_transitions.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"updated\" is required and cannot be null") if @updated.nil?

      invalid_properties.push("\"value_settings\" is required and cannot be null") if @value_settings.nil?

      unless (_value_settings = @value_settings).nil?
        invalid_properties.concat(_value_settings.list_invalid_properties_for("value_settings")) if _value_settings.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @customer_mapping.nil?
      unless (_customer_mapping = @customer_mapping).nil?
        return false if _customer_mapping.is_a?(OpenApi::Validatable) && !_customer_mapping.valid?
      end

      return false if @default_aggregation.nil?
      unless (_default_aggregation = @default_aggregation).nil?
        return false if _default_aggregation.is_a?(OpenApi::Validatable) && !_default_aggregation.valid?
      end

      return false if @display_name.nil?
      unless (_display_name = @display_name).nil?
        return false if _display_name.to_s.size > MAX_LENGTH_FOR_DISPLAY_NAME
      end

      return false if @event_name.nil?
      unless (_event_name = @event_name).nil?
        return false if _event_name.to_s.size > MAX_LENGTH_FOR_EVENT_NAME
      end

      unless (_event_time_window = @event_time_window).nil?
        return false unless OpenApi::EnumValidator.valid?(_event_time_window, VALID_VALUES_FOR_EVENT_TIME_WINDOW)
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @status_transitions.nil?
      unless (_status_transitions = @status_transitions).nil?
        return false if _status_transitions.is_a?(OpenApi::Validatable) && !_status_transitions.valid?
      end

      return false if @updated.nil?

      return false if @value_settings.nil?
      unless (_value_settings = @value_settings).nil?
        return false if _value_settings.is_a?(OpenApi::Validatable) && !_value_settings.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_mapping Object to be assigned
    def customer_mapping=(new_value : Stripe::BillingMeterResourceCustomerMappingSettings?)
      raise ArgumentError.new("\"customer_mapping\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_mapping = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_aggregation Object to be assigned
    def default_aggregation=(new_value : Stripe::BillingMeterResourceAggregationSettings?)
      raise ArgumentError.new("\"default_aggregation\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @default_aggregation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_name Object to be assigned
    def display_name=(new_value : String?)
      raise ArgumentError.new("\"display_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("display_name", new_value.to_s.size, MAX_LENGTH_FOR_DISPLAY_NAME)
      end

      @display_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_name Object to be assigned
    def event_name=(new_value : String?)
      raise ArgumentError.new("\"event_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("event_name", new_value.to_s.size, MAX_LENGTH_FOR_EVENT_NAME)
      end

      @event_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_time_window Object to be assigned
    def event_time_window=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("event_time_window", new_value, VALID_VALUES_FOR_EVENT_TIME_WINDOW)
      end

      @event_time_window = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_transitions Object to be assigned
    def status_transitions=(new_value : Stripe::BillingMeterResourceBillingMeterStatusTransitions?)
      raise ArgumentError.new("\"status_transitions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @status_transitions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] updated Object to be assigned
    def updated=(new_value : Int64?)
      raise ArgumentError.new("\"updated\" is required and cannot be null") if new_value.nil?

      @updated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value_settings Object to be assigned
    def value_settings=(new_value : Stripe::BillingMeterResourceBillingMeterValue?)
      raise ArgumentError.new("\"value_settings\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @value_settings = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @customer_mapping, @default_aggregation, @display_name, @event_name, @event_time_window, @id, @livemode, @object, @status, @status_transitions, @updated, @value_settings)
  end
end
