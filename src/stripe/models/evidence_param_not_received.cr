#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Evidence provided when `reason` is 'not_received'.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class EvidenceParamNotReceived
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "additional_documentation", type: CanceledAdditionalDocumentation?, presence: true, ignore_serialize: additional_documentation.nil? && !additional_documentation_present?)]
    property additional_documentation : CanceledAdditionalDocumentation?

    @[JSON::Field(ignore: true)]
    property? additional_documentation_present : Bool = false

    @[JSON::Field(key: "expected_at", type: CanceledExpectedAt?, presence: true, ignore_serialize: expected_at.nil? && !expected_at_present?)]
    property expected_at : CanceledExpectedAt?

    @[JSON::Field(ignore: true)]
    property? expected_at_present : Bool = false

    # Explanation of why the cardholder is disputing this transaction.
    @[JSON::Field(key: "explanation", type: String?, presence: true, ignore_serialize: explanation.nil? && !explanation_present?)]
    getter explanation : String?

    @[JSON::Field(ignore: true)]
    property? explanation_present : Bool = false

    # Description of the merchandise or service that was purchased.
    @[JSON::Field(key: "product_description", type: String?, presence: true, ignore_serialize: product_description.nil? && !product_description_present?)]
    getter product_description : String?

    @[JSON::Field(ignore: true)]
    property? product_description_present : Bool = false

    # Whether the product was a merchandise or service.
    @[JSON::Field(key: "product_type", type: String?, presence: true, ignore_serialize: product_type.nil? && !product_type_present?)]
    getter product_type : String?

    @[JSON::Field(ignore: true)]
    property? product_type_present : Bool = false

    ENUM_VALIDATOR_FOR_PRODUCT_TYPE = EnumValidator.new("product_type", "String", ["", "merchandise", "service"])

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::NotReceived,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @additional_documentation : CanceledAdditionalDocumentation? = nil, @expected_at : CanceledExpectedAt? = nil, @explanation : String? = nil, @product_description : String? = nil, @product_type : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@explanation.nil? && @explanation.to_s.size > 1500
        invalid_properties.push("invalid value for \"explanation\", the character length must be smaller than or equal to 1500.")
      end

      if !@product_description.nil? && @product_description.to_s.size > 1500
        invalid_properties.push("invalid value for \"product_description\", the character length must be smaller than or equal to 1500.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_PRODUCT_TYPE.error_message) unless ENUM_VALIDATOR_FOR_PRODUCT_TYPE.valid?(@product_type)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@explanation.nil? && @explanation.to_s.size > 1500
      return false if !@product_description.nil? && @product_description.to_s.size > 1500
      return false unless ENUM_VALIDATOR_FOR_PRODUCT_TYPE.valid?(@product_type)
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] explanation Value to be assigned
    def explanation=(explanation)
      if !explanation.nil? && explanation.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"explanation\", the character length must be smaller than or equal to 1500.")
      end

      @explanation = explanation
    end

    # Custom attribute writer method with validation
    # @param [Object] product_description Value to be assigned
    def product_description=(product_description)
      if !product_description.nil? && product_description.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"product_description\", the character length must be smaller than or equal to 1500.")
      end

      @product_description = product_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_type Object to be assigned
    def product_type=(product_type)
      ENUM_VALIDATOR_FOR_PRODUCT_TYPE.valid!(product_type)
      @product_type = product_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        additional_documentation == o.additional_documentation &&
        expected_at == o.expected_at &&
        explanation == o.explanation &&
        product_description == o.product_description &&
        product_type == o.product_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@additional_documentation, @expected_at, @explanation, @product_description, @product_type)
  end
end
