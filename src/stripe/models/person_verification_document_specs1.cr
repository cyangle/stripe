#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # An identifying document, either a passport or local ID card.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PersonVerificationDocumentSpecs1
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size.
    @[JSON::Field(key: "back", type: String?, presence: true, ignore_serialize: back.nil? && !back_present?)]
    getter back : String?

    @[JSON::Field(ignore: true)]
    property? back_present : Bool = false

    # The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size.
    @[JSON::Field(key: "front", type: String?, presence: true, ignore_serialize: front.nil? && !front_present?)]
    getter front : String?

    @[JSON::Field(ignore: true)]
    property? front_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @back : String? = nil, @front : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@back.nil? && @back.to_s.size > 500
        invalid_properties.push("invalid value for \"back\", the character length must be smaller than or equal to 500.")
      end

      if !@front.nil? && @front.to_s.size > 500
        invalid_properties.push("invalid value for \"front\", the character length must be smaller than or equal to 500.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@back.nil? && @back.to_s.size > 500
      return false if !@front.nil? && @front.to_s.size > 500
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] back Value to be assigned
    def back=(back)
      if !back.nil? && back.to_s.size > 500
        raise ArgumentError.new("invalid value for \"back\", the character length must be smaller than or equal to 500.")
      end

      @back = back
    end

    # Custom attribute writer method with validation
    # @param [Object] front Value to be assigned
    def front=(front)
      if !front.nil? && front.to_s.size > 500
        raise ArgumentError.new("invalid value for \"front\", the character length must be smaller than or equal to 500.")
      end

      @front = front
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        back == o.back &&
        front == o.front
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@back, @front)
  end
end
