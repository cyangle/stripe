#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class ThreeDSecureDetailsCharge
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # For authenticated transactions: how the customer was authenticated by the issuing bank.
    @[JSON::Field(key: "authentication_flow", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter authentication_flow : String? = nil
    ERROR_MESSAGE_FOR_AUTHENTICATION_FLOW = "invalid value for \"authentication_flow\", must be one of [challenge, frictionless]."
    VALID_VALUES_FOR_AUTHENTICATION_FLOW  = String.static_array("challenge", "frictionless")

    # The Electronic Commerce Indicator (ECI). A protocol-level field indicating what degree of authentication was performed.
    @[JSON::Field(key: "electronic_commerce_indicator", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter electronic_commerce_indicator : String? = nil
    ERROR_MESSAGE_FOR_ELECTRONIC_COMMERCE_INDICATOR = "invalid value for \"electronic_commerce_indicator\", must be one of [01, 02, 05, 06, 07]."
    VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR  = String.static_array("01", "02", "05", "06", "07")

    # The exemption requested via 3DS and accepted by the issuer at authentication time.
    @[JSON::Field(key: "exemption_indicator", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter exemption_indicator : String? = nil
    ERROR_MESSAGE_FOR_EXEMPTION_INDICATOR = "invalid value for \"exemption_indicator\", must be one of [low_risk, none]."
    VALID_VALUES_FOR_EXEMPTION_INDICATOR  = String.static_array("low_risk", "none")

    # Indicates the outcome of 3D Secure authentication.
    @[JSON::Field(key: "result", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter result : String? = nil
    ERROR_MESSAGE_FOR_RESULT = "invalid value for \"result\", must be one of [attempt_acknowledged, authenticated, exempted, failed, not_supported, processing_error]."
    VALID_VALUES_FOR_RESULT  = String.static_array("attempt_acknowledged", "authenticated", "exempted", "failed", "not_supported", "processing_error")

    # Additional information about why 3D Secure succeeded or failed based on the `result`.
    @[JSON::Field(key: "result_reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter result_reason : String? = nil
    ERROR_MESSAGE_FOR_RESULT_REASON = "invalid value for \"result_reason\", must be one of [abandoned, bypassed, canceled, card_not_enrolled, network_not_supported, protocol_error, rejected]."
    VALID_VALUES_FOR_RESULT_REASON  = String.static_array("abandoned", "bypassed", "canceled", "card_not_enrolled", "network_not_supported", "protocol_error", "rejected")

    # The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID (dsTransId) for this payment.
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter transaction_id : String? = nil
    MAX_LENGTH_FOR_TRANSACTION_ID = 5000

    # The version of 3D Secure that was used.
    @[JSON::Field(key: "version", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter version : String? = nil
    ERROR_MESSAGE_FOR_VERSION = "invalid value for \"version\", must be one of [1.0.2, 2.1.0, 2.2.0]."
    VALID_VALUES_FOR_VERSION  = String.static_array("1.0.2", "2.1.0", "2.2.0")

    # End of Required Properties

    # Optional Properties

    # Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on the outcome of Stripe's internal risk assessment.
    @[JSON::Field(key: "exemption_indicator_applied", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter exemption_indicator_applied : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @authentication_flow : String? = nil,
      @electronic_commerce_indicator : String? = nil,
      @exemption_indicator : String? = nil,
      @result : String? = nil,
      @result_reason : String? = nil,
      @transaction_id : String? = nil,
      @version : String? = nil,
      # Optional properties
      @exemption_indicator_applied : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_authentication_flow = @authentication_flow).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_AUTHENTICATION_FLOW) unless OpenApi::EnumValidator.valid?(_authentication_flow, VALID_VALUES_FOR_AUTHENTICATION_FLOW)
      end
      unless (_electronic_commerce_indicator = @electronic_commerce_indicator).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ELECTRONIC_COMMERCE_INDICATOR) unless OpenApi::EnumValidator.valid?(_electronic_commerce_indicator, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end
      unless (_exemption_indicator = @exemption_indicator).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_EXEMPTION_INDICATOR) unless OpenApi::EnumValidator.valid?(_exemption_indicator, VALID_VALUES_FOR_EXEMPTION_INDICATOR)
      end
      unless (_result = @result).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_RESULT) unless OpenApi::EnumValidator.valid?(_result, VALID_VALUES_FOR_RESULT)
      end
      unless (_result_reason = @result_reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_RESULT_REASON) unless OpenApi::EnumValidator.valid?(_result_reason, VALID_VALUES_FOR_RESULT_REASON)
      end
      unless (_transaction_id = @transaction_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("transaction_id", _transaction_id.to_s.size, MAX_LENGTH_FOR_TRANSACTION_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_version = @version).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_VERSION) unless OpenApi::EnumValidator.valid?(_version, VALID_VALUES_FOR_VERSION)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_authentication_flow = @authentication_flow).nil?
        return false unless OpenApi::EnumValidator.valid?(_authentication_flow, VALID_VALUES_FOR_AUTHENTICATION_FLOW)
      end

      unless (_electronic_commerce_indicator = @electronic_commerce_indicator).nil?
        return false unless OpenApi::EnumValidator.valid?(_electronic_commerce_indicator, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end

      unless (_exemption_indicator = @exemption_indicator).nil?
        return false unless OpenApi::EnumValidator.valid?(_exemption_indicator, VALID_VALUES_FOR_EXEMPTION_INDICATOR)
      end

      unless (_result = @result).nil?
        return false unless OpenApi::EnumValidator.valid?(_result, VALID_VALUES_FOR_RESULT)
      end

      unless (_result_reason = @result_reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_result_reason, VALID_VALUES_FOR_RESULT_REASON)
      end

      unless (_transaction_id = @transaction_id).nil?
        return false if _transaction_id.to_s.size > MAX_LENGTH_FOR_TRANSACTION_ID
      end

      unless (_version = @version).nil?
        return false unless OpenApi::EnumValidator.valid?(_version, VALID_VALUES_FOR_VERSION)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication_flow Object to be assigned
    def authentication_flow=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("authentication_flow", new_value, VALID_VALUES_FOR_AUTHENTICATION_FLOW)
      end

      @authentication_flow = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] electronic_commerce_indicator Object to be assigned
    def electronic_commerce_indicator=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("electronic_commerce_indicator", new_value, VALID_VALUES_FOR_ELECTRONIC_COMMERCE_INDICATOR)
      end

      @electronic_commerce_indicator = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exemption_indicator Object to be assigned
    def exemption_indicator=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("exemption_indicator", new_value, VALID_VALUES_FOR_EXEMPTION_INDICATOR)
      end

      @exemption_indicator = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result Object to be assigned
    def result=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("result", new_value, VALID_VALUES_FOR_RESULT)
      end

      @result = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result_reason Object to be assigned
    def result_reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("result_reason", new_value, VALID_VALUES_FOR_RESULT_REASON)
      end

      @result_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("transaction_id", new_value.to_s.size, MAX_LENGTH_FOR_TRANSACTION_ID)
      end

      @transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("version", new_value, VALID_VALUES_FOR_VERSION)
      end

      @version = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exemption_indicator_applied Object to be assigned
    def exemption_indicator_applied=(new_value : Bool?)
      @exemption_indicator_applied = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@authentication_flow, @electronic_commerce_indicator, @exemption_indicator, @result, @result_reason, @transaction_id, @version, @exemption_indicator_applied)
  end
end
