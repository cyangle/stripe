#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class SourceTransactionGbpCreditTransferData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.
    @[JSON::Field(key: "fingerprint", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fingerprint : String? = nil

    # The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.
    @[JSON::Field(key: "funding_method", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter funding_method : String? = nil

    # Last 4 digits of sender account number associated with the transfer.
    @[JSON::Field(key: "last4", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter last4 : String? = nil

    # Sender entered arbitrary information about the transfer.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter reference : String? = nil

    # Sender account number associated with the transfer.
    @[JSON::Field(key: "sender_account_number", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sender_account_number : String? = nil

    # Sender name associated with the transfer.
    @[JSON::Field(key: "sender_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sender_name : String? = nil

    # Sender sort code associated with the transfer.
    @[JSON::Field(key: "sender_sort_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sender_sort_code : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @fingerprint : String? = nil,
      @funding_method : String? = nil,
      @last4 : String? = nil,
      @reference : String? = nil,
      @sender_account_number : String? = nil,
      @sender_name : String? = nil,
      @sender_sort_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _fingerprint = @fingerprint
        if _fingerprint.to_s.size > 5000
          invalid_properties.push("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _funding_method = @funding_method
        if _funding_method.to_s.size > 5000
          invalid_properties.push("invalid value for \"funding_method\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _last4 = @last4
        if _last4.to_s.size > 5000
          invalid_properties.push("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _reference = @reference
        if _reference.to_s.size > 5000
          invalid_properties.push("invalid value for \"reference\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _sender_account_number = @sender_account_number
        if _sender_account_number.to_s.size > 5000
          invalid_properties.push("invalid value for \"sender_account_number\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _sender_name = @sender_name
        if _sender_name.to_s.size > 5000
          invalid_properties.push("invalid value for \"sender_name\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _sender_sort_code = @sender_sort_code
        if _sender_sort_code.to_s.size > 5000
          invalid_properties.push("invalid value for \"sender_sort_code\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _fingerprint = @fingerprint
        return false if _fingerprint.to_s.size > 5000
      end
      if _funding_method = @funding_method
        return false if _funding_method.to_s.size > 5000
      end
      if _last4 = @last4
        return false if _last4.to_s.size > 5000
      end
      if _reference = @reference
        return false if _reference.to_s.size > 5000
      end
      if _sender_account_number = @sender_account_number
        return false if _sender_account_number.to_s.size > 5000
      end
      if _sender_name = @sender_name
        return false if _sender_name.to_s.size > 5000
      end
      if _sender_sort_code = @sender_sort_code
        return false if _sender_sort_code.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fingerprint Object to be assigned
    def fingerprint=(fingerprint : String?)
      if fingerprint.nil?
        return @fingerprint = nil
      end
      _fingerprint = fingerprint.not_nil!
      if _fingerprint.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      @fingerprint = fingerprint
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_method Object to be assigned
    def funding_method=(funding_method : String?)
      if funding_method.nil?
        return @funding_method = nil
      end
      _funding_method = funding_method.not_nil!
      if _funding_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"funding_method\", the character length must be smaller than or equal to 5000.")
      end

      @funding_method = funding_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last4 Object to be assigned
    def last4=(last4 : String?)
      if last4.nil?
        return @last4 = nil
      end
      _last4 = last4.not_nil!
      if _last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      @last4 = last4
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(reference : String?)
      if reference.nil?
        return @reference = nil
      end
      _reference = reference.not_nil!
      if _reference.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reference\", the character length must be smaller than or equal to 5000.")
      end

      @reference = reference
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sender_account_number Object to be assigned
    def sender_account_number=(sender_account_number : String?)
      if sender_account_number.nil?
        return @sender_account_number = nil
      end
      _sender_account_number = sender_account_number.not_nil!
      if _sender_account_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"sender_account_number\", the character length must be smaller than or equal to 5000.")
      end

      @sender_account_number = sender_account_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sender_name Object to be assigned
    def sender_name=(sender_name : String?)
      if sender_name.nil?
        return @sender_name = nil
      end
      _sender_name = sender_name.not_nil!
      if _sender_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"sender_name\", the character length must be smaller than or equal to 5000.")
      end

      @sender_name = sender_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sender_sort_code Object to be assigned
    def sender_sort_code=(sender_sort_code : String?)
      if sender_sort_code.nil?
        return @sender_sort_code = nil
      end
      _sender_sort_code = sender_sort_code.not_nil!
      if _sender_sort_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"sender_sort_code\", the character length must be smaller than or equal to 5000.")
      end

      @sender_sort_code = sender_sort_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@fingerprint, @funding_method, @last4, @reference, @sender_account_number, @sender_name, @sender_sort_code)
  end
end
