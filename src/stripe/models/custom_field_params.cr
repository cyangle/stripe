#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CustomFieldParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "name", type: String)]
    getter name : String

    @[JSON::Field(key: "value", type: String)]
    getter value : String

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @name : String,
      @value : String
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @name.to_s.size > 30
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 30.")
      end

      if @value.to_s.size > 30
        invalid_properties.push("invalid value for \"value\", the character length must be smaller than or equal to 30.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.to_s.size > 30
      return false if @value.to_s.size > 30

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name : String)
      if name.to_s.size > 30
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 30.")
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] value Value to be assigned
    def value=(value : String)
      if value.to_s.size > 30
        raise ArgumentError.new("invalid value for \"value\", the character length must be smaller than or equal to 30.")
      end

      @value = value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @value)
  end
end
