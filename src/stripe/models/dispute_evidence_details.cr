#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class DisputeEvidenceDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute.
    @[JSON::Field(key: "due_by", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter due_by : Int64? = nil

    # Whether evidence has been staged for this dispute.
    @[JSON::Field(key: "has_evidence", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter has_evidence : Bool? = nil

    # Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
    @[JSON::Field(key: "past_due", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter past_due : Bool? = nil

    # The number of times evidence has been submitted. Typically, you may only submit evidence once.
    @[JSON::Field(key: "submission_count", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter submission_count : Int64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @due_by : Int64? = nil,
      @has_evidence : Bool? = nil,
      @past_due : Bool? = nil,
      @submission_count : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"has_evidence\" is required and cannot be null") if @has_evidence.nil?

      invalid_properties.push("\"past_due\" is required and cannot be null") if @past_due.nil?

      invalid_properties.push("\"submission_count\" is required and cannot be null") if @submission_count.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @has_evidence.nil?

      return false if @past_due.nil?

      return false if @submission_count.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] due_by Object to be assigned
    def due_by=(new_value : Int64?)
      @due_by = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] has_evidence Object to be assigned
    def has_evidence=(new_value : Bool?)
      raise ArgumentError.new("\"has_evidence\" is required and cannot be null") if new_value.nil?

      @has_evidence = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] past_due Object to be assigned
    def past_due=(new_value : Bool?)
      raise ArgumentError.new("\"past_due\" is required and cannot be null") if new_value.nil?

      @past_due = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submission_count Object to be assigned
    def submission_count=(new_value : Int64?)
      raise ArgumentError.new("\"submission_count\" is required and cannot be null") if new_value.nil?

      @submission_count = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@due_by, @has_evidence, @past_due, @submission_count)
  end
end
