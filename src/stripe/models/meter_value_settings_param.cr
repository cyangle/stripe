#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class MeterValueSettingsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The key in the usage event payload to use as the value for this meter. For example, if the event payload contains usage on a `bytes_used` field, then set the event_payload_key to \"bytes_used\".
    @[JSON::Field(key: "event_payload_key", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter event_payload_key : String? = nil
    MAX_LENGTH_FOR_EVENT_PAYLOAD_KEY = 100

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @event_payload_key : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"event_payload_key\" is required and cannot be null") if @event_payload_key.nil?

      unless (_event_payload_key = @event_payload_key).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("event_payload_key", _event_payload_key.to_s.size, MAX_LENGTH_FOR_EVENT_PAYLOAD_KEY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @event_payload_key.nil?
      unless (_event_payload_key = @event_payload_key).nil?
        return false if _event_payload_key.to_s.size > MAX_LENGTH_FOR_EVENT_PAYLOAD_KEY
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_payload_key Object to be assigned
    def event_payload_key=(new_value : String?)
      raise ArgumentError.new("\"event_payload_key\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("event_payload_key", new_value.to_s.size, MAX_LENGTH_FOR_EVENT_PAYLOAD_KEY)
      end

      @event_payload_key = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@event_payload_key)
  end
end
