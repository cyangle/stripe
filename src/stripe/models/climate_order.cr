#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./climate_order_product"
require "./climate_removals_beneficiary"
require "./climate_removals_order_deliveries"

module Stripe
  # Orders represent your intent to purchase a particular Climate product. When you create an order, the payment is deducted from your merchant balance.
  class ClimateOrder
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Total amount of [Frontier](https://frontierclimate.com/)'s service fees in the currency's smallest unit.
    @[JSON::Field(key: "amount_fees", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_fees : Int64? = nil

    # Total amount of the carbon removal in the currency's smallest unit.
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_subtotal : Int64? = nil

    # Total amount of the order including fees in the currency's smallest unit.
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_total : Int64? = nil

    # Time at which the order was canceled. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "canceled_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter canceled_at : Int64? = nil

    # Reason for the cancellation of this order.
    @[JSON::Field(key: "cancellation_reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cancellation_reason : String? = nil
    ERROR_MESSAGE_FOR_CANCELLATION_REASON = "invalid value for \"cancellation_reason\", must be one of [expired, product_unavailable, requested]."
    VALID_VALUES_FOR_CANCELLATION_REASON  = String.static_array("expired", "product_unavailable", "requested")

    # For delivered orders, a URL to a delivery certificate for the order.
    @[JSON::Field(key: "certificate", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter certificate : String? = nil
    MAX_LENGTH_FOR_CERTIFICATE = 5000

    # Time at which the order was confirmed. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "confirmed_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter confirmed_at : Int64? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil
    MAX_LENGTH_FOR_CURRENCY = 5000

    # Time at which the order's expected_delivery_year was delayed. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "delayed_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter delayed_at : Int64? = nil

    # Time at which the order was delivered. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "delivered_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter delivered_at : Int64? = nil

    # Details about the delivery of carbon removal for this order.
    @[JSON::Field(key: "delivery_details", type: Array(Stripe::ClimateRemovalsOrderDeliveries)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter delivery_details : Array(Stripe::ClimateRemovalsOrderDeliveries)? = nil

    # The year this order is expected to be delivered.
    @[JSON::Field(key: "expected_delivery_year", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expected_delivery_year : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # Quantity of carbon removal that is included in this order.
    @[JSON::Field(key: "metric_tons", type: BigDecimal?, default: nil, required: true, nullable: false, emit_null: false)]
    getter metric_tons : BigDecimal? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [climate.order]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("climate.order")

    @[JSON::Field(key: "product", type: Stripe::ClimateOrderProduct?, default: nil, required: true, nullable: false, emit_null: false)]
    getter product : Stripe::ClimateOrderProduct? = nil

    # Time at which the order's product was substituted for a different product. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "product_substituted_at", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter product_substituted_at : Int64? = nil

    # The current status of this order.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [awaiting_funds, canceled, confirmed, delivered, open]."
    VALID_VALUES_FOR_STATUS  = String.static_array("awaiting_funds", "canceled", "confirmed", "delivered", "open")

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "beneficiary", type: Stripe::ClimateRemovalsBeneficiary?, default: nil, required: false, nullable: false, emit_null: false)]
    getter beneficiary : Stripe::ClimateRemovalsBeneficiary? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_fees : Int64? = nil,
      @amount_subtotal : Int64? = nil,
      @amount_total : Int64? = nil,
      @canceled_at : Int64? = nil,
      @cancellation_reason : String? = nil,
      @certificate : String? = nil,
      @confirmed_at : Int64? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @delayed_at : Int64? = nil,
      @delivered_at : Int64? = nil,
      @delivery_details : Array(Stripe::ClimateRemovalsOrderDeliveries)? = nil,
      @expected_delivery_year : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @metric_tons : BigDecimal? = nil,
      @object : String? = nil,
      @product : Stripe::ClimateOrderProduct? = nil,
      @product_substituted_at : Int64? = nil,
      @status : String? = nil,
      # Optional properties
      @beneficiary : Stripe::ClimateRemovalsBeneficiary? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount_fees\" is required and cannot be null") if @amount_fees.nil?

      invalid_properties.push("\"amount_subtotal\" is required and cannot be null") if @amount_subtotal.nil?

      invalid_properties.push("\"amount_total\" is required and cannot be null") if @amount_total.nil?

      unless (_cancellation_reason = @cancellation_reason).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CANCELLATION_REASON) unless OpenApi::EnumValidator.valid?(_cancellation_reason, VALID_VALUES_FOR_CANCELLATION_REASON)
      end
      unless (_certificate = @certificate).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("certificate", _certificate.to_s.size, MAX_LENGTH_FOR_CERTIFICATE)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_currency = @currency).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("currency", _currency.to_s.size, MAX_LENGTH_FOR_CURRENCY)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties.push("\"delivery_details\" is required and cannot be null") if @delivery_details.nil?

      unless (_delivery_details = @delivery_details).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "delivery_details", container: _delivery_details)) if _delivery_details.is_a?(Array)
      end
      invalid_properties.push("\"expected_delivery_year\" is required and cannot be null") if @expected_delivery_year.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"metadata\" is required and cannot be null") if @metadata.nil?

      invalid_properties.push("\"metric_tons\" is required and cannot be null") if @metric_tons.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"product\" is required and cannot be null") if @product.nil?

      unless (_product = @product).nil?
        invalid_properties.concat(_product.list_invalid_properties_for("product")) if _product.is_a?(OpenApi::Validatable)
      end

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      unless (_beneficiary = @beneficiary).nil?
        invalid_properties.concat(_beneficiary.list_invalid_properties_for("beneficiary")) if _beneficiary.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount_fees.nil?

      return false if @amount_subtotal.nil?

      return false if @amount_total.nil?

      unless (_cancellation_reason = @cancellation_reason).nil?
        return false unless OpenApi::EnumValidator.valid?(_cancellation_reason, VALID_VALUES_FOR_CANCELLATION_REASON)
      end

      unless (_certificate = @certificate).nil?
        return false if _certificate.to_s.size > MAX_LENGTH_FOR_CERTIFICATE
      end

      return false if @created.nil?

      return false if @currency.nil?
      unless (_currency = @currency).nil?
        return false if _currency.to_s.size > MAX_LENGTH_FOR_CURRENCY
      end

      return false if @delivery_details.nil?
      unless (_delivery_details = @delivery_details).nil?
        return false if _delivery_details.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _delivery_details)
      end

      return false if @expected_delivery_year.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @metadata.nil?

      return false if @metric_tons.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @product.nil?
      unless (_product = @product).nil?
        return false if _product.is_a?(OpenApi::Validatable) && !_product.valid?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      unless (_beneficiary = @beneficiary).nil?
        return false if _beneficiary.is_a?(OpenApi::Validatable) && !_beneficiary.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_fees Object to be assigned
    def amount_fees=(new_value : Int64?)
      raise ArgumentError.new("\"amount_fees\" is required and cannot be null") if new_value.nil?

      @amount_fees = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(new_value : Int64?)
      raise ArgumentError.new("\"amount_subtotal\" is required and cannot be null") if new_value.nil?

      @amount_subtotal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(new_value : Int64?)
      raise ArgumentError.new("\"amount_total\" is required and cannot be null") if new_value.nil?

      @amount_total = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] canceled_at Object to be assigned
    def canceled_at=(new_value : Int64?)
      @canceled_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_reason Object to be assigned
    def cancellation_reason=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("cancellation_reason", new_value, VALID_VALUES_FOR_CANCELLATION_REASON)
      end

      @cancellation_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] certificate Object to be assigned
    def certificate=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("certificate", new_value.to_s.size, MAX_LENGTH_FOR_CERTIFICATE)
      end

      @certificate = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confirmed_at Object to be assigned
    def confirmed_at=(new_value : Int64?)
      @confirmed_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("currency", new_value.to_s.size, MAX_LENGTH_FOR_CURRENCY)
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delayed_at Object to be assigned
    def delayed_at=(new_value : Int64?)
      @delayed_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delivered_at Object to be assigned
    def delivered_at=(new_value : Int64?)
      @delivered_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delivery_details Object to be assigned
    def delivery_details=(new_value : Array(Stripe::ClimateRemovalsOrderDeliveries)?)
      raise ArgumentError.new("\"delivery_details\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @delivery_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_delivery_year Object to be assigned
    def expected_delivery_year=(new_value : Int64?)
      raise ArgumentError.new("\"expected_delivery_year\" is required and cannot be null") if new_value.nil?

      @expected_delivery_year = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      raise ArgumentError.new("\"metadata\" is required and cannot be null") if new_value.nil?

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metric_tons Object to be assigned
    def metric_tons=(new_value : BigDecimal?)
      raise ArgumentError.new("\"metric_tons\" is required and cannot be null") if new_value.nil?

      @metric_tons = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product Object to be assigned
    def product=(new_value : Stripe::ClimateOrderProduct?)
      raise ArgumentError.new("\"product\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @product = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_substituted_at Object to be assigned
    def product_substituted_at=(new_value : Int64?)
      @product_substituted_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] beneficiary Object to be assigned
    def beneficiary=(new_value : Stripe::ClimateRemovalsBeneficiary?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @beneficiary = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_fees, @amount_subtotal, @amount_total, @canceled_at, @cancellation_reason, @certificate, @confirmed_at, @created, @currency, @delayed_at, @delivered_at, @delivery_details, @expected_delivery_year, @id, @livemode, @metadata, @metric_tons, @object, @product, @product_substituted_at, @status, @beneficiary)
  end
end
