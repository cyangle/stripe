#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostOrdersIdRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "automatic_tax", type: Stripe::AutomaticTax1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::AutomaticTax1? = nil

    @[JSON::Field(key: "billing_details", type: Stripe::PostOrdersRequestBillingDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_details : Stripe::PostOrdersRequestBillingDetails? = nil

    @[JSON::Field(key: "client_permissions", type: Stripe::ClientPermissions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_permissions : Stripe::ClientPermissions? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # The customer associated with this order.
    @[JSON::Field(key: "customer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer : String? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "discounts", type: Stripe::PostOrdersIdRequestDiscounts?, default: nil, required: false, nullable: false, emit_null: false)]
    getter discounts : Stripe::PostOrdersIdRequestDiscounts? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # The IP address of the purchaser for this order.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ip_address : String? = nil

    # A list of line items the customer is ordering. Each line item includes information about the product, the quantity, and the resulting cost.
    @[JSON::Field(key: "line_items", type: Array(Stripe::UpdateParams)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter line_items : Array(Stripe::UpdateParams)? = nil

    @[JSON::Field(key: "metadata", type: Stripe::PostAccountRequestMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::PostAccountRequestMetadata? = nil

    @[JSON::Field(key: "payment", type: Stripe::UpdateParams1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment : Stripe::UpdateParams1? = nil

    @[JSON::Field(key: "shipping_cost", type: Stripe::PostOrdersRequestShippingCost?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping_cost : Stripe::PostOrdersRequestShippingCost? = nil

    @[JSON::Field(key: "shipping_details", type: Stripe::PostOrdersRequestShippingDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter shipping_details : Stripe::PostOrdersRequestShippingDetails? = nil

    @[JSON::Field(key: "tax_details", type: Stripe::TaxDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_details : Stripe::TaxDetails? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @automatic_tax : Stripe::AutomaticTax1? = nil,
      @billing_details : Stripe::PostOrdersRequestBillingDetails? = nil,
      @client_permissions : Stripe::ClientPermissions? = nil,
      @currency : String? = nil,
      @customer : String? = nil,
      @description : String? = nil,
      @discounts : Stripe::PostOrdersIdRequestDiscounts? = nil,
      @expand : Array(String)? = nil,
      @ip_address : String? = nil,
      @line_items : Array(Stripe::UpdateParams)? = nil,
      @metadata : Stripe::PostAccountRequestMetadata? = nil,
      @payment : Stripe::UpdateParams1? = nil,
      @shipping_cost : Stripe::PostOrdersRequestShippingCost? = nil,
      @shipping_details : Stripe::PostOrdersRequestShippingDetails? = nil,
      @tax_details : Stripe::TaxDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _automatic_tax = @automatic_tax
        if _automatic_tax.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax"))
        end
      end
      if _billing_details = @billing_details
        if _billing_details.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_billing_details.list_invalid_properties_for("billing_details"))
        end
      end
      if _client_permissions = @client_permissions
        if _client_permissions.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_client_permissions.list_invalid_properties_for("client_permissions"))
        end
      end

      if _customer = @customer
        if _customer.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _discounts = @discounts
        if _discounts.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_discounts.list_invalid_properties_for("discounts"))
        end
      end

      if _line_items = @line_items
        if _line_items.is_a?(Array)
          _line_items.each do |item|
            if item.is_a?(OpenApi::Validatable)
              invalid_properties.concat(item.list_invalid_properties_for("line_items"))
            end
          end
        end
      end
      if _metadata = @metadata
        if _metadata.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_metadata.list_invalid_properties_for("metadata"))
        end
      end
      if _payment = @payment
        if _payment.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_payment.list_invalid_properties_for("payment"))
        end
      end
      if _shipping_cost = @shipping_cost
        if _shipping_cost.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_shipping_cost.list_invalid_properties_for("shipping_cost"))
        end
      end
      if _shipping_details = @shipping_details
        if _shipping_details.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_shipping_details.list_invalid_properties_for("shipping_details"))
        end
      end
      if _tax_details = @tax_details
        if _tax_details.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_tax_details.list_invalid_properties_for("tax_details"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _automatic_tax = @automatic_tax
        if _automatic_tax.is_a?(OpenApi::Validatable)
          return false unless _automatic_tax.valid?
        end
      end
      if _billing_details = @billing_details
        if _billing_details.is_a?(OpenApi::Validatable)
          return false unless _billing_details.valid?
        end
      end
      if _client_permissions = @client_permissions
        if _client_permissions.is_a?(OpenApi::Validatable)
          return false unless _client_permissions.valid?
        end
      end

      if _customer = @customer
        return false if _customer.to_s.size > 5000
      end
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      if _discounts = @discounts
        if _discounts.is_a?(OpenApi::Validatable)
          return false unless _discounts.valid?
        end
      end

      if _line_items = @line_items
        if _line_items.is_a?(Array)
          _line_items.each do |item|
            if item.is_a?(OpenApi::Validatable)
              return false unless item.valid?
            end
          end
        end
      end
      if _metadata = @metadata
        if _metadata.is_a?(OpenApi::Validatable)
          return false unless _metadata.valid?
        end
      end
      if _payment = @payment
        if _payment.is_a?(OpenApi::Validatable)
          return false unless _payment.valid?
        end
      end
      if _shipping_cost = @shipping_cost
        if _shipping_cost.is_a?(OpenApi::Validatable)
          return false unless _shipping_cost.valid?
        end
      end
      if _shipping_details = @shipping_details
        if _shipping_details.is_a?(OpenApi::Validatable)
          return false unless _shipping_details.valid?
        end
      end
      if _tax_details = @tax_details
        if _tax_details.is_a?(OpenApi::Validatable)
          return false unless _tax_details.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::AutomaticTax1?)
      if automatic_tax.nil?
        return @automatic_tax = nil
      end
      _automatic_tax = automatic_tax.not_nil!
      if _automatic_tax.is_a?(OpenApi::Validatable)
        _automatic_tax.validate
      end
      @automatic_tax = _automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_details Object to be assigned
    def billing_details=(billing_details : Stripe::PostOrdersRequestBillingDetails?)
      if billing_details.nil?
        return @billing_details = nil
      end
      _billing_details = billing_details.not_nil!
      if _billing_details.is_a?(OpenApi::Validatable)
        _billing_details.validate
      end
      @billing_details = _billing_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_permissions Object to be assigned
    def client_permissions=(client_permissions : Stripe::ClientPermissions?)
      if client_permissions.nil?
        return @client_permissions = nil
      end
      _client_permissions = client_permissions.not_nil!
      if _client_permissions.is_a?(OpenApi::Validatable)
        _client_permissions.validate
      end
      @client_permissions = _client_permissions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : String?)
      if customer.nil?
        return @customer = nil
      end
      _customer = customer.not_nil!
      if _customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = _customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(discounts : Stripe::PostOrdersIdRequestDiscounts?)
      if discounts.nil?
        return @discounts = nil
      end
      _discounts = discounts.not_nil!
      if _discounts.is_a?(OpenApi::Validatable)
        _discounts.validate
      end
      @discounts = _discounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      _expand = expand.not_nil!
      @expand = _expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(ip_address : String?)
      if ip_address.nil?
        return @ip_address = nil
      end
      _ip_address = ip_address.not_nil!
      @ip_address = _ip_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(line_items : Array(Stripe::UpdateParams)?)
      if line_items.nil?
        return @line_items = nil
      end
      _line_items = line_items.not_nil!
      if _line_items.is_a?(Array)
        _line_items.each do |item|
          if item.is_a?(OpenApi::Validatable)
            item.validate
          end
        end
      end
      @line_items = _line_items
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Stripe::PostAccountRequestMetadata?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      if _metadata.is_a?(OpenApi::Validatable)
        _metadata.validate
      end
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment Object to be assigned
    def payment=(payment : Stripe::UpdateParams1?)
      if payment.nil?
        return @payment = nil
      end
      _payment = payment.not_nil!
      if _payment.is_a?(OpenApi::Validatable)
        _payment.validate
      end
      @payment = _payment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_cost Object to be assigned
    def shipping_cost=(shipping_cost : Stripe::PostOrdersRequestShippingCost?)
      if shipping_cost.nil?
        return @shipping_cost = nil
      end
      _shipping_cost = shipping_cost.not_nil!
      if _shipping_cost.is_a?(OpenApi::Validatable)
        _shipping_cost.validate
      end
      @shipping_cost = _shipping_cost
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_details Object to be assigned
    def shipping_details=(shipping_details : Stripe::PostOrdersRequestShippingDetails?)
      if shipping_details.nil?
        return @shipping_details = nil
      end
      _shipping_details = shipping_details.not_nil!
      if _shipping_details.is_a?(OpenApi::Validatable)
        _shipping_details.validate
      end
      @shipping_details = _shipping_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_details Object to be assigned
    def tax_details=(tax_details : Stripe::TaxDetails?)
      if tax_details.nil?
        return @tax_details = nil
      end
      _tax_details = tax_details.not_nil!
      if _tax_details.is_a?(OpenApi::Validatable)
        _tax_details.validate
      end
      @tax_details = _tax_details
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@automatic_tax, @billing_details, @client_permissions, @currency, @customer, @description, @discounts, @expand, @ip_address, @line_items, @metadata, @payment, @shipping_cost, @shipping_details, @tax_details)
  end
end
