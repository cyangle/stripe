#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Options for customizing how the account functions within Stripe.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AccountSettings1
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "branding", type: AccountBrandingSettings?)]
    property branding : AccountBrandingSettings?

    @[JSON::Field(key: "card_payments", type: AccountCardPaymentsSettings?)]
    property card_payments : AccountCardPaymentsSettings?

    @[JSON::Field(key: "dashboard", type: AccountDashboardSettings?)]
    property dashboard : AccountDashboardSettings?

    @[JSON::Field(key: "payments", type: AccountPaymentsSettings?)]
    property payments : AccountPaymentsSettings?

    # Optional properties

    @[JSON::Field(key: "bacs_debit_payments", type: AccountBacsDebitPaymentsSettings?, presence: true, ignore_serialize: bacs_debit_payments.nil? && !bacs_debit_payments_present?)]
    property bacs_debit_payments : AccountBacsDebitPaymentsSettings?

    @[JSON::Field(ignore: true)]
    property? bacs_debit_payments_present : Bool = false

    @[JSON::Field(key: "card_issuing", type: AccountCardIssuingSettings?, presence: true, ignore_serialize: card_issuing.nil? && !card_issuing_present?)]
    property card_issuing : AccountCardIssuingSettings?

    @[JSON::Field(ignore: true)]
    property? card_issuing_present : Bool = false

    @[JSON::Field(key: "payouts", type: AccountPayoutSettings?, presence: true, ignore_serialize: payouts.nil? && !payouts_present?)]
    property payouts : AccountPayoutSettings?

    @[JSON::Field(ignore: true)]
    property? payouts_present : Bool = false

    @[JSON::Field(key: "sepa_debit_payments", type: AccountSepaDebitPaymentsSettings?, presence: true, ignore_serialize: sepa_debit_payments.nil? && !sepa_debit_payments_present?)]
    property sepa_debit_payments : AccountSepaDebitPaymentsSettings?

    @[JSON::Field(ignore: true)]
    property? sepa_debit_payments_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::AccountSettings,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @branding : AccountBrandingSettings? = nil,
      @card_payments : AccountCardPaymentsSettings? = nil,
      @dashboard : AccountDashboardSettings? = nil,
      @payments : AccountPaymentsSettings? = nil,
      # Optional properties
      @bacs_debit_payments : AccountBacsDebitPaymentsSettings? = nil,
      @card_issuing : AccountCardIssuingSettings? = nil,
      @payouts : AccountPayoutSettings? = nil,
      @sepa_debit_payments : AccountSepaDebitPaymentsSettings? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@branding, @card_payments, @dashboard, @payments, @bacs_debit_payments, @card_issuing, @payouts, @sepa_debit_payments)
  end
end
