#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class AccountDeclineChargeOn
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
    @[JSON::Field(key: "avs_failure", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter avs_failure : Bool? = nil

    # Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
    @[JSON::Field(key: "cvc_failure", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cvc_failure : Bool? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @avs_failure : Bool? = nil,
      @cvc_failure : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"avs_failure\" is required and cannot be null") if @avs_failure.nil?

      invalid_properties.push("\"cvc_failure\" is required and cannot be null") if @cvc_failure.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @avs_failure.nil?

      return false if @cvc_failure.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] avs_failure Object to be assigned
    def avs_failure=(new_value : Bool?)
      raise ArgumentError.new("\"avs_failure\" is required and cannot be null") if new_value.nil?

      @avs_failure = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cvc_failure Object to be assigned
    def cvc_failure=(new_value : Bool?)
      raise ArgumentError.new("\"cvc_failure\" is required and cannot be null") if new_value.nil?

      @cvc_failure = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@avs_failure, @cvc_failure)
  end
end
