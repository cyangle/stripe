#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./cancellation_details_param_comment"

module Stripe
  class CancellationDetailsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "comment", type: Stripe::CancellationDetailsParamComment?, default: nil, required: false, nullable: false, emit_null: false)]
    getter comment : Stripe::CancellationDetailsParamComment? = nil

    # The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user.
    @[JSON::Field(key: "feedback", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter feedback : String? = nil
    ERROR_MESSAGE_FOR_FEEDBACK = "invalid value for \"feedback\", must be one of [, customer_service, low_quality, missing_features, other, switched_service, too_complex, too_expensive, unused]."
    VALID_VALUES_FOR_FEEDBACK  = String.static_array("", "customer_service", "low_quality", "missing_features", "other", "switched_service", "too_complex", "too_expensive", "unused")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @comment : Stripe::CancellationDetailsParamComment? = nil,
      @feedback : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_comment = @comment).nil?
        invalid_properties.concat(_comment.list_invalid_properties_for("comment")) if _comment.is_a?(OpenApi::Validatable)
      end
      unless (_feedback = @feedback).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_FEEDBACK) unless OpenApi::EnumValidator.valid?(_feedback, VALID_VALUES_FOR_FEEDBACK)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_comment = @comment).nil?
        return false if _comment.is_a?(OpenApi::Validatable) && !_comment.valid?
      end

      unless (_feedback = @feedback).nil?
        return false unless OpenApi::EnumValidator.valid?(_feedback, VALID_VALUES_FOR_FEEDBACK)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] comment Object to be assigned
    def comment=(new_value : Stripe::CancellationDetailsParamComment?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @comment = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] feedback Object to be assigned
    def feedback=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("feedback", new_value, VALID_VALUES_FOR_FEEDBACK)
      end

      @feedback = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@comment, @feedback)
  end
end
