#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class CustomerBalanceCustomerBalanceSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The configuration for how funds that land in the customer cash balance are reconciled.
    @[JSON::Field(key: "reconciliation_mode", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reconciliation_mode : String? = nil
    ERROR_MESSAGE_FOR_RECONCILIATION_MODE = "invalid value for \"reconciliation_mode\", must be one of [automatic, manual]."
    VALID_VALUES_FOR_RECONCILIATION_MODE  = String.static_array("automatic", "manual")

    # A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance
    @[JSON::Field(key: "using_merchant_default", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter using_merchant_default : Bool? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @reconciliation_mode : String? = nil,
      @using_merchant_default : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"reconciliation_mode\" is required and cannot be null") if @reconciliation_mode.nil?

      unless (_reconciliation_mode = @reconciliation_mode).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_RECONCILIATION_MODE) unless OpenApi::EnumValidator.valid?(_reconciliation_mode, VALID_VALUES_FOR_RECONCILIATION_MODE)
      end
      invalid_properties.push("\"using_merchant_default\" is required and cannot be null") if @using_merchant_default.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @reconciliation_mode.nil?
      unless (_reconciliation_mode = @reconciliation_mode).nil?
        return false unless OpenApi::EnumValidator.valid?(_reconciliation_mode, VALID_VALUES_FOR_RECONCILIATION_MODE)
      end

      return false if @using_merchant_default.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reconciliation_mode Object to be assigned
    def reconciliation_mode=(new_value : String?)
      raise ArgumentError.new("\"reconciliation_mode\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("reconciliation_mode", new_value, VALID_VALUES_FOR_RECONCILIATION_MODE)
      end

      @reconciliation_mode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] using_merchant_default Object to be assigned
    def using_merchant_default=(new_value : Bool?)
      raise ArgumentError.new("\"using_merchant_default\" is required and cannot be null") if new_value.nil?

      @using_merchant_default = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@reconciliation_mode, @using_merchant_default)
  end
end
