#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CustomerBalanceCustomerBalanceSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # The configuration for how funds that land in the customer cash balance are reconciled.
    @[JSON::Field(key: "reconciliation_mode", type: String)]
    getter reconciliation_mode : String

    ENUM_VALIDATOR_FOR_RECONCILIATION_MODE = EnumValidator.new("reconciliation_mode", "String", ["automatic", "manual"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @reconciliation_mode : String)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push(ENUM_VALIDATOR_FOR_RECONCILIATION_MODE.error_message) unless ENUM_VALIDATOR_FOR_RECONCILIATION_MODE.valid?(@reconciliation_mode, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_RECONCILIATION_MODE.valid?(@reconciliation_mode, false)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reconciliation_mode Object to be assigned
    def reconciliation_mode=(reconciliation_mode)
      ENUM_VALIDATOR_FOR_RECONCILIATION_MODE.valid!(reconciliation_mode, false)
      @reconciliation_mode = reconciliation_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        reconciliation_mode == o.reconciliation_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@reconciliation_mode)
  end
end
