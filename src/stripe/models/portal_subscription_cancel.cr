#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PortalSubscriptionCancel
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "cancellation_reason", type: PortalSubscriptionCancellationReason)]
    property cancellation_reason : PortalSubscriptionCancellationReason

    # Whether the feature is enabled.
    @[JSON::Field(key: "enabled", type: Bool)]
    property enabled : Bool

    # Whether to cancel subscriptions immediately or at the end of the billing period.
    @[JSON::Field(key: "mode", type: String)]
    getter mode : String

    ENUM_VALIDATOR_FOR_MODE = EnumValidator.new("mode", "String", ["at_period_end", "immediately"])

    # Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
    @[JSON::Field(key: "proration_behavior", type: String)]
    getter proration_behavior : String

    ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR = EnumValidator.new("proration_behavior", "String", ["always_invoice", "create_prorations", "none"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @cancellation_reason : PortalSubscriptionCancellationReason, 
      @enabled : Bool, 
      @mode : String, 
      @proration_behavior : String
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_MODE.error_message) unless ENUM_VALIDATOR_FOR_MODE.valid?(@mode, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_MODE.valid?(@mode, false)
      return false unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior, false)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(mode)
      ENUM_VALIDATOR_FOR_MODE.valid!(mode, false)
      @mode = mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_behavior Object to be assigned
    def proration_behavior=(proration_behavior)
      ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid!(proration_behavior, false)
      @proration_behavior = proration_behavior
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@cancellation_reason, @enabled, @mode, @proration_behavior)
  end
end
