#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class TransferDataSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # ID of an existing, connected Stripe account.
    @[JSON::Field(key: "destination", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter destination : String? = nil
    MAX_LENGTH_FOR_DESTINATION = 5000

    # End of Required Properties

    # Optional Properties

    # The amount that will be transferred automatically when the invoice is paid. If no amount is set, the full amount is transferred.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
    @[JSON::Field(key: "amount_percent", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount_percent : Float64? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @destination : String? = nil,
      # Optional properties
      @amount : Int64? = nil,
      @amount_percent : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"destination\" is required and cannot be null") if @destination.nil?

      unless (_destination = @destination).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("destination", _destination.to_s.size, MAX_LENGTH_FOR_DESTINATION)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @destination.nil?
      unless (_destination = @destination).nil?
        return false if _destination.to_s.size > MAX_LENGTH_FOR_DESTINATION
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination Object to be assigned
    def destination=(new_value : String?)
      raise ArgumentError.new("\"destination\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("destination", new_value.to_s.size, MAX_LENGTH_FOR_DESTINATION)
      end

      @destination = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_percent Object to be assigned
    def amount_percent=(new_value : Float64?)
      @amount_percent = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@destination, @amount, @amount_percent)
  end
end
