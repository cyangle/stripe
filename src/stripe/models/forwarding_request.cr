#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./forwarding_request_request_context"
require "./forwarding_request_request_details"
require "./forwarding_request_response_details"

module Stripe
  # Instructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment_method into the request.  Stripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.  You can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.  Forwarding Requests are synchronous requests that return a response or time out according to Stripeâ€™s limits.  Related guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).
  class ForwardingRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [forwarding.request]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("forwarding.request")

    # The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.
    @[JSON::Field(key: "payment_method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_method : String? = nil
    MAX_LENGTH_FOR_PAYMENT_METHOD = 5000

    # The field kinds to be replaced in the forwarded request.
    @[JSON::Field(key: "replacements", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter replacements : Array(String)? = nil
    ERROR_MESSAGE_FOR_REPLACEMENTS = "invalid value for \"replacements\", must be one of [card_cvc, card_expiry, card_number, cardholder_name]."
    VALID_VALUES_FOR_REPLACEMENTS  = String.static_array("card_cvc", "card_expiry", "card_number", "cardholder_name")

    @[JSON::Field(key: "request_context", type: Stripe::ForwardingRequestRequestContext?, default: nil, required: true, nullable: true, emit_null: true)]
    getter request_context : Stripe::ForwardingRequestRequestContext? = nil

    @[JSON::Field(key: "request_details", type: Stripe::ForwardingRequestRequestDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter request_details : Stripe::ForwardingRequestRequestDetails? = nil

    @[JSON::Field(key: "response_details", type: Stripe::ForwardingRequestResponseDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter response_details : Stripe::ForwardingRequestResponseDetails? = nil

    # The destination URL for the forwarded request. Must be supported by the config.
    @[JSON::Field(key: "url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter url : String? = nil
    MAX_LENGTH_FOR_URL = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @payment_method : String? = nil,
      @replacements : Array(String)? = nil,
      @request_context : Stripe::ForwardingRequestRequestContext? = nil,
      @request_details : Stripe::ForwardingRequestRequestDetails? = nil,
      @response_details : Stripe::ForwardingRequestResponseDetails? = nil,
      @url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      invalid_properties.push("\"payment_method\" is required and cannot be null") if @payment_method.nil?

      unless (_payment_method = @payment_method).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("payment_method", _payment_method.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"replacements\" is required and cannot be null") if @replacements.nil?

      unless (_replacements = @replacements).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REPLACEMENTS) unless OpenApi::EnumValidator.valid?(_replacements, VALID_VALUES_FOR_REPLACEMENTS)
      end
      unless (_request_context = @request_context).nil?
        invalid_properties.concat(_request_context.list_invalid_properties_for("request_context")) if _request_context.is_a?(OpenApi::Validatable)
      end
      unless (_request_details = @request_details).nil?
        invalid_properties.concat(_request_details.list_invalid_properties_for("request_details")) if _request_details.is_a?(OpenApi::Validatable)
      end
      unless (_response_details = @response_details).nil?
        invalid_properties.concat(_response_details.list_invalid_properties_for("response_details")) if _response_details.is_a?(OpenApi::Validatable)
      end
      unless (_url = @url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("url", _url.to_s.size, MAX_LENGTH_FOR_URL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      return false if @payment_method.nil?
      unless (_payment_method = @payment_method).nil?
        return false if _payment_method.to_s.size > MAX_LENGTH_FOR_PAYMENT_METHOD
      end

      return false if @replacements.nil?
      unless (_replacements = @replacements).nil?
        return false unless OpenApi::EnumValidator.valid?(_replacements, VALID_VALUES_FOR_REPLACEMENTS)
      end

      unless (_request_context = @request_context).nil?
        return false if _request_context.is_a?(OpenApi::Validatable) && !_request_context.valid?
      end

      unless (_request_details = @request_details).nil?
        return false if _request_details.is_a?(OpenApi::Validatable) && !_request_details.valid?
      end

      unless (_response_details = @response_details).nil?
        return false if _response_details.is_a?(OpenApi::Validatable) && !_response_details.valid?
      end

      unless (_url = @url).nil?
        return false if _url.to_s.size > MAX_LENGTH_FOR_URL
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(new_value : String?)
      raise ArgumentError.new("\"payment_method\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("payment_method", new_value.to_s.size, MAX_LENGTH_FOR_PAYMENT_METHOD)
      end

      @payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replacements Object to be assigned
    def replacements=(new_value : Array(String)?)
      raise ArgumentError.new("\"replacements\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("replacements", new_value, VALID_VALUES_FOR_REPLACEMENTS)
      end

      @replacements = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_context Object to be assigned
    def request_context=(new_value : Stripe::ForwardingRequestRequestContext?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @request_context = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_details Object to be assigned
    def request_details=(new_value : Stripe::ForwardingRequestRequestDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @request_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] response_details Object to be assigned
    def response_details=(new_value : Stripe::ForwardingRequestResponseDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @response_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("url", new_value.to_s.size, MAX_LENGTH_FOR_URL)
      end

      @url = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @id, @livemode, @object, @payment_method, @replacements, @request_context, @request_details, @response_details, @url)
  end
end
