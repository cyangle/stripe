#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./connect_embedded_account_config_claim"
require "./connect_embedded_base_config_claim"
require "./connect_embedded_payments_config_claim"
require "./connect_embedded_payouts_config_claim"

module Stripe
  #
  class ConnectEmbeddedAccountSessionCreateComponents
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "account_management", type: Stripe::ConnectEmbeddedAccountConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_management : Stripe::ConnectEmbeddedAccountConfigClaim? = nil

    @[JSON::Field(key: "account_onboarding", type: Stripe::ConnectEmbeddedAccountConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_onboarding : Stripe::ConnectEmbeddedAccountConfigClaim? = nil

    @[JSON::Field(key: "balances", type: Stripe::ConnectEmbeddedPayoutsConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter balances : Stripe::ConnectEmbeddedPayoutsConfigClaim? = nil

    @[JSON::Field(key: "documents", type: Stripe::ConnectEmbeddedBaseConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter documents : Stripe::ConnectEmbeddedBaseConfigClaim? = nil

    @[JSON::Field(key: "notification_banner", type: Stripe::ConnectEmbeddedAccountConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter notification_banner : Stripe::ConnectEmbeddedAccountConfigClaim? = nil

    @[JSON::Field(key: "payment_details", type: Stripe::ConnectEmbeddedPaymentsConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_details : Stripe::ConnectEmbeddedPaymentsConfigClaim? = nil

    @[JSON::Field(key: "payments", type: Stripe::ConnectEmbeddedPaymentsConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payments : Stripe::ConnectEmbeddedPaymentsConfigClaim? = nil

    @[JSON::Field(key: "payouts", type: Stripe::ConnectEmbeddedPayoutsConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payouts : Stripe::ConnectEmbeddedPayoutsConfigClaim? = nil

    @[JSON::Field(key: "payouts_list", type: Stripe::ConnectEmbeddedBaseConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payouts_list : Stripe::ConnectEmbeddedBaseConfigClaim? = nil

    @[JSON::Field(key: "tax_registrations", type: Stripe::ConnectEmbeddedBaseConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_registrations : Stripe::ConnectEmbeddedBaseConfigClaim? = nil

    @[JSON::Field(key: "tax_settings", type: Stripe::ConnectEmbeddedBaseConfigClaim?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_settings : Stripe::ConnectEmbeddedBaseConfigClaim? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_management : Stripe::ConnectEmbeddedAccountConfigClaim? = nil,
      @account_onboarding : Stripe::ConnectEmbeddedAccountConfigClaim? = nil,
      @balances : Stripe::ConnectEmbeddedPayoutsConfigClaim? = nil,
      @documents : Stripe::ConnectEmbeddedBaseConfigClaim? = nil,
      @notification_banner : Stripe::ConnectEmbeddedAccountConfigClaim? = nil,
      @payment_details : Stripe::ConnectEmbeddedPaymentsConfigClaim? = nil,
      @payments : Stripe::ConnectEmbeddedPaymentsConfigClaim? = nil,
      @payouts : Stripe::ConnectEmbeddedPayoutsConfigClaim? = nil,
      @payouts_list : Stripe::ConnectEmbeddedBaseConfigClaim? = nil,
      @tax_registrations : Stripe::ConnectEmbeddedBaseConfigClaim? = nil,
      @tax_settings : Stripe::ConnectEmbeddedBaseConfigClaim? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account_management\" is required and cannot be null") if @account_management.nil?

      unless (_account_management = @account_management).nil?
        invalid_properties.concat(_account_management.list_invalid_properties_for("account_management")) if _account_management.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"account_onboarding\" is required and cannot be null") if @account_onboarding.nil?

      unless (_account_onboarding = @account_onboarding).nil?
        invalid_properties.concat(_account_onboarding.list_invalid_properties_for("account_onboarding")) if _account_onboarding.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"balances\" is required and cannot be null") if @balances.nil?

      unless (_balances = @balances).nil?
        invalid_properties.concat(_balances.list_invalid_properties_for("balances")) if _balances.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"documents\" is required and cannot be null") if @documents.nil?

      unless (_documents = @documents).nil?
        invalid_properties.concat(_documents.list_invalid_properties_for("documents")) if _documents.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"notification_banner\" is required and cannot be null") if @notification_banner.nil?

      unless (_notification_banner = @notification_banner).nil?
        invalid_properties.concat(_notification_banner.list_invalid_properties_for("notification_banner")) if _notification_banner.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"payment_details\" is required and cannot be null") if @payment_details.nil?

      unless (_payment_details = @payment_details).nil?
        invalid_properties.concat(_payment_details.list_invalid_properties_for("payment_details")) if _payment_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"payments\" is required and cannot be null") if @payments.nil?

      unless (_payments = @payments).nil?
        invalid_properties.concat(_payments.list_invalid_properties_for("payments")) if _payments.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"payouts\" is required and cannot be null") if @payouts.nil?

      unless (_payouts = @payouts).nil?
        invalid_properties.concat(_payouts.list_invalid_properties_for("payouts")) if _payouts.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"payouts_list\" is required and cannot be null") if @payouts_list.nil?

      unless (_payouts_list = @payouts_list).nil?
        invalid_properties.concat(_payouts_list.list_invalid_properties_for("payouts_list")) if _payouts_list.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"tax_registrations\" is required and cannot be null") if @tax_registrations.nil?

      unless (_tax_registrations = @tax_registrations).nil?
        invalid_properties.concat(_tax_registrations.list_invalid_properties_for("tax_registrations")) if _tax_registrations.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"tax_settings\" is required and cannot be null") if @tax_settings.nil?

      unless (_tax_settings = @tax_settings).nil?
        invalid_properties.concat(_tax_settings.list_invalid_properties_for("tax_settings")) if _tax_settings.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account_management.nil?
      unless (_account_management = @account_management).nil?
        return false if _account_management.is_a?(OpenApi::Validatable) && !_account_management.valid?
      end

      return false if @account_onboarding.nil?
      unless (_account_onboarding = @account_onboarding).nil?
        return false if _account_onboarding.is_a?(OpenApi::Validatable) && !_account_onboarding.valid?
      end

      return false if @balances.nil?
      unless (_balances = @balances).nil?
        return false if _balances.is_a?(OpenApi::Validatable) && !_balances.valid?
      end

      return false if @documents.nil?
      unless (_documents = @documents).nil?
        return false if _documents.is_a?(OpenApi::Validatable) && !_documents.valid?
      end

      return false if @notification_banner.nil?
      unless (_notification_banner = @notification_banner).nil?
        return false if _notification_banner.is_a?(OpenApi::Validatable) && !_notification_banner.valid?
      end

      return false if @payment_details.nil?
      unless (_payment_details = @payment_details).nil?
        return false if _payment_details.is_a?(OpenApi::Validatable) && !_payment_details.valid?
      end

      return false if @payments.nil?
      unless (_payments = @payments).nil?
        return false if _payments.is_a?(OpenApi::Validatable) && !_payments.valid?
      end

      return false if @payouts.nil?
      unless (_payouts = @payouts).nil?
        return false if _payouts.is_a?(OpenApi::Validatable) && !_payouts.valid?
      end

      return false if @payouts_list.nil?
      unless (_payouts_list = @payouts_list).nil?
        return false if _payouts_list.is_a?(OpenApi::Validatable) && !_payouts_list.valid?
      end

      return false if @tax_registrations.nil?
      unless (_tax_registrations = @tax_registrations).nil?
        return false if _tax_registrations.is_a?(OpenApi::Validatable) && !_tax_registrations.valid?
      end

      return false if @tax_settings.nil?
      unless (_tax_settings = @tax_settings).nil?
        return false if _tax_settings.is_a?(OpenApi::Validatable) && !_tax_settings.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_management Object to be assigned
    def account_management=(new_value : Stripe::ConnectEmbeddedAccountConfigClaim?)
      raise ArgumentError.new("\"account_management\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @account_management = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_onboarding Object to be assigned
    def account_onboarding=(new_value : Stripe::ConnectEmbeddedAccountConfigClaim?)
      raise ArgumentError.new("\"account_onboarding\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @account_onboarding = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balances Object to be assigned
    def balances=(new_value : Stripe::ConnectEmbeddedPayoutsConfigClaim?)
      raise ArgumentError.new("\"balances\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @balances = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] documents Object to be assigned
    def documents=(new_value : Stripe::ConnectEmbeddedBaseConfigClaim?)
      raise ArgumentError.new("\"documents\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @documents = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] notification_banner Object to be assigned
    def notification_banner=(new_value : Stripe::ConnectEmbeddedAccountConfigClaim?)
      raise ArgumentError.new("\"notification_banner\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @notification_banner = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_details Object to be assigned
    def payment_details=(new_value : Stripe::ConnectEmbeddedPaymentsConfigClaim?)
      raise ArgumentError.new("\"payment_details\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payments Object to be assigned
    def payments=(new_value : Stripe::ConnectEmbeddedPaymentsConfigClaim?)
      raise ArgumentError.new("\"payments\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payouts Object to be assigned
    def payouts=(new_value : Stripe::ConnectEmbeddedPayoutsConfigClaim?)
      raise ArgumentError.new("\"payouts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payouts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payouts_list Object to be assigned
    def payouts_list=(new_value : Stripe::ConnectEmbeddedBaseConfigClaim?)
      raise ArgumentError.new("\"payouts_list\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payouts_list = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_registrations Object to be assigned
    def tax_registrations=(new_value : Stripe::ConnectEmbeddedBaseConfigClaim?)
      raise ArgumentError.new("\"tax_registrations\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_registrations = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_settings Object to be assigned
    def tax_settings=(new_value : Stripe::ConnectEmbeddedBaseConfigClaim?)
      raise ArgumentError.new("\"tax_settings\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_settings = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_management, @account_onboarding, @balances, @documents, @notification_banner, @payment_details, @payments, @payouts, @payouts_list, @tax_registrations, @tax_settings)
  end
end
