#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./connect_account_reference"
require "./invoice_data_params_account_tax_ids"
require "./invoice_data_params_custom_fields"
require "./invoice_data_params_rendering_options"
require "./post_accounts_request_metadata"

module Stripe
  class InvoiceSettingsParams
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "account_tax_ids", type: Stripe::InvoiceDataParamsAccountTaxIds?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_tax_ids : Stripe::InvoiceDataParamsAccountTaxIds? = nil

    @[JSON::Field(key: "custom_fields", type: Stripe::InvoiceDataParamsCustomFields?, default: nil, required: false, nullable: false, emit_null: false)]
    getter custom_fields : Stripe::InvoiceDataParamsCustomFields? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 1500

    # Default footer to be displayed on invoices for this customer.
    @[JSON::Field(key: "footer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter footer : String? = nil
    MAX_LENGTH_FOR_FOOTER = 5000

    @[JSON::Field(key: "issuer", type: Stripe::ConnectAccountReference?, default: nil, required: false, nullable: false, emit_null: false)]
    getter issuer : Stripe::ConnectAccountReference? = nil

    @[JSON::Field(key: "metadata", type: Stripe::PostAccountsRequestMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::PostAccountsRequestMetadata? = nil

    @[JSON::Field(key: "rendering_options", type: Stripe::InvoiceDataParamsRenderingOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter rendering_options : Stripe::InvoiceDataParamsRenderingOptions? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_tax_ids : Stripe::InvoiceDataParamsAccountTaxIds? = nil,
      @custom_fields : Stripe::InvoiceDataParamsCustomFields? = nil,
      @description : String? = nil,
      @footer : String? = nil,
      @issuer : Stripe::ConnectAccountReference? = nil,
      @metadata : Stripe::PostAccountsRequestMetadata? = nil,
      @rendering_options : Stripe::InvoiceDataParamsRenderingOptions? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_tax_ids = @account_tax_ids).nil?
        invalid_properties.concat(_account_tax_ids.list_invalid_properties_for("account_tax_ids")) if _account_tax_ids.is_a?(OpenApi::Validatable)
      end
      unless (_custom_fields = @custom_fields).nil?
        invalid_properties.concat(_custom_fields.list_invalid_properties_for("custom_fields")) if _custom_fields.is_a?(OpenApi::Validatable)
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_footer = @footer).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("footer", _footer.to_s.size, MAX_LENGTH_FOR_FOOTER)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_issuer = @issuer).nil?
        invalid_properties.concat(_issuer.list_invalid_properties_for("issuer")) if _issuer.is_a?(OpenApi::Validatable)
      end
      unless (_metadata = @metadata).nil?
        invalid_properties.concat(_metadata.list_invalid_properties_for("metadata")) if _metadata.is_a?(OpenApi::Validatable)
      end
      unless (_rendering_options = @rendering_options).nil?
        invalid_properties.concat(_rendering_options.list_invalid_properties_for("rendering_options")) if _rendering_options.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_tax_ids = @account_tax_ids).nil?
        return false if _account_tax_ids.is_a?(OpenApi::Validatable) && !_account_tax_ids.valid?
      end

      unless (_custom_fields = @custom_fields).nil?
        return false if _custom_fields.is_a?(OpenApi::Validatable) && !_custom_fields.valid?
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_footer = @footer).nil?
        return false if _footer.to_s.size > MAX_LENGTH_FOR_FOOTER
      end

      unless (_issuer = @issuer).nil?
        return false if _issuer.is_a?(OpenApi::Validatable) && !_issuer.valid?
      end

      unless (_metadata = @metadata).nil?
        return false if _metadata.is_a?(OpenApi::Validatable) && !_metadata.valid?
      end

      unless (_rendering_options = @rendering_options).nil?
        return false if _rendering_options.is_a?(OpenApi::Validatable) && !_rendering_options.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_tax_ids Object to be assigned
    def account_tax_ids=(new_value : Stripe::InvoiceDataParamsAccountTaxIds?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @account_tax_ids = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(new_value : Stripe::InvoiceDataParamsCustomFields?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @custom_fields = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] footer Object to be assigned
    def footer=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("footer", new_value.to_s.size, MAX_LENGTH_FOR_FOOTER)
      end

      @footer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuer Object to be assigned
    def issuer=(new_value : Stripe::ConnectAccountReference?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @issuer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Stripe::PostAccountsRequestMetadata?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rendering_options Object to be assigned
    def rendering_options=(new_value : Stripe::InvoiceDataParamsRenderingOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @rendering_options = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_tax_ids, @custom_fields, @description, @footer, @issuer, @metadata, @rendering_options)
  end
end
