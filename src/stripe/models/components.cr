#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./buy_button_param"
require "./payment_element_param"
require "./pricing_table_param"

module Stripe
  class Components
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "buy_button", type: Stripe::BuyButtonParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter buy_button : Stripe::BuyButtonParam? = nil

    @[JSON::Field(key: "payment_element", type: Stripe::PaymentElementParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_element : Stripe::PaymentElementParam? = nil

    @[JSON::Field(key: "pricing_table", type: Stripe::PricingTableParam?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pricing_table : Stripe::PricingTableParam? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @buy_button : Stripe::BuyButtonParam? = nil,
      @payment_element : Stripe::PaymentElementParam? = nil,
      @pricing_table : Stripe::PricingTableParam? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_buy_button = @buy_button).nil?
        invalid_properties.concat(_buy_button.list_invalid_properties_for("buy_button")) if _buy_button.is_a?(OpenApi::Validatable)
      end
      unless (_payment_element = @payment_element).nil?
        invalid_properties.concat(_payment_element.list_invalid_properties_for("payment_element")) if _payment_element.is_a?(OpenApi::Validatable)
      end
      unless (_pricing_table = @pricing_table).nil?
        invalid_properties.concat(_pricing_table.list_invalid_properties_for("pricing_table")) if _pricing_table.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_buy_button = @buy_button).nil?
        return false if _buy_button.is_a?(OpenApi::Validatable) && !_buy_button.valid?
      end

      unless (_payment_element = @payment_element).nil?
        return false if _payment_element.is_a?(OpenApi::Validatable) && !_payment_element.valid?
      end

      unless (_pricing_table = @pricing_table).nil?
        return false if _pricing_table.is_a?(OpenApi::Validatable) && !_pricing_table.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] buy_button Object to be assigned
    def buy_button=(new_value : Stripe::BuyButtonParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @buy_button = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_element Object to be assigned
    def payment_element=(new_value : Stripe::PaymentElementParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_element = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pricing_table Object to be assigned
    def pricing_table=(new_value : Stripe::PricingTableParam?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @pricing_table = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@buy_button, @payment_element, @pricing_table)
  end
end
