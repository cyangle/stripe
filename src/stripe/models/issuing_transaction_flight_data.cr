#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class IssuingTransactionFlightData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The time that the flight departed.
    @[JSON::Field(key: "departure_at", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: departure_at.nil? && !departure_at_present?)]
    getter departure_at : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? departure_at_present : Bool = false

    # The name of the passenger.
    @[JSON::Field(key: "passenger_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: passenger_name.nil? && !passenger_name_present?)]
    getter passenger_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? passenger_name_present : Bool = false

    # Whether the ticket is refundable.
    @[JSON::Field(key: "refundable", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refundable.nil? && !refundable_present?)]
    getter refundable : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? refundable_present : Bool = false

    # The legs of the trip.
    @[JSON::Field(key: "segments", type: Array(Stripe::IssuingTransactionFlightDataLeg)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: segments.nil? && !segments_present?)]
    getter segments : Array(Stripe::IssuingTransactionFlightDataLeg)? = nil

    @[JSON::Field(ignore: true)]
    property? segments_present : Bool = false

    # The travel agency that issued the ticket.
    @[JSON::Field(key: "travel_agency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: travel_agency.nil? && !travel_agency_present?)]
    getter travel_agency : String? = nil

    @[JSON::Field(ignore: true)]
    property? travel_agency_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @departure_at : Int64? = nil,
      @passenger_name : String? = nil,
      @refundable : Bool? = nil,
      @segments : Array(Stripe::IssuingTransactionFlightDataLeg)? = nil,
      @travel_agency : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _passenger_name = @passenger_name
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("passenger_name", _passenger_name.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end

      if _segments = @segments
        invalid_properties.concat(OpenApi::ArrayValidator.list_invalid_properties_for(key: "segments", array: _segments)) if _segments.is_a?(Array)
      end
      if _travel_agency = @travel_agency
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("travel_agency", _travel_agency.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _passenger_name = @passenger_name
        return false if _passenger_name.to_s.size > 5000
      end

      if _segments = @segments
        return false if _segments.is_a?(Array) && !OpenApi::ArrayValidator.valid?(array: _segments)
      end

      if _travel_agency = @travel_agency
        return false if _travel_agency.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] departure_at Object to be assigned
    def departure_at=(departure_at : Int64?)
      if departure_at.nil?
        return @departure_at = nil
      end
      _departure_at = departure_at.not_nil!
      @departure_at = _departure_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] passenger_name Object to be assigned
    def passenger_name=(passenger_name : String?)
      if passenger_name.nil?
        return @passenger_name = nil
      end
      _passenger_name = passenger_name.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("passenger_name", _passenger_name.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @passenger_name = _passenger_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refundable Object to be assigned
    def refundable=(refundable : Bool?)
      if refundable.nil?
        return @refundable = nil
      end
      _refundable = refundable.not_nil!
      @refundable = _refundable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segments Object to be assigned
    def segments=(segments : Array(Stripe::IssuingTransactionFlightDataLeg)?)
      if segments.nil?
        return @segments = nil
      end
      _segments = segments.not_nil!
      OpenApi::ArrayValidator.validate(array: _segments) if _segments.is_a?(Array)
      @segments = _segments
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] travel_agency Object to be assigned
    def travel_agency=(travel_agency : String?)
      if travel_agency.nil?
        return @travel_agency = nil
      end
      _travel_agency = travel_agency.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("travel_agency", _travel_agency.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @travel_agency = _travel_agency
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@departure_at, @departure_at_present, @passenger_name, @passenger_name_present, @refundable, @refundable_present, @segments, @segments_present, @travel_agency, @travel_agency_present)
  end
end
