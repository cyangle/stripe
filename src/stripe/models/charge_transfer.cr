#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ChargeTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Amount in %s to be transferred.
    @[JSON::Field(key: "amount", type: Int64?)]
    property amount : Int64?

    # Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
    @[JSON::Field(key: "amount_reversed", type: Int64?)]
    property amount_reversed : Int64?

    @[JSON::Field(key: "balance_transaction", type: TransferBalanceTransaction, presence: true, ignore_serialize: balance_transaction.nil? && !balance_transaction_present?)]
    property balance_transaction : TransferBalanceTransaction

    @[JSON::Field(ignore: true)]
    property? balance_transaction_present : Bool = false

    # Time that this record of the transfer was first created.
    @[JSON::Field(key: "created", type: Int64?)]
    property created : Int64?

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?)]
    property currency : String?

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "destination", type: TransferDestination, presence: true, ignore_serialize: destination.nil? && !destination_present?)]
    property destination : TransferDestination

    @[JSON::Field(ignore: true)]
    property? destination_present : Bool = false

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?)]
    getter id : String?

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?)]
    property livemode : Bool?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?)]
    property metadata : Hash(String, String)?

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?)]
    getter object : String?

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["transfer"])

    @[JSON::Field(key: "reversals", type: TransferReversalList1?)]
    property reversals : TransferReversalList1?

    # Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
    @[JSON::Field(key: "reversed", type: Bool?)]
    property reversed : Bool?

    @[JSON::Field(key: "source_transaction", type: TransferSourceTransaction, presence: true, ignore_serialize: source_transaction.nil? && !source_transaction_present?)]
    property source_transaction : TransferSourceTransaction

    @[JSON::Field(ignore: true)]
    property? source_transaction_present : Bool = false

    # The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
    @[JSON::Field(key: "source_type", type: String, presence: true, ignore_serialize: source_type.nil? && !source_type_present?)]
    getter source_type : String

    @[JSON::Field(ignore: true)]
    property? source_type_present : Bool = false

    # A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    @[JSON::Field(key: "transfer_group", type: String, presence: true, ignore_serialize: transfer_group.nil? && !transfer_group_present?)]
    getter transfer_group : String

    @[JSON::Field(ignore: true)]
    property? transfer_group_present : Bool = false

    # Optional properties
    @[JSON::Field(key: "destination_payment", type: TransferDestinationPayment?, presence: true, ignore_serialize: destination_payment.nil? && !destination_payment_present?)]
    property destination_payment : TransferDestinationPayment?

    @[JSON::Field(ignore: true)]
    property? destination_payment_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        String,
        Stripe::Transfer,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @amount_reversed : Int64, @balance_transaction : TransferBalanceTransaction?, @created : Int64, @currency : String, @description : String?, @destination : TransferDestination?, @id : String, @livemode : Bool, @metadata : Hash(String, String), @object : String, @reversals : TransferReversalList1, @reversed : Bool, @source_transaction : TransferSourceTransaction?, @source_type : String?, @transfer_group : String?, @destination_payment : TransferDestinationPayment? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if @source_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      if @transfer_group.to_s.size > 5000
        invalid_properties.push("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @description.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @source_type.to_s.size > 5000
      return false if @transfer_group.to_s.size > 5000
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] source_type Value to be assigned
    def source_type=(source_type)
      if source_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      @source_type = source_type
    end

    # Custom attribute writer method with validation
    # @param [Object] transfer_group Value to be assigned
    def transfer_group=(transfer_group)
      if transfer_group.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      @transfer_group = transfer_group
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        amount_reversed == o.amount_reversed &&
        balance_transaction == o.balance_transaction &&
        created == o.created &&
        currency == o.currency &&
        description == o.description &&
        destination == o.destination &&
        destination_payment == o.destination_payment &&
        id == o.id &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        object == o.object &&
        reversals == o.reversals &&
        reversed == o.reversed &&
        source_transaction == o.source_transaction &&
        source_type == o.source_type &&
        transfer_group == o.transfer_group
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@amount, @amount_reversed, @balance_transaction, @created, @currency, @description, @destination, @destination_payment, @id, @livemode, @metadata, @object, @reversals, @reversed, @source_transaction, @source_type, @transfer_group)
  end
end
