#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_method_options_card_present_routing"

module Stripe
  #
  class PaymentMethodOptionsCardPresent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)
    @[JSON::Field(key: "request_extended_authorization", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter request_extended_authorization : Bool? = nil

    # Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
    @[JSON::Field(key: "request_incremental_authorization_support", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter request_incremental_authorization_support : Bool? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "routing", type: Stripe::PaymentMethodOptionsCardPresentRouting?, default: nil, required: false, nullable: false, emit_null: false)]
    getter routing : Stripe::PaymentMethodOptionsCardPresentRouting? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @request_extended_authorization : Bool? = nil,
      @request_incremental_authorization_support : Bool? = nil,
      # Optional properties
      @routing : Stripe::PaymentMethodOptionsCardPresentRouting? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_routing = @routing).nil?
        invalid_properties.concat(_routing.list_invalid_properties_for("routing")) if _routing.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_routing = @routing).nil?
        return false if _routing.is_a?(OpenApi::Validatable) && !_routing.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_extended_authorization Object to be assigned
    def request_extended_authorization=(new_value : Bool?)
      @request_extended_authorization = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_incremental_authorization_support Object to be assigned
    def request_incremental_authorization_support=(new_value : Bool?)
      @request_incremental_authorization_support = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] routing Object to be assigned
    def routing=(new_value : Stripe::PaymentMethodOptionsCardPresentRouting?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @routing = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@request_extended_authorization, @request_incremental_authorization_support, @routing)
  end
end
