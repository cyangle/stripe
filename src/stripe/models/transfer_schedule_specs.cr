#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class TransferScheduleSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "delay_days", type: Stripe::TransferScheduleSpecsDelayDays?, default: nil, required: false, nullable: false, emit_null: false)]
    getter delay_days : Stripe::TransferScheduleSpecsDelayDays? = nil

    @[JSON::Field(key: "interval", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interval : String? = nil

    ENUM_VALIDATOR_FOR_INTERVAL = EnumValidator.new("interval", "String", ["daily", "manual", "monthly", "weekly"])

    @[JSON::Field(key: "monthly_anchor", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter monthly_anchor : Int64? = nil

    @[JSON::Field(key: "weekly_anchor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter weekly_anchor : String? = nil

    ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR = EnumValidator.new("weekly_anchor", "String", ["friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @delay_days : Stripe::TransferScheduleSpecsDelayDays? = nil,
      @interval : String? = nil,
      @monthly_anchor : Int64? = nil,
      @weekly_anchor : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model delay_days : Stripe::TransferScheduleSpecsDelayDays?

      invalid_properties.push(ENUM_VALIDATOR_FOR_INTERVAL.error_message) unless ENUM_VALIDATOR_FOR_INTERVAL.valid?(@interval)

      invalid_properties.push(ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR.error_message) unless ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR.valid?(@weekly_anchor)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_INTERVAL.valid?(@interval)
      return false unless ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR.valid?(@weekly_anchor)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delay_days Object to be assigned
    def delay_days=(delay_days : Stripe::TransferScheduleSpecsDelayDays?)
      if delay_days.nil?
        return @delay_days = nil
      end
      @delay_days = delay_days
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interval Object to be assigned
    def interval=(interval : String?)
      if interval.nil?
        return @interval = nil
      end
      _interval = interval.not_nil!
      ENUM_VALIDATOR_FOR_INTERVAL.valid!(_interval)
      @interval = interval
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] monthly_anchor Object to be assigned
    def monthly_anchor=(monthly_anchor : Int64?)
      if monthly_anchor.nil?
        return @monthly_anchor = nil
      end
      @monthly_anchor = monthly_anchor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weekly_anchor Object to be assigned
    def weekly_anchor=(weekly_anchor : String?)
      if weekly_anchor.nil?
        return @weekly_anchor = nil
      end
      _weekly_anchor = weekly_anchor.not_nil!
      ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR.valid!(_weekly_anchor)
      @weekly_anchor = weekly_anchor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@delay_days, @interval, @monthly_anchor, @weekly_anchor)
  end
end
