#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./transfer_schedule_specs_delay_days"

module Stripe
  class TransferScheduleSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "delay_days", type: Stripe::TransferScheduleSpecsDelayDays?, default: nil, required: false, nullable: false, emit_null: false)]
    getter delay_days : Stripe::TransferScheduleSpecsDelayDays? = nil

    # How frequently available funds are paid out. One of: `daily`, `manual`, `weekly`, or `monthly`. Default is `daily`.
    @[JSON::Field(key: "interval", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter interval : String? = nil
    MAX_LENGTH_FOR_INTERVAL    = 5000
    ERROR_MESSAGE_FOR_INTERVAL = "invalid value for \"interval\", must be one of [daily, manual, monthly, weekly]."
    VALID_VALUES_FOR_INTERVAL  = String.static_array("daily", "manual", "monthly", "weekly")

    # The day of the month when available funds are paid out, specified as a number between 1--31. Payouts nominally scheduled between the 29th and 31st of the month are instead sent on the last day of a shorter month. Required and applicable only if `interval` is `monthly`.
    @[JSON::Field(key: "monthly_anchor", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter monthly_anchor : Int64? = nil

    # The day of the week when available funds are paid out, specified as `monday`, `tuesday`, etc. (required and applicable only if `interval` is `weekly`.)
    @[JSON::Field(key: "weekly_anchor", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter weekly_anchor : String? = nil
    MAX_LENGTH_FOR_WEEKLY_ANCHOR    = 5000
    ERROR_MESSAGE_FOR_WEEKLY_ANCHOR = "invalid value for \"weekly_anchor\", must be one of [friday, monday, saturday, sunday, thursday, tuesday, wednesday]."
    VALID_VALUES_FOR_WEEKLY_ANCHOR  = String.static_array("friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @delay_days : Stripe::TransferScheduleSpecsDelayDays? = nil,
      @interval : String? = nil,
      @monthly_anchor : Int64? = nil,
      @weekly_anchor : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_delay_days = @delay_days).nil?
        invalid_properties.concat(_delay_days.list_invalid_properties_for("delay_days")) if _delay_days.is_a?(OpenApi::Validatable)
      end
      unless (_interval = @interval).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_INTERVAL) unless OpenApi::EnumValidator.valid?(_interval, VALID_VALUES_FOR_INTERVAL)
      end

      unless (_weekly_anchor = @weekly_anchor).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_WEEKLY_ANCHOR) unless OpenApi::EnumValidator.valid?(_weekly_anchor, VALID_VALUES_FOR_WEEKLY_ANCHOR)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_delay_days = @delay_days).nil?
        return false if _delay_days.is_a?(OpenApi::Validatable) && !_delay_days.valid?
      end

      unless (_interval = @interval).nil?
        return false unless OpenApi::EnumValidator.valid?(_interval, VALID_VALUES_FOR_INTERVAL)
      end

      unless (_weekly_anchor = @weekly_anchor).nil?
        return false unless OpenApi::EnumValidator.valid?(_weekly_anchor, VALID_VALUES_FOR_WEEKLY_ANCHOR)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delay_days Object to be assigned
    def delay_days=(new_value : Stripe::TransferScheduleSpecsDelayDays?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @delay_days = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interval Object to be assigned
    def interval=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("interval", new_value, VALID_VALUES_FOR_INTERVAL)
      end

      @interval = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] monthly_anchor Object to be assigned
    def monthly_anchor=(new_value : Int64?)
      @monthly_anchor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weekly_anchor Object to be assigned
    def weekly_anchor=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("weekly_anchor", new_value, VALID_VALUES_FOR_WEEKLY_ANCHOR)
      end

      @weekly_anchor = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@delay_days, @interval, @monthly_anchor, @weekly_anchor)
  end
end
