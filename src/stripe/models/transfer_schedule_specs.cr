#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class TransferScheduleSpecs
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "delay_days", type: TransferScheduleSpecsDelayDays?, presence: true, ignore_serialize: delay_days.nil? && !delay_days_present?)]
    property delay_days : TransferScheduleSpecsDelayDays?

    @[JSON::Field(ignore: true)]
    property? delay_days_present : Bool = false

    @[JSON::Field(key: "interval", type: String?, presence: true, ignore_serialize: interval.nil? && !interval_present?)]
    getter interval : String?

    @[JSON::Field(ignore: true)]
    property? interval_present : Bool = false

    ENUM_VALIDATOR_FOR_INTERVAL = EnumValidator.new("interval", "String", ["daily", "manual", "monthly", "weekly"])

    @[JSON::Field(key: "monthly_anchor", type: Int64?, presence: true, ignore_serialize: monthly_anchor.nil? && !monthly_anchor_present?)]
    property monthly_anchor : Int64?

    @[JSON::Field(ignore: true)]
    property? monthly_anchor_present : Bool = false

    @[JSON::Field(key: "weekly_anchor", type: String?, presence: true, ignore_serialize: weekly_anchor.nil? && !weekly_anchor_present?)]
    getter weekly_anchor : String?

    @[JSON::Field(ignore: true)]
    property? weekly_anchor_present : Bool = false

    ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR = EnumValidator.new("weekly_anchor", "String", ["friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @delay_days : TransferScheduleSpecsDelayDays? = nil,
      @interval : String? = nil,
      @monthly_anchor : Int64? = nil,
      @weekly_anchor : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_INTERVAL.error_message) unless ENUM_VALIDATOR_FOR_INTERVAL.valid?(@interval)

      if !@interval.nil? && @interval.to_s.size > 5000
        invalid_properties.push("invalid value for \"interval\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR.error_message) unless ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR.valid?(@weekly_anchor)

      if !@weekly_anchor.nil? && @weekly_anchor.to_s.size > 5000
        invalid_properties.push("invalid value for \"weekly_anchor\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_INTERVAL.valid?(@interval)
      return false if !@interval.nil? && @interval.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR.valid?(@weekly_anchor)
      return false if !@weekly_anchor.nil? && @weekly_anchor.to_s.size > 5000

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interval Object to be assigned
    def interval=(interval)
      ENUM_VALIDATOR_FOR_INTERVAL.valid!(interval)
      @interval = interval
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weekly_anchor Object to be assigned
    def weekly_anchor=(weekly_anchor)
      ENUM_VALIDATOR_FOR_WEEKLY_ANCHOR.valid!(weekly_anchor)
      @weekly_anchor = weekly_anchor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@delay_days, @interval, @monthly_anchor, @weekly_anchor)
  end
end
