#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  class SubscriptionSchedulesResourceDefaultSettings
    include NASON::Serializable

    # Required properties
    # Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    @[NASON::Field(key: "billing_cycle_anchor", type: String)]
    property billing_cycle_anchor : String

    # Optional properties
    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
    @[NASON::Field(key: "application_fee_percent", type: Float64? | Null, nillable: true)]
    property application_fee_percent : Float64? | Null

    @[NASON::Field(key: "automatic_tax", type: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?, nillable: true)]
    property automatic_tax : SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?

    # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    @[NASON::Field(key: "billing_thresholds", type: SubscriptionBillingThresholds? | Null, nillable: true)]
    property billing_thresholds : SubscriptionBillingThresholds? | Null

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    @[NASON::Field(key: "collection_method", type: String? | Null, nillable: true)]
    property collection_method : String? | Null

    # ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    @[NASON::Field(key: "default_payment_method", type: String | PaymentMethod? | Null, nillable: true)]
    property default_payment_method : String | PaymentMethod? | Null

    # The subscription schedule's default invoice settings.
    @[NASON::Field(key: "invoice_settings", type: InvoiceSettingSubscriptionScheduleSetting? | Null, nillable: true)]
    property invoice_settings : InvoiceSettingSubscriptionScheduleSetting? | Null

    # The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    @[NASON::Field(key: "transfer_data", type: SubscriptionTransferData? | Null, nillable: true)]
    property transfer_data : SubscriptionTransferData? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @billing_cycle_anchor : String, @application_fee_percent : Float64? | Null = nil, @automatic_tax : SubscriptionSchedulesResourceDefaultSettingsAutomaticTax? = nil, @billing_thresholds : SubscriptionBillingThresholds? | Null = nil, @collection_method : String? | Null = nil, @default_payment_method : String | PaymentMethod? | Null = nil, @invoice_settings : InvoiceSettingSubscriptionScheduleSetting? | Null = nil, @transfer_data : SubscriptionTransferData? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      billing_cycle_anchor_validator = EnumAttributeValidator.new("String", ["automatic", "phase_start"])
      return false unless billing_cycle_anchor_validator.valid?(@billing_cycle_anchor)
      collection_method_validator = EnumAttributeValidator.new("String", ["charge_automatically", "send_invoice"])
      return false unless collection_method_validator.valid?(@collection_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(billing_cycle_anchor)
      validator = EnumAttributeValidator.new("String", ["automatic", "phase_start"])
      unless validator.valid?(billing_cycle_anchor)
        raise ArgumentError.new("invalid value for \"billing_cycle_anchor\", must be one of #{validator.allowable_values}.")
      end
      @billing_cycle_anchor = billing_cycle_anchor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method)
      validator = EnumAttributeValidator.new("String", ["charge_automatically", "send_invoice"])
      unless validator.valid?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{validator.allowable_values}.")
      end
      @collection_method = collection_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        application_fee_percent == o.application_fee_percent &&
        automatic_tax == o.automatic_tax &&
        billing_cycle_anchor == o.billing_cycle_anchor &&
        billing_thresholds == o.billing_thresholds &&
        collection_method == o.collection_method &&
        default_payment_method == o.default_payment_method &&
        invoice_settings == o.invoice_settings &&
        transfer_data == o.transfer_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [application_fee_percent, automatic_tax, billing_cycle_anchor, billing_thresholds, collection_method, default_payment_method, invoice_settings, transfer_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
