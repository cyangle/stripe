#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SubscriptionSchedulesResourceDefaultSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    @[JSON::Field(key: "billing_cycle_anchor", type: String)]
    getter billing_cycle_anchor : String

    ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR = EnumValidator.new("billing_cycle_anchor", "String", ["automatic", "phase_start"])

    # Optional properties

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
    @[JSON::Field(key: "application_fee_percent", type: Float64?, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    property application_fee_percent : Float64?

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    @[JSON::Field(key: "automatic_tax", type: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?, presence: true, ignore_serialize: automatic_tax.nil? && !automatic_tax_present?)]
    property automatic_tax : SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?

    @[JSON::Field(ignore: true)]
    property? automatic_tax_present : Bool = false

    @[JSON::Field(key: "billing_thresholds", type: SubscriptionBillingThresholds1?, presence: true, ignore_serialize: billing_thresholds.nil? && !billing_thresholds_present?)]
    property billing_thresholds : SubscriptionBillingThresholds1?

    @[JSON::Field(ignore: true)]
    property? billing_thresholds_present : Bool = false

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    @[JSON::Field(key: "collection_method", type: String?, presence: true, ignore_serialize: collection_method.nil? && !collection_method_present?)]
    getter collection_method : String?

    @[JSON::Field(ignore: true)]
    property? collection_method_present : Bool = false

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    @[JSON::Field(key: "default_payment_method", type: SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod?, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    property default_payment_method : SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod?

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    @[JSON::Field(key: "invoice_settings", type: SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings?, presence: true, ignore_serialize: invoice_settings.nil? && !invoice_settings_present?)]
    property invoice_settings : SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings?

    @[JSON::Field(ignore: true)]
    property? invoice_settings_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: SubscriptionSchedulePhaseConfigurationTransferData?, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    property transfer_data : SubscriptionSchedulePhaseConfigurationTransferData?

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @billing_cycle_anchor : String,
      # Optional properties
      @application_fee_percent : Float64? = nil,
      @automatic_tax : SubscriptionSchedulesResourceDefaultSettingsAutomaticTax? = nil,
      @billing_thresholds : SubscriptionBillingThresholds1? = nil,
      @collection_method : String? = nil,
      @default_payment_method : SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod? = nil,
      @invoice_settings : SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings? = nil,
      @transfer_data : SubscriptionSchedulePhaseConfigurationTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.error_message) unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor, false)
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(billing_cycle_anchor : String)
      ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid!(billing_cycle_anchor, false)
      @billing_cycle_anchor = billing_cycle_anchor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method : String?)
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(collection_method)
      @collection_method = collection_method
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@billing_cycle_anchor, @application_fee_percent, @application_fee_percent_present, @automatic_tax, @automatic_tax_present, @billing_thresholds, @billing_thresholds_present, @collection_method, @collection_method_present, @default_payment_method, @default_payment_method_present, @invoice_settings, @invoice_settings_present, @transfer_data, @transfer_data_present)
  end
end
