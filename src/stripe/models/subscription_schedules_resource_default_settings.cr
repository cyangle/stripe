#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class SubscriptionSchedulesResourceDefaultSettings
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    @[JSON::Field(key: "billing_cycle_anchor", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter billing_cycle_anchor : String? = nil

    ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR = EnumValidator.new("billing_cycle_anchor", "String", ["automatic", "phase_start"])

    # Optional properties

    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
    @[JSON::Field(key: "application_fee_percent", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application_fee_percent.nil? && !application_fee_percent_present?)]
    getter application_fee_percent : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? application_fee_percent_present : Bool = false

    @[JSON::Field(key: "automatic_tax", type: Stripe::SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?, default: nil, required: false, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::SubscriptionSchedulesResourceDefaultSettingsAutomaticTax? = nil

    @[JSON::Field(key: "billing_thresholds", type: Stripe::SubscriptionBillingThresholds1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_thresholds.nil? && !billing_thresholds_present?)]
    getter billing_thresholds : Stripe::SubscriptionBillingThresholds1? = nil

    @[JSON::Field(ignore: true)]
    property? billing_thresholds_present : Bool = false

    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    @[JSON::Field(key: "collection_method", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: collection_method.nil? && !collection_method_present?)]
    getter collection_method : String? = nil

    @[JSON::Field(ignore: true)]
    property? collection_method_present : Bool = false

    ENUM_VALIDATOR_FOR_COLLECTION_METHOD = EnumValidator.new("collection_method", "String", ["charge_automatically", "send_invoice"])

    @[JSON::Field(key: "default_payment_method", type: Stripe::SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    getter default_payment_method : Stripe::SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod? = nil

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "invoice_settings", type: Stripe::SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: invoice_settings.nil? && !invoice_settings_present?)]
    getter invoice_settings : Stripe::SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings? = nil

    @[JSON::Field(ignore: true)]
    property? invoice_settings_present : Bool = false

    @[JSON::Field(key: "transfer_data", type: Stripe::SubscriptionSchedulePhaseConfigurationTransferData?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transfer_data.nil? && !transfer_data_present?)]
    getter transfer_data : Stripe::SubscriptionSchedulePhaseConfigurationTransferData? = nil

    @[JSON::Field(ignore: true)]
    property? transfer_data_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @billing_cycle_anchor : String? = nil,
      # Optional properties
      @application_fee_percent : Float64? = nil,
      @automatic_tax : Stripe::SubscriptionSchedulesResourceDefaultSettingsAutomaticTax? = nil,
      @billing_thresholds : Stripe::SubscriptionBillingThresholds1? = nil,
      @collection_method : String? = nil,
      @default_payment_method : Stripe::SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod? = nil,
      @description : String? = nil,
      @invoice_settings : Stripe::SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings? = nil,
      @transfer_data : Stripe::SubscriptionSchedulePhaseConfigurationTransferData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.error_message) unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor, false)
      # This is a model automatic_tax : Stripe::SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?
      # This is a model billing_thresholds : Stripe::SubscriptionBillingThresholds1?

      invalid_properties.push(ENUM_VALIDATOR_FOR_COLLECTION_METHOD.error_message) unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      # This is a model default_payment_method : Stripe::SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod?
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model invoice_settings : Stripe::SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings?
      # This is a model transfer_data : Stripe::SubscriptionSchedulePhaseConfigurationTransferData?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid?(@billing_cycle_anchor, false)
      return false unless ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid?(@collection_method)
      if _description = @description
        return false if _description.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(billing_cycle_anchor : String?)
      if billing_cycle_anchor.nil?
        raise ArgumentError.new("\"billing_cycle_anchor\" is required and cannot be null")
      end
      _billing_cycle_anchor = billing_cycle_anchor.not_nil!
      ENUM_VALIDATOR_FOR_BILLING_CYCLE_ANCHOR.valid!(_billing_cycle_anchor)
      @billing_cycle_anchor = billing_cycle_anchor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_fee_percent Object to be assigned
    def application_fee_percent=(application_fee_percent : Float64?)
      if application_fee_percent.nil?
        return @application_fee_percent = nil
      end
      @application_fee_percent = application_fee_percent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?)
      if automatic_tax.nil?
        return @automatic_tax = nil
      end
      @automatic_tax = automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_thresholds Object to be assigned
    def billing_thresholds=(billing_thresholds : Stripe::SubscriptionBillingThresholds1?)
      if billing_thresholds.nil?
        return @billing_thresholds = nil
      end
      @billing_thresholds = billing_thresholds
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_method Object to be assigned
    def collection_method=(collection_method : String?)
      if collection_method.nil?
        return @collection_method = nil
      end
      _collection_method = collection_method.not_nil!
      ENUM_VALIDATOR_FOR_COLLECTION_METHOD.valid!(_collection_method)
      @collection_method = collection_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(default_payment_method : Stripe::SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod?)
      if default_payment_method.nil?
        return @default_payment_method = nil
      end
      @default_payment_method = default_payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_settings Object to be assigned
    def invoice_settings=(invoice_settings : Stripe::SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings?)
      if invoice_settings.nil?
        return @invoice_settings = nil
      end
      @invoice_settings = invoice_settings
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_data Object to be assigned
    def transfer_data=(transfer_data : Stripe::SubscriptionSchedulePhaseConfigurationTransferData?)
      if transfer_data.nil?
        return @transfer_data = nil
      end
      @transfer_data = transfer_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@billing_cycle_anchor, @application_fee_percent, @application_fee_percent_present, @automatic_tax, @billing_thresholds, @billing_thresholds_present, @collection_method, @collection_method_present, @default_payment_method, @default_payment_method_present, @description, @description_present, @invoice_settings, @invoice_settings_present, @transfer_data, @transfer_data_present)
  end
end
