#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./deleted_product"
require "./package_dimensions"
require "./product"
require "./product_default_price"
require "./product_marketing_feature"
require "./product_tax_code"

module Stripe
  # The product whose pricing this plan determines.
  class PlanProduct
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Always true for a deleted object
    @[JSON::Field(key: "deleted", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property deleted : Bool? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [product]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("product")

    # Whether the product is currently available for purchase.
    @[JSON::Field(key: "active", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property active : Bool? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
    @[JSON::Field(key: "images", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    property images : Array(String)? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    # A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).
    @[JSON::Field(key: "marketing_features", type: Array(Stripe::ProductMarketingFeature)?, default: nil, required: true, nullable: false, emit_null: false)]
    property marketing_features : Array(Stripe::ProductMarketingFeature)? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    property metadata : Hash(String, String)? = nil

    # The product's name, meant to be displayable to the customer.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    @[JSON::Field(key: "package_dimensions", type: Stripe::PackageDimensions?, default: nil, required: true, nullable: false, emit_null: false)]
    property package_dimensions : Stripe::PackageDimensions? = nil

    # Whether this product is shipped (i.e., physical goods).
    @[JSON::Field(key: "shippable", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    property shippable : Bool? = nil

    @[JSON::Field(key: "tax_code", type: Stripe::ProductTaxCode?, default: nil, required: true, nullable: true, emit_null: true)]
    property tax_code : Stripe::ProductTaxCode? = nil

    # The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [good, service]."
    VALID_VALUES_FOR__TYPE  = String.static_array("good", "service")

    # Time at which the object was last updated. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "updated", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property updated : Int64? = nil

    # A URL of a publicly-accessible webpage for this product.
    @[JSON::Field(key: "url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property url : String? = nil
    MAX_LENGTH_FOR_URL = 2048

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "default_price", type: Stripe::ProductDefaultPrice?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_price.nil? && !default_price_present?)]
    property default_price : Stripe::ProductDefaultPrice? = nil

    @[JSON::Field(ignore: true)]
    property? default_price_present : Bool = false

    # Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only used for subscription payments.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    property statement_descriptor : String? = nil
    MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR = 5000

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal.
    @[JSON::Field(key: "unit_label", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unit_label.nil? && !unit_label_present?)]
    property unit_label : String? = nil
    MAX_LENGTH_FOR_UNIT_LABEL = 5000

    @[JSON::Field(ignore: true)]
    property? unit_label_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::DeletedProduct,
        Stripe::Product,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @deleted : Bool? = nil,
      @id : String? = nil,
      @object : String? = nil,
      @active : Bool? = nil,
      @created : Int64? = nil,
      @description : String? = nil,
      @images : Array(String)? = nil,
      @livemode : Bool? = nil,
      @marketing_features : Array(Stripe::ProductMarketingFeature)? = nil,
      @metadata : Hash(String, String)? = nil,
      @name : String? = nil,
      @package_dimensions : Stripe::PackageDimensions? = nil,
      @shippable : Bool? = nil,
      @tax_code : Stripe::ProductTaxCode? = nil,
      @_type : String? = nil,
      @updated : Int64? = nil,
      @url : String? = nil,
      # Optional properties
      @default_price : Stripe::ProductDefaultPrice? = nil,
      @statement_descriptor : String? = nil,
      @unit_label : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@deleted, @id, @object, @active, @created, @description, @images, @livemode, @marketing_features, @metadata, @name, @package_dimensions, @shippable, @tax_code, @_type, @updated, @url, @default_price, @default_price_present, @statement_descriptor, @statement_descriptor_present, @unit_label, @unit_label_present)
  end
end
