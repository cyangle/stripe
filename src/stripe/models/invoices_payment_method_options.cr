#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class InvoicesPaymentMethodOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "acss_debit", type: Stripe::InvoicesPaymentMethodOptionsAcssDebit?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: acss_debit.nil? && !acss_debit_present?)]
    getter acss_debit : Stripe::InvoicesPaymentMethodOptionsAcssDebit? = nil

    @[JSON::Field(ignore: true)]
    property? acss_debit_present : Bool = false

    @[JSON::Field(key: "bancontact", type: Stripe::InvoicesPaymentMethodOptionsBancontact?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: bancontact.nil? && !bancontact_present?)]
    getter bancontact : Stripe::InvoicesPaymentMethodOptionsBancontact? = nil

    @[JSON::Field(ignore: true)]
    property? bancontact_present : Bool = false

    @[JSON::Field(key: "card", type: Stripe::InvoicesPaymentMethodOptionsCard?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: card.nil? && !card_present?)]
    getter card : Stripe::InvoicesPaymentMethodOptionsCard? = nil

    @[JSON::Field(ignore: true)]
    property? card_present : Bool = false

    @[JSON::Field(key: "customer_balance", type: Stripe::InvoicesPaymentMethodOptionsCustomerBalance?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_balance.nil? && !customer_balance_present?)]
    getter customer_balance : Stripe::InvoicesPaymentMethodOptionsCustomerBalance? = nil

    @[JSON::Field(ignore: true)]
    property? customer_balance_present : Bool = false

    @[JSON::Field(key: "konbini", type: Stripe::InvoicesPaymentMethodOptionsKonbini?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: konbini.nil? && !konbini_present?)]
    getter konbini : Stripe::InvoicesPaymentMethodOptionsKonbini? = nil

    @[JSON::Field(ignore: true)]
    property? konbini_present : Bool = false

    @[JSON::Field(key: "us_bank_account", type: Stripe::InvoicesPaymentMethodOptionsUsBankAccount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: us_bank_account.nil? && !us_bank_account_present?)]
    getter us_bank_account : Stripe::InvoicesPaymentMethodOptionsUsBankAccount? = nil

    @[JSON::Field(ignore: true)]
    property? us_bank_account_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acss_debit : Stripe::InvoicesPaymentMethodOptionsAcssDebit? = nil,
      @bancontact : Stripe::InvoicesPaymentMethodOptionsBancontact? = nil,
      @card : Stripe::InvoicesPaymentMethodOptionsCard? = nil,
      @customer_balance : Stripe::InvoicesPaymentMethodOptionsCustomerBalance? = nil,
      @konbini : Stripe::InvoicesPaymentMethodOptionsKonbini? = nil,
      @us_bank_account : Stripe::InvoicesPaymentMethodOptionsUsBankAccount? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model acss_debit : Stripe::InvoicesPaymentMethodOptionsAcssDebit?
      # This is a model bancontact : Stripe::InvoicesPaymentMethodOptionsBancontact?
      # This is a model card : Stripe::InvoicesPaymentMethodOptionsCard?
      # This is a model customer_balance : Stripe::InvoicesPaymentMethodOptionsCustomerBalance?
      # This is a model konbini : Stripe::InvoicesPaymentMethodOptionsKonbini?
      # This is a model us_bank_account : Stripe::InvoicesPaymentMethodOptionsUsBankAccount?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acss_debit Object to be assigned
    def acss_debit=(acss_debit : Stripe::InvoicesPaymentMethodOptionsAcssDebit?)
      if acss_debit.nil?
        return @acss_debit = nil
      end
      @acss_debit = acss_debit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bancontact Object to be assigned
    def bancontact=(bancontact : Stripe::InvoicesPaymentMethodOptionsBancontact?)
      if bancontact.nil?
        return @bancontact = nil
      end
      @bancontact = bancontact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card Object to be assigned
    def card=(card : Stripe::InvoicesPaymentMethodOptionsCard?)
      if card.nil?
        return @card = nil
      end
      @card = card
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_balance Object to be assigned
    def customer_balance=(customer_balance : Stripe::InvoicesPaymentMethodOptionsCustomerBalance?)
      if customer_balance.nil?
        return @customer_balance = nil
      end
      @customer_balance = customer_balance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] konbini Object to be assigned
    def konbini=(konbini : Stripe::InvoicesPaymentMethodOptionsKonbini?)
      if konbini.nil?
        return @konbini = nil
      end
      @konbini = konbini
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] us_bank_account Object to be assigned
    def us_bank_account=(us_bank_account : Stripe::InvoicesPaymentMethodOptionsUsBankAccount?)
      if us_bank_account.nil?
        return @us_bank_account = nil
      end
      @us_bank_account = us_bank_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acss_debit, @acss_debit_present, @bancontact, @bancontact_present, @card, @card_present2, @customer_balance, @customer_balance_present, @konbini, @konbini_present, @us_bank_account, @us_bank_account_present)
  end
end
