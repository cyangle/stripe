#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class IssuingAuthorizationMerchantData
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
    @[JSON::Field(key: "category", type: String)]
    getter category : String

    # The merchant category code for the sellerâ€™s business
    @[JSON::Field(key: "category_code", type: String)]
    getter category_code : String

    # Identifier assigned to the seller by the card brand
    @[JSON::Field(key: "network_id", type: String)]
    getter network_id : String

    # Optional properties

    # City where the seller is located
    @[JSON::Field(key: "city", type: String?, presence: true, ignore_serialize: city.nil? && !city_present?)]
    getter city : String?

    @[JSON::Field(ignore: true)]
    property? city_present : Bool = false

    # Country where the seller is located
    @[JSON::Field(key: "country", type: String?, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String?

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # Name of the seller
    @[JSON::Field(key: "name", type: String?, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String?

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # Postal code where the seller is located
    @[JSON::Field(key: "postal_code", type: String?, presence: true, ignore_serialize: postal_code.nil? && !postal_code_present?)]
    getter postal_code : String?

    @[JSON::Field(ignore: true)]
    property? postal_code_present : Bool = false

    # State where the seller is located
    @[JSON::Field(key: "state", type: String?, presence: true, ignore_serialize: state.nil? && !state_present?)]
    getter state : String?

    @[JSON::Field(ignore: true)]
    property? state_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @category : String,
      @category_code : String,
      @network_id : String,
      # Optional properties
      @city : String? = nil,
      @country : String? = nil,
      @name : String? = nil,
      @postal_code : String? = nil,
      @state : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @category.to_s.size > 5000
        invalid_properties.push("invalid value for \"category\", the character length must be smaller than or equal to 5000.")
      end

      if @category_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"category_code\", the character length must be smaller than or equal to 5000.")
      end

      if @network_id.to_s.size > 5000
        invalid_properties.push("invalid value for \"network_id\", the character length must be smaller than or equal to 5000.")
      end

      if !@city.nil? && @city.to_s.size > 5000
        invalid_properties.push("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
      end

      if !@country.nil? && @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if !@name.nil? && @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      if !@postal_code.nil? && @postal_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"postal_code\", the character length must be smaller than or equal to 5000.")
      end

      if !@state.nil? && @state.to_s.size > 5000
        invalid_properties.push("invalid value for \"state\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @category.to_s.size > 5000
      return false if @category_code.to_s.size > 5000
      return false if @network_id.to_s.size > 5000
      return false if !@city.nil? && @city.to_s.size > 5000
      return false if !@country.nil? && @country.to_s.size > 5000
      return false if !@name.nil? && @name.to_s.size > 5000
      return false if !@postal_code.nil? && @postal_code.to_s.size > 5000
      return false if !@state.nil? && @state.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] category Value to be assigned
    def category=(category : String)
      if category.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"category\", the character length must be smaller than or equal to 5000.")
      end

      @category = category
    end

    # Custom attribute writer method with validation
    # @param [Object] category_code Value to be assigned
    def category_code=(category_code : String)
      if category_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"category_code\", the character length must be smaller than or equal to 5000.")
      end

      @category_code = category_code
    end

    # Custom attribute writer method with validation
    # @param [Object] network_id Value to be assigned
    def network_id=(network_id : String)
      if network_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network_id\", the character length must be smaller than or equal to 5000.")
      end

      @network_id = network_id
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city : String?)
      if !city.nil? && city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country : String?)
      if !country.nil? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name : String?)
      if !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] postal_code Value to be assigned
    def postal_code=(postal_code : String?)
      if !postal_code.nil? && postal_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"postal_code\", the character length must be smaller than or equal to 5000.")
      end

      @postal_code = postal_code
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state : String?)
      if !state.nil? && state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"state\", the character length must be smaller than or equal to 5000.")
      end

      @state = state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@category, @category_code, @network_id, @city, @city_present, @country, @country_present, @name, @name_present, @postal_code, @postal_code_present, @state, @state_present)
  end
end
