#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class IssuingAuthorizationMerchantData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
    @[JSON::Field(key: "category", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category : String? = nil
    MAX_LENGTH_FOR_CATEGORY = 5000

    # The merchant category code for the sellerâ€™s business
    @[JSON::Field(key: "category_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category_code : String? = nil
    MAX_LENGTH_FOR_CATEGORY_CODE = 5000

    # City where the seller is located
    @[JSON::Field(key: "city", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter city : String? = nil
    MAX_LENGTH_FOR_CITY = 5000

    # Country where the seller is located
    @[JSON::Field(key: "country", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter country : String? = nil
    MAX_LENGTH_FOR_COUNTRY = 5000

    # Name of the seller
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant.
    @[JSON::Field(key: "network_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network_id : String? = nil
    MAX_LENGTH_FOR_NETWORK_ID = 5000

    # Postal code where the seller is located
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter postal_code : String? = nil
    MAX_LENGTH_FOR_POSTAL_CODE = 5000

    # State where the seller is located
    @[JSON::Field(key: "state", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter state : String? = nil
    MAX_LENGTH_FOR_STATE = 5000

    # An ID assigned by the seller to the location of the sale.
    @[JSON::Field(key: "terminal_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter terminal_id : String? = nil
    MAX_LENGTH_FOR_TERMINAL_ID = 5000

    # URL provided by the merchant on a 3DS request
    @[JSON::Field(key: "url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter url : String? = nil
    MAX_LENGTH_FOR_URL = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @category : String? = nil,
      @category_code : String? = nil,
      @city : String? = nil,
      @country : String? = nil,
      @name : String? = nil,
      @network_id : String? = nil,
      @postal_code : String? = nil,
      @state : String? = nil,
      @terminal_id : String? = nil,
      @url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"category\" is required and cannot be null") if @category.nil?

      unless (_category = @category).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("category", _category.to_s.size, MAX_LENGTH_FOR_CATEGORY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"category_code\" is required and cannot be null") if @category_code.nil?

      unless (_category_code = @category_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("category_code", _category_code.to_s.size, MAX_LENGTH_FOR_CATEGORY_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_city = @city).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("city", _city.to_s.size, MAX_LENGTH_FOR_CITY)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_country = @country).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("country", _country.to_s.size, MAX_LENGTH_FOR_COUNTRY)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"network_id\" is required and cannot be null") if @network_id.nil?

      unless (_network_id = @network_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("network_id", _network_id.to_s.size, MAX_LENGTH_FOR_NETWORK_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_postal_code = @postal_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("postal_code", _postal_code.to_s.size, MAX_LENGTH_FOR_POSTAL_CODE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_state = @state).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("state", _state.to_s.size, MAX_LENGTH_FOR_STATE)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_terminal_id = @terminal_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("terminal_id", _terminal_id.to_s.size, MAX_LENGTH_FOR_TERMINAL_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_url = @url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("url", _url.to_s.size, MAX_LENGTH_FOR_URL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @category.nil?
      unless (_category = @category).nil?
        return false if _category.to_s.size > MAX_LENGTH_FOR_CATEGORY
      end

      return false if @category_code.nil?
      unless (_category_code = @category_code).nil?
        return false if _category_code.to_s.size > MAX_LENGTH_FOR_CATEGORY_CODE
      end

      unless (_city = @city).nil?
        return false if _city.to_s.size > MAX_LENGTH_FOR_CITY
      end

      unless (_country = @country).nil?
        return false if _country.to_s.size > MAX_LENGTH_FOR_COUNTRY
      end

      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      return false if @network_id.nil?
      unless (_network_id = @network_id).nil?
        return false if _network_id.to_s.size > MAX_LENGTH_FOR_NETWORK_ID
      end

      unless (_postal_code = @postal_code).nil?
        return false if _postal_code.to_s.size > MAX_LENGTH_FOR_POSTAL_CODE
      end

      unless (_state = @state).nil?
        return false if _state.to_s.size > MAX_LENGTH_FOR_STATE
      end

      unless (_terminal_id = @terminal_id).nil?
        return false if _terminal_id.to_s.size > MAX_LENGTH_FOR_TERMINAL_ID
      end

      unless (_url = @url).nil?
        return false if _url.to_s.size > MAX_LENGTH_FOR_URL
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(new_value : String?)
      raise ArgumentError.new("\"category\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("category", new_value.to_s.size, MAX_LENGTH_FOR_CATEGORY)
      end

      @category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category_code Object to be assigned
    def category_code=(new_value : String?)
      raise ArgumentError.new("\"category_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("category_code", new_value.to_s.size, MAX_LENGTH_FOR_CATEGORY_CODE)
      end

      @category_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("city", new_value.to_s.size, MAX_LENGTH_FOR_CITY)
      end

      @city = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("country", new_value.to_s.size, MAX_LENGTH_FOR_COUNTRY)
      end

      @country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("name", new_value.to_s.size, MAX_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_id Object to be assigned
    def network_id=(new_value : String?)
      raise ArgumentError.new("\"network_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("network_id", new_value.to_s.size, MAX_LENGTH_FOR_NETWORK_ID)
      end

      @network_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("postal_code", new_value.to_s.size, MAX_LENGTH_FOR_POSTAL_CODE)
      end

      @postal_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("state", new_value.to_s.size, MAX_LENGTH_FOR_STATE)
      end

      @state = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terminal_id Object to be assigned
    def terminal_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("terminal_id", new_value.to_s.size, MAX_LENGTH_FOR_TERMINAL_ID)
      end

      @terminal_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("url", new_value.to_s.size, MAX_LENGTH_FOR_URL)
      end

      @url = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@category, @category_code, @city, @country, @name, @network_id, @postal_code, @state, @terminal_id, @url)
  end
end
