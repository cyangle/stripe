#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class IssuingAuthorizationMerchantData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    # A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
    @[JSON::Field(key: "category", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category : String? = nil

    # The merchant category code for the sellerâ€™s business
    @[JSON::Field(key: "category_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category_code : String? = nil

    # Identifier assigned to the seller by the card brand
    @[JSON::Field(key: "network_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network_id : String? = nil

    # Optional properties

    # City where the seller is located
    @[JSON::Field(key: "city", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: city.nil? && !city_present?)]
    getter city : String? = nil

    @[JSON::Field(ignore: true)]
    property? city_present : Bool = false

    # Country where the seller is located
    @[JSON::Field(key: "country", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String? = nil

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # Name of the seller
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String? = nil

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # Postal code where the seller is located
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: postal_code.nil? && !postal_code_present?)]
    getter postal_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? postal_code_present : Bool = false

    # State where the seller is located
    @[JSON::Field(key: "state", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state.nil? && !state_present?)]
    getter state : String? = nil

    @[JSON::Field(ignore: true)]
    property? state_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @category : String? = nil,
      @category_code : String? = nil,
      @network_id : String? = nil,
      # Optional properties
      @city : String? = nil,
      @country : String? = nil,
      @name : String? = nil,
      @postal_code : String? = nil,
      @state : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"category\" is required and cannot be null") if @category.nil?
      if _category = @category
        if _category.to_s.size > 5000
          invalid_properties.push("invalid value for \"category\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"category_code\" is required and cannot be null") if @category_code.nil?
      if _category_code = @category_code
        if _category_code.to_s.size > 5000
          invalid_properties.push("invalid value for \"category_code\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"network_id\" is required and cannot be null") if @network_id.nil?
      if _network_id = @network_id
        if _network_id.to_s.size > 5000
          invalid_properties.push("invalid value for \"network_id\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _city = @city
        if _city.to_s.size > 5000
          invalid_properties.push("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _country = @country
        if _country.to_s.size > 5000
          invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _name = @name
        if _name.to_s.size > 5000
          invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _postal_code = @postal_code
        if _postal_code.to_s.size > 5000
          invalid_properties.push("invalid value for \"postal_code\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _state = @state
        if _state.to_s.size > 5000
          invalid_properties.push("invalid value for \"state\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @category.nil?
      if _category = @category
        return false if _category.to_s.size > 5000
      end
      return false if @category_code.nil?
      if _category_code = @category_code
        return false if _category_code.to_s.size > 5000
      end
      return false if @network_id.nil?
      if _network_id = @network_id
        return false if _network_id.to_s.size > 5000
      end
      if _city = @city
        return false if _city.to_s.size > 5000
      end
      if _country = @country
        return false if _country.to_s.size > 5000
      end
      if _name = @name
        return false if _name.to_s.size > 5000
      end
      if _postal_code = @postal_code
        return false if _postal_code.to_s.size > 5000
      end
      if _state = @state
        return false if _state.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category : String?)
      if category.nil?
        raise ArgumentError.new("\"category\" is required and cannot be null")
      end
      _category = category.not_nil!
      if _category.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"category\", the character length must be smaller than or equal to 5000.")
      end

      @category = category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category_code Object to be assigned
    def category_code=(category_code : String?)
      if category_code.nil?
        raise ArgumentError.new("\"category_code\" is required and cannot be null")
      end
      _category_code = category_code.not_nil!
      if _category_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"category_code\", the character length must be smaller than or equal to 5000.")
      end

      @category_code = category_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_id Object to be assigned
    def network_id=(network_id : String?)
      if network_id.nil?
        raise ArgumentError.new("\"network_id\" is required and cannot be null")
      end
      _network_id = network_id.not_nil!
      if _network_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network_id\", the character length must be smaller than or equal to 5000.")
      end

      @network_id = network_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(city : String?)
      if city.nil?
        return @city = nil
      end
      _city = city.not_nil!
      if _city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"city\", the character length must be smaller than or equal to 5000.")
      end

      @city = city
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(country : String?)
      if country.nil?
        return @country = nil
      end
      _country = country.not_nil!
      if _country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        return @name = nil
      end
      _name = name.not_nil!
      if _name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(postal_code : String?)
      if postal_code.nil?
        return @postal_code = nil
      end
      _postal_code = postal_code.not_nil!
      if _postal_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"postal_code\", the character length must be smaller than or equal to 5000.")
      end

      @postal_code = postal_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state : String?)
      if state.nil?
        return @state = nil
      end
      _state = state.not_nil!
      if _state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"state\", the character length must be smaller than or equal to 5000.")
      end

      @state = state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@category, @category_code, @network_id, @city, @city_present, @country, @country_present, @name, @name_present, @postal_code, @postal_code_present, @state, @state_present)
  end
end
