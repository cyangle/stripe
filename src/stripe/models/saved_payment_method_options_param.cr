#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class SavedPaymentMethodOptionsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Uses the `allow_redisplay` value of each saved payment method to filter the set presented to a returning customer. By default, only saved payment methods with ’allow_redisplay: ‘always’ are shown in Checkout.
    @[JSON::Field(key: "allow_redisplay_filters", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter allow_redisplay_filters : Array(String)? = nil
    ERROR_MESSAGE_FOR_ALLOW_REDISPLAY_FILTERS = "invalid value for \"allow_redisplay_filters\", must be one of [always, limited, unspecified]."
    VALID_VALUES_FOR_ALLOW_REDISPLAY_FILTERS  = String.static_array("always", "limited", "unspecified")

    # Enable customers to choose if they wish to save their payment method for future use. Disabled by default.
    @[JSON::Field(key: "payment_method_save", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_method_save : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_SAVE = "invalid value for \"payment_method_save\", must be one of [disabled, enabled]."
    VALID_VALUES_FOR_PAYMENT_METHOD_SAVE  = String.static_array("disabled", "enabled")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @allow_redisplay_filters : Array(String)? = nil,
      @payment_method_save : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_allow_redisplay_filters = @allow_redisplay_filters).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ALLOW_REDISPLAY_FILTERS) unless OpenApi::EnumValidator.valid?(_allow_redisplay_filters, VALID_VALUES_FOR_ALLOW_REDISPLAY_FILTERS)
      end
      unless (_payment_method_save = @payment_method_save).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_SAVE) unless OpenApi::EnumValidator.valid?(_payment_method_save, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_allow_redisplay_filters = @allow_redisplay_filters).nil?
        return false unless OpenApi::EnumValidator.valid?(_allow_redisplay_filters, VALID_VALUES_FOR_ALLOW_REDISPLAY_FILTERS)
      end

      unless (_payment_method_save = @payment_method_save).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_save, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_redisplay_filters Object to be assigned
    def allow_redisplay_filters=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("allow_redisplay_filters", new_value, VALID_VALUES_FOR_ALLOW_REDISPLAY_FILTERS)
      end

      @allow_redisplay_filters = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_save Object to be assigned
    def payment_method_save=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_save", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_SAVE)
      end

      @payment_method_save = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@allow_redisplay_filters, @payment_method_save)
  end
end
