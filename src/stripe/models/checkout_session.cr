#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./checkout_session_after_expiration"
require "./checkout_session_consent"
require "./checkout_session_consent_collection"
require "./checkout_session_currency_conversion"
require "./checkout_session_customer"
require "./checkout_session_customer_details"
require "./checkout_session_invoice"
require "./checkout_session_invoice_creation"
require "./checkout_session_payment_intent"
require "./checkout_session_payment_link"
require "./checkout_session_payment_method_configuration_details"
require "./checkout_session_payment_method_options1"
require "./checkout_session_saved_payment_method_options"
require "./checkout_session_setup_intent"
require "./checkout_session_shipping_address_collection"
require "./checkout_session_shipping_cost"
require "./checkout_session_shipping_details"
require "./checkout_session_subscription"
require "./checkout_session_total_details"
require "./payment_pages_checkout_session_automatic_tax"
require "./payment_pages_checkout_session_custom_fields"
require "./payment_pages_checkout_session_custom_text"
require "./payment_pages_checkout_session_list_line_items"
require "./payment_pages_checkout_session_phone_number_collection"
require "./payment_pages_checkout_session_shipping_option"
require "./payment_pages_checkout_session_tax_id_collection"

module Stripe
  # A Checkout Session represents your customer's session as they pay for one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout) or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a new Session each time your customer attempts to pay.  Once payment is successful, the Checkout Session will contain a reference to the [Customer](https://stripe.com/docs/api/customers), and either the successful [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active [Subscription](https://stripe.com/docs/api/subscriptions).  You can create a Checkout Session on your server and redirect to its URL to begin Checkout.  Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
  class CheckoutSession
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "after_expiration", type: Stripe::CheckoutSessionAfterExpiration?, default: nil, required: true, nullable: true, emit_null: true)]
    getter after_expiration : Stripe::CheckoutSessionAfterExpiration? = nil

    # Enables user redeemable promotion codes.
    @[JSON::Field(key: "allow_promotion_codes", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter allow_promotion_codes : Bool? = nil

    # Total of all items before discounts or taxes are applied.
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_subtotal : Int64? = nil

    # Total of all items after discounts and taxes are applied.
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_total : Int64? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::PaymentPagesCheckoutSessionAutomaticTax?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::PaymentPagesCheckoutSessionAutomaticTax? = nil

    # Describes whether Checkout should collect the customer's billing address. Defaults to `auto`.
    @[JSON::Field(key: "billing_address_collection", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter billing_address_collection : String? = nil
    ERROR_MESSAGE_FOR_BILLING_ADDRESS_COLLECTION = "invalid value for \"billing_address_collection\", must be one of [auto, required]."
    VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION  = String.static_array("auto", "required")

    # If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.
    @[JSON::Field(key: "cancel_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cancel_url : String? = nil
    MAX_LENGTH_FOR_CANCEL_URL = 5000

    # A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the Session with your internal systems.
    @[JSON::Field(key: "client_reference_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter client_reference_id : String? = nil
    MAX_LENGTH_FOR_CLIENT_REFERENCE_ID = 5000

    # Client secret to be used when initializing Stripe.js embedded checkout.
    @[JSON::Field(key: "client_secret", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter client_secret : String? = nil
    MAX_LENGTH_FOR_CLIENT_SECRET = 5000

    @[JSON::Field(key: "consent", type: Stripe::CheckoutSessionConsent?, default: nil, required: true, nullable: true, emit_null: true)]
    getter consent : Stripe::CheckoutSessionConsent? = nil

    @[JSON::Field(key: "consent_collection", type: Stripe::CheckoutSessionConsentCollection?, default: nil, required: true, nullable: true, emit_null: true)]
    getter consent_collection : Stripe::CheckoutSessionConsentCollection? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter currency : String? = nil

    @[JSON::Field(key: "currency_conversion", type: Stripe::CheckoutSessionCurrencyConversion?, default: nil, required: true, nullable: true, emit_null: true)]
    getter currency_conversion : Stripe::CheckoutSessionCurrencyConversion? = nil

    # Collect additional information from your customer using custom fields. Up to 3 fields are supported.
    @[JSON::Field(key: "custom_fields", type: Array(Stripe::PaymentPagesCheckoutSessionCustomFields)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter custom_fields : Array(Stripe::PaymentPagesCheckoutSessionCustomFields)? = nil

    @[JSON::Field(key: "custom_text", type: Stripe::PaymentPagesCheckoutSessionCustomText?, default: nil, required: true, nullable: false, emit_null: false)]
    getter custom_text : Stripe::PaymentPagesCheckoutSessionCustomText? = nil

    @[JSON::Field(key: "customer", type: Stripe::CheckoutSessionCustomer?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer : Stripe::CheckoutSessionCustomer? = nil

    # Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
    @[JSON::Field(key: "customer_creation", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_creation : String? = nil
    ERROR_MESSAGE_FOR_CUSTOMER_CREATION = "invalid value for \"customer_creation\", must be one of [always, if_required]."
    VALID_VALUES_FOR_CUSTOMER_CREATION  = String.static_array("always", "if_required")

    @[JSON::Field(key: "customer_details", type: Stripe::CheckoutSessionCustomerDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_details : Stripe::CheckoutSessionCustomerDetails? = nil

    # If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once the payment flow is complete, use the `customer` attribute.
    @[JSON::Field(key: "customer_email", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_email : String? = nil
    MAX_LENGTH_FOR_CUSTOMER_EMAIL = 5000

    # The timestamp at which the Checkout Session will expire.
    @[JSON::Field(key: "expires_at", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expires_at : Int64? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "invoice", type: Stripe::CheckoutSessionInvoice?, default: nil, required: true, nullable: true, emit_null: true)]
    getter invoice : Stripe::CheckoutSessionInvoice? = nil

    @[JSON::Field(key: "invoice_creation", type: Stripe::CheckoutSessionInvoiceCreation?, default: nil, required: true, nullable: true, emit_null: true)]
    getter invoice_creation : Stripe::CheckoutSessionInvoiceCreation? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    @[JSON::Field(key: "locale", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter locale : String? = nil
    ERROR_MESSAGE_FOR_LOCALE = "invalid value for \"locale\", must be one of [auto, bg, cs, da, de, el, en, en-GB, es, es-419, et, fi, fil, fr, fr-CA, hr, hu, id, it, ja, ko, lt, lv, ms, mt, nb, nl, pl, pt, pt-BR, ro, ru, sk, sl, sv, th, tr, vi, zh, zh-HK, zh-TW]."
    VALID_VALUES_FOR_LOCALE  = String.static_array("auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW")

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter metadata : Hash(String, String)? = nil

    # The mode of the Checkout Session.
    @[JSON::Field(key: "mode", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter mode : String? = nil
    ERROR_MESSAGE_FOR_MODE = "invalid value for \"mode\", must be one of [payment, setup, subscription]."
    VALID_VALUES_FOR_MODE  = String.static_array("payment", "setup", "subscription")

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [checkout.session]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("checkout.session")

    @[JSON::Field(key: "payment_intent", type: Stripe::CheckoutSessionPaymentIntent?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_intent : Stripe::CheckoutSessionPaymentIntent? = nil

    @[JSON::Field(key: "payment_link", type: Stripe::CheckoutSessionPaymentLink?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_link : Stripe::CheckoutSessionPaymentLink? = nil

    # Configure whether a Checkout Session should collect a payment method. Defaults to `always`.
    @[JSON::Field(key: "payment_method_collection", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method_collection : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_COLLECTION = "invalid value for \"payment_method_collection\", must be one of [always, if_required]."
    VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION  = String.static_array("always", "if_required")

    @[JSON::Field(key: "payment_method_configuration_details", type: Stripe::CheckoutSessionPaymentMethodConfigurationDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method_configuration_details : Stripe::CheckoutSessionPaymentMethodConfigurationDetails? = nil

    @[JSON::Field(key: "payment_method_options", type: Stripe::CheckoutSessionPaymentMethodOptions1?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method_options : Stripe::CheckoutSessionPaymentMethodOptions1? = nil

    # A list of the types of payment methods (e.g. card) this Checkout Session is allowed to accept.
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_method_types : Array(String)? = nil

    # The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`. You can use this value to decide when to fulfill your customer's order.
    @[JSON::Field(key: "payment_status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_status : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_STATUS = "invalid value for \"payment_status\", must be one of [no_payment_required, paid, unpaid]."
    VALID_VALUES_FOR_PAYMENT_STATUS  = String.static_array("no_payment_required", "paid", "unpaid")

    # The ID of the original expired Checkout Session that triggered the recovery flow.
    @[JSON::Field(key: "recovered_from", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter recovered_from : String? = nil
    MAX_LENGTH_FOR_RECOVERED_FROM = 5000

    @[JSON::Field(key: "saved_payment_method_options", type: Stripe::CheckoutSessionSavedPaymentMethodOptions?, default: nil, required: true, nullable: true, emit_null: true)]
    getter saved_payment_method_options : Stripe::CheckoutSessionSavedPaymentMethodOptions? = nil

    @[JSON::Field(key: "setup_intent", type: Stripe::CheckoutSessionSetupIntent?, default: nil, required: true, nullable: true, emit_null: true)]
    getter setup_intent : Stripe::CheckoutSessionSetupIntent? = nil

    @[JSON::Field(key: "shipping_address_collection", type: Stripe::CheckoutSessionShippingAddressCollection?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_address_collection : Stripe::CheckoutSessionShippingAddressCollection? = nil

    @[JSON::Field(key: "shipping_cost", type: Stripe::CheckoutSessionShippingCost?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_cost : Stripe::CheckoutSessionShippingCost? = nil

    @[JSON::Field(key: "shipping_details", type: Stripe::CheckoutSessionShippingDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping_details : Stripe::CheckoutSessionShippingDetails? = nil

    # The shipping rate options applied to this Session.
    @[JSON::Field(key: "shipping_options", type: Array(Stripe::PaymentPagesCheckoutSessionShippingOption)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter shipping_options : Array(Stripe::PaymentPagesCheckoutSessionShippingOption)? = nil

    # The status of the Checkout Session, one of `open`, `complete`, or `expired`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [complete, expired, open]."
    VALID_VALUES_FOR_STATUS  = String.static_array("complete", "expired", "open")

    # Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
    @[JSON::Field(key: "submit_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter submit_type : String? = nil
    ERROR_MESSAGE_FOR_SUBMIT_TYPE = "invalid value for \"submit_type\", must be one of [auto, book, donate, pay]."
    VALID_VALUES_FOR_SUBMIT_TYPE  = String.static_array("auto", "book", "donate", "pay")

    @[JSON::Field(key: "subscription", type: Stripe::CheckoutSessionSubscription?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subscription : Stripe::CheckoutSessionSubscription? = nil

    # The URL the customer will be directed to after the payment or subscription creation is successful.
    @[JSON::Field(key: "success_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter success_url : String? = nil
    MAX_LENGTH_FOR_SUCCESS_URL = 5000

    @[JSON::Field(key: "total_details", type: Stripe::CheckoutSessionTotalDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter total_details : Stripe::CheckoutSessionTotalDetails? = nil

    # The UI mode of the Session. Defaults to `hosted`.
    @[JSON::Field(key: "ui_mode", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ui_mode : String? = nil
    ERROR_MESSAGE_FOR_UI_MODE = "invalid value for \"ui_mode\", must be one of [embedded, hosted]."
    VALID_VALUES_FOR_UI_MODE  = String.static_array("embedded", "hosted")

    # The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.` This value is only present when the session is active.
    @[JSON::Field(key: "url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter url : String? = nil
    MAX_LENGTH_FOR_URL = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "line_items", type: Stripe::PaymentPagesCheckoutSessionListLineItems?, default: nil, required: false, nullable: false, emit_null: false)]
    getter line_items : Stripe::PaymentPagesCheckoutSessionListLineItems? = nil

    @[JSON::Field(key: "phone_number_collection", type: Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone_number_collection : Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection? = nil

    # This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.
    @[JSON::Field(key: "redirect_on_completion", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect_on_completion : String? = nil
    ERROR_MESSAGE_FOR_REDIRECT_ON_COMPLETION = "invalid value for \"redirect_on_completion\", must be one of [always, if_required, never]."
    VALID_VALUES_FOR_REDIRECT_ON_COMPLETION  = String.static_array("always", "if_required", "never")

    # Applies to Checkout Sessions with `ui_mode: embedded`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
    @[JSON::Field(key: "return_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter return_url : String? = nil
    MAX_LENGTH_FOR_RETURN_URL = 5000

    @[JSON::Field(key: "tax_id_collection", type: Stripe::PaymentPagesCheckoutSessionTaxIdCollection?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_id_collection : Stripe::PaymentPagesCheckoutSessionTaxIdCollection? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @after_expiration : Stripe::CheckoutSessionAfterExpiration? = nil,
      @allow_promotion_codes : Bool? = nil,
      @amount_subtotal : Int64? = nil,
      @amount_total : Int64? = nil,
      @automatic_tax : Stripe::PaymentPagesCheckoutSessionAutomaticTax? = nil,
      @billing_address_collection : String? = nil,
      @cancel_url : String? = nil,
      @client_reference_id : String? = nil,
      @client_secret : String? = nil,
      @consent : Stripe::CheckoutSessionConsent? = nil,
      @consent_collection : Stripe::CheckoutSessionConsentCollection? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @currency_conversion : Stripe::CheckoutSessionCurrencyConversion? = nil,
      @custom_fields : Array(Stripe::PaymentPagesCheckoutSessionCustomFields)? = nil,
      @custom_text : Stripe::PaymentPagesCheckoutSessionCustomText? = nil,
      @customer : Stripe::CheckoutSessionCustomer? = nil,
      @customer_creation : String? = nil,
      @customer_details : Stripe::CheckoutSessionCustomerDetails? = nil,
      @customer_email : String? = nil,
      @expires_at : Int64? = nil,
      @id : String? = nil,
      @invoice : Stripe::CheckoutSessionInvoice? = nil,
      @invoice_creation : Stripe::CheckoutSessionInvoiceCreation? = nil,
      @livemode : Bool? = nil,
      @locale : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @mode : String? = nil,
      @object : String? = nil,
      @payment_intent : Stripe::CheckoutSessionPaymentIntent? = nil,
      @payment_link : Stripe::CheckoutSessionPaymentLink? = nil,
      @payment_method_collection : String? = nil,
      @payment_method_configuration_details : Stripe::CheckoutSessionPaymentMethodConfigurationDetails? = nil,
      @payment_method_options : Stripe::CheckoutSessionPaymentMethodOptions1? = nil,
      @payment_method_types : Array(String)? = nil,
      @payment_status : String? = nil,
      @recovered_from : String? = nil,
      @saved_payment_method_options : Stripe::CheckoutSessionSavedPaymentMethodOptions? = nil,
      @setup_intent : Stripe::CheckoutSessionSetupIntent? = nil,
      @shipping_address_collection : Stripe::CheckoutSessionShippingAddressCollection? = nil,
      @shipping_cost : Stripe::CheckoutSessionShippingCost? = nil,
      @shipping_details : Stripe::CheckoutSessionShippingDetails? = nil,
      @shipping_options : Array(Stripe::PaymentPagesCheckoutSessionShippingOption)? = nil,
      @status : String? = nil,
      @submit_type : String? = nil,
      @subscription : Stripe::CheckoutSessionSubscription? = nil,
      @success_url : String? = nil,
      @total_details : Stripe::CheckoutSessionTotalDetails? = nil,
      @ui_mode : String? = nil,
      @url : String? = nil,
      # Optional properties
      @line_items : Stripe::PaymentPagesCheckoutSessionListLineItems? = nil,
      @phone_number_collection : Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection? = nil,
      @redirect_on_completion : String? = nil,
      @return_url : String? = nil,
      @tax_id_collection : Stripe::PaymentPagesCheckoutSessionTaxIdCollection? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_after_expiration = @after_expiration).nil?
        invalid_properties.concat(_after_expiration.list_invalid_properties_for("after_expiration")) if _after_expiration.is_a?(OpenApi::Validatable)
      end

      invalid_properties.push("\"automatic_tax\" is required and cannot be null") if @automatic_tax.nil?

      unless (_automatic_tax = @automatic_tax).nil?
        invalid_properties.concat(_automatic_tax.list_invalid_properties_for("automatic_tax")) if _automatic_tax.is_a?(OpenApi::Validatable)
      end
      unless (_billing_address_collection = @billing_address_collection).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BILLING_ADDRESS_COLLECTION) unless OpenApi::EnumValidator.valid?(_billing_address_collection, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end
      unless (_cancel_url = @cancel_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("cancel_url", _cancel_url.to_s.size, MAX_LENGTH_FOR_CANCEL_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_client_reference_id = @client_reference_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_reference_id", _client_reference_id.to_s.size, MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_client_secret = @client_secret).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_secret", _client_secret.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_consent = @consent).nil?
        invalid_properties.concat(_consent.list_invalid_properties_for("consent")) if _consent.is_a?(OpenApi::Validatable)
      end
      unless (_consent_collection = @consent_collection).nil?
        invalid_properties.concat(_consent_collection.list_invalid_properties_for("consent_collection")) if _consent_collection.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      unless (_currency_conversion = @currency_conversion).nil?
        invalid_properties.concat(_currency_conversion.list_invalid_properties_for("currency_conversion")) if _currency_conversion.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"custom_fields\" is required and cannot be null") if @custom_fields.nil?

      unless (_custom_fields = @custom_fields).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "custom_fields", container: _custom_fields)) if _custom_fields.is_a?(Array)
      end
      invalid_properties.push("\"custom_text\" is required and cannot be null") if @custom_text.nil?

      unless (_custom_text = @custom_text).nil?
        invalid_properties.concat(_custom_text.list_invalid_properties_for("custom_text")) if _custom_text.is_a?(OpenApi::Validatable)
      end
      unless (_customer = @customer).nil?
        invalid_properties.concat(_customer.list_invalid_properties_for("customer")) if _customer.is_a?(OpenApi::Validatable)
      end
      unless (_customer_creation = @customer_creation).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CUSTOMER_CREATION) unless OpenApi::EnumValidator.valid?(_customer_creation, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end
      unless (_customer_details = @customer_details).nil?
        invalid_properties.concat(_customer_details.list_invalid_properties_for("customer_details")) if _customer_details.is_a?(OpenApi::Validatable)
      end
      unless (_customer_email = @customer_email).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("customer_email", _customer_email.to_s.size, MAX_LENGTH_FOR_CUSTOMER_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"expires_at\" is required and cannot be null") if @expires_at.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_invoice = @invoice).nil?
        invalid_properties.concat(_invoice.list_invalid_properties_for("invoice")) if _invoice.is_a?(OpenApi::Validatable)
      end
      unless (_invoice_creation = @invoice_creation).nil?
        invalid_properties.concat(_invoice_creation.list_invalid_properties_for("invoice_creation")) if _invoice_creation.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      unless (_locale = @locale).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_LOCALE) unless OpenApi::EnumValidator.valid?(_locale, VALID_VALUES_FOR_LOCALE)
      end

      invalid_properties.push("\"mode\" is required and cannot be null") if @mode.nil?

      unless (_mode = @mode).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_MODE) unless OpenApi::EnumValidator.valid?(_mode, VALID_VALUES_FOR_MODE)
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_payment_intent = @payment_intent).nil?
        invalid_properties.concat(_payment_intent.list_invalid_properties_for("payment_intent")) if _payment_intent.is_a?(OpenApi::Validatable)
      end
      unless (_payment_link = @payment_link).nil?
        invalid_properties.concat(_payment_link.list_invalid_properties_for("payment_link")) if _payment_link.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_collection = @payment_method_collection).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_METHOD_COLLECTION) unless OpenApi::EnumValidator.valid?(_payment_method_collection, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end
      unless (_payment_method_configuration_details = @payment_method_configuration_details).nil?
        invalid_properties.concat(_payment_method_configuration_details.list_invalid_properties_for("payment_method_configuration_details")) if _payment_method_configuration_details.is_a?(OpenApi::Validatable)
      end
      unless (_payment_method_options = @payment_method_options).nil?
        invalid_properties.concat(_payment_method_options.list_invalid_properties_for("payment_method_options")) if _payment_method_options.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"payment_method_types\" is required and cannot be null") if @payment_method_types.nil?

      invalid_properties.push("\"payment_status\" is required and cannot be null") if @payment_status.nil?

      unless (_payment_status = @payment_status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_PAYMENT_STATUS) unless OpenApi::EnumValidator.valid?(_payment_status, VALID_VALUES_FOR_PAYMENT_STATUS)
      end
      unless (_recovered_from = @recovered_from).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("recovered_from", _recovered_from.to_s.size, MAX_LENGTH_FOR_RECOVERED_FROM)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_saved_payment_method_options = @saved_payment_method_options).nil?
        invalid_properties.concat(_saved_payment_method_options.list_invalid_properties_for("saved_payment_method_options")) if _saved_payment_method_options.is_a?(OpenApi::Validatable)
      end
      unless (_setup_intent = @setup_intent).nil?
        invalid_properties.concat(_setup_intent.list_invalid_properties_for("setup_intent")) if _setup_intent.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_address_collection = @shipping_address_collection).nil?
        invalid_properties.concat(_shipping_address_collection.list_invalid_properties_for("shipping_address_collection")) if _shipping_address_collection.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_cost = @shipping_cost).nil?
        invalid_properties.concat(_shipping_cost.list_invalid_properties_for("shipping_cost")) if _shipping_cost.is_a?(OpenApi::Validatable)
      end
      unless (_shipping_details = @shipping_details).nil?
        invalid_properties.concat(_shipping_details.list_invalid_properties_for("shipping_details")) if _shipping_details.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"shipping_options\" is required and cannot be null") if @shipping_options.nil?

      unless (_shipping_options = @shipping_options).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "shipping_options", container: _shipping_options)) if _shipping_options.is_a?(Array)
      end
      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      unless (_submit_type = @submit_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SUBMIT_TYPE) unless OpenApi::EnumValidator.valid?(_submit_type, VALID_VALUES_FOR_SUBMIT_TYPE)
      end
      unless (_subscription = @subscription).nil?
        invalid_properties.concat(_subscription.list_invalid_properties_for("subscription")) if _subscription.is_a?(OpenApi::Validatable)
      end
      unless (_success_url = @success_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("success_url", _success_url.to_s.size, MAX_LENGTH_FOR_SUCCESS_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_total_details = @total_details).nil?
        invalid_properties.concat(_total_details.list_invalid_properties_for("total_details")) if _total_details.is_a?(OpenApi::Validatable)
      end
      unless (_ui_mode = @ui_mode).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_UI_MODE) unless OpenApi::EnumValidator.valid?(_ui_mode, VALID_VALUES_FOR_UI_MODE)
      end
      unless (_url = @url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("url", _url.to_s.size, MAX_LENGTH_FOR_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_line_items = @line_items).nil?
        invalid_properties.concat(_line_items.list_invalid_properties_for("line_items")) if _line_items.is_a?(OpenApi::Validatable)
      end
      unless (_phone_number_collection = @phone_number_collection).nil?
        invalid_properties.concat(_phone_number_collection.list_invalid_properties_for("phone_number_collection")) if _phone_number_collection.is_a?(OpenApi::Validatable)
      end
      unless (_redirect_on_completion = @redirect_on_completion).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REDIRECT_ON_COMPLETION) unless OpenApi::EnumValidator.valid?(_redirect_on_completion, VALID_VALUES_FOR_REDIRECT_ON_COMPLETION)
      end
      unless (_return_url = @return_url).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("return_url", _return_url.to_s.size, MAX_LENGTH_FOR_RETURN_URL)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_tax_id_collection = @tax_id_collection).nil?
        invalid_properties.concat(_tax_id_collection.list_invalid_properties_for("tax_id_collection")) if _tax_id_collection.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_after_expiration = @after_expiration).nil?
        return false if _after_expiration.is_a?(OpenApi::Validatable) && !_after_expiration.valid?
      end

      return false if @automatic_tax.nil?
      unless (_automatic_tax = @automatic_tax).nil?
        return false if _automatic_tax.is_a?(OpenApi::Validatable) && !_automatic_tax.valid?
      end

      unless (_billing_address_collection = @billing_address_collection).nil?
        return false unless OpenApi::EnumValidator.valid?(_billing_address_collection, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end

      unless (_cancel_url = @cancel_url).nil?
        return false if _cancel_url.to_s.size > MAX_LENGTH_FOR_CANCEL_URL
      end

      unless (_client_reference_id = @client_reference_id).nil?
        return false if _client_reference_id.to_s.size > MAX_LENGTH_FOR_CLIENT_REFERENCE_ID
      end

      unless (_client_secret = @client_secret).nil?
        return false if _client_secret.to_s.size > MAX_LENGTH_FOR_CLIENT_SECRET
      end

      unless (_consent = @consent).nil?
        return false if _consent.is_a?(OpenApi::Validatable) && !_consent.valid?
      end

      unless (_consent_collection = @consent_collection).nil?
        return false if _consent_collection.is_a?(OpenApi::Validatable) && !_consent_collection.valid?
      end

      return false if @created.nil?

      unless (_currency_conversion = @currency_conversion).nil?
        return false if _currency_conversion.is_a?(OpenApi::Validatable) && !_currency_conversion.valid?
      end

      return false if @custom_fields.nil?
      unless (_custom_fields = @custom_fields).nil?
        return false if _custom_fields.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _custom_fields)
      end

      return false if @custom_text.nil?
      unless (_custom_text = @custom_text).nil?
        return false if _custom_text.is_a?(OpenApi::Validatable) && !_custom_text.valid?
      end

      unless (_customer = @customer).nil?
        return false if _customer.is_a?(OpenApi::Validatable) && !_customer.valid?
      end

      unless (_customer_creation = @customer_creation).nil?
        return false unless OpenApi::EnumValidator.valid?(_customer_creation, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end

      unless (_customer_details = @customer_details).nil?
        return false if _customer_details.is_a?(OpenApi::Validatable) && !_customer_details.valid?
      end

      unless (_customer_email = @customer_email).nil?
        return false if _customer_email.to_s.size > MAX_LENGTH_FOR_CUSTOMER_EMAIL
      end

      return false if @expires_at.nil?

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      unless (_invoice = @invoice).nil?
        return false if _invoice.is_a?(OpenApi::Validatable) && !_invoice.valid?
      end

      unless (_invoice_creation = @invoice_creation).nil?
        return false if _invoice_creation.is_a?(OpenApi::Validatable) && !_invoice_creation.valid?
      end

      return false if @livemode.nil?

      unless (_locale = @locale).nil?
        return false unless OpenApi::EnumValidator.valid?(_locale, VALID_VALUES_FOR_LOCALE)
      end

      return false if @mode.nil?
      unless (_mode = @mode).nil?
        return false unless OpenApi::EnumValidator.valid?(_mode, VALID_VALUES_FOR_MODE)
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_payment_intent = @payment_intent).nil?
        return false if _payment_intent.is_a?(OpenApi::Validatable) && !_payment_intent.valid?
      end

      unless (_payment_link = @payment_link).nil?
        return false if _payment_link.is_a?(OpenApi::Validatable) && !_payment_link.valid?
      end

      unless (_payment_method_collection = @payment_method_collection).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_method_collection, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end

      unless (_payment_method_configuration_details = @payment_method_configuration_details).nil?
        return false if _payment_method_configuration_details.is_a?(OpenApi::Validatable) && !_payment_method_configuration_details.valid?
      end

      unless (_payment_method_options = @payment_method_options).nil?
        return false if _payment_method_options.is_a?(OpenApi::Validatable) && !_payment_method_options.valid?
      end

      return false if @payment_method_types.nil?

      return false if @payment_status.nil?
      unless (_payment_status = @payment_status).nil?
        return false unless OpenApi::EnumValidator.valid?(_payment_status, VALID_VALUES_FOR_PAYMENT_STATUS)
      end

      unless (_recovered_from = @recovered_from).nil?
        return false if _recovered_from.to_s.size > MAX_LENGTH_FOR_RECOVERED_FROM
      end

      unless (_saved_payment_method_options = @saved_payment_method_options).nil?
        return false if _saved_payment_method_options.is_a?(OpenApi::Validatable) && !_saved_payment_method_options.valid?
      end

      unless (_setup_intent = @setup_intent).nil?
        return false if _setup_intent.is_a?(OpenApi::Validatable) && !_setup_intent.valid?
      end

      unless (_shipping_address_collection = @shipping_address_collection).nil?
        return false if _shipping_address_collection.is_a?(OpenApi::Validatable) && !_shipping_address_collection.valid?
      end

      unless (_shipping_cost = @shipping_cost).nil?
        return false if _shipping_cost.is_a?(OpenApi::Validatable) && !_shipping_cost.valid?
      end

      unless (_shipping_details = @shipping_details).nil?
        return false if _shipping_details.is_a?(OpenApi::Validatable) && !_shipping_details.valid?
      end

      return false if @shipping_options.nil?
      unless (_shipping_options = @shipping_options).nil?
        return false if _shipping_options.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _shipping_options)
      end

      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      unless (_submit_type = @submit_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_submit_type, VALID_VALUES_FOR_SUBMIT_TYPE)
      end

      unless (_subscription = @subscription).nil?
        return false if _subscription.is_a?(OpenApi::Validatable) && !_subscription.valid?
      end

      unless (_success_url = @success_url).nil?
        return false if _success_url.to_s.size > MAX_LENGTH_FOR_SUCCESS_URL
      end

      unless (_total_details = @total_details).nil?
        return false if _total_details.is_a?(OpenApi::Validatable) && !_total_details.valid?
      end

      unless (_ui_mode = @ui_mode).nil?
        return false unless OpenApi::EnumValidator.valid?(_ui_mode, VALID_VALUES_FOR_UI_MODE)
      end

      unless (_url = @url).nil?
        return false if _url.to_s.size > MAX_LENGTH_FOR_URL
      end

      unless (_line_items = @line_items).nil?
        return false if _line_items.is_a?(OpenApi::Validatable) && !_line_items.valid?
      end

      unless (_phone_number_collection = @phone_number_collection).nil?
        return false if _phone_number_collection.is_a?(OpenApi::Validatable) && !_phone_number_collection.valid?
      end

      unless (_redirect_on_completion = @redirect_on_completion).nil?
        return false unless OpenApi::EnumValidator.valid?(_redirect_on_completion, VALID_VALUES_FOR_REDIRECT_ON_COMPLETION)
      end

      unless (_return_url = @return_url).nil?
        return false if _return_url.to_s.size > MAX_LENGTH_FOR_RETURN_URL
      end

      unless (_tax_id_collection = @tax_id_collection).nil?
        return false if _tax_id_collection.is_a?(OpenApi::Validatable) && !_tax_id_collection.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] after_expiration Object to be assigned
    def after_expiration=(new_value : Stripe::CheckoutSessionAfterExpiration?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @after_expiration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_promotion_codes Object to be assigned
    def allow_promotion_codes=(new_value : Bool?)
      @allow_promotion_codes = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(new_value : Int64?)
      @amount_subtotal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(new_value : Int64?)
      @amount_total = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(new_value : Stripe::PaymentPagesCheckoutSessionAutomaticTax?)
      raise ArgumentError.new("\"automatic_tax\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @automatic_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address_collection Object to be assigned
    def billing_address_collection=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("billing_address_collection", new_value, VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
      end

      @billing_address_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_url Object to be assigned
    def cancel_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("cancel_url", new_value.to_s.size, MAX_LENGTH_FOR_CANCEL_URL)
      end

      @cancel_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_reference_id Object to be assigned
    def client_reference_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_reference_id", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_REFERENCE_ID)
      end

      @client_reference_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_secret Object to be assigned
    def client_secret=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_secret", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_SECRET)
      end

      @client_secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent Object to be assigned
    def consent=(new_value : Stripe::CheckoutSessionConsent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @consent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_collection Object to be assigned
    def consent_collection=(new_value : Stripe::CheckoutSessionConsentCollection?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @consent_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency_conversion Object to be assigned
    def currency_conversion=(new_value : Stripe::CheckoutSessionCurrencyConversion?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @currency_conversion = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(new_value : Array(Stripe::PaymentPagesCheckoutSessionCustomFields)?)
      raise ArgumentError.new("\"custom_fields\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @custom_fields = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_text Object to be assigned
    def custom_text=(new_value : Stripe::PaymentPagesCheckoutSessionCustomText?)
      raise ArgumentError.new("\"custom_text\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @custom_text = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(new_value : Stripe::CheckoutSessionCustomer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_creation Object to be assigned
    def customer_creation=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("customer_creation", new_value, VALID_VALUES_FOR_CUSTOMER_CREATION)
      end

      @customer_creation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_details Object to be assigned
    def customer_details=(new_value : Stripe::CheckoutSessionCustomerDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_email Object to be assigned
    def customer_email=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("customer_email", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOMER_EMAIL)
      end

      @customer_email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_at Object to be assigned
    def expires_at=(new_value : Int64?)
      raise ArgumentError.new("\"expires_at\" is required and cannot be null") if new_value.nil?

      @expires_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice Object to be assigned
    def invoice=(new_value : Stripe::CheckoutSessionInvoice?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_creation Object to be assigned
    def invoice_creation=(new_value : Stripe::CheckoutSessionInvoiceCreation?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice_creation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locale Object to be assigned
    def locale=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("locale", new_value, VALID_VALUES_FOR_LOCALE)
      end

      @locale = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(new_value : String?)
      raise ArgumentError.new("\"mode\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("mode", new_value, VALID_VALUES_FOR_MODE)
      end

      @mode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(new_value : Stripe::CheckoutSessionPaymentIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_link Object to be assigned
    def payment_link=(new_value : Stripe::CheckoutSessionPaymentLink?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_collection Object to be assigned
    def payment_method_collection=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_method_collection", new_value, VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
      end

      @payment_method_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_configuration_details Object to be assigned
    def payment_method_configuration_details=(new_value : Stripe::CheckoutSessionPaymentMethodConfigurationDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_configuration_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(new_value : Stripe::CheckoutSessionPaymentMethodOptions1?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_method_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(new_value : Array(String)?)
      raise ArgumentError.new("\"payment_method_types\" is required and cannot be null") if new_value.nil?

      @payment_method_types = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_status Object to be assigned
    def payment_status=(new_value : String?)
      raise ArgumentError.new("\"payment_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("payment_status", new_value, VALID_VALUES_FOR_PAYMENT_STATUS)
      end

      @payment_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recovered_from Object to be assigned
    def recovered_from=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("recovered_from", new_value.to_s.size, MAX_LENGTH_FOR_RECOVERED_FROM)
      end

      @recovered_from = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] saved_payment_method_options Object to be assigned
    def saved_payment_method_options=(new_value : Stripe::CheckoutSessionSavedPaymentMethodOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @saved_payment_method_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_intent Object to be assigned
    def setup_intent=(new_value : Stripe::CheckoutSessionSetupIntent?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @setup_intent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_address_collection Object to be assigned
    def shipping_address_collection=(new_value : Stripe::CheckoutSessionShippingAddressCollection?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_address_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_cost Object to be assigned
    def shipping_cost=(new_value : Stripe::CheckoutSessionShippingCost?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_cost = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_details Object to be assigned
    def shipping_details=(new_value : Stripe::CheckoutSessionShippingDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_options Object to be assigned
    def shipping_options=(new_value : Array(Stripe::PaymentPagesCheckoutSessionShippingOption)?)
      raise ArgumentError.new("\"shipping_options\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @shipping_options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submit_type Object to be assigned
    def submit_type=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("submit_type", new_value, VALID_VALUES_FOR_SUBMIT_TYPE)
      end

      @submit_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription Object to be assigned
    def subscription=(new_value : Stripe::CheckoutSessionSubscription?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscription = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] success_url Object to be assigned
    def success_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("success_url", new_value.to_s.size, MAX_LENGTH_FOR_SUCCESS_URL)
      end

      @success_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_details Object to be assigned
    def total_details=(new_value : Stripe::CheckoutSessionTotalDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @total_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ui_mode Object to be assigned
    def ui_mode=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("ui_mode", new_value, VALID_VALUES_FOR_UI_MODE)
      end

      @ui_mode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("url", new_value.to_s.size, MAX_LENGTH_FOR_URL)
      end

      @url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(new_value : Stripe::PaymentPagesCheckoutSessionListLineItems?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @line_items = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number_collection Object to be assigned
    def phone_number_collection=(new_value : Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @phone_number_collection = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect_on_completion Object to be assigned
    def redirect_on_completion=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("redirect_on_completion", new_value, VALID_VALUES_FOR_REDIRECT_ON_COMPLETION)
      end

      @redirect_on_completion = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_url Object to be assigned
    def return_url=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("return_url", new_value.to_s.size, MAX_LENGTH_FOR_RETURN_URL)
      end

      @return_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_id_collection Object to be assigned
    def tax_id_collection=(new_value : Stripe::PaymentPagesCheckoutSessionTaxIdCollection?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_id_collection = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@after_expiration, @allow_promotion_codes, @amount_subtotal, @amount_total, @automatic_tax, @billing_address_collection, @cancel_url, @client_reference_id, @client_secret, @consent, @consent_collection, @created, @currency, @currency_conversion, @custom_fields, @custom_text, @customer, @customer_creation, @customer_details, @customer_email, @expires_at, @id, @invoice, @invoice_creation, @livemode, @locale, @metadata, @mode, @object, @payment_intent, @payment_link, @payment_method_collection, @payment_method_configuration_details, @payment_method_options, @payment_method_types, @payment_status, @recovered_from, @saved_payment_method_options, @setup_intent, @shipping_address_collection, @shipping_cost, @shipping_details, @shipping_options, @status, @submit_type, @subscription, @success_url, @total_details, @ui_mode, @url, @line_items, @phone_number_collection, @redirect_on_completion, @return_url, @tax_id_collection)
  end
end
