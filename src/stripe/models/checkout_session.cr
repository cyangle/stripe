#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A Checkout Session represents your customer's session as they pay for one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout) or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a new Session each time your customer attempts to pay.  Once payment is successful, the Checkout Session will contain a reference to the [Customer](https://stripe.com/docs/api/customers), and either the successful [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active [Subscription](https://stripe.com/docs/api/subscriptions).  You can create a Checkout Session on your server and pass its ID to the client to begin Checkout.  Related guide: [Checkout Quickstart](https://stripe.com/docs/checkout/quickstart).
  class CheckoutSession
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Required properties

    @[JSON::Field(key: "automatic_tax", type: Stripe::PaymentPagesCheckoutSessionAutomaticTax?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automatic_tax : Stripe::PaymentPagesCheckoutSessionAutomaticTax? = nil

    # The URL the customer will be directed to if they decide to cancel payment and return to your website.
    @[JSON::Field(key: "cancel_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cancel_url : String? = nil

    # The timestamp at which the Checkout Session will expire.
    @[JSON::Field(key: "expires_at", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expires_at : Int64? = nil

    # Unique identifier for the object. Used to pass to `redirectToCheckout` in Stripe.js.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The mode of the Checkout Session.
    @[JSON::Field(key: "mode", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter mode : String? = nil

    ENUM_VALIDATOR_FOR_MODE = EnumValidator.new("mode", "String", ["payment", "setup", "subscription"])

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["checkout.session"])

    # A list of the types of payment methods (e.g. card) this Checkout Session is allowed to accept.
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_method_types : Array(String)? = nil

    # The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`. You can use this value to decide when to fulfill your customer's order.
    @[JSON::Field(key: "payment_status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_status : String? = nil

    ENUM_VALIDATOR_FOR_PAYMENT_STATUS = EnumValidator.new("payment_status", "String", ["no_payment_required", "paid", "unpaid"])

    # The shipping rate options applied to this Session.
    @[JSON::Field(key: "shipping_options", type: Array(Stripe::PaymentPagesCheckoutSessionShippingOption)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter shipping_options : Array(Stripe::PaymentPagesCheckoutSessionShippingOption)? = nil

    # The URL the customer will be directed to after the payment or subscription creation is successful.
    @[JSON::Field(key: "success_url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter success_url : String? = nil

    # Optional properties

    @[JSON::Field(key: "after_expiration", type: Stripe::CheckoutSessionAfterExpiration?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: after_expiration.nil? && !after_expiration_present?)]
    getter after_expiration : Stripe::CheckoutSessionAfterExpiration? = nil

    @[JSON::Field(ignore: true)]
    property? after_expiration_present : Bool = false

    # Enables user redeemable promotion codes.
    @[JSON::Field(key: "allow_promotion_codes", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: allow_promotion_codes.nil? && !allow_promotion_codes_present?)]
    getter allow_promotion_codes : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? allow_promotion_codes_present : Bool = false

    # Total of all items before discounts or taxes are applied.
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount_subtotal.nil? && !amount_subtotal_present?)]
    getter amount_subtotal : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_subtotal_present : Bool = false

    # Total of all items after discounts and taxes are applied.
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount_total.nil? && !amount_total_present?)]
    getter amount_total : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_total_present : Bool = false

    # Describes whether Checkout should collect the customer's billing address.
    @[JSON::Field(key: "billing_address_collection", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: billing_address_collection.nil? && !billing_address_collection_present?)]
    getter billing_address_collection : String? = nil

    @[JSON::Field(ignore: true)]
    property? billing_address_collection_present : Bool = false

    ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION = EnumValidator.new("billing_address_collection", "String", ["auto", "required"])

    # A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the Session with your internal systems.
    @[JSON::Field(key: "client_reference_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: client_reference_id.nil? && !client_reference_id_present?)]
    getter client_reference_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? client_reference_id_present : Bool = false

    @[JSON::Field(key: "consent", type: Stripe::CheckoutSessionConsent?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: consent.nil? && !consent_present?)]
    getter consent : Stripe::CheckoutSessionConsent? = nil

    @[JSON::Field(ignore: true)]
    property? consent_present : Bool = false

    @[JSON::Field(key: "consent_collection", type: Stripe::CheckoutSessionConsentCollection?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: consent_collection.nil? && !consent_collection_present?)]
    getter consent_collection : Stripe::CheckoutSessionConsentCollection? = nil

    @[JSON::Field(ignore: true)]
    property? consent_collection_present : Bool = false

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    @[JSON::Field(key: "customer", type: Stripe::CheckoutSessionCustomer?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : Stripe::CheckoutSessionCustomer? = nil

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
    @[JSON::Field(key: "customer_creation", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_creation.nil? && !customer_creation_present?)]
    getter customer_creation : String? = nil

    @[JSON::Field(ignore: true)]
    property? customer_creation_present : Bool = false

    ENUM_VALIDATOR_FOR_CUSTOMER_CREATION = EnumValidator.new("customer_creation", "String", ["always", "if_required"])

    @[JSON::Field(key: "customer_details", type: Stripe::CheckoutSessionCustomerDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_details.nil? && !customer_details_present?)]
    getter customer_details : Stripe::CheckoutSessionCustomerDetails? = nil

    @[JSON::Field(ignore: true)]
    property? customer_details_present : Bool = false

    # If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once the payment flow is complete, use the `customer` attribute.
    @[JSON::Field(key: "customer_email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customer_email.nil? && !customer_email_present?)]
    getter customer_email : String? = nil

    @[JSON::Field(ignore: true)]
    property? customer_email_present : Bool = false

    @[JSON::Field(key: "line_items", type: Stripe::PaymentPagesCheckoutSessionListLineItems1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter line_items : Stripe::PaymentPagesCheckoutSessionListLineItems1? = nil

    # The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    @[JSON::Field(key: "locale", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: locale.nil? && !locale_present?)]
    getter locale : String? = nil

    @[JSON::Field(ignore: true)]
    property? locale_present : Bool = false

    ENUM_VALIDATOR_FOR_LOCALE = EnumValidator.new("locale", "String", ["auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW"])

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "payment_intent", type: Stripe::CheckoutSessionPaymentIntent?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_intent.nil? && !payment_intent_present?)]
    getter payment_intent : Stripe::CheckoutSessionPaymentIntent? = nil

    @[JSON::Field(ignore: true)]
    property? payment_intent_present : Bool = false

    @[JSON::Field(key: "payment_link", type: Stripe::CheckoutSessionPaymentLink?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_link.nil? && !payment_link_present?)]
    getter payment_link : Stripe::CheckoutSessionPaymentLink? = nil

    @[JSON::Field(ignore: true)]
    property? payment_link_present : Bool = false

    # Configure whether a Checkout Session should collect a payment method.
    @[JSON::Field(key: "payment_method_collection", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method_collection.nil? && !payment_method_collection_present?)]
    getter payment_method_collection : String? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_collection_present : Bool = false

    ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION = EnumValidator.new("payment_method_collection", "String", ["always", "if_required"])

    @[JSON::Field(key: "payment_method_options", type: Stripe::CheckoutSessionPaymentMethodOptions1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method_options.nil? && !payment_method_options_present?)]
    getter payment_method_options : Stripe::CheckoutSessionPaymentMethodOptions1? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_options_present : Bool = false

    @[JSON::Field(key: "phone_number_collection", type: Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone_number_collection : Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection? = nil

    # The ID of the original expired Checkout Session that triggered the recovery flow.
    @[JSON::Field(key: "recovered_from", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: recovered_from.nil? && !recovered_from_present?)]
    getter recovered_from : String? = nil

    @[JSON::Field(ignore: true)]
    property? recovered_from_present : Bool = false

    @[JSON::Field(key: "setup_intent", type: Stripe::CheckoutSessionSetupIntent?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: setup_intent.nil? && !setup_intent_present?)]
    getter setup_intent : Stripe::CheckoutSessionSetupIntent? = nil

    @[JSON::Field(ignore: true)]
    property? setup_intent_present : Bool = false

    @[JSON::Field(key: "shipping_address_collection", type: Stripe::CheckoutSessionShippingAddressCollection?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_address_collection.nil? && !shipping_address_collection_present?)]
    getter shipping_address_collection : Stripe::CheckoutSessionShippingAddressCollection? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_address_collection_present : Bool = false

    @[JSON::Field(key: "shipping_cost", type: Stripe::CheckoutSessionShippingCost?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_cost.nil? && !shipping_cost_present?)]
    getter shipping_cost : Stripe::CheckoutSessionShippingCost? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_cost_present : Bool = false

    @[JSON::Field(key: "shipping_details", type: Stripe::CheckoutSessionShippingDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: shipping_details.nil? && !shipping_details_present?)]
    getter shipping_details : Stripe::CheckoutSessionShippingDetails? = nil

    @[JSON::Field(ignore: true)]
    property? shipping_details_present : Bool = false

    # The status of the Checkout Session, one of `open`, `complete`, or `expired`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String? = nil

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["complete", "expired", "open"])

    # Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode.
    @[JSON::Field(key: "submit_type", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: submit_type.nil? && !submit_type_present?)]
    getter submit_type : String? = nil

    @[JSON::Field(ignore: true)]
    property? submit_type_present : Bool = false

    ENUM_VALIDATOR_FOR_SUBMIT_TYPE = EnumValidator.new("submit_type", "String", ["auto", "book", "donate", "pay"])

    @[JSON::Field(key: "subscription", type: Stripe::CheckoutSessionSubscription?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: subscription.nil? && !subscription_present?)]
    getter subscription : Stripe::CheckoutSessionSubscription? = nil

    @[JSON::Field(ignore: true)]
    property? subscription_present : Bool = false

    @[JSON::Field(key: "tax_id_collection", type: Stripe::PaymentPagesCheckoutSessionTaxIdCollection?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_id_collection : Stripe::PaymentPagesCheckoutSessionTaxIdCollection? = nil

    @[JSON::Field(key: "total_details", type: Stripe::CheckoutSessionTotalDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: total_details.nil? && !total_details_present?)]
    getter total_details : Stripe::CheckoutSessionTotalDetails? = nil

    @[JSON::Field(ignore: true)]
    property? total_details_present : Bool = false

    # The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.` This value is only present when the session is active.
    @[JSON::Field(key: "url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: url.nil? && !url_present?)]
    getter url : String? = nil

    @[JSON::Field(ignore: true)]
    property? url_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @automatic_tax : Stripe::PaymentPagesCheckoutSessionAutomaticTax? = nil,
      @cancel_url : String? = nil,
      @expires_at : Int64? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @mode : String? = nil,
      @object : String? = nil,
      @payment_method_types : Array(String)? = nil,
      @payment_status : String? = nil,
      @shipping_options : Array(Stripe::PaymentPagesCheckoutSessionShippingOption)? = nil,
      @success_url : String? = nil,
      # Optional properties
      @after_expiration : Stripe::CheckoutSessionAfterExpiration? = nil,
      @allow_promotion_codes : Bool? = nil,
      @amount_subtotal : Int64? = nil,
      @amount_total : Int64? = nil,
      @billing_address_collection : String? = nil,
      @client_reference_id : String? = nil,
      @consent : Stripe::CheckoutSessionConsent? = nil,
      @consent_collection : Stripe::CheckoutSessionConsentCollection? = nil,
      @currency : String? = nil,
      @customer : Stripe::CheckoutSessionCustomer? = nil,
      @customer_creation : String? = nil,
      @customer_details : Stripe::CheckoutSessionCustomerDetails? = nil,
      @customer_email : String? = nil,
      @line_items : Stripe::PaymentPagesCheckoutSessionListLineItems1? = nil,
      @locale : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @payment_intent : Stripe::CheckoutSessionPaymentIntent? = nil,
      @payment_link : Stripe::CheckoutSessionPaymentLink? = nil,
      @payment_method_collection : String? = nil,
      @payment_method_options : Stripe::CheckoutSessionPaymentMethodOptions1? = nil,
      @phone_number_collection : Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection? = nil,
      @recovered_from : String? = nil,
      @setup_intent : Stripe::CheckoutSessionSetupIntent? = nil,
      @shipping_address_collection : Stripe::CheckoutSessionShippingAddressCollection? = nil,
      @shipping_cost : Stripe::CheckoutSessionShippingCost? = nil,
      @shipping_details : Stripe::CheckoutSessionShippingDetails? = nil,
      @status : String? = nil,
      @submit_type : String? = nil,
      @subscription : Stripe::CheckoutSessionSubscription? = nil,
      @tax_id_collection : Stripe::PaymentPagesCheckoutSessionTaxIdCollection? = nil,
      @total_details : Stripe::CheckoutSessionTotalDetails? = nil,
      @url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push("\"automatic_tax\" is required and cannot be null") if @automatic_tax.nil?
      # This is a model automatic_tax : Stripe::PaymentPagesCheckoutSessionAutomaticTax?
      invalid_properties.push("\"cancel_url\" is required and cannot be null") if @cancel_url.nil?
      if _cancel_url = @cancel_url
        if _cancel_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"cancel_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"expires_at\" is required and cannot be null") if @expires_at.nil?
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_MODE.error_message) unless ENUM_VALIDATOR_FOR_MODE.valid?(@mode, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"payment_method_types\" is required and cannot be null") if @payment_method_types.nil?

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYMENT_STATUS.error_message) unless ENUM_VALIDATOR_FOR_PAYMENT_STATUS.valid?(@payment_status, false)
      invalid_properties.push("\"shipping_options\" is required and cannot be null") if @shipping_options.nil?
      # Container shipping_options array has values of Stripe::PaymentPagesCheckoutSessionShippingOption
      invalid_properties.push("\"success_url\" is required and cannot be null") if @success_url.nil?
      if _success_url = @success_url
        if _success_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"success_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model after_expiration : Stripe::CheckoutSessionAfterExpiration?

      invalid_properties.push(ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.error_message) unless ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid?(@billing_address_collection)
      if _client_reference_id = @client_reference_id
        if _client_reference_id.to_s.size > 5000
          invalid_properties.push("invalid value for \"client_reference_id\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model consent : Stripe::CheckoutSessionConsent?
      # This is a model consent_collection : Stripe::CheckoutSessionConsentCollection?
      # This is a model customer : Stripe::CheckoutSessionCustomer?

      invalid_properties.push(ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.error_message) unless ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid?(@customer_creation)
      # This is a model customer_details : Stripe::CheckoutSessionCustomerDetails?
      if _customer_email = @customer_email
        if _customer_email.to_s.size > 5000
          invalid_properties.push("invalid value for \"customer_email\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model line_items : Stripe::PaymentPagesCheckoutSessionListLineItems1?

      invalid_properties.push(ENUM_VALIDATOR_FOR_LOCALE.error_message) unless ENUM_VALIDATOR_FOR_LOCALE.valid?(@locale)
      # This is a model payment_intent : Stripe::CheckoutSessionPaymentIntent?
      # This is a model payment_link : Stripe::CheckoutSessionPaymentLink?

      invalid_properties.push(ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION.error_message) unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION.valid?(@payment_method_collection)
      # This is a model payment_method_options : Stripe::CheckoutSessionPaymentMethodOptions1?
      # This is a model phone_number_collection : Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection?
      if _recovered_from = @recovered_from
        if _recovered_from.to_s.size > 5000
          invalid_properties.push("invalid value for \"recovered_from\", the character length must be smaller than or equal to 5000.")
        end
      end
      # This is a model setup_intent : Stripe::CheckoutSessionSetupIntent?
      # This is a model shipping_address_collection : Stripe::CheckoutSessionShippingAddressCollection?
      # This is a model shipping_cost : Stripe::CheckoutSessionShippingCost?
      # This is a model shipping_details : Stripe::CheckoutSessionShippingDetails?

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)

      invalid_properties.push(ENUM_VALIDATOR_FOR_SUBMIT_TYPE.error_message) unless ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid?(@submit_type)
      # This is a model subscription : Stripe::CheckoutSessionSubscription?
      # This is a model tax_id_collection : Stripe::PaymentPagesCheckoutSessionTaxIdCollection?
      # This is a model total_details : Stripe::CheckoutSessionTotalDetails?
      if _url = @url
        if _url.to_s.size > 5000
          invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @automatic_tax.nil?
      return false if @cancel_url.nil?
      if _cancel_url = @cancel_url
        return false if _cancel_url.to_s.size > 5000
      end
      return false if @expires_at.nil?
      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?
      return false unless ENUM_VALIDATOR_FOR_MODE.valid?(@mode, false)
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @payment_method_types.nil?
      return false unless ENUM_VALIDATOR_FOR_PAYMENT_STATUS.valid?(@payment_status, false)
      return false if @shipping_options.nil?
      return false if @success_url.nil?
      if _success_url = @success_url
        return false if _success_url.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid?(@billing_address_collection)
      if _client_reference_id = @client_reference_id
        return false if _client_reference_id.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid?(@customer_creation)
      if _customer_email = @customer_email
        return false if _customer_email.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_LOCALE.valid?(@locale)
      return false unless ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION.valid?(@payment_method_collection)
      if _recovered_from = @recovered_from
        return false if _recovered_from.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)
      return false unless ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid?(@submit_type)
      if _url = @url
        return false if _url.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : Stripe::PaymentPagesCheckoutSessionAutomaticTax?)
      if automatic_tax.nil?
        raise ArgumentError.new("\"automatic_tax\" is required and cannot be null")
      end
      @automatic_tax = automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel_url Object to be assigned
    def cancel_url=(cancel_url : String?)
      if cancel_url.nil?
        raise ArgumentError.new("\"cancel_url\" is required and cannot be null")
      end
      _cancel_url = cancel_url.not_nil!
      if _cancel_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cancel_url\", the character length must be smaller than or equal to 5000.")
      end

      @cancel_url = cancel_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_at Object to be assigned
    def expires_at=(expires_at : Int64?)
      if expires_at.nil?
        raise ArgumentError.new("\"expires_at\" is required and cannot be null")
      end
      @expires_at = expires_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      @livemode = livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(mode : String?)
      if mode.nil?
        raise ArgumentError.new("\"mode\" is required and cannot be null")
      end
      _mode = mode.not_nil!
      ENUM_VALIDATOR_FOR_MODE.valid!(_mode)
      @mode = mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_types Object to be assigned
    def payment_method_types=(payment_method_types : Array(String)?)
      if payment_method_types.nil?
        raise ArgumentError.new("\"payment_method_types\" is required and cannot be null")
      end
      @payment_method_types = payment_method_types
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_status Object to be assigned
    def payment_status=(payment_status : String?)
      if payment_status.nil?
        raise ArgumentError.new("\"payment_status\" is required and cannot be null")
      end
      _payment_status = payment_status.not_nil!
      ENUM_VALIDATOR_FOR_PAYMENT_STATUS.valid!(_payment_status)
      @payment_status = payment_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_options Object to be assigned
    def shipping_options=(shipping_options : Array(Stripe::PaymentPagesCheckoutSessionShippingOption)?)
      if shipping_options.nil?
        raise ArgumentError.new("\"shipping_options\" is required and cannot be null")
      end
      @shipping_options = shipping_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] success_url Object to be assigned
    def success_url=(success_url : String?)
      if success_url.nil?
        raise ArgumentError.new("\"success_url\" is required and cannot be null")
      end
      _success_url = success_url.not_nil!
      if _success_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"success_url\", the character length must be smaller than or equal to 5000.")
      end

      @success_url = success_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] after_expiration Object to be assigned
    def after_expiration=(after_expiration : Stripe::CheckoutSessionAfterExpiration?)
      if after_expiration.nil?
        return @after_expiration = nil
      end
      @after_expiration = after_expiration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_promotion_codes Object to be assigned
    def allow_promotion_codes=(allow_promotion_codes : Bool?)
      if allow_promotion_codes.nil?
        return @allow_promotion_codes = nil
      end
      @allow_promotion_codes = allow_promotion_codes
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(amount_subtotal : Int64?)
      if amount_subtotal.nil?
        return @amount_subtotal = nil
      end
      @amount_subtotal = amount_subtotal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(amount_total : Int64?)
      if amount_total.nil?
        return @amount_total = nil
      end
      @amount_total = amount_total
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address_collection Object to be assigned
    def billing_address_collection=(billing_address_collection : String?)
      if billing_address_collection.nil?
        return @billing_address_collection = nil
      end
      _billing_address_collection = billing_address_collection.not_nil!
      ENUM_VALIDATOR_FOR_BILLING_ADDRESS_COLLECTION.valid!(_billing_address_collection)
      @billing_address_collection = billing_address_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_reference_id Object to be assigned
    def client_reference_id=(client_reference_id : String?)
      if client_reference_id.nil?
        return @client_reference_id = nil
      end
      _client_reference_id = client_reference_id.not_nil!
      if _client_reference_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_reference_id\", the character length must be smaller than or equal to 5000.")
      end

      @client_reference_id = client_reference_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent Object to be assigned
    def consent=(consent : Stripe::CheckoutSessionConsent?)
      if consent.nil?
        return @consent = nil
      end
      @consent = consent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_collection Object to be assigned
    def consent_collection=(consent_collection : Stripe::CheckoutSessionConsentCollection?)
      if consent_collection.nil?
        return @consent_collection = nil
      end
      @consent_collection = consent_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer Object to be assigned
    def customer=(customer : Stripe::CheckoutSessionCustomer?)
      if customer.nil?
        return @customer = nil
      end
      @customer = customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_creation Object to be assigned
    def customer_creation=(customer_creation : String?)
      if customer_creation.nil?
        return @customer_creation = nil
      end
      _customer_creation = customer_creation.not_nil!
      ENUM_VALIDATOR_FOR_CUSTOMER_CREATION.valid!(_customer_creation)
      @customer_creation = customer_creation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_details Object to be assigned
    def customer_details=(customer_details : Stripe::CheckoutSessionCustomerDetails?)
      if customer_details.nil?
        return @customer_details = nil
      end
      @customer_details = customer_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_email Object to be assigned
    def customer_email=(customer_email : String?)
      if customer_email.nil?
        return @customer_email = nil
      end
      _customer_email = customer_email.not_nil!
      if _customer_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_email\", the character length must be smaller than or equal to 5000.")
      end

      @customer_email = customer_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line_items Object to be assigned
    def line_items=(line_items : Stripe::PaymentPagesCheckoutSessionListLineItems1?)
      if line_items.nil?
        return @line_items = nil
      end
      @line_items = line_items
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locale Object to be assigned
    def locale=(locale : String?)
      if locale.nil?
        return @locale = nil
      end
      _locale = locale.not_nil!
      ENUM_VALIDATOR_FOR_LOCALE.valid!(_locale)
      @locale = locale
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_intent Object to be assigned
    def payment_intent=(payment_intent : Stripe::CheckoutSessionPaymentIntent?)
      if payment_intent.nil?
        return @payment_intent = nil
      end
      @payment_intent = payment_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_link Object to be assigned
    def payment_link=(payment_link : Stripe::CheckoutSessionPaymentLink?)
      if payment_link.nil?
        return @payment_link = nil
      end
      @payment_link = payment_link
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_collection Object to be assigned
    def payment_method_collection=(payment_method_collection : String?)
      if payment_method_collection.nil?
        return @payment_method_collection = nil
      end
      _payment_method_collection = payment_method_collection.not_nil!
      ENUM_VALIDATOR_FOR_PAYMENT_METHOD_COLLECTION.valid!(_payment_method_collection)
      @payment_method_collection = payment_method_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_options Object to be assigned
    def payment_method_options=(payment_method_options : Stripe::CheckoutSessionPaymentMethodOptions1?)
      if payment_method_options.nil?
        return @payment_method_options = nil
      end
      @payment_method_options = payment_method_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number_collection Object to be assigned
    def phone_number_collection=(phone_number_collection : Stripe::PaymentPagesCheckoutSessionPhoneNumberCollection?)
      if phone_number_collection.nil?
        return @phone_number_collection = nil
      end
      @phone_number_collection = phone_number_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recovered_from Object to be assigned
    def recovered_from=(recovered_from : String?)
      if recovered_from.nil?
        return @recovered_from = nil
      end
      _recovered_from = recovered_from.not_nil!
      if _recovered_from.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"recovered_from\", the character length must be smaller than or equal to 5000.")
      end

      @recovered_from = recovered_from
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_intent Object to be assigned
    def setup_intent=(setup_intent : Stripe::CheckoutSessionSetupIntent?)
      if setup_intent.nil?
        return @setup_intent = nil
      end
      @setup_intent = setup_intent
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_address_collection Object to be assigned
    def shipping_address_collection=(shipping_address_collection : Stripe::CheckoutSessionShippingAddressCollection?)
      if shipping_address_collection.nil?
        return @shipping_address_collection = nil
      end
      @shipping_address_collection = shipping_address_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_cost Object to be assigned
    def shipping_cost=(shipping_cost : Stripe::CheckoutSessionShippingCost?)
      if shipping_cost.nil?
        return @shipping_cost = nil
      end
      @shipping_cost = shipping_cost
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping_details Object to be assigned
    def shipping_details=(shipping_details : Stripe::CheckoutSessionShippingDetails?)
      if shipping_details.nil?
        return @shipping_details = nil
      end
      @shipping_details = shipping_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      ENUM_VALIDATOR_FOR_STATUS.valid!(_status)
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submit_type Object to be assigned
    def submit_type=(submit_type : String?)
      if submit_type.nil?
        return @submit_type = nil
      end
      _submit_type = submit_type.not_nil!
      ENUM_VALIDATOR_FOR_SUBMIT_TYPE.valid!(_submit_type)
      @submit_type = submit_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription Object to be assigned
    def subscription=(subscription : Stripe::CheckoutSessionSubscription?)
      if subscription.nil?
        return @subscription = nil
      end
      @subscription = subscription
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_id_collection Object to be assigned
    def tax_id_collection=(tax_id_collection : Stripe::PaymentPagesCheckoutSessionTaxIdCollection?)
      if tax_id_collection.nil?
        return @tax_id_collection = nil
      end
      @tax_id_collection = tax_id_collection
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_details Object to be assigned
    def total_details=(total_details : Stripe::CheckoutSessionTotalDetails?)
      if total_details.nil?
        return @total_details = nil
      end
      @total_details = total_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(url : String?)
      if url.nil?
        return @url = nil
      end
      _url = url.not_nil!
      if _url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@automatic_tax, @cancel_url, @expires_at, @id, @livemode, @mode, @object, @payment_method_types, @payment_status, @shipping_options, @success_url, @after_expiration, @after_expiration_present, @allow_promotion_codes, @allow_promotion_codes_present, @amount_subtotal, @amount_subtotal_present, @amount_total, @amount_total_present, @billing_address_collection, @billing_address_collection_present, @client_reference_id, @client_reference_id_present, @consent, @consent_present, @consent_collection, @consent_collection_present, @currency, @currency_present, @customer, @customer_present, @customer_creation, @customer_creation_present, @customer_details, @customer_details_present, @customer_email, @customer_email_present, @line_items, @locale, @locale_present, @metadata, @metadata_present, @payment_intent, @payment_intent_present, @payment_link, @payment_link_present, @payment_method_collection, @payment_method_collection_present, @payment_method_options, @payment_method_options_present, @phone_number_collection, @recovered_from, @recovered_from_present, @setup_intent, @setup_intent_present, @shipping_address_collection, @shipping_address_collection_present, @shipping_cost, @shipping_cost_present, @shipping_details, @shipping_details_present, @status, @status_present, @submit_type, @submit_type_present, @subscription, @subscription_present, @tax_id_collection, @total_details, @total_details_present, @url, @url_present)
  end
end
