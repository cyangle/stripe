#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # A Checkout Session represents your customer's session as they pay for one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout) or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a new Session each time your customer attempts to pay.  Once payment is successful, the Checkout Session will contain a reference to the [Customer](https://stripe.com/docs/api/customers), and either the successful [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active [Subscription](https://stripe.com/docs/api/subscriptions).  You can create a Checkout Session on your server and pass its ID to the client to begin Checkout.  Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
  class CheckoutSession
    include NASON::Serializable

    # Required properties
    @[NASON::Field(key: "automatic_tax", type: PaymentPagesCheckoutSessionAutomaticTax)]
    property automatic_tax : PaymentPagesCheckoutSessionAutomaticTax

    # The URL the customer will be directed to if they decide to cancel payment and return to your website.
    @[NASON::Field(key: "cancel_url", type: String)]
    property cancel_url : String

    # The timestamp at which the Checkout Session will expire.
    @[NASON::Field(key: "expires_at", type: Int64)]
    property expires_at : Int64

    # Unique identifier for the object. Used to pass to `redirectToCheckout` in Stripe.js.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # The mode of the Checkout Session.
    @[NASON::Field(key: "mode", type: String)]
    property mode : String

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # A list of the types of payment methods (e.g. card) this Checkout Session is allowed to accept.
    @[NASON::Field(key: "payment_method_types", type: Array(String))]
    property payment_method_types : Array(String)

    # The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`. You can use this value to decide when to fulfill your customer's order.
    @[NASON::Field(key: "payment_status", type: String)]
    property payment_status : String

    # The shipping rate options applied to this Session.
    @[NASON::Field(key: "shipping_options", type: Array(PaymentPagesCheckoutSessionShippingOption))]
    property shipping_options : Array(PaymentPagesCheckoutSessionShippingOption)

    # The URL the customer will be directed to after the payment or subscription creation is successful.
    @[NASON::Field(key: "success_url", type: String)]
    property success_url : String

    # Optional properties
    # When set, provides configuration for actions to take if this Checkout Session expires.
    @[NASON::Field(key: "after_expiration", type: PaymentPagesCheckoutSessionAfterExpiration? | Null, nillable: true)]
    property after_expiration : PaymentPagesCheckoutSessionAfterExpiration? | Null

    # Enables user redeemable promotion codes.
    @[NASON::Field(key: "allow_promotion_codes", type: Bool? | Null, nillable: true)]
    property allow_promotion_codes : Bool? | Null

    # Total of all items before discounts or taxes are applied.
    @[NASON::Field(key: "amount_subtotal", type: Int64? | Null, nillable: true)]
    property amount_subtotal : Int64? | Null

    # Total of all items after discounts and taxes are applied.
    @[NASON::Field(key: "amount_total", type: Int64? | Null, nillable: true)]
    property amount_total : Int64? | Null

    # Describes whether Checkout should collect the customer's billing address.
    @[NASON::Field(key: "billing_address_collection", type: String? | Null, nillable: true)]
    property billing_address_collection : String? | Null

    # A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the Session with your internal systems.
    @[NASON::Field(key: "client_reference_id", type: String? | Null, nillable: true)]
    property client_reference_id : String? | Null

    # Results of `consent_collection` for this session.
    @[NASON::Field(key: "consent", type: PaymentPagesCheckoutSessionConsent? | Null, nillable: true)]
    property consent : PaymentPagesCheckoutSessionConsent? | Null

    # When set, provides configuration for the Checkout Session to gather active consent from customers.
    @[NASON::Field(key: "consent_collection", type: PaymentPagesCheckoutSessionConsentCollection? | Null, nillable: true)]
    property consent_collection : PaymentPagesCheckoutSessionConsentCollection? | Null

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String? | Null, nillable: true)]
    property currency : String? | Null

    # The ID of the customer for this Session. For Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new customer object based on information provided during the payment flow unless an existing customer was provided when the Session was created.
    @[NASON::Field(key: "customer", type: String | Customer | Nil | Null, nillable: true)]
    property customer : String | Customer | Nil | Null

    # Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
    @[NASON::Field(key: "customer_creation", type: String? | Null, nillable: true)]
    property customer_creation : String? | Null

    # The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode.
    @[NASON::Field(key: "customer_details", type: PaymentPagesCheckoutSessionCustomerDetails? | Null, nillable: true)]
    property customer_details : PaymentPagesCheckoutSessionCustomerDetails? | Null

    # If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once the payment flow is complete, use the `customer` attribute.
    @[NASON::Field(key: "customer_email", type: String? | Null, nillable: true)]
    property customer_email : String? | Null

    @[NASON::Field(key: "line_items", type: PaymentPagesCheckoutSessionListLineItems1?, nillable: true)]
    property line_items : PaymentPagesCheckoutSessionListLineItems1?

    # The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    @[NASON::Field(key: "locale", type: String? | Null, nillable: true)]
    property locale : String? | Null

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    # The ID of the PaymentIntent for Checkout Sessions in `payment` mode.
    @[NASON::Field(key: "payment_intent", type: String | PaymentIntent? | Null, nillable: true)]
    property payment_intent : String | PaymentIntent? | Null

    # The ID of the Payment Link that created this Session.
    @[NASON::Field(key: "payment_link", type: String | PaymentLink? | Null, nillable: true)]
    property payment_link : String | PaymentLink? | Null

    # Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.
    @[NASON::Field(key: "payment_method_options", type: CheckoutSessionPaymentMethodOptions? | Null, nillable: true)]
    property payment_method_options : CheckoutSessionPaymentMethodOptions? | Null

    @[NASON::Field(key: "phone_number_collection", type: PaymentPagesCheckoutSessionPhoneNumberCollection?, nillable: true)]
    property phone_number_collection : PaymentPagesCheckoutSessionPhoneNumberCollection?

    # The ID of the original expired Checkout Session that triggered the recovery flow.
    @[NASON::Field(key: "recovered_from", type: String? | Null, nillable: true)]
    property recovered_from : String? | Null

    # The ID of the SetupIntent for Checkout Sessions in `setup` mode.
    @[NASON::Field(key: "setup_intent", type: String | SetupIntent? | Null, nillable: true)]
    property setup_intent : String | SetupIntent? | Null

    # Shipping information for this Checkout Session.
    @[NASON::Field(key: "shipping", type: Shipping? | Null, nillable: true)]
    property shipping : Shipping? | Null

    # When set, provides configuration for Checkout to collect a shipping address from a customer.
    @[NASON::Field(key: "shipping_address_collection", type: PaymentPagesCheckoutSessionShippingAddressCollection? | Null, nillable: true)]
    property shipping_address_collection : PaymentPagesCheckoutSessionShippingAddressCollection? | Null

    # The ID of the ShippingRate for Checkout Sessions in `payment` mode.
    @[NASON::Field(key: "shipping_rate", type: String | ShippingRate? | Null, nillable: true)]
    property shipping_rate : String | ShippingRate? | Null

    # The status of the Checkout Session, one of `open`, `complete`, or `expired`.
    @[NASON::Field(key: "status", type: String? | Null, nillable: true)]
    property status : String? | Null

    # Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode.
    @[NASON::Field(key: "submit_type", type: String? | Null, nillable: true)]
    property submit_type : String? | Null

    # The ID of the subscription for Checkout Sessions in `subscription` mode.
    @[NASON::Field(key: "subscription", type: String | Subscription? | Null, nillable: true)]
    property subscription : String | Subscription? | Null

    @[NASON::Field(key: "tax_id_collection", type: PaymentPagesCheckoutSessionTaxIdCollection?, nillable: true)]
    property tax_id_collection : PaymentPagesCheckoutSessionTaxIdCollection?

    # Tax and discount details for the computed total amount.
    @[NASON::Field(key: "total_details", type: PaymentPagesCheckoutSessionTotalDetails? | Null, nillable: true)]
    property total_details : PaymentPagesCheckoutSessionTotalDetails? | Null

    # The URL to the Checkout Session.
    @[NASON::Field(key: "url", type: String? | Null, nillable: true)]
    property url : String? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @automatic_tax : PaymentPagesCheckoutSessionAutomaticTax, @cancel_url : String, @expires_at : Int64, @id : String, @livemode : Bool, @mode : String, @object : String, @payment_method_types : Array(String), @payment_status : String, @shipping_options : Array(PaymentPagesCheckoutSessionShippingOption), @success_url : String, @after_expiration : PaymentPagesCheckoutSessionAfterExpiration? | Null = nil, @allow_promotion_codes : Bool? | Null = nil, @amount_subtotal : Int64? | Null = nil, @amount_total : Int64? | Null = nil, @billing_address_collection : String? | Null = nil, @client_reference_id : String? | Null = nil, @consent : PaymentPagesCheckoutSessionConsent? | Null = nil, @consent_collection : PaymentPagesCheckoutSessionConsentCollection? | Null = nil, @currency : String? | Null = nil, @customer : String | Customer | Nil | Null = nil, @customer_creation : String? | Null = nil, @customer_details : PaymentPagesCheckoutSessionCustomerDetails? | Null = nil, @customer_email : String? | Null = nil, @line_items : PaymentPagesCheckoutSessionListLineItems1? = nil, @locale : String? | Null = nil, @metadata : Hash(String, String)? | Null = nil, @payment_intent : String | PaymentIntent? | Null = nil, @payment_link : String | PaymentLink? | Null = nil, @payment_method_options : CheckoutSessionPaymentMethodOptions? | Null = nil, @phone_number_collection : PaymentPagesCheckoutSessionPhoneNumberCollection? = nil, @recovered_from : String? | Null = nil, @setup_intent : String | SetupIntent? | Null = nil, @shipping : Shipping? | Null = nil, @shipping_address_collection : PaymentPagesCheckoutSessionShippingAddressCollection? | Null = nil, @shipping_rate : String | ShippingRate? | Null = nil, @status : String? | Null = nil, @submit_type : String? | Null = nil, @subscription : String | Subscription? | Null = nil, @tax_id_collection : PaymentPagesCheckoutSessionTaxIdCollection? = nil, @total_details : PaymentPagesCheckoutSessionTotalDetails? | Null = nil, @url : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @cancel_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"cancel_url\", the character length must be smaller than or equal to 5000.")
      end

      if !@client_reference_id.nil? && !@client_reference_id.null? && @client_reference_id.to_s.size > 5000
        invalid_properties.push("invalid value for \"client_reference_id\", the character length must be smaller than or equal to 5000.")
      end

      if !@customer_email.nil? && !@customer_email.null? && @customer_email.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer_email\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@recovered_from.nil? && !@recovered_from.null? && @recovered_from.to_s.size > 5000
        invalid_properties.push("invalid value for \"recovered_from\", the character length must be smaller than or equal to 5000.")
      end

      if @success_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"success_url\", the character length must be smaller than or equal to 5000.")
      end

      if !@url.nil? && !@url.null? && @url.to_s.size > 5000
        invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      billing_address_collection_validator = EnumAttributeValidator.new("String", ["auto", "required"])
      return false unless billing_address_collection_validator.valid?(@billing_address_collection)
      return false if @cancel_url.to_s.size > 5000
      return false if !@client_reference_id.nil? && !@client_reference_id.null? && @client_reference_id.to_s.size > 5000
      customer_creation_validator = EnumAttributeValidator.new("String", ["always", "if_required"])
      return false unless customer_creation_validator.valid?(@customer_creation)
      return false if !@customer_email.nil? && !@customer_email.null? && @customer_email.to_s.size > 5000
      return false if @id.to_s.size > 5000
      locale_validator = EnumAttributeValidator.new("String", ["auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW"])
      return false unless locale_validator.valid?(@locale)
      mode_validator = EnumAttributeValidator.new("String", ["payment", "setup", "subscription"])
      return false unless mode_validator.valid?(@mode)
      object_validator = EnumAttributeValidator.new("String", ["checkout.session"])
      return false unless object_validator.valid?(@object)
      payment_status_validator = EnumAttributeValidator.new("String", ["no_payment_required", "paid", "unpaid"])
      return false unless payment_status_validator.valid?(@payment_status)
      return false if !@recovered_from.nil? && !@recovered_from.null? && @recovered_from.to_s.size > 5000
      status_validator = EnumAttributeValidator.new("String", ["complete", "expired", "open"])
      return false unless status_validator.valid?(@status)
      submit_type_validator = EnumAttributeValidator.new("String", ["auto", "book", "donate", "pay"])
      return false unless submit_type_validator.valid?(@submit_type)
      return false if @success_url.to_s.size > 5000
      return false if !@url.nil? && !@url.null? && @url.to_s.size > 5000
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_address_collection Object to be assigned
    def billing_address_collection=(billing_address_collection)
      validator = EnumAttributeValidator.new("String", ["auto", "required"])
      unless validator.valid?(billing_address_collection)
        raise ArgumentError.new("invalid value for \"billing_address_collection\", must be one of #{validator.allowable_values}.")
      end
      @billing_address_collection = billing_address_collection
    end

    # Custom attribute writer method with validation
    # @param [Object] cancel_url Value to be assigned
    def cancel_url=(cancel_url)
      if cancel_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cancel_url\", the character length must be smaller than or equal to 5000.")
      end

      @cancel_url = cancel_url
    end

    # Custom attribute writer method with validation
    # @param [Object] client_reference_id Value to be assigned
    def client_reference_id=(client_reference_id)
      if !client_reference_id.nil? && !@client_reference_id.null? && client_reference_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_reference_id\", the character length must be smaller than or equal to 5000.")
      end

      @client_reference_id = client_reference_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_creation Object to be assigned
    def customer_creation=(customer_creation)
      validator = EnumAttributeValidator.new("String", ["always", "if_required"])
      unless validator.valid?(customer_creation)
        raise ArgumentError.new("invalid value for \"customer_creation\", must be one of #{validator.allowable_values}.")
      end
      @customer_creation = customer_creation
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_email Value to be assigned
    def customer_email=(customer_email)
      if !customer_email.nil? && !@customer_email.null? && customer_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer_email\", the character length must be smaller than or equal to 5000.")
      end

      @customer_email = customer_email
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locale Object to be assigned
    def locale=(locale)
      validator = EnumAttributeValidator.new("String", ["auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW"])
      unless validator.valid?(locale)
        raise ArgumentError.new("invalid value for \"locale\", must be one of #{validator.allowable_values}.")
      end
      @locale = locale
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(mode)
      validator = EnumAttributeValidator.new("String", ["payment", "setup", "subscription"])
      unless validator.valid?(mode)
        raise ArgumentError.new("invalid value for \"mode\", must be one of #{validator.allowable_values}.")
      end
      @mode = mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["checkout.session"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_status Object to be assigned
    def payment_status=(payment_status)
      validator = EnumAttributeValidator.new("String", ["no_payment_required", "paid", "unpaid"])
      unless validator.valid?(payment_status)
        raise ArgumentError.new("invalid value for \"payment_status\", must be one of #{validator.allowable_values}.")
      end
      @payment_status = payment_status
    end

    # Custom attribute writer method with validation
    # @param [Object] recovered_from Value to be assigned
    def recovered_from=(recovered_from)
      if !recovered_from.nil? && !@recovered_from.null? && recovered_from.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"recovered_from\", the character length must be smaller than or equal to 5000.")
      end

      @recovered_from = recovered_from
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["complete", "expired", "open"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submit_type Object to be assigned
    def submit_type=(submit_type)
      validator = EnumAttributeValidator.new("String", ["auto", "book", "donate", "pay"])
      unless validator.valid?(submit_type)
        raise ArgumentError.new("invalid value for \"submit_type\", must be one of #{validator.allowable_values}.")
      end
      @submit_type = submit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] success_url Value to be assigned
    def success_url=(success_url)
      if success_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"success_url\", the character length must be smaller than or equal to 5000.")
      end

      @success_url = success_url
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if !url.nil? && !@url.null? && url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = url
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        after_expiration == o.after_expiration &&
        allow_promotion_codes == o.allow_promotion_codes &&
        amount_subtotal == o.amount_subtotal &&
        amount_total == o.amount_total &&
        automatic_tax == o.automatic_tax &&
        billing_address_collection == o.billing_address_collection &&
        cancel_url == o.cancel_url &&
        client_reference_id == o.client_reference_id &&
        consent == o.consent &&
        consent_collection == o.consent_collection &&
        currency == o.currency &&
        customer == o.customer &&
        customer_creation == o.customer_creation &&
        customer_details == o.customer_details &&
        customer_email == o.customer_email &&
        expires_at == o.expires_at &&
        id == o.id &&
        line_items == o.line_items &&
        livemode == o.livemode &&
        locale == o.locale &&
        metadata == o.metadata &&
        mode == o.mode &&
        object == o.object &&
        payment_intent == o.payment_intent &&
        payment_link == o.payment_link &&
        payment_method_options == o.payment_method_options &&
        payment_method_types == o.payment_method_types &&
        payment_status == o.payment_status &&
        phone_number_collection == o.phone_number_collection &&
        recovered_from == o.recovered_from &&
        setup_intent == o.setup_intent &&
        shipping == o.shipping &&
        shipping_address_collection == o.shipping_address_collection &&
        shipping_options == o.shipping_options &&
        shipping_rate == o.shipping_rate &&
        status == o.status &&
        submit_type == o.submit_type &&
        subscription == o.subscription &&
        success_url == o.success_url &&
        tax_id_collection == o.tax_id_collection &&
        total_details == o.total_details &&
        url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [after_expiration, allow_promotion_codes, amount_subtotal, amount_total, automatic_tax, billing_address_collection, cancel_url, client_reference_id, consent, consent_collection, currency, customer, customer_creation, customer_details, customer_email, expires_at, id, line_items, livemode, locale, metadata, mode, object, payment_intent, payment_link, payment_method_options, payment_method_types, payment_status, phone_number_collection, recovered_from, setup_intent, shipping, shipping_address_collection, shipping_options, shipping_rate, status, submit_type, subscription, success_url, tax_id_collection, total_details, url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
