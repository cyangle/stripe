#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_link"
require "./payment_link_application"
require "./payment_link_on_behalf_of"
require "./payment_links_resource_after_completion"
require "./payment_links_resource_automatic_tax"
require "./payment_links_resource_consent_collection"
require "./payment_links_resource_custom_fields"
require "./payment_links_resource_custom_text"
require "./payment_links_resource_invoice_creation"
require "./payment_links_resource_list_line_items"
require "./payment_links_resource_payment_intent_data"
require "./payment_links_resource_phone_number_collection"
require "./payment_links_resource_restrictions"
require "./payment_links_resource_shipping_address_collection"
require "./payment_links_resource_shipping_option"
require "./payment_links_resource_subscription_data"
require "./payment_links_resource_tax_id_collection"
require "./payment_links_resource_transfer_data"

module Stripe
  # The ID of the Payment Link that created this Session.
  class CheckoutSessionPaymentLink
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
    @[JSON::Field(key: "active", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property active : Bool? = nil

    @[JSON::Field(key: "after_completion", type: Stripe::PaymentLinksResourceAfterCompletion?, default: nil, required: true, nullable: false, emit_null: false)]
    property after_completion : Stripe::PaymentLinksResourceAfterCompletion? = nil

    # Whether user redeemable promotion codes are enabled.
    @[JSON::Field(key: "allow_promotion_codes", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property allow_promotion_codes : Bool? = nil

    @[JSON::Field(key: "application", type: Stripe::PaymentLinkApplication?, default: nil, required: true, nullable: true, emit_null: true)]
    property application : Stripe::PaymentLinkApplication? = nil

    # The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account.
    @[JSON::Field(key: "application_fee_amount", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    property application_fee_amount : Int64? = nil

    # This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
    @[JSON::Field(key: "application_fee_percent", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    property application_fee_percent : Float64? = nil

    @[JSON::Field(key: "automatic_tax", type: Stripe::PaymentLinksResourceAutomaticTax?, default: nil, required: true, nullable: false, emit_null: false)]
    property automatic_tax : Stripe::PaymentLinksResourceAutomaticTax? = nil

    # Configuration for collecting the customer's billing address. Defaults to `auto`.
    @[JSON::Field(key: "billing_address_collection", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property billing_address_collection : String? = nil
    ERROR_MESSAGE_FOR_BILLING_ADDRESS_COLLECTION = "invalid value for \"billing_address_collection\", must be one of [auto, required]."
    VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION  = String.static_array("auto", "required")

    @[JSON::Field(key: "consent_collection", type: Stripe::PaymentLinksResourceConsentCollection?, default: nil, required: true, nullable: false, emit_null: false)]
    property consent_collection : Stripe::PaymentLinksResourceConsentCollection? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property currency : String? = nil

    # Collect additional information from your customer using custom fields. Up to 3 fields are supported.
    @[JSON::Field(key: "custom_fields", type: Array(Stripe::PaymentLinksResourceCustomFields)?, default: nil, required: true, nullable: false, emit_null: false)]
    property custom_fields : Array(Stripe::PaymentLinksResourceCustomFields)? = nil

    @[JSON::Field(key: "custom_text", type: Stripe::PaymentLinksResourceCustomText?, default: nil, required: true, nullable: false, emit_null: false)]
    property custom_text : Stripe::PaymentLinksResourceCustomText? = nil

    # Configuration for Customer creation during checkout.
    @[JSON::Field(key: "customer_creation", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property customer_creation : String? = nil
    ERROR_MESSAGE_FOR_CUSTOMER_CREATION = "invalid value for \"customer_creation\", must be one of [always, if_required]."
    VALID_VALUES_FOR_CUSTOMER_CREATION  = String.static_array("always", "if_required")

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # The custom message to be displayed to a customer when a payment link is no longer active.
    @[JSON::Field(key: "inactive_message", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property inactive_message : String? = nil
    MAX_LENGTH_FOR_INACTIVE_MESSAGE = 5000

    @[JSON::Field(key: "invoice_creation", type: Stripe::PaymentLinksResourceInvoiceCreation?, default: nil, required: true, nullable: false, emit_null: false)]
    property invoice_creation : Stripe::PaymentLinksResourceInvoiceCreation? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    property metadata : Hash(String, String)? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [payment_link]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("payment_link")

    @[JSON::Field(key: "on_behalf_of", type: Stripe::PaymentLinkOnBehalfOf?, default: nil, required: true, nullable: true, emit_null: true)]
    property on_behalf_of : Stripe::PaymentLinkOnBehalfOf? = nil

    @[JSON::Field(key: "payment_intent_data", type: Stripe::PaymentLinksResourcePaymentIntentData?, default: nil, required: true, nullable: false, emit_null: false)]
    property payment_intent_data : Stripe::PaymentLinksResourcePaymentIntentData? = nil

    # Configuration for collecting a payment method during checkout. Defaults to `always`.
    @[JSON::Field(key: "payment_method_collection", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property payment_method_collection : String? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_COLLECTION = "invalid value for \"payment_method_collection\", must be one of [always, if_required]."
    VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION  = String.static_array("always", "if_required")

    # The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
    @[JSON::Field(key: "payment_method_types", type: Array(String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property payment_method_types : Array(String)? = nil
    ERROR_MESSAGE_FOR_PAYMENT_METHOD_TYPES = "invalid value for \"payment_method_types\", must be one of [affirm, afterpay_clearpay, alipay, au_becs_debit, bacs_debit, bancontact, blik, boleto, card, cashapp, eps, fpx, giropay, grabpay, ideal, klarna, konbini, link, mobilepay, multibanco, oxxo, p24, paynow, paypal, pix, promptpay, sepa_debit, sofort, swish, twint, us_bank_account, wechat_pay, zip]."
    VALID_VALUES_FOR_PAYMENT_METHOD_TYPES  = String.static_array("affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "cashapp", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "mobilepay", "multibanco", "oxxo", "p24", "paynow", "paypal", "pix", "promptpay", "sepa_debit", "sofort", "swish", "twint", "us_bank_account", "wechat_pay", "zip")

    @[JSON::Field(key: "phone_number_collection", type: Stripe::PaymentLinksResourcePhoneNumberCollection?, default: nil, required: true, nullable: false, emit_null: false)]
    property phone_number_collection : Stripe::PaymentLinksResourcePhoneNumberCollection? = nil

    @[JSON::Field(key: "restrictions", type: Stripe::PaymentLinksResourceRestrictions?, default: nil, required: true, nullable: false, emit_null: false)]
    property restrictions : Stripe::PaymentLinksResourceRestrictions? = nil

    @[JSON::Field(key: "shipping_address_collection", type: Stripe::PaymentLinksResourceShippingAddressCollection?, default: nil, required: true, nullable: false, emit_null: false)]
    property shipping_address_collection : Stripe::PaymentLinksResourceShippingAddressCollection? = nil

    # The shipping rate options applied to the session.
    @[JSON::Field(key: "shipping_options", type: Array(Stripe::PaymentLinksResourceShippingOption)?, default: nil, required: true, nullable: false, emit_null: false)]
    property shipping_options : Array(Stripe::PaymentLinksResourceShippingOption)? = nil

    # Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button.
    @[JSON::Field(key: "submit_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property submit_type : String? = nil
    ERROR_MESSAGE_FOR_SUBMIT_TYPE = "invalid value for \"submit_type\", must be one of [auto, book, donate, pay]."
    VALID_VALUES_FOR_SUBMIT_TYPE  = String.static_array("auto", "book", "donate", "pay")

    @[JSON::Field(key: "subscription_data", type: Stripe::PaymentLinksResourceSubscriptionData?, default: nil, required: true, nullable: false, emit_null: false)]
    property subscription_data : Stripe::PaymentLinksResourceSubscriptionData? = nil

    @[JSON::Field(key: "tax_id_collection", type: Stripe::PaymentLinksResourceTaxIdCollection?, default: nil, required: true, nullable: false, emit_null: false)]
    property tax_id_collection : Stripe::PaymentLinksResourceTaxIdCollection? = nil

    @[JSON::Field(key: "transfer_data", type: Stripe::PaymentLinksResourceTransferData?, default: nil, required: true, nullable: false, emit_null: false)]
    property transfer_data : Stripe::PaymentLinksResourceTransferData? = nil

    # The public URL that can be shared with customers.
    @[JSON::Field(key: "url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property url : String? = nil
    MAX_LENGTH_FOR_URL = 5000

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "line_items", type: Stripe::PaymentLinksResourceListLineItems?, default: nil, required: false, nullable: false, emit_null: false)]
    property line_items : Stripe::PaymentLinksResourceListLineItems? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::PaymentLink,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @active : Bool? = nil,
      @after_completion : Stripe::PaymentLinksResourceAfterCompletion? = nil,
      @allow_promotion_codes : Bool? = nil,
      @application : Stripe::PaymentLinkApplication? = nil,
      @application_fee_amount : Int64? = nil,
      @application_fee_percent : Float64? = nil,
      @automatic_tax : Stripe::PaymentLinksResourceAutomaticTax? = nil,
      @billing_address_collection : String? = nil,
      @consent_collection : Stripe::PaymentLinksResourceConsentCollection? = nil,
      @currency : String? = nil,
      @custom_fields : Array(Stripe::PaymentLinksResourceCustomFields)? = nil,
      @custom_text : Stripe::PaymentLinksResourceCustomText? = nil,
      @customer_creation : String? = nil,
      @id : String? = nil,
      @inactive_message : String? = nil,
      @invoice_creation : Stripe::PaymentLinksResourceInvoiceCreation? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @object : String? = nil,
      @on_behalf_of : Stripe::PaymentLinkOnBehalfOf? = nil,
      @payment_intent_data : Stripe::PaymentLinksResourcePaymentIntentData? = nil,
      @payment_method_collection : String? = nil,
      @payment_method_types : Array(String)? = nil,
      @phone_number_collection : Stripe::PaymentLinksResourcePhoneNumberCollection? = nil,
      @restrictions : Stripe::PaymentLinksResourceRestrictions? = nil,
      @shipping_address_collection : Stripe::PaymentLinksResourceShippingAddressCollection? = nil,
      @shipping_options : Array(Stripe::PaymentLinksResourceShippingOption)? = nil,
      @submit_type : String? = nil,
      @subscription_data : Stripe::PaymentLinksResourceSubscriptionData? = nil,
      @tax_id_collection : Stripe::PaymentLinksResourceTaxIdCollection? = nil,
      @transfer_data : Stripe::PaymentLinksResourceTransferData? = nil,
      @url : String? = nil,
      # Optional properties
      @line_items : Stripe::PaymentLinksResourceListLineItems? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@active, @after_completion, @allow_promotion_codes, @application, @application_fee_amount, @application_fee_percent, @automatic_tax, @billing_address_collection, @consent_collection, @currency, @custom_fields, @custom_text, @customer_creation, @id, @inactive_message, @invoice_creation, @livemode, @metadata, @object, @on_behalf_of, @payment_intent_data, @payment_method_collection, @payment_method_types, @phone_number_collection, @restrictions, @shipping_address_collection, @shipping_options, @submit_type, @subscription_data, @tax_id_collection, @transfer_data, @url, @line_items)
  end
end
