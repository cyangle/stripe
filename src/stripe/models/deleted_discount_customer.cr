#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # The ID of the customer associated with this discount.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class DeletedDiscountCustomer
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?)]
    property created : Int64?

    @[JSON::Field(key: "default_source", type: CustomerDefaultSource, presence: true, ignore_serialize: default_source.nil? && !default_source_present?)]
    property default_source : CustomerDefaultSource

    @[JSON::Field(ignore: true)]
    property? default_source_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # The customer's email address.
    @[JSON::Field(key: "email", type: String, presence: true, ignore_serialize: email.nil? && !email_present?)]
    getter email : String

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?)]
    getter id : String?

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?)]
    property livemode : Bool?

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?)]
    getter object : String?

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["customer"])

    @[JSON::Field(key: "shipping", type: CustomerShipping1, presence: true, ignore_serialize: shipping.nil? && !shipping_present?)]
    property shipping : CustomerShipping1

    @[JSON::Field(ignore: true)]
    property? shipping_present : Bool = false

    # Always true for a deleted object
    @[JSON::Field(key: "deleted", type: Bool?)]
    getter deleted : Bool?

    ENUM_VALIDATOR_FOR_DELETED = EnumValidator.new("deleted", "Bool", ["true"])

    # Optional properties
    @[JSON::Field(key: "address", type: CustomerAddress?, presence: true, ignore_serialize: address.nil? && !address_present?)]
    property address : CustomerAddress?

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    # Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
    @[JSON::Field(key: "balance", type: Int64?, presence: true, ignore_serialize: balance.nil? && !balance_present?)]
    property balance : Int64?

    @[JSON::Field(ignore: true)]
    property? balance_present : Bool = false

    @[JSON::Field(key: "cash_balance", type: CustomerCashBalance?, presence: true, ignore_serialize: cash_balance.nil? && !cash_balance_present?)]
    property cash_balance : CustomerCashBalance?

    @[JSON::Field(ignore: true)]
    property? cash_balance_present : Bool = false

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
    @[JSON::Field(key: "currency", type: String?, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String?

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.  If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
    @[JSON::Field(key: "delinquent", type: Bool?, presence: true, ignore_serialize: delinquent.nil? && !delinquent_present?)]
    property delinquent : Bool?

    @[JSON::Field(ignore: true)]
    property? delinquent_present : Bool = false

    @[JSON::Field(key: "discount", type: CustomerDiscount?, presence: true, ignore_serialize: discount.nil? && !discount_present?)]
    property discount : CustomerDiscount?

    @[JSON::Field(ignore: true)]
    property? discount_present : Bool = false

    # The prefix for the customer used to generate unique invoice numbers.
    @[JSON::Field(key: "invoice_prefix", type: String?, presence: true, ignore_serialize: invoice_prefix.nil? && !invoice_prefix_present?)]
    getter invoice_prefix : String?

    @[JSON::Field(ignore: true)]
    property? invoice_prefix_present : Bool = false

    @[JSON::Field(key: "invoice_settings", type: InvoiceSettingCustomerSetting?, presence: true, ignore_serialize: invoice_settings.nil? && !invoice_settings_present?)]
    property invoice_settings : InvoiceSettingCustomerSetting?

    @[JSON::Field(ignore: true)]
    property? invoice_settings_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # The customer's full name or business name.
    @[JSON::Field(key: "name", type: String?, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String?

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # The suffix of the customer's next invoice number, e.g., 0001.
    @[JSON::Field(key: "next_invoice_sequence", type: Int64?, presence: true, ignore_serialize: next_invoice_sequence.nil? && !next_invoice_sequence_present?)]
    property next_invoice_sequence : Int64?

    @[JSON::Field(ignore: true)]
    property? next_invoice_sequence_present : Bool = false

    # The customer's phone number.
    @[JSON::Field(key: "phone", type: String?, presence: true, ignore_serialize: phone.nil? && !phone_present?)]
    getter phone : String?

    @[JSON::Field(ignore: true)]
    property? phone_present : Bool = false

    @[JSON::Field(key: "preferred_locales", type: Array(String)?, presence: true, ignore_serialize: preferred_locales.nil? && !preferred_locales_present?)]
    property preferred_locales : Array(String)?

    @[JSON::Field(ignore: true)]
    property? preferred_locales_present : Bool = false

    @[JSON::Field(key: "sources", type: ApmsSourcesSourceList1?, presence: true, ignore_serialize: sources.nil? && !sources_present?)]
    property sources : ApmsSourcesSourceList1?

    @[JSON::Field(ignore: true)]
    property? sources_present : Bool = false

    @[JSON::Field(key: "subscriptions", type: SubscriptionList?, presence: true, ignore_serialize: subscriptions.nil? && !subscriptions_present?)]
    property subscriptions : SubscriptionList?

    @[JSON::Field(ignore: true)]
    property? subscriptions_present : Bool = false

    @[JSON::Field(key: "tax", type: CustomerTax?, presence: true, ignore_serialize: tax.nil? && !tax_present?)]
    property tax : CustomerTax?

    @[JSON::Field(ignore: true)]
    property? tax_present : Bool = false

    # Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **\"Reverse charge\"**.
    @[JSON::Field(key: "tax_exempt", type: String?, presence: true, ignore_serialize: tax_exempt.nil? && !tax_exempt_present?)]
    getter tax_exempt : String?

    @[JSON::Field(ignore: true)]
    property? tax_exempt_present : Bool = false

    ENUM_VALIDATOR_FOR_TAX_EXEMPT = EnumValidator.new("tax_exempt", "String", ["exempt", "none", "reverse", "null"])

    @[JSON::Field(key: "tax_ids", type: TaxIDsList1?, presence: true, ignore_serialize: tax_ids.nil? && !tax_ids_present?)]
    property tax_ids : TaxIDsList1?

    @[JSON::Field(ignore: true)]
    property? tax_ids_present : Bool = false

    @[JSON::Field(key: "test_clock", type: CustomerTestClock?, presence: true, ignore_serialize: test_clock.nil? && !test_clock_present?)]
    property test_clock : CustomerTestClock?

    @[JSON::Field(ignore: true)]
    property? test_clock_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::Customer,
        Stripe::DeletedCustomer,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @created : Int64, @default_source : CustomerDefaultSource?, @description : String?, @email : String?, @id : String, @livemode : Bool, @object : String, @shipping : CustomerShipping1?, @deleted : Bool, @address : CustomerAddress? = nil, @balance : Int64? = nil, @cash_balance : CustomerCashBalance? = nil, @currency : String? = nil, @delinquent : Bool? = nil, @discount : CustomerDiscount? = nil, @invoice_prefix : String? = nil, @invoice_settings : InvoiceSettingCustomerSetting? = nil, @metadata : Hash(String, String)? = nil, @name : String? = nil, @next_invoice_sequence : Int64? = nil, @phone : String? = nil, @preferred_locales : Array(String)? = nil, @sources : ApmsSourcesSourceList1? = nil, @subscriptions : SubscriptionList? = nil, @tax : CustomerTax? = nil, @tax_exempt : String? = nil, @tax_ids : TaxIDsList1? = nil, @test_clock : CustomerTestClock? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@currency.nil? && @currency.to_s.size > 5000
        invalid_properties.push("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      if @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @email.to_s.size > 5000
        invalid_properties.push("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@invoice_prefix.nil? && @invoice_prefix.to_s.size > 5000
        invalid_properties.push("invalid value for \"invoice_prefix\", the character length must be smaller than or equal to 5000.")
      end

      if !@name.nil? && @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      if !@phone.nil? && @phone.to_s.size > 5000
        invalid_properties.push("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_TAX_EXEMPT.error_message) unless ENUM_VALIDATOR_FOR_TAX_EXEMPT.valid?(@tax_exempt)

      invalid_properties.push(ENUM_VALIDATOR_FOR_DELETED.error_message) unless ENUM_VALIDATOR_FOR_DELETED.valid?(@deleted, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@currency.nil? && @currency.to_s.size > 5000
      return false if @description.to_s.size > 5000
      return false if @email.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false if !@invoice_prefix.nil? && @invoice_prefix.to_s.size > 5000
      return false if !@name.nil? && @name.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if !@phone.nil? && @phone.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_TAX_EXEMPT.valid?(@tax_exempt)
      return false unless ENUM_VALIDATOR_FOR_DELETED.valid?(@deleted, false)
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if !currency.nil? && currency.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_prefix Value to be assigned
    def invoice_prefix=(invoice_prefix)
      if !invoice_prefix.nil? && invoice_prefix.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice_prefix\", the character length must be smaller than or equal to 5000.")
      end

      @invoice_prefix = invoice_prefix
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      @phone = phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_exempt Object to be assigned
    def tax_exempt=(tax_exempt)
      ENUM_VALIDATOR_FOR_TAX_EXEMPT.valid!(tax_exempt)
      @tax_exempt = tax_exempt
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deleted Object to be assigned
    def deleted=(deleted)
      ENUM_VALIDATOR_FOR_DELETED.valid!(deleted, false)
      @deleted = deleted
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        address == o.address &&
        balance == o.balance &&
        cash_balance == o.cash_balance &&
        created == o.created &&
        currency == o.currency &&
        default_source == o.default_source &&
        delinquent == o.delinquent &&
        description == o.description &&
        discount == o.discount &&
        email == o.email &&
        id == o.id &&
        invoice_prefix == o.invoice_prefix &&
        invoice_settings == o.invoice_settings &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        name == o.name &&
        next_invoice_sequence == o.next_invoice_sequence &&
        object == o.object &&
        phone == o.phone &&
        preferred_locales == o.preferred_locales &&
        shipping == o.shipping &&
        sources == o.sources &&
        subscriptions == o.subscriptions &&
        tax == o.tax &&
        tax_exempt == o.tax_exempt &&
        tax_ids == o.tax_ids &&
        test_clock == o.test_clock &&
        deleted == o.deleted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@address, @balance, @cash_balance, @created, @currency, @default_source, @delinquent, @description, @discount, @email, @id, @invoice_prefix, @invoice_settings, @livemode, @metadata, @name, @next_invoice_sequence, @object, @phone, @preferred_locales, @shipping, @sources, @subscriptions, @tax, @tax_exempt, @tax_ids, @test_clock, @deleted)
  end
end
