#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./document_options"

module Stripe
  # Options that apply to the [document check](https://stripe.com/docs/identity/verification-checks?type=document).
  class SessionOptionsParamDocument
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
    @[JSON::Field(key: "allowed_types", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    property allowed_types : Array(String)? = nil
    ERROR_MESSAGE_FOR_ALLOWED_TYPES = "invalid value for \"allowed_types\", must be one of [driving_license, id_card, passport]."
    VALID_VALUES_FOR_ALLOWED_TYPES  = String.static_array("driving_license", "id_card", "passport")

    # Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
    @[JSON::Field(key: "require_id_number", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    property require_id_number : Bool? = nil

    # Disable image uploads, identity document images have to be captured using the device’s camera.
    @[JSON::Field(key: "require_live_capture", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    property require_live_capture : Bool? = nil

    # Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
    @[JSON::Field(key: "require_matching_selfie", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    property require_matching_selfie : Bool? = nil

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::DocumentOptions,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @allowed_types : Array(String)? = nil,
      @require_id_number : Bool? = nil,
      @require_live_capture : Bool? = nil,
      @require_matching_selfie : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@allowed_types, @require_id_number, @require_live_capture, @require_matching_selfie)
  end
end
