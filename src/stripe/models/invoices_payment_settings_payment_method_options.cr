#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Payment-method-specific configuration to provide to the invoiceâ€™s PaymentIntent.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class InvoicesPaymentSettingsPaymentMethodOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "acss_debit", type: InvoicesPaymentMethodOptionsAcssDebit, presence: true, ignore_serialize: acss_debit.nil? && !acss_debit_present?)]
    property acss_debit : InvoicesPaymentMethodOptionsAcssDebit

    @[JSON::Field(ignore: true)]
    property? acss_debit_present : Bool = false

    @[JSON::Field(key: "bancontact", type: InvoicesPaymentMethodOptionsBancontact, presence: true, ignore_serialize: bancontact.nil? && !bancontact_present?)]
    property bancontact : InvoicesPaymentMethodOptionsBancontact

    @[JSON::Field(ignore: true)]
    property? bancontact_present : Bool = false

    @[JSON::Field(key: "card", type: InvoicesPaymentMethodOptionsCard, presence: true, ignore_serialize: card.nil? && !card_present?)]
    property card : InvoicesPaymentMethodOptionsCard

    @[JSON::Field(ignore: true)]
    property? card_present : Bool = false

    @[JSON::Field(key: "customer_balance", type: InvoicesPaymentMethodOptionsCustomerBalance, presence: true, ignore_serialize: customer_balance.nil? && !customer_balance_present?)]
    property customer_balance : InvoicesPaymentMethodOptionsCustomerBalance

    @[JSON::Field(ignore: true)]
    property? customer_balance_present : Bool = false

    @[JSON::Field(key: "konbini", type: InvoicesPaymentMethodOptionsKonbini, presence: true, ignore_serialize: konbini.nil? && !konbini_present?)]
    property konbini : InvoicesPaymentMethodOptionsKonbini

    @[JSON::Field(ignore: true)]
    property? konbini_present : Bool = false

    @[JSON::Field(key: "us_bank_account", type: InvoicesPaymentMethodOptionsUsBankAccount, presence: true, ignore_serialize: us_bank_account.nil? && !us_bank_account_present?)]
    property us_bank_account : InvoicesPaymentMethodOptionsUsBankAccount

    @[JSON::Field(ignore: true)]
    property? us_bank_account_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::InvoicesPaymentMethodOptions,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @acss_debit : InvoicesPaymentMethodOptionsAcssDebit?, @bancontact : InvoicesPaymentMethodOptionsBancontact?, @card : InvoicesPaymentMethodOptionsCard?, @customer_balance : InvoicesPaymentMethodOptionsCustomerBalance?, @konbini : InvoicesPaymentMethodOptionsKonbini?, @us_bank_account : InvoicesPaymentMethodOptionsUsBankAccount?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        acss_debit == o.acss_debit &&
        bancontact == o.bancontact &&
        card == o.card &&
        customer_balance == o.customer_balance &&
        konbini == o.konbini &&
        us_bank_account == o.us_bank_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@acss_debit, @bancontact, @card, @customer_balance, @konbini, @us_bank_account)
  end
end
