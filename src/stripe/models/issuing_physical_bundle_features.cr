#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class IssuingPhysicalBundleFeatures
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The policy for how to use card logo images in a card design with this physical bundle.
    @[JSON::Field(key: "card_logo", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter card_logo : String? = nil
    ERROR_MESSAGE_FOR_CARD_LOGO = "invalid value for \"card_logo\", must be one of [optional, required, unsupported]."
    VALID_VALUES_FOR_CARD_LOGO  = String.static_array("optional", "required", "unsupported")

    # The policy for how to use carrier letter text in a card design with this physical bundle.
    @[JSON::Field(key: "carrier_text", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter carrier_text : String? = nil
    ERROR_MESSAGE_FOR_CARRIER_TEXT = "invalid value for \"carrier_text\", must be one of [optional, required, unsupported]."
    VALID_VALUES_FOR_CARRIER_TEXT  = String.static_array("optional", "required", "unsupported")

    # The policy for how to use a second line on a card with this physical bundle.
    @[JSON::Field(key: "second_line", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter second_line : String? = nil
    ERROR_MESSAGE_FOR_SECOND_LINE = "invalid value for \"second_line\", must be one of [optional, required, unsupported]."
    VALID_VALUES_FOR_SECOND_LINE  = String.static_array("optional", "required", "unsupported")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @card_logo : String? = nil,
      @carrier_text : String? = nil,
      @second_line : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"card_logo\" is required and cannot be null") if @card_logo.nil?

      unless (_card_logo = @card_logo).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARD_LOGO) unless OpenApi::EnumValidator.valid?(_card_logo, VALID_VALUES_FOR_CARD_LOGO)
      end
      invalid_properties.push("\"carrier_text\" is required and cannot be null") if @carrier_text.nil?

      unless (_carrier_text = @carrier_text).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_CARRIER_TEXT) unless OpenApi::EnumValidator.valid?(_carrier_text, VALID_VALUES_FOR_CARRIER_TEXT)
      end
      invalid_properties.push("\"second_line\" is required and cannot be null") if @second_line.nil?

      unless (_second_line = @second_line).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SECOND_LINE) unless OpenApi::EnumValidator.valid?(_second_line, VALID_VALUES_FOR_SECOND_LINE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @card_logo.nil?
      unless (_card_logo = @card_logo).nil?
        return false unless OpenApi::EnumValidator.valid?(_card_logo, VALID_VALUES_FOR_CARD_LOGO)
      end

      return false if @carrier_text.nil?
      unless (_carrier_text = @carrier_text).nil?
        return false unless OpenApi::EnumValidator.valid?(_carrier_text, VALID_VALUES_FOR_CARRIER_TEXT)
      end

      return false if @second_line.nil?
      unless (_second_line = @second_line).nil?
        return false unless OpenApi::EnumValidator.valid?(_second_line, VALID_VALUES_FOR_SECOND_LINE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_logo Object to be assigned
    def card_logo=(new_value : String?)
      raise ArgumentError.new("\"card_logo\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("card_logo", new_value, VALID_VALUES_FOR_CARD_LOGO)
      end

      @card_logo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] carrier_text Object to be assigned
    def carrier_text=(new_value : String?)
      raise ArgumentError.new("\"carrier_text\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("carrier_text", new_value, VALID_VALUES_FOR_CARRIER_TEXT)
      end

      @carrier_text = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] second_line Object to be assigned
    def second_line=(new_value : String?)
      raise ArgumentError.new("\"second_line\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("second_line", new_value, VALID_VALUES_FOR_SECOND_LINE)
      end

      @second_line = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@card_logo, @carrier_text, @second_line)
  end
end
