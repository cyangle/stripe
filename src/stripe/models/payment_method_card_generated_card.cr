#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class PaymentMethodCardGeneratedCard
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # The charge that created this object.
    @[JSON::Field(key: "charge", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: charge.nil? && !charge_present?)]
    getter charge : String? = nil

    @[JSON::Field(ignore: true)]
    property? charge_present : Bool = false

    @[JSON::Field(key: "payment_method_details", type: Stripe::PaymentMethodCardGeneratedCardPaymentMethodDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method_details.nil? && !payment_method_details_present?)]
    getter payment_method_details : Stripe::PaymentMethodCardGeneratedCardPaymentMethodDetails? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_details_present : Bool = false

    @[JSON::Field(key: "setup_attempt", type: Stripe::PaymentMethodCardGeneratedCardSetupAttempt?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: setup_attempt.nil? && !setup_attempt_present?)]
    getter setup_attempt : Stripe::PaymentMethodCardGeneratedCardSetupAttempt? = nil

    @[JSON::Field(ignore: true)]
    property? setup_attempt_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @charge : String? = nil,
      @payment_method_details : Stripe::PaymentMethodCardGeneratedCardPaymentMethodDetails? = nil,
      @setup_attempt : Stripe::PaymentMethodCardGeneratedCardSetupAttempt? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _charge = @charge
        if _charge.to_s.size > 5000
          invalid_properties.push("invalid value for \"charge\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _payment_method_details = @payment_method_details
        if _payment_method_details.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_payment_method_details.list_invalid_properties_for("payment_method_details"))
        end
      end
      if _setup_attempt = @setup_attempt
        if _setup_attempt.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_setup_attempt.list_invalid_properties_for("setup_attempt"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _charge = @charge
        return false if _charge.to_s.size > 5000
      end
      if _payment_method_details = @payment_method_details
        if _payment_method_details.is_a?(OpenApi::Validatable)
          return false unless _payment_method_details.valid?
        end
      end
      if _setup_attempt = @setup_attempt
        if _setup_attempt.is_a?(OpenApi::Validatable)
          return false unless _setup_attempt.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(charge : String?)
      if charge.nil?
        return @charge = nil
      end
      _charge = charge.not_nil!
      if _charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\", the character length must be smaller than or equal to 5000.")
      end

      @charge = _charge
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method_details Object to be assigned
    def payment_method_details=(payment_method_details : Stripe::PaymentMethodCardGeneratedCardPaymentMethodDetails?)
      if payment_method_details.nil?
        return @payment_method_details = nil
      end
      _payment_method_details = payment_method_details.not_nil!
      if _payment_method_details.is_a?(OpenApi::Validatable)
        _payment_method_details.validate
      end
      @payment_method_details = _payment_method_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_attempt Object to be assigned
    def setup_attempt=(setup_attempt : Stripe::PaymentMethodCardGeneratedCardSetupAttempt?)
      if setup_attempt.nil?
        return @setup_attempt = nil
      end
      _setup_attempt = setup_attempt.not_nil!
      if _setup_attempt.is_a?(OpenApi::Validatable)
        _setup_attempt.validate
      end
      @setup_attempt = _setup_attempt
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@charge, @charge_present, @payment_method_details, @payment_method_details_present, @setup_attempt, @setup_attempt_present)
  end
end
