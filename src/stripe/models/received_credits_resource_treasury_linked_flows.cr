#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ReceivedCreditsResourceTreasuryLinkedFlows
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # The CreditReversal created as a result of this ReceivedCredit being reversed.
    @[JSON::Field(key: "credit_reversal", type: String?, presence: true, ignore_serialize: credit_reversal.nil? && !credit_reversal_present?)]
    getter credit_reversal : String?

    @[JSON::Field(ignore: true)]
    property? credit_reversal_present : Bool = false

    # Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
    @[JSON::Field(key: "issuing_authorization", type: String?, presence: true, ignore_serialize: issuing_authorization.nil? && !issuing_authorization_present?)]
    getter issuing_authorization : String?

    @[JSON::Field(ignore: true)]
    property? issuing_authorization_present : Bool = false

    # Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object.
    @[JSON::Field(key: "issuing_transaction", type: String?, presence: true, ignore_serialize: issuing_transaction.nil? && !issuing_transaction_present?)]
    getter issuing_transaction : String?

    @[JSON::Field(ignore: true)]
    property? issuing_transaction_present : Bool = false

    # ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the merchant. Examples of source flows include OutboundPayments, payouts, or CreditReversals.
    @[JSON::Field(key: "source_flow", type: String?, presence: true, ignore_serialize: source_flow.nil? && !source_flow_present?)]
    getter source_flow : String?

    @[JSON::Field(ignore: true)]
    property? source_flow_present : Bool = false

    @[JSON::Field(key: "source_flow_details", type: ReceivedCreditsResourceTreasuryLinkedFlowsSourceFlowDetails?, presence: true, ignore_serialize: source_flow_details.nil? && !source_flow_details_present?)]
    property source_flow_details : ReceivedCreditsResourceTreasuryLinkedFlowsSourceFlowDetails?

    @[JSON::Field(ignore: true)]
    property? source_flow_details_present : Bool = false

    # The type of flow that originated the ReceivedCredit (for example, `outbound_payment`).
    @[JSON::Field(key: "source_flow_type", type: String?, presence: true, ignore_serialize: source_flow_type.nil? && !source_flow_type_present?)]
    getter source_flow_type : String?

    @[JSON::Field(ignore: true)]
    property? source_flow_type_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @credit_reversal : String? = nil,
      @issuing_authorization : String? = nil,
      @issuing_transaction : String? = nil,
      @source_flow : String? = nil,
      @source_flow_details : ReceivedCreditsResourceTreasuryLinkedFlowsSourceFlowDetails? = nil,
      @source_flow_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@credit_reversal.nil? && @credit_reversal.to_s.size > 5000
        invalid_properties.push("invalid value for \"credit_reversal\", the character length must be smaller than or equal to 5000.")
      end

      if !@issuing_authorization.nil? && @issuing_authorization.to_s.size > 5000
        invalid_properties.push("invalid value for \"issuing_authorization\", the character length must be smaller than or equal to 5000.")
      end

      if !@issuing_transaction.nil? && @issuing_transaction.to_s.size > 5000
        invalid_properties.push("invalid value for \"issuing_transaction\", the character length must be smaller than or equal to 5000.")
      end

      if !@source_flow.nil? && @source_flow.to_s.size > 5000
        invalid_properties.push("invalid value for \"source_flow\", the character length must be smaller than or equal to 5000.")
      end

      if !@source_flow_type.nil? && @source_flow_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"source_flow_type\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@credit_reversal.nil? && @credit_reversal.to_s.size > 5000
      return false if !@issuing_authorization.nil? && @issuing_authorization.to_s.size > 5000
      return false if !@issuing_transaction.nil? && @issuing_transaction.to_s.size > 5000
      return false if !@source_flow.nil? && @source_flow.to_s.size > 5000
      return false if !@source_flow_type.nil? && @source_flow_type.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] credit_reversal Value to be assigned
    def credit_reversal=(credit_reversal)
      if !credit_reversal.nil? && credit_reversal.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"credit_reversal\", the character length must be smaller than or equal to 5000.")
      end

      @credit_reversal = credit_reversal
    end

    # Custom attribute writer method with validation
    # @param [Object] issuing_authorization Value to be assigned
    def issuing_authorization=(issuing_authorization)
      if !issuing_authorization.nil? && issuing_authorization.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"issuing_authorization\", the character length must be smaller than or equal to 5000.")
      end

      @issuing_authorization = issuing_authorization
    end

    # Custom attribute writer method with validation
    # @param [Object] issuing_transaction Value to be assigned
    def issuing_transaction=(issuing_transaction)
      if !issuing_transaction.nil? && issuing_transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"issuing_transaction\", the character length must be smaller than or equal to 5000.")
      end

      @issuing_transaction = issuing_transaction
    end

    # Custom attribute writer method with validation
    # @param [Object] source_flow Value to be assigned
    def source_flow=(source_flow)
      if !source_flow.nil? && source_flow.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_flow\", the character length must be smaller than or equal to 5000.")
      end

      @source_flow = source_flow
    end

    # Custom attribute writer method with validation
    # @param [Object] source_flow_type Value to be assigned
    def source_flow_type=(source_flow_type)
      if !source_flow_type.nil? && source_flow_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_flow_type\", the character length must be smaller than or equal to 5000.")
      end

      @source_flow_type = source_flow_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@credit_reversal, @issuing_authorization, @issuing_transaction, @source_flow, @source_flow_details, @source_flow_type)
  end
end
