#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Installment configuration for payments attempted on this PaymentIntent (Mexico Only).  For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
  @[JSON::Serializable::Options(emit_nulls: true)]
  class InstallmentsParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Setting to true enables installments for this PaymentIntent. This will cause the response to contain a list of available installment plans. Setting to false will prevent any selected plan from applying to a charge.
    @[JSON::Field(key: "enabled", type: Bool?, presence: true, ignore_serialize: enabled.nil? && !enabled_present?)]
    property enabled : Bool?

    @[JSON::Field(ignore: true)]
    property? enabled_present : Bool = false

    @[JSON::Field(key: "plan", type: InstallmentsParamPlan?, presence: true, ignore_serialize: plan.nil? && !plan_present?)]
    property plan : InstallmentsParamPlan?

    @[JSON::Field(ignore: true)]
    property? plan_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @enabled : Bool? = nil, @plan : InstallmentsParamPlan? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        enabled == o.enabled &&
        plan == o.plan
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@enabled, @plan)
  end
end
