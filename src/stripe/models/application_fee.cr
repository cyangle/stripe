#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./application_fee_account"
require "./application_fee_application"
require "./application_fee_balance_transaction"
require "./application_fee_charge"
require "./application_fee_originating_transaction"
require "./fee_refund_list"
require "./platform_earning_fee_source"

module Stripe
  #
  class ApplicationFee
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "account", type: Stripe::ApplicationFeeAccount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account : Stripe::ApplicationFeeAccount? = nil

    # Amount earned, in cents (or local equivalent).
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)
    @[JSON::Field(key: "amount_refunded", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_refunded : Int64? = nil

    @[JSON::Field(key: "application", type: Stripe::ApplicationFeeApplication?, default: nil, required: true, nullable: false, emit_null: false)]
    getter application : Stripe::ApplicationFeeApplication? = nil

    @[JSON::Field(key: "balance_transaction", type: Stripe::ApplicationFeeBalanceTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    getter balance_transaction : Stripe::ApplicationFeeBalanceTransaction? = nil

    @[JSON::Field(key: "charge", type: Stripe::ApplicationFeeCharge?, default: nil, required: true, nullable: false, emit_null: false)]
    getter charge : Stripe::ApplicationFeeCharge? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    @[JSON::Field(key: "fee_source", type: Stripe::PlatformEarningFeeSource?, default: nil, required: true, nullable: true, emit_null: true)]
    getter fee_source : Stripe::PlatformEarningFeeSource? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [application_fee]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("application_fee")

    @[JSON::Field(key: "originating_transaction", type: Stripe::ApplicationFeeOriginatingTransaction?, default: nil, required: true, nullable: true, emit_null: true)]
    getter originating_transaction : Stripe::ApplicationFeeOriginatingTransaction? = nil

    # Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
    @[JSON::Field(key: "refunded", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter refunded : Bool? = nil

    @[JSON::Field(key: "refunds", type: Stripe::FeeRefundList?, default: nil, required: true, nullable: false, emit_null: false)]
    getter refunds : Stripe::FeeRefundList? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account : Stripe::ApplicationFeeAccount? = nil,
      @amount : Int64? = nil,
      @amount_refunded : Int64? = nil,
      @application : Stripe::ApplicationFeeApplication? = nil,
      @balance_transaction : Stripe::ApplicationFeeBalanceTransaction? = nil,
      @charge : Stripe::ApplicationFeeCharge? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @fee_source : Stripe::PlatformEarningFeeSource? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @originating_transaction : Stripe::ApplicationFeeOriginatingTransaction? = nil,
      @refunded : Bool? = nil,
      @refunds : Stripe::FeeRefundList? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account\" is required and cannot be null") if @account.nil?

      unless (_account = @account).nil?
        invalid_properties.concat(_account.list_invalid_properties_for("account")) if _account.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"amount_refunded\" is required and cannot be null") if @amount_refunded.nil?

      invalid_properties.push("\"application\" is required and cannot be null") if @application.nil?

      unless (_application = @application).nil?
        invalid_properties.concat(_application.list_invalid_properties_for("application")) if _application.is_a?(OpenApi::Validatable)
      end
      unless (_balance_transaction = @balance_transaction).nil?
        invalid_properties.concat(_balance_transaction.list_invalid_properties_for("balance_transaction")) if _balance_transaction.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"charge\" is required and cannot be null") if @charge.nil?

      unless (_charge = @charge).nil?
        invalid_properties.concat(_charge.list_invalid_properties_for("charge")) if _charge.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_fee_source = @fee_source).nil?
        invalid_properties.concat(_fee_source.list_invalid_properties_for("fee_source")) if _fee_source.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_originating_transaction = @originating_transaction).nil?
        invalid_properties.concat(_originating_transaction.list_invalid_properties_for("originating_transaction")) if _originating_transaction.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"refunded\" is required and cannot be null") if @refunded.nil?

      invalid_properties.push("\"refunds\" is required and cannot be null") if @refunds.nil?

      unless (_refunds = @refunds).nil?
        invalid_properties.concat(_refunds.list_invalid_properties_for("refunds")) if _refunds.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account.nil?
      unless (_account = @account).nil?
        return false if _account.is_a?(OpenApi::Validatable) && !_account.valid?
      end

      return false if @amount.nil?

      return false if @amount_refunded.nil?

      return false if @application.nil?
      unless (_application = @application).nil?
        return false if _application.is_a?(OpenApi::Validatable) && !_application.valid?
      end

      unless (_balance_transaction = @balance_transaction).nil?
        return false if _balance_transaction.is_a?(OpenApi::Validatable) && !_balance_transaction.valid?
      end

      return false if @charge.nil?
      unless (_charge = @charge).nil?
        return false if _charge.is_a?(OpenApi::Validatable) && !_charge.valid?
      end

      return false if @created.nil?

      return false if @currency.nil?

      unless (_fee_source = @fee_source).nil?
        return false if _fee_source.is_a?(OpenApi::Validatable) && !_fee_source.valid?
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_originating_transaction = @originating_transaction).nil?
        return false if _originating_transaction.is_a?(OpenApi::Validatable) && !_originating_transaction.valid?
      end

      return false if @refunded.nil?

      return false if @refunds.nil?
      unless (_refunds = @refunds).nil?
        return false if _refunds.is_a?(OpenApi::Validatable) && !_refunds.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account Object to be assigned
    def account=(new_value : Stripe::ApplicationFeeAccount?)
      raise ArgumentError.new("\"account\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Int64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_refunded Object to be assigned
    def amount_refunded=(new_value : Int64?)
      raise ArgumentError.new("\"amount_refunded\" is required and cannot be null") if new_value.nil?

      @amount_refunded = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application Object to be assigned
    def application=(new_value : Stripe::ApplicationFeeApplication?)
      raise ArgumentError.new("\"application\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @application = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_transaction Object to be assigned
    def balance_transaction=(new_value : Stripe::ApplicationFeeBalanceTransaction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @balance_transaction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge Object to be assigned
    def charge=(new_value : Stripe::ApplicationFeeCharge?)
      raise ArgumentError.new("\"charge\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @charge = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fee_source Object to be assigned
    def fee_source=(new_value : Stripe::PlatformEarningFeeSource?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @fee_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] originating_transaction Object to be assigned
    def originating_transaction=(new_value : Stripe::ApplicationFeeOriginatingTransaction?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @originating_transaction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refunded Object to be assigned
    def refunded=(new_value : Bool?)
      raise ArgumentError.new("\"refunded\" is required and cannot be null") if new_value.nil?

      @refunded = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refunds Object to be assigned
    def refunds=(new_value : Stripe::FeeRefundList?)
      raise ArgumentError.new("\"refunds\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @refunds = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @amount, @amount_refunded, @application, @balance_transaction, @charge, @created, @currency, @fee_source, @id, @livemode, @object, @originating_transaction, @refunded, @refunds)
  end
end
