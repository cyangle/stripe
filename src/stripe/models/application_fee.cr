#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # 
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ApplicationFee
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    @[JSON::Field(key: "account", type: ApplicationFeeAccount)]
    property account : ApplicationFeeAccount

    # Amount earned, in %s.
    @[JSON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued)
    @[JSON::Field(key: "amount_refunded", type: Int64)]
    property amount_refunded : Int64

    @[JSON::Field(key: "application", type: ApplicationFeeApplication)]
    property application : ApplicationFeeApplication

    @[JSON::Field(key: "charge", type: ApplicationFeeCharge)]
    property charge : ApplicationFeeCharge

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["application_fee"])

    # Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
    @[JSON::Field(key: "refunded", type: Bool)]
    property refunded : Bool

    @[JSON::Field(key: "refunds", type: FeeRefundList1)]
    property refunds : FeeRefundList1

    # Optional properties

    @[JSON::Field(key: "balance_transaction", type: ApplicationFeeBalanceTransaction?, presence: true, ignore_serialize: balance_transaction.nil? && !balance_transaction_present?)]
    property balance_transaction : ApplicationFeeBalanceTransaction?

    @[JSON::Field(ignore: true)]
    property? balance_transaction_present : Bool = false

    @[JSON::Field(key: "originating_transaction", type: ApplicationFeeOriginatingTransaction?, presence: true, ignore_serialize: originating_transaction.nil? && !originating_transaction_present?)]
    property originating_transaction : ApplicationFeeOriginatingTransaction?

    @[JSON::Field(ignore: true)]
    property? originating_transaction_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Required properties
      @account : ApplicationFeeAccount, 
      @amount : Int64, 
      @amount_refunded : Int64, 
      @application : ApplicationFeeApplication, 
      @charge : ApplicationFeeCharge, 
      @created : Int64, 
      @currency : String, 
      @id : String, 
      @livemode : Bool, 
      @object : String, 
      @refunded : Bool, 
      @refunds : FeeRefundList1, 
      # Optional properties
      @balance_transaction : ApplicationFeeBalanceTransaction? = nil, 
      @originating_transaction : ApplicationFeeOriginatingTransaction? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @amount, @amount_refunded, @application, @charge, @created, @currency, @id, @livemode, @object, @refunded, @refunds, @balance_transaction, @originating_transaction)
  end
end
