#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class PaymentMethodIdeal
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
    @[JSON::Field(key: "bank", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter bank : String? = nil
    ERROR_MESSAGE_FOR_BANK = "invalid value for \"bank\", must be one of [abn_amro, asn_bank, bunq, handelsbanken, ing, knab, moneyou, n26, nn, rabobank, regiobank, revolut, sns_bank, triodos_bank, van_lanschot, yoursafe]."
    VALID_VALUES_FOR_BANK  = String.static_array("abn_amro", "asn_bank", "bunq", "handelsbanken", "ing", "knab", "moneyou", "n26", "nn", "rabobank", "regiobank", "revolut", "sns_bank", "triodos_bank", "van_lanschot", "yoursafe")

    # The Bank Identifier Code of the customer's bank, if the bank was provided.
    @[JSON::Field(key: "bic", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter bic : String? = nil
    ERROR_MESSAGE_FOR_BIC = "invalid value for \"bic\", must be one of [ABNANL2A, ASNBNL21, BITSNL2A, BUNQNL2A, FVLBNL22, HANDNL2A, INGBNL2A, KNABNL2H, MOYONL21, NNBANL2G, NTSBDEB1, RABONL2U, RBRBNL21, REVOIE23, REVOLT21, SNSBNL2A, TRIONL2U]."
    VALID_VALUES_FOR_BIC  = String.static_array("ABNANL2A", "ASNBNL21", "BITSNL2A", "BUNQNL2A", "FVLBNL22", "HANDNL2A", "INGBNL2A", "KNABNL2H", "MOYONL21", "NNBANL2G", "NTSBDEB1", "RABONL2U", "RBRBNL21", "REVOIE23", "REVOLT21", "SNSBNL2A", "TRIONL2U")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @bank : String? = nil,
      @bic : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_bank = @bank).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BANK) unless OpenApi::EnumValidator.valid?(_bank, VALID_VALUES_FOR_BANK)
      end
      unless (_bic = @bic).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_BIC) unless OpenApi::EnumValidator.valid?(_bic, VALID_VALUES_FOR_BIC)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_bank = @bank).nil?
        return false unless OpenApi::EnumValidator.valid?(_bank, VALID_VALUES_FOR_BANK)
      end

      unless (_bic = @bic).nil?
        return false unless OpenApi::EnumValidator.valid?(_bic, VALID_VALUES_FOR_BIC)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank Object to be assigned
    def bank=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("bank", new_value, VALID_VALUES_FOR_BANK)
      end

      @bank = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bic Object to be assigned
    def bic=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("bic", new_value, VALID_VALUES_FOR_BIC)
      end

      @bic = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bank, @bic)
  end
end
