#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # A `Payout` object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a [connected Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts, as well as list all payouts. Payouts are made on [varying schedules](/docs/connect/manage-payout-schedule), depending on your country and industry.  Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
  class Payout
    include NASON::Serializable

    # Required properties
    # Amount (in %s) to be transferred to your bank account or debit card.
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
    @[NASON::Field(key: "arrival_date", type: Int64)]
    property arrival_date : Int64

    # Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
    @[NASON::Field(key: "automatic", type: Bool)]
    property automatic : Bool

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
    @[NASON::Field(key: "method", type: String)]
    property method : String

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # The source balance this payout came from. One of `card`, `fpx`, or `bank_account`.
    @[NASON::Field(key: "source_type", type: String)]
    property source_type : String

    # Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # Can be `bank_account` or `card`.
    @[NASON::Field(key: "type", type: String)]
    property _type : String

    # Optional properties
    # ID of the balance transaction that describes the impact of this payout on your account balance.
    @[NASON::Field(key: "balance_transaction", type: String | BalanceTransaction? | Null, nillable: true)]
    property balance_transaction : String | BalanceTransaction? | Null

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[NASON::Field(key: "description", type: String? | Null, nillable: true)]
    property description : String? | Null

    # ID of the bank account or card the payout was sent to.
    @[NASON::Field(key: "destination", type: String | BankAccount | Card? | Null, nillable: true)]
    property destination : String | BankAccount | Card? | Null

    # If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.
    @[NASON::Field(key: "failure_balance_transaction", type: String | BalanceTransaction? | Null, nillable: true)]
    property failure_balance_transaction : String | BalanceTransaction? | Null

    # Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.
    @[NASON::Field(key: "failure_code", type: String? | Null, nillable: true)]
    property failure_code : String? | Null

    # Message to user further explaining reason for payout failure if available.
    @[NASON::Field(key: "failure_message", type: String? | Null, nillable: true)]
    property failure_message : String? | Null

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)? | Null, nillable: true)]
    property metadata : Hash(String, String)? | Null

    # If the payout reverses another, this is the ID of the original payout.
    @[NASON::Field(key: "original_payout", type: String | Payout? | Null, nillable: true)]
    property original_payout : String | Payout? | Null

    # If the payout was reversed, this is the ID of the payout that reverses this payout.
    @[NASON::Field(key: "reversed_by", type: String | Payout? | Null, nillable: true)]
    property reversed_by : String | Payout? | Null

    # Extra information about a payout to be displayed on the user's bank statement.
    @[NASON::Field(key: "statement_descriptor", type: String? | Null, nillable: true)]
    property statement_descriptor : String? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @arrival_date : Int64, @automatic : Bool, @created : Int64, @currency : String, @id : String, @livemode : Bool, @method : String, @object : String, @source_type : String, @status : String, @_type : String, @balance_transaction : String | BalanceTransaction? | Null = nil, @description : String? | Null = nil, @destination : String | BankAccount | Card? | Null = nil, @failure_balance_transaction : String | BalanceTransaction? | Null = nil, @failure_code : String? | Null = nil, @failure_message : String? | Null = nil, @metadata : Hash(String, String)? | Null = nil, @original_payout : String | Payout? | Null = nil, @reversed_by : String | Payout? | Null = nil, @statement_descriptor : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@description.nil? && !@description.null? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@failure_code.nil? && !@failure_code.null? && @failure_code.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      if !@failure_message.nil? && !@failure_message.null? && @failure_message.to_s.size > 5000
        invalid_properties.push("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if @method.to_s.size > 5000
        invalid_properties.push("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
      end

      if @source_type.to_s.size > 5000
        invalid_properties.push("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.nil? && !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if @status.to_s.size > 5000
        invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@description.nil? && !@description.null? && @description.to_s.size > 5000
      return false if !@failure_code.nil? && !@failure_code.null? && @failure_code.to_s.size > 5000
      return false if !@failure_message.nil? && !@failure_message.null? && @failure_message.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false if @method.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["payout"])
      return false unless object_validator.valid?(@object)
      return false if @source_type.to_s.size > 5000
      return false if !@statement_descriptor.nil? && !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
      return false if @status.to_s.size > 5000
      _type_validator = EnumAttributeValidator.new("String", ["bank_account", "card"])
      return false unless _type_validator.valid?(@_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && !@description.null? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_code Value to be assigned
    def failure_code=(failure_code)
      if !failure_code.nil? && !@failure_code.null? && failure_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      @failure_code = failure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_message Value to be assigned
    def failure_message=(failure_message)
      if !failure_message.nil? && !@failure_message.null? && failure_message.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      @failure_message = failure_message
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] method Value to be assigned
    def method=(method)
      if method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
      end

      @method = method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["payout"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] source_type Value to be assigned
    def source_type=(source_type)
      if source_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      @source_type = source_type
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor)
      if !statement_descriptor.nil? && !@statement_descriptor.null? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      validator = EnumAttributeValidator.new("String", ["bank_account", "card"])
      unless validator.valid?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{validator.allowable_values}.")
      end
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        arrival_date == o.arrival_date &&
        automatic == o.automatic &&
        balance_transaction == o.balance_transaction &&
        created == o.created &&
        currency == o.currency &&
        description == o.description &&
        destination == o.destination &&
        failure_balance_transaction == o.failure_balance_transaction &&
        failure_code == o.failure_code &&
        failure_message == o.failure_message &&
        id == o.id &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        method == o.method &&
        object == o.object &&
        original_payout == o.original_payout &&
        reversed_by == o.reversed_by &&
        source_type == o.source_type &&
        statement_descriptor == o.statement_descriptor &&
        status == o.status &&
        _type == o._type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, arrival_date, automatic, balance_transaction, created, currency, description, destination, failure_balance_transaction, failure_code, failure_message, id, livemode, metadata, method, object, original_payout, reversed_by, source_type, statement_descriptor, status, _type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
