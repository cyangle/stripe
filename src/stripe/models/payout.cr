#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A `Payout` object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a [connected Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts, as well as list all payouts. Payouts are made on [varying schedules](/docs/connect/manage-payout-schedule), depending on your country and industry.  Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
  class Payout
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Amount (in %s) to be transferred to your bank account or debit card.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
    @[JSON::Field(key: "arrival_date", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter arrival_date : Int64? = nil

    # Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
    @[JSON::Field(key: "automatic", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automatic : Bool? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
    @[JSON::Field(key: "method", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter method : String? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["payout"])

    # The source balance this payout came from. One of `card`, `fpx`, or `bank_account`.
    @[JSON::Field(key: "source_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter source_type : String? = nil

    # Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    # Can be `bank_account` or `card`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    ENUM_VALIDATOR_FOR__TYPE = EnumValidator.new("_type", "String", ["bank_account", "card"])

    # Optional properties

    @[JSON::Field(key: "balance_transaction", type: Stripe::PayoutBalanceTransaction?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: balance_transaction.nil? && !balance_transaction_present?)]
    getter balance_transaction : Stripe::PayoutBalanceTransaction? = nil

    @[JSON::Field(ignore: true)]
    property? balance_transaction_present : Bool = false

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "destination", type: Stripe::PayoutDestination?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: destination.nil? && !destination_present?)]
    getter destination : Stripe::PayoutDestination? = nil

    @[JSON::Field(ignore: true)]
    property? destination_present : Bool = false

    @[JSON::Field(key: "failure_balance_transaction", type: Stripe::PayoutFailureBalanceTransaction?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_balance_transaction.nil? && !failure_balance_transaction_present?)]
    getter failure_balance_transaction : Stripe::PayoutFailureBalanceTransaction? = nil

    @[JSON::Field(ignore: true)]
    property? failure_balance_transaction_present : Bool = false

    # Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.
    @[JSON::Field(key: "failure_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_code.nil? && !failure_code_present?)]
    getter failure_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? failure_code_present : Bool = false

    # Message to user further explaining reason for payout failure if available.
    @[JSON::Field(key: "failure_message", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_message.nil? && !failure_message_present?)]
    getter failure_message : String? = nil

    @[JSON::Field(ignore: true)]
    property? failure_message_present : Bool = false

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    @[JSON::Field(key: "original_payout", type: Stripe::PayoutOriginalPayout?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: original_payout.nil? && !original_payout_present?)]
    getter original_payout : Stripe::PayoutOriginalPayout? = nil

    @[JSON::Field(ignore: true)]
    property? original_payout_present : Bool = false

    @[JSON::Field(key: "reversed_by", type: Stripe::PayoutReversedBy?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: reversed_by.nil? && !reversed_by_present?)]
    getter reversed_by : Stripe::PayoutReversedBy? = nil

    @[JSON::Field(ignore: true)]
    property? reversed_by_present : Bool = false

    # Extra information about a payout to be displayed on the user's bank statement.
    @[JSON::Field(key: "statement_descriptor", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statement_descriptor.nil? && !statement_descriptor_present?)]
    getter statement_descriptor : String? = nil

    @[JSON::Field(ignore: true)]
    property? statement_descriptor_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Int64? = nil,
      @arrival_date : Int64? = nil,
      @automatic : Bool? = nil,
      @created : Int64? = nil,
      @currency : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @method : String? = nil,
      @object : String? = nil,
      @source_type : String? = nil,
      @status : String? = nil,
      @_type : String? = nil,
      # Optional properties
      @balance_transaction : Stripe::PayoutBalanceTransaction? = nil,
      @description : String? = nil,
      @destination : Stripe::PayoutDestination? = nil,
      @failure_balance_transaction : Stripe::PayoutFailureBalanceTransaction? = nil,
      @failure_code : String? = nil,
      @failure_message : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @original_payout : Stripe::PayoutOriginalPayout? = nil,
      @reversed_by : Stripe::PayoutReversedBy? = nil,
      @statement_descriptor : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      invalid_properties.push("\"arrival_date\" is required and cannot be null") if @arrival_date.nil?

      invalid_properties.push("\"automatic\" is required and cannot be null") if @automatic.nil?

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?
      if _id = @id
        if _id.to_s.size > 5000
          invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"method\" is required and cannot be null") if @method.nil?
      if _method = @method
        if _method.to_s.size > 5000
          invalid_properties.push("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      invalid_properties.push("\"source_type\" is required and cannot be null") if @source_type.nil?
      if _source_type = @source_type
        if _source_type.to_s.size > 5000
          invalid_properties.push("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?
      if _status = @status
        if _status.to_s.size > 5000
          invalid_properties.push("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR__TYPE.error_message) unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _balance_transaction = @balance_transaction
        if _balance_transaction.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_balance_transaction.list_invalid_properties_for("balance_transaction"))
        end
      end
      if _description = @description
        if _description.to_s.size > 5000
          invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _destination = @destination
        if _destination.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_destination.list_invalid_properties_for("destination"))
        end
      end
      if _failure_balance_transaction = @failure_balance_transaction
        if _failure_balance_transaction.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_failure_balance_transaction.list_invalid_properties_for("failure_balance_transaction"))
        end
      end
      if _failure_code = @failure_code
        if _failure_code.to_s.size > 5000
          invalid_properties.push("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _failure_message = @failure_message
        if _failure_message.to_s.size > 5000
          invalid_properties.push("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
        end
      end

      if _original_payout = @original_payout
        if _original_payout.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_original_payout.list_invalid_properties_for("original_payout"))
        end
      end
      if _reversed_by = @reversed_by
        if _reversed_by.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_reversed_by.list_invalid_properties_for("reversed_by"))
        end
      end
      if _statement_descriptor = @statement_descriptor
        if _statement_descriptor.to_s.size > 5000
          invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?

      return false if @arrival_date.nil?

      return false if @automatic.nil?

      return false if @created.nil?

      return false if @currency.nil?

      return false if @id.nil?
      if _id = @id
        return false if _id.to_s.size > 5000
      end
      return false if @livemode.nil?

      return false if @method.nil?
      if _method = @method
        return false if _method.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)
      return false if @source_type.nil?
      if _source_type = @source_type
        return false if _source_type.to_s.size > 5000
      end
      return false if @status.nil?
      if _status = @status
        return false if _status.to_s.size > 5000
      end
      return false unless ENUM_VALIDATOR_FOR__TYPE.valid?(@_type, false)
      if _balance_transaction = @balance_transaction
        if _balance_transaction.is_a?(OpenApi::Validatable)
          return false unless _balance_transaction.valid?
        end
      end
      if _description = @description
        return false if _description.to_s.size > 5000
      end
      if _destination = @destination
        if _destination.is_a?(OpenApi::Validatable)
          return false unless _destination.valid?
        end
      end
      if _failure_balance_transaction = @failure_balance_transaction
        if _failure_balance_transaction.is_a?(OpenApi::Validatable)
          return false unless _failure_balance_transaction.valid?
        end
      end
      if _failure_code = @failure_code
        return false if _failure_code.to_s.size > 5000
      end
      if _failure_message = @failure_message
        return false if _failure_message.to_s.size > 5000
      end

      if _original_payout = @original_payout
        if _original_payout.is_a?(OpenApi::Validatable)
          return false unless _original_payout.valid?
        end
      end
      if _reversed_by = @reversed_by
        if _reversed_by.is_a?(OpenApi::Validatable)
          return false unless _reversed_by.valid?
        end
      end
      if _statement_descriptor = @statement_descriptor
        return false if _statement_descriptor.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        raise ArgumentError.new("\"amount\" is required and cannot be null")
      end
      _amount = amount.not_nil!
      @amount = _amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] arrival_date Object to be assigned
    def arrival_date=(arrival_date : Int64?)
      if arrival_date.nil?
        raise ArgumentError.new("\"arrival_date\" is required and cannot be null")
      end
      _arrival_date = arrival_date.not_nil!
      @arrival_date = _arrival_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic Object to be assigned
    def automatic=(automatic : Bool?)
      if automatic.nil?
        raise ArgumentError.new("\"automatic\" is required and cannot be null")
      end
      _automatic = automatic.not_nil!
      @automatic = _automatic
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(created : Int64?)
      if created.nil?
        raise ArgumentError.new("\"created\" is required and cannot be null")
      end
      _created = created.not_nil!
      @created = _created
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      if _id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(livemode : Bool?)
      if livemode.nil?
        raise ArgumentError.new("\"livemode\" is required and cannot be null")
      end
      _livemode = livemode.not_nil!
      @livemode = _livemode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] method Object to be assigned
    def method=(method : String?)
      if method.nil?
        raise ArgumentError.new("\"method\" is required and cannot be null")
      end
      _method = method.not_nil!
      if _method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"method\", the character length must be smaller than or equal to 5000.")
      end

      @method = _method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      ENUM_VALIDATOR_FOR_OBJECT.valid!(_object)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_type Object to be assigned
    def source_type=(source_type : String?)
      if source_type.nil?
        raise ArgumentError.new("\"source_type\" is required and cannot be null")
      end
      _source_type = source_type.not_nil!
      if _source_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_type\", the character length must be smaller than or equal to 5000.")
      end

      @source_type = _source_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        raise ArgumentError.new("\"status\" is required and cannot be null")
      end
      _status = status.not_nil!
      if _status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\", the character length must be smaller than or equal to 5000.")
      end

      @status = _status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type : String?)
      if _type.nil?
        raise ArgumentError.new("\"_type\" is required and cannot be null")
      end
      __type = _type.not_nil!
      ENUM_VALIDATOR_FOR__TYPE.valid!(__type)
      @_type = __type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_transaction Object to be assigned
    def balance_transaction=(balance_transaction : Stripe::PayoutBalanceTransaction?)
      if balance_transaction.nil?
        return @balance_transaction = nil
      end
      _balance_transaction = balance_transaction.not_nil!
      if _balance_transaction.is_a?(OpenApi::Validatable)
        _balance_transaction.validate
      end
      @balance_transaction = _balance_transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        return @description = nil
      end
      _description = description.not_nil!
      if _description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination Object to be assigned
    def destination=(destination : Stripe::PayoutDestination?)
      if destination.nil?
        return @destination = nil
      end
      _destination = destination.not_nil!
      if _destination.is_a?(OpenApi::Validatable)
        _destination.validate
      end
      @destination = _destination
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_balance_transaction Object to be assigned
    def failure_balance_transaction=(failure_balance_transaction : Stripe::PayoutFailureBalanceTransaction?)
      if failure_balance_transaction.nil?
        return @failure_balance_transaction = nil
      end
      _failure_balance_transaction = failure_balance_transaction.not_nil!
      if _failure_balance_transaction.is_a?(OpenApi::Validatable)
        _failure_balance_transaction.validate
      end
      @failure_balance_transaction = _failure_balance_transaction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_code Object to be assigned
    def failure_code=(failure_code : String?)
      if failure_code.nil?
        return @failure_code = nil
      end
      _failure_code = failure_code.not_nil!
      if _failure_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_code\", the character length must be smaller than or equal to 5000.")
      end

      @failure_code = _failure_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_message Object to be assigned
    def failure_message=(failure_message : String?)
      if failure_message.nil?
        return @failure_message = nil
      end
      _failure_message = failure_message.not_nil!
      if _failure_message.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"failure_message\", the character length must be smaller than or equal to 5000.")
      end

      @failure_message = _failure_message
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Hash(String, String)?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_payout Object to be assigned
    def original_payout=(original_payout : Stripe::PayoutOriginalPayout?)
      if original_payout.nil?
        return @original_payout = nil
      end
      _original_payout = original_payout.not_nil!
      if _original_payout.is_a?(OpenApi::Validatable)
        _original_payout.validate
      end
      @original_payout = _original_payout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reversed_by Object to be assigned
    def reversed_by=(reversed_by : Stripe::PayoutReversedBy?)
      if reversed_by.nil?
        return @reversed_by = nil
      end
      _reversed_by = reversed_by.not_nil!
      if _reversed_by.is_a?(OpenApi::Validatable)
        _reversed_by.validate
      end
      @reversed_by = _reversed_by
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_descriptor Object to be assigned
    def statement_descriptor=(statement_descriptor : String?)
      if statement_descriptor.nil?
        return @statement_descriptor = nil
      end
      _statement_descriptor = statement_descriptor.not_nil!
      if _statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = _statement_descriptor
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @arrival_date, @automatic, @created, @currency, @id, @livemode, @method, @object, @source_type, @status, @_type, @balance_transaction, @balance_transaction_present, @description, @description_present, @destination, @destination_present, @failure_balance_transaction, @failure_balance_transaction_present, @failure_code, @failure_code_present, @failure_message, @failure_message_present, @metadata, @metadata_present, @original_payout, @original_payout_present, @reversed_by, @reversed_by_present, @statement_descriptor, @statement_descriptor_present)
  end
end
