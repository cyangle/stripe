#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  class BillingCycleAnchorConfigParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The day of the month the billing_cycle_anchor should be. Ranges from 1 to 31.
    @[JSON::Field(key: "day_of_month", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter day_of_month : Int64? = nil

    # End of Required Properties

    # Optional Properties

    # The hour of the day the billing_cycle_anchor should be. Ranges from 0 to 23.
    @[JSON::Field(key: "hour", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter hour : Int64? = nil

    # The minute of the hour the billing_cycle_anchor should be. Ranges from 0 to 59.
    @[JSON::Field(key: "minute", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter minute : Int64? = nil

    # The month to start full cycle billing periods. Ranges from 1 to 12.
    @[JSON::Field(key: "month", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter month : Int64? = nil

    # The second of the minute the billing_cycle_anchor should be. Ranges from 0 to 59.
    @[JSON::Field(key: "second", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter second : Int64? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @day_of_month : Int64? = nil,
      # Optional properties
      @hour : Int64? = nil,
      @minute : Int64? = nil,
      @month : Int64? = nil,
      @second : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"day_of_month\" is required and cannot be null") if @day_of_month.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @day_of_month.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] day_of_month Object to be assigned
    def day_of_month=(new_value : Int64?)
      raise ArgumentError.new("\"day_of_month\" is required and cannot be null") if new_value.nil?

      @day_of_month = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hour Object to be assigned
    def hour=(new_value : Int64?)
      @hour = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minute Object to be assigned
    def minute=(new_value : Int64?)
      @minute = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] month Object to be assigned
    def month=(new_value : Int64?)
      @month = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] second Object to be assigned
    def second=(new_value : Int64?)
      @second = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@day_of_month, @hour, @minute, @month, @second)
  end
end
