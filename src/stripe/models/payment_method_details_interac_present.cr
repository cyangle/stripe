#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PaymentMethodDetailsInteracPresent
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Card brand. Can be `interac`, `mastercard` or `visa`.
    @[JSON::Field(key: "brand", type: String?, presence: true, ignore_serialize: brand.nil? && !brand_present?)]
    getter brand : String?

    @[JSON::Field(ignore: true)]
    property? brand_present : Bool = false

    # The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
    @[JSON::Field(key: "cardholder_name", type: String?, presence: true, ignore_serialize: cardholder_name.nil? && !cardholder_name_present?)]
    getter cardholder_name : String?

    @[JSON::Field(ignore: true)]
    property? cardholder_name_present : Bool = false

    # Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    @[JSON::Field(key: "country", type: String?, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String?

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # Authorization response cryptogram.
    @[JSON::Field(key: "emv_auth_data", type: String?, presence: true, ignore_serialize: emv_auth_data.nil? && !emv_auth_data_present?)]
    getter emv_auth_data : String?

    @[JSON::Field(ignore: true)]
    property? emv_auth_data_present : Bool = false

    # Two-digit number representing the card's expiration month.
    @[JSON::Field(key: "exp_month", type: Int64)]
    property exp_month : Int64

    # Four-digit number representing the card's expiration year.
    @[JSON::Field(key: "exp_year", type: Int64)]
    property exp_year : Int64

    # Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    @[JSON::Field(key: "fingerprint", type: String?, presence: true, ignore_serialize: fingerprint.nil? && !fingerprint_present?)]
    getter fingerprint : String?

    @[JSON::Field(ignore: true)]
    property? fingerprint_present : Bool = false

    # Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    @[JSON::Field(key: "funding", type: String?, presence: true, ignore_serialize: funding.nil? && !funding_present?)]
    getter funding : String?

    @[JSON::Field(ignore: true)]
    property? funding_present : Bool = false

    # ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
    @[JSON::Field(key: "generated_card", type: String?, presence: true, ignore_serialize: generated_card.nil? && !generated_card_present?)]
    getter generated_card : String?

    @[JSON::Field(ignore: true)]
    property? generated_card_present : Bool = false

    # The last four digits of the card.
    @[JSON::Field(key: "last4", type: String?, presence: true, ignore_serialize: last4.nil? && !last4_present?)]
    getter last4 : String?

    @[JSON::Field(ignore: true)]
    property? last4_present : Bool = false

    # Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    @[JSON::Field(key: "network", type: String?, presence: true, ignore_serialize: network.nil? && !network_present?)]
    getter network : String?

    @[JSON::Field(ignore: true)]
    property? network_present : Bool = false

    @[JSON::Field(key: "preferred_locales", type: Array(String))]
    property preferred_locales : Array(String)

    # How card details were read in this transaction.
    @[JSON::Field(key: "read_method", type: String?, presence: true, ignore_serialize: read_method.nil? && !read_method_present?)]
    getter read_method : String?

    @[JSON::Field(ignore: true)]
    property? read_method_present : Bool = false

    ENUM_VALIDATOR_FOR_READ_METHOD = EnumValidator.new("read_method", "String", ["contact_emv", "contactless_emv", "contactless_magstripe_mode", "magnetic_stripe_fallback", "magnetic_stripe_track2", "null"])

    @[JSON::Field(key: "receipt", type: PaymentMethodDetailsInteracPresentReceipt1?, presence: true, ignore_serialize: receipt.nil? && !receipt_present?)]
    property receipt : PaymentMethodDetailsInteracPresentReceipt1?

    @[JSON::Field(ignore: true)]
    property? receipt_present : Bool = false

    # Optional properties
    # A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "iin", type: String?, presence: true, ignore_serialize: iin.nil? && !iin_present?)]
    getter iin : String?

    @[JSON::Field(ignore: true)]
    property? iin_present : Bool = false

    # The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
    @[JSON::Field(key: "issuer", type: String?, presence: true, ignore_serialize: issuer.nil? && !issuer_present?)]
    getter issuer : String?

    @[JSON::Field(ignore: true)]
    property? issuer_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @brand : String?, @cardholder_name : String?, @country : String?, @emv_auth_data : String?, @exp_month : Int64, @exp_year : Int64, @fingerprint : String?, @funding : String?, @generated_card : String?, @last4 : String?, @network : String?, @preferred_locales : Array(String), @read_method : String?, @receipt : PaymentMethodDetailsInteracPresentReceipt1?, @description : String? = nil, @iin : String? = nil, @issuer : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @brand.to_s.size > 5000
        invalid_properties.push("invalid value for \"brand\", the character length must be smaller than or equal to 5000.")
      end

      if @cardholder_name.to_s.size > 5000
        invalid_properties.push("invalid value for \"cardholder_name\", the character length must be smaller than or equal to 5000.")
      end

      if @country.to_s.size > 5000
        invalid_properties.push("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @emv_auth_data.to_s.size > 5000
        invalid_properties.push("invalid value for \"emv_auth_data\", the character length must be smaller than or equal to 5000.")
      end

      if @fingerprint.to_s.size > 5000
        invalid_properties.push("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      if @funding.to_s.size > 5000
        invalid_properties.push("invalid value for \"funding\", the character length must be smaller than or equal to 5000.")
      end

      if @generated_card.to_s.size > 5000
        invalid_properties.push("invalid value for \"generated_card\", the character length must be smaller than or equal to 5000.")
      end

      if !@iin.nil? && @iin.to_s.size > 5000
        invalid_properties.push("invalid value for \"iin\", the character length must be smaller than or equal to 5000.")
      end

      if !@issuer.nil? && @issuer.to_s.size > 5000
        invalid_properties.push("invalid value for \"issuer\", the character length must be smaller than or equal to 5000.")
      end

      if @last4.to_s.size > 5000
        invalid_properties.push("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      if @network.to_s.size > 5000
        invalid_properties.push("invalid value for \"network\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_READ_METHOD.error_message) unless ENUM_VALIDATOR_FOR_READ_METHOD.valid?(@read_method)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @brand.to_s.size > 5000
      return false if @cardholder_name.to_s.size > 5000
      return false if @country.to_s.size > 5000
      return false if !@description.nil? && @description.to_s.size > 5000
      return false if @emv_auth_data.to_s.size > 5000
      return false if @fingerprint.to_s.size > 5000
      return false if @funding.to_s.size > 5000
      return false if @generated_card.to_s.size > 5000
      return false if !@iin.nil? && @iin.to_s.size > 5000
      return false if !@issuer.nil? && @issuer.to_s.size > 5000
      return false if @last4.to_s.size > 5000
      return false if @network.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_READ_METHOD.valid?(@read_method)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] brand Value to be assigned
    def brand=(brand)
      if brand.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"brand\", the character length must be smaller than or equal to 5000.")
      end

      @brand = brand
    end

    # Custom attribute writer method with validation
    # @param [Object] cardholder_name Value to be assigned
    def cardholder_name=(cardholder_name)
      if cardholder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder_name\", the character length must be smaller than or equal to 5000.")
      end

      @cardholder_name = cardholder_name
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\", the character length must be smaller than or equal to 5000.")
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] emv_auth_data Value to be assigned
    def emv_auth_data=(emv_auth_data)
      if emv_auth_data.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"emv_auth_data\", the character length must be smaller than or equal to 5000.")
      end

      @emv_auth_data = emv_auth_data
    end

    # Custom attribute writer method with validation
    # @param [Object] fingerprint Value to be assigned
    def fingerprint=(fingerprint)
      if fingerprint.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"fingerprint\", the character length must be smaller than or equal to 5000.")
      end

      @fingerprint = fingerprint
    end

    # Custom attribute writer method with validation
    # @param [Object] funding Value to be assigned
    def funding=(funding)
      if funding.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"funding\", the character length must be smaller than or equal to 5000.")
      end

      @funding = funding
    end

    # Custom attribute writer method with validation
    # @param [Object] generated_card Value to be assigned
    def generated_card=(generated_card)
      if generated_card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"generated_card\", the character length must be smaller than or equal to 5000.")
      end

      @generated_card = generated_card
    end

    # Custom attribute writer method with validation
    # @param [Object] iin Value to be assigned
    def iin=(iin)
      if !iin.nil? && iin.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"iin\", the character length must be smaller than or equal to 5000.")
      end

      @iin = iin
    end

    # Custom attribute writer method with validation
    # @param [Object] issuer Value to be assigned
    def issuer=(issuer)
      if !issuer.nil? && issuer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"issuer\", the character length must be smaller than or equal to 5000.")
      end

      @issuer = issuer
    end

    # Custom attribute writer method with validation
    # @param [Object] last4 Value to be assigned
    def last4=(last4)
      if last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last4\", the character length must be smaller than or equal to 5000.")
      end

      @last4 = last4
    end

    # Custom attribute writer method with validation
    # @param [Object] network Value to be assigned
    def network=(network)
      if network.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"network\", the character length must be smaller than or equal to 5000.")
      end

      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] read_method Object to be assigned
    def read_method=(read_method)
      ENUM_VALIDATOR_FOR_READ_METHOD.valid!(read_method)
      @read_method = read_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        brand == o.brand &&
        cardholder_name == o.cardholder_name &&
        country == o.country &&
        description == o.description &&
        emv_auth_data == o.emv_auth_data &&
        exp_month == o.exp_month &&
        exp_year == o.exp_year &&
        fingerprint == o.fingerprint &&
        funding == o.funding &&
        generated_card == o.generated_card &&
        iin == o.iin &&
        issuer == o.issuer &&
        last4 == o.last4 &&
        network == o.network &&
        preferred_locales == o.preferred_locales &&
        read_method == o.read_method &&
        receipt == o.receipt
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@brand, @cardholder_name, @country, @description, @emv_auth_data, @exp_month, @exp_year, @fingerprint, @funding, @generated_card, @iin, @issuer, @last4, @network, @preferred_locales, @read_method, @receipt)
  end
end
