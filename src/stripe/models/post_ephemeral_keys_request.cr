#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class PostEphemeralKeysRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped


    # Optional properties

    # The ID of the Customer you'd like to modify using the resulting ephemeral key.
    @[JSON::Field(key: "customer", type: String?, presence: true, ignore_serialize: customer.nil? && !customer_present?)]
    getter customer : String?

    @[JSON::Field(ignore: true)]
    property? customer_present : Bool = false

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, presence: true, ignore_serialize: expand.nil? && !expand_present?)]
    property expand : Array(String)?

    @[JSON::Field(ignore: true)]
    property? expand_present : Bool = false

    # The ID of the Issuing Card you'd like to access using the resulting ephemeral key.
    @[JSON::Field(key: "issuing_card", type: String?, presence: true, ignore_serialize: issuing_card.nil? && !issuing_card_present?)]
    getter issuing_card : String?

    @[JSON::Field(ignore: true)]
    property? issuing_card_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *, 
      # Optional properties
      @customer : String? = nil, 
      @expand : Array(String)? = nil, 
      @issuing_card : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@customer.nil? && @customer.to_s.size > 5000
        invalid_properties.push("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      if !@issuing_card.nil? && @issuing_card.to_s.size > 5000
        invalid_properties.push("invalid value for \"issuing_card\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer.nil? && @customer.to_s.size > 5000
      return false if !@issuing_card.nil? && @issuing_card.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer Value to be assigned
    def customer=(customer)
      if !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\", the character length must be smaller than or equal to 5000.")
      end

      @customer = customer
    end

    # Custom attribute writer method with validation
    # @param [Object] issuing_card Value to be assigned
    def issuing_card=(issuing_card)
      if !issuing_card.nil? && issuing_card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"issuing_card\", the character length must be smaller than or equal to 5000.")
      end

      @issuing_card = issuing_card
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@customer, @expand, @issuing_card)
  end
end
