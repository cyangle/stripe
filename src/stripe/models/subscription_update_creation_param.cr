#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # Information about updating subscriptions in the portal.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SubscriptionUpdateCreationParam
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "default_allowed_updates", type: SubscriptionUpdateCreationParamDefaultAllowedUpdates)]
    property default_allowed_updates : SubscriptionUpdateCreationParamDefaultAllowedUpdates

    # Whether the feature is enabled.
    @[JSON::Field(key: "enabled", type: Bool)]
    property enabled : Bool

    @[JSON::Field(key: "products", type: SubscriptionUpdateCreationParamProducts)]
    property products : SubscriptionUpdateCreationParamProducts

    # Optional properties
    # Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`.
    @[JSON::Field(key: "proration_behavior", type: String?, presence: true, ignore_serialize: proration_behavior.nil? && !proration_behavior_present?)]
    getter proration_behavior : String?

    @[JSON::Field(ignore: true)]
    property? proration_behavior_present : Bool = false

    ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR = EnumValidator.new("proration_behavior", "String", ["always_invoice", "create_prorations", "none"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @default_allowed_updates : SubscriptionUpdateCreationParamDefaultAllowedUpdates, @enabled : Bool, @products : SubscriptionUpdateCreationParamProducts, @proration_behavior : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.error_message) unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid?(@proration_behavior)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proration_behavior Object to be assigned
    def proration_behavior=(proration_behavior)
      ENUM_VALIDATOR_FOR_PRORATION_BEHAVIOR.valid!(proration_behavior)
      @proration_behavior = proration_behavior
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        default_allowed_updates == o.default_allowed_updates &&
        enabled == o.enabled &&
        products == o.products &&
        proration_behavior == o.proration_behavior
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@default_allowed_updates, @enabled, @products, @proration_behavior)
  end
end
