#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./subscription_item"

module Stripe
  # Pending Updates store the changes pending from a previous update that will be applied to the Subscription upon successful payment.
  class SubscriptionsResourcePendingUpdate
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
    @[JSON::Field(key: "billing_cycle_anchor", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter billing_cycle_anchor : Int64? = nil

    # The point after which the changes reflected by this update will be discarded and no longer applied.
    @[JSON::Field(key: "expires_at", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expires_at : Int64? = nil

    # List of subscription items, each with an attached plan, that will be set if the update is applied.
    @[JSON::Field(key: "subscription_items", type: Array(Stripe::SubscriptionItem)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subscription_items : Array(Stripe::SubscriptionItem)? = nil

    # Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
    @[JSON::Field(key: "trial_end", type: Int64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter trial_end : Int64? = nil

    # Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    @[JSON::Field(key: "trial_from_plan", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter trial_from_plan : Bool? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @billing_cycle_anchor : Int64? = nil,
      @expires_at : Int64? = nil,
      @subscription_items : Array(Stripe::SubscriptionItem)? = nil,
      @trial_end : Int64? = nil,
      @trial_from_plan : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"expires_at\" is required and cannot be null") if @expires_at.nil?

      unless (_subscription_items = @subscription_items).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "subscription_items", container: _subscription_items)) if _subscription_items.is_a?(Array)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @expires_at.nil?

      unless (_subscription_items = @subscription_items).nil?
        return false if _subscription_items.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _subscription_items)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_cycle_anchor Object to be assigned
    def billing_cycle_anchor=(new_value : Int64?)
      @billing_cycle_anchor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expires_at Object to be assigned
    def expires_at=(new_value : Int64?)
      raise ArgumentError.new("\"expires_at\" is required and cannot be null") if new_value.nil?

      @expires_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_items Object to be assigned
    def subscription_items=(new_value : Array(Stripe::SubscriptionItem)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @subscription_items = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_end Object to be assigned
    def trial_end=(new_value : Int64?)
      @trial_end = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trial_from_plan Object to be assigned
    def trial_from_plan=(new_value : Bool?)
      @trial_from_plan = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@billing_cycle_anchor, @expires_at, @subscription_items, @trial_end, @trial_from_plan)
  end
end
