#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostSourcesSourceRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # Amount associated with the source.
    @[JSON::Field(key: "amount", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount : Int64? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    @[JSON::Field(key: "mandate", type: Stripe::MandateParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter mandate : Stripe::MandateParams? = nil

    @[JSON::Field(key: "metadata", type: Stripe::PostAccountRequestMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::PostAccountRequestMetadata? = nil

    @[JSON::Field(key: "owner", type: Stripe::Owner1?, default: nil, required: false, nullable: false, emit_null: false)]
    getter owner : Stripe::Owner1? = nil

    @[JSON::Field(key: "source_order", type: Stripe::OrderParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter source_order : Stripe::OrderParams? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount : Int64? = nil,
      @expand : Array(String)? = nil,
      @mandate : Stripe::MandateParams? = nil,
      @metadata : Stripe::PostAccountRequestMetadata? = nil,
      @owner : Stripe::Owner1? = nil,
      @source_order : Stripe::OrderParams? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      # This is a model mandate : Stripe::MandateParams?
      # This is a model metadata : Stripe::PostAccountRequestMetadata?
      # This is a model owner : Stripe::Owner1?
      # This is a model source_order : Stripe::OrderParams?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(amount : Int64?)
      if amount.nil?
        return @amount = nil
      end
      @amount = amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      @expand = expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mandate Object to be assigned
    def mandate=(mandate : Stripe::MandateParams?)
      if mandate.nil?
        return @mandate = nil
      end
      @mandate = mandate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Stripe::PostAccountRequestMetadata?)
      if metadata.nil?
        return @metadata = nil
      end
      @metadata = metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(owner : Stripe::Owner1?)
      if owner.nil?
        return @owner = nil
      end
      @owner = owner
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_order Object to be assigned
    def source_order=(source_order : Stripe::OrderParams?)
      if source_order.nil?
        return @source_order = nil
      end
      @source_order = source_order
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @expand, @mandate, @metadata, @owner, @source_order)
  end
end
