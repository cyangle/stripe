#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class MandateBacsDebit
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
    @[JSON::Field(key: "network_status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network_status : String? = nil

    VALID_VALUES_FOR_NETWORK_STATUS = StaticArray["accepted", "pending", "refused", "revoked"]

    # The unique reference identifying the mandate on the Bacs network.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reference : String? = nil

    # The URL that will contain the mandate that the customer has signed.
    @[JSON::Field(key: "url", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter url : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @network_status : String? = nil,
      @reference : String? = nil,
      @url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"network_status\" is required and cannot be null") if @network_status.nil?

      if _network_status = @network_status
        invalid_properties.push(OpenApi::EnumValidator.error_message("network_status", VALID_VALUES_FOR_NETWORK_STATUS)) unless OpenApi::EnumValidator.valid?(_network_status, VALID_VALUES_FOR_NETWORK_STATUS)
      end
      invalid_properties.push("\"reference\" is required and cannot be null") if @reference.nil?

      if _reference = @reference
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reference", _reference.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"url\" is required and cannot be null") if @url.nil?

      if _url = @url
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("url", _url.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @network_status.nil?
      if _network_status = @network_status
        return false unless OpenApi::EnumValidator.valid?(_network_status, VALID_VALUES_FOR_NETWORK_STATUS)
      end

      return false if @reference.nil?
      if _reference = @reference
        return false if _reference.to_s.size > 5000
      end

      return false if @url.nil?
      if _url = @url
        return false if _url.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_status Object to be assigned
    def network_status=(network_status : String?)
      if network_status.nil?
        raise ArgumentError.new("\"network_status\" is required and cannot be null")
      end
      _network_status = network_status.not_nil!
      OpenApi::EnumValidator.validate("network_status", _network_status, VALID_VALUES_FOR_NETWORK_STATUS)
      @network_status = _network_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(reference : String?)
      if reference.nil?
        raise ArgumentError.new("\"reference\" is required and cannot be null")
      end
      _reference = reference.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("reference", _reference.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @reference = _reference
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(url : String?)
      if url.nil?
        raise ArgumentError.new("\"url\" is required and cannot be null")
      end
      _url = url.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("url", _url.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @url = _url
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@network_status, @reference, @url)
  end
end
