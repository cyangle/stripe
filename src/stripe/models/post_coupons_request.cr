#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class PostCouponsRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    # A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).
    @[JSON::Field(key: "amount_off", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount_off : Int64? = nil

    @[JSON::Field(key: "applies_to", type: Stripe::AppliesToParams?, default: nil, required: false, nullable: false, emit_null: false)]
    getter applies_to : Stripe::AppliesToParams? = nil

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # Coupons defined in each available currency option (only supported if `amount_off` is passed). Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency_options", type: Hash(String, Stripe::PostCouponsRequestCurrencyOptionsValue)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter currency_options : Hash(String, Stripe::PostCouponsRequestCurrencyOptionsValue)? = nil

    # Specifies how long the discount will be in effect if used on a subscription. Can be `forever`, `once`, or `repeating`. Defaults to `once`.
    @[JSON::Field(key: "duration", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter duration : String? = nil

    VALID_VALUES_FOR_DURATION = StaticArray["forever", "once", "repeating"]

    # Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.
    @[JSON::Field(key: "duration_in_months", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter duration_in_months : Int64? = nil

    # Specifies which fields in the response should be expanded.
    @[JSON::Field(key: "expand", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter expand : Array(String)? = nil

    # Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.
    @[JSON::Field(key: "max_redemptions", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter max_redemptions : Int64? = nil

    @[JSON::Field(key: "metadata", type: Stripe::PostAccountRequestMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Stripe::PostAccountRequestMetadata? = nil

    # Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter name : String? = nil

    # A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).
    @[JSON::Field(key: "percent_off", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter percent_off : Float64? = nil

    # Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.
    @[JSON::Field(key: "redeem_by", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redeem_by : Int64? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount_off : Int64? = nil,
      @applies_to : Stripe::AppliesToParams? = nil,
      @currency : String? = nil,
      @currency_options : Hash(String, Stripe::PostCouponsRequestCurrencyOptionsValue)? = nil,
      @duration : String? = nil,
      @duration_in_months : Int64? = nil,
      @expand : Array(String)? = nil,
      @id : String? = nil,
      @max_redemptions : Int64? = nil,
      @metadata : Stripe::PostAccountRequestMetadata? = nil,
      @name : String? = nil,
      @percent_off : Float64? = nil,
      @redeem_by : Int64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _applies_to = @applies_to
        invalid_properties.concat(_applies_to.list_invalid_properties_for("applies_to")) if _applies_to.is_a?(OpenApi::Validatable)
      end

      if _currency_options = @currency_options
        invalid_properties.concat(OpenApi::HashValidator.list_invalid_properties_for(key: "currency_options", hash: _currency_options)) if _currency_options.is_a?(Hash)
      end
      if _duration = @duration
        invalid_properties.push(OpenApi::EnumValidator.error_message("duration", VALID_VALUES_FOR_DURATION)) unless OpenApi::EnumValidator.valid?(_duration, VALID_VALUES_FOR_DURATION)
      end

      if _id = @id
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end

      if _metadata = @metadata
        invalid_properties.concat(_metadata.list_invalid_properties_for("metadata")) if _metadata.is_a?(OpenApi::Validatable)
      end
      if _name = @name
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, 40)
          invalid_properties.push(max_length_error)
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _applies_to = @applies_to
        return false if _applies_to.is_a?(OpenApi::Validatable) && !_applies_to.valid?
      end

      if _currency_options = @currency_options
        return false if _currency_options.is_a?(Hash) && !OpenApi::HashValidator.valid?(hash: _currency_options)
      end

      if _duration = @duration
        return false unless OpenApi::EnumValidator.valid?(_duration, VALID_VALUES_FOR_DURATION)
      end

      if _id = @id
        return false if _id.to_s.size > 5000
      end

      if _metadata = @metadata
        return false if _metadata.is_a?(OpenApi::Validatable) && !_metadata.valid?
      end

      if _name = @name
        return false if _name.to_s.size > 40
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_off Object to be assigned
    def amount_off=(amount_off : Int64?)
      if amount_off.nil?
        return @amount_off = nil
      end
      _amount_off = amount_off.not_nil!
      @amount_off = _amount_off
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] applies_to Object to be assigned
    def applies_to=(applies_to : Stripe::AppliesToParams?)
      if applies_to.nil?
        return @applies_to = nil
      end
      _applies_to = applies_to.not_nil!
      _applies_to.validate if _applies_to.is_a?(OpenApi::Validatable)
      @applies_to = _applies_to
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        return @currency = nil
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency_options Object to be assigned
    def currency_options=(currency_options : Hash(String, Stripe::PostCouponsRequestCurrencyOptionsValue)?)
      if currency_options.nil?
        return @currency_options = nil
      end
      _currency_options = currency_options.not_nil!
      OpenApi::HashValidator.validate(hash: _currency_options) if _currency_options.is_a?(Hash)
      @currency_options = _currency_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duration Object to be assigned
    def duration=(duration : String?)
      if duration.nil?
        return @duration = nil
      end
      _duration = duration.not_nil!
      OpenApi::EnumValidator.validate("duration", _duration, VALID_VALUES_FOR_DURATION)
      @duration = _duration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] duration_in_months Object to be assigned
    def duration_in_months=(duration_in_months : Int64?)
      if duration_in_months.nil?
        return @duration_in_months = nil
      end
      _duration_in_months = duration_in_months.not_nil!
      @duration_in_months = _duration_in_months
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expand Object to be assigned
    def expand=(expand : Array(String)?)
      if expand.nil?
        return @expand = nil
      end
      _expand = expand.not_nil!
      @expand = _expand
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        return @id = nil
      end
      _id = id.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] max_redemptions Object to be assigned
    def max_redemptions=(max_redemptions : Int64?)
      if max_redemptions.nil?
        return @max_redemptions = nil
      end
      _max_redemptions = max_redemptions.not_nil!
      @max_redemptions = _max_redemptions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(metadata : Stripe::PostAccountRequestMetadata?)
      if metadata.nil?
        return @metadata = nil
      end
      _metadata = metadata.not_nil!
      _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
      @metadata = _metadata
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        return @name = nil
      end
      _name = name.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, 40)
        raise ArgumentError.new(max_length_error)
      end

      @name = _name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] percent_off Object to be assigned
    def percent_off=(percent_off : Float64?)
      if percent_off.nil?
        return @percent_off = nil
      end
      _percent_off = percent_off.not_nil!
      @percent_off = _percent_off
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redeem_by Object to be assigned
    def redeem_by=(redeem_by : Int64?)
      if redeem_by.nil?
        return @redeem_by = nil
      end
      _redeem_by = redeem_by.not_nil!
      @redeem_by = _redeem_by
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_off, @applies_to, @currency, @currency_options, @duration, @duration_in_months, @expand, @id, @max_redemptions, @metadata, @name, @percent_off, @redeem_by)
  end
end
