#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class PaymentLinksResourceCustomFieldsDropdownOption
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The label for the option, displayed to the customer. Up to 100 characters.
    @[JSON::Field(key: "label", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter label : String? = nil
    MAX_LENGTH_FOR_LABEL = 5000

    # The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
    @[JSON::Field(key: "value", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter value : String? = nil
    MAX_LENGTH_FOR_VALUE = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @label : String? = nil,
      @value : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"label\" is required and cannot be null") if @label.nil?

      unless (_label = @label).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("label", _label.to_s.size, MAX_LENGTH_FOR_LABEL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"value\" is required and cannot be null") if @value.nil?

      unless (_value = @value).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("value", _value.to_s.size, MAX_LENGTH_FOR_VALUE)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @label.nil?
      unless (_label = @label).nil?
        return false if _label.to_s.size > MAX_LENGTH_FOR_LABEL
      end

      return false if @value.nil?
      unless (_value = @value).nil?
        return false if _value.to_s.size > MAX_LENGTH_FOR_VALUE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] label Object to be assigned
    def label=(new_value : String?)
      raise ArgumentError.new("\"label\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("label", new_value.to_s.size, MAX_LENGTH_FOR_LABEL)
      end

      @label = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value Object to be assigned
    def value=(new_value : String?)
      raise ArgumentError.new("\"value\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("value", new_value.to_s.size, MAX_LENGTH_FOR_VALUE)
      end

      @value = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@label, @value)
  end
end
