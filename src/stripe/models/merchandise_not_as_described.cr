#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  class MerchandiseNotAsDescribed
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "additional_documentation", type: Stripe::BusinessProfileSpecsSupportUrl?, default: nil, required: false, nullable: false, emit_null: false)]
    getter additional_documentation : Stripe::BusinessProfileSpecsSupportUrl? = nil

    @[JSON::Field(key: "explanation", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter explanation : String? = nil

    @[JSON::Field(key: "received_at", type: Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?, default: nil, required: false, nullable: false, emit_null: false)]
    getter received_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil

    @[JSON::Field(key: "return_description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter return_description : String? = nil

    @[JSON::Field(key: "return_status", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter return_status : String? = nil

    ENUM_VALIDATOR_FOR_RETURN_STATUS = EnumValidator.new("return_status", "String", ["", "merchant_rejected", "successful"])

    @[JSON::Field(key: "returned_at", type: Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?, default: nil, required: false, nullable: false, emit_null: false)]
    getter returned_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @additional_documentation : Stripe::BusinessProfileSpecsSupportUrl? = nil,
      @explanation : String? = nil,
      @received_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      @return_description : String? = nil,
      @return_status : String? = nil,
      @returned_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      if _additional_documentation = @additional_documentation
        if _additional_documentation.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_additional_documentation.list_invalid_properties_for("additional_documentation"))
        end
      end
      if _explanation = @explanation
        if _explanation.to_s.size > 1500
          invalid_properties.push("invalid value for \"explanation\", the character length must be smaller than or equal to 1500.")
        end
      end
      if _received_at = @received_at
        if _received_at.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_received_at.list_invalid_properties_for("received_at"))
        end
      end
      if _return_description = @return_description
        if _return_description.to_s.size > 1500
          invalid_properties.push("invalid value for \"return_description\", the character length must be smaller than or equal to 1500.")
        end
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_RETURN_STATUS.error_message) unless ENUM_VALIDATOR_FOR_RETURN_STATUS.valid?(@return_status)
      if _returned_at = @returned_at
        if _returned_at.is_a?(OpenApi::Validatable)
          invalid_properties.concat(_returned_at.list_invalid_properties_for("returned_at"))
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _additional_documentation = @additional_documentation
        if _additional_documentation.is_a?(OpenApi::Validatable)
          return false unless _additional_documentation.valid?
        end
      end
      if _explanation = @explanation
        return false if _explanation.to_s.size > 1500
      end
      if _received_at = @received_at
        if _received_at.is_a?(OpenApi::Validatable)
          return false unless _received_at.valid?
        end
      end
      if _return_description = @return_description
        return false if _return_description.to_s.size > 1500
      end
      return false unless ENUM_VALIDATOR_FOR_RETURN_STATUS.valid?(@return_status)
      if _returned_at = @returned_at
        if _returned_at.is_a?(OpenApi::Validatable)
          return false unless _returned_at.valid?
        end
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] additional_documentation Object to be assigned
    def additional_documentation=(additional_documentation : Stripe::BusinessProfileSpecsSupportUrl?)
      if additional_documentation.nil?
        return @additional_documentation = nil
      end
      _additional_documentation = additional_documentation.not_nil!
      if _additional_documentation.is_a?(OpenApi::Validatable)
        _additional_documentation.validate
      end
      @additional_documentation = _additional_documentation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] explanation Object to be assigned
    def explanation=(explanation : String?)
      if explanation.nil?
        return @explanation = nil
      end
      _explanation = explanation.not_nil!
      if _explanation.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"explanation\", the character length must be smaller than or equal to 1500.")
      end

      @explanation = _explanation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] received_at Object to be assigned
    def received_at=(received_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?)
      if received_at.nil?
        return @received_at = nil
      end
      _received_at = received_at.not_nil!
      if _received_at.is_a?(OpenApi::Validatable)
        _received_at.validate
      end
      @received_at = _received_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_description Object to be assigned
    def return_description=(return_description : String?)
      if return_description.nil?
        return @return_description = nil
      end
      _return_description = return_description.not_nil!
      if _return_description.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"return_description\", the character length must be smaller than or equal to 1500.")
      end

      @return_description = _return_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] return_status Object to be assigned
    def return_status=(return_status : String?)
      if return_status.nil?
        return @return_status = nil
      end
      _return_status = return_status.not_nil!
      ENUM_VALIDATOR_FOR_RETURN_STATUS.valid!(_return_status)
      @return_status = _return_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] returned_at Object to be assigned
    def returned_at=(returned_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?)
      if returned_at.nil?
        return @returned_at = nil
      end
      _returned_at = returned_at.not_nil!
      if _returned_at.is_a?(OpenApi::Validatable)
        _returned_at.validate
      end
      @returned_at = _returned_at
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@additional_documentation, @explanation, @received_at, @return_description, @return_status, @returned_at)
  end
end
