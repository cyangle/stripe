#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class AccountBusinessProfile
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
    @[JSON::Field(key: "mcc", type: String?, presence: true, ignore_serialize: mcc.nil? && !mcc_present?)]
    getter mcc : String?

    @[JSON::Field(ignore: true)]
    property? mcc_present : Bool = false

    # The customer-facing business name.
    @[JSON::Field(key: "name", type: String?, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String?

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
    @[JSON::Field(key: "product_description", type: String?, presence: true, ignore_serialize: product_description.nil? && !product_description_present?)]
    getter product_description : String?

    @[JSON::Field(ignore: true)]
    property? product_description_present : Bool = false

    @[JSON::Field(key: "support_address", type: AccountBusinessProfileSupportAddress?, presence: true, ignore_serialize: support_address.nil? && !support_address_present?)]
    property support_address : AccountBusinessProfileSupportAddress?

    @[JSON::Field(ignore: true)]
    property? support_address_present : Bool = false

    # A publicly available email address for sending support issues to.
    @[JSON::Field(key: "support_email", type: String?, presence: true, ignore_serialize: support_email.nil? && !support_email_present?)]
    getter support_email : String?

    @[JSON::Field(ignore: true)]
    property? support_email_present : Bool = false

    # A publicly available phone number to call with support issues.
    @[JSON::Field(key: "support_phone", type: String?, presence: true, ignore_serialize: support_phone.nil? && !support_phone_present?)]
    getter support_phone : String?

    @[JSON::Field(ignore: true)]
    property? support_phone_present : Bool = false

    # A publicly available website for handling support issues.
    @[JSON::Field(key: "support_url", type: String?, presence: true, ignore_serialize: support_url.nil? && !support_url_present?)]
    getter support_url : String?

    @[JSON::Field(ignore: true)]
    property? support_url_present : Bool = false

    # The business's publicly available website.
    @[JSON::Field(key: "url", type: String?, presence: true, ignore_serialize: url.nil? && !url_present?)]
    getter url : String?

    @[JSON::Field(ignore: true)]
    property? url_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @mcc : String? = nil,
      @name : String? = nil,
      @product_description : String? = nil,
      @support_address : AccountBusinessProfileSupportAddress? = nil,
      @support_email : String? = nil,
      @support_phone : String? = nil,
      @support_url : String? = nil,
      @url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@mcc.nil? && @mcc.to_s.size > 5000
        invalid_properties.push("invalid value for \"mcc\", the character length must be smaller than or equal to 5000.")
      end

      if !@name.nil? && @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      if !@product_description.nil? && @product_description.to_s.size > 40000
        invalid_properties.push("invalid value for \"product_description\", the character length must be smaller than or equal to 40000.")
      end

      if !@support_email.nil? && @support_email.to_s.size > 5000
        invalid_properties.push("invalid value for \"support_email\", the character length must be smaller than or equal to 5000.")
      end

      if !@support_phone.nil? && @support_phone.to_s.size > 5000
        invalid_properties.push("invalid value for \"support_phone\", the character length must be smaller than or equal to 5000.")
      end

      if !@support_url.nil? && @support_url.to_s.size > 5000
        invalid_properties.push("invalid value for \"support_url\", the character length must be smaller than or equal to 5000.")
      end

      if !@url.nil? && @url.to_s.size > 5000
        invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@mcc.nil? && @mcc.to_s.size > 5000
      return false if !@name.nil? && @name.to_s.size > 5000
      return false if !@product_description.nil? && @product_description.to_s.size > 40000
      return false if !@support_email.nil? && @support_email.to_s.size > 5000
      return false if !@support_phone.nil? && @support_phone.to_s.size > 5000
      return false if !@support_url.nil? && @support_url.to_s.size > 5000
      return false if !@url.nil? && @url.to_s.size > 5000

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] mcc Value to be assigned
    def mcc=(mcc)
      if !mcc.nil? && mcc.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"mcc\", the character length must be smaller than or equal to 5000.")
      end

      @mcc = mcc
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] product_description Value to be assigned
    def product_description=(product_description)
      if !product_description.nil? && product_description.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"product_description\", the character length must be smaller than or equal to 40000.")
      end

      @product_description = product_description
    end

    # Custom attribute writer method with validation
    # @param [Object] support_email Value to be assigned
    def support_email=(support_email)
      if !support_email.nil? && support_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"support_email\", the character length must be smaller than or equal to 5000.")
      end

      @support_email = support_email
    end

    # Custom attribute writer method with validation
    # @param [Object] support_phone Value to be assigned
    def support_phone=(support_phone)
      if !support_phone.nil? && support_phone.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"support_phone\", the character length must be smaller than or equal to 5000.")
      end

      @support_phone = support_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] support_url Value to be assigned
    def support_url=(support_url)
      if !support_url.nil? && support_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"support_url\", the character length must be smaller than or equal to 5000.")
      end

      @support_url = support_url
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if !url.nil? && url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@mcc, @name, @product_description, @support_address, @support_email, @support_phone, @support_url, @url)
  end
end
