#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class AccountBusinessProfile
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    # [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
    @[JSON::Field(key: "mcc", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: mcc.nil? && !mcc_present?)]
    getter mcc : String? = nil

    @[JSON::Field(ignore: true)]
    property? mcc_present : Bool = false

    # The customer-facing business name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String? = nil

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
    @[JSON::Field(key: "product_description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: product_description.nil? && !product_description_present?)]
    getter product_description : String? = nil

    @[JSON::Field(ignore: true)]
    property? product_description_present : Bool = false

    @[JSON::Field(key: "support_address", type: Stripe::AccountBusinessProfileSupportAddress?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: support_address.nil? && !support_address_present?)]
    getter support_address : Stripe::AccountBusinessProfileSupportAddress? = nil

    @[JSON::Field(ignore: true)]
    property? support_address_present : Bool = false

    # A publicly available email address for sending support issues to.
    @[JSON::Field(key: "support_email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: support_email.nil? && !support_email_present?)]
    getter support_email : String? = nil

    @[JSON::Field(ignore: true)]
    property? support_email_present : Bool = false

    # A publicly available phone number to call with support issues.
    @[JSON::Field(key: "support_phone", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: support_phone.nil? && !support_phone_present?)]
    getter support_phone : String? = nil

    @[JSON::Field(ignore: true)]
    property? support_phone_present : Bool = false

    # A publicly available website for handling support issues.
    @[JSON::Field(key: "support_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: support_url.nil? && !support_url_present?)]
    getter support_url : String? = nil

    @[JSON::Field(ignore: true)]
    property? support_url_present : Bool = false

    # The business's publicly available website.
    @[JSON::Field(key: "url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: url.nil? && !url_present?)]
    getter url : String? = nil

    @[JSON::Field(ignore: true)]
    property? url_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @mcc : String? = nil,
      @name : String? = nil,
      @product_description : String? = nil,
      @support_address : Stripe::AccountBusinessProfileSupportAddress? = nil,
      @support_email : String? = nil,
      @support_phone : String? = nil,
      @support_url : String? = nil,
      @url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if _mcc = @mcc
        if _mcc.to_s.size > 5000
          invalid_properties.push("invalid value for \"mcc\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _name = @name
        if _name.to_s.size > 5000
          invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _product_description = @product_description
        if _product_description.to_s.size > 40000
          invalid_properties.push("invalid value for \"product_description\", the character length must be smaller than or equal to 40000.")
        end
      end
      # This is a model support_address : Stripe::AccountBusinessProfileSupportAddress?
      if _support_email = @support_email
        if _support_email.to_s.size > 5000
          invalid_properties.push("invalid value for \"support_email\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _support_phone = @support_phone
        if _support_phone.to_s.size > 5000
          invalid_properties.push("invalid value for \"support_phone\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _support_url = @support_url
        if _support_url.to_s.size > 5000
          invalid_properties.push("invalid value for \"support_url\", the character length must be smaller than or equal to 5000.")
        end
      end
      if _url = @url
        if _url.to_s.size > 5000
          invalid_properties.push("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
        end
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      if _mcc = @mcc
        return false if _mcc.to_s.size > 5000
      end
      if _name = @name
        return false if _name.to_s.size > 5000
      end
      if _product_description = @product_description
        return false if _product_description.to_s.size > 40000
      end
      if _support_email = @support_email
        return false if _support_email.to_s.size > 5000
      end
      if _support_phone = @support_phone
        return false if _support_phone.to_s.size > 5000
      end
      if _support_url = @support_url
        return false if _support_url.to_s.size > 5000
      end
      if _url = @url
        return false if _url.to_s.size > 5000
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mcc Object to be assigned
    def mcc=(mcc : String?)
      if mcc.nil?
        return @mcc = nil
      end
      _mcc = mcc.not_nil!
      if _mcc.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"mcc\", the character length must be smaller than or equal to 5000.")
      end

      @mcc = mcc
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        return @name = nil
      end
      _name = name.not_nil!
      if _name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_description Object to be assigned
    def product_description=(product_description : String?)
      if product_description.nil?
        return @product_description = nil
      end
      _product_description = product_description.not_nil!
      if _product_description.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"product_description\", the character length must be smaller than or equal to 40000.")
      end

      @product_description = product_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] support_address Object to be assigned
    def support_address=(support_address : Stripe::AccountBusinessProfileSupportAddress?)
      if support_address.nil?
        return @support_address = nil
      end
      @support_address = support_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] support_email Object to be assigned
    def support_email=(support_email : String?)
      if support_email.nil?
        return @support_email = nil
      end
      _support_email = support_email.not_nil!
      if _support_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"support_email\", the character length must be smaller than or equal to 5000.")
      end

      @support_email = support_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] support_phone Object to be assigned
    def support_phone=(support_phone : String?)
      if support_phone.nil?
        return @support_phone = nil
      end
      _support_phone = support_phone.not_nil!
      if _support_phone.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"support_phone\", the character length must be smaller than or equal to 5000.")
      end

      @support_phone = support_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] support_url Object to be assigned
    def support_url=(support_url : String?)
      if support_url.nil?
        return @support_url = nil
      end
      _support_url = support_url.not_nil!
      if _support_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"support_url\", the character length must be smaller than or equal to 5000.")
      end

      @support_url = support_url
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(url : String?)
      if url.nil?
        return @url = nil
      end
      _url = url.not_nil!
      if _url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\", the character length must be smaller than or equal to 5000.")
      end

      @url = url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@mcc, @mcc_present, @name, @name_present, @product_description, @product_description_present, @support_address, @support_address_present, @support_email, @support_email_present, @support_phone, @support_phone_present, @support_url, @support_url_present, @url, @url_present)
  end
end
