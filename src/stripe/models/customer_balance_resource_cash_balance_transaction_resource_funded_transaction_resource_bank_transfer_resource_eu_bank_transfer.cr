#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Stripe
  #
  class CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The BIC of the bank of the sender of the funding.
    @[JSON::Field(key: "bic", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter bic : String? = nil
    MAX_LENGTH_FOR_BIC = 5000

    # The last 4 digits of the IBAN of the sender of the funding.
    @[JSON::Field(key: "iban_last4", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter iban_last4 : String? = nil
    MAX_LENGTH_FOR_IBAN_LAST4 = 5000

    # The full name of the sender, as supplied by the sending bank.
    @[JSON::Field(key: "sender_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter sender_name : String? = nil
    MAX_LENGTH_FOR_SENDER_NAME = 5000

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @bic : String? = nil,
      @iban_last4 : String? = nil,
      @sender_name : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_bic = @bic).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("bic", _bic.to_s.size, MAX_LENGTH_FOR_BIC)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_iban_last4 = @iban_last4).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("iban_last4", _iban_last4.to_s.size, MAX_LENGTH_FOR_IBAN_LAST4)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_sender_name = @sender_name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("sender_name", _sender_name.to_s.size, MAX_LENGTH_FOR_SENDER_NAME)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_bic = @bic).nil?
        return false if _bic.to_s.size > MAX_LENGTH_FOR_BIC
      end

      unless (_iban_last4 = @iban_last4).nil?
        return false if _iban_last4.to_s.size > MAX_LENGTH_FOR_IBAN_LAST4
      end

      unless (_sender_name = @sender_name).nil?
        return false if _sender_name.to_s.size > MAX_LENGTH_FOR_SENDER_NAME
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bic Object to be assigned
    def bic=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("bic", new_value.to_s.size, MAX_LENGTH_FOR_BIC)
      end

      @bic = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iban_last4 Object to be assigned
    def iban_last4=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("iban_last4", new_value.to_s.size, MAX_LENGTH_FOR_IBAN_LAST4)
      end

      @iban_last4 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sender_name Object to be assigned
    def sender_name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("sender_name", new_value.to_s.size, MAX_LENGTH_FOR_SENDER_NAME)
      end

      @sender_name = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bic, @iban_last4, @sender_name)
  end
end
