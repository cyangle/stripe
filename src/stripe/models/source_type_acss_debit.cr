#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  @[JSON::Serializable::Options(emit_nulls: true)]
  class SourceTypeAcssDebit
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "bank_address_city", type: String?, presence: true, ignore_serialize: bank_address_city.nil? && !bank_address_city_present?)]
    property bank_address_city : String?

    @[JSON::Field(ignore: true)]
    property? bank_address_city_present : Bool = false

    @[JSON::Field(key: "bank_address_line_1", type: String?, presence: true, ignore_serialize: bank_address_line_1.nil? && !bank_address_line_1_present?)]
    property bank_address_line_1 : String?

    @[JSON::Field(ignore: true)]
    property? bank_address_line_1_present : Bool = false

    @[JSON::Field(key: "bank_address_line_2", type: String?, presence: true, ignore_serialize: bank_address_line_2.nil? && !bank_address_line_2_present?)]
    property bank_address_line_2 : String?

    @[JSON::Field(ignore: true)]
    property? bank_address_line_2_present : Bool = false

    @[JSON::Field(key: "bank_address_postal_code", type: String?, presence: true, ignore_serialize: bank_address_postal_code.nil? && !bank_address_postal_code_present?)]
    property bank_address_postal_code : String?

    @[JSON::Field(ignore: true)]
    property? bank_address_postal_code_present : Bool = false

    @[JSON::Field(key: "bank_name", type: String?, presence: true, ignore_serialize: bank_name.nil? && !bank_name_present?)]
    property bank_name : String?

    @[JSON::Field(ignore: true)]
    property? bank_name_present : Bool = false

    @[JSON::Field(key: "category", type: String?, presence: true, ignore_serialize: category.nil? && !category_present?)]
    property category : String?

    @[JSON::Field(ignore: true)]
    property? category_present : Bool = false

    @[JSON::Field(key: "country", type: String?, presence: true, ignore_serialize: country.nil? && !country_present?)]
    property country : String?

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    @[JSON::Field(key: "fingerprint", type: String?, presence: true, ignore_serialize: fingerprint.nil? && !fingerprint_present?)]
    property fingerprint : String?

    @[JSON::Field(ignore: true)]
    property? fingerprint_present : Bool = false

    @[JSON::Field(key: "last4", type: String?, presence: true, ignore_serialize: last4.nil? && !last4_present?)]
    property last4 : String?

    @[JSON::Field(ignore: true)]
    property? last4_present : Bool = false

    @[JSON::Field(key: "routing_number", type: String?, presence: true, ignore_serialize: routing_number.nil? && !routing_number_present?)]
    property routing_number : String?

    @[JSON::Field(ignore: true)]
    property? routing_number_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @bank_address_city : String? = nil,
      @bank_address_line_1 : String? = nil,
      @bank_address_line_2 : String? = nil,
      @bank_address_postal_code : String? = nil,
      @bank_name : String? = nil,
      @category : String? = nil,
      @country : String? = nil,
      @fingerprint : String? = nil,
      @last4 : String? = nil,
      @routing_number : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bank_address_city, @bank_address_city_present, @bank_address_line_1, @bank_address_line_1_present, @bank_address_line_2, @bank_address_line_2_present, @bank_address_postal_code, @bank_address_postal_code_present, @bank_name, @bank_name_present, @category, @category_present, @country, @country_present, @fingerprint, @fingerprint_present, @last4, @last4_present, @routing_number, @routing_number_present)
  end
end
