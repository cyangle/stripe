#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A line item.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Item
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties

    # Total before any discounts or taxes are applied.
    @[JSON::Field(key: "amount_subtotal", type: Int64)]
    property amount_subtotal : Int64

    # Total after discounts and taxes.
    @[JSON::Field(key: "amount_total", type: Int64)]
    property amount_total : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String)]
    property currency : String

    # An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
    @[JSON::Field(key: "description", type: String)]
    getter description : String

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String)]
    getter id : String

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String)]
    getter object : String

    ENUM_VALIDATOR_FOR_OBJECT = EnumValidator.new("object", "String", ["item"])

    # Optional properties

    # Total discount amount applied. If no discounts were applied, defaults to 0.
    @[JSON::Field(key: "amount_discount", type: Int64?, presence: true, ignore_serialize: amount_discount.nil? && !amount_discount_present?)]
    property amount_discount : Int64?

    @[JSON::Field(ignore: true)]
    property? amount_discount_present : Bool = false

    # Total tax amount applied. If no tax was applied, defaults to 0.
    @[JSON::Field(key: "amount_tax", type: Int64?, presence: true, ignore_serialize: amount_tax.nil? && !amount_tax_present?)]
    property amount_tax : Int64?

    @[JSON::Field(ignore: true)]
    property? amount_tax_present : Bool = false

    # The discounts applied to the line item.
    @[JSON::Field(key: "discounts", type: Array(LineItemsDiscountAmount)?, presence: true, ignore_serialize: discounts.nil? && !discounts_present?)]
    property discounts : Array(LineItemsDiscountAmount)?

    @[JSON::Field(ignore: true)]
    property? discounts_present : Bool = false

    @[JSON::Field(key: "price", type: ItemPrice?, presence: true, ignore_serialize: price.nil? && !price_present?)]
    property price : ItemPrice?

    @[JSON::Field(ignore: true)]
    property? price_present : Bool = false

    @[JSON::Field(key: "product", type: ItemProduct?, presence: true, ignore_serialize: product.nil? && !product_present?)]
    property product : ItemProduct?

    @[JSON::Field(ignore: true)]
    property? product_present : Bool = false

    # The quantity of products being purchased.
    @[JSON::Field(key: "quantity", type: Int64?, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    property quantity : Int64?

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    # The taxes applied to the line item.
    @[JSON::Field(key: "taxes", type: Array(LineItemsTaxAmount)?, presence: true, ignore_serialize: taxes.nil? && !taxes_present?)]
    property taxes : Array(LineItemsTaxAmount)?

    @[JSON::Field(ignore: true)]
    property? taxes_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_subtotal : Int64,
      @amount_total : Int64,
      @currency : String,
      @description : String,
      @id : String,
      @object : String,
      # Optional properties
      @amount_discount : Int64? = nil,
      @amount_tax : Int64? = nil,
      @discounts : Array(LineItemsDiscountAmount)? = nil,
      @price : ItemPrice? = nil,
      @product : ItemProduct? = nil,
      @quantity : Int64? = nil,
      @taxes : Array(LineItemsTaxAmount)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties.push(ENUM_VALIDATOR_FOR_OBJECT.error_message) unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @description.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false unless ENUM_VALIDATOR_FOR_OBJECT.valid?(@object, false)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      ENUM_VALIDATOR_FOR_OBJECT.valid!(object, false)
      @object = object
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_subtotal, @amount_total, @currency, @description, @id, @object, @amount_discount, @amount_tax, @discounts, @price, @product, @quantity, @taxes)
  end
end
