#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  # A line item.
  class Item
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Total discount amount applied. If no discounts were applied, defaults to 0.
    @[JSON::Field(key: "amount_discount", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_discount : Int64? = nil

    # Total before any discounts or taxes are applied.
    @[JSON::Field(key: "amount_subtotal", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_subtotal : Int64? = nil

    # Total tax amount applied. If no tax was applied, defaults to 0.
    @[JSON::Field(key: "amount_tax", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_tax : Int64? = nil

    # Total after discounts and taxes.
    @[JSON::Field(key: "amount_total", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount_total : Int64? = nil

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [item]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("item")

    # End of Required Properties

    # Optional Properties

    # The discounts applied to the line item.
    @[JSON::Field(key: "discounts", type: Array(Stripe::LineItemsDiscountAmount)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter discounts : Array(Stripe::LineItemsDiscountAmount)? = nil

    @[JSON::Field(key: "price", type: Stripe::ItemPrice?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: price.nil? && !price_present?)]
    getter price : Stripe::ItemPrice? = nil

    @[JSON::Field(ignore: true)]
    property? price_present : Bool = false

    @[JSON::Field(key: "product", type: Stripe::ItemProduct?, default: nil, required: false, nullable: false, emit_null: false)]
    getter product : Stripe::ItemProduct? = nil

    # The quantity of products being purchased.
    @[JSON::Field(key: "quantity", type: Int64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    getter quantity : Int64? = nil

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    # The taxes applied to the line item.
    @[JSON::Field(key: "taxes", type: Array(Stripe::LineItemsTaxAmount)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter taxes : Array(Stripe::LineItemsTaxAmount)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount_discount : Int64? = nil,
      @amount_subtotal : Int64? = nil,
      @amount_tax : Int64? = nil,
      @amount_total : Int64? = nil,
      @currency : String? = nil,
      @description : String? = nil,
      @id : String? = nil,
      @object : String? = nil,
      # Optional properties
      @discounts : Array(Stripe::LineItemsDiscountAmount)? = nil,
      @price : Stripe::ItemPrice? = nil,
      @product : Stripe::ItemProduct? = nil,
      @quantity : Int64? = nil,
      @taxes : Array(Stripe::LineItemsTaxAmount)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount_discount\" is required and cannot be null") if @amount_discount.nil?

      invalid_properties.push("\"amount_subtotal\" is required and cannot be null") if @amount_subtotal.nil?

      invalid_properties.push("\"amount_tax\" is required and cannot be null") if @amount_tax.nil?

      invalid_properties.push("\"amount_total\" is required and cannot be null") if @amount_total.nil?

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      invalid_properties.push("\"description\" is required and cannot be null") if @description.nil?

      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_discounts = @discounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "discounts", container: _discounts)) if _discounts.is_a?(Array)
      end
      unless (_price = @price).nil?
        invalid_properties.concat(_price.list_invalid_properties_for("price")) if _price.is_a?(OpenApi::Validatable)
      end
      unless (_product = @product).nil?
        invalid_properties.concat(_product.list_invalid_properties_for("product")) if _product.is_a?(OpenApi::Validatable)
      end

      unless (_taxes = @taxes).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "taxes", container: _taxes)) if _taxes.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount_discount.nil?

      return false if @amount_subtotal.nil?

      return false if @amount_tax.nil?

      return false if @amount_total.nil?

      return false if @currency.nil?

      return false if @description.nil?
      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_discounts = @discounts).nil?
        return false if _discounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _discounts)
      end

      unless (_price = @price).nil?
        return false if _price.is_a?(OpenApi::Validatable) && !_price.valid?
      end

      unless (_product = @product).nil?
        return false if _product.is_a?(OpenApi::Validatable) && !_product.valid?
      end

      unless (_taxes = @taxes).nil?
        return false if _taxes.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _taxes)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_discount Object to be assigned
    def amount_discount=(amount_discount : Int64?)
      if amount_discount.nil?
        raise ArgumentError.new("\"amount_discount\" is required and cannot be null")
      end
      _amount_discount = amount_discount.not_nil!
      @amount_discount = _amount_discount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_subtotal Object to be assigned
    def amount_subtotal=(amount_subtotal : Int64?)
      if amount_subtotal.nil?
        raise ArgumentError.new("\"amount_subtotal\" is required and cannot be null")
      end
      _amount_subtotal = amount_subtotal.not_nil!
      @amount_subtotal = _amount_subtotal
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_tax Object to be assigned
    def amount_tax=(amount_tax : Int64?)
      if amount_tax.nil?
        raise ArgumentError.new("\"amount_tax\" is required and cannot be null")
      end
      _amount_tax = amount_tax.not_nil!
      @amount_tax = _amount_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_total Object to be assigned
    def amount_total=(amount_total : Int64?)
      if amount_total.nil?
        raise ArgumentError.new("\"amount_total\" is required and cannot be null")
      end
      _amount_total = amount_total.not_nil!
      @amount_total = _amount_total
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency : String?)
      if currency.nil?
        raise ArgumentError.new("\"currency\" is required and cannot be null")
      end
      _currency = currency.not_nil!
      @currency = _currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(description : String?)
      if description.nil?
        raise ArgumentError.new("\"description\" is required and cannot be null")
      end
      _description = description.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      @description = _description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : String?)
      if id.nil?
        raise ArgumentError.new("\"id\" is required and cannot be null")
      end
      _id = id.not_nil!
      OpenApi::PrimitiveValidator.validate_max_length("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object : String?)
      if object.nil?
        raise ArgumentError.new("\"object\" is required and cannot be null")
      end
      _object = object.not_nil!
      OpenApi::EnumValidator.validate("object", _object, VALID_VALUES_FOR_OBJECT)
      @object = _object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discounts Object to be assigned
    def discounts=(discounts : Array(Stripe::LineItemsDiscountAmount)?)
      if discounts.nil?
        return @discounts = nil
      end
      _discounts = discounts.not_nil!
      OpenApi::ContainerValidator.validate(container: _discounts) if _discounts.is_a?(Array)
      @discounts = _discounts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price Object to be assigned
    def price=(price : Stripe::ItemPrice?)
      if price.nil?
        return @price = nil
      end
      _price = price.not_nil!
      _price.validate if _price.is_a?(OpenApi::Validatable)
      @price = _price
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product Object to be assigned
    def product=(product : Stripe::ItemProduct?)
      if product.nil?
        return @product = nil
      end
      _product = product.not_nil!
      _product.validate if _product.is_a?(OpenApi::Validatable)
      @product = _product
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(quantity : Int64?)
      if quantity.nil?
        return @quantity = nil
      end
      _quantity = quantity.not_nil!
      @quantity = _quantity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] taxes Object to be assigned
    def taxes=(taxes : Array(Stripe::LineItemsTaxAmount)?)
      if taxes.nil?
        return @taxes = nil
      end
      _taxes = taxes.not_nil!
      OpenApi::ContainerValidator.validate(container: _taxes) if _taxes.is_a?(Array)
      @taxes = _taxes
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount_discount, @amount_subtotal, @amount_tax, @amount_total, @currency, @description, @id, @object, @discounts, @price, @price_present, @product, @quantity, @quantity_present, @taxes)
  end
end
