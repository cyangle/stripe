#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-08-01
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  class CustomerTax
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required properties

    # Surfaces if automatic tax computation is possible given the current customer location information.
    @[JSON::Field(key: "automatic_tax", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automatic_tax : String? = nil

    ENUM_VALIDATOR_FOR_AUTOMATIC_TAX = OpenApi::EnumValidator.new("automatic_tax", "String", ["failed", "not_collecting", "supported", "unrecognized_location"])

    # Optional properties

    # A recent IP address of the customer used for tax reporting and tax location inference.
    @[JSON::Field(key: "ip_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "location", type: Stripe::CustomerTaxLocation1?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: location.nil? && !location_present?)]
    getter location : Stripe::CustomerTaxLocation1? = nil

    @[JSON::Field(ignore: true)]
    property? location_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @automatic_tax : String? = nil,
      # Optional properties
      @ip_address : String? = nil,
      @location : Stripe::CustomerTaxLocation1? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_AUTOMATIC_TAX.error_message) unless ENUM_VALIDATOR_FOR_AUTOMATIC_TAX.valid?(@automatic_tax, false)
      if _ip_address = @ip_address
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("ip_address", _ip_address.to_s.size, 5000)
          invalid_properties.push(max_length_error)
        end
      end
      if _location = @location
        invalid_properties.concat(_location.list_invalid_properties_for("location")) if _location.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false unless ENUM_VALIDATOR_FOR_AUTOMATIC_TAX.valid?(@automatic_tax, false)
      if _ip_address = @ip_address
        return false if _ip_address.to_s.size > 5000
      end
      if _location = @location
        return false if _location.is_a?(OpenApi::Validatable) && !_location.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax : String?)
      if automatic_tax.nil?
        raise ArgumentError.new("\"automatic_tax\" is required and cannot be null")
      end
      _automatic_tax = automatic_tax.not_nil!
      ENUM_VALIDATOR_FOR_AUTOMATIC_TAX.valid!(_automatic_tax)
      @automatic_tax = _automatic_tax
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address Object to be assigned
    def ip_address=(ip_address : String?)
      if ip_address.nil?
        return @ip_address = nil
      end
      _ip_address = ip_address.not_nil!
      if max_length_error = OpenApi::PrimitiveValidator.max_length_error("ip_address", _ip_address.to_s.size, 5000)
        raise ArgumentError.new(max_length_error)
      end

      @ip_address = _ip_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(location : Stripe::CustomerTaxLocation1?)
      if location.nil?
        return @location = nil
      end
      _location = location.not_nil!
      _location.validate if _location.is_a?(OpenApi::Validatable)
      @location = _location
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@automatic_tax, @ip_address, @ip_address_present, @location, @location_present)
  end
end
