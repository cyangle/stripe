#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class CustomerTax
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    # Surfaces if automatic tax computation is possible given the current customer location information.
    @[JSON::Field(key: "automatic_tax", type: String)]
    getter automatic_tax : String

    ENUM_VALIDATOR_FOR_AUTOMATIC_TAX = EnumValidator.new("automatic_tax", "String", ["failed", "not_collecting", "supported", "unrecognized_location"])

    # A recent IP address of the customer used for tax reporting and tax location inference.
    @[JSON::Field(key: "ip_address", type: String?, presence: true, ignore_serialize: ip_address.nil? && !ip_address_present?)]
    getter ip_address : String?

    @[JSON::Field(ignore: true)]
    property? ip_address_present : Bool = false

    @[JSON::Field(key: "location", type: CustomerTaxLocation1?, presence: true, ignore_serialize: location.nil? && !location_present?)]
    property location : CustomerTaxLocation1?

    @[JSON::Field(ignore: true)]
    property? location_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @automatic_tax : String, @ip_address : String?, @location : CustomerTaxLocation1?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push(ENUM_VALIDATOR_FOR_AUTOMATIC_TAX.error_message) unless ENUM_VALIDATOR_FOR_AUTOMATIC_TAX.valid?(@automatic_tax, false)

      if @ip_address.to_s.size > 5000
        invalid_properties.push("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_AUTOMATIC_TAX.valid?(@automatic_tax, false)
      return false if @ip_address.to_s.size > 5000
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automatic_tax Object to be assigned
    def automatic_tax=(automatic_tax)
      ENUM_VALIDATOR_FOR_AUTOMATIC_TAX.valid!(automatic_tax, false)
      @automatic_tax = automatic_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address Value to be assigned
    def ip_address=(ip_address)
      if ip_address.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ip_address\", the character length must be smaller than or equal to 5000.")
      end

      @ip_address = ip_address
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        automatic_tax == o.automatic_tax &&
        ip_address == o.ip_address &&
        location == o.location
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@automatic_tax, @ip_address, @location)
  end
end
