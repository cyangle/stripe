#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./address"
require "./apms_sources_source_list"
require "./cash_balance"
require "./customer_default_source"
require "./customer_tax"
require "./customer_test_clock"
require "./discount"
require "./invoice_setting_customer_setting"
require "./shipping"
require "./subscription_list"
require "./tax_ids_list"

module Stripe
  # This object represents a customer of your business. Use it to create recurring charges and track payments that belong to the same customer.  Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment)
  class Customer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created : Int64? = nil

    @[JSON::Field(key: "default_source", type: Stripe::CustomerDefaultSource?, default: nil, required: true, nullable: true, emit_null: true)]
    getter default_source : Stripe::CustomerDefaultSource? = nil

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 5000

    # The customer's email address.
    @[JSON::Field(key: "email", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter email : String? = nil
    MAX_LENGTH_FOR_EMAIL = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter livemode : Bool? = nil

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [customer]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("customer")

    @[JSON::Field(key: "shipping", type: Stripe::Shipping?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shipping : Stripe::Shipping? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "address", type: Stripe::Address?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address.nil? && !address_present?)]
    getter address : Stripe::Address? = nil

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    # The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize.
    @[JSON::Field(key: "balance", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter balance : Int64? = nil

    @[JSON::Field(key: "cash_balance", type: Stripe::CashBalance?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cash_balance.nil? && !cash_balance_present?)]
    getter cash_balance : Stripe::CashBalance? = nil

    @[JSON::Field(ignore: true)]
    property? cash_balance_present : Bool = false

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    getter currency : String? = nil
    MAX_LENGTH_FOR_CURRENCY = 5000

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.  If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.  If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`.
    @[JSON::Field(key: "delinquent", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: delinquent.nil? && !delinquent_present?)]
    getter delinquent : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? delinquent_present : Bool = false

    @[JSON::Field(key: "discount", type: Stripe::Discount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: discount.nil? && !discount_present?)]
    getter discount : Stripe::Discount? = nil

    @[JSON::Field(ignore: true)]
    property? discount_present : Bool = false

    @[JSON::Field(key: "invoice_credit_balance", type: Hash(String, Int32)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_credit_balance : Hash(String, Int32)? = nil

    # The prefix for the customer used to generate unique invoice numbers.
    @[JSON::Field(key: "invoice_prefix", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: invoice_prefix.nil? && !invoice_prefix_present?)]
    getter invoice_prefix : String? = nil
    MAX_LENGTH_FOR_INVOICE_PREFIX = 5000

    @[JSON::Field(ignore: true)]
    property? invoice_prefix_present : Bool = false

    @[JSON::Field(key: "invoice_settings", type: Stripe::InvoiceSettingCustomerSetting?, default: nil, required: false, nullable: false, emit_null: false)]
    getter invoice_settings : Stripe::InvoiceSettingCustomerSetting? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The customer's full name or business name.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses.
    @[JSON::Field(key: "next_invoice_sequence", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter next_invoice_sequence : Int64? = nil

    # The customer's phone number.
    @[JSON::Field(key: "phone", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: phone.nil? && !phone_present?)]
    getter phone : String? = nil
    MAX_LENGTH_FOR_PHONE = 5000

    @[JSON::Field(ignore: true)]
    property? phone_present : Bool = false

    # The customer's preferred locales (languages), ordered by preference.
    @[JSON::Field(key: "preferred_locales", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: preferred_locales.nil? && !preferred_locales_present?)]
    getter preferred_locales : Array(String)? = nil

    @[JSON::Field(ignore: true)]
    property? preferred_locales_present : Bool = false

    @[JSON::Field(key: "sources", type: Stripe::ApmsSourcesSourceList?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sources : Stripe::ApmsSourcesSourceList? = nil

    @[JSON::Field(key: "subscriptions", type: Stripe::SubscriptionList?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscriptions : Stripe::SubscriptionList? = nil

    @[JSON::Field(key: "tax", type: Stripe::CustomerTax?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax : Stripe::CustomerTax? = nil

    # Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **\"Reverse charge\"**.
    @[JSON::Field(key: "tax_exempt", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tax_exempt.nil? && !tax_exempt_present?)]
    getter tax_exempt : String? = nil
    ERROR_MESSAGE_FOR_TAX_EXEMPT = "invalid value for \"tax_exempt\", must be one of [exempt, none, reverse]."
    VALID_VALUES_FOR_TAX_EXEMPT  = String.static_array("exempt", "none", "reverse")

    @[JSON::Field(ignore: true)]
    property? tax_exempt_present : Bool = false

    @[JSON::Field(key: "tax_ids", type: Stripe::TaxIDsList?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tax_ids : Stripe::TaxIDsList? = nil

    @[JSON::Field(key: "test_clock", type: Stripe::CustomerTestClock?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: test_clock.nil? && !test_clock_present?)]
    getter test_clock : Stripe::CustomerTestClock? = nil

    @[JSON::Field(ignore: true)]
    property? test_clock_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @created : Int64? = nil,
      @default_source : Stripe::CustomerDefaultSource? = nil,
      @description : String? = nil,
      @email : String? = nil,
      @id : String? = nil,
      @livemode : Bool? = nil,
      @object : String? = nil,
      @shipping : Stripe::Shipping? = nil,
      # Optional properties
      @address : Stripe::Address? = nil,
      @balance : Int64? = nil,
      @cash_balance : Stripe::CashBalance? = nil,
      @currency : String? = nil,
      @delinquent : Bool? = nil,
      @discount : Stripe::Discount? = nil,
      @invoice_credit_balance : Hash(String, Int32)? = nil,
      @invoice_prefix : String? = nil,
      @invoice_settings : Stripe::InvoiceSettingCustomerSetting? = nil,
      @metadata : Hash(String, String)? = nil,
      @name : String? = nil,
      @next_invoice_sequence : Int64? = nil,
      @phone : String? = nil,
      @preferred_locales : Array(String)? = nil,
      @sources : Stripe::ApmsSourcesSourceList? = nil,
      @subscriptions : Stripe::SubscriptionList? = nil,
      @tax : Stripe::CustomerTax? = nil,
      @tax_exempt : String? = nil,
      @tax_ids : Stripe::TaxIDsList? = nil,
      @test_clock : Stripe::CustomerTestClock? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      unless (_default_source = @default_source).nil?
        invalid_properties.concat(_default_source.list_invalid_properties_for("default_source")) if _default_source.is_a?(OpenApi::Validatable)
      end
      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_email = @email).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("email", _email.to_s.size, MAX_LENGTH_FOR_EMAIL)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("id", _id.to_s.size, MAX_LENGTH_FOR_ID)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"livemode\" is required and cannot be null") if @livemode.nil?

      invalid_properties.push("\"object\" is required and cannot be null") if @object.nil?

      unless (_object = @object).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_OBJECT) unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end
      unless (_shipping = @shipping).nil?
        invalid_properties.concat(_shipping.list_invalid_properties_for("shipping")) if _shipping.is_a?(OpenApi::Validatable)
      end
      unless (_address = @address).nil?
        invalid_properties.concat(_address.list_invalid_properties_for("address")) if _address.is_a?(OpenApi::Validatable)
      end

      unless (_cash_balance = @cash_balance).nil?
        invalid_properties.concat(_cash_balance.list_invalid_properties_for("cash_balance")) if _cash_balance.is_a?(OpenApi::Validatable)
      end
      unless (_currency = @currency).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("currency", _currency.to_s.size, MAX_LENGTH_FOR_CURRENCY)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_discount = @discount).nil?
        invalid_properties.concat(_discount.list_invalid_properties_for("discount")) if _discount.is_a?(OpenApi::Validatable)
      end

      unless (_invoice_prefix = @invoice_prefix).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("invoice_prefix", _invoice_prefix.to_s.size, MAX_LENGTH_FOR_INVOICE_PREFIX)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_invoice_settings = @invoice_settings).nil?
        invalid_properties.concat(_invoice_settings.list_invalid_properties_for("invoice_settings")) if _invoice_settings.is_a?(OpenApi::Validatable)
      end

      unless (_name = @name).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("name", _name.to_s.size, MAX_LENGTH_FOR_NAME)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_phone = @phone).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("phone", _phone.to_s.size, MAX_LENGTH_FOR_PHONE)
          invalid_properties.push(max_length_error)
        end
      end

      unless (_sources = @sources).nil?
        invalid_properties.concat(_sources.list_invalid_properties_for("sources")) if _sources.is_a?(OpenApi::Validatable)
      end
      unless (_subscriptions = @subscriptions).nil?
        invalid_properties.concat(_subscriptions.list_invalid_properties_for("subscriptions")) if _subscriptions.is_a?(OpenApi::Validatable)
      end
      unless (_tax = @tax).nil?
        invalid_properties.concat(_tax.list_invalid_properties_for("tax")) if _tax.is_a?(OpenApi::Validatable)
      end
      unless (_tax_exempt = @tax_exempt).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_TAX_EXEMPT) unless OpenApi::EnumValidator.valid?(_tax_exempt, VALID_VALUES_FOR_TAX_EXEMPT)
      end
      unless (_tax_ids = @tax_ids).nil?
        invalid_properties.concat(_tax_ids.list_invalid_properties_for("tax_ids")) if _tax_ids.is_a?(OpenApi::Validatable)
      end
      unless (_test_clock = @test_clock).nil?
        invalid_properties.concat(_test_clock.list_invalid_properties_for("test_clock")) if _test_clock.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @created.nil?

      unless (_default_source = @default_source).nil?
        return false if _default_source.is_a?(OpenApi::Validatable) && !_default_source.valid?
      end

      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      unless (_email = @email).nil?
        return false if _email.to_s.size > MAX_LENGTH_FOR_EMAIL
      end

      return false if @id.nil?
      unless (_id = @id).nil?
        return false if _id.to_s.size > MAX_LENGTH_FOR_ID
      end

      return false if @livemode.nil?

      return false if @object.nil?
      unless (_object = @object).nil?
        return false unless OpenApi::EnumValidator.valid?(_object, VALID_VALUES_FOR_OBJECT)
      end

      unless (_shipping = @shipping).nil?
        return false if _shipping.is_a?(OpenApi::Validatable) && !_shipping.valid?
      end

      unless (_address = @address).nil?
        return false if _address.is_a?(OpenApi::Validatable) && !_address.valid?
      end

      unless (_cash_balance = @cash_balance).nil?
        return false if _cash_balance.is_a?(OpenApi::Validatable) && !_cash_balance.valid?
      end

      unless (_currency = @currency).nil?
        return false if _currency.to_s.size > MAX_LENGTH_FOR_CURRENCY
      end

      unless (_discount = @discount).nil?
        return false if _discount.is_a?(OpenApi::Validatable) && !_discount.valid?
      end

      unless (_invoice_prefix = @invoice_prefix).nil?
        return false if _invoice_prefix.to_s.size > MAX_LENGTH_FOR_INVOICE_PREFIX
      end

      unless (_invoice_settings = @invoice_settings).nil?
        return false if _invoice_settings.is_a?(OpenApi::Validatable) && !_invoice_settings.valid?
      end

      unless (_name = @name).nil?
        return false if _name.to_s.size > MAX_LENGTH_FOR_NAME
      end

      unless (_phone = @phone).nil?
        return false if _phone.to_s.size > MAX_LENGTH_FOR_PHONE
      end

      unless (_sources = @sources).nil?
        return false if _sources.is_a?(OpenApi::Validatable) && !_sources.valid?
      end

      unless (_subscriptions = @subscriptions).nil?
        return false if _subscriptions.is_a?(OpenApi::Validatable) && !_subscriptions.valid?
      end

      unless (_tax = @tax).nil?
        return false if _tax.is_a?(OpenApi::Validatable) && !_tax.valid?
      end

      unless (_tax_exempt = @tax_exempt).nil?
        return false unless OpenApi::EnumValidator.valid?(_tax_exempt, VALID_VALUES_FOR_TAX_EXEMPT)
      end

      unless (_tax_ids = @tax_ids).nil?
        return false if _tax_ids.is_a?(OpenApi::Validatable) && !_tax_ids.valid?
      end

      unless (_test_clock = @test_clock).nil?
        return false if _test_clock.is_a?(OpenApi::Validatable) && !_test_clock.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Int64?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_source Object to be assigned
    def default_source=(new_value : Stripe::CustomerDefaultSource?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @default_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("email", new_value.to_s.size, MAX_LENGTH_FOR_EMAIL)
      end

      @email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("id", new_value.to_s.size, MAX_LENGTH_FOR_ID)
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] livemode Object to be assigned
    def livemode=(new_value : Bool?)
      raise ArgumentError.new("\"livemode\" is required and cannot be null") if new_value.nil?

      @livemode = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(new_value : String?)
      raise ArgumentError.new("\"object\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("object", new_value, VALID_VALUES_FOR_OBJECT)
      end

      @object = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipping Object to be assigned
    def shipping=(new_value : Stripe::Shipping?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @shipping = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : Stripe::Address?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance Object to be assigned
    def balance=(new_value : Int64?)
      @balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cash_balance Object to be assigned
    def cash_balance=(new_value : Stripe::CashBalance?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cash_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("currency", new_value.to_s.size, MAX_LENGTH_FOR_CURRENCY)
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delinquent Object to be assigned
    def delinquent=(new_value : Bool?)
      @delinquent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount Object to be assigned
    def discount=(new_value : Stripe::Discount?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @discount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_credit_balance Object to be assigned
    def invoice_credit_balance=(new_value : Hash(String, Int32)?)
      @invoice_credit_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_prefix Object to be assigned
    def invoice_prefix=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("invoice_prefix", new_value.to_s.size, MAX_LENGTH_FOR_INVOICE_PREFIX)
      end

      @invoice_prefix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_settings Object to be assigned
    def invoice_settings=(new_value : Stripe::InvoiceSettingCustomerSetting?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @invoice_settings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("name", new_value.to_s.size, MAX_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_invoice_sequence Object to be assigned
    def next_invoice_sequence=(new_value : Int64?)
      @next_invoice_sequence = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone Object to be assigned
    def phone=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("phone", new_value.to_s.size, MAX_LENGTH_FOR_PHONE)
      end

      @phone = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preferred_locales Object to be assigned
    def preferred_locales=(new_value : Array(String)?)
      @preferred_locales = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sources Object to be assigned
    def sources=(new_value : Stripe::ApmsSourcesSourceList?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @sources = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscriptions Object to be assigned
    def subscriptions=(new_value : Stripe::SubscriptionList?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscriptions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax Object to be assigned
    def tax=(new_value : Stripe::CustomerTax?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_exempt Object to be assigned
    def tax_exempt=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("tax_exempt", new_value, VALID_VALUES_FOR_TAX_EXEMPT)
      end

      @tax_exempt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_ids Object to be assigned
    def tax_ids=(new_value : Stripe::TaxIDsList?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @tax_ids = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock Object to be assigned
    def test_clock=(new_value : Stripe::CustomerTestClock?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @test_clock = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@created, @default_source, @description, @email, @id, @livemode, @object, @shipping, @address, @address_present, @balance, @cash_balance, @cash_balance_present, @currency, @currency_present, @delinquent, @delinquent_present, @discount, @discount_present, @invoice_credit_balance, @invoice_prefix, @invoice_prefix_present, @invoice_settings, @metadata, @name, @name_present, @next_invoice_sequence, @phone, @phone_present, @preferred_locales, @preferred_locales_present, @sources, @subscriptions, @tax, @tax_exempt, @tax_exempt_present, @tax_ids, @test_clock, @test_clock_present)
  end
end
