#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.  Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
  class Customer
    include NASON::Serializable

    # Required properties
    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # Optional properties
    # The customer's address.
    @[NASON::Field(key: "address", type: Address? | Null, nillable: true)]
    property address : Address? | Null

    # Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
    @[NASON::Field(key: "balance", type: Int64?, nillable: true)]
    property balance : Int64?

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
    @[NASON::Field(key: "currency", type: String? | Null, nillable: true)]
    property currency : String? | Null

    # ID of the default payment source for the customer.  If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
    @[NASON::Field(key: "default_source", type: String | AlipayAccount | BankAccount | BitcoinReceiver | Card | Source? | Null, nillable: true)]
    property default_source : String | AlipayAccount | BankAccount | BitcoinReceiver | Card | Source? | Null

    # When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.  If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
    @[NASON::Field(key: "delinquent", type: Bool? | Null, nillable: true)]
    property delinquent : Bool? | Null

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[NASON::Field(key: "description", type: String? | Null, nillable: true)]
    property description : String? | Null

    # Describes the current discount active on the customer, if there is one.
    @[NASON::Field(key: "discount", type: Discount? | Null, nillable: true)]
    property discount : Discount? | Null

    # The customer's email address.
    @[NASON::Field(key: "email", type: String? | Null, nillable: true)]
    property email : String? | Null

    # The prefix for the customer used to generate unique invoice numbers.
    @[NASON::Field(key: "invoice_prefix", type: String? | Null, nillable: true)]
    property invoice_prefix : String? | Null

    @[NASON::Field(key: "invoice_settings", type: InvoiceSettingCustomerSetting?, nillable: true)]
    property invoice_settings : InvoiceSettingCustomerSetting?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    @[NASON::Field(key: "metadata", type: Hash(String, String)?, nillable: true)]
    property metadata : Hash(String, String)?

    # The customer's full name or business name.
    @[NASON::Field(key: "name", type: String? | Null, nillable: true)]
    property name : String? | Null

    # The suffix of the customer's next invoice number, e.g., 0001.
    @[NASON::Field(key: "next_invoice_sequence", type: Int64?, nillable: true)]
    property next_invoice_sequence : Int64?

    # The customer's phone number.
    @[NASON::Field(key: "phone", type: String? | Null, nillable: true)]
    property phone : String? | Null

    # The customer's preferred locales (languages), ordered by preference.
    @[NASON::Field(key: "preferred_locales", type: Array(String)? | Null, nillable: true)]
    property preferred_locales : Array(String)? | Null

    # Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
    @[NASON::Field(key: "shipping", type: Shipping? | Null, nillable: true)]
    property shipping : Shipping? | Null

    @[NASON::Field(key: "sources", type: ApmsSourcesSourceList1?, nillable: true)]
    property sources : ApmsSourcesSourceList1?

    @[NASON::Field(key: "subscriptions", type: SubscriptionList1?, nillable: true)]
    property subscriptions : SubscriptionList1?

    @[NASON::Field(key: "tax", type: CustomerTax?, nillable: true)]
    property tax : CustomerTax?

    # Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **\"Reverse charge\"**.
    @[NASON::Field(key: "tax_exempt", type: String? | Null, nillable: true)]
    property tax_exempt : String? | Null

    @[NASON::Field(key: "tax_ids", type: TaxIDsList1?, nillable: true)]
    property tax_ids : TaxIDsList1?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @created : Int64, @id : String, @livemode : Bool, @object : String, @address : Address? | Null = nil, @balance : Int64? = nil, @currency : String? | Null = nil, @default_source : String | AlipayAccount | BankAccount | BitcoinReceiver | Card | Source? | Null = nil, @delinquent : Bool? | Null = nil, @description : String? | Null = nil, @discount : Discount? | Null = nil, @email : String? | Null = nil, @invoice_prefix : String? | Null = nil, @invoice_settings : InvoiceSettingCustomerSetting? = nil, @metadata : Hash(String, String)? = nil, @name : String? | Null = nil, @next_invoice_sequence : Int64? = nil, @phone : String? | Null = nil, @preferred_locales : Array(String)? | Null = nil, @shipping : Shipping? | Null = nil, @sources : ApmsSourcesSourceList1? = nil, @subscriptions : SubscriptionList1? = nil, @tax : CustomerTax? = nil, @tax_exempt : String? | Null = nil, @tax_ids : TaxIDsList1? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@currency.nil? && !@currency.null? && @currency.to_s.size > 5000
        invalid_properties.push("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && !@description.null? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if !@email.nil? && !@email.null? && @email.to_s.size > 5000
        invalid_properties.push("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@invoice_prefix.nil? && !@invoice_prefix.null? && @invoice_prefix.to_s.size > 5000
        invalid_properties.push("invalid value for \"invoice_prefix\", the character length must be smaller than or equal to 5000.")
      end

      if !@name.nil? && !@name.null? && @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      if !@phone.nil? && !@phone.null? && @phone.to_s.size > 5000
        invalid_properties.push("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@currency.nil? && !@currency.null? && @currency.to_s.size > 5000
      return false if !@description.nil? && !@description.null? && @description.to_s.size > 5000
      return false if !@email.nil? && !@email.null? && @email.to_s.size > 5000
      return false if @id.to_s.size > 5000
      return false if !@invoice_prefix.nil? && !@invoice_prefix.null? && @invoice_prefix.to_s.size > 5000
      return false if !@name.nil? && !@name.null? && @name.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["customer"])
      return false unless object_validator.valid?(@object)
      return false if !@phone.nil? && !@phone.null? && @phone.to_s.size > 5000
      tax_exempt_validator = EnumAttributeValidator.new("String", ["exempt", "none", "reverse"])
      return false unless tax_exempt_validator.valid?(@tax_exempt)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if !currency.nil? && !@currency.null? && currency.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"currency\", the character length must be smaller than or equal to 5000.")
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && !@description.null? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && !@email.null? && email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"email\", the character length must be smaller than or equal to 5000.")
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_prefix Value to be assigned
    def invoice_prefix=(invoice_prefix)
      if !invoice_prefix.nil? && !@invoice_prefix.null? && invoice_prefix.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice_prefix\", the character length must be smaller than or equal to 5000.")
      end

      @invoice_prefix = invoice_prefix
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && !@name.null? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["customer"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && !@phone.null? && phone.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      @phone = phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_exempt Object to be assigned
    def tax_exempt=(tax_exempt)
      validator = EnumAttributeValidator.new("String", ["exempt", "none", "reverse"])
      unless validator.valid?(tax_exempt)
        raise ArgumentError.new("invalid value for \"tax_exempt\", must be one of #{validator.allowable_values}.")
      end
      @tax_exempt = tax_exempt
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        address == o.address &&
        balance == o.balance &&
        created == o.created &&
        currency == o.currency &&
        default_source == o.default_source &&
        delinquent == o.delinquent &&
        description == o.description &&
        discount == o.discount &&
        email == o.email &&
        id == o.id &&
        invoice_prefix == o.invoice_prefix &&
        invoice_settings == o.invoice_settings &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        name == o.name &&
        next_invoice_sequence == o.next_invoice_sequence &&
        object == o.object &&
        phone == o.phone &&
        preferred_locales == o.preferred_locales &&
        shipping == o.shipping &&
        sources == o.sources &&
        subscriptions == o.subscriptions &&
        tax == o.tax &&
        tax_exempt == o.tax_exempt &&
        tax_ids == o.tax_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address, balance, created, currency, default_source, delinquent, description, discount, email, id, invoice_prefix, invoice_settings, livemode, metadata, name, next_invoice_sequence, object, phone, preferred_locales, shipping, sources, subscriptions, tax, tax_exempt, tax_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
