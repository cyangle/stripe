#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./issuing_cardholder"
require "./issuing_cardholder_address"
require "./issuing_cardholder_authorization_controls"
require "./issuing_cardholder_company"
require "./issuing_cardholder_individual"
require "./issuing_cardholder_requirements"

module Stripe
  # The cardholder to whom this authorization belongs.
  class IssuingAuthorizationCardholder
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "billing", type: Stripe::IssuingCardholderAddress?, default: nil, required: true, nullable: false, emit_null: false)]
    property billing : Stripe::IssuingCardholderAddress? = nil

    @[JSON::Field(key: "company", type: Stripe::IssuingCardholderCompany?, default: nil, required: true, nullable: false, emit_null: false)]
    property company : Stripe::IssuingCardholderCompany? = nil

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[JSON::Field(key: "created", type: Int64?, default: nil, required: true, nullable: false, emit_null: false)]
    property created : Int64? = nil

    # The cardholder's email address.
    @[JSON::Field(key: "email", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property email : String? = nil
    MAX_LENGTH_FOR_EMAIL = 5000

    # Unique identifier for the object.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property id : String? = nil
    MAX_LENGTH_FOR_ID = 5000

    @[JSON::Field(key: "individual", type: Stripe::IssuingCardholderIndividual?, default: nil, required: true, nullable: false, emit_null: false)]
    property individual : Stripe::IssuingCardholderIndividual? = nil

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[JSON::Field(key: "livemode", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    property livemode : Bool? = nil

    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: false, emit_null: false)]
    property metadata : Hash(String, String)? = nil

    # The cardholder's name. This will be printed on cards issued to them.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property name : String? = nil
    MAX_LENGTH_FOR_NAME = 5000

    # String representing the object's type. Objects of the same type share the same value.
    @[JSON::Field(key: "object", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property object : String? = nil
    ERROR_MESSAGE_FOR_OBJECT = "invalid value for \"object\", must be one of [issuing.cardholder]."
    VALID_VALUES_FOR_OBJECT  = String.static_array("issuing.cardholder")

    # The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
    @[JSON::Field(key: "phone_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    property phone_number : String? = nil
    MAX_LENGTH_FOR_PHONE_NUMBER = 5000

    # The cardholderâ€™s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
    @[JSON::Field(key: "preferred_locales", type: Array(String)?, default: nil, required: true, nullable: true, emit_null: true)]
    property preferred_locales : Array(String)? = nil
    ERROR_MESSAGE_FOR_PREFERRED_LOCALES = "invalid value for \"preferred_locales\", must be one of [de, en, es, fr, it]."
    VALID_VALUES_FOR_PREFERRED_LOCALES  = String.static_array("de", "en", "es", "fr", "it")

    @[JSON::Field(key: "requirements", type: Stripe::IssuingCardholderRequirements?, default: nil, required: true, nullable: false, emit_null: false)]
    property requirements : Stripe::IssuingCardholderRequirements? = nil

    @[JSON::Field(key: "spending_controls", type: Stripe::IssuingCardholderAuthorizationControls?, default: nil, required: true, nullable: false, emit_null: false)]
    property spending_controls : Stripe::IssuingCardholderAuthorizationControls? = nil

    # Specifies whether to permit authorizations on this cardholder's cards.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [active, blocked, inactive]."
    VALID_VALUES_FOR_STATUS  = String.static_array("active", "blocked", "inactive")

    # One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    property _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [company, individual]."
    VALID_VALUES_FOR__TYPE  = String.static_array("company", "individual")

    # End of Required Properties
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Stripe::IssuingCardholder,
        String,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @billing : Stripe::IssuingCardholderAddress? = nil,
      @company : Stripe::IssuingCardholderCompany? = nil,
      @created : Int64? = nil,
      @email : String? = nil,
      @id : String? = nil,
      @individual : Stripe::IssuingCardholderIndividual? = nil,
      @livemode : Bool? = nil,
      @metadata : Hash(String, String)? = nil,
      @name : String? = nil,
      @object : String? = nil,
      @phone_number : String? = nil,
      @preferred_locales : Array(String)? = nil,
      @requirements : Stripe::IssuingCardholderRequirements? = nil,
      @spending_controls : Stripe::IssuingCardholderAuthorizationControls? = nil,
      @status : String? = nil,
      @_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      _any_of_found = false
      json_string : String = self.to_json
      _any_of_found = self.class.openapi_any_of.any? do |_class|
        _any_of = begin
          _class.from_json(json_string)
        rescue
          nil
        end

        !_any_of.nil? && _any_of.not_nil!.valid?
      end
      return false if !_any_of_found

      true
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@billing, @company, @created, @email, @id, @individual, @livemode, @metadata, @name, @object, @phone_number, @preferred_locales, @requirements, @spending_controls, @status, @_type)
  end
end
