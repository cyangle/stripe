#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  # A PaymentIntent guides you through the process of collecting a payment from your customer. We recommend that you create exactly one PaymentIntent for each order or customer session in your system. You can reference the PaymentIntent later to see the history of payment attempts for a particular session.  A PaymentIntent transitions through [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses) throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and ultimately creates at most one successful charge.  Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
  class PaymentIntent
    include NASON::Serializable

    # Required properties
    # Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    @[NASON::Field(key: "amount", type: Int64)]
    property amount : Int64

    # Controls when the funds will be captured from the customer's account.
    @[NASON::Field(key: "capture_method", type: String)]
    property capture_method : String

    @[NASON::Field(key: "confirmation_method", type: String)]
    property confirmation_method : String

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "created", type: Int64)]
    property created : Int64

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    @[NASON::Field(key: "currency", type: String)]
    property currency : String

    # Unique identifier for the object.
    @[NASON::Field(key: "id", type: String)]
    property id : String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    @[NASON::Field(key: "livemode", type: Bool)]
    property livemode : Bool

    # String representing the object's type. Objects of the same type share the same value.
    @[NASON::Field(key: "object", type: String)]
    property object : String

    # The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
    @[NASON::Field(key: "payment_method_types", type: Array(String))]
    property payment_method_types : Array(String)

    # Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
    @[NASON::Field(key: "status", type: String)]
    property status : String

    # Optional properties
    # Amount that can be captured from this PaymentIntent.
    @[NASON::Field(key: "amount_capturable", type: Int64?, nillable: true)]
    property amount_capturable : Int64?

    # Amount that was collected by this PaymentIntent.
    @[NASON::Field(key: "amount_received", type: Int64?, nillable: true)]
    property amount_received : Int64?

    # ID of the Connect application that created the PaymentIntent.
    @[NASON::Field(key: "application", type: String | Application? | Null, nillable: true)]
    property application : String | Application? | Null

    # The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    @[NASON::Field(key: "application_fee_amount", type: Int64? | Null, nillable: true)]
    property application_fee_amount : Int64? | Null

    # Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)
    @[NASON::Field(key: "automatic_payment_methods", type: PaymentFlowsAutomaticPaymentMethodsPaymentIntent? | Null, nillable: true)]
    property automatic_payment_methods : PaymentFlowsAutomaticPaymentMethodsPaymentIntent? | Null

    # Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
    @[NASON::Field(key: "canceled_at", type: Int64? | Null, nillable: true)]
    property canceled_at : Int64? | Null

    # Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
    @[NASON::Field(key: "cancellation_reason", type: String? | Null, nillable: true)]
    property cancellation_reason : String? | Null

    @[NASON::Field(key: "charges", type: PaymentFlowsPaymentIntentResourceChargeList?, nillable: true)]
    property charges : PaymentFlowsPaymentIntentResourceChargeList?

    # The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.   The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?integration=elements) and learn about how `client_secret` should be handled.
    @[NASON::Field(key: "client_secret", type: String? | Null, nillable: true)]
    property client_secret : String? | Null

    # ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
    @[NASON::Field(key: "customer", type: String | Customer | Nil | Null, nillable: true)]
    property customer : String | Customer | Nil | Null

    # An arbitrary string attached to the object. Often useful for displaying to users.
    @[NASON::Field(key: "description", type: String? | Null, nillable: true)]
    property description : String? | Null

    # ID of the invoice that created this PaymentIntent, if it exists.
    @[NASON::Field(key: "invoice", type: String | Invoice? | Null, nillable: true)]
    property invoice : String | Invoice? | Null

    # The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
    @[NASON::Field(key: "last_payment_error", type: ApiErrors? | Null, nillable: true)]
    property last_payment_error : ApiErrors? | Null

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
    @[NASON::Field(key: "metadata", type: Hash(String, String)?, nillable: true)]
    property metadata : Hash(String, String)?

    # If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
    @[NASON::Field(key: "next_action", type: PaymentIntentNextAction? | Null, nillable: true)]
    property next_action : PaymentIntentNextAction? | Null

    # The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    @[NASON::Field(key: "on_behalf_of", type: String | Account? | Null, nillable: true)]
    property on_behalf_of : String | Account? | Null

    # ID of the payment method used in this PaymentIntent.
    @[NASON::Field(key: "payment_method", type: String | PaymentMethod? | Null, nillable: true)]
    property payment_method : String | PaymentMethod? | Null

    # Payment-method-specific configuration for this PaymentIntent.
    @[NASON::Field(key: "payment_method_options", type: PaymentIntentPaymentMethodOptions? | Null, nillable: true)]
    property payment_method_options : PaymentIntentPaymentMethodOptions? | Null

    # If present, this property tells you about the processing state of the payment.
    @[NASON::Field(key: "processing", type: PaymentIntentProcessing? | Null, nillable: true)]
    property processing : PaymentIntentProcessing? | Null

    # Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    @[NASON::Field(key: "receipt_email", type: String? | Null, nillable: true)]
    property receipt_email : String? | Null

    # ID of the review associated with this PaymentIntent, if any.
    @[NASON::Field(key: "review", type: String | Review? | Null, nillable: true)]
    property review : String | Review? | Null

    # Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    @[NASON::Field(key: "setup_future_usage", type: String? | Null, nillable: true)]
    property setup_future_usage : String? | Null

    # Shipping information for this PaymentIntent.
    @[NASON::Field(key: "shipping", type: Shipping? | Null, nillable: true)]
    property shipping : Shipping? | Null

    # For non-card charges, you can use this value as the complete description that appears on your customersâ statements. Must contain at least one letter, maximum 22 characters.
    @[NASON::Field(key: "statement_descriptor", type: String? | Null, nillable: true)]
    property statement_descriptor : String? | Null

    # Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâs set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    @[NASON::Field(key: "statement_descriptor_suffix", type: String? | Null, nillable: true)]
    property statement_descriptor_suffix : String? | Null

    # The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    @[NASON::Field(key: "transfer_data", type: TransferData? | Null, nillable: true)]
    property transfer_data : TransferData? | Null

    # A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    @[NASON::Field(key: "transfer_group", type: String? | Null, nillable: true)]
    property transfer_group : String? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @amount : Int64, @capture_method : String, @confirmation_method : String, @created : Int64, @currency : String, @id : String, @livemode : Bool, @object : String, @payment_method_types : Array(String), @status : String, @amount_capturable : Int64? = nil, @amount_received : Int64? = nil, @application : String | Application? | Null = nil, @application_fee_amount : Int64? | Null = nil, @automatic_payment_methods : PaymentFlowsAutomaticPaymentMethodsPaymentIntent? | Null = nil, @canceled_at : Int64? | Null = nil, @cancellation_reason : String? | Null = nil, @charges : PaymentFlowsPaymentIntentResourceChargeList? = nil, @client_secret : String? | Null = nil, @customer : String | Customer | Nil | Null = nil, @description : String? | Null = nil, @invoice : String | Invoice? | Null = nil, @last_payment_error : ApiErrors? | Null = nil, @metadata : Hash(String, String)? = nil, @next_action : PaymentIntentNextAction? | Null = nil, @on_behalf_of : String | Account? | Null = nil, @payment_method : String | PaymentMethod? | Null = nil, @payment_method_options : PaymentIntentPaymentMethodOptions? | Null = nil, @processing : PaymentIntentProcessing? | Null = nil, @receipt_email : String? | Null = nil, @review : String | Review? | Null = nil, @setup_future_usage : String? | Null = nil, @shipping : Shipping? | Null = nil, @statement_descriptor : String? | Null = nil, @statement_descriptor_suffix : String? | Null = nil, @transfer_data : TransferData? | Null = nil, @transfer_group : String? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@client_secret.nil? && !@client_secret.null? && @client_secret.to_s.size > 5000
        invalid_properties.push("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      if !@description.nil? && !@description.null? && @description.to_s.size > 5000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      if @id.to_s.size > 5000
        invalid_properties.push("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      if !@receipt_email.nil? && !@receipt_email.null? && @receipt_email.to_s.size > 5000
        invalid_properties.push("invalid value for \"receipt_email\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor.nil? && !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      if !@statement_descriptor_suffix.nil? && !@statement_descriptor_suffix.null? && @statement_descriptor_suffix.to_s.size > 5000
        invalid_properties.push("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 5000.")
      end

      if !@transfer_group.nil? && !@transfer_group.null? && @transfer_group.to_s.size > 5000
        invalid_properties.push("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      cancellation_reason_validator = EnumAttributeValidator.new("String", ["abandoned", "automatic", "duplicate", "failed_invoice", "fraudulent", "requested_by_customer", "void_invoice"])
      return false unless cancellation_reason_validator.valid?(@cancellation_reason)
      capture_method_validator = EnumAttributeValidator.new("String", ["automatic", "manual"])
      return false unless capture_method_validator.valid?(@capture_method)
      return false if !@client_secret.nil? && !@client_secret.null? && @client_secret.to_s.size > 5000
      confirmation_method_validator = EnumAttributeValidator.new("String", ["automatic", "manual"])
      return false unless confirmation_method_validator.valid?(@confirmation_method)
      return false if !@description.nil? && !@description.null? && @description.to_s.size > 5000
      return false if @id.to_s.size > 5000
      object_validator = EnumAttributeValidator.new("String", ["payment_intent"])
      return false unless object_validator.valid?(@object)
      return false if !@receipt_email.nil? && !@receipt_email.null? && @receipt_email.to_s.size > 5000
      setup_future_usage_validator = EnumAttributeValidator.new("String", ["off_session", "on_session"])
      return false unless setup_future_usage_validator.valid?(@setup_future_usage)
      return false if !@statement_descriptor.nil? && !@statement_descriptor.null? && @statement_descriptor.to_s.size > 5000
      return false if !@statement_descriptor_suffix.nil? && !@statement_descriptor_suffix.null? && @statement_descriptor_suffix.to_s.size > 5000
      status_validator = EnumAttributeValidator.new("String", ["canceled", "processing", "requires_action", "requires_capture", "requires_confirmation", "requires_payment_method", "succeeded"])
      return false unless status_validator.valid?(@status)
      return false if !@transfer_group.nil? && !@transfer_group.null? && @transfer_group.to_s.size > 5000
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellation_reason Object to be assigned
    def cancellation_reason=(cancellation_reason)
      validator = EnumAttributeValidator.new("String", ["abandoned", "automatic", "duplicate", "failed_invoice", "fraudulent", "requested_by_customer", "void_invoice"])
      unless validator.valid?(cancellation_reason)
        raise ArgumentError.new("invalid value for \"cancellation_reason\", must be one of #{validator.allowable_values}.")
      end
      @cancellation_reason = cancellation_reason
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capture_method Object to be assigned
    def capture_method=(capture_method)
      validator = EnumAttributeValidator.new("String", ["automatic", "manual"])
      unless validator.valid?(capture_method)
        raise ArgumentError.new("invalid value for \"capture_method\", must be one of #{validator.allowable_values}.")
      end
      @capture_method = capture_method
    end

    # Custom attribute writer method with validation
    # @param [Object] client_secret Value to be assigned
    def client_secret=(client_secret)
      if !client_secret.nil? && !@client_secret.null? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\", the character length must be smaller than or equal to 5000.")
      end

      @client_secret = client_secret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confirmation_method Object to be assigned
    def confirmation_method=(confirmation_method)
      validator = EnumAttributeValidator.new("String", ["automatic", "manual"])
      unless validator.valid?(confirmation_method)
        raise ArgumentError.new("invalid value for \"confirmation_method\", must be one of #{validator.allowable_values}.")
      end
      @confirmation_method = confirmation_method
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && !@description.null? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 5000.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\", the character length must be smaller than or equal to 5000.")
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["payment_intent"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_email Value to be assigned
    def receipt_email=(receipt_email)
      if !receipt_email.nil? && !@receipt_email.null? && receipt_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_email\", the character length must be smaller than or equal to 5000.")
      end

      @receipt_email = receipt_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] setup_future_usage Object to be assigned
    def setup_future_usage=(setup_future_usage)
      validator = EnumAttributeValidator.new("String", ["off_session", "on_session"])
      unless validator.valid?(setup_future_usage)
        raise ArgumentError.new("invalid value for \"setup_future_usage\", must be one of #{validator.allowable_values}.")
      end
      @setup_future_usage = setup_future_usage
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor Value to be assigned
    def statement_descriptor=(statement_descriptor)
      if !statement_descriptor.nil? && !@statement_descriptor.null? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor = statement_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] statement_descriptor_suffix Value to be assigned
    def statement_descriptor_suffix=(statement_descriptor_suffix)
      if !statement_descriptor_suffix.nil? && !@statement_descriptor_suffix.null? && statement_descriptor_suffix.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\", the character length must be smaller than or equal to 5000.")
      end

      @statement_descriptor_suffix = statement_descriptor_suffix
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["canceled", "processing", "requires_action", "requires_capture", "requires_confirmation", "requires_payment_method", "succeeded"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] transfer_group Value to be assigned
    def transfer_group=(transfer_group)
      if !transfer_group.nil? && !@transfer_group.null? && transfer_group.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer_group\", the character length must be smaller than or equal to 5000.")
      end

      @transfer_group = transfer_group
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        amount == o.amount &&
        amount_capturable == o.amount_capturable &&
        amount_received == o.amount_received &&
        application == o.application &&
        application_fee_amount == o.application_fee_amount &&
        automatic_payment_methods == o.automatic_payment_methods &&
        canceled_at == o.canceled_at &&
        cancellation_reason == o.cancellation_reason &&
        capture_method == o.capture_method &&
        charges == o.charges &&
        client_secret == o.client_secret &&
        confirmation_method == o.confirmation_method &&
        created == o.created &&
        currency == o.currency &&
        customer == o.customer &&
        description == o.description &&
        id == o.id &&
        invoice == o.invoice &&
        last_payment_error == o.last_payment_error &&
        livemode == o.livemode &&
        metadata == o.metadata &&
        next_action == o.next_action &&
        object == o.object &&
        on_behalf_of == o.on_behalf_of &&
        payment_method == o.payment_method &&
        payment_method_options == o.payment_method_options &&
        payment_method_types == o.payment_method_types &&
        processing == o.processing &&
        receipt_email == o.receipt_email &&
        review == o.review &&
        setup_future_usage == o.setup_future_usage &&
        shipping == o.shipping &&
        statement_descriptor == o.statement_descriptor &&
        statement_descriptor_suffix == o.statement_descriptor_suffix &&
        status == o.status &&
        transfer_data == o.transfer_data &&
        transfer_group == o.transfer_group
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, amount_capturable, amount_received, application, application_fee_amount, automatic_payment_methods, canceled_at, cancellation_reason, capture_method, charges, client_secret, confirmation_method, created, currency, customer, description, id, invoice, last_payment_error, livemode, metadata, next_action, object, on_behalf_of, payment_method, payment_method_options, payment_method_types, processing, receipt_email, review, setup_future_usage, shipping, statement_descriptor, statement_descriptor_suffix, status, transfer_data, transfer_group].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
