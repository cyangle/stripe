#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "nason"
require "time"
require "log"

module Stripe
  class LegalEntityCompany
    include NASON::Serializable

    # Optional properties
    @[NASON::Field(key: "address", type: Address?, nillable: true)]
    property address : Address?

    # The Kana variation of the company's primary address (Japan only).
    @[NASON::Field(key: "address_kana", type: LegalEntityJapanAddress? | Null, nillable: true)]
    property address_kana : LegalEntityJapanAddress? | Null

    # The Kanji variation of the company's primary address (Japan only).
    @[NASON::Field(key: "address_kanji", type: LegalEntityJapanAddress? | Null, nillable: true)]
    property address_kanji : LegalEntityJapanAddress? | Null

    # Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
    @[NASON::Field(key: "directors_provided", type: Bool?, nillable: true)]
    property directors_provided : Bool?

    # Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
    @[NASON::Field(key: "executives_provided", type: Bool?, nillable: true)]
    property executives_provided : Bool?

    # The company's legal name.
    @[NASON::Field(key: "name", type: String? | Null, nillable: true)]
    property name : String? | Null

    # The Kana variation of the company's legal name (Japan only).
    @[NASON::Field(key: "name_kana", type: String? | Null, nillable: true)]
    property name_kana : String? | Null

    # The Kanji variation of the company's legal name (Japan only).
    @[NASON::Field(key: "name_kanji", type: String? | Null, nillable: true)]
    property name_kanji : String? | Null

    # Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
    @[NASON::Field(key: "owners_provided", type: Bool?, nillable: true)]
    property owners_provided : Bool?

    # This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
    @[NASON::Field(key: "ownership_declaration", type: LegalEntityUboDeclaration? | Null, nillable: true)]
    property ownership_declaration : LegalEntityUboDeclaration? | Null

    # The company's phone number (used for verification).
    @[NASON::Field(key: "phone", type: String? | Null, nillable: true)]
    property phone : String? | Null

    # The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
    @[NASON::Field(key: "structure", type: String?, nillable: true)]
    property structure : String?

    # Whether the company's business ID number was provided.
    @[NASON::Field(key: "tax_id_provided", type: Bool?, nillable: true)]
    property tax_id_provided : Bool?

    # The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
    @[NASON::Field(key: "tax_id_registrar", type: String?, nillable: true)]
    property tax_id_registrar : String?

    # Whether the company's business VAT number was provided.
    @[NASON::Field(key: "vat_id_provided", type: Bool?, nillable: true)]
    property vat_id_provided : Bool?

    # Information on the verification state of the company.
    @[NASON::Field(key: "verification", type: LegalEntityCompanyVerification? | Null, nillable: true)]
    property verification : LegalEntityCompanyVerification? | Null

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String | Int64 | Float64)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        value.nil? || value.null? || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @address : Address? = nil, @address_kana : LegalEntityJapanAddress? | Null = nil, @address_kanji : LegalEntityJapanAddress? | Null = nil, @directors_provided : Bool? = nil, @executives_provided : Bool? = nil, @name : String? | Null = nil, @name_kana : String? | Null = nil, @name_kanji : String? | Null = nil, @owners_provided : Bool? = nil, @ownership_declaration : LegalEntityUboDeclaration? | Null = nil, @phone : String? | Null = nil, @structure : String? = nil, @tax_id_provided : Bool? = nil, @tax_id_registrar : String? = nil, @vat_id_provided : Bool? = nil, @verification : LegalEntityCompanyVerification? | Null = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@name.nil? && !@name.null? && @name.to_s.size > 5000
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      if !@name_kana.nil? && !@name_kana.null? && @name_kana.to_s.size > 5000
        invalid_properties.push("invalid value for \"name_kana\", the character length must be smaller than or equal to 5000.")
      end

      if !@name_kanji.nil? && !@name_kanji.null? && @name_kanji.to_s.size > 5000
        invalid_properties.push("invalid value for \"name_kanji\", the character length must be smaller than or equal to 5000.")
      end

      if !@phone.nil? && !@phone.null? && @phone.to_s.size > 5000
        invalid_properties.push("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      if !@tax_id_registrar.nil? && @tax_id_registrar.to_s.size > 5000
        invalid_properties.push("invalid value for \"tax_id_registrar\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && !@name.null? && @name.to_s.size > 5000
      return false if !@name_kana.nil? && !@name_kana.null? && @name_kana.to_s.size > 5000
      return false if !@name_kanji.nil? && !@name_kanji.null? && @name_kanji.to_s.size > 5000
      return false if !@phone.nil? && !@phone.null? && @phone.to_s.size > 5000
      structure_validator = EnumAttributeValidator.new("String", ["free_zone_establishment", "free_zone_llc", "government_instrumentality", "governmental_unit", "incorporated_non_profit", "limited_liability_partnership", "llc", "multi_member_llc", "private_company", "private_corporation", "private_partnership", "public_company", "public_corporation", "public_partnership", "single_member_llc", "sole_establishment", "sole_proprietorship", "tax_exempt_government_instrumentality", "unincorporated_association", "unincorporated_non_profit"])
      return false unless structure_validator.valid?(@structure)
      return false if !@tax_id_registrar.nil? && @tax_id_registrar.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && !@name.null? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 5000.")
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] name_kana Value to be assigned
    def name_kana=(name_kana)
      if !name_kana.nil? && !@name_kana.null? && name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name_kana\", the character length must be smaller than or equal to 5000.")
      end

      @name_kana = name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] name_kanji Value to be assigned
    def name_kanji=(name_kanji)
      if !name_kanji.nil? && !@name_kanji.null? && name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name_kanji\", the character length must be smaller than or equal to 5000.")
      end

      @name_kanji = name_kanji
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && !@phone.null? && phone.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"phone\", the character length must be smaller than or equal to 5000.")
      end

      @phone = phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] structure Object to be assigned
    def structure=(structure)
      validator = EnumAttributeValidator.new("String", ["free_zone_establishment", "free_zone_llc", "government_instrumentality", "governmental_unit", "incorporated_non_profit", "limited_liability_partnership", "llc", "multi_member_llc", "private_company", "private_corporation", "private_partnership", "public_company", "public_corporation", "public_partnership", "single_member_llc", "sole_establishment", "sole_proprietorship", "tax_exempt_government_instrumentality", "unincorporated_association", "unincorporated_non_profit"])
      unless validator.valid?(structure)
        raise ArgumentError.new("invalid value for \"structure\", must be one of #{validator.allowable_values}.")
      end
      @structure = structure
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_id_registrar Value to be assigned
    def tax_id_registrar=(tax_id_registrar)
      if !tax_id_registrar.nil? && tax_id_registrar.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tax_id_registrar\", the character length must be smaller than or equal to 5000.")
      end

      @tax_id_registrar = tax_id_registrar
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        address == o.address &&
        address_kana == o.address_kana &&
        address_kanji == o.address_kanji &&
        directors_provided == o.directors_provided &&
        executives_provided == o.executives_provided &&
        name == o.name &&
        name_kana == o.name_kana &&
        name_kanji == o.name_kanji &&
        owners_provided == o.owners_provided &&
        ownership_declaration == o.ownership_declaration &&
        phone == o.phone &&
        structure == o.structure &&
        tax_id_provided == o.tax_id_provided &&
        tax_id_registrar == o.tax_id_registrar &&
        vat_id_provided == o.vat_id_provided &&
        verification == o.verification
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address, address_kana, address_kanji, directors_provided, executives_provided, name, name_kana, name_kanji, owners_provided, ownership_declaration, phone, structure, tax_id_provided, tax_id_registrar, vat_id_provided, verification].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Stripe.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
