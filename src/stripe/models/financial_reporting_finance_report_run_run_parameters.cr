#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module Stripe
  #
  @[JSON::Serializable::Options(emit_nulls: true)]
  class FinancialReportingFinanceReportRunRunParameters
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "columns", type: Array(String)?, presence: true, ignore_serialize: columns.nil? && !columns_present?)]
    property columns : Array(String)?

    @[JSON::Field(ignore: true)]
    property? columns_present : Bool = false

    # Connected account ID by which to filter the report run.
    @[JSON::Field(key: "connected_account", type: String?, presence: true, ignore_serialize: connected_account.nil? && !connected_account_present?)]
    getter connected_account : String?

    @[JSON::Field(ignore: true)]
    property? connected_account_present : Bool = false

    # Currency of objects to be included in the report run.
    @[JSON::Field(key: "currency", type: String?, presence: true, ignore_serialize: currency.nil? && !currency_present?)]
    property currency : String?

    @[JSON::Field(ignore: true)]
    property? currency_present : Bool = false

    # Ending timestamp of data to be included in the report run (exclusive).
    @[JSON::Field(key: "interval_end", type: Int64?, presence: true, ignore_serialize: interval_end.nil? && !interval_end_present?)]
    property interval_end : Int64?

    @[JSON::Field(ignore: true)]
    property? interval_end_present : Bool = false

    # Starting timestamp of data to be included in the report run.
    @[JSON::Field(key: "interval_start", type: Int64?, presence: true, ignore_serialize: interval_start.nil? && !interval_start_present?)]
    property interval_start : Int64?

    @[JSON::Field(ignore: true)]
    property? interval_start_present : Bool = false

    # Payout ID by which to filter the report run.
    @[JSON::Field(key: "payout", type: String?, presence: true, ignore_serialize: payout.nil? && !payout_present?)]
    getter payout : String?

    @[JSON::Field(ignore: true)]
    property? payout_present : Bool = false

    # Category of balance transactions to be included in the report run.
    @[JSON::Field(key: "reporting_category", type: String?, presence: true, ignore_serialize: reporting_category.nil? && !reporting_category_present?)]
    getter reporting_category : String?

    @[JSON::Field(ignore: true)]
    property? reporting_category_present : Bool = false

    # Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.
    @[JSON::Field(key: "timezone", type: String?, presence: true, ignore_serialize: timezone.nil? && !timezone_present?)]
    getter timezone : String?

    @[JSON::Field(ignore: true)]
    property? timezone_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @columns : Array(String)? = nil, @connected_account : String? = nil, @currency : String? = nil, @interval_end : Int64? = nil, @interval_start : Int64? = nil, @payout : String? = nil, @reporting_category : String? = nil, @timezone : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      if !@connected_account.nil? && @connected_account.to_s.size > 5000
        invalid_properties.push("invalid value for \"connected_account\", the character length must be smaller than or equal to 5000.")
      end

      if !@payout.nil? && @payout.to_s.size > 5000
        invalid_properties.push("invalid value for \"payout\", the character length must be smaller than or equal to 5000.")
      end

      if !@reporting_category.nil? && @reporting_category.to_s.size > 5000
        invalid_properties.push("invalid value for \"reporting_category\", the character length must be smaller than or equal to 5000.")
      end

      if !@timezone.nil? && @timezone.to_s.size > 5000
        invalid_properties.push("invalid value for \"timezone\", the character length must be smaller than or equal to 5000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@connected_account.nil? && @connected_account.to_s.size > 5000
      return false if !@payout.nil? && @payout.to_s.size > 5000
      return false if !@reporting_category.nil? && @reporting_category.to_s.size > 5000
      return false if !@timezone.nil? && @timezone.to_s.size > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] connected_account Value to be assigned
    def connected_account=(connected_account)
      if !connected_account.nil? && connected_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"connected_account\", the character length must be smaller than or equal to 5000.")
      end

      @connected_account = connected_account
    end

    # Custom attribute writer method with validation
    # @param [Object] payout Value to be assigned
    def payout=(payout)
      if !payout.nil? && payout.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payout\", the character length must be smaller than or equal to 5000.")
      end

      @payout = payout
    end

    # Custom attribute writer method with validation
    # @param [Object] reporting_category Value to be assigned
    def reporting_category=(reporting_category)
      if !reporting_category.nil? && reporting_category.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reporting_category\", the character length must be smaller than or equal to 5000.")
      end

      @reporting_category = reporting_category
    end

    # Custom attribute writer method with validation
    # @param [Object] timezone Value to be assigned
    def timezone=(timezone)
      if !timezone.nil? && timezone.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"timezone\", the character length must be smaller than or equal to 5000.")
      end

      @timezone = timezone
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        columns == o.columns &&
        connected_account == o.connected_account &&
        currency == o.currency &&
        interval_end == o.interval_end &&
        interval_start == o.interval_start &&
        payout == o.payout &&
        reporting_category == o.reporting_category &&
        timezone == o.timezone
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@columns, @connected_account, @currency, @interval_end, @interval_start, @payout, @reporting_category, @timezone)
  end
end
