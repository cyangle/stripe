#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/add_invoice_item_entry"
require "../models/automatic_tax_config"
require "../models/automatic_tax_filter_params"
require "../models/billing_cycle_anchor_config_param"
require "../models/cancellation_details_param"
require "../models/deleted_discount"
require "../models/error"
require "../models/get_accounts_created_parameter"

require "../models/invoice_settings_param"
require "../models/payment_settings"
require "../models/post_accounts_request_metadata"
require "../models/post_subscriptions_request_application_fee_percent"
require "../models/post_subscriptions_request_billing_thresholds"
require "../models/post_subscriptions_request_default_tax_rates"
require "../models/post_subscriptions_request_discounts"
require "../models/post_subscriptions_request_pending_invoice_item_interval"
require "../models/post_subscriptions_request_trial_end"
require "../models/post_subscriptions_subscription_exposed_id_request_cancel_at"
require "../models/post_subscriptions_subscription_exposed_id_request_default_tax_rates"
require "../models/post_subscriptions_subscription_exposed_id_request_pause_collection"
require "../models/post_subscriptions_subscription_exposed_id_request_transfer_data"
require "../models/post_subscriptions_subscription_exposed_id_request_trial_end"
require "../models/search_result"
require "../models/subscription"
require "../models/subscription_item_create_params"
require "../models/subscription_item_update_params"
require "../models/subscriptions_subscription_list"
require "../models/transfer_data_specs"
require "../models/trial_settings_config"

module Stripe
  class SubscriptionsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>  <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href=\"#delete_invoiceitem\">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>  <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
    # @required @param subscription_exposed_id [String?]
    # @optional @param cancellation_details [Stripe::CancellationDetailsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_now [Bool?] Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
    # @optional @param prorate [Bool?] Will generate a proration invoice item that credits remaining unused time until the subscription period end. Defaults to `false`.
    # @return [Stripe::Subscription]
    def delete_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      cancellation_details : Stripe::CancellationDetailsParam? = nil,
      expand : Array(String)? = nil,
      invoice_now : Bool? = nil,
      prorate : Bool? = nil
    ) : Stripe::Subscription
      data, _status_code, _headers = delete_subscriptions_subscription_exposed_id_with_http_info(subscription_exposed_id: subscription_exposed_id, cancellation_details: cancellation_details, expand: expand, invoice_now: invoice_now, prorate: prorate)
      data
    end

    # &lt;p&gt;Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.&lt;/p&gt;  &lt;p&gt;Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
    # @required @param subscription_exposed_id [String?]
    # @optional @param cancellation_details [Stripe::CancellationDetailsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_now [Bool?] Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
    # @optional @param prorate [Bool?] Will generate a proration invoice item that credits remaining unused time until the subscription period end. Defaults to `false`.
    # @return [Tuple(Stripe::Subscription, Integer, Hash)] Stripe::Subscription, response status code and response headers
    def delete_subscriptions_subscription_exposed_id_with_http_info(
      *,
      subscription_exposed_id : String? = nil,
      cancellation_details : Stripe::CancellationDetailsParam? = nil,
      expand : Array(String)? = nil,
      invoice_now : Bool? = nil,
      prorate : Bool? = nil
    ) : Tuple(Stripe::Subscription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, cancellation_details: cancellation_details, expand: expand, invoice_now: invoice_now, prorate: prorate)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SubscriptionsApi#delete_subscriptions_subscription_exposed_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Subscription.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.&lt;/p&gt;  &lt;p&gt;Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
    # @required @param subscription_exposed_id [String?]
    # @optional @param cancellation_details [Stripe::CancellationDetailsParam?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_now [Bool?] Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
    # @optional @param prorate [Bool?] Will generate a proration invoice item that credits remaining unused time until the subscription period end. Defaults to `false`.
    # @return nil
    def delete_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      cancellation_details : Stripe::CancellationDetailsParam? = nil,
      expand : Array(String)? = nil,
      invoice_now : Bool? = nil,
      prorate : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, cancellation_details: cancellation_details, expand: expand, invoice_now: invoice_now, prorate: prorate).execute(&block)
    end

    DELETE_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_SUBSCRIPTION_EXPOSED_ID = 5000

    # @return Crest::Request
    def build_api_request_for_delete_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      cancellation_details : Stripe::CancellationDetailsParam? = nil,
      expand : Array(String)? = nil,
      invoice_now : Bool? = nil,
      prorate : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SubscriptionsApi.delete_subscriptions_subscription_exposed_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"subscription_exposed_id\" is required and cannot be null") if subscription_exposed_id.nil?
        unless (_subscription_exposed_id = subscription_exposed_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription_exposed_id", subscription_exposed_id.to_s.size, DELETE_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_SUBSCRIPTION_EXPOSED_ID)
        end
        unless (_cancellation_details = cancellation_details).nil?
          _cancellation_details.validate if _cancellation_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/subscriptions/{subscription_exposed_id}".sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cancellation_details.to_json), "cancellation_details")) if !cancellation_details.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("invoice_now", invoice_now.to_s) if !invoice_now.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("prorate", prorate.to_s) if !prorate.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SubscriptionsApi.delete_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Removes the currently applied discount on a subscription.</p>
    # @required @param subscription_exposed_id [String?]
    # @return [Stripe::DeletedDiscount]
    def delete_subscriptions_subscription_exposed_id_discount(
      *,
      subscription_exposed_id : String? = nil
    ) : Stripe::DeletedDiscount
      data, _status_code, _headers = delete_subscriptions_subscription_exposed_id_discount_with_http_info(subscription_exposed_id: subscription_exposed_id)
      data
    end

    # &lt;p&gt;Removes the currently applied discount on a subscription.&lt;/p&gt;
    # @required @param subscription_exposed_id [String?]
    # @return [Tuple(Stripe::DeletedDiscount, Integer, Hash)] Stripe::DeletedDiscount, response status code and response headers
    def delete_subscriptions_subscription_exposed_id_discount_with_http_info(
      *,
      subscription_exposed_id : String? = nil
    ) : Tuple(Stripe::DeletedDiscount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_subscriptions_subscription_exposed_id_discount(subscription_exposed_id: subscription_exposed_id)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SubscriptionsApi#delete_subscriptions_subscription_exposed_id_discount\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedDiscount.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Removes the currently applied discount on a subscription.&lt;/p&gt;
    # @required @param subscription_exposed_id [String?]
    # @return nil
    def delete_subscriptions_subscription_exposed_id_discount(
      *,
      subscription_exposed_id : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_subscriptions_subscription_exposed_id_discount(subscription_exposed_id: subscription_exposed_id).execute(&block)
    end

    DELETE_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_DISCOUNT_MAX_LENGTH_FOR_SUBSCRIPTION_EXPOSED_ID = 5000

    # @return Crest::Request
    def build_api_request_for_delete_subscriptions_subscription_exposed_id_discount(
      *,
      subscription_exposed_id : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SubscriptionsApi.delete_subscriptions_subscription_exposed_id_discount ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"subscription_exposed_id\" is required and cannot be null") if subscription_exposed_id.nil?
        unless (_subscription_exposed_id = subscription_exposed_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription_exposed_id", subscription_exposed_id.to_s.size, DELETE_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_DISCOUNT_MAX_LENGTH_FOR_SUBSCRIPTION_EXPOSED_ID)
        end
      end

      # resource path
      local_var_path = "/v1/subscriptions/{subscription_exposed_id}/discount".sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "SubscriptionsApi.delete_subscriptions_subscription_exposed_id_discount",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param test_clock [String?] Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set.
    # @optional @param price [String?] Filter for subscriptions that contain this recurring price ID.
    # @optional @param automatic_tax [Stripe::AutomaticTaxFilterParams?] Filter subscriptions by their automatic tax settings.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return subscriptions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose subscriptions will be retrieved.
    # @optional @param plan [String?] The ID of the plan whose subscriptions will be retrieved.
    # @optional @param collection_method [String?] The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.
    # @optional @param current_period_end [Stripe::GetAccountsCreatedParameter?]
    # @optional @param current_period_start [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::SubscriptionsSubscriptionList]
    def get_subscriptions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      test_clock : String? = nil,
      price : String? = nil,
      automatic_tax : Stripe::AutomaticTaxFilterParams? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      plan : String? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      current_period_end : Stripe::GetAccountsCreatedParameter? = nil,
      current_period_start : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::SubscriptionsSubscriptionList
      data, _status_code, _headers = get_subscriptions_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, test_clock: test_clock, price: price, automatic_tax: automatic_tax, created: created, expand: expand, customer: customer, plan: plan, collection_method: collection_method, status: status, current_period_end: current_period_end, current_period_start: current_period_start)
      data
    end

    # &lt;p&gt;By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify &lt;code&gt;status&#x3D;canceled&lt;/code&gt;.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param test_clock [String?] Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set.
    # @optional @param price [String?] Filter for subscriptions that contain this recurring price ID.
    # @optional @param automatic_tax [Stripe::AutomaticTaxFilterParams?] Filter subscriptions by their automatic tax settings.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return subscriptions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose subscriptions will be retrieved.
    # @optional @param plan [String?] The ID of the plan whose subscriptions will be retrieved.
    # @optional @param collection_method [String?] The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.
    # @optional @param current_period_end [Stripe::GetAccountsCreatedParameter?]
    # @optional @param current_period_start [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::SubscriptionsSubscriptionList, Integer, Hash)] Stripe::SubscriptionsSubscriptionList, response status code and response headers
    def get_subscriptions_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      test_clock : String? = nil,
      price : String? = nil,
      automatic_tax : Stripe::AutomaticTaxFilterParams? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      plan : String? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      current_period_end : Stripe::GetAccountsCreatedParameter? = nil,
      current_period_start : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::SubscriptionsSubscriptionList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_subscriptions(ending_before: ending_before, starting_after: starting_after, limit: limit, test_clock: test_clock, price: price, automatic_tax: automatic_tax, created: created, expand: expand, customer: customer, plan: plan, collection_method: collection_method, status: status, current_period_end: current_period_end, current_period_start: current_period_start)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SubscriptionsApi#get_subscriptions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SubscriptionsSubscriptionList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify &lt;code&gt;status&#x3D;canceled&lt;/code&gt;.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param test_clock [String?] Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set.
    # @optional @param price [String?] Filter for subscriptions that contain this recurring price ID.
    # @optional @param automatic_tax [Stripe::AutomaticTaxFilterParams?] Filter subscriptions by their automatic tax settings.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return subscriptions that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param customer [String?] The ID of the customer whose subscriptions will be retrieved.
    # @optional @param plan [String?] The ID of the plan whose subscriptions will be retrieved.
    # @optional @param collection_method [String?] The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.
    # @optional @param current_period_end [Stripe::GetAccountsCreatedParameter?]
    # @optional @param current_period_start [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_subscriptions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      test_clock : String? = nil,
      price : String? = nil,
      automatic_tax : Stripe::AutomaticTaxFilterParams? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      plan : String? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      current_period_end : Stripe::GetAccountsCreatedParameter? = nil,
      current_period_start : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_subscriptions(ending_before: ending_before, starting_after: starting_after, limit: limit, test_clock: test_clock, price: price, automatic_tax: automatic_tax, created: created, expand: expand, customer: customer, plan: plan, collection_method: collection_method, status: status, current_period_end: current_period_end, current_period_start: current_period_start).execute(&block)
    end

    GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_ENDING_BEFORE       = 5000
    GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_STARTING_AFTER      = 5000
    GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_TEST_CLOCK          = 5000
    GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_PRICE               = 5000
    GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_CUSTOMER            = 5000
    GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_PLAN                = 5000
    GET_SUBSCRIPTIONS_VALID_VALUES_FOR_COLLECTION_METHOD = String.static_array("charge_automatically", "send_invoice")
    GET_SUBSCRIPTIONS_VALID_VALUES_FOR_STATUS            = String.static_array("active", "all", "canceled", "ended", "incomplete", "incomplete_expired", "past_due", "paused", "trialing", "unpaid")

    # @return Crest::Request
    def build_api_request_for_get_subscriptions(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      test_clock : String? = nil,
      price : String? = nil,
      automatic_tax : Stripe::AutomaticTaxFilterParams? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      customer : String? = nil,
      plan : String? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      current_period_end : Stripe::GetAccountsCreatedParameter? = nil,
      current_period_start : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SubscriptionsApi.get_subscriptions ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_test_clock = test_clock).nil?
          OpenApi::PrimitiveValidator.validate_max_length("test_clock", test_clock.to_s.size, GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_TEST_CLOCK)
        end
        unless (_price = price).nil?
          OpenApi::PrimitiveValidator.validate_max_length("price", price.to_s.size, GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_PRICE)
        end
        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_plan = plan).nil?
          OpenApi::PrimitiveValidator.validate_max_length("plan", plan.to_s.size, GET_SUBSCRIPTIONS_MAX_LENGTH_FOR_PLAN)
        end
        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, GET_SUBSCRIPTIONS_VALID_VALUES_FOR_COLLECTION_METHOD)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_SUBSCRIPTIONS_VALID_VALUES_FOR_STATUS)
        end
        unless (_current_period_end = current_period_end).nil?
          _current_period_end.validate if _current_period_end.is_a?(OpenApi::Validatable)
        end
        unless (_current_period_start = current_period_start).nil?
          _current_period_start.validate if _current_period_start.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/subscriptions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["test_clock"] = test_clock.to_s if !test_clock.nil?
      query_params["price"] = price.to_s if !price.nil?
      query_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["plan"] = plan.to_s if !plan.nil?
      query_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["current_period_end"] = current_period_end.to_s if !current_period_end.nil?
      query_params["current_period_start"] = current_period_start.to_s if !current_period_start.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SubscriptionsApi.get_subscriptions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for subscriptions you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_subscriptions_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_subscriptions_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for subscriptions you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_subscriptions_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_subscriptions_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SubscriptionsApi#get_subscriptions_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for subscriptions you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_subscriptions_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_subscriptions_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_SUBSCRIPTIONS_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_SUBSCRIPTIONS_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_subscriptions_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SubscriptionsApi.get_subscriptions_search ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_SUBSCRIPTIONS_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_SUBSCRIPTIONS_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/subscriptions/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SubscriptionsApi.get_subscriptions_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the subscription with the given ID.</p>
    # @required @param subscription_exposed_id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Subscription]
    def get_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Subscription
      data, _status_code, _headers = get_subscriptions_subscription_exposed_id_with_http_info(subscription_exposed_id: subscription_exposed_id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
    # @required @param subscription_exposed_id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Subscription, Integer, Hash)] Stripe::Subscription, response status code and response headers
    def get_subscriptions_subscription_exposed_id_with_http_info(
      *,
      subscription_exposed_id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Subscription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SubscriptionsApi#get_subscriptions_subscription_exposed_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Subscription.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
    # @required @param subscription_exposed_id [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, expand: expand).execute(&block)
    end

    GET_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_SUBSCRIPTION_EXPOSED_ID = 5000

    # @return Crest::Request
    def build_api_request_for_get_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SubscriptionsApi.get_subscriptions_subscription_exposed_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"subscription_exposed_id\" is required and cannot be null") if subscription_exposed_id.nil?
        unless (_subscription_exposed_id = subscription_exposed_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription_exposed_id", subscription_exposed_id.to_s.size, GET_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_SUBSCRIPTION_EXPOSED_ID)
        end
      end

      # resource path
      local_var_path = "/v1/subscriptions/{subscription_exposed_id}".sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "SubscriptionsApi.get_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>  <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request. The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>  <p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href=\"/docs/billing/subscriptions/subscription-schedules#managing\">subscription schedules</a> instead. Schedules provide the flexibility to model more complex billing configurations that change over time.</p>
    # @required @param customer [String?] The identifier of the customer to subscribe.
    # @optional @param add_invoice_items [Array(Stripe::AddInvoiceItemEntry)?] A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
    # @optional @param application_fee_percent [Stripe::PostSubscriptionsRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxConfig?]
    # @optional @param backdate_start_date [Int32?] For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
    # @optional @param billing_cycle_anchor [Int32?] A future timestamp in UTC format to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). The anchor is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals.
    # @optional @param billing_cycle_anchor_config [Stripe::BillingCycleAnchorConfigParam?]
    # @optional @param billing_thresholds [Stripe::PostSubscriptionsRequestBillingThresholds?]
    # @optional @param cancel_at [Int32?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
    # @optional @param cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param coupon [String?] The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param days_until_due [Int32?] Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_source [String?] ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_tax_rates [Stripe::PostSubscriptionsRequestDefaultTaxRates?]
    # @optional @param description [String?] The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
    # @optional @param discounts [Stripe::PostSubscriptionsRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_settings [Stripe::InvoiceSettingsParam?]
    # @optional @param items [Array(Stripe::SubscriptionItemCreateParams)?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
    # @optional @param on_behalf_of [String?]
    # @optional @param payment_behavior [String?] Only applies to subscriptions with `collection_method=charge_automatically`.  Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.  `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.  Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_item_interval [Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval?]
    # @optional @param promotion_code [String?] The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param trial_end [Stripe::PostSubscriptionsRequestTrialEnd?]
    # @optional @param trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_period_days [Int32?] Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_settings [Stripe::TrialSettingsConfig?]
    # @return [Stripe::Subscription]
    def post_subscriptions(
      *,
      customer : String? = nil,
      add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      backdate_start_date : Int64? = nil,
      billing_cycle_anchor : Int64? = nil,
      billing_cycle_anchor_config : Stripe::BillingCycleAnchorConfigParam? = nil,
      billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      cancel_at : Int64? = nil,
      cancel_at_period_end : Bool? = nil,
      collection_method : String? = nil,
      coupon : String? = nil,
      currency : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Stripe::PostSubscriptionsRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      items : Array(Stripe::SubscriptionItemCreateParams)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      off_session : Bool? = nil,
      on_behalf_of : String? = nil,
      payment_behavior : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      promotion_code : String? = nil,
      proration_behavior : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      trial_end : Stripe::PostSubscriptionsRequestTrialEnd? = nil,
      trial_from_plan : Bool? = nil,
      trial_period_days : Int64? = nil,
      trial_settings : Stripe::TrialSettingsConfig? = nil
    ) : Stripe::Subscription
      data, _status_code, _headers = post_subscriptions_with_http_info(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_cycle_anchor_config: billing_cycle_anchor_config, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, currency: currency, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, invoice_settings: invoice_settings, items: items, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days, trial_settings: trial_settings)
      data
    end

    # &lt;p&gt;Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;  &lt;p&gt;When you create a subscription with &lt;code&gt;collection_method&#x3D;charge_automatically&lt;/code&gt;, the first invoice is finalized as part of the request. The &lt;code&gt;payment_behavior&lt;/code&gt; parameter determines the exact behavior of the initial payment.&lt;/p&gt;  &lt;p&gt;To start subscriptions where the first invoice always begins in a &lt;code&gt;draft&lt;/code&gt; status, use &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/subscription-schedules#managing\&quot;&gt;subscription schedules&lt;/a&gt; instead. Schedules provide the flexibility to model more complex billing configurations that change over time.&lt;/p&gt;
    # @required @param customer [String?] The identifier of the customer to subscribe.
    # @optional @param add_invoice_items [Array(Stripe::AddInvoiceItemEntry)?] A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
    # @optional @param application_fee_percent [Stripe::PostSubscriptionsRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxConfig?]
    # @optional @param backdate_start_date [Int32?] For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
    # @optional @param billing_cycle_anchor [Int32?] A future timestamp in UTC format to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). The anchor is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals.
    # @optional @param billing_cycle_anchor_config [Stripe::BillingCycleAnchorConfigParam?]
    # @optional @param billing_thresholds [Stripe::PostSubscriptionsRequestBillingThresholds?]
    # @optional @param cancel_at [Int32?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
    # @optional @param cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param coupon [String?] The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param days_until_due [Int32?] Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_source [String?] ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_tax_rates [Stripe::PostSubscriptionsRequestDefaultTaxRates?]
    # @optional @param description [String?] The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
    # @optional @param discounts [Stripe::PostSubscriptionsRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_settings [Stripe::InvoiceSettingsParam?]
    # @optional @param items [Array(Stripe::SubscriptionItemCreateParams)?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
    # @optional @param on_behalf_of [String?]
    # @optional @param payment_behavior [String?] Only applies to subscriptions with `collection_method=charge_automatically`.  Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.  `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.  Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_item_interval [Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval?]
    # @optional @param promotion_code [String?] The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param trial_end [Stripe::PostSubscriptionsRequestTrialEnd?]
    # @optional @param trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_period_days [Int32?] Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_settings [Stripe::TrialSettingsConfig?]
    # @return [Tuple(Stripe::Subscription, Integer, Hash)] Stripe::Subscription, response status code and response headers
    def post_subscriptions_with_http_info(
      *,
      customer : String? = nil,
      add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      backdate_start_date : Int64? = nil,
      billing_cycle_anchor : Int64? = nil,
      billing_cycle_anchor_config : Stripe::BillingCycleAnchorConfigParam? = nil,
      billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      cancel_at : Int64? = nil,
      cancel_at_period_end : Bool? = nil,
      collection_method : String? = nil,
      coupon : String? = nil,
      currency : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Stripe::PostSubscriptionsRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      items : Array(Stripe::SubscriptionItemCreateParams)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      off_session : Bool? = nil,
      on_behalf_of : String? = nil,
      payment_behavior : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      promotion_code : String? = nil,
      proration_behavior : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      trial_end : Stripe::PostSubscriptionsRequestTrialEnd? = nil,
      trial_from_plan : Bool? = nil,
      trial_period_days : Int64? = nil,
      trial_settings : Stripe::TrialSettingsConfig? = nil
    ) : Tuple(Stripe::Subscription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_subscriptions(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_cycle_anchor_config: billing_cycle_anchor_config, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, currency: currency, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, invoice_settings: invoice_settings, items: items, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days, trial_settings: trial_settings)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SubscriptionsApi#post_subscriptions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Subscription.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;  &lt;p&gt;When you create a subscription with &lt;code&gt;collection_method&#x3D;charge_automatically&lt;/code&gt;, the first invoice is finalized as part of the request. The &lt;code&gt;payment_behavior&lt;/code&gt; parameter determines the exact behavior of the initial payment.&lt;/p&gt;  &lt;p&gt;To start subscriptions where the first invoice always begins in a &lt;code&gt;draft&lt;/code&gt; status, use &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/subscription-schedules#managing\&quot;&gt;subscription schedules&lt;/a&gt; instead. Schedules provide the flexibility to model more complex billing configurations that change over time.&lt;/p&gt;
    # @required @param customer [String?] The identifier of the customer to subscribe.
    # @optional @param add_invoice_items [Array(Stripe::AddInvoiceItemEntry)?] A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
    # @optional @param application_fee_percent [Stripe::PostSubscriptionsRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxConfig?]
    # @optional @param backdate_start_date [Int32?] For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
    # @optional @param billing_cycle_anchor [Int32?] A future timestamp in UTC format to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). The anchor is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals.
    # @optional @param billing_cycle_anchor_config [Stripe::BillingCycleAnchorConfigParam?]
    # @optional @param billing_thresholds [Stripe::PostSubscriptionsRequestBillingThresholds?]
    # @optional @param cancel_at [Int32?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
    # @optional @param cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param coupon [String?] The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @optional @param days_until_due [Int32?] Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_source [String?] ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_tax_rates [Stripe::PostSubscriptionsRequestDefaultTaxRates?]
    # @optional @param description [String?] The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
    # @optional @param discounts [Stripe::PostSubscriptionsRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_settings [Stripe::InvoiceSettingsParam?]
    # @optional @param items [Array(Stripe::SubscriptionItemCreateParams)?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
    # @optional @param on_behalf_of [String?]
    # @optional @param payment_behavior [String?] Only applies to subscriptions with `collection_method=charge_automatically`.  Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.  `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.  Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_item_interval [Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval?]
    # @optional @param promotion_code [String?] The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @optional @param trial_end [Stripe::PostSubscriptionsRequestTrialEnd?]
    # @optional @param trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_period_days [Int32?] Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_settings [Stripe::TrialSettingsConfig?]
    # @return nil
    def post_subscriptions(
      *,
      customer : String? = nil,
      add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      backdate_start_date : Int64? = nil,
      billing_cycle_anchor : Int64? = nil,
      billing_cycle_anchor_config : Stripe::BillingCycleAnchorConfigParam? = nil,
      billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      cancel_at : Int64? = nil,
      cancel_at_period_end : Bool? = nil,
      collection_method : String? = nil,
      coupon : String? = nil,
      currency : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Stripe::PostSubscriptionsRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      items : Array(Stripe::SubscriptionItemCreateParams)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      off_session : Bool? = nil,
      on_behalf_of : String? = nil,
      payment_behavior : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      promotion_code : String? = nil,
      proration_behavior : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      trial_end : Stripe::PostSubscriptionsRequestTrialEnd? = nil,
      trial_from_plan : Bool? = nil,
      trial_period_days : Int64? = nil,
      trial_settings : Stripe::TrialSettingsConfig? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_subscriptions(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_cycle_anchor_config: billing_cycle_anchor_config, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, currency: currency, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, invoice_settings: invoice_settings, items: items, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days, trial_settings: trial_settings).execute(&block)
    end

    POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_CUSTOMER               = 5000
    POST_SUBSCRIPTIONS_VALID_VALUES_FOR_COLLECTION_METHOD    = String.static_array("charge_automatically", "send_invoice")
    POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_COUPON                 = 5000
    POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD = 5000
    POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_DEFAULT_SOURCE         = 5000
    POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_DESCRIPTION            =  500
    POST_SUBSCRIPTIONS_VALID_VALUES_FOR_ON_BEHALF_OF         = String.static_array("")
    POST_SUBSCRIPTIONS_VALID_VALUES_FOR_PAYMENT_BEHAVIOR     = String.static_array("allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete")
    POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_PROMOTION_CODE         = 5000
    POST_SUBSCRIPTIONS_VALID_VALUES_FOR_PRORATION_BEHAVIOR   = String.static_array("always_invoice", "create_prorations", "none")

    # @return Crest::Request
    def build_api_request_for_post_subscriptions(
      *,
      customer : String? = nil,
      add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      backdate_start_date : Int64? = nil,
      billing_cycle_anchor : Int64? = nil,
      billing_cycle_anchor_config : Stripe::BillingCycleAnchorConfigParam? = nil,
      billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      cancel_at : Int64? = nil,
      cancel_at_period_end : Bool? = nil,
      collection_method : String? = nil,
      coupon : String? = nil,
      currency : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Stripe::PostSubscriptionsRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      items : Array(Stripe::SubscriptionItemCreateParams)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      off_session : Bool? = nil,
      on_behalf_of : String? = nil,
      payment_behavior : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      promotion_code : String? = nil,
      proration_behavior : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      trial_end : Stripe::PostSubscriptionsRequestTrialEnd? = nil,
      trial_from_plan : Bool? = nil,
      trial_period_days : Int64? = nil,
      trial_settings : Stripe::TrialSettingsConfig? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SubscriptionsApi.post_subscriptions ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"customer\" is required and cannot be null") if customer.nil?
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_add_invoice_items = add_invoice_items).nil?
          OpenApi::ContainerValidator.validate(container: _add_invoice_items) if _add_invoice_items.is_a?(Array)
        end
        unless (_application_fee_percent = application_fee_percent).nil?
          _application_fee_percent.validate if _application_fee_percent.is_a?(OpenApi::Validatable)
        end
        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end

        unless (_billing_cycle_anchor_config = billing_cycle_anchor_config).nil?
          _billing_cycle_anchor_config.validate if _billing_cycle_anchor_config.is_a?(OpenApi::Validatable)
        end
        unless (_billing_thresholds = billing_thresholds).nil?
          _billing_thresholds.validate if _billing_thresholds.is_a?(OpenApi::Validatable)
        end

        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, POST_SUBSCRIPTIONS_VALID_VALUES_FOR_COLLECTION_METHOD)
        end
        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_COUPON)
        end

        unless (_default_payment_method = default_payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("default_payment_method", default_payment_method.to_s.size, POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD)
        end
        unless (_default_source = default_source).nil?
          OpenApi::PrimitiveValidator.validate_max_length("default_source", default_source.to_s.size, POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_DEFAULT_SOURCE)
        end
        unless (_default_tax_rates = default_tax_rates).nil?
          _default_tax_rates.validate if _default_tax_rates.is_a?(OpenApi::Validatable)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_DESCRIPTION)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_invoice_settings = invoice_settings).nil?
          _invoice_settings.validate if _invoice_settings.is_a?(OpenApi::Validatable)
        end
        unless (_items = items).nil?
          OpenApi::ContainerValidator.validate(container: _items) if _items.is_a?(Array)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end

        unless (_on_behalf_of = on_behalf_of).nil?
          OpenApi::EnumValidator.validate("on_behalf_of", _on_behalf_of, POST_SUBSCRIPTIONS_VALID_VALUES_FOR_ON_BEHALF_OF)
        end
        unless (_payment_behavior = payment_behavior).nil?
          OpenApi::EnumValidator.validate("payment_behavior", _payment_behavior, POST_SUBSCRIPTIONS_VALID_VALUES_FOR_PAYMENT_BEHAVIOR)
        end
        unless (_payment_settings = payment_settings).nil?
          _payment_settings.validate if _payment_settings.is_a?(OpenApi::Validatable)
        end
        unless (_pending_invoice_item_interval = pending_invoice_item_interval).nil?
          _pending_invoice_item_interval.validate if _pending_invoice_item_interval.is_a?(OpenApi::Validatable)
        end
        unless (_promotion_code = promotion_code).nil?
          OpenApi::PrimitiveValidator.validate_max_length("promotion_code", promotion_code.to_s.size, POST_SUBSCRIPTIONS_MAX_LENGTH_FOR_PROMOTION_CODE)
        end
        unless (_proration_behavior = proration_behavior).nil?
          OpenApi::EnumValidator.validate("proration_behavior", _proration_behavior, POST_SUBSCRIPTIONS_VALID_VALUES_FOR_PRORATION_BEHAVIOR)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
        unless (_trial_end = trial_end).nil?
          _trial_end.validate if _trial_end.is_a?(OpenApi::Validatable)
        end

        unless (_trial_settings = trial_settings).nil?
          _trial_settings.validate if _trial_settings.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/subscriptions"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(add_invoice_items.to_json), "add_invoice_items")) if !add_invoice_items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(application_fee_percent.to_json), "application_fee_percent")) if !application_fee_percent.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_tax.to_json), "automatic_tax")) if !automatic_tax.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("backdate_start_date", backdate_start_date.to_s) if !backdate_start_date.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("billing_cycle_anchor", billing_cycle_anchor.to_s) if !billing_cycle_anchor.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(billing_cycle_anchor_config.to_json), "billing_cycle_anchor_config")) if !billing_cycle_anchor_config.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(billing_thresholds.to_json), "billing_thresholds")) if !billing_thresholds.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("cancel_at", cancel_at.to_s) if !cancel_at.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("cancel_at_period_end", cancel_at_period_end.to_s) if !cancel_at_period_end.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("collection_method", collection_method.to_s) if !collection_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("coupon", coupon.to_s) if !coupon.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("days_until_due", days_until_due.to_s) if !days_until_due.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("default_payment_method", default_payment_method.to_s) if !default_payment_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("default_source", default_source.to_s) if !default_source.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(default_tax_rates.to_json), "default_tax_rates")) if !default_tax_rates.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(discounts.to_json), "discounts")) if !discounts.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(invoice_settings.to_json), "invoice_settings")) if !invoice_settings.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(items.to_json), "items")) if !items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("off_session", off_session.to_s) if !off_session.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("on_behalf_of", on_behalf_of.to_s) if !on_behalf_of.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_behavior", payment_behavior.to_s) if !payment_behavior.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_settings.to_json), "payment_settings")) if !payment_settings.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(pending_invoice_item_interval.to_json), "pending_invoice_item_interval")) if !pending_invoice_item_interval.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("promotion_code", promotion_code.to_s) if !promotion_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("proration_behavior", proration_behavior.to_s) if !proration_behavior.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(trial_end.to_json), "trial_end")) if !trial_end.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("trial_from_plan", trial_from_plan.to_s) if !trial_from_plan.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("trial_period_days", trial_period_days.to_s) if !trial_period_days.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(trial_settings.to_json), "trial_settings")) if !trial_settings.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SubscriptionsApi.post_subscriptions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the <a href=\"/docs/api/invoices/create_preview\">create preview</a> endpoint.</p>  <p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>  <p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>  <ul> <li>The billing interval is changed (for example, from monthly to yearly).</li> <li>The subscription moves from free to paid.</li> <li>A trial starts or ends.</li> </ul>  <p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how <a href=\"/billing/subscriptions/upgrade-downgrade#immediate-payment\">Stripe immediately attempts payment for subscription changes</a>.</p>  <p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href=\"/docs/api/invoices/create\">invoice the customer</a>.</p>  <p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>  <p>Updating the quantity on a subscription many times in an hour may result in <a href=\"/docs/rate-limits\">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href=\"/docs/billing/subscriptions/usage-based\">usage-based billing</a> instead.</p>
    # @required @param subscription_exposed_id [String?]
    # @optional @param add_invoice_items [Array(Stripe::AddInvoiceItemEntry)?] A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
    # @optional @param application_fee_percent [Stripe::PostSubscriptionsRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxConfig?]
    # @optional @param billing_cycle_anchor [String?] Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    # @optional @param billing_thresholds [Stripe::PostSubscriptionsRequestBillingThresholds?]
    # @optional @param cancel_at [Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt?]
    # @optional @param cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
    # @optional @param cancellation_details [Stripe::CancellationDetailsParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param coupon [String?] The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param days_until_due [Int32?] Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_source [String?]
    # @optional @param default_tax_rates [Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostSubscriptionsRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_settings [Stripe::InvoiceSettingsParam?]
    # @optional @param items [Array(Stripe::SubscriptionItemUpdateParams)?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
    # @optional @param on_behalf_of [String?]
    # @optional @param pause_collection [Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection?]
    # @optional @param payment_behavior [String?] Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_item_interval [Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval?]
    # @optional @param promotion_code [String?] The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
    # @optional @param proration_date [Int32?] If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#upcoming_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
    # @optional @param transfer_data [Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData?]
    # @optional @param trial_end [Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd?]
    # @optional @param trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_settings [Stripe::TrialSettingsConfig?]
    # @return [Stripe::Subscription]
    def post_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      billing_cycle_anchor : String? = nil,
      billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      cancel_at : Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil,
      cancel_at_period_end : Bool? = nil,
      cancellation_details : Stripe::CancellationDetailsParam? = nil,
      collection_method : String? = nil,
      coupon : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      items : Array(Stripe::SubscriptionItemUpdateParams)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      off_session : Bool? = nil,
      on_behalf_of : String? = nil,
      pause_collection : Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil,
      payment_behavior : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      promotion_code : String? = nil,
      proration_behavior : String? = nil,
      proration_date : Int64? = nil,
      transfer_data : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData? = nil,
      trial_end : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd? = nil,
      trial_from_plan : Bool? = nil,
      trial_settings : Stripe::TrialSettingsConfig? = nil
    ) : Stripe::Subscription
      data, _status_code, _headers = post_subscriptions_subscription_exposed_id_with_http_info(subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, cancellation_details: cancellation_details, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, invoice_settings: invoice_settings, items: items, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_settings: trial_settings)
      data
    end

    # &lt;p&gt;Updates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the &lt;a href&#x3D;\&quot;/docs/api/invoices/create_preview\&quot;&gt;create preview&lt;/a&gt; endpoint.&lt;/p&gt;  &lt;p&gt;By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a &lt;currency&gt;100&lt;/currency&gt; price, they’ll be billed &lt;currency&gt;100&lt;/currency&gt; immediately. If on May 15 they switch to a &lt;currency&gt;200&lt;/currency&gt; price, then on June 1 they’ll be billed &lt;currency&gt;250&lt;/currency&gt; (&lt;currency&gt;200&lt;/currency&gt; for a renewal of her subscription, plus a &lt;currency&gt;50&lt;/currency&gt; prorating adjustment for half of the previous month’s &lt;currency&gt;100&lt;/currency&gt; difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.&lt;/p&gt;  &lt;p&gt;Switching prices does not normally change the billing date or generate an immediate charge unless:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;The billing interval is changed (for example, from monthly to yearly).&lt;/li&gt; &lt;li&gt;The subscription moves from free to paid.&lt;/li&gt; &lt;li&gt;A trial starts or ends.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how &lt;a href&#x3D;\&quot;/billing/subscriptions/upgrade-downgrade#immediate-payment\&quot;&gt;Stripe immediately attempts payment for subscription changes&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;If you want to charge for an upgrade immediately, pass &lt;code&gt;proration_behavior&lt;/code&gt; as &lt;code&gt;always_invoice&lt;/code&gt; to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass &lt;code&gt;create_prorations&lt;/code&gt;, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually &lt;a href&#x3D;\&quot;/docs/api/invoices/create\&quot;&gt;invoice the customer&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;If you don’t want to prorate, set the &lt;code&gt;proration_behavior&lt;/code&gt; option to &lt;code&gt;none&lt;/code&gt;. With this option, the customer is billed &lt;currency&gt;100&lt;/currency&gt; on May 1 and &lt;currency&gt;200&lt;/currency&gt; on June 1. Similarly, if you set &lt;code&gt;proration_behavior&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt; when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.&lt;/p&gt;  &lt;p&gt;Updating the quantity on a subscription many times in an hour may result in &lt;a href&#x3D;\&quot;/docs/rate-limits\&quot;&gt;rate limiting&lt;/a&gt;. If you need to bill for a frequently changing quantity, consider integrating &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/usage-based\&quot;&gt;usage-based billing&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param subscription_exposed_id [String?]
    # @optional @param add_invoice_items [Array(Stripe::AddInvoiceItemEntry)?] A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
    # @optional @param application_fee_percent [Stripe::PostSubscriptionsRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxConfig?]
    # @optional @param billing_cycle_anchor [String?] Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    # @optional @param billing_thresholds [Stripe::PostSubscriptionsRequestBillingThresholds?]
    # @optional @param cancel_at [Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt?]
    # @optional @param cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
    # @optional @param cancellation_details [Stripe::CancellationDetailsParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param coupon [String?] The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param days_until_due [Int32?] Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_source [String?]
    # @optional @param default_tax_rates [Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostSubscriptionsRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_settings [Stripe::InvoiceSettingsParam?]
    # @optional @param items [Array(Stripe::SubscriptionItemUpdateParams)?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
    # @optional @param on_behalf_of [String?]
    # @optional @param pause_collection [Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection?]
    # @optional @param payment_behavior [String?] Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_item_interval [Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval?]
    # @optional @param promotion_code [String?] The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
    # @optional @param proration_date [Int32?] If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#upcoming_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
    # @optional @param transfer_data [Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData?]
    # @optional @param trial_end [Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd?]
    # @optional @param trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_settings [Stripe::TrialSettingsConfig?]
    # @return [Tuple(Stripe::Subscription, Integer, Hash)] Stripe::Subscription, response status code and response headers
    def post_subscriptions_subscription_exposed_id_with_http_info(
      *,
      subscription_exposed_id : String? = nil,
      add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      billing_cycle_anchor : String? = nil,
      billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      cancel_at : Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil,
      cancel_at_period_end : Bool? = nil,
      cancellation_details : Stripe::CancellationDetailsParam? = nil,
      collection_method : String? = nil,
      coupon : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      items : Array(Stripe::SubscriptionItemUpdateParams)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      off_session : Bool? = nil,
      on_behalf_of : String? = nil,
      pause_collection : Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil,
      payment_behavior : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      promotion_code : String? = nil,
      proration_behavior : String? = nil,
      proration_date : Int64? = nil,
      transfer_data : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData? = nil,
      trial_end : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd? = nil,
      trial_from_plan : Bool? = nil,
      trial_settings : Stripe::TrialSettingsConfig? = nil
    ) : Tuple(Stripe::Subscription, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, cancellation_details: cancellation_details, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, invoice_settings: invoice_settings, items: items, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_settings: trial_settings)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: SubscriptionsApi#post_subscriptions_subscription_exposed_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Subscription.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the &lt;a href&#x3D;\&quot;/docs/api/invoices/create_preview\&quot;&gt;create preview&lt;/a&gt; endpoint.&lt;/p&gt;  &lt;p&gt;By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a &lt;currency&gt;100&lt;/currency&gt; price, they’ll be billed &lt;currency&gt;100&lt;/currency&gt; immediately. If on May 15 they switch to a &lt;currency&gt;200&lt;/currency&gt; price, then on June 1 they’ll be billed &lt;currency&gt;250&lt;/currency&gt; (&lt;currency&gt;200&lt;/currency&gt; for a renewal of her subscription, plus a &lt;currency&gt;50&lt;/currency&gt; prorating adjustment for half of the previous month’s &lt;currency&gt;100&lt;/currency&gt; difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.&lt;/p&gt;  &lt;p&gt;Switching prices does not normally change the billing date or generate an immediate charge unless:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;The billing interval is changed (for example, from monthly to yearly).&lt;/li&gt; &lt;li&gt;The subscription moves from free to paid.&lt;/li&gt; &lt;li&gt;A trial starts or ends.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how &lt;a href&#x3D;\&quot;/billing/subscriptions/upgrade-downgrade#immediate-payment\&quot;&gt;Stripe immediately attempts payment for subscription changes&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;If you want to charge for an upgrade immediately, pass &lt;code&gt;proration_behavior&lt;/code&gt; as &lt;code&gt;always_invoice&lt;/code&gt; to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass &lt;code&gt;create_prorations&lt;/code&gt;, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually &lt;a href&#x3D;\&quot;/docs/api/invoices/create\&quot;&gt;invoice the customer&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;If you don’t want to prorate, set the &lt;code&gt;proration_behavior&lt;/code&gt; option to &lt;code&gt;none&lt;/code&gt;. With this option, the customer is billed &lt;currency&gt;100&lt;/currency&gt; on May 1 and &lt;currency&gt;200&lt;/currency&gt; on June 1. Similarly, if you set &lt;code&gt;proration_behavior&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt; when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.&lt;/p&gt;  &lt;p&gt;Updating the quantity on a subscription many times in an hour may result in &lt;a href&#x3D;\&quot;/docs/rate-limits\&quot;&gt;rate limiting&lt;/a&gt;. If you need to bill for a frequently changing quantity, consider integrating &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/usage-based\&quot;&gt;usage-based billing&lt;/a&gt; instead.&lt;/p&gt;
    # @required @param subscription_exposed_id [String?]
    # @optional @param add_invoice_items [Array(Stripe::AddInvoiceItemEntry)?] A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
    # @optional @param application_fee_percent [Stripe::PostSubscriptionsRequestApplicationFeePercent?]
    # @optional @param automatic_tax [Stripe::AutomaticTaxConfig?]
    # @optional @param billing_cycle_anchor [String?] Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    # @optional @param billing_thresholds [Stripe::PostSubscriptionsRequestBillingThresholds?]
    # @optional @param cancel_at [Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt?]
    # @optional @param cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
    # @optional @param cancellation_details [Stripe::CancellationDetailsParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    # @optional @param coupon [String?] The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param days_until_due [Int32?] Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    # @optional @param default_source [String?]
    # @optional @param default_tax_rates [Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates?]
    # @optional @param description [String?]
    # @optional @param discounts [Stripe::PostSubscriptionsRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param invoice_settings [Stripe::InvoiceSettingsParam?]
    # @optional @param items [Array(Stripe::SubscriptionItemUpdateParams)?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
    # @optional @param on_behalf_of [String?]
    # @optional @param pause_collection [Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection?]
    # @optional @param payment_behavior [String?] Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_item_interval [Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval?]
    # @optional @param promotion_code [String?] The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
    # @optional @param proration_date [Int32?] If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#upcoming_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
    # @optional @param transfer_data [Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData?]
    # @optional @param trial_end [Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd?]
    # @optional @param trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param trial_settings [Stripe::TrialSettingsConfig?]
    # @return nil
    def post_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      billing_cycle_anchor : String? = nil,
      billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      cancel_at : Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil,
      cancel_at_period_end : Bool? = nil,
      cancellation_details : Stripe::CancellationDetailsParam? = nil,
      collection_method : String? = nil,
      coupon : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      items : Array(Stripe::SubscriptionItemUpdateParams)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      off_session : Bool? = nil,
      on_behalf_of : String? = nil,
      pause_collection : Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil,
      payment_behavior : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      promotion_code : String? = nil,
      proration_behavior : String? = nil,
      proration_date : Int64? = nil,
      transfer_data : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData? = nil,
      trial_end : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd? = nil,
      trial_from_plan : Bool? = nil,
      trial_settings : Stripe::TrialSettingsConfig? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, cancellation_details: cancellation_details, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, invoice_settings: invoice_settings, items: items, metadata: metadata, off_session: off_session, on_behalf_of: on_behalf_of, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_settings: trial_settings).execute(&block)
    end

    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_SUBSCRIPTION_EXPOSED_ID = 5000
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_BILLING_CYCLE_ANCHOR    = 5000
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_BILLING_CYCLE_ANCHOR  = String.static_array("now", "unchanged")
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_COLLECTION_METHOD     = String.static_array("charge_automatically", "send_invoice")
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_COUPON                  = 5000
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD  = 5000
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_DEFAULT_SOURCE        = String.static_array("")
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_DESCRIPTION           = String.static_array("")
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_ON_BEHALF_OF          = String.static_array("")
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_PAYMENT_BEHAVIOR      = String.static_array("allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete")
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_PROMOTION_CODE          = 5000
    POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_PRORATION_BEHAVIOR    = String.static_array("always_invoice", "create_prorations", "none")

    # @return Crest::Request
    def build_api_request_for_post_subscriptions_subscription_exposed_id(
      *,
      subscription_exposed_id : String? = nil,
      add_invoice_items : Array(Stripe::AddInvoiceItemEntry)? = nil,
      application_fee_percent : Stripe::PostSubscriptionsRequestApplicationFeePercent? = nil,
      automatic_tax : Stripe::AutomaticTaxConfig? = nil,
      billing_cycle_anchor : String? = nil,
      billing_thresholds : Stripe::PostSubscriptionsRequestBillingThresholds? = nil,
      cancel_at : Stripe::PostSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil,
      cancel_at_period_end : Bool? = nil,
      cancellation_details : Stripe::CancellationDetailsParam? = nil,
      collection_method : String? = nil,
      coupon : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Stripe::PostSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostSubscriptionsRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      invoice_settings : Stripe::InvoiceSettingsParam? = nil,
      items : Array(Stripe::SubscriptionItemUpdateParams)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      off_session : Bool? = nil,
      on_behalf_of : String? = nil,
      pause_collection : Stripe::PostSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil,
      payment_behavior : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_item_interval : Stripe::PostSubscriptionsRequestPendingInvoiceItemInterval? = nil,
      promotion_code : String? = nil,
      proration_behavior : String? = nil,
      proration_date : Int64? = nil,
      transfer_data : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTransferData? = nil,
      trial_end : Stripe::PostSubscriptionsSubscriptionExposedIdRequestTrialEnd? = nil,
      trial_from_plan : Bool? = nil,
      trial_settings : Stripe::TrialSettingsConfig? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: SubscriptionsApi.post_subscriptions_subscription_exposed_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"subscription_exposed_id\" is required and cannot be null") if subscription_exposed_id.nil?
        unless (_subscription_exposed_id = subscription_exposed_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription_exposed_id", subscription_exposed_id.to_s.size, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_SUBSCRIPTION_EXPOSED_ID)
        end
        unless (_add_invoice_items = add_invoice_items).nil?
          OpenApi::ContainerValidator.validate(container: _add_invoice_items) if _add_invoice_items.is_a?(Array)
        end
        unless (_application_fee_percent = application_fee_percent).nil?
          _application_fee_percent.validate if _application_fee_percent.is_a?(OpenApi::Validatable)
        end
        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_billing_cycle_anchor = billing_cycle_anchor).nil?
          OpenApi::EnumValidator.validate("billing_cycle_anchor", _billing_cycle_anchor, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_BILLING_CYCLE_ANCHOR)
        end
        unless (_billing_thresholds = billing_thresholds).nil?
          _billing_thresholds.validate if _billing_thresholds.is_a?(OpenApi::Validatable)
        end
        unless (_cancel_at = cancel_at).nil?
          _cancel_at.validate if _cancel_at.is_a?(OpenApi::Validatable)
        end

        unless (_cancellation_details = cancellation_details).nil?
          _cancellation_details.validate if _cancellation_details.is_a?(OpenApi::Validatable)
        end
        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_COLLECTION_METHOD)
        end
        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_COUPON)
        end

        unless (_default_payment_method = default_payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("default_payment_method", default_payment_method.to_s.size, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD)
        end
        unless (_default_source = default_source).nil?
          OpenApi::EnumValidator.validate("default_source", _default_source, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_DEFAULT_SOURCE)
        end
        unless (_default_tax_rates = default_tax_rates).nil?
          _default_tax_rates.validate if _default_tax_rates.is_a?(OpenApi::Validatable)
        end
        unless (_description = description).nil?
          OpenApi::EnumValidator.validate("description", _description, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_DESCRIPTION)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_invoice_settings = invoice_settings).nil?
          _invoice_settings.validate if _invoice_settings.is_a?(OpenApi::Validatable)
        end
        unless (_items = items).nil?
          OpenApi::ContainerValidator.validate(container: _items) if _items.is_a?(Array)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end

        unless (_on_behalf_of = on_behalf_of).nil?
          OpenApi::EnumValidator.validate("on_behalf_of", _on_behalf_of, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_ON_BEHALF_OF)
        end
        unless (_pause_collection = pause_collection).nil?
          _pause_collection.validate if _pause_collection.is_a?(OpenApi::Validatable)
        end
        unless (_payment_behavior = payment_behavior).nil?
          OpenApi::EnumValidator.validate("payment_behavior", _payment_behavior, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_PAYMENT_BEHAVIOR)
        end
        unless (_payment_settings = payment_settings).nil?
          _payment_settings.validate if _payment_settings.is_a?(OpenApi::Validatable)
        end
        unless (_pending_invoice_item_interval = pending_invoice_item_interval).nil?
          _pending_invoice_item_interval.validate if _pending_invoice_item_interval.is_a?(OpenApi::Validatable)
        end
        unless (_promotion_code = promotion_code).nil?
          OpenApi::PrimitiveValidator.validate_max_length("promotion_code", promotion_code.to_s.size, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_MAX_LENGTH_FOR_PROMOTION_CODE)
        end
        unless (_proration_behavior = proration_behavior).nil?
          OpenApi::EnumValidator.validate("proration_behavior", _proration_behavior, POST_SUBSCRIPTIONS_SUBSCRIPTION_EXPOSED_ID_VALID_VALUES_FOR_PRORATION_BEHAVIOR)
        end

        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
        unless (_trial_end = trial_end).nil?
          _trial_end.validate if _trial_end.is_a?(OpenApi::Validatable)
        end

        unless (_trial_settings = trial_settings).nil?
          _trial_settings.validate if _trial_settings.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/subscriptions/{subscription_exposed_id}".sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(add_invoice_items.to_json), "add_invoice_items")) if !add_invoice_items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(application_fee_percent.to_json), "application_fee_percent")) if !application_fee_percent.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_tax.to_json), "automatic_tax")) if !automatic_tax.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("billing_cycle_anchor", billing_cycle_anchor.to_s) if !billing_cycle_anchor.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(billing_thresholds.to_json), "billing_thresholds")) if !billing_thresholds.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cancel_at.to_json), "cancel_at")) if !cancel_at.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("cancel_at_period_end", cancel_at_period_end.to_s) if !cancel_at_period_end.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cancellation_details.to_json), "cancellation_details")) if !cancellation_details.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("collection_method", collection_method.to_s) if !collection_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("coupon", coupon.to_s) if !coupon.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("days_until_due", days_until_due.to_s) if !days_until_due.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("default_payment_method", default_payment_method.to_s) if !default_payment_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("default_source", default_source.to_s) if !default_source.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(default_tax_rates.to_json), "default_tax_rates")) if !default_tax_rates.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(discounts.to_json), "discounts")) if !discounts.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(invoice_settings.to_json), "invoice_settings")) if !invoice_settings.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(items.to_json), "items")) if !items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("off_session", off_session.to_s) if !off_session.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("on_behalf_of", on_behalf_of.to_s) if !on_behalf_of.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(pause_collection.to_json), "pause_collection")) if !pause_collection.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_behavior", payment_behavior.to_s) if !payment_behavior.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_settings.to_json), "payment_settings")) if !payment_settings.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(pending_invoice_item_interval.to_json), "pending_invoice_item_interval")) if !pending_invoice_item_interval.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("promotion_code", promotion_code.to_s) if !promotion_code.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("proration_behavior", proration_behavior.to_s) if !proration_behavior.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("proration_date", proration_date.to_s) if !proration_date.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(trial_end.to_json), "trial_end")) if !trial_end.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("trial_from_plan", trial_from_plan.to_s) if !trial_from_plan.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(trial_settings.to_json), "trial_settings")) if !trial_settings.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "SubscriptionsApi.post_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
