#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/bbpos_wise_pose"
require "../models/cart"
require "../models/create_location_address_param"
require "../models/deleted_terminal_configuration"
require "../models/deleted_terminal_location"
require "../models/deleted_terminal_reader"
require "../models/error"
require "../models/get_terminal_configurations_configuration200_response"
require "../models/get_terminal_locations_location200_response"
require "../models/get_terminal_readers_reader200_response"

require "../models/optional_fields_address"
require "../models/post_accounts_request_metadata"
require "../models/post_terminal_configurations_configuration_request_bbpos_wisepos_e"
require "../models/post_terminal_configurations_configuration_request_reboot_window"
require "../models/post_terminal_configurations_configuration_request_stripe_s700"
require "../models/post_terminal_configurations_configuration_request_verifone_p400"
require "../models/post_terminal_configurations_request_offline"
require "../models/post_terminal_configurations_request_tipping"
require "../models/process_config"
require "../models/process_setup_config"
require "../models/reboot_window"
require "../models/stripe_s700"
require "../models/terminal_configuration"
require "../models/terminal_configuration_configuration_list"
require "../models/terminal_connection_token"
require "../models/terminal_location"
require "../models/terminal_location_location_list"
require "../models/terminal_reader"
require "../models/terminal_reader_retrieve_reader"
require "../models/verifone_p400"

module Stripe
  class TerminalApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Deletes a <code>Configuration</code> object.</p>
    # @required @param configuration [String?]
    # @return [Stripe::DeletedTerminalConfiguration]
    def delete_terminal_configurations_configuration(
      *,
      configuration : String? = nil
    ) : Stripe::DeletedTerminalConfiguration
      data, _status_code, _headers = delete_terminal_configurations_configuration_with_http_info(configuration: configuration)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @return [Tuple(Stripe::DeletedTerminalConfiguration, Integer, Hash)] Stripe::DeletedTerminalConfiguration, response status code and response headers
    def delete_terminal_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil
    ) : Tuple(Stripe::DeletedTerminalConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_terminal_configurations_configuration(configuration: configuration)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#delete_terminal_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedTerminalConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @return nil
    def delete_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_terminal_configurations_configuration(configuration: configuration).execute(&block)
    end

    DELETE_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000

    # @return Crest::Request
    def build_api_request_for_delete_terminal_configurations_configuration(
      *,
      configuration : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.delete_terminal_configurations_configuration ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, DELETE_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "TerminalApi.delete_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>Location</code> object.</p>
    # @required @param location [String?]
    # @return [Stripe::DeletedTerminalLocation]
    def delete_terminal_locations_location(
      *,
      location : String? = nil
    ) : Stripe::DeletedTerminalLocation
      data, _status_code, _headers = delete_terminal_locations_location_with_http_info(location: location)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @required @param location [String?]
    # @return [Tuple(Stripe::DeletedTerminalLocation, Integer, Hash)] Stripe::DeletedTerminalLocation, response status code and response headers
    def delete_terminal_locations_location_with_http_info(
      *,
      location : String? = nil
    ) : Tuple(Stripe::DeletedTerminalLocation, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_terminal_locations_location(location: location)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#delete_terminal_locations_location\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedTerminalLocation.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @required @param location [String?]
    # @return nil
    def delete_terminal_locations_location(
      *,
      location : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_terminal_locations_location(location: location).execute(&block)
    end

    DELETE_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION = 5000

    # @return Crest::Request
    def build_api_request_for_delete_terminal_locations_location(
      *,
      location : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.delete_terminal_locations_location ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"location\" is required and cannot be null") if location.nil?
        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, DELETE_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "TerminalApi.delete_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>Reader</code> object.</p>
    # @required @param reader [String?]
    # @return [Stripe::DeletedTerminalReader]
    def delete_terminal_readers_reader(
      *,
      reader : String? = nil
    ) : Stripe::DeletedTerminalReader
      data, _status_code, _headers = delete_terminal_readers_reader_with_http_info(reader: reader)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param reader [String?]
    # @return [Tuple(Stripe::DeletedTerminalReader, Integer, Hash)] Stripe::DeletedTerminalReader, response status code and response headers
    def delete_terminal_readers_reader_with_http_info(
      *,
      reader : String? = nil
    ) : Tuple(Stripe::DeletedTerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_terminal_readers_reader(reader: reader)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#delete_terminal_readers_reader\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedTerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param reader [String?]
    # @return nil
    def delete_terminal_readers_reader(
      *,
      reader : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_terminal_readers_reader(reader: reader).execute(&block)
    end

    DELETE_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_delete_terminal_readers_reader(
      *,
      reader : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.delete_terminal_readers_reader ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, DELETE_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "TerminalApi.delete_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Configuration</code> objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param is_account_default [Bool?] if present, only return the account default or non-default configurations.
    # @return [Stripe::TerminalConfigurationConfigurationList]
    def get_terminal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      is_account_default : Bool? = nil
    ) : Stripe::TerminalConfigurationConfigurationList
      data, _status_code, _headers = get_terminal_configurations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, is_account_default: is_account_default)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param is_account_default [Bool?] if present, only return the account default or non-default configurations.
    # @return [Tuple(Stripe::TerminalConfigurationConfigurationList, Integer, Hash)] Stripe::TerminalConfigurationConfigurationList, response status code and response headers
    def get_terminal_configurations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      is_account_default : Bool? = nil
    ) : Tuple(Stripe::TerminalConfigurationConfigurationList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_configurations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, is_account_default: is_account_default)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#get_terminal_configurations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalConfigurationConfigurationList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param is_account_default [Bool?] if present, only return the account default or non-default configurations.
    # @return nil
    def get_terminal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      is_account_default : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_configurations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, is_account_default: is_account_default).execute(&block)
    end

    GET_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      is_account_default : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.get_terminal_configurations ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["is_account_default"] = is_account_default.to_s if !is_account_default.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Configuration</code> object.</p>
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::GetTerminalConfigurationsConfiguration200Response]
    def get_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::GetTerminalConfigurationsConfiguration200Response
      data, _status_code, _headers = get_terminal_configurations_configuration_with_http_info(configuration: configuration, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::GetTerminalConfigurationsConfiguration200Response, Integer, Hash)] Stripe::GetTerminalConfigurationsConfiguration200Response, response status code and response headers
    def get_terminal_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::GetTerminalConfigurationsConfiguration200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_configurations_configuration(configuration: configuration, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#get_terminal_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalConfigurationsConfiguration200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_configurations_configuration(configuration: configuration, expand: expand).execute(&block)
    end

    GET_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.get_terminal_configurations_configuration ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, GET_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Location</code> objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TerminalLocationLocationList]
    def get_terminal_locations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TerminalLocationLocationList
      data, _status_code, _headers = get_terminal_locations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TerminalLocationLocationList, Integer, Hash)] Stripe::TerminalLocationLocationList, response status code and response headers
    def get_terminal_locations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TerminalLocationLocationList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_locations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#get_terminal_locations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalLocationLocationList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_locations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_locations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_locations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.get_terminal_locations ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_locations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Location</code> object.</p>
    # @required @param location [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::GetTerminalLocationsLocation200Response]
    def get_terminal_locations_location(
      *,
      location : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::GetTerminalLocationsLocation200Response
      data, _status_code, _headers = get_terminal_locations_location_with_http_info(location: location, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @required @param location [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::GetTerminalLocationsLocation200Response, Integer, Hash)] Stripe::GetTerminalLocationsLocation200Response, response status code and response headers
    def get_terminal_locations_location_with_http_info(
      *,
      location : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::GetTerminalLocationsLocation200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_locations_location(location: location, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#get_terminal_locations_location\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalLocationsLocation200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @required @param location [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_locations_location(
      *,
      location : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_locations_location(location: location, expand: expand).execute(&block)
    end

    GET_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_locations_location(
      *,
      location : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.get_terminal_locations_location ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"location\" is required and cannot be null") if location.nil?
        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, GET_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Reader</code> objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param location [String?] A location ID to filter the response list to only readers at the specific location
    # @optional @param status [String?] A status filter to filter readers to only offline or online readers
    # @optional @param device_type [String?] Filters readers by device type
    # @optional @param serial_number [String?] Filters readers by serial number
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TerminalReaderRetrieveReader]
    def get_terminal_readers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      location : String? = nil,
      status : String? = nil,
      device_type : String? = nil,
      serial_number : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TerminalReaderRetrieveReader
      data, _status_code, _headers = get_terminal_readers_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, location: location, status: status, device_type: device_type, serial_number: serial_number, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param location [String?] A location ID to filter the response list to only readers at the specific location
    # @optional @param status [String?] A status filter to filter readers to only offline or online readers
    # @optional @param device_type [String?] Filters readers by device type
    # @optional @param serial_number [String?] Filters readers by serial number
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TerminalReaderRetrieveReader, Integer, Hash)] Stripe::TerminalReaderRetrieveReader, response status code and response headers
    def get_terminal_readers_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      location : String? = nil,
      status : String? = nil,
      device_type : String? = nil,
      serial_number : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TerminalReaderRetrieveReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_readers(ending_before: ending_before, starting_after: starting_after, limit: limit, location: location, status: status, device_type: device_type, serial_number: serial_number, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#get_terminal_readers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReaderRetrieveReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param location [String?] A location ID to filter the response list to only readers at the specific location
    # @optional @param status [String?] A status filter to filter readers to only offline or online readers
    # @optional @param device_type [String?] Filters readers by device type
    # @optional @param serial_number [String?] Filters readers by serial number
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_readers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      location : String? = nil,
      status : String? = nil,
      device_type : String? = nil,
      serial_number : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_readers(ending_before: ending_before, starting_after: starting_after, limit: limit, location: location, status: status, device_type: device_type, serial_number: serial_number, expand: expand).execute(&block)
    end

    GET_TERMINAL_READERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TERMINAL_READERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TERMINAL_READERS_MAX_LENGTH_FOR_LOCATION       = 5000
    GET_TERMINAL_READERS_VALID_VALUES_FOR_STATUS       = String.static_array("offline", "online")
    GET_TERMINAL_READERS_VALID_VALUES_FOR_DEVICE_TYPE  = String.static_array("bbpos_chipper2x", "bbpos_wisepad3", "bbpos_wisepos_e", "mobile_phone_reader", "simulated_wisepos_e", "stripe_m2", "stripe_s700", "verifone_P400")
    GET_TERMINAL_READERS_MAX_LENGTH_FOR_SERIAL_NUMBER  = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_readers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      location : String? = nil,
      status : String? = nil,
      device_type : String? = nil,
      serial_number : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.get_terminal_readers ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TERMINAL_READERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TERMINAL_READERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, GET_TERMINAL_READERS_MAX_LENGTH_FOR_LOCATION)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TERMINAL_READERS_VALID_VALUES_FOR_STATUS)
        end
        unless (_device_type = device_type).nil?
          OpenApi::EnumValidator.validate("device_type", _device_type, GET_TERMINAL_READERS_VALID_VALUES_FOR_DEVICE_TYPE)
        end
        unless (_serial_number = serial_number).nil?
          OpenApi::PrimitiveValidator.validate_max_length("serial_number", serial_number.to_s.size, GET_TERMINAL_READERS_MAX_LENGTH_FOR_SERIAL_NUMBER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["location"] = location.to_s if !location.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["device_type"] = device_type.to_s if !device_type.nil?
      query_params["serial_number"] = serial_number.to_s if !serial_number.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_readers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Reader</code> object.</p>
    # @required @param reader [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::GetTerminalReadersReader200Response]
    def get_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::GetTerminalReadersReader200Response
      data, _status_code, _headers = get_terminal_readers_reader_with_http_info(reader: reader, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::GetTerminalReadersReader200Response, Integer, Hash)] Stripe::GetTerminalReadersReader200Response, response status code and response headers
    def get_terminal_readers_reader_with_http_info(
      *,
      reader : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::GetTerminalReadersReader200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_readers_reader(reader: reader, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#get_terminal_readers_reader\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalReadersReader200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_readers_reader(reader: reader, expand: expand).execute(&block)
    end

    GET_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.get_terminal_readers_reader ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, GET_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Configuration</code> object.</p>
    # @optional @param bbpos_wisepos_e [Stripe::BbposWisePose?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] Name of the configuration
    # @optional @param offline [Stripe::PostTerminalConfigurationsRequestOffline?]
    # @optional @param reboot_window [Stripe::RebootWindow?]
    # @optional @param stripe_s700 [Stripe::StripeS700?]
    # @optional @param tipping [Stripe::PostTerminalConfigurationsRequestTipping?]
    # @optional @param verifone_p400 [Stripe::VerifoneP400?]
    # @return [Stripe::TerminalConfiguration]
    def post_terminal_configurations(
      *,
      bbpos_wisepos_e : Stripe::BbposWisePose? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      offline : Stripe::PostTerminalConfigurationsRequestOffline? = nil,
      reboot_window : Stripe::RebootWindow? = nil,
      stripe_s700 : Stripe::StripeS700? = nil,
      tipping : Stripe::PostTerminalConfigurationsRequestTipping? = nil,
      verifone_p400 : Stripe::VerifoneP400? = nil
    ) : Stripe::TerminalConfiguration
      data, _status_code, _headers = post_terminal_configurations_with_http_info(bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, name: name, offline: offline, reboot_window: reboot_window, stripe_s700: stripe_s700, tipping: tipping, verifone_p400: verifone_p400)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @optional @param bbpos_wisepos_e [Stripe::BbposWisePose?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] Name of the configuration
    # @optional @param offline [Stripe::PostTerminalConfigurationsRequestOffline?]
    # @optional @param reboot_window [Stripe::RebootWindow?]
    # @optional @param stripe_s700 [Stripe::StripeS700?]
    # @optional @param tipping [Stripe::PostTerminalConfigurationsRequestTipping?]
    # @optional @param verifone_p400 [Stripe::VerifoneP400?]
    # @return [Tuple(Stripe::TerminalConfiguration, Integer, Hash)] Stripe::TerminalConfiguration, response status code and response headers
    def post_terminal_configurations_with_http_info(
      *,
      bbpos_wisepos_e : Stripe::BbposWisePose? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      offline : Stripe::PostTerminalConfigurationsRequestOffline? = nil,
      reboot_window : Stripe::RebootWindow? = nil,
      stripe_s700 : Stripe::StripeS700? = nil,
      tipping : Stripe::PostTerminalConfigurationsRequestTipping? = nil,
      verifone_p400 : Stripe::VerifoneP400? = nil
    ) : Tuple(Stripe::TerminalConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_configurations(bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, name: name, offline: offline, reboot_window: reboot_window, stripe_s700: stripe_s700, tipping: tipping, verifone_p400: verifone_p400)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_configurations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @optional @param bbpos_wisepos_e [Stripe::BbposWisePose?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] Name of the configuration
    # @optional @param offline [Stripe::PostTerminalConfigurationsRequestOffline?]
    # @optional @param reboot_window [Stripe::RebootWindow?]
    # @optional @param stripe_s700 [Stripe::StripeS700?]
    # @optional @param tipping [Stripe::PostTerminalConfigurationsRequestTipping?]
    # @optional @param verifone_p400 [Stripe::VerifoneP400?]
    # @return nil
    def post_terminal_configurations(
      *,
      bbpos_wisepos_e : Stripe::BbposWisePose? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      offline : Stripe::PostTerminalConfigurationsRequestOffline? = nil,
      reboot_window : Stripe::RebootWindow? = nil,
      stripe_s700 : Stripe::StripeS700? = nil,
      tipping : Stripe::PostTerminalConfigurationsRequestTipping? = nil,
      verifone_p400 : Stripe::VerifoneP400? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_configurations(bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, name: name, offline: offline, reboot_window: reboot_window, stripe_s700: stripe_s700, tipping: tipping, verifone_p400: verifone_p400).execute(&block)
    end

    POST_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_NAME = 100

    # @return Crest::Request
    def build_api_request_for_post_terminal_configurations(
      *,
      bbpos_wisepos_e : Stripe::BbposWisePose? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      offline : Stripe::PostTerminalConfigurationsRequestOffline? = nil,
      reboot_window : Stripe::RebootWindow? = nil,
      stripe_s700 : Stripe::StripeS700? = nil,
      tipping : Stripe::PostTerminalConfigurationsRequestTipping? = nil,
      verifone_p400 : Stripe::VerifoneP400? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_configurations ..." }
      end

      if client_side_validation?
        unless (_bbpos_wisepos_e = bbpos_wisepos_e).nil?
          _bbpos_wisepos_e.validate if _bbpos_wisepos_e.is_a?(OpenApi::Validatable)
        end

        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_NAME)
        end
        unless (_offline = offline).nil?
          _offline.validate if _offline.is_a?(OpenApi::Validatable)
        end
        unless (_reboot_window = reboot_window).nil?
          _reboot_window.validate if _reboot_window.is_a?(OpenApi::Validatable)
        end
        unless (_stripe_s700 = stripe_s700).nil?
          _stripe_s700.validate if _stripe_s700.is_a?(OpenApi::Validatable)
        end
        unless (_tipping = tipping).nil?
          _tipping.validate if _tipping.is_a?(OpenApi::Validatable)
        end
        unless (_verifone_p400 = verifone_p400).nil?
          _verifone_p400.validate if _verifone_p400.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(bbpos_wisepos_e.to_json), "bbpos_wisepos_e")) if !bbpos_wisepos_e.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(offline.to_json), "offline")) if !offline.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(reboot_window.to_json), "reboot_window")) if !reboot_window.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(stripe_s700.to_json), "stripe_s700")) if !stripe_s700.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(tipping.to_json), "tipping")) if !tipping.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(verifone_p400.to_json), "verifone_p400")) if !verifone_p400.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a new <code>Configuration</code> object.</p>
    # @required @param configuration [String?]
    # @optional @param bbpos_wisepos_e [Stripe::PostTerminalConfigurationsConfigurationRequestBbposWiseposE?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] Name of the configuration
    # @optional @param offline [Stripe::PostTerminalConfigurationsRequestOffline?]
    # @optional @param reboot_window [Stripe::PostTerminalConfigurationsConfigurationRequestRebootWindow?]
    # @optional @param stripe_s700 [Stripe::PostTerminalConfigurationsConfigurationRequestStripeS700?]
    # @optional @param tipping [Stripe::PostTerminalConfigurationsRequestTipping?]
    # @optional @param verifone_p400 [Stripe::PostTerminalConfigurationsConfigurationRequestVerifoneP400?]
    # @return [Stripe::GetTerminalConfigurationsConfiguration200Response]
    def post_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      bbpos_wisepos_e : Stripe::PostTerminalConfigurationsConfigurationRequestBbposWiseposE? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      offline : Stripe::PostTerminalConfigurationsRequestOffline? = nil,
      reboot_window : Stripe::PostTerminalConfigurationsConfigurationRequestRebootWindow? = nil,
      stripe_s700 : Stripe::PostTerminalConfigurationsConfigurationRequestStripeS700? = nil,
      tipping : Stripe::PostTerminalConfigurationsRequestTipping? = nil,
      verifone_p400 : Stripe::PostTerminalConfigurationsConfigurationRequestVerifoneP400? = nil
    ) : Stripe::GetTerminalConfigurationsConfiguration200Response
      data, _status_code, _headers = post_terminal_configurations_configuration_with_http_info(configuration: configuration, bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, name: name, offline: offline, reboot_window: reboot_window, stripe_s700: stripe_s700, tipping: tipping, verifone_p400: verifone_p400)
      data
    end

    # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param bbpos_wisepos_e [Stripe::PostTerminalConfigurationsConfigurationRequestBbposWiseposE?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] Name of the configuration
    # @optional @param offline [Stripe::PostTerminalConfigurationsRequestOffline?]
    # @optional @param reboot_window [Stripe::PostTerminalConfigurationsConfigurationRequestRebootWindow?]
    # @optional @param stripe_s700 [Stripe::PostTerminalConfigurationsConfigurationRequestStripeS700?]
    # @optional @param tipping [Stripe::PostTerminalConfigurationsRequestTipping?]
    # @optional @param verifone_p400 [Stripe::PostTerminalConfigurationsConfigurationRequestVerifoneP400?]
    # @return [Tuple(Stripe::GetTerminalConfigurationsConfiguration200Response, Integer, Hash)] Stripe::GetTerminalConfigurationsConfiguration200Response, response status code and response headers
    def post_terminal_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil,
      bbpos_wisepos_e : Stripe::PostTerminalConfigurationsConfigurationRequestBbposWiseposE? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      offline : Stripe::PostTerminalConfigurationsRequestOffline? = nil,
      reboot_window : Stripe::PostTerminalConfigurationsConfigurationRequestRebootWindow? = nil,
      stripe_s700 : Stripe::PostTerminalConfigurationsConfigurationRequestStripeS700? = nil,
      tipping : Stripe::PostTerminalConfigurationsRequestTipping? = nil,
      verifone_p400 : Stripe::PostTerminalConfigurationsConfigurationRequestVerifoneP400? = nil
    ) : Tuple(Stripe::GetTerminalConfigurationsConfiguration200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_configurations_configuration(configuration: configuration, bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, name: name, offline: offline, reboot_window: reboot_window, stripe_s700: stripe_s700, tipping: tipping, verifone_p400: verifone_p400)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalConfigurationsConfiguration200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param bbpos_wisepos_e [Stripe::PostTerminalConfigurationsConfigurationRequestBbposWiseposE?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param name [String?] Name of the configuration
    # @optional @param offline [Stripe::PostTerminalConfigurationsRequestOffline?]
    # @optional @param reboot_window [Stripe::PostTerminalConfigurationsConfigurationRequestRebootWindow?]
    # @optional @param stripe_s700 [Stripe::PostTerminalConfigurationsConfigurationRequestStripeS700?]
    # @optional @param tipping [Stripe::PostTerminalConfigurationsRequestTipping?]
    # @optional @param verifone_p400 [Stripe::PostTerminalConfigurationsConfigurationRequestVerifoneP400?]
    # @return nil
    def post_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      bbpos_wisepos_e : Stripe::PostTerminalConfigurationsConfigurationRequestBbposWiseposE? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      offline : Stripe::PostTerminalConfigurationsRequestOffline? = nil,
      reboot_window : Stripe::PostTerminalConfigurationsConfigurationRequestRebootWindow? = nil,
      stripe_s700 : Stripe::PostTerminalConfigurationsConfigurationRequestStripeS700? = nil,
      tipping : Stripe::PostTerminalConfigurationsRequestTipping? = nil,
      verifone_p400 : Stripe::PostTerminalConfigurationsConfigurationRequestVerifoneP400? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_configurations_configuration(configuration: configuration, bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, name: name, offline: offline, reboot_window: reboot_window, stripe_s700: stripe_s700, tipping: tipping, verifone_p400: verifone_p400).execute(&block)
    end

    POST_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000
    POST_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_NAME          =  100

    # @return Crest::Request
    def build_api_request_for_post_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      bbpos_wisepos_e : Stripe::PostTerminalConfigurationsConfigurationRequestBbposWiseposE? = nil,
      expand : Array(String)? = nil,
      name : String? = nil,
      offline : Stripe::PostTerminalConfigurationsRequestOffline? = nil,
      reboot_window : Stripe::PostTerminalConfigurationsConfigurationRequestRebootWindow? = nil,
      stripe_s700 : Stripe::PostTerminalConfigurationsConfigurationRequestStripeS700? = nil,
      tipping : Stripe::PostTerminalConfigurationsRequestTipping? = nil,
      verifone_p400 : Stripe::PostTerminalConfigurationsConfigurationRequestVerifoneP400? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_configurations_configuration ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, POST_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
        unless (_bbpos_wisepos_e = bbpos_wisepos_e).nil?
          _bbpos_wisepos_e.validate if _bbpos_wisepos_e.is_a?(OpenApi::Validatable)
        end

        unless (_name = name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("name", name.to_s.size, POST_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_NAME)
        end
        unless (_offline = offline).nil?
          _offline.validate if _offline.is_a?(OpenApi::Validatable)
        end
        unless (_reboot_window = reboot_window).nil?
          _reboot_window.validate if _reboot_window.is_a?(OpenApi::Validatable)
        end
        unless (_stripe_s700 = stripe_s700).nil?
          _stripe_s700.validate if _stripe_s700.is_a?(OpenApi::Validatable)
        end
        unless (_tipping = tipping).nil?
          _tipping.validate if _tipping.is_a?(OpenApi::Validatable)
        end
        unless (_verifone_p400 = verifone_p400).nil?
          _verifone_p400.validate if _verifone_p400.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(bbpos_wisepos_e.to_json), "bbpos_wisepos_e")) if !bbpos_wisepos_e.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("name", name.to_s) if !name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(offline.to_json), "offline")) if !offline.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(reboot_window.to_json), "reboot_window")) if !reboot_window.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(stripe_s700.to_json), "stripe_s700")) if !stripe_s700.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(tipping.to_json), "tipping")) if !tipping.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(verifone_p400.to_json), "verifone_p400")) if !verifone_p400.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param location [String?] The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).
    # @return [Stripe::TerminalConnectionToken]
    def post_terminal_connection_tokens(
      *,
      expand : Array(String)? = nil,
      location : String? = nil
    ) : Stripe::TerminalConnectionToken
      data, _status_code, _headers = post_terminal_connection_tokens_with_http_info(expand: expand, location: location)
      data
    end

    # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param location [String?] The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).
    # @return [Tuple(Stripe::TerminalConnectionToken, Integer, Hash)] Stripe::TerminalConnectionToken, response status code and response headers
    def post_terminal_connection_tokens_with_http_info(
      *,
      expand : Array(String)? = nil,
      location : String? = nil
    ) : Tuple(Stripe::TerminalConnectionToken, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_connection_tokens(expand: expand, location: location)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_connection_tokens\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalConnectionToken.from_json(body), status_code, headers)
    end

    # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param location [String?] The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).
    # @return nil
    def post_terminal_connection_tokens(
      *,
      expand : Array(String)? = nil,
      location : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_connection_tokens(expand: expand, location: location).execute(&block)
    end

    POST_TERMINAL_CONNECTION_TOKENS_MAX_LENGTH_FOR_LOCATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_connection_tokens(
      *,
      expand : Array(String)? = nil,
      location : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_connection_tokens ..." }
      end

      if client_side_validation?
        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, POST_TERMINAL_CONNECTION_TOKENS_MAX_LENGTH_FOR_LOCATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/connection_tokens"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("location", location.to_s) if !location.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_connection_tokens",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Location</code> object. For further details, including which address fields are required in each country, see the <a href=\"/docs/terminal/fleet/locations\">Manage locations</a> guide.</p>
    # @required @param address [Stripe::CreateLocationAddressParam?]
    # @required @param display_name [String?] A name for the location.
    # @optional @param configuration_overrides [String?] The ID of a configuration that will be used to customize all readers in this location.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::TerminalLocation]
    def post_terminal_locations(
      *,
      address : Stripe::CreateLocationAddressParam? = nil,
      display_name : String? = nil,
      configuration_overrides : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::TerminalLocation
      data, _status_code, _headers = post_terminal_locations_with_http_info(address: address, display_name: display_name, configuration_overrides: configuration_overrides, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
    # @required @param address [Stripe::CreateLocationAddressParam?]
    # @required @param display_name [String?] A name for the location.
    # @optional @param configuration_overrides [String?] The ID of a configuration that will be used to customize all readers in this location.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::TerminalLocation, Integer, Hash)] Stripe::TerminalLocation, response status code and response headers
    def post_terminal_locations_with_http_info(
      *,
      address : Stripe::CreateLocationAddressParam? = nil,
      display_name : String? = nil,
      configuration_overrides : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::TerminalLocation, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_locations(address: address, display_name: display_name, configuration_overrides: configuration_overrides, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_locations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalLocation.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
    # @required @param address [Stripe::CreateLocationAddressParam?]
    # @required @param display_name [String?] A name for the location.
    # @optional @param configuration_overrides [String?] The ID of a configuration that will be used to customize all readers in this location.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_terminal_locations(
      *,
      address : Stripe::CreateLocationAddressParam? = nil,
      display_name : String? = nil,
      configuration_overrides : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_locations(address: address, display_name: display_name, configuration_overrides: configuration_overrides, expand: expand, metadata: metadata).execute(&block)
    end

    POST_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_DISPLAY_NAME            = 1000
    POST_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_CONFIGURATION_OVERRIDES = 1000

    # @return Crest::Request
    def build_api_request_for_post_terminal_locations(
      *,
      address : Stripe::CreateLocationAddressParam? = nil,
      display_name : String? = nil,
      configuration_overrides : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_locations ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"address\" is required and cannot be null") if address.nil?
        unless (_address = address).nil?
          _address.validate if _address.is_a?(OpenApi::Validatable)
        end
        raise ArgumentError.new("\"display_name\" is required and cannot be null") if display_name.nil?
        unless (_display_name = display_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("display_name", display_name.to_s.size, POST_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_DISPLAY_NAME)
        end
        unless (_configuration_overrides = configuration_overrides).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration_overrides", configuration_overrides.to_s.size, POST_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_CONFIGURATION_OVERRIDES)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(address.to_json), "address")) if !address.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("configuration_overrides", configuration_overrides.to_s) if !configuration_overrides.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("display_name", display_name.to_s) if !display_name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_locations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param location [String?]
    # @optional @param address [Stripe::OptionalFieldsAddress?]
    # @optional @param configuration_overrides [String?]
    # @optional @param display_name [String?] A name for the location.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::GetTerminalLocationsLocation200Response]
    def post_terminal_locations_location(
      *,
      location : String? = nil,
      address : Stripe::OptionalFieldsAddress? = nil,
      configuration_overrides : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::GetTerminalLocationsLocation200Response
      data, _status_code, _headers = post_terminal_locations_location_with_http_info(location: location, address: address, configuration_overrides: configuration_overrides, display_name: display_name, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param location [String?]
    # @optional @param address [Stripe::OptionalFieldsAddress?]
    # @optional @param configuration_overrides [String?]
    # @optional @param display_name [String?] A name for the location.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::GetTerminalLocationsLocation200Response, Integer, Hash)] Stripe::GetTerminalLocationsLocation200Response, response status code and response headers
    def post_terminal_locations_location_with_http_info(
      *,
      location : String? = nil,
      address : Stripe::OptionalFieldsAddress? = nil,
      configuration_overrides : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::GetTerminalLocationsLocation200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_locations_location(location: location, address: address, configuration_overrides: configuration_overrides, display_name: display_name, expand: expand, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_locations_location\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalLocationsLocation200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param location [String?]
    # @optional @param address [Stripe::OptionalFieldsAddress?]
    # @optional @param configuration_overrides [String?]
    # @optional @param display_name [String?] A name for the location.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_terminal_locations_location(
      *,
      location : String? = nil,
      address : Stripe::OptionalFieldsAddress? = nil,
      configuration_overrides : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_locations_location(location: location, address: address, configuration_overrides: configuration_overrides, display_name: display_name, expand: expand, metadata: metadata).execute(&block)
    end

    POST_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION                  = 5000
    POST_TERMINAL_LOCATIONS_LOCATION_VALID_VALUES_FOR_CONFIGURATION_OVERRIDES = String.static_array("")
    POST_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_DISPLAY_NAME              = 1000

    # @return Crest::Request
    def build_api_request_for_post_terminal_locations_location(
      *,
      location : String? = nil,
      address : Stripe::OptionalFieldsAddress? = nil,
      configuration_overrides : String? = nil,
      display_name : String? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_locations_location ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"location\" is required and cannot be null") if location.nil?
        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, POST_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION)
        end
        unless (_address = address).nil?
          _address.validate if _address.is_a?(OpenApi::Validatable)
        end
        unless (_configuration_overrides = configuration_overrides).nil?
          OpenApi::EnumValidator.validate("configuration_overrides", _configuration_overrides, POST_TERMINAL_LOCATIONS_LOCATION_VALID_VALUES_FOR_CONFIGURATION_OVERRIDES)
        end
        unless (_display_name = display_name).nil?
          OpenApi::PrimitiveValidator.validate_max_length("display_name", display_name.to_s.size, POST_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_DISPLAY_NAME)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(address.to_json), "address")) if !address.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("configuration_overrides", configuration_overrides.to_s) if !configuration_overrides.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("display_name", display_name.to_s) if !display_name.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Reader</code> object.</p>
    # @required @param registration_code [String?] A code generated by the reader used for registering to an account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param label [String?] Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
    # @optional @param location [String?] The location to assign the reader to.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::TerminalReader]
    def post_terminal_readers(
      *,
      registration_code : String? = nil,
      expand : Array(String)? = nil,
      label : String? = nil,
      location : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_with_http_info(registration_code: registration_code, expand: expand, label: label, location: location, metadata: metadata)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param registration_code [String?] A code generated by the reader used for registering to an account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param label [String?] Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
    # @optional @param location [String?] The location to assign the reader to.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_with_http_info(
      *,
      registration_code : String? = nil,
      expand : Array(String)? = nil,
      label : String? = nil,
      location : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers(registration_code: registration_code, expand: expand, label: label, location: location, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_readers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param registration_code [String?] A code generated by the reader used for registering to an account.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param label [String?] Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
    # @optional @param location [String?] The location to assign the reader to.
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_terminal_readers(
      *,
      registration_code : String? = nil,
      expand : Array(String)? = nil,
      label : String? = nil,
      location : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers(registration_code: registration_code, expand: expand, label: label, location: location, metadata: metadata).execute(&block)
    end

    POST_TERMINAL_READERS_MAX_LENGTH_FOR_REGISTRATION_CODE = 5000
    POST_TERMINAL_READERS_MAX_LENGTH_FOR_LABEL             = 5000
    POST_TERMINAL_READERS_MAX_LENGTH_FOR_LOCATION          = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers(
      *,
      registration_code : String? = nil,
      expand : Array(String)? = nil,
      label : String? = nil,
      location : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_readers ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"registration_code\" is required and cannot be null") if registration_code.nil?
        unless (_registration_code = registration_code).nil?
          OpenApi::PrimitiveValidator.validate_max_length("registration_code", registration_code.to_s.size, POST_TERMINAL_READERS_MAX_LENGTH_FOR_REGISTRATION_CODE)
        end

        unless (_label = label).nil?
          OpenApi::PrimitiveValidator.validate_max_length("label", label.to_s.size, POST_TERMINAL_READERS_MAX_LENGTH_FOR_LABEL)
        end
        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, POST_TERMINAL_READERS_MAX_LENGTH_FOR_LOCATION)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("label", label.to_s) if !label.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("location", location.to_s) if !location.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("registration_code", registration_code.to_s) if !registration_code.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param reader [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param label [String?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Stripe::GetTerminalReadersReader200Response]
    def post_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(String)? = nil,
      label : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Stripe::GetTerminalReadersReader200Response
      data, _status_code, _headers = post_terminal_readers_reader_with_http_info(reader: reader, expand: expand, label: label, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param label [String?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return [Tuple(Stripe::GetTerminalReadersReader200Response, Integer, Hash)] Stripe::GetTerminalReadersReader200Response, response status code and response headers
    def post_terminal_readers_reader_with_http_info(
      *,
      reader : String? = nil,
      expand : Array(String)? = nil,
      label : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Tuple(Stripe::GetTerminalReadersReader200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader(reader: reader, expand: expand, label: label, metadata: metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalReadersReader200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param label [String?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @return nil
    def post_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(String)? = nil,
      label : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader(reader: reader, expand: expand, label: label, metadata: metadata).execute(&block)
    end

    POST_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER  = 5000
    POST_TERMINAL_READERS_READER_VALID_VALUES_FOR_LABEL = String.static_array("")

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(String)? = nil,
      label : String? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER)
        end

        unless (_label = label).nil?
          OpenApi::EnumValidator.validate("label", _label, POST_TERMINAL_READERS_READER_VALID_VALUES_FOR_LABEL)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("label", label.to_s) if !label.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels the current reader action.</p>
    # @required @param reader [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TerminalReader]
    def post_terminal_readers_reader_cancel_action(
      *,
      reader : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_reader_cancel_action_with_http_info(reader: reader, expand: expand)
      data
    end

    # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_reader_cancel_action_with_http_info(
      *,
      reader : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader_cancel_action(reader: reader, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader_cancel_action\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_terminal_readers_reader_cancel_action(
      *,
      reader : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader_cancel_action(reader: reader, expand: expand).execute(&block)
    end

    POST_TERMINAL_READERS_READER_CANCEL_ACTION_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_cancel_action(
      *,
      reader : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader_cancel_action ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_CANCEL_ACTION_MAX_LENGTH_FOR_READER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/cancel_action".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader_cancel_action",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Initiates a payment flow on a Reader.</p>
    # @required @param reader [String?]
    # @required @param payment_intent [String?] PaymentIntent ID
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param process_config [Stripe::ProcessConfig?]
    # @return [Stripe::TerminalReader]
    def post_terminal_readers_reader_process_payment_intent(
      *,
      reader : String? = nil,
      payment_intent : String? = nil,
      expand : Array(String)? = nil,
      process_config : Stripe::ProcessConfig? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_reader_process_payment_intent_with_http_info(reader: reader, payment_intent: payment_intent, expand: expand, process_config: process_config)
      data
    end

    # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param payment_intent [String?] PaymentIntent ID
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param process_config [Stripe::ProcessConfig?]
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_reader_process_payment_intent_with_http_info(
      *,
      reader : String? = nil,
      payment_intent : String? = nil,
      expand : Array(String)? = nil,
      process_config : Stripe::ProcessConfig? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader_process_payment_intent(reader: reader, payment_intent: payment_intent, expand: expand, process_config: process_config)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader_process_payment_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param payment_intent [String?] PaymentIntent ID
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param process_config [Stripe::ProcessConfig?]
    # @return nil
    def post_terminal_readers_reader_process_payment_intent(
      *,
      reader : String? = nil,
      payment_intent : String? = nil,
      expand : Array(String)? = nil,
      process_config : Stripe::ProcessConfig? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader_process_payment_intent(reader: reader, payment_intent: payment_intent, expand: expand, process_config: process_config).execute(&block)
    end

    POST_TERMINAL_READERS_READER_PROCESS_PAYMENT_INTENT_MAX_LENGTH_FOR_READER         = 5000
    POST_TERMINAL_READERS_READER_PROCESS_PAYMENT_INTENT_MAX_LENGTH_FOR_PAYMENT_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_process_payment_intent(
      *,
      reader : String? = nil,
      payment_intent : String? = nil,
      expand : Array(String)? = nil,
      process_config : Stripe::ProcessConfig? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader_process_payment_intent ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_PROCESS_PAYMENT_INTENT_MAX_LENGTH_FOR_READER)
        end
        raise ArgumentError.new("\"payment_intent\" is required and cannot be null") if payment_intent.nil?
        unless (_payment_intent = payment_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_intent", payment_intent.to_s.size, POST_TERMINAL_READERS_READER_PROCESS_PAYMENT_INTENT_MAX_LENGTH_FOR_PAYMENT_INTENT)
        end

        unless (_process_config = process_config).nil?
          _process_config.validate if _process_config.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/process_payment_intent".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_intent", payment_intent.to_s) if !payment_intent.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(process_config.to_json), "process_config")) if !process_config.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader_process_payment_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Initiates a setup intent flow on a Reader.</p>
    # @required @param reader [String?]
    # @required @param customer_consent_collected [Bool?] Customer Consent Collected
    # @required @param setup_intent [String?] SetupIntent ID
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param process_config [Stripe::ProcessSetupConfig?]
    # @return [Stripe::TerminalReader]
    def post_terminal_readers_reader_process_setup_intent(
      *,
      reader : String? = nil,
      customer_consent_collected : Bool? = nil,
      setup_intent : String? = nil,
      expand : Array(String)? = nil,
      process_config : Stripe::ProcessSetupConfig? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_reader_process_setup_intent_with_http_info(reader: reader, customer_consent_collected: customer_consent_collected, setup_intent: setup_intent, expand: expand, process_config: process_config)
      data
    end

    # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param customer_consent_collected [Bool?] Customer Consent Collected
    # @required @param setup_intent [String?] SetupIntent ID
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param process_config [Stripe::ProcessSetupConfig?]
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_reader_process_setup_intent_with_http_info(
      *,
      reader : String? = nil,
      customer_consent_collected : Bool? = nil,
      setup_intent : String? = nil,
      expand : Array(String)? = nil,
      process_config : Stripe::ProcessSetupConfig? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader_process_setup_intent(reader: reader, customer_consent_collected: customer_consent_collected, setup_intent: setup_intent, expand: expand, process_config: process_config)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader_process_setup_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param customer_consent_collected [Bool?] Customer Consent Collected
    # @required @param setup_intent [String?] SetupIntent ID
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param process_config [Stripe::ProcessSetupConfig?]
    # @return nil
    def post_terminal_readers_reader_process_setup_intent(
      *,
      reader : String? = nil,
      customer_consent_collected : Bool? = nil,
      setup_intent : String? = nil,
      expand : Array(String)? = nil,
      process_config : Stripe::ProcessSetupConfig? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader_process_setup_intent(reader: reader, customer_consent_collected: customer_consent_collected, setup_intent: setup_intent, expand: expand, process_config: process_config).execute(&block)
    end

    POST_TERMINAL_READERS_READER_PROCESS_SETUP_INTENT_MAX_LENGTH_FOR_READER       = 5000
    POST_TERMINAL_READERS_READER_PROCESS_SETUP_INTENT_MAX_LENGTH_FOR_SETUP_INTENT = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_process_setup_intent(
      *,
      reader : String? = nil,
      customer_consent_collected : Bool? = nil,
      setup_intent : String? = nil,
      expand : Array(String)? = nil,
      process_config : Stripe::ProcessSetupConfig? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader_process_setup_intent ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_PROCESS_SETUP_INTENT_MAX_LENGTH_FOR_READER)
        end
        raise ArgumentError.new("\"customer_consent_collected\" is required and cannot be null") if customer_consent_collected.nil?

        raise ArgumentError.new("\"setup_intent\" is required and cannot be null") if setup_intent.nil?
        unless (_setup_intent = setup_intent).nil?
          OpenApi::PrimitiveValidator.validate_max_length("setup_intent", setup_intent.to_s.size, POST_TERMINAL_READERS_READER_PROCESS_SETUP_INTENT_MAX_LENGTH_FOR_SETUP_INTENT)
        end

        unless (_process_config = process_config).nil?
          _process_config.validate if _process_config.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/process_setup_intent".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("customer_consent_collected", customer_consent_collected.to_s) if !customer_consent_collected.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(process_config.to_json), "process_config")) if !process_config.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("setup_intent", setup_intent.to_s) if !setup_intent.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader_process_setup_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Sets reader display to show cart details.</p>
    # @required @param reader [String?]
    # @required @param _type [String?] Type
    # @optional @param cart [Stripe::Cart?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TerminalReader]
    def post_terminal_readers_reader_set_reader_display(
      *,
      reader : String? = nil,
      _type : String? = nil,
      cart : Stripe::Cart? = nil,
      expand : Array(String)? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_reader_set_reader_display_with_http_info(reader: reader, _type: _type, cart: cart, expand: expand)
      data
    end

    # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param _type [String?] Type
    # @optional @param cart [Stripe::Cart?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_reader_set_reader_display_with_http_info(
      *,
      reader : String? = nil,
      _type : String? = nil,
      cart : Stripe::Cart? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader_set_reader_display(reader: reader, _type: _type, cart: cart, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader_set_reader_display\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param _type [String?] Type
    # @optional @param cart [Stripe::Cart?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_terminal_readers_reader_set_reader_display(
      *,
      reader : String? = nil,
      _type : String? = nil,
      cart : Stripe::Cart? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader_set_reader_display(reader: reader, _type: _type, cart: cart, expand: expand).execute(&block)
    end

    POST_TERMINAL_READERS_READER_SET_READER_DISPLAY_MAX_LENGTH_FOR_READER  = 5000
    POST_TERMINAL_READERS_READER_SET_READER_DISPLAY_VALID_VALUES_FOR__TYPE = String.static_array("cart")

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_set_reader_display(
      *,
      reader : String? = nil,
      _type : String? = nil,
      cart : Stripe::Cart? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader_set_reader_display ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_SET_READER_DISPLAY_MAX_LENGTH_FOR_READER)
        end
        raise ArgumentError.new("\"_type\" is required and cannot be null") if _type.nil?
        unless (__type = _type).nil?
          OpenApi::EnumValidator.validate("_type", __type, POST_TERMINAL_READERS_READER_SET_READER_DISPLAY_VALID_VALUES_FOR__TYPE)
        end
        unless (_cart = cart).nil?
          _cart.validate if _cart.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/set_reader_display".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(cart.to_json), "cart")) if !cart.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("type", _type.to_s) if !_type.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader_set_reader_display",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
