#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class TerminalApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Deletes a <code>Configuration</code> object.</p>
    # @required @param configuration [String?]
    # @return [Stripe::DeletedTerminalConfiguration]
    def delete_terminal_configurations_configuration(
      *,
      configuration : String? = nil
    ) : Stripe::DeletedTerminalConfiguration
      data, _status_code, _headers = delete_terminal_configurations_configuration_with_http_info(configuration: configuration)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @return [Tuple(Stripe::DeletedTerminalConfiguration, Integer, Hash)] Stripe::DeletedTerminalConfiguration, response status code and response headers
    def delete_terminal_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil
    ) : Tuple(Stripe::DeletedTerminalConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_terminal_configurations_configuration(configuration: configuration)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#delete_terminal_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedTerminalConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @return nil
    def delete_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_terminal_configurations_configuration(configuration: configuration).execute(&block)
    end

    DELETE_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000

    # @return Crest::Request
    def build_api_request_for_delete_terminal_configurations_configuration(
      *,
      configuration : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.delete_terminal_configurations_configuration ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, DELETE_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "TerminalApi.delete_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>Location</code> object.</p>
    # @required @param location [String?]
    # @return [Stripe::DeletedTerminalLocation]
    def delete_terminal_locations_location(
      *,
      location : String? = nil
    ) : Stripe::DeletedTerminalLocation
      data, _status_code, _headers = delete_terminal_locations_location_with_http_info(location: location)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @required @param location [String?]
    # @return [Tuple(Stripe::DeletedTerminalLocation, Integer, Hash)] Stripe::DeletedTerminalLocation, response status code and response headers
    def delete_terminal_locations_location_with_http_info(
      *,
      location : String? = nil
    ) : Tuple(Stripe::DeletedTerminalLocation, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_terminal_locations_location(location: location)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#delete_terminal_locations_location\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedTerminalLocation.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @required @param location [String?]
    # @return nil
    def delete_terminal_locations_location(
      *,
      location : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_terminal_locations_location(location: location).execute(&block)
    end

    DELETE_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION = 5000

    # @return Crest::Request
    def build_api_request_for_delete_terminal_locations_location(
      *,
      location : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.delete_terminal_locations_location ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"location\" is required and cannot be null") if location.nil?
        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, DELETE_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "TerminalApi.delete_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>Reader</code> object.</p>
    # @required @param reader [String?]
    # @return [Stripe::DeletedTerminalReader]
    def delete_terminal_readers_reader(
      *,
      reader : String? = nil
    ) : Stripe::DeletedTerminalReader
      data, _status_code, _headers = delete_terminal_readers_reader_with_http_info(reader: reader)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param reader [String?]
    # @return [Tuple(Stripe::DeletedTerminalReader, Integer, Hash)] Stripe::DeletedTerminalReader, response status code and response headers
    def delete_terminal_readers_reader_with_http_info(
      *,
      reader : String? = nil
    ) : Tuple(Stripe::DeletedTerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_terminal_readers_reader(reader: reader)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#delete_terminal_readers_reader\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedTerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param reader [String?]
    # @return nil
    def delete_terminal_readers_reader(
      *,
      reader : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_terminal_readers_reader(reader: reader).execute(&block)
    end

    DELETE_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_delete_terminal_readers_reader(
      *,
      reader : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.delete_terminal_readers_reader ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, DELETE_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "TerminalApi.delete_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Configuration</code> objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param is_account_default [Bool?] if present, only return the account default or non-default configurations.
    # @return [Stripe::TerminalConfigurationConfigurationList]
    def get_terminal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      is_account_default : Bool? = nil
    ) : Stripe::TerminalConfigurationConfigurationList
      data, _status_code, _headers = get_terminal_configurations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, is_account_default: is_account_default)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param is_account_default [Bool?] if present, only return the account default or non-default configurations.
    # @return [Tuple(Stripe::TerminalConfigurationConfigurationList, Integer, Hash)] Stripe::TerminalConfigurationConfigurationList, response status code and response headers
    def get_terminal_configurations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      is_account_default : Bool? = nil
    ) : Tuple(Stripe::TerminalConfigurationConfigurationList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_configurations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, is_account_default: is_account_default)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#get_terminal_configurations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalConfigurationConfigurationList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param is_account_default [Bool?] if present, only return the account default or non-default configurations.
    # @return nil
    def get_terminal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      is_account_default : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_configurations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand, is_account_default: is_account_default).execute(&block)
    end

    GET_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_configurations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      is_account_default : Bool? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.get_terminal_configurations ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TERMINAL_CONFIGURATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["is_account_default"] = is_account_default.to_s if !is_account_default.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Configuration</code> object.</p>
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::GetTerminalConfigurationsConfiguration200Response]
    def get_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::GetTerminalConfigurationsConfiguration200Response
      data, _status_code, _headers = get_terminal_configurations_configuration_with_http_info(configuration: configuration, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::GetTerminalConfigurationsConfiguration200Response, Integer, Hash)] Stripe::GetTerminalConfigurationsConfiguration200Response, response status code and response headers
    def get_terminal_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::GetTerminalConfigurationsConfiguration200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_configurations_configuration(configuration: configuration, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#get_terminal_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalConfigurationsConfiguration200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_configurations_configuration(configuration: configuration, expand: expand).execute(&block)
    end

    GET_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.get_terminal_configurations_configuration ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, GET_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Location</code> objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TerminalLocationLocationList]
    def get_terminal_locations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TerminalLocationLocationList
      data, _status_code, _headers = get_terminal_locations_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TerminalLocationLocationList, Integer, Hash)] Stripe::TerminalLocationLocationList, response status code and response headers
    def get_terminal_locations_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TerminalLocationLocationList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_locations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#get_terminal_locations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalLocationLocationList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_locations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_locations(ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_locations(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.get_terminal_locations ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TERMINAL_LOCATIONS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_locations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Location</code> object.</p>
    # @required @param location [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::GetTerminalLocationsLocation200Response]
    def get_terminal_locations_location(
      *,
      location : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::GetTerminalLocationsLocation200Response
      data, _status_code, _headers = get_terminal_locations_location_with_http_info(location: location, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @required @param location [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::GetTerminalLocationsLocation200Response, Integer, Hash)] Stripe::GetTerminalLocationsLocation200Response, response status code and response headers
    def get_terminal_locations_location_with_http_info(
      *,
      location : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::GetTerminalLocationsLocation200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_locations_location(location: location, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#get_terminal_locations_location\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalLocationsLocation200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @required @param location [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_locations_location(
      *,
      location : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_locations_location(location: location, expand: expand).execute(&block)
    end

    GET_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_locations_location(
      *,
      location : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.get_terminal_locations_location ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"location\" is required and cannot be null") if location.nil?
        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, GET_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Reader</code> objects.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param location [String?] A location ID to filter the response list to only readers at the specific location
    # @optional @param status [String?] A status filter to filter readers to only offline or online readers
    # @optional @param device_type [String?] Filters readers by device type
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::TerminalReaderRetrieveReader]
    def get_terminal_readers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      location : String? = nil,
      status : String? = nil,
      device_type : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::TerminalReaderRetrieveReader
      data, _status_code, _headers = get_terminal_readers_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, location: location, status: status, device_type: device_type, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param location [String?] A location ID to filter the response list to only readers at the specific location
    # @optional @param status [String?] A status filter to filter readers to only offline or online readers
    # @optional @param device_type [String?] Filters readers by device type
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::TerminalReaderRetrieveReader, Integer, Hash)] Stripe::TerminalReaderRetrieveReader, response status code and response headers
    def get_terminal_readers_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      location : String? = nil,
      status : String? = nil,
      device_type : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::TerminalReaderRetrieveReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_readers(ending_before: ending_before, starting_after: starting_after, limit: limit, location: location, status: status, device_type: device_type, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#get_terminal_readers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReaderRetrieveReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param location [String?] A location ID to filter the response list to only readers at the specific location
    # @optional @param status [String?] A status filter to filter readers to only offline or online readers
    # @optional @param device_type [String?] Filters readers by device type
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_readers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      location : String? = nil,
      status : String? = nil,
      device_type : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_readers(ending_before: ending_before, starting_after: starting_after, limit: limit, location: location, status: status, device_type: device_type, expand: expand).execute(&block)
    end

    GET_TERMINAL_READERS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_TERMINAL_READERS_MAX_LENGTH_FOR_STARTING_AFTER = 5000
    GET_TERMINAL_READERS_MAX_LENGTH_FOR_LOCATION       = 5000
    GET_TERMINAL_READERS_VALID_VALUES_FOR_STATUS       = String.static_array("offline", "online")
    GET_TERMINAL_READERS_VALID_VALUES_FOR_DEVICE_TYPE  = String.static_array("bbpos_chipper2x", "bbpos_wisepad3", "bbpos_wisepos_e", "simulated_wisepos_e", "stripe_m2", "verifone_P400")

    # @return Crest::Request
    def build_api_request_for_get_terminal_readers(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      location : String? = nil,
      status : String? = nil,
      device_type : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.get_terminal_readers ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_TERMINAL_READERS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_TERMINAL_READERS_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, GET_TERMINAL_READERS_MAX_LENGTH_FOR_LOCATION)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_TERMINAL_READERS_VALID_VALUES_FOR_STATUS)
        end
        unless (_device_type = device_type).nil?
          OpenApi::EnumValidator.validate("device_type", _device_type, GET_TERMINAL_READERS_VALID_VALUES_FOR_DEVICE_TYPE)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["location"] = location.to_s if !location.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["device_type"] = device_type.to_s if !device_type.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_readers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Reader</code> object.</p>
    # @required @param reader [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::GetTerminalReadersReader200Response]
    def get_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::GetTerminalReadersReader200Response
      data, _status_code, _headers = get_terminal_readers_reader_with_http_info(reader: reader, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::GetTerminalReadersReader200Response, Integer, Hash)] Stripe::GetTerminalReadersReader200Response, response status code and response headers
    def get_terminal_readers_reader_with_http_info(
      *,
      reader : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::GetTerminalReadersReader200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_terminal_readers_reader(reader: reader, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#get_terminal_readers_reader\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalReadersReader200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_terminal_readers_reader(reader: reader, expand: expand).execute(&block)
    end

    GET_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_get_terminal_readers_reader(
      *,
      reader : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.get_terminal_readers_reader ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, GET_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "TerminalApi.get_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Configuration</code> object.</p>
    # @optional @param post_terminal_configurations_request [Stripe::PostTerminalConfigurationsRequest?]
    # @return [Stripe::TerminalConfiguration]
    def post_terminal_configurations(
      *,
      post_terminal_configurations_request : Stripe::PostTerminalConfigurationsRequest? = nil
    ) : Stripe::TerminalConfiguration
      data, _status_code, _headers = post_terminal_configurations_with_http_info(post_terminal_configurations_request: post_terminal_configurations_request)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @optional @param post_terminal_configurations_request [Stripe::PostTerminalConfigurationsRequest?]
    # @return [Tuple(Stripe::TerminalConfiguration, Integer, Hash)] Stripe::TerminalConfiguration, response status code and response headers
    def post_terminal_configurations_with_http_info(
      *,
      post_terminal_configurations_request : Stripe::PostTerminalConfigurationsRequest? = nil
    ) : Tuple(Stripe::TerminalConfiguration, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_configurations(post_terminal_configurations_request: post_terminal_configurations_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_configurations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalConfiguration.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @optional @param post_terminal_configurations_request [Stripe::PostTerminalConfigurationsRequest?]
    # @return nil
    def post_terminal_configurations(
      *,
      post_terminal_configurations_request : Stripe::PostTerminalConfigurationsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_configurations(post_terminal_configurations_request: post_terminal_configurations_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_configurations(
      *,
      post_terminal_configurations_request : Stripe::PostTerminalConfigurationsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_configurations ..." }
      end

      if client_side_validation
        unless (_post_terminal_configurations_request = post_terminal_configurations_request).nil?
          _post_terminal_configurations_request.validate if _post_terminal_configurations_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_configurations_request, content_type: header_params["Content-Type"]?) if !post_terminal_configurations_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a new <code>Configuration</code> object.</p>
    # @required @param configuration [String?]
    # @optional @param post_terminal_configurations_configuration_request [Stripe::PostTerminalConfigurationsConfigurationRequest?]
    # @return [Stripe::GetTerminalConfigurationsConfiguration200Response]
    def post_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      post_terminal_configurations_configuration_request : Stripe::PostTerminalConfigurationsConfigurationRequest? = nil
    ) : Stripe::GetTerminalConfigurationsConfiguration200Response
      data, _status_code, _headers = post_terminal_configurations_configuration_with_http_info(configuration: configuration, post_terminal_configurations_configuration_request: post_terminal_configurations_configuration_request)
      data
    end

    # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param post_terminal_configurations_configuration_request [Stripe::PostTerminalConfigurationsConfigurationRequest?]
    # @return [Tuple(Stripe::GetTerminalConfigurationsConfiguration200Response, Integer, Hash)] Stripe::GetTerminalConfigurationsConfiguration200Response, response status code and response headers
    def post_terminal_configurations_configuration_with_http_info(
      *,
      configuration : String? = nil,
      post_terminal_configurations_configuration_request : Stripe::PostTerminalConfigurationsConfigurationRequest? = nil
    ) : Tuple(Stripe::GetTerminalConfigurationsConfiguration200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_configurations_configuration(configuration: configuration, post_terminal_configurations_configuration_request: post_terminal_configurations_configuration_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_configurations_configuration\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalConfigurationsConfiguration200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @required @param configuration [String?]
    # @optional @param post_terminal_configurations_configuration_request [Stripe::PostTerminalConfigurationsConfigurationRequest?]
    # @return nil
    def post_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      post_terminal_configurations_configuration_request : Stripe::PostTerminalConfigurationsConfigurationRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_configurations_configuration(configuration: configuration, post_terminal_configurations_configuration_request: post_terminal_configurations_configuration_request).execute(&block)
    end

    POST_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_configurations_configuration(
      *,
      configuration : String? = nil,
      post_terminal_configurations_configuration_request : Stripe::PostTerminalConfigurationsConfigurationRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_configurations_configuration ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"configuration\" is required and cannot be null") if configuration.nil?
        unless (_configuration = configuration).nil?
          OpenApi::PrimitiveValidator.validate_max_length("configuration", configuration.to_s.size, POST_TERMINAL_CONFIGURATIONS_CONFIGURATION_MAX_LENGTH_FOR_CONFIGURATION)
        end
        unless (_post_terminal_configurations_configuration_request = post_terminal_configurations_configuration_request).nil?
          _post_terminal_configurations_configuration_request.validate if _post_terminal_configurations_configuration_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_configurations_configuration_request, content_type: header_params["Content-Type"]?) if !post_terminal_configurations_configuration_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
    # @optional @param post_terminal_connection_tokens_request [Stripe::PostTerminalConnectionTokensRequest?]
    # @return [Stripe::TerminalConnectionToken]
    def post_terminal_connection_tokens(
      *,
      post_terminal_connection_tokens_request : Stripe::PostTerminalConnectionTokensRequest? = nil
    ) : Stripe::TerminalConnectionToken
      data, _status_code, _headers = post_terminal_connection_tokens_with_http_info(post_terminal_connection_tokens_request: post_terminal_connection_tokens_request)
      data
    end

    # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
    # @optional @param post_terminal_connection_tokens_request [Stripe::PostTerminalConnectionTokensRequest?]
    # @return [Tuple(Stripe::TerminalConnectionToken, Integer, Hash)] Stripe::TerminalConnectionToken, response status code and response headers
    def post_terminal_connection_tokens_with_http_info(
      *,
      post_terminal_connection_tokens_request : Stripe::PostTerminalConnectionTokensRequest? = nil
    ) : Tuple(Stripe::TerminalConnectionToken, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_connection_tokens(post_terminal_connection_tokens_request: post_terminal_connection_tokens_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_connection_tokens\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalConnectionToken.from_json(body), status_code, headers)
    end

    # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
    # @optional @param post_terminal_connection_tokens_request [Stripe::PostTerminalConnectionTokensRequest?]
    # @return nil
    def post_terminal_connection_tokens(
      *,
      post_terminal_connection_tokens_request : Stripe::PostTerminalConnectionTokensRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_connection_tokens(post_terminal_connection_tokens_request: post_terminal_connection_tokens_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_connection_tokens(
      *,
      post_terminal_connection_tokens_request : Stripe::PostTerminalConnectionTokensRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_connection_tokens ..." }
      end

      if client_side_validation
        unless (_post_terminal_connection_tokens_request = post_terminal_connection_tokens_request).nil?
          _post_terminal_connection_tokens_request.validate if _post_terminal_connection_tokens_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/connection_tokens"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_connection_tokens_request, content_type: header_params["Content-Type"]?) if !post_terminal_connection_tokens_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_connection_tokens",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Location</code> object. For further details, including which address fields are required in each country, see the <a href=\"/docs/terminal/fleet/locations\">Manage locations</a> guide.</p>
    # @required @param post_terminal_locations_request [Stripe::PostTerminalLocationsRequest?]
    # @return [Stripe::TerminalLocation]
    def post_terminal_locations(
      *,
      post_terminal_locations_request : Stripe::PostTerminalLocationsRequest? = nil
    ) : Stripe::TerminalLocation
      data, _status_code, _headers = post_terminal_locations_with_http_info(post_terminal_locations_request: post_terminal_locations_request)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
    # @required @param post_terminal_locations_request [Stripe::PostTerminalLocationsRequest?]
    # @return [Tuple(Stripe::TerminalLocation, Integer, Hash)] Stripe::TerminalLocation, response status code and response headers
    def post_terminal_locations_with_http_info(
      *,
      post_terminal_locations_request : Stripe::PostTerminalLocationsRequest? = nil
    ) : Tuple(Stripe::TerminalLocation, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_locations(post_terminal_locations_request: post_terminal_locations_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_locations\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalLocation.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
    # @required @param post_terminal_locations_request [Stripe::PostTerminalLocationsRequest?]
    # @return nil
    def post_terminal_locations(
      *,
      post_terminal_locations_request : Stripe::PostTerminalLocationsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_locations(post_terminal_locations_request: post_terminal_locations_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_locations(
      *,
      post_terminal_locations_request : Stripe::PostTerminalLocationsRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_locations ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_terminal_locations_request\" is required and cannot be null") if post_terminal_locations_request.nil?
        unless (_post_terminal_locations_request = post_terminal_locations_request).nil?
          _post_terminal_locations_request.validate if _post_terminal_locations_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_locations_request, content_type: header_params["Content-Type"]?) if !post_terminal_locations_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_locations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param location [String?]
    # @optional @param post_terminal_locations_location_request [Stripe::PostTerminalLocationsLocationRequest?]
    # @return [Stripe::GetTerminalLocationsLocation200Response]
    def post_terminal_locations_location(
      *,
      location : String? = nil,
      post_terminal_locations_location_request : Stripe::PostTerminalLocationsLocationRequest? = nil
    ) : Stripe::GetTerminalLocationsLocation200Response
      data, _status_code, _headers = post_terminal_locations_location_with_http_info(location: location, post_terminal_locations_location_request: post_terminal_locations_location_request)
      data
    end

    # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param location [String?]
    # @optional @param post_terminal_locations_location_request [Stripe::PostTerminalLocationsLocationRequest?]
    # @return [Tuple(Stripe::GetTerminalLocationsLocation200Response, Integer, Hash)] Stripe::GetTerminalLocationsLocation200Response, response status code and response headers
    def post_terminal_locations_location_with_http_info(
      *,
      location : String? = nil,
      post_terminal_locations_location_request : Stripe::PostTerminalLocationsLocationRequest? = nil
    ) : Tuple(Stripe::GetTerminalLocationsLocation200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_locations_location(location: location, post_terminal_locations_location_request: post_terminal_locations_location_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_locations_location\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalLocationsLocation200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param location [String?]
    # @optional @param post_terminal_locations_location_request [Stripe::PostTerminalLocationsLocationRequest?]
    # @return nil
    def post_terminal_locations_location(
      *,
      location : String? = nil,
      post_terminal_locations_location_request : Stripe::PostTerminalLocationsLocationRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_locations_location(location: location, post_terminal_locations_location_request: post_terminal_locations_location_request).execute(&block)
    end

    POST_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_locations_location(
      *,
      location : String? = nil,
      post_terminal_locations_location_request : Stripe::PostTerminalLocationsLocationRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_locations_location ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"location\" is required and cannot be null") if location.nil?
        unless (_location = location).nil?
          OpenApi::PrimitiveValidator.validate_max_length("location", location.to_s.size, POST_TERMINAL_LOCATIONS_LOCATION_MAX_LENGTH_FOR_LOCATION)
        end
        unless (_post_terminal_locations_location_request = post_terminal_locations_location_request).nil?
          _post_terminal_locations_location_request.validate if _post_terminal_locations_location_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_locations_location_request, content_type: header_params["Content-Type"]?) if !post_terminal_locations_location_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Reader</code> object.</p>
    # @required @param post_terminal_readers_request [Stripe::PostTerminalReadersRequest?]
    # @return [Stripe::TerminalReader]
    def post_terminal_readers(
      *,
      post_terminal_readers_request : Stripe::PostTerminalReadersRequest? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_with_http_info(post_terminal_readers_request: post_terminal_readers_request)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param post_terminal_readers_request [Stripe::PostTerminalReadersRequest?]
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_with_http_info(
      *,
      post_terminal_readers_request : Stripe::PostTerminalReadersRequest? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers(post_terminal_readers_request: post_terminal_readers_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_readers\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @required @param post_terminal_readers_request [Stripe::PostTerminalReadersRequest?]
    # @return nil
    def post_terminal_readers(
      *,
      post_terminal_readers_request : Stripe::PostTerminalReadersRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers(post_terminal_readers_request: post_terminal_readers_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers(
      *,
      post_terminal_readers_request : Stripe::PostTerminalReadersRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_readers ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_terminal_readers_request\" is required and cannot be null") if post_terminal_readers_request.nil?
        unless (_post_terminal_readers_request = post_terminal_readers_request).nil?
          _post_terminal_readers_request.validate if _post_terminal_readers_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_readers_request, content_type: header_params["Content-Type"]?) if !post_terminal_readers_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @required @param reader [String?]
    # @optional @param post_terminal_readers_reader_request [Stripe::PostTerminalReadersReaderRequest?]
    # @return [Stripe::GetTerminalReadersReader200Response]
    def post_terminal_readers_reader(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_request : Stripe::PostTerminalReadersReaderRequest? = nil
    ) : Stripe::GetTerminalReadersReader200Response
      data, _status_code, _headers = post_terminal_readers_reader_with_http_info(reader: reader, post_terminal_readers_reader_request: post_terminal_readers_reader_request)
      data
    end

    # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param post_terminal_readers_reader_request [Stripe::PostTerminalReadersReaderRequest?]
    # @return [Tuple(Stripe::GetTerminalReadersReader200Response, Integer, Hash)] Stripe::GetTerminalReadersReader200Response, response status code and response headers
    def post_terminal_readers_reader_with_http_info(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_request : Stripe::PostTerminalReadersReaderRequest? = nil
    ) : Tuple(Stripe::GetTerminalReadersReader200Response, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader(reader: reader, post_terminal_readers_reader_request: post_terminal_readers_reader_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::GetTerminalReadersReader200Response.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param post_terminal_readers_reader_request [Stripe::PostTerminalReadersReaderRequest?]
    # @return nil
    def post_terminal_readers_reader(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_request : Stripe::PostTerminalReadersReaderRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader(reader: reader, post_terminal_readers_reader_request: post_terminal_readers_reader_request).execute(&block)
    end

    POST_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_request : Stripe::PostTerminalReadersReaderRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_MAX_LENGTH_FOR_READER)
        end
        unless (_post_terminal_readers_reader_request = post_terminal_readers_reader_request).nil?
          _post_terminal_readers_reader_request.validate if _post_terminal_readers_reader_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_readers_reader_request, content_type: header_params["Content-Type"]?) if !post_terminal_readers_reader_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels the current reader action.</p>
    # @required @param reader [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Stripe::TerminalReader]
    def post_terminal_readers_reader_cancel_action(
      *,
      reader : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_reader_cancel_action_with_http_info(reader: reader, post_accounts_account_login_links_request: post_accounts_account_login_links_request)
      data
    end

    # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_reader_cancel_action_with_http_info(
      *,
      reader : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader_cancel_action(reader: reader, post_accounts_account_login_links_request: post_accounts_account_login_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader_cancel_action\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
    # @required @param reader [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return nil
    def post_terminal_readers_reader_cancel_action(
      *,
      reader : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader_cancel_action(reader: reader, post_accounts_account_login_links_request: post_accounts_account_login_links_request).execute(&block)
    end

    POST_TERMINAL_READERS_READER_CANCEL_ACTION_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_cancel_action(
      *,
      reader : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader_cancel_action ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_CANCEL_ACTION_MAX_LENGTH_FOR_READER)
        end
        unless (_post_accounts_account_login_links_request = post_accounts_account_login_links_request).nil?
          _post_accounts_account_login_links_request.validate if _post_accounts_account_login_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/cancel_action".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_login_links_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_login_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader_cancel_action",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Initiates a payment flow on a Reader.</p>
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_process_payment_intent_request [Stripe::PostTerminalReadersReaderProcessPaymentIntentRequest?]
    # @return [Stripe::TerminalReader]
    def post_terminal_readers_reader_process_payment_intent(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_process_payment_intent_request : Stripe::PostTerminalReadersReaderProcessPaymentIntentRequest? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_reader_process_payment_intent_with_http_info(reader: reader, post_terminal_readers_reader_process_payment_intent_request: post_terminal_readers_reader_process_payment_intent_request)
      data
    end

    # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_process_payment_intent_request [Stripe::PostTerminalReadersReaderProcessPaymentIntentRequest?]
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_reader_process_payment_intent_with_http_info(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_process_payment_intent_request : Stripe::PostTerminalReadersReaderProcessPaymentIntentRequest? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader_process_payment_intent(reader: reader, post_terminal_readers_reader_process_payment_intent_request: post_terminal_readers_reader_process_payment_intent_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader_process_payment_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_process_payment_intent_request [Stripe::PostTerminalReadersReaderProcessPaymentIntentRequest?]
    # @return nil
    def post_terminal_readers_reader_process_payment_intent(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_process_payment_intent_request : Stripe::PostTerminalReadersReaderProcessPaymentIntentRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader_process_payment_intent(reader: reader, post_terminal_readers_reader_process_payment_intent_request: post_terminal_readers_reader_process_payment_intent_request).execute(&block)
    end

    POST_TERMINAL_READERS_READER_PROCESS_PAYMENT_INTENT_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_process_payment_intent(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_process_payment_intent_request : Stripe::PostTerminalReadersReaderProcessPaymentIntentRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader_process_payment_intent ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_PROCESS_PAYMENT_INTENT_MAX_LENGTH_FOR_READER)
        end
        raise ArgumentError.new("\"post_terminal_readers_reader_process_payment_intent_request\" is required and cannot be null") if post_terminal_readers_reader_process_payment_intent_request.nil?
        unless (_post_terminal_readers_reader_process_payment_intent_request = post_terminal_readers_reader_process_payment_intent_request).nil?
          _post_terminal_readers_reader_process_payment_intent_request.validate if _post_terminal_readers_reader_process_payment_intent_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/process_payment_intent".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_readers_reader_process_payment_intent_request, content_type: header_params["Content-Type"]?) if !post_terminal_readers_reader_process_payment_intent_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader_process_payment_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Initiates a setup intent flow on a Reader.</p>
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_process_setup_intent_request [Stripe::PostTerminalReadersReaderProcessSetupIntentRequest?]
    # @return [Stripe::TerminalReader]
    def post_terminal_readers_reader_process_setup_intent(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_process_setup_intent_request : Stripe::PostTerminalReadersReaderProcessSetupIntentRequest? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_reader_process_setup_intent_with_http_info(reader: reader, post_terminal_readers_reader_process_setup_intent_request: post_terminal_readers_reader_process_setup_intent_request)
      data
    end

    # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_process_setup_intent_request [Stripe::PostTerminalReadersReaderProcessSetupIntentRequest?]
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_reader_process_setup_intent_with_http_info(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_process_setup_intent_request : Stripe::PostTerminalReadersReaderProcessSetupIntentRequest? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader_process_setup_intent(reader: reader, post_terminal_readers_reader_process_setup_intent_request: post_terminal_readers_reader_process_setup_intent_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader_process_setup_intent\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_process_setup_intent_request [Stripe::PostTerminalReadersReaderProcessSetupIntentRequest?]
    # @return nil
    def post_terminal_readers_reader_process_setup_intent(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_process_setup_intent_request : Stripe::PostTerminalReadersReaderProcessSetupIntentRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader_process_setup_intent(reader: reader, post_terminal_readers_reader_process_setup_intent_request: post_terminal_readers_reader_process_setup_intent_request).execute(&block)
    end

    POST_TERMINAL_READERS_READER_PROCESS_SETUP_INTENT_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_process_setup_intent(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_process_setup_intent_request : Stripe::PostTerminalReadersReaderProcessSetupIntentRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader_process_setup_intent ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_PROCESS_SETUP_INTENT_MAX_LENGTH_FOR_READER)
        end
        raise ArgumentError.new("\"post_terminal_readers_reader_process_setup_intent_request\" is required and cannot be null") if post_terminal_readers_reader_process_setup_intent_request.nil?
        unless (_post_terminal_readers_reader_process_setup_intent_request = post_terminal_readers_reader_process_setup_intent_request).nil?
          _post_terminal_readers_reader_process_setup_intent_request.validate if _post_terminal_readers_reader_process_setup_intent_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/process_setup_intent".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_readers_reader_process_setup_intent_request, content_type: header_params["Content-Type"]?) if !post_terminal_readers_reader_process_setup_intent_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader_process_setup_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Sets reader display to show cart details.</p>
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_set_reader_display_request [Stripe::PostTerminalReadersReaderSetReaderDisplayRequest?]
    # @return [Stripe::TerminalReader]
    def post_terminal_readers_reader_set_reader_display(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_set_reader_display_request : Stripe::PostTerminalReadersReaderSetReaderDisplayRequest? = nil
    ) : Stripe::TerminalReader
      data, _status_code, _headers = post_terminal_readers_reader_set_reader_display_with_http_info(reader: reader, post_terminal_readers_reader_set_reader_display_request: post_terminal_readers_reader_set_reader_display_request)
      data
    end

    # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_set_reader_display_request [Stripe::PostTerminalReadersReaderSetReaderDisplayRequest?]
    # @return [Tuple(Stripe::TerminalReader, Integer, Hash)] Stripe::TerminalReader, response status code and response headers
    def post_terminal_readers_reader_set_reader_display_with_http_info(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_set_reader_display_request : Stripe::PostTerminalReadersReaderSetReaderDisplayRequest? = nil
    ) : Tuple(Stripe::TerminalReader, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_terminal_readers_reader_set_reader_display(reader: reader, post_terminal_readers_reader_set_reader_display_request: post_terminal_readers_reader_set_reader_display_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: TerminalApi#post_terminal_readers_reader_set_reader_display\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::TerminalReader.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
    # @required @param reader [String?]
    # @required @param post_terminal_readers_reader_set_reader_display_request [Stripe::PostTerminalReadersReaderSetReaderDisplayRequest?]
    # @return nil
    def post_terminal_readers_reader_set_reader_display(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_set_reader_display_request : Stripe::PostTerminalReadersReaderSetReaderDisplayRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_terminal_readers_reader_set_reader_display(reader: reader, post_terminal_readers_reader_set_reader_display_request: post_terminal_readers_reader_set_reader_display_request).execute(&block)
    end

    POST_TERMINAL_READERS_READER_SET_READER_DISPLAY_MAX_LENGTH_FOR_READER = 5000

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_set_reader_display(
      *,
      reader : String? = nil,
      post_terminal_readers_reader_set_reader_display_request : Stripe::PostTerminalReadersReaderSetReaderDisplayRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: TerminalApi.post_terminal_readers_reader_set_reader_display ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"reader\" is required and cannot be null") if reader.nil?
        unless (_reader = reader).nil?
          OpenApi::PrimitiveValidator.validate_max_length("reader", reader.to_s.size, POST_TERMINAL_READERS_READER_SET_READER_DISPLAY_MAX_LENGTH_FOR_READER)
        end
        raise ArgumentError.new("\"post_terminal_readers_reader_set_reader_display_request\" is required and cannot be null") if post_terminal_readers_reader_set_reader_display_request.nil?
        unless (_post_terminal_readers_reader_set_reader_display_request = post_terminal_readers_reader_set_reader_display_request).nil?
          _post_terminal_readers_reader_set_reader_display_request.validate if _post_terminal_readers_reader_set_reader_display_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/set_reader_display".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_terminal_readers_reader_set_reader_display_request, content_type: header_params["Content-Type"]?) if !post_terminal_readers_reader_set_reader_display_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "TerminalApi.post_terminal_readers_reader_set_reader_display",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
