#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-08-27
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"

module Stripe
  class DefaultApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>With <a href=\"/docs/connect\">Connect</a>, you can delete accounts you manage.</p>  <p>Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>  <p>If you want to delete your own account, use the <a href=\"https://dashboard.stripe.com/account\">account information tab in your account settings</a> instead.</p>
    # @return [DeletedAccount]
    def delete_account(*, account : String? = nil)
      data, _status_code, _headers = delete_account_with_http_info(account: account)
      data
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can delete accounts you manage.&lt;/p&gt;  &lt;p&gt;Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.&lt;/p&gt;  &lt;p&gt;If you want to delete your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;account information tab in your account settings&lt;/a&gt; instead.&lt;/p&gt;
    # @return [Array<(DeletedAccount, Integer, Hash)>] DeletedAccount data, response status code and response headers
    def delete_account_with_http_info(*, account : String? = nil)
      request = build_api_request_for_delete_account(account: account)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can delete accounts you manage.&lt;/p&gt;  &lt;p&gt;Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.&lt;/p&gt;  &lt;p&gt;If you want to delete your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;account information tab in your account settings&lt;/a&gt; instead.&lt;/p&gt;
    # @return nil
    def delete_account(*, account : String? = nil, &block : Crest::Response ->)
      build_api_request_for_delete_account(account: account).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_account(*, account : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_account ..." }
      end
      if @api_client.config.client_side_validation && !account.nil? && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.delete_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a specified external account for a given account.</p>
    # @param id [String]
    # @return [DeletedExternalAccount]
    def delete_account_bank_accounts_id(*, id : String)
      data, _status_code, _headers = delete_account_bank_accounts_id_with_http_info(id: id)
      data
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(DeletedExternalAccount, Integer, Hash)>] DeletedExternalAccount data, response status code and response headers
    def delete_account_bank_accounts_id_with_http_info(*, id : String)
      request = build_api_request_for_delete_account_bank_accounts_id(id: id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_account_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def delete_account_bank_accounts_id(*, id : String, &block : Crest::Response ->)
      build_api_request_for_delete_account_bank_accounts_id(id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_account_bank_accounts_id(*, id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_account_bank_accounts_id ..." }
      end
      # resource path
      local_var_path = "/v1/account/bank_accounts/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_account_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a specified external account for a given account.</p>
    # @param id [String]
    # @return [DeletedExternalAccount]
    def delete_account_external_accounts_id(*, id : String)
      data, _status_code, _headers = delete_account_external_accounts_id_with_http_info(id: id)
      data
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(DeletedExternalAccount, Integer, Hash)>] DeletedExternalAccount data, response status code and response headers
    def delete_account_external_accounts_id_with_http_info(*, id : String)
      request = build_api_request_for_delete_account_external_accounts_id(id: id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_account_external_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def delete_account_external_accounts_id(*, id : String, &block : Crest::Response ->)
      build_api_request_for_delete_account_external_accounts_id(id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_account_external_accounts_id(*, id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_account_external_accounts_id ..." }
      end
      # resource path
      local_var_path = "/v1/account/external_accounts/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
    # @param person [String]
    # @return [DeletedPerson]
    def delete_account_people_person(*, person : String)
      data, _status_code, _headers = delete_account_people_person_with_http_info(person: person)
      data
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @param person [String]
    # @return [Array<(DeletedPerson, Integer, Hash)>] DeletedPerson data, response status code and response headers
    def delete_account_people_person_with_http_info(*, person : String)
      request = build_api_request_for_delete_account_people_person(person: person)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_account_people_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedPerson.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @param person [String]
    # @return nil
    def delete_account_people_person(*, person : String, &block : Crest::Response ->)
      build_api_request_for_delete_account_people_person(person: person).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_account_people_person(*, person : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_account_people_person ..." }
      end
      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.delete_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/people/{person}".sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_account_people_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
    # @param person [String]
    # @return [DeletedPerson]
    def delete_account_persons_person(*, person : String)
      data, _status_code, _headers = delete_account_persons_person_with_http_info(person: person)
      data
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @param person [String]
    # @return [Array<(DeletedPerson, Integer, Hash)>] DeletedPerson data, response status code and response headers
    def delete_account_persons_person_with_http_info(*, person : String)
      request = build_api_request_for_delete_account_persons_person(person: person)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_account_persons_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedPerson.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @param person [String]
    # @return nil
    def delete_account_persons_person(*, person : String, &block : Crest::Response ->)
      build_api_request_for_delete_account_persons_person(person: person).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_account_persons_person(*, person : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_account_persons_person ..." }
      end
      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.delete_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/persons/{person}".sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>With <a href=\"/docs/connect\">Connect</a>, you can delete accounts you manage.</p>  <p>Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>  <p>If you want to delete your own account, use the <a href=\"https://dashboard.stripe.com/account\">account information tab in your account settings</a> instead.</p>
    # @param account [String]
    # @return [DeletedAccount]
    def delete_accounts_account(*, account : String)
      data, _status_code, _headers = delete_accounts_account_with_http_info(account: account)
      data
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can delete accounts you manage.&lt;/p&gt;  &lt;p&gt;Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.&lt;/p&gt;  &lt;p&gt;If you want to delete your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;account information tab in your account settings&lt;/a&gt; instead.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(DeletedAccount, Integer, Hash)>] DeletedAccount data, response status code and response headers
    def delete_accounts_account_with_http_info(*, account : String)
      request = build_api_request_for_delete_accounts_account(account: account)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_accounts_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can delete accounts you manage.&lt;/p&gt;  &lt;p&gt;Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.&lt;/p&gt;  &lt;p&gt;If you want to delete your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;account information tab in your account settings&lt;/a&gt; instead.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def delete_accounts_account(*, account : String, &block : Crest::Response ->)
      build_api_request_for_delete_accounts_account(account: account).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_accounts_account(*, account : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_accounts_account ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.delete_accounts_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a specified external account for a given account.</p>
    # @param account [String]
    # @param id [String]
    # @return [DeletedExternalAccount]
    def delete_accounts_account_bank_accounts_id(*, account : String, id : String)
      data, _status_code, _headers = delete_accounts_account_bank_accounts_id_with_http_info(account: account, id: id)
      data
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return [Array<(DeletedExternalAccount, Integer, Hash)>] DeletedExternalAccount data, response status code and response headers
    def delete_accounts_account_bank_accounts_id_with_http_info(*, account : String, id : String)
      request = build_api_request_for_delete_accounts_account_bank_accounts_id(account: account, id: id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_accounts_account_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return nil
    def delete_accounts_account_bank_accounts_id(*, account : String, id : String, &block : Crest::Response ->)
      build_api_request_for_delete_accounts_account_bank_accounts_id(account: account, id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_accounts_account_bank_accounts_id(*, account : String, id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_accounts_account_bank_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.delete_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/bank_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_accounts_account_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a specified external account for a given account.</p>
    # @param account [String]
    # @param id [String]
    # @return [DeletedExternalAccount]
    def delete_accounts_account_external_accounts_id(*, account : String, id : String)
      data, _status_code, _headers = delete_accounts_account_external_accounts_id_with_http_info(account: account, id: id)
      data
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return [Array<(DeletedExternalAccount, Integer, Hash)>] DeletedExternalAccount data, response status code and response headers
    def delete_accounts_account_external_accounts_id_with_http_info(*, account : String, id : String)
      request = build_api_request_for_delete_accounts_account_external_accounts_id(account: account, id: id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_accounts_account_external_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return nil
    def delete_accounts_account_external_accounts_id(*, account : String, id : String, &block : Crest::Response ->)
      build_api_request_for_delete_accounts_account_external_accounts_id(account: account, id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_accounts_account_external_accounts_id(*, account : String, id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_accounts_account_external_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.delete_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_accounts_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
    # @param account [String]
    # @param person [String]
    # @return [DeletedPerson]
    def delete_accounts_account_people_person(*, account : String, person : String)
      data, _status_code, _headers = delete_accounts_account_people_person_with_http_info(account: account, person: person)
      data
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return [Array<(DeletedPerson, Integer, Hash)>] DeletedPerson data, response status code and response headers
    def delete_accounts_account_people_person_with_http_info(*, account : String, person : String)
      request = build_api_request_for_delete_accounts_account_people_person(account: account, person: person)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_accounts_account_people_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedPerson.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return nil
    def delete_accounts_account_people_person(*, account : String, person : String, &block : Crest::Response ->)
      build_api_request_for_delete_accounts_account_people_person(account: account, person: person).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_accounts_account_people_person(*, account : String, person : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_accounts_account_people_person ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.delete_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.delete_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/people/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_accounts_account_people_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
    # @param account [String]
    # @param person [String]
    # @return [DeletedPerson]
    def delete_accounts_account_persons_person(*, account : String, person : String)
      data, _status_code, _headers = delete_accounts_account_persons_person_with_http_info(account: account, person: person)
      data
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return [Array<(DeletedPerson, Integer, Hash)>] DeletedPerson data, response status code and response headers
    def delete_accounts_account_persons_person_with_http_info(*, account : String, person : String)
      request = build_api_request_for_delete_accounts_account_persons_person(account: account, person: person)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_accounts_account_persons_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedPerson.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return nil
    def delete_accounts_account_persons_person(*, account : String, person : String, &block : Crest::Response ->)
      build_api_request_for_delete_accounts_account_persons_person(account: account, person: person).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_accounts_account_persons_person(*, account : String, person : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_accounts_account_persons_person ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.delete_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.delete_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_accounts_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete an apple pay domain.</p>
    # @param domain [String]
    # @return [DeletedApplePayDomain]
    def delete_apple_pay_domains_domain(*, domain : String)
      data, _status_code, _headers = delete_apple_pay_domains_domain_with_http_info(domain: domain)
      data
    end

    # &lt;p&gt;Delete an apple pay domain.&lt;/p&gt;
    # @param domain [String]
    # @return [Array<(DeletedApplePayDomain, Integer, Hash)>] DeletedApplePayDomain data, response status code and response headers
    def delete_apple_pay_domains_domain_with_http_info(*, domain : String)
      request = build_api_request_for_delete_apple_pay_domains_domain(domain: domain)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_apple_pay_domains_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedApplePayDomain.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete an apple pay domain.&lt;/p&gt;
    # @param domain [String]
    # @return nil
    def delete_apple_pay_domains_domain(*, domain : String, &block : Crest::Response ->)
      build_api_request_for_delete_apple_pay_domains_domain(domain: domain).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_apple_pay_domains_domain(*, domain : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_apple_pay_domains_domain ..." }
      end
      if @api_client.config.client_side_validation && domain.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"domain\" when calling DefaultApi.delete_apple_pay_domains_domain, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/apple_pay/domains/{domain}".sub("{" + "domain" + "}", URI.encode_path(domain.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_apple_pay_domains_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can delete coupons via the <a href=\"https://dashboard.stripe.com/coupons\">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
    # @param coupon [String]
    # @return [DeletedCoupon]
    def delete_coupons_coupon(*, coupon : String)
      data, _status_code, _headers = delete_coupons_coupon_with_http_info(coupon: coupon)
      data
    end

    # &lt;p&gt;You can delete coupons via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.&lt;/p&gt;
    # @param coupon [String]
    # @return [Array<(DeletedCoupon, Integer, Hash)>] DeletedCoupon data, response status code and response headers
    def delete_coupons_coupon_with_http_info(*, coupon : String)
      request = build_api_request_for_delete_coupons_coupon(coupon: coupon)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_coupons_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedCoupon.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can delete coupons via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.&lt;/p&gt;
    # @param coupon [String]
    # @return nil
    def delete_coupons_coupon(*, coupon : String, &block : Crest::Response ->)
      build_api_request_for_delete_coupons_coupon(coupon: coupon).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_coupons_coupon(*, coupon : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_coupons_coupon ..." }
      end
      if @api_client.config.client_side_validation && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.delete_coupons_coupon, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/coupons/{coupon}".sub("{" + "coupon" + "}", URI.encode_path(coupon.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_coupons_coupon",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
    # @param customer [String]
    # @return [DeletedCustomer]
    def delete_customers_customer(*, customer : String)
      data, _status_code, _headers = delete_customers_customer_with_http_info(customer: customer)
      data
    end

    # &lt;p&gt;Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(DeletedCustomer, Integer, Hash)>] DeletedCustomer data, response status code and response headers
    def delete_customers_customer_with_http_info(*, customer : String)
      request = build_api_request_for_delete_customers_customer(customer: customer)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_customers_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedCustomer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def delete_customers_customer(*, customer : String, &block : Crest::Response ->)
      build_api_request_for_delete_customers_customer(customer: customer).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_customers_customer(*, customer : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_customers_customer ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.delete_customers_customer, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_customers_customer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a specified source for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [DeleteCustomersCustomerBankAccountsId200Response]
    def delete_customers_customer_bank_accounts_id(*, customer : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = delete_customers_customer_bank_accounts_id_with_http_info(customer: customer, id: id, expand: expand)
      data
    end

    # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(DeleteCustomersCustomerBankAccountsId200Response, Integer, Hash)>] DeleteCustomersCustomerBankAccountsId200Response data, response status code and response headers
    def delete_customers_customer_bank_accounts_id_with_http_info(*, customer : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_delete_customers_customer_bank_accounts_id(customer: customer, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_customers_customer_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeleteCustomersCustomerBankAccountsId200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def delete_customers_customer_bank_accounts_id(*, customer : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_delete_customers_customer_bank_accounts_id(customer: customer, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_customers_customer_bank_accounts_id(*, customer : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_customers_customer_bank_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.delete_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/bank_accounts/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_customers_customer_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a specified source for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [DeleteCustomersCustomerBankAccountsId200Response]
    def delete_customers_customer_cards_id(*, customer : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = delete_customers_customer_cards_id_with_http_info(customer: customer, id: id, expand: expand)
      data
    end

    # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(DeleteCustomersCustomerBankAccountsId200Response, Integer, Hash)>] DeleteCustomersCustomerBankAccountsId200Response data, response status code and response headers
    def delete_customers_customer_cards_id_with_http_info(*, customer : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_delete_customers_customer_cards_id(customer: customer, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_customers_customer_cards_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeleteCustomersCustomerBankAccountsId200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def delete_customers_customer_cards_id(*, customer : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_delete_customers_customer_cards_id(customer: customer, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_customers_customer_cards_id(*, customer : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_customers_customer_cards_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.delete_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/cards/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_customers_customer_cards_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Removes the currently applied discount on a customer.</p>
    # @param customer [String]
    # @return [DeletedDiscount]
    def delete_customers_customer_discount(*, customer : String)
      data, _status_code, _headers = delete_customers_customer_discount_with_http_info(customer: customer)
      data
    end

    # &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(DeletedDiscount, Integer, Hash)>] DeletedDiscount data, response status code and response headers
    def delete_customers_customer_discount_with_http_info(*, customer : String)
      request = build_api_request_for_delete_customers_customer_discount(customer: customer)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_customers_customer_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedDiscount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def delete_customers_customer_discount(*, customer : String, &block : Crest::Response ->)
      build_api_request_for_delete_customers_customer_discount(customer: customer).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_customers_customer_discount(*, customer : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_customers_customer_discount ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.delete_customers_customer_discount, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/discount".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_customers_customer_discount",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a specified source for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [DeleteCustomersCustomerBankAccountsId200Response]
    def delete_customers_customer_sources_id(*, customer : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = delete_customers_customer_sources_id_with_http_info(customer: customer, id: id, expand: expand)
      data
    end

    # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(DeleteCustomersCustomerBankAccountsId200Response, Integer, Hash)>] DeleteCustomersCustomerBankAccountsId200Response data, response status code and response headers
    def delete_customers_customer_sources_id_with_http_info(*, customer : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_delete_customers_customer_sources_id(customer: customer, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_customers_customer_sources_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeleteCustomersCustomerBankAccountsId200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def delete_customers_customer_sources_id(*, customer : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_delete_customers_customer_sources_id(customer: customer, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_customers_customer_sources_id(*, customer : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_customers_customer_sources_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.delete_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/sources/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_customers_customer_sources_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>  <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href=\"#delete_invoiceitem\">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>  <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Subscription]
    def delete_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil)
      data, _status_code, _headers = delete_customers_customer_subscriptions_subscription_exposed_id_with_http_info(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand, invoice_now: invoice_now, prorate: prorate)
      data
    end

    # &lt;p&gt;Cancels a customer’s subscription. If you set the &lt;code&gt;at_period_end&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default &lt;code&gt;false&lt;/code&gt; value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.&lt;/p&gt;  &lt;p&gt;Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def delete_customers_customer_subscriptions_subscription_exposed_id_with_http_info(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil)
      request = build_api_request_for_delete_customers_customer_subscriptions_subscription_exposed_id(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand, invoice_now: invoice_now, prorate: prorate)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_customers_customer_subscriptions_subscription_exposed_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Subscription.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels a customer’s subscription. If you set the &lt;code&gt;at_period_end&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default &lt;code&gt;false&lt;/code&gt; value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.&lt;/p&gt;  &lt;p&gt;Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return nil
    def delete_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_delete_customers_customer_subscriptions_subscription_exposed_id(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand, invoice_now: invoice_now, prorate: prorate).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_customers_customer_subscriptions_subscription_exposed_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.delete_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.delete_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice_now"] = invoice_now.to_s if !invoice_now.nil?
      form_params["prorate"] = prorate.to_s if !prorate.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_customers_customer_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Removes the currently applied discount on a customer.</p>
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [DeletedDiscount]
    def delete_customers_customer_subscriptions_subscription_exposed_id_discount(*, customer : String, subscription_exposed_id : String)
      data, _status_code, _headers = delete_customers_customer_subscriptions_subscription_exposed_id_discount_with_http_info(customer: customer, subscription_exposed_id: subscription_exposed_id)
      data
    end

    # &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Array<(DeletedDiscount, Integer, Hash)>] DeletedDiscount data, response status code and response headers
    def delete_customers_customer_subscriptions_subscription_exposed_id_discount_with_http_info(*, customer : String, subscription_exposed_id : String)
      request = build_api_request_for_delete_customers_customer_subscriptions_subscription_exposed_id_discount(customer: customer, subscription_exposed_id: subscription_exposed_id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_customers_customer_subscriptions_subscription_exposed_id_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedDiscount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return nil
    def delete_customers_customer_subscriptions_subscription_exposed_id_discount(*, customer : String, subscription_exposed_id : String, &block : Crest::Response ->)
      build_api_request_for_delete_customers_customer_subscriptions_subscription_exposed_id_discount(customer: customer, subscription_exposed_id: subscription_exposed_id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_customers_customer_subscriptions_subscription_exposed_id_discount(*, customer : String, subscription_exposed_id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_customers_customer_subscriptions_subscription_exposed_id_discount ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.delete_customers_customer_subscriptions_subscription_exposed_id_discount, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.delete_customers_customer_subscriptions_subscription_exposed_id_discount, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_customers_customer_subscriptions_subscription_exposed_id_discount",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes an existing <code>TaxID</code> object.</p>
    # @param customer [String]
    # @param id [String]
    # @return [DeletedTaxId]
    def delete_customers_customer_tax_ids_id(*, customer : String, id : String)
      data, _status_code, _headers = delete_customers_customer_tax_ids_id_with_http_info(customer: customer, id: id)
      data
    end

    # &lt;p&gt;Deletes an existing &lt;code&gt;TaxID&lt;/code&gt; object.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(DeletedTaxId, Integer, Hash)>] DeletedTaxId data, response status code and response headers
    def delete_customers_customer_tax_ids_id_with_http_info(*, customer : String, id : String)
      request = build_api_request_for_delete_customers_customer_tax_ids_id(customer: customer, id: id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_customers_customer_tax_ids_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedTaxId.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes an existing &lt;code&gt;TaxID&lt;/code&gt; object.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def delete_customers_customer_tax_ids_id(*, customer : String, id : String, &block : Crest::Response ->)
      build_api_request_for_delete_customers_customer_tax_ids_id(customer: customer, id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_customers_customer_tax_ids_id(*, customer : String, id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_customers_customer_tax_ids_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.delete_customers_customer_tax_ids_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/tax_ids/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_customers_customer_tax_ids_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Invalidates a short-lived API key for a given resource.</p>
    # @param key [String]
    # @return [EphemeralKey]
    def delete_ephemeral_keys_key(*, key : String, expand : Array(String)? = nil)
      data, _status_code, _headers = delete_ephemeral_keys_key_with_http_info(key: key, expand: expand)
      data
    end

    # &lt;p&gt;Invalidates a short-lived API key for a given resource.&lt;/p&gt;
    # @param key [String]
    # @return [Array<(EphemeralKey, Integer, Hash)>] EphemeralKey data, response status code and response headers
    def delete_ephemeral_keys_key_with_http_info(*, key : String, expand : Array(String)? = nil)
      request = build_api_request_for_delete_ephemeral_keys_key(key: key, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_ephemeral_keys_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return EphemeralKey.from_json(data), status_code, headers
    end

    # &lt;p&gt;Invalidates a short-lived API key for a given resource.&lt;/p&gt;
    # @param key [String]
    # @return nil
    def delete_ephemeral_keys_key(*, key : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_delete_ephemeral_keys_key(key: key, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_ephemeral_keys_key(*, key : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_ephemeral_keys_key ..." }
      end
      if @api_client.config.client_side_validation && key.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"key\" when calling DefaultApi.delete_ephemeral_keys_key, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/ephemeral_keys/{key}".sub("{" + "key" + "}", URI.encode_path(key.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_ephemeral_keys_key",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
    # @param invoiceitem [String]
    # @return [DeletedInvoiceitem]
    def delete_invoiceitems_invoiceitem(*, invoiceitem : String)
      data, _status_code, _headers = delete_invoiceitems_invoiceitem_with_http_info(invoiceitem: invoiceitem)
      data
    end

    # &lt;p&gt;Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.&lt;/p&gt;
    # @param invoiceitem [String]
    # @return [Array<(DeletedInvoiceitem, Integer, Hash)>] DeletedInvoiceitem data, response status code and response headers
    def delete_invoiceitems_invoiceitem_with_http_info(*, invoiceitem : String)
      request = build_api_request_for_delete_invoiceitems_invoiceitem(invoiceitem: invoiceitem)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_invoiceitems_invoiceitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedInvoiceitem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.&lt;/p&gt;
    # @param invoiceitem [String]
    # @return nil
    def delete_invoiceitems_invoiceitem(*, invoiceitem : String, &block : Crest::Response ->)
      build_api_request_for_delete_invoiceitems_invoiceitem(invoiceitem: invoiceitem).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_invoiceitems_invoiceitem(*, invoiceitem : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_invoiceitems_invoiceitem ..." }
      end
      if @api_client.config.client_side_validation && invoiceitem.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoiceitem\" when calling DefaultApi.delete_invoiceitems_invoiceitem, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoiceitems/{invoiceitem}".sub("{" + "invoiceitem" + "}", URI.encode_path(invoiceitem.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_invoiceitems_invoiceitem",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href=\"#void_invoice\">voided</a>.</p>
    # @param invoice [String]
    # @return [DeletedInvoice]
    def delete_invoices_invoice(*, invoice : String)
      data, _status_code, _headers = delete_invoices_invoice_with_http_info(invoice: invoice)
      data
    end

    # &lt;p&gt;Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be &lt;a href&#x3D;\&quot;#void_invoice\&quot;&gt;voided&lt;/a&gt;.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(DeletedInvoice, Integer, Hash)>] DeletedInvoice data, response status code and response headers
    def delete_invoices_invoice_with_http_info(*, invoice : String)
      request = build_api_request_for_delete_invoices_invoice(invoice: invoice)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_invoices_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedInvoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be &lt;a href&#x3D;\&quot;#void_invoice\&quot;&gt;voided&lt;/a&gt;.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def delete_invoices_invoice(*, invoice : String, &block : Crest::Response ->)
      build_api_request_for_delete_invoices_invoice(invoice: invoice).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_invoices_invoice(*, invoice : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_invoices_invoice ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.delete_invoices_invoice, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
    # @param plan [String]
    # @return [DeletedPlan]
    def delete_plans_plan(*, plan : String)
      data, _status_code, _headers = delete_plans_plan_with_http_info(plan: plan)
      data
    end

    # &lt;p&gt;Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.&lt;/p&gt;
    # @param plan [String]
    # @return [Array<(DeletedPlan, Integer, Hash)>] DeletedPlan data, response status code and response headers
    def delete_plans_plan_with_http_info(*, plan : String)
      request = build_api_request_for_delete_plans_plan(plan: plan)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_plans_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedPlan.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.&lt;/p&gt;
    # @param plan [String]
    # @return nil
    def delete_plans_plan(*, plan : String, &block : Crest::Response ->)
      build_api_request_for_delete_plans_plan(plan: plan).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_plans_plan(*, plan : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_plans_plan ..." }
      end
      if @api_client.config.client_side_validation && plan.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"plan\" when calling DefaultApi.delete_plans_plan, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/plans/{plan}".sub("{" + "plan" + "}", URI.encode_path(plan.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_plans_plan",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
    # @param id [String]
    # @return [DeletedProduct]
    def delete_products_id(*, id : String)
      data, _status_code, _headers = delete_products_id_with_http_info(id: id)
      data
    end

    # &lt;p&gt;Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with &lt;code&gt;type&#x3D;good&lt;/code&gt; is only possible if it has no SKUs associated with it.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(DeletedProduct, Integer, Hash)>] DeletedProduct data, response status code and response headers
    def delete_products_id_with_http_info(*, id : String)
      request = build_api_request_for_delete_products_id(id: id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_products_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedProduct.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with &lt;code&gt;type&#x3D;good&lt;/code&gt; is only possible if it has no SKUs associated with it.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def delete_products_id(*, id : String, &block : Crest::Response ->)
      build_api_request_for_delete_products_id(id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_products_id(*, id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_products_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.delete_products_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/products/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_products_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
    # @param item [String]
    # @return [DeletedRadarValueListItem]
    def delete_radar_value_list_items_item(*, item : String)
      data, _status_code, _headers = delete_radar_value_list_items_item_with_http_info(item: item)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;ValueListItem&lt;/code&gt; object, removing it from its parent value list.&lt;/p&gt;
    # @param item [String]
    # @return [Array<(DeletedRadarValueListItem, Integer, Hash)>] DeletedRadarValueListItem data, response status code and response headers
    def delete_radar_value_list_items_item_with_http_info(*, item : String)
      request = build_api_request_for_delete_radar_value_list_items_item(item: item)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_radar_value_list_items_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedRadarValueListItem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes a &lt;code&gt;ValueListItem&lt;/code&gt; object, removing it from its parent value list.&lt;/p&gt;
    # @param item [String]
    # @return nil
    def delete_radar_value_list_items_item(*, item : String, &block : Crest::Response ->)
      build_api_request_for_delete_radar_value_list_items_item(item: item).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_radar_value_list_items_item(*, item : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_radar_value_list_items_item ..." }
      end
      if @api_client.config.client_side_validation && item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"item\" when calling DefaultApi.delete_radar_value_list_items_item, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/value_list_items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_radar_value_list_items_item",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
    # @param value_list [String]
    # @return [DeletedRadarValueList]
    def delete_radar_value_lists_value_list(*, value_list : String)
      data, _status_code, _headers = delete_radar_value_lists_value_list_with_http_info(value_list: value_list)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;ValueList&lt;/code&gt; object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.&lt;/p&gt;
    # @param value_list [String]
    # @return [Array<(DeletedRadarValueList, Integer, Hash)>] DeletedRadarValueList data, response status code and response headers
    def delete_radar_value_lists_value_list_with_http_info(*, value_list : String)
      request = build_api_request_for_delete_radar_value_lists_value_list(value_list: value_list)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_radar_value_lists_value_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedRadarValueList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes a &lt;code&gt;ValueList&lt;/code&gt; object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.&lt;/p&gt;
    # @param value_list [String]
    # @return nil
    def delete_radar_value_lists_value_list(*, value_list : String, &block : Crest::Response ->)
      build_api_request_for_delete_radar_value_lists_value_list(value_list: value_list).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_radar_value_lists_value_list(*, value_list : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_radar_value_lists_value_list ..." }
      end
      if @api_client.config.client_side_validation && value_list.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"value_list\" when calling DefaultApi.delete_radar_value_lists_value_list, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/value_lists/{value_list}".sub("{" + "value_list" + "}", URI.encode_path(value_list.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_radar_value_lists_value_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Permanently deletes a recipient. It cannot be undone.</p>
    # @param id [String]
    # @return [DeletedRecipient]
    def delete_recipients_id(*, id : String)
      data, _status_code, _headers = delete_recipients_id_with_http_info(id: id)
      data
    end

    # &lt;p&gt;Permanently deletes a recipient. It cannot be undone.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(DeletedRecipient, Integer, Hash)>] DeletedRecipient data, response status code and response headers
    def delete_recipients_id_with_http_info(*, id : String)
      request = build_api_request_for_delete_recipients_id(id: id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_recipients_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedRecipient.from_json(data), status_code, headers
    end

    # &lt;p&gt;Permanently deletes a recipient. It cannot be undone.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def delete_recipients_id(*, id : String, &block : Crest::Response ->)
      build_api_request_for_delete_recipients_id(id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_recipients_id(*, id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_recipients_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.delete_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/recipients/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_recipients_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p>
    # @param id [String]
    # @return [DeletedSku]
    def delete_skus_id(*, id : String)
      data, _status_code, _headers = delete_skus_id_with_http_info(id: id)
      data
    end

    # &lt;p&gt;Delete a SKU. Deleting a SKU is only possible until it has been used in an order.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(DeletedSku, Integer, Hash)>] DeletedSku data, response status code and response headers
    def delete_skus_id_with_http_info(*, id : String)
      request = build_api_request_for_delete_skus_id(id: id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_skus_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedSku.from_json(data), status_code, headers
    end

    # &lt;p&gt;Delete a SKU. Deleting a SKU is only possible until it has been used in an order.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def delete_skus_id(*, id : String, &block : Crest::Response ->)
      build_api_request_for_delete_skus_id(id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_skus_id(*, id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_skus_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.delete_skus_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/skus/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_skus_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
    # @param item [String]
    # @return [DeletedSubscriptionItem]
    def delete_subscription_items_item(*, item : String, clear_usage : Bool? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil)
      data, _status_code, _headers = delete_subscription_items_item_with_http_info(item: item, clear_usage: clear_usage, proration_behavior: proration_behavior, proration_date: proration_date)
      data
    end

    # &lt;p&gt;Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.&lt;/p&gt;
    # @param item [String]
    # @return [Array<(DeletedSubscriptionItem, Integer, Hash)>] DeletedSubscriptionItem data, response status code and response headers
    def delete_subscription_items_item_with_http_info(*, item : String, clear_usage : Bool? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil)
      request = build_api_request_for_delete_subscription_items_item(item: item, clear_usage: clear_usage, proration_behavior: proration_behavior, proration_date: proration_date)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_subscription_items_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedSubscriptionItem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.&lt;/p&gt;
    # @param item [String]
    # @return nil
    def delete_subscription_items_item(*, item : String, clear_usage : Bool? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_delete_subscription_items_item(item: item, clear_usage: clear_usage, proration_behavior: proration_behavior, proration_date: proration_date).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_subscription_items_item(*, item : String, clear_usage : Bool? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_subscription_items_item ..." }
      end
      if @api_client.config.client_side_validation && item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"item\" when calling DefaultApi.delete_subscription_items_item, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !proration_behavior.nil? && !allowable_values.includes?(proration_behavior)
        raise ArgumentError.new("invalid value for \"proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/subscription_items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["clear_usage"] = clear_usage.to_s if !clear_usage.nil?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?
      form_params["proration_date"] = proration_date.to_s if !proration_date.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_subscription_items_item",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>  <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href=\"#delete_invoiceitem\">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>  <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
    # @param subscription_exposed_id [String]
    # @return [Subscription]
    def delete_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil)
      data, _status_code, _headers = delete_subscriptions_subscription_exposed_id_with_http_info(subscription_exposed_id: subscription_exposed_id, expand: expand, invoice_now: invoice_now, prorate: prorate)
      data
    end

    # &lt;p&gt;Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.&lt;/p&gt;  &lt;p&gt;Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
    # @param subscription_exposed_id [String]
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def delete_subscriptions_subscription_exposed_id_with_http_info(*, subscription_exposed_id : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil)
      request = build_api_request_for_delete_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, expand: expand, invoice_now: invoice_now, prorate: prorate)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_subscriptions_subscription_exposed_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Subscription.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.&lt;/p&gt;  &lt;p&gt;Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
    # @param subscription_exposed_id [String]
    # @return nil
    def delete_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_delete_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, expand: expand, invoice_now: invoice_now, prorate: prorate).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_subscriptions_subscription_exposed_id ..." }
      end
      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.delete_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscriptions/{subscription_exposed_id}".sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice_now"] = invoice_now.to_s if !invoice_now.nil?
      form_params["prorate"] = prorate.to_s if !prorate.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Removes the currently applied discount on a subscription.</p>
    # @param subscription_exposed_id [String]
    # @return [DeletedDiscount]
    def delete_subscriptions_subscription_exposed_id_discount(*, subscription_exposed_id : String)
      data, _status_code, _headers = delete_subscriptions_subscription_exposed_id_discount_with_http_info(subscription_exposed_id: subscription_exposed_id)
      data
    end

    # &lt;p&gt;Removes the currently applied discount on a subscription.&lt;/p&gt;
    # @param subscription_exposed_id [String]
    # @return [Array<(DeletedDiscount, Integer, Hash)>] DeletedDiscount data, response status code and response headers
    def delete_subscriptions_subscription_exposed_id_discount_with_http_info(*, subscription_exposed_id : String)
      request = build_api_request_for_delete_subscriptions_subscription_exposed_id_discount(subscription_exposed_id: subscription_exposed_id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_subscriptions_subscription_exposed_id_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedDiscount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Removes the currently applied discount on a subscription.&lt;/p&gt;
    # @param subscription_exposed_id [String]
    # @return nil
    def delete_subscriptions_subscription_exposed_id_discount(*, subscription_exposed_id : String, &block : Crest::Response ->)
      build_api_request_for_delete_subscriptions_subscription_exposed_id_discount(subscription_exposed_id: subscription_exposed_id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_subscriptions_subscription_exposed_id_discount(*, subscription_exposed_id : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_subscriptions_subscription_exposed_id_discount ..." }
      end
      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.delete_subscriptions_subscription_exposed_id_discount, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscriptions/{subscription_exposed_id}/discount".sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_subscriptions_subscription_exposed_id_discount",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>Configuration</code> object.</p>
    # @param configuration [String]
    # @return [DeletedTerminalConfiguration]
    def delete_terminal_configurations_configuration(*, configuration : String)
      data, _status_code, _headers = delete_terminal_configurations_configuration_with_http_info(configuration: configuration)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @param configuration [String]
    # @return [Array<(DeletedTerminalConfiguration, Integer, Hash)>] DeletedTerminalConfiguration data, response status code and response headers
    def delete_terminal_configurations_configuration_with_http_info(*, configuration : String)
      request = build_api_request_for_delete_terminal_configurations_configuration(configuration: configuration)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_terminal_configurations_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedTerminalConfiguration.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @param configuration [String]
    # @return nil
    def delete_terminal_configurations_configuration(*, configuration : String, &block : Crest::Response ->)
      build_api_request_for_delete_terminal_configurations_configuration(configuration: configuration).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_terminal_configurations_configuration(*, configuration : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_terminal_configurations_configuration ..." }
      end
      if @api_client.config.client_side_validation && configuration.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"configuration\" when calling DefaultApi.delete_terminal_configurations_configuration, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>Location</code> object.</p>
    # @param location [String]
    # @return [DeletedTerminalLocation]
    def delete_terminal_locations_location(*, location : String)
      data, _status_code, _headers = delete_terminal_locations_location_with_http_info(location: location)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @param location [String]
    # @return [Array<(DeletedTerminalLocation, Integer, Hash)>] DeletedTerminalLocation data, response status code and response headers
    def delete_terminal_locations_location_with_http_info(*, location : String)
      request = build_api_request_for_delete_terminal_locations_location(location: location)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_terminal_locations_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedTerminalLocation.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @param location [String]
    # @return nil
    def delete_terminal_locations_location(*, location : String, &block : Crest::Response ->)
      build_api_request_for_delete_terminal_locations_location(location: location).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_terminal_locations_location(*, location : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_terminal_locations_location ..." }
      end
      if @api_client.config.client_side_validation && location.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"location\" when calling DefaultApi.delete_terminal_locations_location, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a <code>Reader</code> object.</p>
    # @param reader [String]
    # @return [DeletedTerminalReader]
    def delete_terminal_readers_reader(*, reader : String)
      data, _status_code, _headers = delete_terminal_readers_reader_with_http_info(reader: reader)
      data
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @param reader [String]
    # @return [Array<(DeletedTerminalReader, Integer, Hash)>] DeletedTerminalReader data, response status code and response headers
    def delete_terminal_readers_reader_with_http_info(*, reader : String)
      request = build_api_request_for_delete_terminal_readers_reader(reader: reader)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_terminal_readers_reader\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedTerminalReader.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @param reader [String]
    # @return nil
    def delete_terminal_readers_reader(*, reader : String, &block : Crest::Response ->)
      build_api_request_for_delete_terminal_readers_reader(reader: reader).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_terminal_readers_reader(*, reader : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_terminal_readers_reader ..." }
      end
      if @api_client.config.client_side_validation && reader.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reader\" when calling DefaultApi.delete_terminal_readers_reader, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a test clock.</p>
    # @param test_clock [String]
    # @return [DeletedTestHelpersTestClock]
    def delete_test_helpers_test_clocks_test_clock(*, test_clock : String)
      data, _status_code, _headers = delete_test_helpers_test_clocks_test_clock_with_http_info(test_clock: test_clock)
      data
    end

    # &lt;p&gt;Deletes a test clock.&lt;/p&gt;
    # @param test_clock [String]
    # @return [Array<(DeletedTestHelpersTestClock, Integer, Hash)>] DeletedTestHelpersTestClock data, response status code and response headers
    def delete_test_helpers_test_clocks_test_clock_with_http_info(*, test_clock : String)
      request = build_api_request_for_delete_test_helpers_test_clocks_test_clock(test_clock: test_clock)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_test_helpers_test_clocks_test_clock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedTestHelpersTestClock.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes a test clock.&lt;/p&gt;
    # @param test_clock [String]
    # @return nil
    def delete_test_helpers_test_clocks_test_clock(*, test_clock : String, &block : Crest::Response ->)
      build_api_request_for_delete_test_helpers_test_clocks_test_clock(test_clock: test_clock).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_test_helpers_test_clocks_test_clock(*, test_clock : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_test_helpers_test_clocks_test_clock ..." }
      end
      if @api_client.config.client_side_validation && test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\" when calling DefaultApi.delete_test_helpers_test_clocks_test_clock, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_test_helpers_test_clocks_test_clock",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can also delete webhook endpoints via the <a href=\"https://dashboard.stripe.com/account/webhooks\">webhook endpoint management</a> page of the Stripe dashboard.</p>
    # @param webhook_endpoint [String]
    # @return [DeletedWebhookEndpoint]
    def delete_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String)
      data, _status_code, _headers = delete_webhook_endpoints_webhook_endpoint_with_http_info(webhook_endpoint: webhook_endpoint)
      data
    end

    # &lt;p&gt;You can also delete webhook endpoints via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhook endpoint management&lt;/a&gt; page of the Stripe dashboard.&lt;/p&gt;
    # @param webhook_endpoint [String]
    # @return [Array<(DeletedWebhookEndpoint, Integer, Hash)>] DeletedWebhookEndpoint data, response status code and response headers
    def delete_webhook_endpoints_webhook_endpoint_with_http_info(*, webhook_endpoint : String)
      request = build_api_request_for_delete_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#delete_webhook_endpoints_webhook_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return DeletedWebhookEndpoint.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can also delete webhook endpoints via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhook endpoint management&lt;/a&gt; page of the Stripe dashboard.&lt;/p&gt;
    # @param webhook_endpoint [String]
    # @return nil
    def delete_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String, &block : Crest::Response ->)
      build_api_request_for_delete_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.delete_webhook_endpoints_webhook_endpoint ..." }
      end
      if @api_client.config.client_side_validation && webhook_endpoint.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"webhook_endpoint\" when calling DefaultApi.delete_webhook_endpoints_webhook_endpoint, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints/{webhook_endpoint}".sub("{" + "webhook_endpoint" + "}", URI.encode_path(webhook_endpoint.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "DefaultApi.delete_webhook_endpoints_webhook_endpoint",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a 3D Secure object.</p>
    # @param three_d_secure [String]
    # @return [ThreeDSecure]
    def get3d_secure_three_d_secure(*, three_d_secure : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get3d_secure_three_d_secure_with_http_info(three_d_secure: three_d_secure, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a 3D Secure object.&lt;/p&gt;
    # @param three_d_secure [String]
    # @return [Array<(ThreeDSecure, Integer, Hash)>] ThreeDSecure data, response status code and response headers
    def get3d_secure_three_d_secure_with_http_info(*, three_d_secure : String, expand : Array(String)? = nil)
      request = build_api_request_for_get3d_secure_three_d_secure(three_d_secure: three_d_secure, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get3d_secure_three_d_secure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ThreeDSecure.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a 3D Secure object.&lt;/p&gt;
    # @param three_d_secure [String]
    # @return nil
    def get3d_secure_three_d_secure(*, three_d_secure : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get3d_secure_three_d_secure(three_d_secure: three_d_secure, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get3d_secure_three_d_secure(*, three_d_secure : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get3d_secure_three_d_secure ..." }
      end
      if @api_client.config.client_side_validation && three_d_secure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"three_d_secure\" when calling DefaultApi.get3d_secure_three_d_secure, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/3d_secure/{three_d_secure}".sub("{" + "three_d_secure" + "}", URI.encode_path(three_d_secure.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get3d_secure_three_d_secure",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an account.</p>
    # @return [Account]
    def get_account(*, expand : Array(String)? = nil)
      data, _status_code, _headers = get_account_with_http_info(expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def get_account_with_http_info(*, expand : Array(String)? = nil)
      request = build_api_request_for_get_account(expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Account.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
    # @return nil
    def get_account(*, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account(expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account(*, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account ..." }
      end
      # resource path
      local_var_path = "/v1/account"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a specified external account for a given account.</p>
    # @param id [String]
    # @return [ExternalAccount]
    def get_account_bank_accounts_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_account_bank_accounts_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def get_account_bank_accounts_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_account_bank_accounts_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_account_bank_accounts_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_bank_accounts_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_bank_accounts_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_bank_accounts_id ..." }
      end
      # resource path
      local_var_path = "/v1/account/bank_accounts/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
    # @return [ListAccountCapability]
    def get_account_capabilities(*, expand : Array(String)? = nil)
      data, _status_code, _headers = get_account_capabilities_with_http_info(expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.&lt;/p&gt;
    # @return [Array<(ListAccountCapability, Integer, Hash)>] ListAccountCapability data, response status code and response headers
    def get_account_capabilities_with_http_info(*, expand : Array(String)? = nil)
      request = build_api_request_for_get_account_capabilities(expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ListAccountCapability.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.&lt;/p&gt;
    # @return nil
    def get_account_capabilities(*, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_capabilities(expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_capabilities(*, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_capabilities ..." }
      end
      # resource path
      local_var_path = "/v1/account/capabilities"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_capabilities",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves information about the specified Account Capability.</p>
    # @param capability [String]
    # @return [Capability]
    def get_account_capabilities_capability(*, capability : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_account_capabilities_capability_with_http_info(capability: capability, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves information about the specified Account Capability.&lt;/p&gt;
    # @param capability [String]
    # @return [Array<(Capability, Integer, Hash)>] Capability data, response status code and response headers
    def get_account_capabilities_capability_with_http_info(*, capability : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_account_capabilities_capability(capability: capability, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_capabilities_capability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Capability.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves information about the specified Account Capability.&lt;/p&gt;
    # @param capability [String]
    # @return nil
    def get_account_capabilities_capability(*, capability : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_capabilities_capability(capability: capability, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_capabilities_capability(*, capability : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_capabilities_capability ..." }
      end
      # resource path
      local_var_path = "/v1/account/capabilities/{capability}".sub("{" + "capability" + "}", URI.encode_path(capability.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_capabilities_capability",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List external accounts for an account.</p>
    # @return [ExternalAccountList]
    def get_account_external_accounts(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_account_external_accounts_with_http_info(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;List external accounts for an account.&lt;/p&gt;
    # @return [Array<(ExternalAccountList, Integer, Hash)>] ExternalAccountList data, response status code and response headers
    def get_account_external_accounts_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_account_external_accounts(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_external_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccountList.from_json(data), status_code, headers
    end

    # &lt;p&gt;List external accounts for an account.&lt;/p&gt;
    # @return nil
    def get_account_external_accounts(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_external_accounts(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_external_accounts(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_external_accounts ..." }
      end
      # resource path
      local_var_path = "/v1/account/external_accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_external_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a specified external account for a given account.</p>
    # @param id [String]
    # @return [ExternalAccount]
    def get_account_external_accounts_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_account_external_accounts_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def get_account_external_accounts_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_account_external_accounts_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_external_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_account_external_accounts_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_external_accounts_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_external_accounts_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_external_accounts_id ..." }
      end
      # resource path
      local_var_path = "/v1/account/external_accounts/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
    # @return [GetAccountPeople200Response]
    def get_account_people(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_account_people_with_http_info(ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @return [Array<(GetAccountPeople200Response, Integer, Hash)>] GetAccountPeople200Response data, response status code and response headers
    def get_account_people_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_account_people(ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_people\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetAccountPeople200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @return nil
    def get_account_people(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_people(ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_people(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_people ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_account_people, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/people"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["relationship"] = relationship.to_s if !relationship.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_people",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an existing person.</p>
    # @param person [String]
    # @return [Person]
    def get_account_people_person(*, person : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_account_people_person_with_http_info(person: person, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @param person [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def get_account_people_person_with_http_info(*, person : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_account_people_person(person: person, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_people_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @param person [String]
    # @return nil
    def get_account_people_person(*, person : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_people_person(person: person, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_people_person(*, person : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_people_person ..." }
      end
      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.get_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/people/{person}".sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_people_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
    # @return [GetAccountPeople200Response]
    def get_account_persons(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_account_persons_with_http_info(ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @return [Array<(GetAccountPeople200Response, Integer, Hash)>] GetAccountPeople200Response data, response status code and response headers
    def get_account_persons_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_account_persons(ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_persons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetAccountPeople200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @return nil
    def get_account_persons(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_persons(ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_persons(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_persons ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_account_persons, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/persons"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["relationship"] = relationship.to_s if !relationship.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_persons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an existing person.</p>
    # @param person [String]
    # @return [Person]
    def get_account_persons_person(*, person : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_account_persons_person_with_http_info(person: person, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @param person [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def get_account_persons_person_with_http_info(*, person : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_account_persons_person(person: person, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_account_persons_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @param person [String]
    # @return nil
    def get_account_persons_person(*, person : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_account_persons_person(person: person, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_account_persons_person(*, person : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_account_persons_person ..." }
      end
      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.get_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/persons/{person}".sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of accounts connected to your platform via <a href=\"/docs/connect\">Connect</a>. If you’re not a platform, the list is empty.</p>
    # @return [GetAccounts200Response]
    def get_accounts(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_accounts_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of accounts connected to your platform via &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;. If you’re not a platform, the list is empty.&lt;/p&gt;
    # @return [Array<(GetAccounts200Response, Integer, Hash)>] GetAccounts200Response data, response status code and response headers
    def get_accounts_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_accounts(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetAccounts200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of accounts connected to your platform via &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;. If you’re not a platform, the list is empty.&lt;/p&gt;
    # @return nil
    def get_accounts(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts ..." }
      end
      # resource path
      local_var_path = "/v1/accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an account.</p>
    # @param account [String]
    # @return [Account]
    def get_accounts_account(*, account : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_accounts_account_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def get_accounts_account_with_http_info(*, account : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_accounts_account(account: account, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Account.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def get_accounts_account(*, account : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account(account: account, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account(*, account : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a specified external account for a given account.</p>
    # @param account [String]
    # @param id [String]
    # @return [ExternalAccount]
    def get_accounts_account_bank_accounts_id(*, account : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_accounts_account_bank_accounts_id_with_http_info(account: account, id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def get_accounts_account_bank_accounts_id_with_http_info(*, account : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_accounts_account_bank_accounts_id(account: account, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return nil
    def get_accounts_account_bank_accounts_id(*, account : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_bank_accounts_id(account: account, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_bank_accounts_id(*, account : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_bank_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/bank_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
    # @param account [String]
    # @return [ListAccountCapability]
    def get_accounts_account_capabilities(*, account : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_accounts_account_capabilities_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(ListAccountCapability, Integer, Hash)>] ListAccountCapability data, response status code and response headers
    def get_accounts_account_capabilities_with_http_info(*, account : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_accounts_account_capabilities(account: account, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ListAccountCapability.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def get_accounts_account_capabilities(*, account : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_capabilities(account: account, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_capabilities(*, account : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_capabilities ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_capabilities, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/capabilities".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_capabilities",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves information about the specified Account Capability.</p>
    # @param account [String]
    # @param capability [String]
    # @return [Capability]
    def get_accounts_account_capabilities_capability(*, account : String, capability : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_accounts_account_capabilities_capability_with_http_info(account: account, capability: capability, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves information about the specified Account Capability.&lt;/p&gt;
    # @param account [String]
    # @param capability [String]
    # @return [Array<(Capability, Integer, Hash)>] Capability data, response status code and response headers
    def get_accounts_account_capabilities_capability_with_http_info(*, account : String, capability : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_accounts_account_capabilities_capability(account: account, capability: capability, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_capabilities_capability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Capability.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves information about the specified Account Capability.&lt;/p&gt;
    # @param account [String]
    # @param capability [String]
    # @return nil
    def get_accounts_account_capabilities_capability(*, account : String, capability : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_capabilities_capability(account: account, capability: capability, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_capabilities_capability(*, account : String, capability : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_capabilities_capability ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_capabilities_capability, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/capabilities/{capability}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "capability" + "}", URI.encode_path(capability.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_capabilities_capability",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List external accounts for an account.</p>
    # @param account [String]
    # @return [ExternalAccountList]
    def get_accounts_account_external_accounts(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_accounts_account_external_accounts_with_http_info(account: account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;List external accounts for an account.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(ExternalAccountList, Integer, Hash)>] ExternalAccountList data, response status code and response headers
    def get_accounts_account_external_accounts_with_http_info(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_accounts_account_external_accounts(account: account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_external_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccountList.from_json(data), status_code, headers
    end

    # &lt;p&gt;List external accounts for an account.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def get_accounts_account_external_accounts(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_external_accounts(account: account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_external_accounts(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_external_accounts ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_external_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_external_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a specified external account for a given account.</p>
    # @param account [String]
    # @param id [String]
    # @return [ExternalAccount]
    def get_accounts_account_external_accounts_id(*, account : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_accounts_account_external_accounts_id_with_http_info(account: account, id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def get_accounts_account_external_accounts_id_with_http_info(*, account : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_accounts_account_external_accounts_id(account: account, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_external_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return nil
    def get_accounts_account_external_accounts_id(*, account : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_external_accounts_id(account: account, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_external_accounts_id(*, account : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_external_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
    # @param account [String]
    # @return [GetAccountPeople200Response]
    def get_accounts_account_people(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_accounts_account_people_with_http_info(account: account, ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(GetAccountPeople200Response, Integer, Hash)>] GetAccountPeople200Response data, response status code and response headers
    def get_accounts_account_people_with_http_info(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_accounts_account_people(account: account, ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_people\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetAccountPeople200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def get_accounts_account_people(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_people(account: account, ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_people(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_people ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/people".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["relationship"] = relationship.to_s if !relationship.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_people",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an existing person.</p>
    # @param account [String]
    # @param person [String]
    # @return [Person]
    def get_accounts_account_people_person(*, account : String, person : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_accounts_account_people_person_with_http_info(account: account, person: person, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def get_accounts_account_people_person_with_http_info(*, account : String, person : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_accounts_account_people_person(account: account, person: person, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_people_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return nil
    def get_accounts_account_people_person(*, account : String, person : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_people_person(account: account, person: person, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_people_person(*, account : String, person : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_people_person ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.get_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/people/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_people_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
    # @param account [String]
    # @return [GetAccountPeople200Response]
    def get_accounts_account_persons(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_accounts_account_persons_with_http_info(account: account, ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(GetAccountPeople200Response, Integer, Hash)>] GetAccountPeople200Response data, response status code and response headers
    def get_accounts_account_persons_with_http_info(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_accounts_account_persons(account: account, ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_persons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetAccountPeople200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def get_accounts_account_persons(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_persons(account: account, ending_before: ending_before, expand: expand, limit: limit, relationship: relationship, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_persons(*, account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, relationship : AllPeopleRelationshipSpecs? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_persons ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["relationship"] = relationship.to_s if !relationship.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_persons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an existing person.</p>
    # @param account [String]
    # @param person [String]
    # @return [Person]
    def get_accounts_account_persons_person(*, account : String, person : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_accounts_account_persons_person_with_http_info(account: account, person: person, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def get_accounts_account_persons_person_with_http_info(*, account : String, person : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_accounts_account_persons_person(account: account, person: person, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_accounts_account_persons_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return nil
    def get_accounts_account_persons_person(*, account : String, person : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_accounts_account_persons_person(account: account, person: person, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_accounts_account_persons_person(*, account : String, person : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_accounts_account_persons_person ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.get_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_accounts_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List apple pay domains.</p>
    # @return [ApplePayDomainList]
    def get_apple_pay_domains(*, domain_name : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_apple_pay_domains_with_http_info(domain_name: domain_name, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;List apple pay domains.&lt;/p&gt;
    # @return [Array<(ApplePayDomainList, Integer, Hash)>] ApplePayDomainList data, response status code and response headers
    def get_apple_pay_domains_with_http_info(*, domain_name : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_apple_pay_domains(domain_name: domain_name, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_apple_pay_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ApplePayDomainList.from_json(data), status_code, headers
    end

    # &lt;p&gt;List apple pay domains.&lt;/p&gt;
    # @return nil
    def get_apple_pay_domains(*, domain_name : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_apple_pay_domains(domain_name: domain_name, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_apple_pay_domains(*, domain_name : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_apple_pay_domains ..." }
      end
      if @api_client.config.client_side_validation && !domain_name.nil? && domain_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"domain_name\" when calling DefaultApi.get_apple_pay_domains, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_apple_pay_domains, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_apple_pay_domains, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/apple_pay/domains"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["domain_name"] = domain_name.to_s if !domain_name.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_apple_pay_domains",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve an apple pay domain.</p>
    # @param domain [String]
    # @return [ApplePayDomain]
    def get_apple_pay_domains_domain(*, domain : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_apple_pay_domains_domain_with_http_info(domain: domain, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve an apple pay domain.&lt;/p&gt;
    # @param domain [String]
    # @return [Array<(ApplePayDomain, Integer, Hash)>] ApplePayDomain data, response status code and response headers
    def get_apple_pay_domains_domain_with_http_info(*, domain : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_apple_pay_domains_domain(domain: domain, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_apple_pay_domains_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ApplePayDomain.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve an apple pay domain.&lt;/p&gt;
    # @param domain [String]
    # @return nil
    def get_apple_pay_domains_domain(*, domain : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_apple_pay_domains_domain(domain: domain, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_apple_pay_domains_domain(*, domain : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_apple_pay_domains_domain ..." }
      end
      if @api_client.config.client_side_validation && domain.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"domain\" when calling DefaultApi.get_apple_pay_domains_domain, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/apple_pay/domains/{domain}".sub("{" + "domain" + "}", URI.encode_path(domain.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_apple_pay_domains_domain",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
    # @return [GetApplicationFees200Response]
    def get_application_fees(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_application_fees_with_http_info(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.&lt;/p&gt;
    # @return [Array<(GetApplicationFees200Response, Integer, Hash)>] GetApplicationFees200Response data, response status code and response headers
    def get_application_fees_with_http_info(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_application_fees(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_application_fees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetApplicationFees200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.&lt;/p&gt;
    # @return nil
    def get_application_fees(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_application_fees(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_application_fees(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_application_fees ..." }
      end
      if @api_client.config.client_side_validation && !charge.nil? && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.get_application_fees, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_application_fees, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_application_fees, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/application_fees"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_application_fees",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
    # @param fee [String]
    # @param id [String]
    # @return [FeeRefund]
    def get_application_fees_fee_refunds_id(*, fee : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_application_fees_fee_refunds_id_with_http_info(fee: fee, id: id, expand: expand)
      data
    end

    # &lt;p&gt;By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.&lt;/p&gt;
    # @param fee [String]
    # @param id [String]
    # @return [Array<(FeeRefund, Integer, Hash)>] FeeRefund data, response status code and response headers
    def get_application_fees_fee_refunds_id_with_http_info(*, fee : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_application_fees_fee_refunds_id(fee: fee, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_application_fees_fee_refunds_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FeeRefund.from_json(data), status_code, headers
    end

    # &lt;p&gt;By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.&lt;/p&gt;
    # @param fee [String]
    # @param id [String]
    # @return nil
    def get_application_fees_fee_refunds_id(*, fee : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_application_fees_fee_refunds_id(fee: fee, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_application_fees_fee_refunds_id(*, fee : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_application_fees_fee_refunds_id ..." }
      end
      if @api_client.config.client_side_validation && fee.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"fee\" when calling DefaultApi.get_application_fees_fee_refunds_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_application_fees_fee_refunds_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/application_fees/{fee}/refunds/{id}".sub("{" + "fee" + "}", URI.encode_path(fee.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_application_fees_fee_refunds_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
    # @param id [String]
    # @return [ApplicationFee]
    def get_application_fees_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_application_fees_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(ApplicationFee, Integer, Hash)>] ApplicationFee data, response status code and response headers
    def get_application_fees_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_application_fees_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_application_fees_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ApplicationFee.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_application_fees_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_application_fees_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_application_fees_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_application_fees_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_application_fees_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/application_fees/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_application_fees_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
    # @param id [String]
    # @return [FeeRefundList]
    def get_application_fees_id_refunds(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_application_fees_id_refunds_with_http_info(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional refunds.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(FeeRefundList, Integer, Hash)>] FeeRefundList data, response status code and response headers
    def get_application_fees_id_refunds_with_http_info(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_application_fees_id_refunds(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_application_fees_id_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FeeRefundList.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional refunds.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_application_fees_id_refunds(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_application_fees_id_refunds(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_application_fees_id_refunds(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_application_fees_id_refunds ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_application_fees_id_refunds, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_application_fees_id_refunds, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_application_fees_id_refunds, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/application_fees/{id}/refunds".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_application_fees_id_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List all secrets stored on the given scope.</p>
    # @param scope [ScopeParam] Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
    # @return [GetAppsSecrets200Response]
    def get_apps_secrets(*, scope : ScopeParam, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_apps_secrets_with_http_info(scope: scope, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;List all secrets stored on the given scope.&lt;/p&gt;
    # @param scope [ScopeParam] Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
    # @return [Array<(GetAppsSecrets200Response, Integer, Hash)>] GetAppsSecrets200Response data, response status code and response headers
    def get_apps_secrets_with_http_info(*, scope : ScopeParam, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_apps_secrets(scope: scope, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_apps_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetAppsSecrets200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;List all secrets stored on the given scope.&lt;/p&gt;
    # @param scope [ScopeParam] Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
    # @return nil
    def get_apps_secrets(*, scope : ScopeParam, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_apps_secrets(scope: scope, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_apps_secrets(*, scope : ScopeParam, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_apps_secrets ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_apps_secrets, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_apps_secrets, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/apps/secrets"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["scope"] = scope.to_s if !scope.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_apps_secrets",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Finds a secret in the secret store by name and scope.</p>
    # @param name [String] A name for the secret that's unique within the scope.
    # @param scope [ScopeParam] Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
    # @return [AppsSecret]
    def get_apps_secrets_find(*, name : String, scope : ScopeParam, expand : Array(String)? = nil)
      data, _status_code, _headers = get_apps_secrets_find_with_http_info(name: name, scope: scope, expand: expand)
      data
    end

    # &lt;p&gt;Finds a secret in the secret store by name and scope.&lt;/p&gt;
    # @param name [String] A name for the secret that's unique within the scope.
    # @param scope [ScopeParam] Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
    # @return [Array<(AppsSecret, Integer, Hash)>] AppsSecret data, response status code and response headers
    def get_apps_secrets_find_with_http_info(*, name : String, scope : ScopeParam, expand : Array(String)? = nil)
      request = build_api_request_for_get_apps_secrets_find(name: name, scope: scope, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_apps_secrets_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return AppsSecret.from_json(data), status_code, headers
    end

    # &lt;p&gt;Finds a secret in the secret store by name and scope.&lt;/p&gt;
    # @param name [String] A name for the secret that's unique within the scope.
    # @param scope [ScopeParam] Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
    # @return nil
    def get_apps_secrets_find(*, name : String, scope : ScopeParam, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_apps_secrets_find(name: name, scope: scope, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_apps_secrets_find(*, name : String, scope : ScopeParam, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_apps_secrets_find ..." }
      end
      if @api_client.config.client_side_validation && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.get_apps_secrets_find, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/apps/secrets/find"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["name"] = name.to_s if !name.nil?
      query_params["scope"] = scope.to_s if !scope.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_apps_secrets_find",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the current account balance, based on the authentication that was used to make the request.  For a sample request, see <a href=\"/docs/connect/account-balances#accounting-for-negative-balances\">Accounting for negative balances</a>.</p>
    # @return [Balance]
    def get_balance(*, expand : Array(String)? = nil)
      data, _status_code, _headers = get_balance_with_http_info(expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the current account balance, based on the authentication that was used to make the request.  For a sample request, see &lt;a href&#x3D;\&quot;/docs/connect/account-balances#accounting-for-negative-balances\&quot;&gt;Accounting for negative balances&lt;/a&gt;.&lt;/p&gt;
    # @return [Array<(Balance, Integer, Hash)>] Balance data, response status code and response headers
    def get_balance_with_http_info(*, expand : Array(String)? = nil)
      request = build_api_request_for_get_balance(expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Balance.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the current account balance, based on the authentication that was used to make the request.  For a sample request, see &lt;a href&#x3D;\&quot;/docs/connect/account-balances#accounting-for-negative-balances\&quot;&gt;Accounting for negative balances&lt;/a&gt;.&lt;/p&gt;
    # @return nil
    def get_balance(*, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_balance(expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_balance(*, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_balance ..." }
      end
      # resource path
      local_var_path = "/v1/balance"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_balance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>  <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
    # @return [BalanceTransactionsList]
    def get_balance_history(*, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payout : String? = nil, source : String? = nil, starting_after : String? = nil, _type : String? = nil)
      data, _status_code, _headers = get_balance_history_with_http_info(created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, payout: payout, source: source, starting_after: starting_after, _type: _type)
      data
    end

    # &lt;p&gt;Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.&lt;/p&gt;  &lt;p&gt;Note that this endpoint was previously called “Balance history” and used the path &lt;code&gt;/v1/balance/history&lt;/code&gt;.&lt;/p&gt;
    # @return [Array<(BalanceTransactionsList, Integer, Hash)>] BalanceTransactionsList data, response status code and response headers
    def get_balance_history_with_http_info(*, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payout : String? = nil, source : String? = nil, starting_after : String? = nil, _type : String? = nil)
      request = build_api_request_for_get_balance_history(created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, payout: payout, source: source, starting_after: starting_after, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_balance_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BalanceTransactionsList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.&lt;/p&gt;  &lt;p&gt;Note that this endpoint was previously called “Balance history” and used the path &lt;code&gt;/v1/balance/history&lt;/code&gt;.&lt;/p&gt;
    # @return nil
    def get_balance_history(*, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payout : String? = nil, source : String? = nil, starting_after : String? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_balance_history(created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, payout: payout, source: source, starting_after: starting_after, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_balance_history(*, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payout : String? = nil, source : String? = nil, starting_after : String? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_balance_history ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_balance_history, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payout.nil? && payout.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payout\" when calling DefaultApi.get_balance_history, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.get_balance_history, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_balance_history, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !_type.nil? && _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\" when calling DefaultApi.get_balance_history, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/balance/history"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payout"] = payout.to_s if !payout.nil?
      query_params["source"] = source.to_s if !source.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_balance_history",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the balance transaction with the given ID.</p>  <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
    # @param id [String]
    # @return [BalanceTransaction]
    def get_balance_history_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_balance_history_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the balance transaction with the given ID.&lt;/p&gt;  &lt;p&gt;Note that this endpoint previously used the path &lt;code&gt;/v1/balance/history/:id&lt;/code&gt;.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(BalanceTransaction, Integer, Hash)>] BalanceTransaction data, response status code and response headers
    def get_balance_history_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_balance_history_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_balance_history_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BalanceTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the balance transaction with the given ID.&lt;/p&gt;  &lt;p&gt;Note that this endpoint previously used the path &lt;code&gt;/v1/balance/history/:id&lt;/code&gt;.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_balance_history_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_balance_history_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_balance_history_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_balance_history_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_balance_history_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/balance/history/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_balance_history_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>  <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
    # @return [BalanceTransactionsList]
    def get_balance_transactions(*, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payout : String? = nil, source : String? = nil, starting_after : String? = nil, _type : String? = nil)
      data, _status_code, _headers = get_balance_transactions_with_http_info(created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, payout: payout, source: source, starting_after: starting_after, _type: _type)
      data
    end

    # &lt;p&gt;Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.&lt;/p&gt;  &lt;p&gt;Note that this endpoint was previously called “Balance history” and used the path &lt;code&gt;/v1/balance/history&lt;/code&gt;.&lt;/p&gt;
    # @return [Array<(BalanceTransactionsList, Integer, Hash)>] BalanceTransactionsList data, response status code and response headers
    def get_balance_transactions_with_http_info(*, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payout : String? = nil, source : String? = nil, starting_after : String? = nil, _type : String? = nil)
      request = build_api_request_for_get_balance_transactions(created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, payout: payout, source: source, starting_after: starting_after, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_balance_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BalanceTransactionsList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.&lt;/p&gt;  &lt;p&gt;Note that this endpoint was previously called “Balance history” and used the path &lt;code&gt;/v1/balance/history&lt;/code&gt;.&lt;/p&gt;
    # @return nil
    def get_balance_transactions(*, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payout : String? = nil, source : String? = nil, starting_after : String? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_balance_transactions(created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, payout: payout, source: source, starting_after: starting_after, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_balance_transactions(*, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payout : String? = nil, source : String? = nil, starting_after : String? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_balance_transactions ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payout.nil? && payout.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payout\" when calling DefaultApi.get_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.get_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !_type.nil? && _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\" when calling DefaultApi.get_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/balance_transactions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payout"] = payout.to_s if !payout.nil?
      query_params["source"] = source.to_s if !source.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_balance_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the balance transaction with the given ID.</p>  <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
    # @param id [String]
    # @return [BalanceTransaction]
    def get_balance_transactions_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_balance_transactions_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the balance transaction with the given ID.&lt;/p&gt;  &lt;p&gt;Note that this endpoint previously used the path &lt;code&gt;/v1/balance/history/:id&lt;/code&gt;.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(BalanceTransaction, Integer, Hash)>] BalanceTransaction data, response status code and response headers
    def get_balance_transactions_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_balance_transactions_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_balance_transactions_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BalanceTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the balance transaction with the given ID.&lt;/p&gt;  &lt;p&gt;Note that this endpoint previously used the path &lt;code&gt;/v1/balance/history/:id&lt;/code&gt;.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_balance_transactions_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_balance_transactions_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_balance_transactions_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_balance_transactions_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_balance_transactions_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/balance_transactions/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_balance_transactions_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
    # @return [GetBillingPortalConfigurations200Response]
    def get_billing_portal_configurations(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, is_default : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_billing_portal_configurations_with_http_info(active: active, ending_before: ending_before, expand: expand, is_default: is_default, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of configurations that describe the functionality of the customer portal.&lt;/p&gt;
    # @return [Array<(GetBillingPortalConfigurations200Response, Integer, Hash)>] GetBillingPortalConfigurations200Response data, response status code and response headers
    def get_billing_portal_configurations_with_http_info(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, is_default : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_billing_portal_configurations(active: active, ending_before: ending_before, expand: expand, is_default: is_default, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_billing_portal_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetBillingPortalConfigurations200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of configurations that describe the functionality of the customer portal.&lt;/p&gt;
    # @return nil
    def get_billing_portal_configurations(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, is_default : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_billing_portal_configurations(active: active, ending_before: ending_before, expand: expand, is_default: is_default, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_billing_portal_configurations(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, is_default : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_billing_portal_configurations ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_billing_portal_configurations, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_billing_portal_configurations, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/billing_portal/configurations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["is_default"] = is_default.to_s if !is_default.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_billing_portal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
    # @param configuration [String]
    # @return [BillingPortalConfiguration]
    def get_billing_portal_configurations_configuration(*, configuration : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_billing_portal_configurations_configuration_with_http_info(configuration: configuration, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a configuration that describes the functionality of the customer portal.&lt;/p&gt;
    # @param configuration [String]
    # @return [Array<(BillingPortalConfiguration, Integer, Hash)>] BillingPortalConfiguration data, response status code and response headers
    def get_billing_portal_configurations_configuration_with_http_info(*, configuration : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_billing_portal_configurations_configuration(configuration: configuration, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_billing_portal_configurations_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BillingPortalConfiguration.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a configuration that describes the functionality of the customer portal.&lt;/p&gt;
    # @param configuration [String]
    # @return nil
    def get_billing_portal_configurations_configuration(*, configuration : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_billing_portal_configurations_configuration(configuration: configuration, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_billing_portal_configurations_configuration(*, configuration : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_billing_portal_configurations_configuration ..." }
      end
      if @api_client.config.client_side_validation && configuration.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"configuration\" when calling DefaultApi.get_billing_portal_configurations_configuration, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/billing_portal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_billing_portal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p>
    # @return [GetBitcoinReceivers200Response]
    def get_bitcoin_receivers(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, filled : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil, uncaptured_funds : Bool? = nil)
      data, _status_code, _headers = get_bitcoin_receivers_with_http_info(active: active, ending_before: ending_before, expand: expand, filled: filled, limit: limit, starting_after: starting_after, uncaptured_funds: uncaptured_funds)
      data
    end

    # &lt;p&gt;Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.&lt;/p&gt;
    # @return [Array<(GetBitcoinReceivers200Response, Integer, Hash)>] GetBitcoinReceivers200Response data, response status code and response headers
    def get_bitcoin_receivers_with_http_info(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, filled : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil, uncaptured_funds : Bool? = nil)
      request = build_api_request_for_get_bitcoin_receivers(active: active, ending_before: ending_before, expand: expand, filled: filled, limit: limit, starting_after: starting_after, uncaptured_funds: uncaptured_funds)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_bitcoin_receivers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetBitcoinReceivers200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.&lt;/p&gt;
    # @return nil
    def get_bitcoin_receivers(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, filled : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil, uncaptured_funds : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_get_bitcoin_receivers(active: active, ending_before: ending_before, expand: expand, filled: filled, limit: limit, starting_after: starting_after, uncaptured_funds: uncaptured_funds).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_bitcoin_receivers(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, filled : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil, uncaptured_funds : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_bitcoin_receivers ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_bitcoin_receivers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_bitcoin_receivers, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/bitcoin/receivers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["filled"] = filled.to_s if !filled.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["uncaptured_funds"] = uncaptured_funds.to_s if !uncaptured_funds.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_bitcoin_receivers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the Bitcoin receiver with the given ID.</p>
    # @param id [String]
    # @return [BitcoinReceiver]
    def get_bitcoin_receivers_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_bitcoin_receivers_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the Bitcoin receiver with the given ID.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(BitcoinReceiver, Integer, Hash)>] BitcoinReceiver data, response status code and response headers
    def get_bitcoin_receivers_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_bitcoin_receivers_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_bitcoin_receivers_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BitcoinReceiver.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the Bitcoin receiver with the given ID.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_bitcoin_receivers_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_bitcoin_receivers_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_bitcoin_receivers_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_bitcoin_receivers_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_bitcoin_receivers_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/bitcoin/receivers/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_bitcoin_receivers_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List bitcoin transacitons for a given receiver.</p>
    # @param receiver [String]
    # @return [BitcoinTransactionList]
    def get_bitcoin_receivers_receiver_transactions(*, receiver : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_bitcoin_receivers_receiver_transactions_with_http_info(receiver: receiver, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;List bitcoin transacitons for a given receiver.&lt;/p&gt;
    # @param receiver [String]
    # @return [Array<(BitcoinTransactionList, Integer, Hash)>] BitcoinTransactionList data, response status code and response headers
    def get_bitcoin_receivers_receiver_transactions_with_http_info(*, receiver : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_bitcoin_receivers_receiver_transactions(receiver: receiver, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_bitcoin_receivers_receiver_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BitcoinTransactionList.from_json(data), status_code, headers
    end

    # &lt;p&gt;List bitcoin transacitons for a given receiver.&lt;/p&gt;
    # @param receiver [String]
    # @return nil
    def get_bitcoin_receivers_receiver_transactions(*, receiver : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_bitcoin_receivers_receiver_transactions(receiver: receiver, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_bitcoin_receivers_receiver_transactions(*, receiver : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_bitcoin_receivers_receiver_transactions ..." }
      end
      if @api_client.config.client_side_validation && receiver.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receiver\" when calling DefaultApi.get_bitcoin_receivers_receiver_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_bitcoin_receivers_receiver_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_bitcoin_receivers_receiver_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_bitcoin_receivers_receiver_transactions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/bitcoin/receivers/{receiver}/transactions".sub("{" + "receiver" + "}", URI.encode_path(receiver.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_bitcoin_receivers_receiver_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List bitcoin transacitons for a given receiver.</p>
    # @return [BitcoinTransactionList]
    def get_bitcoin_transactions(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, receiver : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_bitcoin_transactions_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, receiver: receiver, starting_after: starting_after)
      data
    end

    # &lt;p&gt;List bitcoin transacitons for a given receiver.&lt;/p&gt;
    # @return [Array<(BitcoinTransactionList, Integer, Hash)>] BitcoinTransactionList data, response status code and response headers
    def get_bitcoin_transactions_with_http_info(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, receiver : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_bitcoin_transactions(customer: customer, ending_before: ending_before, expand: expand, limit: limit, receiver: receiver, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_bitcoin_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BitcoinTransactionList.from_json(data), status_code, headers
    end

    # &lt;p&gt;List bitcoin transacitons for a given receiver.&lt;/p&gt;
    # @return nil
    def get_bitcoin_transactions(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, receiver : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_bitcoin_transactions(customer: customer, ending_before: ending_before, expand: expand, limit: limit, receiver: receiver, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_bitcoin_transactions(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, receiver : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_bitcoin_transactions ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_bitcoin_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_bitcoin_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !receiver.nil? && receiver.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receiver\" when calling DefaultApi.get_bitcoin_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_bitcoin_transactions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/bitcoin/transactions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["receiver"] = receiver.to_s if !receiver.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_bitcoin_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
    # @return [GetCharges200Response]
    def get_charges(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, transfer_group : String? = nil)
      data, _status_code, _headers = get_charges_with_http_info(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.&lt;/p&gt;
    # @return [Array<(GetCharges200Response, Integer, Hash)>] GetCharges200Response data, response status code and response headers
    def get_charges_with_http_info(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, transfer_group : String? = nil)
      request = build_api_request_for_get_charges(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after, transfer_group: transfer_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetCharges200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.&lt;/p&gt;
    # @return nil
    def get_charges(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, transfer_group : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_charges(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after, transfer_group: transfer_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_charges(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, transfer_group : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_charges ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_charges, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_intent.nil? && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.get_charges, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !transfer_group.nil? && transfer_group.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer_group\" when calling DefaultApi.get_charges, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_charges",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
    # @param charge [String]
    # @return [Charge]
    def get_charges_charge(*, charge : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_charges_charge_with_http_info(charge: charge, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.&lt;/p&gt;
    # @param charge [String]
    # @return [Array<(Charge, Integer, Hash)>] Charge data, response status code and response headers
    def get_charges_charge_with_http_info(*, charge : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_charges_charge(charge: charge, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_charges_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Charge.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.&lt;/p&gt;
    # @param charge [String]
    # @return nil
    def get_charges_charge(*, charge : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_charges_charge(charge: charge, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_charges_charge(*, charge : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_charges_charge ..." }
      end
      if @api_client.config.client_side_validation && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.get_charges_charge, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges/{charge}".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_charges_charge",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a dispute for a specified charge.</p>
    # @param charge [String]
    # @return [Dispute]
    def get_charges_charge_dispute(*, charge : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_charges_charge_dispute_with_http_info(charge: charge, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a dispute for a specified charge.&lt;/p&gt;
    # @param charge [String]
    # @return [Array<(Dispute, Integer, Hash)>] Dispute data, response status code and response headers
    def get_charges_charge_dispute_with_http_info(*, charge : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_charges_charge_dispute(charge: charge, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_charges_charge_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Dispute.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve a dispute for a specified charge.&lt;/p&gt;
    # @param charge [String]
    # @return nil
    def get_charges_charge_dispute(*, charge : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_charges_charge_dispute(charge: charge, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_charges_charge_dispute(*, charge : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_charges_charge_dispute ..." }
      end
      if @api_client.config.client_side_validation && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.get_charges_charge_dispute, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges/{charge}/dispute".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_charges_charge_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
    # @param charge [String]
    # @return [RefundList]
    def get_charges_charge_refunds(*, charge : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_charges_charge_refunds_with_http_info(charge: charge, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional refunds.&lt;/p&gt;
    # @param charge [String]
    # @return [Array<(RefundList, Integer, Hash)>] RefundList data, response status code and response headers
    def get_charges_charge_refunds_with_http_info(*, charge : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_charges_charge_refunds(charge: charge, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_charges_charge_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RefundList.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional refunds.&lt;/p&gt;
    # @param charge [String]
    # @return nil
    def get_charges_charge_refunds(*, charge : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_charges_charge_refunds(charge: charge, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_charges_charge_refunds(*, charge : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_charges_charge_refunds ..." }
      end
      # resource path
      local_var_path = "/v1/charges/{charge}/refunds".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_charges_charge_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing refund.</p>
    # @param charge [String]
    # @param refund [String]
    # @return [Refund]
    def get_charges_charge_refunds_refund(*, charge : String, refund : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_charges_charge_refunds_refund_with_http_info(charge: charge, refund: refund, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
    # @param charge [String]
    # @param refund [String]
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def get_charges_charge_refunds_refund_with_http_info(*, charge : String, refund : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_charges_charge_refunds_refund(charge: charge, refund: refund, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_charges_charge_refunds_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Refund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
    # @param charge [String]
    # @param refund [String]
    # @return nil
    def get_charges_charge_refunds_refund(*, charge : String, refund : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_charges_charge_refunds_refund(charge: charge, refund: refund, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_charges_charge_refunds_refund(*, charge : String, refund : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_charges_charge_refunds_refund ..." }
      end
      # resource path
      local_var_path = "/v1/charges/{charge}/refunds/{refund}".sub("{" + "charge" + "}", URI.encode_path(charge.to_s)).sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_charges_charge_refunds_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for charges you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @return [SearchResult]
    def get_charges_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      data, _status_code, _headers = get_charges_search_with_http_info(query: query, expand: expand, limit: limit, page: page)
      data
    end

    # &lt;p&gt;Search for charges you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @return [Array<(SearchResult, Integer, Hash)>] SearchResult data, response status code and response headers
    def get_charges_search_with_http_info(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      request = build_api_request_for_get_charges_search(query: query, expand: expand, limit: limit, page: page)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_charges_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SearchResult.from_json(data), status_code, headers
    end

    # &lt;p&gt;Search for charges you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
    # @return nil
    def get_charges_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_charges_search(query: query, expand: expand, limit: limit, page: page).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_charges_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_charges_search ..." }
      end
      if @api_client.config.client_side_validation && query.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"query\" when calling DefaultApi.get_charges_search, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"page\" when calling DefaultApi.get_charges_search, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges/search"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["page"] = page.to_s if !page.nil?
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_charges_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Checkout Sessions.</p>
    # @return [PaymentPagesCheckoutSessionList]
    def get_checkout_sessions(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, subscription : String? = nil)
      data, _status_code, _headers = get_checkout_sessions_with_http_info(ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after, subscription: subscription)
      data
    end

    # &lt;p&gt;Returns a list of Checkout Sessions.&lt;/p&gt;
    # @return [Array<(PaymentPagesCheckoutSessionList, Integer, Hash)>] PaymentPagesCheckoutSessionList data, response status code and response headers
    def get_checkout_sessions_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, subscription : String? = nil)
      request = build_api_request_for_get_checkout_sessions(ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after, subscription: subscription)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_checkout_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentPagesCheckoutSessionList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Checkout Sessions.&lt;/p&gt;
    # @return nil
    def get_checkout_sessions(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, subscription : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_checkout_sessions(ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after, subscription: subscription).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, subscription : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_checkout_sessions ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_checkout_sessions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_intent.nil? && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.get_checkout_sessions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_checkout_sessions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !subscription.nil? && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\" when calling DefaultApi.get_checkout_sessions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/checkout/sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_checkout_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a Session object.</p>
    # @param session [String]
    # @return [CheckoutSession]
    def get_checkout_sessions_session(*, session : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_checkout_sessions_session_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a Session object.&lt;/p&gt;
    # @param session [String]
    # @return [Array<(CheckoutSession, Integer, Hash)>] CheckoutSession data, response status code and response headers
    def get_checkout_sessions_session_with_http_info(*, session : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_checkout_sessions_session(session: session, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_checkout_sessions_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CheckoutSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a Session object.&lt;/p&gt;
    # @param session [String]
    # @return nil
    def get_checkout_sessions_session(*, session : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_checkout_sessions_session(session: session, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions_session(*, session : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_checkout_sessions_session ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 66
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.get_checkout_sessions_session, the character length must be smaller than or equal to 66.")
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_checkout_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @param session [String]
    # @return [PaymentPagesCheckoutSessionListLineItems]
    def get_checkout_sessions_session_line_items(*, session : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_checkout_sessions_session_line_items_with_http_info(session: session, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;When retrieving a Checkout Session, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param session [String]
    # @return [Array<(PaymentPagesCheckoutSessionListLineItems, Integer, Hash)>] PaymentPagesCheckoutSessionListLineItems data, response status code and response headers
    def get_checkout_sessions_session_line_items_with_http_info(*, session : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_checkout_sessions_session_line_items(session: session, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_checkout_sessions_session_line_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentPagesCheckoutSessionListLineItems.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving a Checkout Session, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param session [String]
    # @return nil
    def get_checkout_sessions_session_line_items(*, session : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_checkout_sessions_session_line_items(session: session, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_checkout_sessions_session_line_items(*, session : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_checkout_sessions_session_line_items ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.get_checkout_sessions_session_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_checkout_sessions_session_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_checkout_sessions_session_line_items, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}/line_items".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_checkout_sessions_session_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Lists all Country Spec objects available in the API.</p>
    # @return [GetCountrySpecs200Response]
    def get_country_specs(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_country_specs_with_http_info(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Lists all Country Spec objects available in the API.&lt;/p&gt;
    # @return [Array<(GetCountrySpecs200Response, Integer, Hash)>] GetCountrySpecs200Response data, response status code and response headers
    def get_country_specs_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_country_specs(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_country_specs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetCountrySpecs200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Lists all Country Spec objects available in the API.&lt;/p&gt;
    # @return nil
    def get_country_specs(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_country_specs(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_country_specs(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_country_specs ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_country_specs, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_country_specs, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/country_specs"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_country_specs",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a Country Spec for a given Country code.</p>
    # @param country [String]
    # @return [CountrySpec]
    def get_country_specs_country(*, country : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_country_specs_country_with_http_info(country: country, expand: expand)
      data
    end

    # &lt;p&gt;Returns a Country Spec for a given Country code.&lt;/p&gt;
    # @param country [String]
    # @return [Array<(CountrySpec, Integer, Hash)>] CountrySpec data, response status code and response headers
    def get_country_specs_country_with_http_info(*, country : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_country_specs_country(country: country, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_country_specs_country\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CountrySpec.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a Country Spec for a given Country code.&lt;/p&gt;
    # @param country [String]
    # @return nil
    def get_country_specs_country(*, country : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_country_specs_country(country: country, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_country_specs_country(*, country : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_country_specs_country ..." }
      end
      if @api_client.config.client_side_validation && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\" when calling DefaultApi.get_country_specs_country, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/country_specs/{country}".sub("{" + "country" + "}", URI.encode_path(country.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_country_specs_country",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your coupons.</p>
    # @return [GetCoupons200Response]
    def get_coupons(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_coupons_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your coupons.&lt;/p&gt;
    # @return [Array<(GetCoupons200Response, Integer, Hash)>] GetCoupons200Response data, response status code and response headers
    def get_coupons_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_coupons(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetCoupons200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your coupons.&lt;/p&gt;
    # @return nil
    def get_coupons(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_coupons(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_coupons(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_coupons ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_coupons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_coupons, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/coupons"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_coupons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the coupon with the given ID.</p>
    # @param coupon [String]
    # @return [Coupon]
    def get_coupons_coupon(*, coupon : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_coupons_coupon_with_http_info(coupon: coupon, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the coupon with the given ID.&lt;/p&gt;
    # @param coupon [String]
    # @return [Array<(Coupon, Integer, Hash)>] Coupon data, response status code and response headers
    def get_coupons_coupon_with_http_info(*, coupon : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_coupons_coupon(coupon: coupon, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_coupons_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Coupon.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the coupon with the given ID.&lt;/p&gt;
    # @param coupon [String]
    # @return nil
    def get_coupons_coupon(*, coupon : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_coupons_coupon(coupon: coupon, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_coupons_coupon(*, coupon : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_coupons_coupon ..." }
      end
      if @api_client.config.client_side_validation && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.get_coupons_coupon, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/coupons/{coupon}".sub("{" + "coupon" + "}", URI.encode_path(coupon.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_coupons_coupon",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of credit notes.</p>
    # @return [CreditNotesList]
    def get_credit_notes(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice : String? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_credit_notes_with_http_info(customer: customer, ending_before: ending_before, expand: expand, invoice: invoice, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of credit notes.&lt;/p&gt;
    # @return [Array<(CreditNotesList, Integer, Hash)>] CreditNotesList data, response status code and response headers
    def get_credit_notes_with_http_info(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice : String? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_credit_notes(customer: customer, ending_before: ending_before, expand: expand, invoice: invoice, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_credit_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CreditNotesList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of credit notes.&lt;/p&gt;
    # @return nil
    def get_credit_notes(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice : String? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_credit_notes(customer: customer, ending_before: ending_before, expand: expand, invoice: invoice, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_credit_notes(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice : String? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_credit_notes ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_credit_notes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_credit_notes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !invoice.nil? && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.get_credit_notes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_credit_notes, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/credit_notes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["invoice"] = invoice.to_s if !invoice.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_credit_notes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @param credit_note [String]
    # @return [CreditNoteLinesList]
    def get_credit_notes_credit_note_lines(*, credit_note : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_credit_notes_credit_note_lines_with_http_info(credit_note: credit_note, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;When retrieving a credit note, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param credit_note [String]
    # @return [Array<(CreditNoteLinesList, Integer, Hash)>] CreditNoteLinesList data, response status code and response headers
    def get_credit_notes_credit_note_lines_with_http_info(*, credit_note : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_credit_notes_credit_note_lines(credit_note: credit_note, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_credit_notes_credit_note_lines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CreditNoteLinesList.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving a credit note, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param credit_note [String]
    # @return nil
    def get_credit_notes_credit_note_lines(*, credit_note : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_credit_notes_credit_note_lines(credit_note: credit_note, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_credit_notes_credit_note_lines(*, credit_note : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_credit_notes_credit_note_lines ..." }
      end
      if @api_client.config.client_side_validation && credit_note.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"credit_note\" when calling DefaultApi.get_credit_notes_credit_note_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_credit_notes_credit_note_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_credit_notes_credit_note_lines, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/credit_notes/{credit_note}/lines".sub("{" + "credit_note" + "}", URI.encode_path(credit_note.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_credit_notes_credit_note_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the credit note object with the given identifier.</p>
    # @param id [String]
    # @return [CreditNote]
    def get_credit_notes_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_credit_notes_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the credit note object with the given identifier.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(CreditNote, Integer, Hash)>] CreditNote data, response status code and response headers
    def get_credit_notes_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_credit_notes_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_credit_notes_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CreditNote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the credit note object with the given identifier.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_credit_notes_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_credit_notes_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_credit_notes_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_credit_notes_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_credit_notes_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/credit_notes/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_credit_notes_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Get a preview of a credit note without creating it.</p>
    # @param invoice [String] ID of the invoice.
    # @return [CreditNote]
    def get_credit_notes_preview(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, expand : Array(String)? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, metadata : Hash(String, String)? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil)
      data, _status_code, _headers = get_credit_notes_preview_with_http_info(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, metadata: metadata, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount)
      data
    end

    # &lt;p&gt;Get a preview of a credit note without creating it.&lt;/p&gt;
    # @param invoice [String] ID of the invoice.
    # @return [Array<(CreditNote, Integer, Hash)>] CreditNote data, response status code and response headers
    def get_credit_notes_preview_with_http_info(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, expand : Array(String)? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, metadata : Hash(String, String)? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil)
      request = build_api_request_for_get_credit_notes_preview(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, metadata: metadata, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_credit_notes_preview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CreditNote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Get a preview of a credit note without creating it.&lt;/p&gt;
    # @param invoice [String] ID of the invoice.
    # @return nil
    def get_credit_notes_preview(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, expand : Array(String)? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, metadata : Hash(String, String)? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_get_credit_notes_preview(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, metadata: metadata, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_credit_notes_preview(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, expand : Array(String)? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, metadata : Hash(String, String)? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_credit_notes_preview ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.get_credit_notes_preview, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !memo.nil? && memo.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"memo\" when calling DefaultApi.get_credit_notes_preview, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["duplicate", "fraudulent", "order_change", "product_unsatisfactory"]
      if @api_client.config.client_side_validation && !reason.nil? && !allowable_values.includes?(reason)
        raise ArgumentError.new("invalid value for \"reason\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/credit_notes/preview"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["amount"] = amount.to_s if !amount.nil?
      query_params["credit_amount"] = credit_amount.to_s if !credit_amount.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["invoice"] = invoice.to_s if !invoice.nil?
      query_params["lines"] = @api_client.build_collection_param(lines, "csv") if !lines.nil? && !lines.empty?
      query_params["memo"] = memo.to_s if !memo.nil?
      query_params["metadata"] = metadata.to_s if !metadata.nil?
      query_params["out_of_band_amount"] = out_of_band_amount.to_s if !out_of_band_amount.nil?
      query_params["reason"] = reason.to_s if !reason.nil?
      query_params["refund"] = refund.to_s if !refund.nil?
      query_params["refund_amount"] = refund_amount.to_s if !refund_amount.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_credit_notes_preview",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
    # @param invoice [String] ID of the invoice.
    # @return [CreditNoteLinesList]
    def get_credit_notes_preview_lines(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, metadata : Hash(String, String)? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_credit_notes_preview_lines_with_http_info(invoice: invoice, amount: amount, credit_amount: credit_amount, ending_before: ending_before, expand: expand, limit: limit, lines: lines, memo: memo, metadata: metadata, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount, starting_after: starting_after)
      data
    end

    # &lt;p&gt;When retrieving a credit note preview, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param invoice [String] ID of the invoice.
    # @return [Array<(CreditNoteLinesList, Integer, Hash)>] CreditNoteLinesList data, response status code and response headers
    def get_credit_notes_preview_lines_with_http_info(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, metadata : Hash(String, String)? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_credit_notes_preview_lines(invoice: invoice, amount: amount, credit_amount: credit_amount, ending_before: ending_before, expand: expand, limit: limit, lines: lines, memo: memo, metadata: metadata, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_credit_notes_preview_lines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CreditNoteLinesList.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving a credit note preview, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param invoice [String] ID of the invoice.
    # @return nil
    def get_credit_notes_preview_lines(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, metadata : Hash(String, String)? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_credit_notes_preview_lines(invoice: invoice, amount: amount, credit_amount: credit_amount, ending_before: ending_before, expand: expand, limit: limit, lines: lines, memo: memo, metadata: metadata, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_credit_notes_preview_lines(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, metadata : Hash(String, String)? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_credit_notes_preview_lines ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.get_credit_notes_preview_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_credit_notes_preview_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !memo.nil? && memo.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"memo\" when calling DefaultApi.get_credit_notes_preview_lines, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["duplicate", "fraudulent", "order_change", "product_unsatisfactory"]
      if @api_client.config.client_side_validation && !reason.nil? && !allowable_values.includes?(reason)
        raise ArgumentError.new("invalid value for \"reason\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_credit_notes_preview_lines, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/credit_notes/preview/lines"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["amount"] = amount.to_s if !amount.nil?
      query_params["credit_amount"] = credit_amount.to_s if !credit_amount.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["invoice"] = invoice.to_s if !invoice.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["lines"] = @api_client.build_collection_param(lines, "csv") if !lines.nil? && !lines.empty?
      query_params["memo"] = memo.to_s if !memo.nil?
      query_params["metadata"] = metadata.to_s if !metadata.nil?
      query_params["out_of_band_amount"] = out_of_band_amount.to_s if !out_of_band_amount.nil?
      query_params["reason"] = reason.to_s if !reason.nil?
      query_params["refund"] = refund.to_s if !refund.nil?
      query_params["refund_amount"] = refund_amount.to_s if !refund_amount.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_credit_notes_preview_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
    # @return [GetCustomers200Response]
    def get_customers(*, created : GetAccountsCreatedParameter? = nil, email : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, test_clock : String? = nil)
      data, _status_code, _headers = get_customers_with_http_info(created: created, email: email, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, test_clock: test_clock)
      data
    end

    # &lt;p&gt;Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.&lt;/p&gt;
    # @return [Array<(GetCustomers200Response, Integer, Hash)>] GetCustomers200Response data, response status code and response headers
    def get_customers_with_http_info(*, created : GetAccountsCreatedParameter? = nil, email : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, test_clock : String? = nil)
      request = build_api_request_for_get_customers(created: created, email: email, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, test_clock: test_clock)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetCustomers200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.&lt;/p&gt;
    # @return nil
    def get_customers(*, created : GetAccountsCreatedParameter? = nil, email : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, test_clock : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers(created: created, email: email, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, test_clock: test_clock).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers(*, created : GetAccountsCreatedParameter? = nil, email : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, test_clock : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers ..." }
      end
      if @api_client.config.client_side_validation && !email.nil? && email.to_s.size > 512
        raise ArgumentError.new("invalid value for \"email\" when calling DefaultApi.get_customers, the character length must be smaller than or equal to 512.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_customers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_customers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !test_clock.nil? && test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\" when calling DefaultApi.get_customers, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["email"] = email.to_s if !email.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["test_clock"] = test_clock.to_s if !test_clock.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a Customer object.</p>
    # @param customer [String]
    # @return [GetCustomersCustomer200Response]
    def get_customers_customer(*, customer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_with_http_info(customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a Customer object.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(GetCustomersCustomer200Response, Integer, Hash)>] GetCustomersCustomer200Response data, response status code and response headers
    def get_customers_customer_with_http_info(*, customer : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer(customer: customer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetCustomersCustomer200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a Customer object.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def get_customers_customer(*, customer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer(customer: customer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer(*, customer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of transactions that updated the customer’s <a href=\"/docs/billing/customer/balance\">balances</a>.</p>
    # @param customer [String]
    # @return [CustomerBalanceTransactionList]
    def get_customers_customer_balance_transactions(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_customers_customer_balance_transactions_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of transactions that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(CustomerBalanceTransactionList, Integer, Hash)>] CustomerBalanceTransactionList data, response status code and response headers
    def get_customers_customer_balance_transactions_with_http_info(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_customers_customer_balance_transactions(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_balance_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CustomerBalanceTransactionList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of transactions that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def get_customers_customer_balance_transactions(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_balance_transactions(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_balance_transactions(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_balance_transactions ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_customers_customer_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_customers_customer_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/balance_transactions".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_balance_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a specific customer balance transaction that updated the customer’s <a href=\"/docs/billing/customer/balance\">balances</a>.</p>
    # @param customer [String]
    # @param transaction [String]
    # @return [CustomerBalanceTransaction]
    def get_customers_customer_balance_transactions_transaction(*, customer : String, transaction : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_balance_transactions_transaction_with_http_info(customer: customer, transaction: transaction, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a specific customer balance transaction that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
    # @param customer [String]
    # @param transaction [String]
    # @return [Array<(CustomerBalanceTransaction, Integer, Hash)>] CustomerBalanceTransaction data, response status code and response headers
    def get_customers_customer_balance_transactions_transaction_with_http_info(*, customer : String, transaction : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_balance_transactions_transaction(customer: customer, transaction: transaction, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_balance_transactions_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CustomerBalanceTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a specific customer balance transaction that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
    # @param customer [String]
    # @param transaction [String]
    # @return nil
    def get_customers_customer_balance_transactions_transaction(*, customer : String, transaction : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_balance_transactions_transaction(customer: customer, transaction: transaction, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_balance_transactions_transaction(*, customer : String, transaction : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_balance_transactions_transaction ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_balance_transactions_transaction, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/balance_transactions/{transaction}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_balance_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
    # @param customer [String]
    # @return [BankAccountList]
    def get_customers_customer_bank_accounts(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_customers_customer_bank_accounts_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional bank accounts.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(BankAccountList, Integer, Hash)>] BankAccountList data, response status code and response headers
    def get_customers_customer_bank_accounts_with_http_info(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_customers_customer_bank_accounts(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_bank_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BankAccountList.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional bank accounts.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def get_customers_customer_bank_accounts(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_bank_accounts(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_bank_accounts(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_bank_accounts ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_bank_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/bank_accounts".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_bank_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
    # @param customer [String]
    # @param id [String]
    # @return [BankAccount]
    def get_customers_customer_bank_accounts_id(*, customer : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_bank_accounts_id_with_http_info(customer: customer, id: id, expand: expand)
      data
    end

    # &lt;p&gt;By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(BankAccount, Integer, Hash)>] BankAccount data, response status code and response headers
    def get_customers_customer_bank_accounts_id_with_http_info(*, customer : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_bank_accounts_id(customer: customer, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BankAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def get_customers_customer_bank_accounts_id(*, customer : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_bank_accounts_id(customer: customer, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_bank_accounts_id(*, customer : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_bank_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/bank_accounts/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can see a list of the cards belonging to a customer. Note that the 10 most recent sources are always available on the <code>Customer</code> object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
    # @param customer [String]
    # @return [CardList]
    def get_customers_customer_cards(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_customers_customer_cards_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;You can see a list of the cards belonging to a customer. Note that the 10 most recent sources are always available on the &lt;code&gt;Customer&lt;/code&gt; object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional cards.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(CardList, Integer, Hash)>] CardList data, response status code and response headers
    def get_customers_customer_cards_with_http_info(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_customers_customer_cards(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CardList.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can see a list of the cards belonging to a customer. Note that the 10 most recent sources are always available on the &lt;code&gt;Customer&lt;/code&gt; object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional cards.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def get_customers_customer_cards(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_cards(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_cards(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_cards ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_cards, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/cards".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_cards",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [Card]
    def get_customers_customer_cards_id(*, customer : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_cards_id_with_http_info(customer: customer, id: id, expand: expand)
      data
    end

    # &lt;p&gt;You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(Card, Integer, Hash)>] Card data, response status code and response headers
    def get_customers_customer_cards_id_with_http_info(*, customer : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_cards_id(customer: customer, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_cards_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Card.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def get_customers_customer_cards_id(*, customer : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_cards_id(customer: customer, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_cards_id(*, customer : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_cards_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/cards/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_cards_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a customer’s cash balance.</p>
    # @param customer [String]
    # @return [CashBalance]
    def get_customers_customer_cash_balance(*, customer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_cash_balance_with_http_info(customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a customer’s cash balance.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(CashBalance, Integer, Hash)>] CashBalance data, response status code and response headers
    def get_customers_customer_cash_balance_with_http_info(*, customer : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_cash_balance(customer: customer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_cash_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CashBalance.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a customer’s cash balance.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def get_customers_customer_cash_balance(*, customer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_cash_balance(customer: customer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_cash_balance(*, customer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_cash_balance ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_cash_balance, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/cash_balance".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_cash_balance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # 
    # @param customer [String]
    # @return [Discount]
    def get_customers_customer_discount(*, customer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_discount_with_http_info(customer: customer, expand: expand)
      data
    end

    # 
    # @param customer [String]
    # @return [Array<(Discount, Integer, Hash)>] Discount data, response status code and response headers
    def get_customers_customer_discount_with_http_info(*, customer : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_discount(customer: customer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Discount.from_json(data), status_code, headers
    end

    # 
    # @param customer [String]
    # @return nil
    def get_customers_customer_discount(*, customer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_discount(customer: customer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_discount(*, customer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_discount ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_discount, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/discount".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_discount",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of PaymentMethods for a given Customer</p>
    # @param customer [String]
    # @param _type [String] A required filter on the list, based on the object `type` field.
    # @return [CustomerPaymentMethodResourceList]
    def get_customers_customer_payment_methods(*, customer : String, _type : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_customers_customer_payment_methods_with_http_info(customer: customer, _type: _type, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of PaymentMethods for a given Customer&lt;/p&gt;
    # @param customer [String]
    # @param _type [String] A required filter on the list, based on the object `type` field.
    # @return [Array<(CustomerPaymentMethodResourceList, Integer, Hash)>] CustomerPaymentMethodResourceList data, response status code and response headers
    def get_customers_customer_payment_methods_with_http_info(*, customer : String, _type : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_customers_customer_payment_methods(customer: customer, _type: _type, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CustomerPaymentMethodResourceList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of PaymentMethods for a given Customer&lt;/p&gt;
    # @param customer [String]
    # @param _type [String] A required filter on the list, based on the object `type` field.
    # @return nil
    def get_customers_customer_payment_methods(*, customer : String, _type : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_payment_methods(customer: customer, _type: _type, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_payment_methods(*, customer : String, _type : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_payment_methods ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_payment_methods, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "oxxo", "p24", "paynow", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/customers/{customer}/payment_methods".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_payment_methods",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a PaymentMethod object.</p>
    # @param customer [String] The ID of the customer whose PaymentMethod will be retrieved.
    # @param payment_method [String]
    # @return [PaymentMethod]
    def get_customers_customer_payment_methods_payment_method(*, customer : String, payment_method : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_payment_methods_payment_method_with_http_info(customer: customer, payment_method: payment_method, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a PaymentMethod object.&lt;/p&gt;
    # @param customer [String] The ID of the customer whose PaymentMethod will be retrieved.
    # @param payment_method [String]
    # @return [Array<(PaymentMethod, Integer, Hash)>] PaymentMethod data, response status code and response headers
    def get_customers_customer_payment_methods_payment_method_with_http_info(*, customer : String, payment_method : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_payment_methods_payment_method(customer: customer, payment_method: payment_method, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_payment_methods_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentMethod.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a PaymentMethod object.&lt;/p&gt;
    # @param customer [String] The ID of the customer whose PaymentMethod will be retrieved.
    # @param payment_method [String]
    # @return nil
    def get_customers_customer_payment_methods_payment_method(*, customer : String, payment_method : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_payment_methods_payment_method(customer: customer, payment_method: payment_method, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_payment_methods_payment_method(*, customer : String, payment_method : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_payment_methods_payment_method ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_payment_methods_payment_method, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.get_customers_customer_payment_methods_payment_method, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/payment_methods/{payment_method}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_payment_methods_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List sources for a specified customer.</p>
    # @param customer [String]
    # @return [ApmsSourcesSourceList]
    def get_customers_customer_sources(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, object : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_customers_customer_sources_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, object: object, starting_after: starting_after)
      data
    end

    # &lt;p&gt;List sources for a specified customer.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(ApmsSourcesSourceList, Integer, Hash)>] ApmsSourcesSourceList data, response status code and response headers
    def get_customers_customer_sources_with_http_info(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, object : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_customers_customer_sources(customer: customer, ending_before: ending_before, expand: expand, limit: limit, object: object, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ApmsSourcesSourceList.from_json(data), status_code, headers
    end

    # &lt;p&gt;List sources for a specified customer.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def get_customers_customer_sources(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, object : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_sources(customer: customer, ending_before: ending_before, expand: expand, limit: limit, object: object, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_sources(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, object : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_sources ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_sources, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !object.nil? && object.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"object\" when calling DefaultApi.get_customers_customer_sources, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/sources".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["object"] = object.to_s if !object.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_sources",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a specified source for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [PaymentSource]
    def get_customers_customer_sources_id(*, customer : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_sources_id_with_http_info(customer: customer, id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(PaymentSource, Integer, Hash)>] PaymentSource data, response status code and response headers
    def get_customers_customer_sources_id_with_http_info(*, customer : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_sources_id(customer: customer, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_sources_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentSource.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def get_customers_customer_sources_id(*, customer : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_sources_id(customer: customer, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_sources_id(*, customer : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_sources_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 500
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_customers_customer_sources_id, the character length must be smaller than or equal to 500.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/sources/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_sources_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
    # @param customer [String]
    # @return [SubscriptionList]
    def get_customers_customer_subscriptions(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_customers_customer_subscriptions_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(SubscriptionList, Integer, Hash)>] SubscriptionList data, response status code and response headers
    def get_customers_customer_subscriptions_with_http_info(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_customers_customer_subscriptions(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionList.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def get_customers_customer_subscriptions(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_subscriptions(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_subscriptions(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_subscriptions ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_customers_customer_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_customers_customer_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/subscriptions".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_subscriptions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the subscription with the given ID.</p>
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Subscription]
    def get_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_subscriptions_subscription_exposed_id_with_http_info(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def get_customers_customer_subscriptions_subscription_exposed_id_with_http_info(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_subscriptions_subscription_exposed_id(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_subscriptions_subscription_exposed_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Subscription.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return nil
    def get_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_subscriptions_subscription_exposed_id(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_subscriptions_subscription_exposed_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.get_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # 
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Discount]
    def get_customers_customer_subscriptions_subscription_exposed_id_discount(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_subscriptions_subscription_exposed_id_discount_with_http_info(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand)
      data
    end

    # 
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Array<(Discount, Integer, Hash)>] Discount data, response status code and response headers
    def get_customers_customer_subscriptions_subscription_exposed_id_discount_with_http_info(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_subscriptions_subscription_exposed_id_discount(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_subscriptions_subscription_exposed_id_discount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Discount.from_json(data), status_code, headers
    end

    # 
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return nil
    def get_customers_customer_subscriptions_subscription_exposed_id_discount(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_subscriptions_subscription_exposed_id_discount(customer: customer, subscription_exposed_id: subscription_exposed_id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_subscriptions_subscription_exposed_id_discount(*, customer : String, subscription_exposed_id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_subscriptions_subscription_exposed_id_discount ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_subscriptions_subscription_exposed_id_discount, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.get_customers_customer_subscriptions_subscription_exposed_id_discount, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_subscriptions_subscription_exposed_id_discount",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of tax IDs for a customer.</p>
    # @param customer [String]
    # @return [TaxIDsList]
    def get_customers_customer_tax_ids(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_customers_customer_tax_ids_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of tax IDs for a customer.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(TaxIDsList, Integer, Hash)>] TaxIDsList data, response status code and response headers
    def get_customers_customer_tax_ids_with_http_info(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_customers_customer_tax_ids(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_tax_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TaxIDsList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of tax IDs for a customer.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def get_customers_customer_tax_ids(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_tax_ids(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_tax_ids(*, customer : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_tax_ids ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_tax_ids, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_customers_customer_tax_ids, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_customers_customer_tax_ids, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/tax_ids".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_tax_ids",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the <code>TaxID</code> object with the given identifier.</p>
    # @param customer [String]
    # @param id [String]
    # @return [TaxId]
    def get_customers_customer_tax_ids_id(*, customer : String, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_customers_customer_tax_ids_id_with_http_info(customer: customer, id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the &lt;code&gt;TaxID&lt;/code&gt; object with the given identifier.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(TaxId, Integer, Hash)>] TaxId data, response status code and response headers
    def get_customers_customer_tax_ids_id_with_http_info(*, customer : String, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_customers_customer_tax_ids_id(customer: customer, id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_customer_tax_ids_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TaxId.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the &lt;code&gt;TaxID&lt;/code&gt; object with the given identifier.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def get_customers_customer_tax_ids_id(*, customer : String, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_customer_tax_ids_id(customer: customer, id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_customer_tax_ids_id(*, customer : String, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_customer_tax_ids_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_customers_customer_tax_ids_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/tax_ids/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_customer_tax_ids_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for customers you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers).
    # @return [SearchResult1]
    def get_customers_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      data, _status_code, _headers = get_customers_search_with_http_info(query: query, expand: expand, limit: limit, page: page)
      data
    end

    # &lt;p&gt;Search for customers you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers).
    # @return [Array<(SearchResult1, Integer, Hash)>] SearchResult1 data, response status code and response headers
    def get_customers_search_with_http_info(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      request = build_api_request_for_get_customers_search(query: query, expand: expand, limit: limit, page: page)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_customers_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SearchResult1.from_json(data), status_code, headers
    end

    # &lt;p&gt;Search for customers you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers).
    # @return nil
    def get_customers_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_customers_search(query: query, expand: expand, limit: limit, page: page).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_customers_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_customers_search ..." }
      end
      if @api_client.config.client_side_validation && query.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"query\" when calling DefaultApi.get_customers_search, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"page\" when calling DefaultApi.get_customers_search, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/search"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["page"] = page.to_s if !page.nil?
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_customers_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your disputes.</p>
    # @return [GetDisputes200Response]
    def get_disputes(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_disputes_with_http_info(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your disputes.&lt;/p&gt;
    # @return [Array<(GetDisputes200Response, Integer, Hash)>] GetDisputes200Response data, response status code and response headers
    def get_disputes_with_http_info(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_disputes(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_disputes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetDisputes200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your disputes.&lt;/p&gt;
    # @return nil
    def get_disputes(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_disputes(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_disputes(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_disputes ..." }
      end
      if @api_client.config.client_side_validation && !charge.nil? && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.get_disputes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_disputes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_intent.nil? && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.get_disputes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_disputes, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/disputes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_disputes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the dispute with the given ID.</p>
    # @param dispute [String]
    # @return [Dispute]
    def get_disputes_dispute(*, dispute : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_disputes_dispute_with_http_info(dispute: dispute, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the dispute with the given ID.&lt;/p&gt;
    # @param dispute [String]
    # @return [Array<(Dispute, Integer, Hash)>] Dispute data, response status code and response headers
    def get_disputes_dispute_with_http_info(*, dispute : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_disputes_dispute(dispute: dispute, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_disputes_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Dispute.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the dispute with the given ID.&lt;/p&gt;
    # @param dispute [String]
    # @return nil
    def get_disputes_dispute(*, dispute : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_disputes_dispute(dispute: dispute, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_disputes_dispute(*, dispute : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_disputes_dispute ..." }
      end
      if @api_client.config.client_side_validation && dispute.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"dispute\" when calling DefaultApi.get_disputes_dispute, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href=\"/docs/api/events/object\">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
    # @return [NotificationEventList]
    def get_events(*, created : GetAccountsCreatedParameter? = nil, delivery_success : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, types : Array(String)? = nil)
      data, _status_code, _headers = get_events_with_http_info(created: created, delivery_success: delivery_success, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, types: types)
      data
    end

    # &lt;p&gt;List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in &lt;a href&#x3D;\&quot;/docs/api/events/object\&quot;&gt;event object&lt;/a&gt; &lt;code&gt;api_version&lt;/code&gt; attribute (not according to your current Stripe API version or &lt;code&gt;Stripe-Version&lt;/code&gt; header).&lt;/p&gt;
    # @return [Array<(NotificationEventList, Integer, Hash)>] NotificationEventList data, response status code and response headers
    def get_events_with_http_info(*, created : GetAccountsCreatedParameter? = nil, delivery_success : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, types : Array(String)? = nil)
      request = build_api_request_for_get_events(created: created, delivery_success: delivery_success, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, types: types)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return NotificationEventList.from_json(data), status_code, headers
    end

    # &lt;p&gt;List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in &lt;a href&#x3D;\&quot;/docs/api/events/object\&quot;&gt;event object&lt;/a&gt; &lt;code&gt;api_version&lt;/code&gt; attribute (not according to your current Stripe API version or &lt;code&gt;Stripe-Version&lt;/code&gt; header).&lt;/p&gt;
    # @return nil
    def get_events(*, created : GetAccountsCreatedParameter? = nil, delivery_success : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, types : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_events(created: created, delivery_success: delivery_success, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, types: types).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_events(*, created : GetAccountsCreatedParameter? = nil, delivery_success : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, types : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_events ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_events, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_events, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !_type.nil? && _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\" when calling DefaultApi.get_events, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/events"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["delivery_success"] = delivery_success.to_s if !delivery_success.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["types"] = @api_client.build_collection_param(types, "csv") if !types.nil? && !types.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_events",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
    # @param id [String]
    # @return [Event]
    def get_events_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_events_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def get_events_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_events_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_events_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Event.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_events_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_events_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_events_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_events_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_events_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/events/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_events_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
    # @return [GetExchangeRates200Response]
    def get_exchange_rates(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_exchange_rates_with_http_info(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.&lt;/p&gt;
    # @return [Array<(GetExchangeRates200Response, Integer, Hash)>] GetExchangeRates200Response data, response status code and response headers
    def get_exchange_rates_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_exchange_rates(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_exchange_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetExchangeRates200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.&lt;/p&gt;
    # @return nil
    def get_exchange_rates(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_exchange_rates(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_exchange_rates(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_exchange_rates ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_exchange_rates, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_exchange_rates, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/exchange_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_exchange_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
    # @param rate_id [String]
    # @return [ExchangeRate]
    def get_exchange_rates_rate_id(*, rate_id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_exchange_rates_rate_id_with_http_info(rate_id: rate_id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the exchange rates from the given currency to every supported currency.&lt;/p&gt;
    # @param rate_id [String]
    # @return [Array<(ExchangeRate, Integer, Hash)>] ExchangeRate data, response status code and response headers
    def get_exchange_rates_rate_id_with_http_info(*, rate_id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_exchange_rates_rate_id(rate_id: rate_id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_exchange_rates_rate_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExchangeRate.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the exchange rates from the given currency to every supported currency.&lt;/p&gt;
    # @param rate_id [String]
    # @return nil
    def get_exchange_rates_rate_id(*, rate_id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_exchange_rates_rate_id(rate_id: rate_id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_exchange_rates_rate_id(*, rate_id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_exchange_rates_rate_id ..." }
      end
      if @api_client.config.client_side_validation && rate_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"rate_id\" when calling DefaultApi.get_exchange_rates_rate_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/exchange_rates/{rate_id}".sub("{" + "rate_id" + "}", URI.encode_path(rate_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_exchange_rates_rate_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of file links.</p>
    # @return [GetFileLinks200Response]
    def get_file_links(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, expired : Bool? = nil, file : String? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_file_links_with_http_info(created: created, ending_before: ending_before, expand: expand, expired: expired, file: file, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of file links.&lt;/p&gt;
    # @return [Array<(GetFileLinks200Response, Integer, Hash)>] GetFileLinks200Response data, response status code and response headers
    def get_file_links_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, expired : Bool? = nil, file : String? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_file_links(created: created, ending_before: ending_before, expand: expand, expired: expired, file: file, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_file_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetFileLinks200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of file links.&lt;/p&gt;
    # @return nil
    def get_file_links(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, expired : Bool? = nil, file : String? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_file_links(created: created, ending_before: ending_before, expand: expand, expired: expired, file: file, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_file_links(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, expired : Bool? = nil, file : String? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_file_links ..." }
      end
      if @api_client.config.client_side_validation && !file.nil? && file.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"file\" when calling DefaultApi.get_file_links, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/file_links"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["expired"] = expired.to_s if !expired.nil?
      query_params["file"] = file.to_s if !file.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_file_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the file link with the given ID.</p>
    # @param link [String]
    # @return [FileLink]
    def get_file_links_link(*, link : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_file_links_link_with_http_info(link: link, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the file link with the given ID.&lt;/p&gt;
    # @param link [String]
    # @return [Array<(FileLink, Integer, Hash)>] FileLink data, response status code and response headers
    def get_file_links_link_with_http_info(*, link : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_file_links_link(link: link, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_file_links_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FileLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the file link with the given ID.&lt;/p&gt;
    # @param link [String]
    # @return nil
    def get_file_links_link(*, link : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_file_links_link(link: link, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_file_links_link(*, link : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_file_links_link ..." }
      end
      # resource path
      local_var_path = "/v1/file_links/{link}".sub("{" + "link" + "}", URI.encode_path(link.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_file_links_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p>
    # @return [GetFiles200Response]
    def get_files(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, purpose : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_files_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, purpose: purpose, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.&lt;/p&gt;
    # @return [Array<(GetFiles200Response, Integer, Hash)>] GetFiles200Response data, response status code and response headers
    def get_files_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, purpose : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_files(created: created, ending_before: ending_before, expand: expand, limit: limit, purpose: purpose, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetFiles200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.&lt;/p&gt;
    # @return nil
    def get_files(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, purpose : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_files(created: created, ending_before: ending_before, expand: expand, limit: limit, purpose: purpose, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_files(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, purpose : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_files ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_files, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["account_requirement", "additional_verification", "business_icon", "business_logo", "customer_signature", "dispute_evidence", "document_provider_identity_document", "finance_report_run", "identity_document", "identity_document_downloadable", "pci_document", "selfie", "sigma_scheduled_query", "tax_document_user_upload"]
      if @api_client.config.client_side_validation && !purpose.nil? && !allowable_values.includes?(purpose)
        raise ArgumentError.new("invalid value for \"purpose\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !purpose.nil? && purpose.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"purpose\" when calling DefaultApi.get_files, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_files, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/files"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["purpose"] = purpose.to_s if !purpose.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_files",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href=\"/docs/file-upload#download-file-contents\">File Upload Guide</a>.</p>
    # @param file [String]
    # @return [::File]
    def get_files_file(*, file : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_files_file_with_http_info(file: file, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the &lt;a href&#x3D;\&quot;/docs/file-upload#download-file-contents\&quot;&gt;File Upload Guide&lt;/a&gt;.&lt;/p&gt;
    # @param file [String]
    # @return [Array<(::File, Integer, Hash)>] ::File data, response status code and response headers
    def get_files_file_with_http_info(*, file : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_files_file(file: file, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_files_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ::File.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the &lt;a href&#x3D;\&quot;/docs/file-upload#download-file-contents\&quot;&gt;File Upload Guide&lt;/a&gt;.&lt;/p&gt;
    # @param file [String]
    # @return nil
    def get_files_file(*, file : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_files_file(file: file, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_files_file(*, file : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_files_file ..." }
      end
      if @api_client.config.client_side_validation && file.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"file\" when calling DefaultApi.get_files_file, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/files/{file}".sub("{" + "file" + "}", URI.encode_path(file.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_files_file",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
    # @return [BankConnectionsResourceLinkedAccountList]
    def get_financial_connections_accounts(*, account_holder : AccountholderParams? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, session : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_financial_connections_accounts_with_http_info(account_holder: account_holder, ending_before: ending_before, expand: expand, limit: limit, session: session, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
    # @return [Array<(BankConnectionsResourceLinkedAccountList, Integer, Hash)>] BankConnectionsResourceLinkedAccountList data, response status code and response headers
    def get_financial_connections_accounts_with_http_info(*, account_holder : AccountholderParams? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, session : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_financial_connections_accounts(account_holder: account_holder, ending_before: ending_before, expand: expand, limit: limit, session: session, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_financial_connections_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BankConnectionsResourceLinkedAccountList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
    # @return nil
    def get_financial_connections_accounts(*, account_holder : AccountholderParams? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, session : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_financial_connections_accounts(account_holder: account_holder, ending_before: ending_before, expand: expand, limit: limit, session: session, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_financial_connections_accounts(*, account_holder : AccountholderParams? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, session : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_financial_connections_accounts ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_financial_connections_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !session.nil? && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.get_financial_connections_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_financial_connections_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/financial_connections/accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["account_holder"] = account_holder.to_s if !account_holder.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["session"] = session.to_s if !session.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_financial_connections_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
    # @param account [String]
    # @return [FinancialConnectionsAccount]
    def get_financial_connections_accounts_account(*, account : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_financial_connections_accounts_account_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(FinancialConnectionsAccount, Integer, Hash)>] FinancialConnectionsAccount data, response status code and response headers
    def get_financial_connections_accounts_account_with_http_info(*, account : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_financial_connections_accounts_account(account: account, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_financial_connections_accounts_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def get_financial_connections_accounts_account(*, account : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_financial_connections_accounts_account(account: account, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_financial_connections_accounts_account(*, account : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_financial_connections_accounts_account ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_financial_connections_accounts_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/financial_connections/accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_financial_connections_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Lists all owners for a given <code>Account</code></p>
    # @param account [String]
    # @param ownership [String] The ID of the ownership object to fetch owners from.
    # @return [BankConnectionsResourceOwnerList]
    def get_financial_connections_accounts_account_owners(*, account : String, ownership : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_financial_connections_accounts_account_owners_with_http_info(account: account, ownership: ownership, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Lists all owners for a given &lt;code&gt;Account&lt;/code&gt;&lt;/p&gt;
    # @param account [String]
    # @param ownership [String] The ID of the ownership object to fetch owners from.
    # @return [Array<(BankConnectionsResourceOwnerList, Integer, Hash)>] BankConnectionsResourceOwnerList data, response status code and response headers
    def get_financial_connections_accounts_account_owners_with_http_info(*, account : String, ownership : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_financial_connections_accounts_account_owners(account: account, ownership: ownership, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_financial_connections_accounts_account_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BankConnectionsResourceOwnerList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Lists all owners for a given &lt;code&gt;Account&lt;/code&gt;&lt;/p&gt;
    # @param account [String]
    # @param ownership [String] The ID of the ownership object to fetch owners from.
    # @return nil
    def get_financial_connections_accounts_account_owners(*, account : String, ownership : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_financial_connections_accounts_account_owners(account: account, ownership: ownership, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_financial_connections_accounts_account_owners(*, account : String, ownership : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_financial_connections_accounts_account_owners ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_financial_connections_accounts_account_owners, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && ownership.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ownership\" when calling DefaultApi.get_financial_connections_accounts_account_owners, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_financial_connections_accounts_account_owners, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_financial_connections_accounts_account_owners, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/financial_connections/accounts/{account}/owners".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["ownership"] = ownership.to_s if !ownership.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_financial_connections_accounts_account_owners",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a Financial Connections <code>Session</code></p>
    # @param session [String]
    # @return [FinancialConnectionsSession]
    def get_financial_connections_sessions_session(*, session : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_financial_connections_sessions_session_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
    # @param session [String]
    # @return [Array<(FinancialConnectionsSession, Integer, Hash)>] FinancialConnectionsSession data, response status code and response headers
    def get_financial_connections_sessions_session_with_http_info(*, session : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_financial_connections_sessions_session(session: session, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_financial_connections_sessions_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
    # @param session [String]
    # @return nil
    def get_financial_connections_sessions_session(*, session : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_financial_connections_sessions_session(session: session, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_financial_connections_sessions_session(*, session : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_financial_connections_sessions_session ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.get_financial_connections_sessions_session, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/financial_connections/sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_financial_connections_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List all verification reports.</p>
    # @return [GetIdentityVerificationReports200Response]
    def get_identity_verification_reports(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, verification_session : String? = nil)
      data, _status_code, _headers = get_identity_verification_reports_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, verification_session: verification_session)
      data
    end

    # &lt;p&gt;List all verification reports.&lt;/p&gt;
    # @return [Array<(GetIdentityVerificationReports200Response, Integer, Hash)>] GetIdentityVerificationReports200Response data, response status code and response headers
    def get_identity_verification_reports_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, verification_session : String? = nil)
      request = build_api_request_for_get_identity_verification_reports(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, verification_session: verification_session)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_identity_verification_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetIdentityVerificationReports200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;List all verification reports.&lt;/p&gt;
    # @return nil
    def get_identity_verification_reports(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, verification_session : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_identity_verification_reports(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, verification_session: verification_session).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_identity_verification_reports(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, verification_session : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_identity_verification_reports ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_identity_verification_reports, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_identity_verification_reports, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["document", "id_number"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !verification_session.nil? && verification_session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"verification_session\" when calling DefaultApi.get_identity_verification_reports, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/identity/verification_reports"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["verification_session"] = verification_session.to_s if !verification_session.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_identity_verification_reports",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an existing VerificationReport</p>
    # @param report [String]
    # @return [IdentityVerificationReport]
    def get_identity_verification_reports_report(*, report : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_identity_verification_reports_report_with_http_info(report: report, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing VerificationReport&lt;/p&gt;
    # @param report [String]
    # @return [Array<(IdentityVerificationReport, Integer, Hash)>] IdentityVerificationReport data, response status code and response headers
    def get_identity_verification_reports_report_with_http_info(*, report : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_identity_verification_reports_report(report: report, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_identity_verification_reports_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IdentityVerificationReport.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an existing VerificationReport&lt;/p&gt;
    # @param report [String]
    # @return nil
    def get_identity_verification_reports_report(*, report : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_identity_verification_reports_report(report: report, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_identity_verification_reports_report(*, report : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_identity_verification_reports_report ..." }
      end
      if @api_client.config.client_side_validation && report.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"report\" when calling DefaultApi.get_identity_verification_reports_report, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/identity/verification_reports/{report}".sub("{" + "report" + "}", URI.encode_path(report.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_identity_verification_reports_report",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of VerificationSessions</p>
    # @return [GetIdentityVerificationSessions200Response]
    def get_identity_verification_sessions(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_identity_verification_sessions_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of VerificationSessions&lt;/p&gt;
    # @return [Array<(GetIdentityVerificationSessions200Response, Integer, Hash)>] GetIdentityVerificationSessions200Response data, response status code and response headers
    def get_identity_verification_sessions_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_identity_verification_sessions(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_identity_verification_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetIdentityVerificationSessions200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of VerificationSessions&lt;/p&gt;
    # @return nil
    def get_identity_verification_sessions(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_identity_verification_sessions(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_identity_verification_sessions(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_identity_verification_sessions ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_identity_verification_sessions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_identity_verification_sessions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["canceled", "processing", "requires_input", "verified"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/identity/verification_sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_identity_verification_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a VerificationSession that was previously created.</p>  <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
    # @param session [String]
    # @return [IdentityVerificationSession]
    def get_identity_verification_sessions_session(*, session : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_identity_verification_sessions_session_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a VerificationSession that was previously created.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to retrieve a valid &lt;code&gt;client_secret&lt;/code&gt; or &lt;code&gt;url&lt;/code&gt; to allow re-submission.&lt;/p&gt;
    # @param session [String]
    # @return [Array<(IdentityVerificationSession, Integer, Hash)>] IdentityVerificationSession data, response status code and response headers
    def get_identity_verification_sessions_session_with_http_info(*, session : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_identity_verification_sessions_session(session: session, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_identity_verification_sessions_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IdentityVerificationSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a VerificationSession that was previously created.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to retrieve a valid &lt;code&gt;client_secret&lt;/code&gt; or &lt;code&gt;url&lt;/code&gt; to allow re-submission.&lt;/p&gt;
    # @param session [String]
    # @return nil
    def get_identity_verification_sessions_session(*, session : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_identity_verification_sessions_session(session: session, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_identity_verification_sessions_session(*, session : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_identity_verification_sessions_session ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.get_identity_verification_sessions_session, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_identity_verification_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
    # @return [GetInvoiceitems200Response]
    def get_invoiceitems(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice : String? = nil, limit : Int64? = nil, pending : Bool? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_invoiceitems_with_http_info(created: created, customer: customer, ending_before: ending_before, expand: expand, invoice: invoice, limit: limit, pending: pending, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.&lt;/p&gt;
    # @return [Array<(GetInvoiceitems200Response, Integer, Hash)>] GetInvoiceitems200Response data, response status code and response headers
    def get_invoiceitems_with_http_info(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice : String? = nil, limit : Int64? = nil, pending : Bool? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_invoiceitems(created: created, customer: customer, ending_before: ending_before, expand: expand, invoice: invoice, limit: limit, pending: pending, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_invoiceitems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetInvoiceitems200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.&lt;/p&gt;
    # @return nil
    def get_invoiceitems(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice : String? = nil, limit : Int64? = nil, pending : Bool? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_invoiceitems(created: created, customer: customer, ending_before: ending_before, expand: expand, invoice: invoice, limit: limit, pending: pending, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_invoiceitems(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice : String? = nil, limit : Int64? = nil, pending : Bool? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_invoiceitems ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !invoice.nil? && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.get_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoiceitems"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["invoice"] = invoice.to_s if !invoice.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["pending"] = pending.to_s if !pending.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_invoiceitems",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the invoice item with the given ID.</p>
    # @param invoiceitem [String]
    # @return [Invoiceitem]
    def get_invoiceitems_invoiceitem(*, invoiceitem : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_invoiceitems_invoiceitem_with_http_info(invoiceitem: invoiceitem, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the invoice item with the given ID.&lt;/p&gt;
    # @param invoiceitem [String]
    # @return [Array<(Invoiceitem, Integer, Hash)>] Invoiceitem data, response status code and response headers
    def get_invoiceitems_invoiceitem_with_http_info(*, invoiceitem : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_invoiceitems_invoiceitem(invoiceitem: invoiceitem, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_invoiceitems_invoiceitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoiceitem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the invoice item with the given ID.&lt;/p&gt;
    # @param invoiceitem [String]
    # @return nil
    def get_invoiceitems_invoiceitem(*, invoiceitem : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_invoiceitems_invoiceitem(invoiceitem: invoiceitem, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_invoiceitems_invoiceitem(*, invoiceitem : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_invoiceitems_invoiceitem ..." }
      end
      if @api_client.config.client_side_validation && invoiceitem.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoiceitem\" when calling DefaultApi.get_invoiceitems_invoiceitem, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoiceitems/{invoiceitem}".sub("{" + "invoiceitem" + "}", URI.encode_path(invoiceitem.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_invoiceitems_invoiceitem",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
    # @return [InvoicesList]
    def get_invoices(*, collection_method : String? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, due_date : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, subscription : String? = nil)
      data, _status_code, _headers = get_invoices_with_http_info(collection_method: collection_method, created: created, customer: customer, due_date: due_date, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, subscription: subscription)
      data
    end

    # &lt;p&gt;You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.&lt;/p&gt;
    # @return [Array<(InvoicesList, Integer, Hash)>] InvoicesList data, response status code and response headers
    def get_invoices_with_http_info(*, collection_method : String? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, due_date : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, subscription : String? = nil)
      request = build_api_request_for_get_invoices(collection_method: collection_method, created: created, customer: customer, due_date: due_date, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, subscription: subscription)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return InvoicesList.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.&lt;/p&gt;
    # @return nil
    def get_invoices(*, collection_method : String? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, due_date : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, subscription : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_invoices(collection_method: collection_method, created: created, customer: customer, due_date: due_date, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, subscription: subscription).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_invoices(*, collection_method : String? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, due_date : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, subscription : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_invoices ..." }
      end
      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_invoices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_invoices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_invoices, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["draft", "open", "paid", "uncollectible", "void"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !status.nil? && status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\" when calling DefaultApi.get_invoices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !subscription.nil? && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\" when calling DefaultApi.get_invoices, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["due_date"] = due_date.to_s if !due_date.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_invoices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the invoice with the given ID.</p>
    # @param invoice [String]
    # @return [Invoice]
    def get_invoices_invoice(*, invoice : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_invoices_invoice_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the invoice with the given ID.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def get_invoices_invoice_with_http_info(*, invoice : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_invoices_invoice(invoice: invoice, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_invoices_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the invoice with the given ID.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def get_invoices_invoice(*, invoice : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_invoices_invoice(invoice: invoice, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_invoices_invoice(*, invoice : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_invoices_invoice ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.get_invoices_invoice, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @param invoice [String]
    # @return [InvoiceLinesList]
    def get_invoices_invoice_lines(*, invoice : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_invoices_invoice_lines_with_http_info(invoice: invoice, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;When retrieving an invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(InvoiceLinesList, Integer, Hash)>] InvoiceLinesList data, response status code and response headers
    def get_invoices_invoice_lines_with_http_info(*, invoice : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_invoices_invoice_lines(invoice: invoice, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_invoices_invoice_lines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return InvoiceLinesList.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving an invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def get_invoices_invoice_lines(*, invoice : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_invoices_invoice_lines(invoice: invoice, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_invoices_invoice_lines(*, invoice : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_invoices_invoice_lines ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.get_invoices_invoice_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_invoices_invoice_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_invoices_invoice_lines, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/lines".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_invoices_invoice_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for invoices you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @return [SearchResult2]
    def get_invoices_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      data, _status_code, _headers = get_invoices_search_with_http_info(query: query, expand: expand, limit: limit, page: page)
      data
    end

    # &lt;p&gt;Search for invoices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @return [Array<(SearchResult2, Integer, Hash)>] SearchResult2 data, response status code and response headers
    def get_invoices_search_with_http_info(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      request = build_api_request_for_get_invoices_search(query: query, expand: expand, limit: limit, page: page)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_invoices_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SearchResult2.from_json(data), status_code, headers
    end

    # &lt;p&gt;Search for invoices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @return nil
    def get_invoices_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_invoices_search(query: query, expand: expand, limit: limit, page: page).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_invoices_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_invoices_search ..." }
      end
      if @api_client.config.client_side_validation && query.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"query\" when calling DefaultApi.get_invoices_search, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"page\" when calling DefaultApi.get_invoices_search, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/search"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["page"] = page.to_s if !page.nil?
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_invoices_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>  <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>  <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
    # @return [Invoice]
    def get_invoices_upcoming(*, automatic_tax : AutomaticTaxParam1? = nil, coupon : String? = nil, customer : String? = nil, customer_details : CustomerDetailsParam? = nil, discounts : GetInvoicesUpcomingDiscountsParameter? = nil, expand : Array(String)? = nil, invoice_items : Array(InvoiceItemPreviewParams)? = nil, schedule : String? = nil, subscription : String? = nil, subscription_billing_cycle_anchor : GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil, subscription_cancel_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, subscription_cancel_at_period_end : Bool? = nil, subscription_cancel_now : Bool? = nil, subscription_default_tax_rates : CreditNoteLineItemParamsTaxRates? = nil, subscription_items : Array(SubscriptionItemUpdateParams)? = nil, subscription_proration_behavior : String? = nil, subscription_proration_date : Int64? = nil, subscription_start_date : Int64? = nil, subscription_trial_end : GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil, subscription_trial_from_plan : Bool? = nil)
      data, _status_code, _headers = get_invoices_upcoming_with_http_info(automatic_tax: automatic_tax, coupon: coupon, customer: customer, customer_details: customer_details, discounts: discounts, expand: expand, invoice_items: invoice_items, schedule: schedule, subscription: subscription, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_cancel_at: subscription_cancel_at, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_cancel_now: subscription_cancel_now, subscription_default_tax_rates: subscription_default_tax_rates, subscription_items: subscription_items, subscription_proration_behavior: subscription_proration_behavior, subscription_proration_date: subscription_proration_date, subscription_start_date: subscription_start_date, subscription_trial_end: subscription_trial_end, subscription_trial_from_plan: subscription_trial_from_plan)
      data
    end

    # &lt;p&gt;At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.&lt;/p&gt;  &lt;p&gt;Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.&lt;/p&gt;  &lt;p&gt;You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a &lt;code&gt;proration_date&lt;/code&gt; parameter when doing the actual subscription update. The value passed in should be the same as the &lt;code&gt;subscription_proration_date&lt;/code&gt; returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where &lt;code&gt;period[start]&lt;/code&gt; is equal to the &lt;code&gt;subscription_proration_date&lt;/code&gt; on the upcoming invoice resource.&lt;/p&gt;
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def get_invoices_upcoming_with_http_info(*, automatic_tax : AutomaticTaxParam1? = nil, coupon : String? = nil, customer : String? = nil, customer_details : CustomerDetailsParam? = nil, discounts : GetInvoicesUpcomingDiscountsParameter? = nil, expand : Array(String)? = nil, invoice_items : Array(InvoiceItemPreviewParams)? = nil, schedule : String? = nil, subscription : String? = nil, subscription_billing_cycle_anchor : GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil, subscription_cancel_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, subscription_cancel_at_period_end : Bool? = nil, subscription_cancel_now : Bool? = nil, subscription_default_tax_rates : CreditNoteLineItemParamsTaxRates? = nil, subscription_items : Array(SubscriptionItemUpdateParams)? = nil, subscription_proration_behavior : String? = nil, subscription_proration_date : Int64? = nil, subscription_start_date : Int64? = nil, subscription_trial_end : GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil, subscription_trial_from_plan : Bool? = nil)
      request = build_api_request_for_get_invoices_upcoming(automatic_tax: automatic_tax, coupon: coupon, customer: customer, customer_details: customer_details, discounts: discounts, expand: expand, invoice_items: invoice_items, schedule: schedule, subscription: subscription, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_cancel_at: subscription_cancel_at, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_cancel_now: subscription_cancel_now, subscription_default_tax_rates: subscription_default_tax_rates, subscription_items: subscription_items, subscription_proration_behavior: subscription_proration_behavior, subscription_proration_date: subscription_proration_date, subscription_start_date: subscription_start_date, subscription_trial_end: subscription_trial_end, subscription_trial_from_plan: subscription_trial_from_plan)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_invoices_upcoming\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.&lt;/p&gt;  &lt;p&gt;Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.&lt;/p&gt;  &lt;p&gt;You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a &lt;code&gt;proration_date&lt;/code&gt; parameter when doing the actual subscription update. The value passed in should be the same as the &lt;code&gt;subscription_proration_date&lt;/code&gt; returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where &lt;code&gt;period[start]&lt;/code&gt; is equal to the &lt;code&gt;subscription_proration_date&lt;/code&gt; on the upcoming invoice resource.&lt;/p&gt;
    # @return nil
    def get_invoices_upcoming(*, automatic_tax : AutomaticTaxParam1? = nil, coupon : String? = nil, customer : String? = nil, customer_details : CustomerDetailsParam? = nil, discounts : GetInvoicesUpcomingDiscountsParameter? = nil, expand : Array(String)? = nil, invoice_items : Array(InvoiceItemPreviewParams)? = nil, schedule : String? = nil, subscription : String? = nil, subscription_billing_cycle_anchor : GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil, subscription_cancel_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, subscription_cancel_at_period_end : Bool? = nil, subscription_cancel_now : Bool? = nil, subscription_default_tax_rates : CreditNoteLineItemParamsTaxRates? = nil, subscription_items : Array(SubscriptionItemUpdateParams)? = nil, subscription_proration_behavior : String? = nil, subscription_proration_date : Int64? = nil, subscription_start_date : Int64? = nil, subscription_trial_end : GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil, subscription_trial_from_plan : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_get_invoices_upcoming(automatic_tax: automatic_tax, coupon: coupon, customer: customer, customer_details: customer_details, discounts: discounts, expand: expand, invoice_items: invoice_items, schedule: schedule, subscription: subscription, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_cancel_at: subscription_cancel_at, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_cancel_now: subscription_cancel_now, subscription_default_tax_rates: subscription_default_tax_rates, subscription_items: subscription_items, subscription_proration_behavior: subscription_proration_behavior, subscription_proration_date: subscription_proration_date, subscription_start_date: subscription_start_date, subscription_trial_end: subscription_trial_end, subscription_trial_from_plan: subscription_trial_from_plan).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_invoices_upcoming(*, automatic_tax : AutomaticTaxParam1? = nil, coupon : String? = nil, customer : String? = nil, customer_details : CustomerDetailsParam? = nil, discounts : GetInvoicesUpcomingDiscountsParameter? = nil, expand : Array(String)? = nil, invoice_items : Array(InvoiceItemPreviewParams)? = nil, schedule : String? = nil, subscription : String? = nil, subscription_billing_cycle_anchor : GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil, subscription_cancel_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, subscription_cancel_at_period_end : Bool? = nil, subscription_cancel_now : Bool? = nil, subscription_default_tax_rates : CreditNoteLineItemParamsTaxRates? = nil, subscription_items : Array(SubscriptionItemUpdateParams)? = nil, subscription_proration_behavior : String? = nil, subscription_proration_date : Int64? = nil, subscription_start_date : Int64? = nil, subscription_trial_end : GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil, subscription_trial_from_plan : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_invoices_upcoming ..." }
      end
      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.get_invoices_upcoming, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_invoices_upcoming, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !schedule.nil? && schedule.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"schedule\" when calling DefaultApi.get_invoices_upcoming, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !subscription.nil? && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\" when calling DefaultApi.get_invoices_upcoming, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !subscription_proration_behavior.nil? && !allowable_values.includes?(subscription_proration_behavior)
        raise ArgumentError.new("invalid value for \"subscription_proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/invoices/upcoming"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      query_params["coupon"] = coupon.to_s if !coupon.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["customer_details"] = customer_details.to_s if !customer_details.nil?
      query_params["discounts"] = discounts.to_s if !discounts.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["invoice_items"] = @api_client.build_collection_param(invoice_items, "csv") if !invoice_items.nil? && !invoice_items.empty?
      query_params["schedule"] = schedule.to_s if !schedule.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["subscription_billing_cycle_anchor"] = subscription_billing_cycle_anchor.to_s if !subscription_billing_cycle_anchor.nil?
      query_params["subscription_cancel_at"] = subscription_cancel_at.to_s if !subscription_cancel_at.nil?
      query_params["subscription_cancel_at_period_end"] = subscription_cancel_at_period_end.to_s if !subscription_cancel_at_period_end.nil?
      query_params["subscription_cancel_now"] = subscription_cancel_now.to_s if !subscription_cancel_now.nil?
      query_params["subscription_default_tax_rates"] = subscription_default_tax_rates.to_s if !subscription_default_tax_rates.nil?
      query_params["subscription_items"] = @api_client.build_collection_param(subscription_items, "csv") if !subscription_items.nil? && !subscription_items.empty?
      query_params["subscription_proration_behavior"] = subscription_proration_behavior.to_s if !subscription_proration_behavior.nil?
      query_params["subscription_proration_date"] = subscription_proration_date.to_s if !subscription_proration_date.nil?
      query_params["subscription_start_date"] = subscription_start_date.to_s if !subscription_start_date.nil?
      query_params["subscription_trial_end"] = subscription_trial_end.to_s if !subscription_trial_end.nil?
      query_params["subscription_trial_from_plan"] = subscription_trial_from_plan.to_s if !subscription_trial_from_plan.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_invoices_upcoming",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @return [InvoiceLinesList]
    def get_invoices_upcoming_lines(*, automatic_tax : AutomaticTaxParam1? = nil, coupon : String? = nil, customer : String? = nil, customer_details : CustomerDetailsParam? = nil, discounts : GetInvoicesUpcomingDiscountsParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice_items : Array(InvoiceItemPreviewParams)? = nil, limit : Int64? = nil, schedule : String? = nil, starting_after : String? = nil, subscription : String? = nil, subscription_billing_cycle_anchor : GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil, subscription_cancel_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, subscription_cancel_at_period_end : Bool? = nil, subscription_cancel_now : Bool? = nil, subscription_default_tax_rates : CreditNoteLineItemParamsTaxRates? = nil, subscription_items : Array(SubscriptionItemUpdateParams)? = nil, subscription_proration_behavior : String? = nil, subscription_proration_date : Int64? = nil, subscription_start_date : Int64? = nil, subscription_trial_end : GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil, subscription_trial_from_plan : Bool? = nil)
      data, _status_code, _headers = get_invoices_upcoming_lines_with_http_info(automatic_tax: automatic_tax, coupon: coupon, customer: customer, customer_details: customer_details, discounts: discounts, ending_before: ending_before, expand: expand, invoice_items: invoice_items, limit: limit, schedule: schedule, starting_after: starting_after, subscription: subscription, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_cancel_at: subscription_cancel_at, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_cancel_now: subscription_cancel_now, subscription_default_tax_rates: subscription_default_tax_rates, subscription_items: subscription_items, subscription_proration_behavior: subscription_proration_behavior, subscription_proration_date: subscription_proration_date, subscription_start_date: subscription_start_date, subscription_trial_end: subscription_trial_end, subscription_trial_from_plan: subscription_trial_from_plan)
      data
    end

    # &lt;p&gt;When retrieving an upcoming invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @return [Array<(InvoiceLinesList, Integer, Hash)>] InvoiceLinesList data, response status code and response headers
    def get_invoices_upcoming_lines_with_http_info(*, automatic_tax : AutomaticTaxParam1? = nil, coupon : String? = nil, customer : String? = nil, customer_details : CustomerDetailsParam? = nil, discounts : GetInvoicesUpcomingDiscountsParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice_items : Array(InvoiceItemPreviewParams)? = nil, limit : Int64? = nil, schedule : String? = nil, starting_after : String? = nil, subscription : String? = nil, subscription_billing_cycle_anchor : GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil, subscription_cancel_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, subscription_cancel_at_period_end : Bool? = nil, subscription_cancel_now : Bool? = nil, subscription_default_tax_rates : CreditNoteLineItemParamsTaxRates? = nil, subscription_items : Array(SubscriptionItemUpdateParams)? = nil, subscription_proration_behavior : String? = nil, subscription_proration_date : Int64? = nil, subscription_start_date : Int64? = nil, subscription_trial_end : GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil, subscription_trial_from_plan : Bool? = nil)
      request = build_api_request_for_get_invoices_upcoming_lines(automatic_tax: automatic_tax, coupon: coupon, customer: customer, customer_details: customer_details, discounts: discounts, ending_before: ending_before, expand: expand, invoice_items: invoice_items, limit: limit, schedule: schedule, starting_after: starting_after, subscription: subscription, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_cancel_at: subscription_cancel_at, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_cancel_now: subscription_cancel_now, subscription_default_tax_rates: subscription_default_tax_rates, subscription_items: subscription_items, subscription_proration_behavior: subscription_proration_behavior, subscription_proration_date: subscription_proration_date, subscription_start_date: subscription_start_date, subscription_trial_end: subscription_trial_end, subscription_trial_from_plan: subscription_trial_from_plan)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_invoices_upcoming_lines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return InvoiceLinesList.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving an upcoming invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @return nil
    def get_invoices_upcoming_lines(*, automatic_tax : AutomaticTaxParam1? = nil, coupon : String? = nil, customer : String? = nil, customer_details : CustomerDetailsParam? = nil, discounts : GetInvoicesUpcomingDiscountsParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice_items : Array(InvoiceItemPreviewParams)? = nil, limit : Int64? = nil, schedule : String? = nil, starting_after : String? = nil, subscription : String? = nil, subscription_billing_cycle_anchor : GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil, subscription_cancel_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, subscription_cancel_at_period_end : Bool? = nil, subscription_cancel_now : Bool? = nil, subscription_default_tax_rates : CreditNoteLineItemParamsTaxRates? = nil, subscription_items : Array(SubscriptionItemUpdateParams)? = nil, subscription_proration_behavior : String? = nil, subscription_proration_date : Int64? = nil, subscription_start_date : Int64? = nil, subscription_trial_end : GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil, subscription_trial_from_plan : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_get_invoices_upcoming_lines(automatic_tax: automatic_tax, coupon: coupon, customer: customer, customer_details: customer_details, discounts: discounts, ending_before: ending_before, expand: expand, invoice_items: invoice_items, limit: limit, schedule: schedule, starting_after: starting_after, subscription: subscription, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_cancel_at: subscription_cancel_at, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_cancel_now: subscription_cancel_now, subscription_default_tax_rates: subscription_default_tax_rates, subscription_items: subscription_items, subscription_proration_behavior: subscription_proration_behavior, subscription_proration_date: subscription_proration_date, subscription_start_date: subscription_start_date, subscription_trial_end: subscription_trial_end, subscription_trial_from_plan: subscription_trial_from_plan).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_invoices_upcoming_lines(*, automatic_tax : AutomaticTaxParam1? = nil, coupon : String? = nil, customer : String? = nil, customer_details : CustomerDetailsParam? = nil, discounts : GetInvoicesUpcomingDiscountsParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, invoice_items : Array(InvoiceItemPreviewParams)? = nil, limit : Int64? = nil, schedule : String? = nil, starting_after : String? = nil, subscription : String? = nil, subscription_billing_cycle_anchor : GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil, subscription_cancel_at : GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil, subscription_cancel_at_period_end : Bool? = nil, subscription_cancel_now : Bool? = nil, subscription_default_tax_rates : CreditNoteLineItemParamsTaxRates? = nil, subscription_items : Array(SubscriptionItemUpdateParams)? = nil, subscription_proration_behavior : String? = nil, subscription_proration_date : Int64? = nil, subscription_start_date : Int64? = nil, subscription_trial_end : GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil, subscription_trial_from_plan : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_invoices_upcoming_lines ..." }
      end
      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.get_invoices_upcoming_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_invoices_upcoming_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_invoices_upcoming_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !schedule.nil? && schedule.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"schedule\" when calling DefaultApi.get_invoices_upcoming_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_invoices_upcoming_lines, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !subscription.nil? && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\" when calling DefaultApi.get_invoices_upcoming_lines, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !subscription_proration_behavior.nil? && !allowable_values.includes?(subscription_proration_behavior)
        raise ArgumentError.new("invalid value for \"subscription_proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/invoices/upcoming/lines"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      query_params["coupon"] = coupon.to_s if !coupon.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["customer_details"] = customer_details.to_s if !customer_details.nil?
      query_params["discounts"] = discounts.to_s if !discounts.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["invoice_items"] = @api_client.build_collection_param(invoice_items, "csv") if !invoice_items.nil? && !invoice_items.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["schedule"] = schedule.to_s if !schedule.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["subscription_billing_cycle_anchor"] = subscription_billing_cycle_anchor.to_s if !subscription_billing_cycle_anchor.nil?
      query_params["subscription_cancel_at"] = subscription_cancel_at.to_s if !subscription_cancel_at.nil?
      query_params["subscription_cancel_at_period_end"] = subscription_cancel_at_period_end.to_s if !subscription_cancel_at_period_end.nil?
      query_params["subscription_cancel_now"] = subscription_cancel_now.to_s if !subscription_cancel_now.nil?
      query_params["subscription_default_tax_rates"] = subscription_default_tax_rates.to_s if !subscription_default_tax_rates.nil?
      query_params["subscription_items"] = @api_client.build_collection_param(subscription_items, "csv") if !subscription_items.nil? && !subscription_items.empty?
      query_params["subscription_proration_behavior"] = subscription_proration_behavior.to_s if !subscription_proration_behavior.nil?
      query_params["subscription_proration_date"] = subscription_proration_date.to_s if !subscription_proration_date.nil?
      query_params["subscription_start_date"] = subscription_start_date.to_s if !subscription_start_date.nil?
      query_params["subscription_trial_end"] = subscription_trial_end.to_s if !subscription_trial_end.nil?
      query_params["subscription_trial_from_plan"] = subscription_trial_from_plan.to_s if !subscription_trial_from_plan.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_invoices_upcoming_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of issuer fraud records.</p>
    # @return [RadarIssuerFraudRecordList]
    def get_issuer_fraud_records(*, charge : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_issuer_fraud_records_with_http_info(charge: charge, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of issuer fraud records.&lt;/p&gt;
    # @return [Array<(RadarIssuerFraudRecordList, Integer, Hash)>] RadarIssuerFraudRecordList data, response status code and response headers
    def get_issuer_fraud_records_with_http_info(*, charge : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_issuer_fraud_records(charge: charge, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuer_fraud_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RadarIssuerFraudRecordList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of issuer fraud records.&lt;/p&gt;
    # @return nil
    def get_issuer_fraud_records(*, charge : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuer_fraud_records(charge: charge, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuer_fraud_records(*, charge : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuer_fraud_records ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_issuer_fraud_records, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_issuer_fraud_records, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuer_fraud_records"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuer_fraud_records",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an issuer fraud record that has previously been created. </p>  <p>Please refer to the <a href=\"#issuer_fraud_record_object\">issuer fraud record</a> object reference for more details.</p>
    # @param issuer_fraud_record [String]
    # @return [IssuerFraudRecord]
    def get_issuer_fraud_records_issuer_fraud_record(*, issuer_fraud_record : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_issuer_fraud_records_issuer_fraud_record_with_http_info(issuer_fraud_record: issuer_fraud_record, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an issuer fraud record that has previously been created. &lt;/p&gt;  &lt;p&gt;Please refer to the &lt;a href&#x3D;\&quot;#issuer_fraud_record_object\&quot;&gt;issuer fraud record&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @param issuer_fraud_record [String]
    # @return [Array<(IssuerFraudRecord, Integer, Hash)>] IssuerFraudRecord data, response status code and response headers
    def get_issuer_fraud_records_issuer_fraud_record_with_http_info(*, issuer_fraud_record : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_issuer_fraud_records_issuer_fraud_record(issuer_fraud_record: issuer_fraud_record, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuer_fraud_records_issuer_fraud_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuerFraudRecord.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an issuer fraud record that has previously been created. &lt;/p&gt;  &lt;p&gt;Please refer to the &lt;a href&#x3D;\&quot;#issuer_fraud_record_object\&quot;&gt;issuer fraud record&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @param issuer_fraud_record [String]
    # @return nil
    def get_issuer_fraud_records_issuer_fraud_record(*, issuer_fraud_record : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuer_fraud_records_issuer_fraud_record(issuer_fraud_record: issuer_fraud_record, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuer_fraud_records_issuer_fraud_record(*, issuer_fraud_record : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuer_fraud_records_issuer_fraud_record ..." }
      end
      if @api_client.config.client_side_validation && issuer_fraud_record.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"issuer_fraud_record\" when calling DefaultApi.get_issuer_fraud_records_issuer_fraud_record, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuer_fraud_records/{issuer_fraud_record}".sub("{" + "issuer_fraud_record" + "}", URI.encode_path(issuer_fraud_record.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuer_fraud_records_issuer_fraud_record",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @return [GetIssuingAuthorizations200Response]
    def get_issuing_authorizations(*, card : String? = nil, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_issuing_authorizations_with_http_info(card: card, cardholder: cardholder, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return [Array<(GetIssuingAuthorizations200Response, Integer, Hash)>] GetIssuingAuthorizations200Response data, response status code and response headers
    def get_issuing_authorizations_with_http_info(*, card : String? = nil, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_issuing_authorizations(card: card, cardholder: cardholder, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_authorizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetIssuingAuthorizations200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return nil
    def get_issuing_authorizations(*, card : String? = nil, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_authorizations(card: card, cardholder: cardholder, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_authorizations(*, card : String? = nil, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_authorizations ..." }
      end
      if @api_client.config.client_side_validation && !card.nil? && card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"card\" when calling DefaultApi.get_issuing_authorizations, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !cardholder.nil? && cardholder.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder\" when calling DefaultApi.get_issuing_authorizations, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_issuing_authorizations, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_issuing_authorizations, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["closed", "pending", "reversed"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/issuing/authorizations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["card"] = card.to_s if !card.nil?
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_authorizations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Authorization</code> object.</p>
    # @param authorization [String]
    # @return [IssuingAuthorization]
    def get_issuing_authorizations_authorization(*, authorization : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_issuing_authorizations_authorization_with_http_info(authorization: authorization, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
    # @param authorization [String]
    # @return [Array<(IssuingAuthorization, Integer, Hash)>] IssuingAuthorization data, response status code and response headers
    def get_issuing_authorizations_authorization_with_http_info(*, authorization : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_issuing_authorizations_authorization(authorization: authorization, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_authorizations_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingAuthorization.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
    # @param authorization [String]
    # @return nil
    def get_issuing_authorizations_authorization(*, authorization : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_authorizations_authorization(authorization: authorization, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_authorizations_authorization(*, authorization : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_authorizations_authorization ..." }
      end
      if @api_client.config.client_side_validation && authorization.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"authorization\" when calling DefaultApi.get_issuing_authorizations_authorization, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_authorizations_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @return [GetIssuingCardholders200Response]
    def get_issuing_cardholders(*, created : GetAccountsCreatedParameter? = nil, email : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, phone_number : String? = nil, starting_after : String? = nil, status : String? = nil, _type : String? = nil)
      data, _status_code, _headers = get_issuing_cardholders_with_http_info(created: created, email: email, ending_before: ending_before, expand: expand, limit: limit, phone_number: phone_number, starting_after: starting_after, status: status, _type: _type)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return [Array<(GetIssuingCardholders200Response, Integer, Hash)>] GetIssuingCardholders200Response data, response status code and response headers
    def get_issuing_cardholders_with_http_info(*, created : GetAccountsCreatedParameter? = nil, email : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, phone_number : String? = nil, starting_after : String? = nil, status : String? = nil, _type : String? = nil)
      request = build_api_request_for_get_issuing_cardholders(created: created, email: email, ending_before: ending_before, expand: expand, limit: limit, phone_number: phone_number, starting_after: starting_after, status: status, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_cardholders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetIssuingCardholders200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return nil
    def get_issuing_cardholders(*, created : GetAccountsCreatedParameter? = nil, email : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, phone_number : String? = nil, starting_after : String? = nil, status : String? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_cardholders(created: created, email: email, ending_before: ending_before, expand: expand, limit: limit, phone_number: phone_number, starting_after: starting_after, status: status, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_cardholders(*, created : GetAccountsCreatedParameter? = nil, email : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, phone_number : String? = nil, starting_after : String? = nil, status : String? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_cardholders ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_issuing_cardholders, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_issuing_cardholders, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["active", "blocked", "inactive"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      allowable_values = ["company", "individual"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/issuing/cardholders"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["email"] = email.to_s if !email.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["phone_number"] = phone_number.to_s if !phone_number.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["type"] = _type.to_s if !_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_cardholders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
    # @param cardholder [String]
    # @return [IssuingCardholder]
    def get_issuing_cardholders_cardholder(*, cardholder : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_issuing_cardholders_cardholder_with_http_info(cardholder: cardholder, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
    # @param cardholder [String]
    # @return [Array<(IssuingCardholder, Integer, Hash)>] IssuingCardholder data, response status code and response headers
    def get_issuing_cardholders_cardholder_with_http_info(*, cardholder : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_issuing_cardholders_cardholder(cardholder: cardholder, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_cardholders_cardholder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingCardholder.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
    # @param cardholder [String]
    # @return nil
    def get_issuing_cardholders_cardholder(*, cardholder : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_cardholders_cardholder(cardholder: cardholder, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_cardholders_cardholder(*, cardholder : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_cardholders_cardholder ..." }
      end
      if @api_client.config.client_side_validation && cardholder.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder\" when calling DefaultApi.get_issuing_cardholders_cardholder, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/cardholders/{cardholder}".sub("{" + "cardholder" + "}", URI.encode_path(cardholder.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_cardholders_cardholder",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @return [GetIssuingCards200Response]
    def get_issuing_cards(*, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, exp_month : Int64? = nil, exp_year : Int64? = nil, expand : Array(String)? = nil, last4 : String? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, _type : String? = nil)
      data, _status_code, _headers = get_issuing_cards_with_http_info(cardholder: cardholder, created: created, ending_before: ending_before, exp_month: exp_month, exp_year: exp_year, expand: expand, last4: last4, limit: limit, starting_after: starting_after, status: status, _type: _type)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return [Array<(GetIssuingCards200Response, Integer, Hash)>] GetIssuingCards200Response data, response status code and response headers
    def get_issuing_cards_with_http_info(*, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, exp_month : Int64? = nil, exp_year : Int64? = nil, expand : Array(String)? = nil, last4 : String? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, _type : String? = nil)
      request = build_api_request_for_get_issuing_cards(cardholder: cardholder, created: created, ending_before: ending_before, exp_month: exp_month, exp_year: exp_year, expand: expand, last4: last4, limit: limit, starting_after: starting_after, status: status, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetIssuingCards200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return nil
    def get_issuing_cards(*, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, exp_month : Int64? = nil, exp_year : Int64? = nil, expand : Array(String)? = nil, last4 : String? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_cards(cardholder: cardholder, created: created, ending_before: ending_before, exp_month: exp_month, exp_year: exp_year, expand: expand, last4: last4, limit: limit, starting_after: starting_after, status: status, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_cards(*, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, exp_month : Int64? = nil, exp_year : Int64? = nil, expand : Array(String)? = nil, last4 : String? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_cards ..." }
      end
      if @api_client.config.client_side_validation && !cardholder.nil? && cardholder.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder\" when calling DefaultApi.get_issuing_cards, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_issuing_cards, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last4.nil? && last4.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last4\" when calling DefaultApi.get_issuing_cards, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_issuing_cards, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["active", "canceled", "inactive"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      allowable_values = ["physical", "virtual"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/issuing/cards"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      query_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["last4"] = last4.to_s if !last4.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["type"] = _type.to_s if !_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_cards",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Card</code> object.</p>
    # @param card [String]
    # @return [IssuingCard]
    def get_issuing_cards_card(*, card : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_issuing_cards_card_with_http_info(card: card, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @param card [String]
    # @return [Array<(IssuingCard, Integer, Hash)>] IssuingCard data, response status code and response headers
    def get_issuing_cards_card_with_http_info(*, card : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_issuing_cards_card(card: card, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_cards_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingCard.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @param card [String]
    # @return nil
    def get_issuing_cards_card(*, card : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_cards_card(card: card, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_cards_card(*, card : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_cards_card ..." }
      end
      if @api_client.config.client_side_validation && card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"card\" when calling DefaultApi.get_issuing_cards_card, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/cards/{card}".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_cards_card",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @return [IssuingDisputeList]
    def get_issuing_disputes(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, transaction : String? = nil)
      data, _status_code, _headers = get_issuing_disputes_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, transaction: transaction)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return [Array<(IssuingDisputeList, Integer, Hash)>] IssuingDisputeList data, response status code and response headers
    def get_issuing_disputes_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, transaction : String? = nil)
      request = build_api_request_for_get_issuing_disputes(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, transaction: transaction)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_disputes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingDisputeList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return nil
    def get_issuing_disputes(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, transaction : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_disputes(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, transaction: transaction).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_disputes(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, transaction : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_disputes ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_issuing_disputes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_issuing_disputes, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["expired", "lost", "submitted", "unsubmitted", "won"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !transaction.nil? && transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transaction\" when calling DefaultApi.get_issuing_disputes, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/disputes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["transaction"] = transaction.to_s if !transaction.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_disputes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Dispute</code> object.</p>
    # @param dispute [String]
    # @return [IssuingDispute]
    def get_issuing_disputes_dispute(*, dispute : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_issuing_disputes_dispute_with_http_info(dispute: dispute, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
    # @param dispute [String]
    # @return [Array<(IssuingDispute, Integer, Hash)>] IssuingDispute data, response status code and response headers
    def get_issuing_disputes_dispute_with_http_info(*, dispute : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_issuing_disputes_dispute(dispute: dispute, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_disputes_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingDispute.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
    # @param dispute [String]
    # @return nil
    def get_issuing_disputes_dispute(*, dispute : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_disputes_dispute(dispute: dispute, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_disputes_dispute(*, dispute : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_disputes_dispute ..." }
      end
      if @api_client.config.client_side_validation && dispute.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"dispute\" when calling DefaultApi.get_issuing_disputes_dispute, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @return [GetIssuingSettlements200Response]
    def get_issuing_settlements(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_issuing_settlements_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Settlement&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return [Array<(GetIssuingSettlements200Response, Integer, Hash)>] GetIssuingSettlements200Response data, response status code and response headers
    def get_issuing_settlements_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_issuing_settlements(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_settlements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetIssuingSettlements200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Settlement&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return nil
    def get_issuing_settlements(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_settlements(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_settlements(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_settlements ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_issuing_settlements, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_issuing_settlements, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/settlements"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_settlements",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Settlement</code> object.</p>
    # @param settlement [String]
    # @return [IssuingSettlement]
    def get_issuing_settlements_settlement(*, settlement : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_issuing_settlements_settlement_with_http_info(settlement: settlement, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Settlement&lt;/code&gt; object.&lt;/p&gt;
    # @param settlement [String]
    # @return [Array<(IssuingSettlement, Integer, Hash)>] IssuingSettlement data, response status code and response headers
    def get_issuing_settlements_settlement_with_http_info(*, settlement : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_issuing_settlements_settlement(settlement: settlement, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_settlements_settlement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingSettlement.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Settlement&lt;/code&gt; object.&lt;/p&gt;
    # @param settlement [String]
    # @return nil
    def get_issuing_settlements_settlement(*, settlement : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_settlements_settlement(settlement: settlement, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_settlements_settlement(*, settlement : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_settlements_settlement ..." }
      end
      if @api_client.config.client_side_validation && settlement.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"settlement\" when calling DefaultApi.get_issuing_settlements_settlement, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/settlements/{settlement}".sub("{" + "settlement" + "}", URI.encode_path(settlement.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_settlements_settlement",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @return [GetIssuingTransactions200Response]
    def get_issuing_transactions(*, card : String? = nil, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil)
      data, _status_code, _headers = get_issuing_transactions_with_http_info(card: card, cardholder: cardholder, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type)
      data
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return [Array<(GetIssuingTransactions200Response, Integer, Hash)>] GetIssuingTransactions200Response data, response status code and response headers
    def get_issuing_transactions_with_http_info(*, card : String? = nil, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil)
      request = build_api_request_for_get_issuing_transactions(card: card, cardholder: cardholder, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetIssuingTransactions200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return nil
    def get_issuing_transactions(*, card : String? = nil, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_transactions(card: card, cardholder: cardholder, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_transactions(*, card : String? = nil, cardholder : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_transactions ..." }
      end
      if @api_client.config.client_side_validation && !card.nil? && card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"card\" when calling DefaultApi.get_issuing_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !cardholder.nil? && cardholder.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder\" when calling DefaultApi.get_issuing_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_issuing_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_issuing_transactions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["capture", "refund"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/issuing/transactions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["card"] = card.to_s if !card.nil?
      query_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an Issuing <code>Transaction</code> object.</p>
    # @param transaction [String]
    # @return [IssuingTransaction]
    def get_issuing_transactions_transaction(*, transaction : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_issuing_transactions_transaction_with_http_info(transaction: transaction, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
    # @param transaction [String]
    # @return [Array<(IssuingTransaction, Integer, Hash)>] IssuingTransaction data, response status code and response headers
    def get_issuing_transactions_transaction_with_http_info(*, transaction : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_issuing_transactions_transaction(transaction: transaction, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_issuing_transactions_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
    # @param transaction [String]
    # @return nil
    def get_issuing_transactions_transaction(*, transaction : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_issuing_transactions_transaction(transaction: transaction, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_issuing_transactions_transaction(*, transaction : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_issuing_transactions_transaction ..." }
      end
      if @api_client.config.client_side_validation && transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transaction\" when calling DefaultApi.get_issuing_transactions_transaction, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/transactions/{transaction}".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_issuing_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a Financial Connections <code>Session</code></p>
    # @param session [String]
    # @return [FinancialConnectionsSession]
    def get_link_account_sessions_session(*, session : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_link_account_sessions_session_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
    # @param session [String]
    # @return [Array<(FinancialConnectionsSession, Integer, Hash)>] FinancialConnectionsSession data, response status code and response headers
    def get_link_account_sessions_session_with_http_info(*, session : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_link_account_sessions_session(session: session, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_link_account_sessions_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
    # @param session [String]
    # @return nil
    def get_link_account_sessions_session(*, session : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_link_account_sessions_session(session: session, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_link_account_sessions_session(*, session : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_link_account_sessions_session ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.get_link_account_sessions_session, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/link_account_sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_link_account_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
    # @return [BankConnectionsResourceLinkedAccountList]
    def get_linked_accounts(*, account_holder : AccountholderParams? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, session : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_linked_accounts_with_http_info(account_holder: account_holder, ending_before: ending_before, expand: expand, limit: limit, session: session, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
    # @return [Array<(BankConnectionsResourceLinkedAccountList, Integer, Hash)>] BankConnectionsResourceLinkedAccountList data, response status code and response headers
    def get_linked_accounts_with_http_info(*, account_holder : AccountholderParams? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, session : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_linked_accounts(account_holder: account_holder, ending_before: ending_before, expand: expand, limit: limit, session: session, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_linked_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BankConnectionsResourceLinkedAccountList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
    # @return nil
    def get_linked_accounts(*, account_holder : AccountholderParams? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, session : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_linked_accounts(account_holder: account_holder, ending_before: ending_before, expand: expand, limit: limit, session: session, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_linked_accounts(*, account_holder : AccountholderParams? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, session : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_linked_accounts ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_linked_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !session.nil? && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.get_linked_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_linked_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/linked_accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["account_holder"] = account_holder.to_s if !account_holder.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["session"] = session.to_s if !session.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_linked_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
    # @param account [String]
    # @return [FinancialConnectionsAccount]
    def get_linked_accounts_account(*, account : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_linked_accounts_account_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(FinancialConnectionsAccount, Integer, Hash)>] FinancialConnectionsAccount data, response status code and response headers
    def get_linked_accounts_account_with_http_info(*, account : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_linked_accounts_account(account: account, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_linked_accounts_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def get_linked_accounts_account(*, account : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_linked_accounts_account(account: account, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_linked_accounts_account(*, account : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_linked_accounts_account ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_linked_accounts_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/linked_accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_linked_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Lists all owners for a given <code>Account</code></p>
    # @param account [String]
    # @param ownership [String] The ID of the ownership object to fetch owners from.
    # @return [BankConnectionsResourceOwnerList]
    def get_linked_accounts_account_owners(*, account : String, ownership : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_linked_accounts_account_owners_with_http_info(account: account, ownership: ownership, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Lists all owners for a given &lt;code&gt;Account&lt;/code&gt;&lt;/p&gt;
    # @param account [String]
    # @param ownership [String] The ID of the ownership object to fetch owners from.
    # @return [Array<(BankConnectionsResourceOwnerList, Integer, Hash)>] BankConnectionsResourceOwnerList data, response status code and response headers
    def get_linked_accounts_account_owners_with_http_info(*, account : String, ownership : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_linked_accounts_account_owners(account: account, ownership: ownership, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_linked_accounts_account_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BankConnectionsResourceOwnerList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Lists all owners for a given &lt;code&gt;Account&lt;/code&gt;&lt;/p&gt;
    # @param account [String]
    # @param ownership [String] The ID of the ownership object to fetch owners from.
    # @return nil
    def get_linked_accounts_account_owners(*, account : String, ownership : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_linked_accounts_account_owners(account: account, ownership: ownership, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_linked_accounts_account_owners(*, account : String, ownership : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_linked_accounts_account_owners ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.get_linked_accounts_account_owners, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && ownership.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ownership\" when calling DefaultApi.get_linked_accounts_account_owners, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_linked_accounts_account_owners, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_linked_accounts_account_owners, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/linked_accounts/{account}/owners".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["ownership"] = ownership.to_s if !ownership.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_linked_accounts_account_owners",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a Mandate object.</p>
    # @param mandate [String]
    # @return [Mandate]
    def get_mandates_mandate(*, mandate : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_mandates_mandate_with_http_info(mandate: mandate, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a Mandate object.&lt;/p&gt;
    # @param mandate [String]
    # @return [Array<(Mandate, Integer, Hash)>] Mandate data, response status code and response headers
    def get_mandates_mandate_with_http_info(*, mandate : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_mandates_mandate(mandate: mandate, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_mandates_mandate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Mandate.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a Mandate object.&lt;/p&gt;
    # @param mandate [String]
    # @return nil
    def get_mandates_mandate(*, mandate : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_mandates_mandate(mandate: mandate, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_mandates_mandate(*, mandate : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_mandates_mandate ..." }
      end
      # resource path
      local_var_path = "/v1/mandates/{mandate}".sub("{" + "mandate" + "}", URI.encode_path(mandate.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_mandates_mandate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>
    # @return [OrdersV2ResourceOrderList]
    def get_orders(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_orders_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.&lt;/p&gt;
    # @return [Array<(OrdersV2ResourceOrderList, Integer, Hash)>] OrdersV2ResourceOrderList data, response status code and response headers
    def get_orders_with_http_info(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_orders(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return OrdersV2ResourceOrderList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.&lt;/p&gt;
    # @return nil
    def get_orders(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_orders(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_orders(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_orders ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_orders, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/orders"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_orders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p>
    # @param id [String]
    # @return [Order]
    def get_orders_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_orders_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def get_orders_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_orders_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_orders_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Order.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_orders_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_orders_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_orders_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_orders_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_orders_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/orders/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_orders_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving an order, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @param id [String]
    # @return [OrdersV2ResourceLineItemList]
    def get_orders_id_line_items(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_orders_id_line_items_with_http_info(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;When retrieving an order, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(OrdersV2ResourceLineItemList, Integer, Hash)>] OrdersV2ResourceLineItemList data, response status code and response headers
    def get_orders_id_line_items_with_http_info(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_orders_id_line_items(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_orders_id_line_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return OrdersV2ResourceLineItemList.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving an order, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_orders_id_line_items(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_orders_id_line_items(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_orders_id_line_items(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_orders_id_line_items ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_orders_id_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_orders_id_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_orders_id_line_items, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/orders/{id}/line_items".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_orders_id_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of PaymentIntents.</p>
    # @return [PaymentFlowsPaymentIntentList]
    def get_payment_intents(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_payment_intents_with_http_info(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
    # @return [Array<(PaymentFlowsPaymentIntentList, Integer, Hash)>] PaymentFlowsPaymentIntentList data, response status code and response headers
    def get_payment_intents_with_http_info(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_payment_intents(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payment_intents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentFlowsPaymentIntentList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
    # @return nil
    def get_payment_intents(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payment_intents(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payment_intents(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payment_intents ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_payment_intents, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_payment_intents, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_payment_intents, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_intents"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payment_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a PaymentIntent that has previously been created. </p>  <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>  <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href=\"#payment_intent_object\">payment intent</a> object reference for more details.</p>
    # @param intent [String]
    # @return [PaymentIntent]
    def get_payment_intents_intent(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = get_payment_intents_intent_with_http_info(intent: intent, client_secret: client_secret, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def get_payment_intents_intent_with_http_info(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_get_payment_intents_intent(intent: intent, client_secret: client_secret, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payment_intents_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def get_payment_intents_intent(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payment_intents_intent(intent: intent, client_secret: client_secret, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payment_intents_intent(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payment_intents_intent ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.get_payment_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !client_secret.nil? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\" when calling DefaultApi.get_payment_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payment_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @return [SearchResult3]
    def get_payment_intents_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      data, _status_code, _headers = get_payment_intents_search_with_http_info(query: query, expand: expand, limit: limit, page: page)
      data
    end

    # &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @return [Array<(SearchResult3, Integer, Hash)>] SearchResult3 data, response status code and response headers
    def get_payment_intents_search_with_http_info(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      request = build_api_request_for_get_payment_intents_search(query: query, expand: expand, limit: limit, page: page)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payment_intents_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SearchResult3.from_json(data), status_code, headers
    end

    # &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
    # @return nil
    def get_payment_intents_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payment_intents_search(query: query, expand: expand, limit: limit, page: page).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payment_intents_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payment_intents_search ..." }
      end
      if @api_client.config.client_side_validation && query.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"query\" when calling DefaultApi.get_payment_intents_search, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"page\" when calling DefaultApi.get_payment_intents_search, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_intents/search"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["page"] = page.to_s if !page.nil?
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payment_intents_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your payment links.</p>
    # @return [GetPaymentLinks200Response]
    def get_payment_links(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_payment_links_with_http_info(active: active, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
    # @return [Array<(GetPaymentLinks200Response, Integer, Hash)>] GetPaymentLinks200Response data, response status code and response headers
    def get_payment_links_with_http_info(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_payment_links(active: active, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payment_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetPaymentLinks200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
    # @return nil
    def get_payment_links(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payment_links(active: active, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payment_links(*, active : Bool? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payment_links ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_payment_links, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_payment_links, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_links"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payment_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a payment link.</p>
    # @param payment_link [String]
    # @return [PaymentLink]
    def get_payment_links_payment_link(*, payment_link : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_payment_links_payment_link_with_http_info(payment_link: payment_link, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
    # @param payment_link [String]
    # @return [Array<(PaymentLink, Integer, Hash)>] PaymentLink data, response status code and response headers
    def get_payment_links_payment_link_with_http_info(*, payment_link : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_payment_links_payment_link(payment_link: payment_link, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payment_links_payment_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
    # @param payment_link [String]
    # @return nil
    def get_payment_links_payment_link(*, payment_link : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payment_links_payment_link(payment_link: payment_link, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payment_links_payment_link(*, payment_link : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payment_links_payment_link ..." }
      end
      if @api_client.config.client_side_validation && payment_link.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_link\" when calling DefaultApi.get_payment_links_payment_link, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_links/{payment_link}".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payment_links_payment_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @param payment_link [String]
    # @return [PaymentLinksResourceListLineItems]
    def get_payment_links_payment_link_line_items(*, payment_link : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_payment_links_payment_link_line_items_with_http_info(payment_link: payment_link, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param payment_link [String]
    # @return [Array<(PaymentLinksResourceListLineItems, Integer, Hash)>] PaymentLinksResourceListLineItems data, response status code and response headers
    def get_payment_links_payment_link_line_items_with_http_info(*, payment_link : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_payment_links_payment_link_line_items(payment_link: payment_link, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payment_links_payment_link_line_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentLinksResourceListLineItems.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param payment_link [String]
    # @return nil
    def get_payment_links_payment_link_line_items(*, payment_link : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payment_links_payment_link_line_items(payment_link: payment_link, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payment_links_payment_link_line_items(*, payment_link : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payment_links_payment_link_line_items ..." }
      end
      if @api_client.config.client_side_validation && payment_link.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_link\" when calling DefaultApi.get_payment_links_payment_link_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_payment_links_payment_link_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_payment_links_payment_link_line_items, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_links/{payment_link}/line_items".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payment_links_payment_link_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of PaymentMethods. For listing a customer’s payment methods, you should use <a href=\"/docs/api/payment_methods/customer_list\">List a Customer’s PaymentMethods</a></p>
    # @param _type [String] A required filter on the list, based on the object `type` field.
    # @return [PaymentFlowsPaymentMethodList]
    def get_payment_methods(*, _type : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_payment_methods_with_http_info(_type: _type, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of PaymentMethods. For listing a customer’s payment methods, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
    # @param _type [String] A required filter on the list, based on the object `type` field.
    # @return [Array<(PaymentFlowsPaymentMethodList, Integer, Hash)>] PaymentFlowsPaymentMethodList data, response status code and response headers
    def get_payment_methods_with_http_info(*, _type : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_payment_methods(_type: _type, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentFlowsPaymentMethodList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of PaymentMethods. For listing a customer’s payment methods, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
    # @param _type [String] A required filter on the list, based on the object `type` field.
    # @return nil
    def get_payment_methods(*, _type : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payment_methods(_type: _type, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payment_methods(*, _type : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payment_methods ..." }
      end
      allowable_values = ["acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "oxxo", "p24", "paynow", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_payment_methods, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_methods"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payment_methods",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a PaymentMethod object.</p>
    # @param payment_method [String]
    # @return [PaymentMethod]
    def get_payment_methods_payment_method(*, payment_method : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_payment_methods_payment_method_with_http_info(payment_method: payment_method, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a PaymentMethod object.&lt;/p&gt;
    # @param payment_method [String]
    # @return [Array<(PaymentMethod, Integer, Hash)>] PaymentMethod data, response status code and response headers
    def get_payment_methods_payment_method_with_http_info(*, payment_method : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_payment_methods_payment_method(payment_method: payment_method, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payment_methods_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentMethod.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a PaymentMethod object.&lt;/p&gt;
    # @param payment_method [String]
    # @return nil
    def get_payment_methods_payment_method(*, payment_method : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payment_methods_payment_method(payment_method: payment_method, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payment_methods_payment_method(*, payment_method : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payment_methods_payment_method ..." }
      end
      if @api_client.config.client_side_validation && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.get_payment_methods_payment_method, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payment_methods_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p>
    # @return [PayoutList]
    def get_payouts(*, arrival_date : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, destination : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_payouts_with_http_info(arrival_date: arrival_date, created: created, destination: destination, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.&lt;/p&gt;
    # @return [Array<(PayoutList, Integer, Hash)>] PayoutList data, response status code and response headers
    def get_payouts_with_http_info(*, arrival_date : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, destination : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_payouts(arrival_date: arrival_date, created: created, destination: destination, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PayoutList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.&lt;/p&gt;
    # @return nil
    def get_payouts(*, arrival_date : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, destination : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payouts(arrival_date: arrival_date, created: created, destination: destination, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payouts(*, arrival_date : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, destination : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payouts ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_payouts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_payouts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !status.nil? && status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\" when calling DefaultApi.get_payouts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payouts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["arrival_date"] = arrival_date.to_s if !arrival_date.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["destination"] = destination.to_s if !destination.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payouts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p>
    # @param payout [String]
    # @return [Payout]
    def get_payouts_payout(*, payout : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_payouts_payout_with_http_info(payout: payout, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.&lt;/p&gt;
    # @param payout [String]
    # @return [Array<(Payout, Integer, Hash)>] Payout data, response status code and response headers
    def get_payouts_payout_with_http_info(*, payout : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_payouts_payout(payout: payout, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_payouts_payout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Payout.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.&lt;/p&gt;
    # @param payout [String]
    # @return nil
    def get_payouts_payout(*, payout : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_payouts_payout(payout: payout, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_payouts_payout(*, payout : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_payouts_payout ..." }
      end
      if @api_client.config.client_side_validation && payout.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payout\" when calling DefaultApi.get_payouts_payout, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_payouts_payout",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your plans.</p>
    # @return [PlanList]
    def get_plans(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, product : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_plans_with_http_info(active: active, created: created, ending_before: ending_before, expand: expand, limit: limit, product: product, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your plans.&lt;/p&gt;
    # @return [Array<(PlanList, Integer, Hash)>] PlanList data, response status code and response headers
    def get_plans_with_http_info(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, product : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_plans(active: active, created: created, ending_before: ending_before, expand: expand, limit: limit, product: product, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PlanList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your plans.&lt;/p&gt;
    # @return nil
    def get_plans(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, product : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_plans(active: active, created: created, ending_before: ending_before, expand: expand, limit: limit, product: product, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_plans(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, product : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_plans ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_plans, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !product.nil? && product.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product\" when calling DefaultApi.get_plans, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_plans, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/plans"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["product"] = product.to_s if !product.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_plans",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the plan with the given ID.</p>
    # @param plan [String]
    # @return [Plan]
    def get_plans_plan(*, plan : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_plans_plan_with_http_info(plan: plan, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the plan with the given ID.&lt;/p&gt;
    # @param plan [String]
    # @return [Array<(Plan, Integer, Hash)>] Plan data, response status code and response headers
    def get_plans_plan_with_http_info(*, plan : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_plans_plan(plan: plan, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_plans_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Plan.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the plan with the given ID.&lt;/p&gt;
    # @param plan [String]
    # @return nil
    def get_plans_plan(*, plan : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_plans_plan(plan: plan, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_plans_plan(*, plan : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_plans_plan ..." }
      end
      if @api_client.config.client_side_validation && plan.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"plan\" when calling DefaultApi.get_plans_plan, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/plans/{plan}".sub("{" + "plan" + "}", URI.encode_path(plan.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_plans_plan",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your prices.</p>
    # @return [PriceList]
    def get_prices(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, lookup_keys : Array(String)? = nil, product : String? = nil, recurring : AllPricesRecurringParams? = nil, starting_after : String? = nil, _type : String? = nil)
      data, _status_code, _headers = get_prices_with_http_info(active: active, created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, lookup_keys: lookup_keys, product: product, recurring: recurring, starting_after: starting_after, _type: _type)
      data
    end

    # &lt;p&gt;Returns a list of your prices.&lt;/p&gt;
    # @return [Array<(PriceList, Integer, Hash)>] PriceList data, response status code and response headers
    def get_prices_with_http_info(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, lookup_keys : Array(String)? = nil, product : String? = nil, recurring : AllPricesRecurringParams? = nil, starting_after : String? = nil, _type : String? = nil)
      request = build_api_request_for_get_prices(active: active, created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, lookup_keys: lookup_keys, product: product, recurring: recurring, starting_after: starting_after, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PriceList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your prices.&lt;/p&gt;
    # @return nil
    def get_prices(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, lookup_keys : Array(String)? = nil, product : String? = nil, recurring : AllPricesRecurringParams? = nil, starting_after : String? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_prices(active: active, created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, lookup_keys: lookup_keys, product: product, recurring: recurring, starting_after: starting_after, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_prices(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, lookup_keys : Array(String)? = nil, product : String? = nil, recurring : AllPricesRecurringParams? = nil, starting_after : String? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_prices ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_prices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !product.nil? && product.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product\" when calling DefaultApi.get_prices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_prices, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["one_time", "recurring"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/prices"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["lookup_keys"] = @api_client.build_collection_param(lookup_keys, "csv") if !lookup_keys.nil? && !lookup_keys.empty?
      query_params["product"] = product.to_s if !product.nil?
      query_params["recurring"] = recurring.to_s if !recurring.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_prices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the price with the given ID.</p>
    # @param price [String]
    # @return [Price]
    def get_prices_price(*, price : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_prices_price_with_http_info(price: price, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the price with the given ID.&lt;/p&gt;
    # @param price [String]
    # @return [Array<(Price, Integer, Hash)>] Price data, response status code and response headers
    def get_prices_price_with_http_info(*, price : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_prices_price(price: price, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_prices_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Price.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the price with the given ID.&lt;/p&gt;
    # @param price [String]
    # @return nil
    def get_prices_price(*, price : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_prices_price(price: price, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_prices_price(*, price : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_prices_price ..." }
      end
      if @api_client.config.client_side_validation && price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\" when calling DefaultApi.get_prices_price, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/prices/{price}".sub("{" + "price" + "}", URI.encode_path(price.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_prices_price",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for prices you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).
    # @return [SearchResult4]
    def get_prices_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      data, _status_code, _headers = get_prices_search_with_http_info(query: query, expand: expand, limit: limit, page: page)
      data
    end

    # &lt;p&gt;Search for prices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).
    # @return [Array<(SearchResult4, Integer, Hash)>] SearchResult4 data, response status code and response headers
    def get_prices_search_with_http_info(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      request = build_api_request_for_get_prices_search(query: query, expand: expand, limit: limit, page: page)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_prices_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SearchResult4.from_json(data), status_code, headers
    end

    # &lt;p&gt;Search for prices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).
    # @return nil
    def get_prices_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_prices_search(query: query, expand: expand, limit: limit, page: page).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_prices_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_prices_search ..." }
      end
      if @api_client.config.client_side_validation && query.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"query\" when calling DefaultApi.get_prices_search, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"page\" when calling DefaultApi.get_prices_search, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/prices/search"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["page"] = page.to_s if !page.nil?
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_prices_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
    # @return [ProductList]
    def get_products(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, ids : Array(String)? = nil, limit : Int64? = nil, shippable : Bool? = nil, starting_after : String? = nil, url : String? = nil)
      data, _status_code, _headers = get_products_with_http_info(active: active, created: created, ending_before: ending_before, expand: expand, ids: ids, limit: limit, shippable: shippable, starting_after: starting_after, url: url)
      data
    end

    # &lt;p&gt;Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.&lt;/p&gt;
    # @return [Array<(ProductList, Integer, Hash)>] ProductList data, response status code and response headers
    def get_products_with_http_info(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, ids : Array(String)? = nil, limit : Int64? = nil, shippable : Bool? = nil, starting_after : String? = nil, url : String? = nil)
      request = build_api_request_for_get_products(active: active, created: created, ending_before: ending_before, expand: expand, ids: ids, limit: limit, shippable: shippable, starting_after: starting_after, url: url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ProductList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.&lt;/p&gt;
    # @return nil
    def get_products(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, ids : Array(String)? = nil, limit : Int64? = nil, shippable : Bool? = nil, starting_after : String? = nil, url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_products(active: active, created: created, ending_before: ending_before, expand: expand, ids: ids, limit: limit, shippable: shippable, starting_after: starting_after, url: url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_products(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, ids : Array(String)? = nil, limit : Int64? = nil, shippable : Bool? = nil, starting_after : String? = nil, url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_products ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_products, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_products, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !url.nil? && url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\" when calling DefaultApi.get_products, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/products"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["ids"] = @api_client.build_collection_param(ids, "csv") if !ids.nil? && !ids.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["shippable"] = shippable.to_s if !shippable.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["url"] = url.to_s if !url.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_products",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
    # @param id [String]
    # @return [Product]
    def get_products_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_products_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def get_products_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_products_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_products_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Product.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_products_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_products_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_products_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_products_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_products_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/products/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_products_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for products you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).
    # @return [SearchResult5]
    def get_products_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      data, _status_code, _headers = get_products_search_with_http_info(query: query, expand: expand, limit: limit, page: page)
      data
    end

    # &lt;p&gt;Search for products you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).
    # @return [Array<(SearchResult5, Integer, Hash)>] SearchResult5 data, response status code and response headers
    def get_products_search_with_http_info(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      request = build_api_request_for_get_products_search(query: query, expand: expand, limit: limit, page: page)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_products_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SearchResult5.from_json(data), status_code, headers
    end

    # &lt;p&gt;Search for products you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).
    # @return nil
    def get_products_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_products_search(query: query, expand: expand, limit: limit, page: page).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_products_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_products_search ..." }
      end
      if @api_client.config.client_side_validation && query.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"query\" when calling DefaultApi.get_products_search, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"page\" when calling DefaultApi.get_products_search, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/products/search"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["page"] = page.to_s if !page.nil?
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_products_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your promotion codes.</p>
    # @return [GetPromotionCodes200Response]
    def get_promotion_codes(*, active : Bool? = nil, code : String? = nil, coupon : String? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_promotion_codes_with_http_info(active: active, code: code, coupon: coupon, created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your promotion codes.&lt;/p&gt;
    # @return [Array<(GetPromotionCodes200Response, Integer, Hash)>] GetPromotionCodes200Response data, response status code and response headers
    def get_promotion_codes_with_http_info(*, active : Bool? = nil, code : String? = nil, coupon : String? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_promotion_codes(active: active, code: code, coupon: coupon, created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_promotion_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetPromotionCodes200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your promotion codes.&lt;/p&gt;
    # @return nil
    def get_promotion_codes(*, active : Bool? = nil, code : String? = nil, coupon : String? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_promotion_codes(active: active, code: code, coupon: coupon, created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_promotion_codes(*, active : Bool? = nil, code : String? = nil, coupon : String? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_promotion_codes ..." }
      end
      if @api_client.config.client_side_validation && !code.nil? && code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"code\" when calling DefaultApi.get_promotion_codes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.get_promotion_codes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_promotion_codes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_promotion_codes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_promotion_codes, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/promotion_codes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["code"] = code.to_s if !code.nil?
      query_params["coupon"] = coupon.to_s if !coupon.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_promotion_codes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href=\"/docs/api/promotion_codes/list\">list</a> with the desired <code>code</code>.</p>
    # @param promotion_code [String]
    # @return [PromotionCode]
    def get_promotion_codes_promotion_code(*, promotion_code : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_promotion_codes_promotion_code_with_http_info(promotion_code: promotion_code, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing &lt;code&gt;code&lt;/code&gt; use &lt;a href&#x3D;\&quot;/docs/api/promotion_codes/list\&quot;&gt;list&lt;/a&gt; with the desired &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;
    # @param promotion_code [String]
    # @return [Array<(PromotionCode, Integer, Hash)>] PromotionCode data, response status code and response headers
    def get_promotion_codes_promotion_code_with_http_info(*, promotion_code : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_promotion_codes_promotion_code(promotion_code: promotion_code, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_promotion_codes_promotion_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PromotionCode.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing &lt;code&gt;code&lt;/code&gt; use &lt;a href&#x3D;\&quot;/docs/api/promotion_codes/list\&quot;&gt;list&lt;/a&gt; with the desired &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;
    # @param promotion_code [String]
    # @return nil
    def get_promotion_codes_promotion_code(*, promotion_code : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_promotion_codes_promotion_code(promotion_code: promotion_code, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_promotion_codes_promotion_code(*, promotion_code : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_promotion_codes_promotion_code ..." }
      end
      if @api_client.config.client_side_validation && promotion_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"promotion_code\" when calling DefaultApi.get_promotion_codes_promotion_code, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/promotion_codes/{promotion_code}".sub("{" + "promotion_code" + "}", URI.encode_path(promotion_code.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_promotion_codes_promotion_code",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your quotes.</p>
    # @return [GetQuotes200Response]
    def get_quotes(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, test_clock : String? = nil)
      data, _status_code, _headers = get_quotes_with_http_info(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, test_clock: test_clock)
      data
    end

    # &lt;p&gt;Returns a list of your quotes.&lt;/p&gt;
    # @return [Array<(GetQuotes200Response, Integer, Hash)>] GetQuotes200Response data, response status code and response headers
    def get_quotes_with_http_info(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, test_clock : String? = nil)
      request = build_api_request_for_get_quotes(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, test_clock: test_clock)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_quotes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetQuotes200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your quotes.&lt;/p&gt;
    # @return nil
    def get_quotes(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, test_clock : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_quotes(customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status, test_clock: test_clock).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_quotes(*, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, test_clock : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_quotes ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_quotes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_quotes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_quotes, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["accepted", "canceled", "draft", "open"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !test_clock.nil? && test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\" when calling DefaultApi.get_quotes, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["test_clock"] = test_clock.to_s if !test_clock.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_quotes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the quote with the given ID.</p>
    # @param quote [String]
    # @return [Quote]
    def get_quotes_quote(*, quote : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_quotes_quote_with_http_info(quote: quote, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the quote with the given ID.&lt;/p&gt;
    # @param quote [String]
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def get_quotes_quote_with_http_info(*, quote : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_quotes_quote(quote: quote, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_quotes_quote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Quote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the quote with the given ID.&lt;/p&gt;
    # @param quote [String]
    # @return nil
    def get_quotes_quote(*, quote : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_quotes_quote(quote: quote, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_quotes_quote(*, quote : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_quotes_quote ..." }
      end
      if @api_client.config.client_side_validation && quote.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"quote\" when calling DefaultApi.get_quotes_quote, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_quotes_quote",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a quote, there is an includable <a href=\"https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items\"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
    # @param quote [String]
    # @return [QuotesResourceListLineItems]
    def get_quotes_quote_computed_upfront_line_items(*, quote : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_quotes_quote_computed_upfront_line_items_with_http_info(quote: quote, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;When retrieving a quote, there is an includable &lt;a href&#x3D;\&quot;https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items\&quot;&gt;&lt;strong&gt;computed.upfront.line_items&lt;/strong&gt;&lt;/a&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.&lt;/p&gt;
    # @param quote [String]
    # @return [Array<(QuotesResourceListLineItems, Integer, Hash)>] QuotesResourceListLineItems data, response status code and response headers
    def get_quotes_quote_computed_upfront_line_items_with_http_info(*, quote : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_quotes_quote_computed_upfront_line_items(quote: quote, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_quotes_quote_computed_upfront_line_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return QuotesResourceListLineItems.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving a quote, there is an includable &lt;a href&#x3D;\&quot;https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items\&quot;&gt;&lt;strong&gt;computed.upfront.line_items&lt;/strong&gt;&lt;/a&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.&lt;/p&gt;
    # @param quote [String]
    # @return nil
    def get_quotes_quote_computed_upfront_line_items(*, quote : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_quotes_quote_computed_upfront_line_items(quote: quote, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_quotes_quote_computed_upfront_line_items(*, quote : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_quotes_quote_computed_upfront_line_items ..." }
      end
      if @api_client.config.client_side_validation && quote.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"quote\" when calling DefaultApi.get_quotes_quote_computed_upfront_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_quotes_quote_computed_upfront_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_quotes_quote_computed_upfront_line_items, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/computed_upfront_line_items".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_quotes_quote_computed_upfront_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @param quote [String]
    # @return [QuotesResourceListLineItems]
    def get_quotes_quote_line_items(*, quote : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_quotes_quote_line_items_with_http_info(quote: quote, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;When retrieving a quote, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param quote [String]
    # @return [Array<(QuotesResourceListLineItems, Integer, Hash)>] QuotesResourceListLineItems data, response status code and response headers
    def get_quotes_quote_line_items_with_http_info(*, quote : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_quotes_quote_line_items(quote: quote, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_quotes_quote_line_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return QuotesResourceListLineItems.from_json(data), status_code, headers
    end

    # &lt;p&gt;When retrieving a quote, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @param quote [String]
    # @return nil
    def get_quotes_quote_line_items(*, quote : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_quotes_quote_line_items(quote: quote, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_quotes_quote_line_items(*, quote : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_quotes_quote_line_items ..." }
      end
      if @api_client.config.client_side_validation && quote.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"quote\" when calling DefaultApi.get_quotes_quote_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_quotes_quote_line_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_quotes_quote_line_items, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/line_items".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_quotes_quote_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Download the PDF for a finalized quote</p>
    # @param quote [String]
    # @return [::File]
    def get_quotes_quote_pdf(*, quote : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_quotes_quote_pdf_with_http_info(quote: quote, expand: expand)
      data
    end

    # &lt;p&gt;Download the PDF for a finalized quote&lt;/p&gt;
    # @param quote [String]
    # @return [Array<(::File, Integer, Hash)>] ::File data, response status code and response headers
    def get_quotes_quote_pdf_with_http_info(*, quote : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_quotes_quote_pdf(quote: quote, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_quotes_quote_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ::File.from_json(data), status_code, headers
    end

    # &lt;p&gt;Download the PDF for a finalized quote&lt;/p&gt;
    # @param quote [String]
    # @return nil
    def get_quotes_quote_pdf(*, quote : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_quotes_quote_pdf(quote: quote, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_quotes_quote_pdf(*, quote : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_quotes_quote_pdf ..." }
      end
      if @api_client.config.client_side_validation && quote.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"quote\" when calling DefaultApi.get_quotes_quote_pdf, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/pdf".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/pdf", "application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_quotes_quote_pdf",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of early fraud warnings.</p>
    # @return [RadarEarlyFraudWarningList]
    def get_radar_early_fraud_warnings(*, charge : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_radar_early_fraud_warnings_with_http_info(charge: charge, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of early fraud warnings.&lt;/p&gt;
    # @return [Array<(RadarEarlyFraudWarningList, Integer, Hash)>] RadarEarlyFraudWarningList data, response status code and response headers
    def get_radar_early_fraud_warnings_with_http_info(*, charge : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_radar_early_fraud_warnings(charge: charge, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_radar_early_fraud_warnings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RadarEarlyFraudWarningList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of early fraud warnings.&lt;/p&gt;
    # @return nil
    def get_radar_early_fraud_warnings(*, charge : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_radar_early_fraud_warnings(charge: charge, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_radar_early_fraud_warnings(*, charge : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_radar_early_fraud_warnings ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_radar_early_fraud_warnings, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_intent.nil? && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.get_radar_early_fraud_warnings, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_radar_early_fraud_warnings, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/early_fraud_warnings"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_radar_early_fraud_warnings",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an early fraud warning that has previously been created. </p>  <p>Please refer to the <a href=\"#early_fraud_warning_object\">early fraud warning</a> object reference for more details.</p>
    # @param early_fraud_warning [String]
    # @return [RadarEarlyFraudWarning]
    def get_radar_early_fraud_warnings_early_fraud_warning(*, early_fraud_warning : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_radar_early_fraud_warnings_early_fraud_warning_with_http_info(early_fraud_warning: early_fraud_warning, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an early fraud warning that has previously been created. &lt;/p&gt;  &lt;p&gt;Please refer to the &lt;a href&#x3D;\&quot;#early_fraud_warning_object\&quot;&gt;early fraud warning&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @param early_fraud_warning [String]
    # @return [Array<(RadarEarlyFraudWarning, Integer, Hash)>] RadarEarlyFraudWarning data, response status code and response headers
    def get_radar_early_fraud_warnings_early_fraud_warning_with_http_info(*, early_fraud_warning : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_radar_early_fraud_warnings_early_fraud_warning(early_fraud_warning: early_fraud_warning, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_radar_early_fraud_warnings_early_fraud_warning\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RadarEarlyFraudWarning.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an early fraud warning that has previously been created. &lt;/p&gt;  &lt;p&gt;Please refer to the &lt;a href&#x3D;\&quot;#early_fraud_warning_object\&quot;&gt;early fraud warning&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @param early_fraud_warning [String]
    # @return nil
    def get_radar_early_fraud_warnings_early_fraud_warning(*, early_fraud_warning : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_radar_early_fraud_warnings_early_fraud_warning(early_fraud_warning: early_fraud_warning, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_radar_early_fraud_warnings_early_fraud_warning(*, early_fraud_warning : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_radar_early_fraud_warnings_early_fraud_warning ..." }
      end
      if @api_client.config.client_side_validation && early_fraud_warning.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"early_fraud_warning\" when calling DefaultApi.get_radar_early_fraud_warnings_early_fraud_warning, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/early_fraud_warnings/{early_fraud_warning}".sub("{" + "early_fraud_warning" + "}", URI.encode_path(early_fraud_warning.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_radar_early_fraud_warnings_early_fraud_warning",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @param value_list [String] Identifier for the parent value list this item belongs to.
    # @return [GetRadarValueListItems200Response]
    def get_radar_value_list_items(*, value_list : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, value : String? = nil)
      data, _status_code, _headers = get_radar_value_list_items_with_http_info(value_list: value_list, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, value: value)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;ValueListItem&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @param value_list [String] Identifier for the parent value list this item belongs to.
    # @return [Array<(GetRadarValueListItems200Response, Integer, Hash)>] GetRadarValueListItems200Response data, response status code and response headers
    def get_radar_value_list_items_with_http_info(*, value_list : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, value : String? = nil)
      request = build_api_request_for_get_radar_value_list_items(value_list: value_list, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, value: value)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_radar_value_list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetRadarValueListItems200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;ValueListItem&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @param value_list [String] Identifier for the parent value list this item belongs to.
    # @return nil
    def get_radar_value_list_items(*, value_list : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, value : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_radar_value_list_items(value_list: value_list, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, value: value).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_radar_value_list_items(*, value_list : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, value : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_radar_value_list_items ..." }
      end
      if @api_client.config.client_side_validation && value_list.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"value_list\" when calling DefaultApi.get_radar_value_list_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_radar_value_list_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_radar_value_list_items, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !value.nil? && value.to_s.size > 800
        raise ArgumentError.new("invalid value for \"value\" when calling DefaultApi.get_radar_value_list_items, the character length must be smaller than or equal to 800.")
      end

      # resource path
      local_var_path = "/v1/radar/value_list_items"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["value"] = value.to_s if !value.nil?
      query_params["value_list"] = value_list.to_s if !value_list.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_radar_value_list_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>ValueListItem</code> object.</p>
    # @param item [String]
    # @return [RadarValueListItem]
    def get_radar_value_list_items_item(*, item : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_radar_value_list_items_item_with_http_info(item: item, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;ValueListItem&lt;/code&gt; object.&lt;/p&gt;
    # @param item [String]
    # @return [Array<(RadarValueListItem, Integer, Hash)>] RadarValueListItem data, response status code and response headers
    def get_radar_value_list_items_item_with_http_info(*, item : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_radar_value_list_items_item(item: item, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_radar_value_list_items_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RadarValueListItem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;ValueListItem&lt;/code&gt; object.&lt;/p&gt;
    # @param item [String]
    # @return nil
    def get_radar_value_list_items_item(*, item : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_radar_value_list_items_item(item: item, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_radar_value_list_items_item(*, item : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_radar_value_list_items_item ..." }
      end
      if @api_client.config.client_side_validation && item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"item\" when calling DefaultApi.get_radar_value_list_items_item, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/value_list_items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_radar_value_list_items_item",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @return [GetRadarValueLists200Response]
    def get_radar_value_lists(*, _alias : String? = nil, contains : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_radar_value_lists_with_http_info(_alias: _alias, contains: contains, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;ValueList&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return [Array<(GetRadarValueLists200Response, Integer, Hash)>] GetRadarValueLists200Response data, response status code and response headers
    def get_radar_value_lists_with_http_info(*, _alias : String? = nil, contains : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_radar_value_lists(_alias: _alias, contains: contains, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_radar_value_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetRadarValueLists200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;ValueList&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return nil
    def get_radar_value_lists(*, _alias : String? = nil, contains : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_radar_value_lists(_alias: _alias, contains: contains, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_radar_value_lists(*, _alias : String? = nil, contains : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_radar_value_lists ..." }
      end
      if @api_client.config.client_side_validation && !_alias.nil? && _alias.to_s.size > 100
        raise ArgumentError.new("invalid value for \"_alias\" when calling DefaultApi.get_radar_value_lists, the character length must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !contains.nil? && contains.to_s.size > 800
        raise ArgumentError.new("invalid value for \"contains\" when calling DefaultApi.get_radar_value_lists, the character length must be smaller than or equal to 800.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_radar_value_lists, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_radar_value_lists, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/value_lists"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alias"] = _alias.to_s if !_alias.nil?
      query_params["contains"] = contains.to_s if !contains.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_radar_value_lists",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>ValueList</code> object.</p>
    # @param value_list [String]
    # @return [RadarValueList]
    def get_radar_value_lists_value_list(*, value_list : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_radar_value_lists_value_list_with_http_info(value_list: value_list, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;ValueList&lt;/code&gt; object.&lt;/p&gt;
    # @param value_list [String]
    # @return [Array<(RadarValueList, Integer, Hash)>] RadarValueList data, response status code and response headers
    def get_radar_value_lists_value_list_with_http_info(*, value_list : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_radar_value_lists_value_list(value_list: value_list, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_radar_value_lists_value_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RadarValueList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;ValueList&lt;/code&gt; object.&lt;/p&gt;
    # @param value_list [String]
    # @return nil
    def get_radar_value_lists_value_list(*, value_list : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_radar_value_lists_value_list(value_list: value_list, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_radar_value_lists_value_list(*, value_list : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_radar_value_lists_value_list ..." }
      end
      if @api_client.config.client_side_validation && value_list.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"value_list\" when calling DefaultApi.get_radar_value_lists_value_list, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/value_lists/{value_list}".sub("{" + "value_list" + "}", URI.encode_path(value_list.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_radar_value_lists_value_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p>
    # @return [GetRecipients200Response]
    def get_recipients(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, verified : Bool? = nil)
      data, _status_code, _headers = get_recipients_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, verified: verified)
      data
    end

    # &lt;p&gt;Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.&lt;/p&gt;
    # @return [Array<(GetRecipients200Response, Integer, Hash)>] GetRecipients200Response data, response status code and response headers
    def get_recipients_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, verified : Bool? = nil)
      request = build_api_request_for_get_recipients(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, verified: verified)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_recipients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetRecipients200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.&lt;/p&gt;
    # @return nil
    def get_recipients(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, verified : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_get_recipients(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, _type: _type, verified: verified).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_recipients(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, _type : String? = nil, verified : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_recipients ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_recipients, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_recipients, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["corporation", "individual"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !_type.nil? && _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\" when calling DefaultApi.get_recipients, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/recipients"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["type"] = _type.to_s if !_type.nil?
      query_params["verified"] = verified.to_s if !verified.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_recipients",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p>
    # @param id [String]
    # @return [GetRecipientsId200Response]
    def get_recipients_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_recipients_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(GetRecipientsId200Response, Integer, Hash)>] GetRecipientsId200Response data, response status code and response headers
    def get_recipients_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_recipients_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_recipients_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetRecipientsId200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_recipients_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_recipients_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_recipients_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_recipients_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/recipients/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_recipients_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p>
    # @return [GetRefunds200Response]
    def get_refunds(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_refunds_with_http_info(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.&lt;/p&gt;
    # @return [Array<(GetRefunds200Response, Integer, Hash)>] GetRefunds200Response data, response status code and response headers
    def get_refunds_with_http_info(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_refunds(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetRefunds200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.&lt;/p&gt;
    # @return nil
    def get_refunds(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_refunds(charge: charge, created: created, ending_before: ending_before, expand: expand, limit: limit, payment_intent: payment_intent, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_refunds(*, charge : String? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_intent : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_refunds ..." }
      end
      if @api_client.config.client_side_validation && !payment_intent.nil? && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.get_refunds, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/refunds"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["charge"] = charge.to_s if !charge.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing refund.</p>
    # @param refund [String]
    # @return [Refund]
    def get_refunds_refund(*, refund : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_refunds_refund_with_http_info(refund: refund, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
    # @param refund [String]
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def get_refunds_refund_with_http_info(*, refund : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_refunds_refund(refund: refund, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_refunds_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Refund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
    # @param refund [String]
    # @return nil
    def get_refunds_refund(*, refund : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_refunds_refund(refund: refund, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_refunds_refund(*, refund : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_refunds_refund ..." }
      end
      # resource path
      local_var_path = "/v1/refunds/{refund}".sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_refunds_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of Report Runs, with the most recent appearing first.</p>
    # @return [GetReportingReportRuns200Response]
    def get_reporting_report_runs(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_reporting_report_runs_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of Report Runs, with the most recent appearing first.&lt;/p&gt;
    # @return [Array<(GetReportingReportRuns200Response, Integer, Hash)>] GetReportingReportRuns200Response data, response status code and response headers
    def get_reporting_report_runs_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_reporting_report_runs(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_reporting_report_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetReportingReportRuns200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of Report Runs, with the most recent appearing first.&lt;/p&gt;
    # @return nil
    def get_reporting_report_runs(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_reporting_report_runs(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_reporting_report_runs(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_reporting_report_runs ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_reporting_report_runs, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_reporting_report_runs, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/reporting/report_runs"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_reporting_report_runs",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing Report Run.</p>
    # @param report_run [String]
    # @return [ReportingReportRun]
    def get_reporting_report_runs_report_run(*, report_run : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_reporting_report_runs_report_run_with_http_info(report_run: report_run, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing Report Run.&lt;/p&gt;
    # @param report_run [String]
    # @return [Array<(ReportingReportRun, Integer, Hash)>] ReportingReportRun data, response status code and response headers
    def get_reporting_report_runs_report_run_with_http_info(*, report_run : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_reporting_report_runs_report_run(report_run: report_run, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_reporting_report_runs_report_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ReportingReportRun.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing Report Run.&lt;/p&gt;
    # @param report_run [String]
    # @return nil
    def get_reporting_report_runs_report_run(*, report_run : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_reporting_report_runs_report_run(report_run: report_run, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_reporting_report_runs_report_run(*, report_run : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_reporting_report_runs_report_run ..." }
      end
      if @api_client.config.client_side_validation && report_run.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"report_run\" when calling DefaultApi.get_reporting_report_runs_report_run, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/reporting/report_runs/{report_run}".sub("{" + "report_run" + "}", URI.encode_path(report_run.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_reporting_report_runs_report_run",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a full list of Report Types.</p>
    # @return [FinancialReportingFinanceReportTypeList]
    def get_reporting_report_types(*, expand : Array(String)? = nil)
      data, _status_code, _headers = get_reporting_report_types_with_http_info(expand: expand)
      data
    end

    # &lt;p&gt;Returns a full list of Report Types.&lt;/p&gt;
    # @return [Array<(FinancialReportingFinanceReportTypeList, Integer, Hash)>] FinancialReportingFinanceReportTypeList data, response status code and response headers
    def get_reporting_report_types_with_http_info(*, expand : Array(String)? = nil)
      request = build_api_request_for_get_reporting_report_types(expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_reporting_report_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialReportingFinanceReportTypeList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a full list of Report Types.&lt;/p&gt;
    # @return nil
    def get_reporting_report_types(*, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_reporting_report_types(expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_reporting_report_types(*, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_reporting_report_types ..." }
      end
      # resource path
      local_var_path = "/v1/reporting/report_types"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_reporting_report_types",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a Report Type. (Certain report types require a <a href=\"https://stripe.com/docs/keys#test-live-modes\">live-mode API key</a>.)</p>
    # @param report_type [String]
    # @return [ReportingReportType]
    def get_reporting_report_types_report_type(*, report_type : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_reporting_report_types_report_type_with_http_info(report_type: report_type, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a Report Type. (Certain report types require a &lt;a href&#x3D;\&quot;https://stripe.com/docs/keys#test-live-modes\&quot;&gt;live-mode API key&lt;/a&gt;.)&lt;/p&gt;
    # @param report_type [String]
    # @return [Array<(ReportingReportType, Integer, Hash)>] ReportingReportType data, response status code and response headers
    def get_reporting_report_types_report_type_with_http_info(*, report_type : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_reporting_report_types_report_type(report_type: report_type, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_reporting_report_types_report_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ReportingReportType.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a Report Type. (Certain report types require a &lt;a href&#x3D;\&quot;https://stripe.com/docs/keys#test-live-modes\&quot;&gt;live-mode API key&lt;/a&gt;.)&lt;/p&gt;
    # @param report_type [String]
    # @return nil
    def get_reporting_report_types_report_type(*, report_type : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_reporting_report_types_report_type(report_type: report_type, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_reporting_report_types_report_type(*, report_type : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_reporting_report_types_report_type ..." }
      end
      # resource path
      local_var_path = "/v1/reporting/report_types/{report_type}".sub("{" + "report_type" + "}", URI.encode_path(report_type.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_reporting_report_types_report_type",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
    # @return [GetReviews200Response]
    def get_reviews(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_reviews_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Review&lt;/code&gt; objects that have &lt;code&gt;open&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return [Array<(GetReviews200Response, Integer, Hash)>] GetReviews200Response data, response status code and response headers
    def get_reviews_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_reviews(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetReviews200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Review&lt;/code&gt; objects that have &lt;code&gt;open&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
    # @return nil
    def get_reviews(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_reviews(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_reviews(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_reviews ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_reviews, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_reviews, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/reviews"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_reviews",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Review</code> object.</p>
    # @param review [String]
    # @return [Review]
    def get_reviews_review(*, review : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_reviews_review_with_http_info(review: review, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Review&lt;/code&gt; object.&lt;/p&gt;
    # @param review [String]
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def get_reviews_review_with_http_info(*, review : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_reviews_review(review: review, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_reviews_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Review.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Review&lt;/code&gt; object.&lt;/p&gt;
    # @param review [String]
    # @return nil
    def get_reviews_review(*, review : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_reviews_review(review: review, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_reviews_review(*, review : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_reviews_review ..." }
      end
      if @api_client.config.client_side_validation && review.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"review\" when calling DefaultApi.get_reviews_review, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/reviews/{review}".sub("{" + "review" + "}", URI.encode_path(review.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_reviews_review",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of SetupAttempts associated with a provided SetupIntent.</p>
    # @param setup_intent [String] Only return SetupAttempts created by the SetupIntent specified by this ID.
    # @return [PaymentFlowsSetupIntentSetupAttemptList]
    def get_setup_attempts(*, setup_intent : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_setup_attempts_with_http_info(setup_intent: setup_intent, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of SetupAttempts associated with a provided SetupIntent.&lt;/p&gt;
    # @param setup_intent [String] Only return SetupAttempts created by the SetupIntent specified by this ID.
    # @return [Array<(PaymentFlowsSetupIntentSetupAttemptList, Integer, Hash)>] PaymentFlowsSetupIntentSetupAttemptList data, response status code and response headers
    def get_setup_attempts_with_http_info(*, setup_intent : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_setup_attempts(setup_intent: setup_intent, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_setup_attempts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentFlowsSetupIntentSetupAttemptList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of SetupAttempts associated with a provided SetupIntent.&lt;/p&gt;
    # @param setup_intent [String] Only return SetupAttempts created by the SetupIntent specified by this ID.
    # @return nil
    def get_setup_attempts(*, setup_intent : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_setup_attempts(setup_intent: setup_intent, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_setup_attempts(*, setup_intent : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_setup_attempts ..." }
      end
      if @api_client.config.client_side_validation && setup_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"setup_intent\" when calling DefaultApi.get_setup_attempts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_setup_attempts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_setup_attempts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/setup_attempts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["setup_intent"] = setup_intent.to_s if !setup_intent.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_setup_attempts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of SetupIntents.</p>
    # @return [PaymentFlowsSetupIntentList]
    def get_setup_intents(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_method : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_setup_intents_with_http_info(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, payment_method: payment_method, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of SetupIntents.&lt;/p&gt;
    # @return [Array<(PaymentFlowsSetupIntentList, Integer, Hash)>] PaymentFlowsSetupIntentList data, response status code and response headers
    def get_setup_intents_with_http_info(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_method : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_setup_intents(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, payment_method: payment_method, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_setup_intents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentFlowsSetupIntentList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of SetupIntents.&lt;/p&gt;
    # @return nil
    def get_setup_intents(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_method : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_setup_intents(created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, payment_method: payment_method, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_setup_intents(*, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, payment_method : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_setup_intents ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_setup_intents, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_setup_intents, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.get_setup_intents, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_setup_intents, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/setup_intents"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_setup_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a SetupIntent that has previously been created. </p>  <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>  <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href=\"#setup_intent_object\">SetupIntent</a> object reference for more details.</p>
    # @param intent [String]
    # @return [SetupIntent]
    def get_setup_intents_intent(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = get_setup_intents_intent_with_http_info(intent: intent, client_secret: client_secret, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a SetupIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#setup_intent_object\&quot;&gt;SetupIntent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(SetupIntent, Integer, Hash)>] SetupIntent data, response status code and response headers
    def get_setup_intents_intent_with_http_info(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_get_setup_intents_intent(intent: intent, client_secret: client_secret, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_setup_intents_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SetupIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a SetupIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#setup_intent_object\&quot;&gt;SetupIntent&lt;/a&gt; object reference for more details.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def get_setup_intents_intent(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_setup_intents_intent(intent: intent, client_secret: client_secret, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_setup_intents_intent(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_setup_intents_intent ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.get_setup_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !client_secret.nil? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\" when calling DefaultApi.get_setup_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_setup_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your shipping rates.</p>
    # @return [ShippingResourcesShippingRateList]
    def get_shipping_rates(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_shipping_rates_with_http_info(active: active, created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your shipping rates.&lt;/p&gt;
    # @return [Array<(ShippingResourcesShippingRateList, Integer, Hash)>] ShippingResourcesShippingRateList data, response status code and response headers
    def get_shipping_rates_with_http_info(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_shipping_rates(active: active, created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_shipping_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ShippingResourcesShippingRateList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your shipping rates.&lt;/p&gt;
    # @return nil
    def get_shipping_rates(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_shipping_rates(active: active, created: created, currency: currency, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_shipping_rates(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, currency : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_shipping_rates ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_shipping_rates, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_shipping_rates, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/shipping_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_shipping_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns the shipping rate object with the given ID.</p>
    # @param shipping_rate_token [String]
    # @return [ShippingRate]
    def get_shipping_rates_shipping_rate_token(*, shipping_rate_token : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_shipping_rates_shipping_rate_token_with_http_info(shipping_rate_token: shipping_rate_token, expand: expand)
      data
    end

    # &lt;p&gt;Returns the shipping rate object with the given ID.&lt;/p&gt;
    # @param shipping_rate_token [String]
    # @return [Array<(ShippingRate, Integer, Hash)>] ShippingRate data, response status code and response headers
    def get_shipping_rates_shipping_rate_token_with_http_info(*, shipping_rate_token : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_shipping_rates_shipping_rate_token(shipping_rate_token: shipping_rate_token, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_shipping_rates_shipping_rate_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ShippingRate.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns the shipping rate object with the given ID.&lt;/p&gt;
    # @param shipping_rate_token [String]
    # @return nil
    def get_shipping_rates_shipping_rate_token(*, shipping_rate_token : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_shipping_rates_shipping_rate_token(shipping_rate_token: shipping_rate_token, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_shipping_rates_shipping_rate_token(*, shipping_rate_token : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_shipping_rates_shipping_rate_token ..." }
      end
      if @api_client.config.client_side_validation && shipping_rate_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_rate_token\" when calling DefaultApi.get_shipping_rates_shipping_rate_token, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/shipping_rates/{shipping_rate_token}".sub("{" + "shipping_rate_token" + "}", URI.encode_path(shipping_rate_token.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_shipping_rates_shipping_rate_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of scheduled query runs.</p>
    # @return [GetSigmaScheduledQueryRuns200Response]
    def get_sigma_scheduled_query_runs(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_sigma_scheduled_query_runs_with_http_info(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of scheduled query runs.&lt;/p&gt;
    # @return [Array<(GetSigmaScheduledQueryRuns200Response, Integer, Hash)>] GetSigmaScheduledQueryRuns200Response data, response status code and response headers
    def get_sigma_scheduled_query_runs_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_sigma_scheduled_query_runs(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_sigma_scheduled_query_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetSigmaScheduledQueryRuns200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of scheduled query runs.&lt;/p&gt;
    # @return nil
    def get_sigma_scheduled_query_runs(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_sigma_scheduled_query_runs(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_sigma_scheduled_query_runs(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_sigma_scheduled_query_runs ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_sigma_scheduled_query_runs, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_sigma_scheduled_query_runs, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sigma/scheduled_query_runs"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_sigma_scheduled_query_runs",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an scheduled query run.</p>
    # @param scheduled_query_run [String]
    # @return [ScheduledQueryRun]
    def get_sigma_scheduled_query_runs_scheduled_query_run(*, scheduled_query_run : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_sigma_scheduled_query_runs_scheduled_query_run_with_http_info(scheduled_query_run: scheduled_query_run, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an scheduled query run.&lt;/p&gt;
    # @param scheduled_query_run [String]
    # @return [Array<(ScheduledQueryRun, Integer, Hash)>] ScheduledQueryRun data, response status code and response headers
    def get_sigma_scheduled_query_runs_scheduled_query_run_with_http_info(*, scheduled_query_run : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_sigma_scheduled_query_runs_scheduled_query_run(scheduled_query_run: scheduled_query_run, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_sigma_scheduled_query_runs_scheduled_query_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ScheduledQueryRun.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an scheduled query run.&lt;/p&gt;
    # @param scheduled_query_run [String]
    # @return nil
    def get_sigma_scheduled_query_runs_scheduled_query_run(*, scheduled_query_run : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_sigma_scheduled_query_runs_scheduled_query_run(scheduled_query_run: scheduled_query_run, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_sigma_scheduled_query_runs_scheduled_query_run(*, scheduled_query_run : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_sigma_scheduled_query_runs_scheduled_query_run ..." }
      end
      if @api_client.config.client_side_validation && scheduled_query_run.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"scheduled_query_run\" when calling DefaultApi.get_sigma_scheduled_query_runs_scheduled_query_run, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sigma/scheduled_query_runs/{scheduled_query_run}".sub("{" + "scheduled_query_run" + "}", URI.encode_path(scheduled_query_run.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_sigma_scheduled_query_runs_scheduled_query_run",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>
    # @return [GetSkus200Response]
    def get_skus(*, active : Bool? = nil, attributes : Hash(String, String)? = nil, ending_before : String? = nil, expand : Array(String)? = nil, ids : Array(String)? = nil, in_stock : Bool? = nil, limit : Int64? = nil, product : String? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_skus_with_http_info(active: active, attributes: attributes, ending_before: ending_before, expand: expand, ids: ids, in_stock: in_stock, limit: limit, product: product, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.&lt;/p&gt;
    # @return [Array<(GetSkus200Response, Integer, Hash)>] GetSkus200Response data, response status code and response headers
    def get_skus_with_http_info(*, active : Bool? = nil, attributes : Hash(String, String)? = nil, ending_before : String? = nil, expand : Array(String)? = nil, ids : Array(String)? = nil, in_stock : Bool? = nil, limit : Int64? = nil, product : String? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_skus(active: active, attributes: attributes, ending_before: ending_before, expand: expand, ids: ids, in_stock: in_stock, limit: limit, product: product, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_skus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetSkus200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.&lt;/p&gt;
    # @return nil
    def get_skus(*, active : Bool? = nil, attributes : Hash(String, String)? = nil, ending_before : String? = nil, expand : Array(String)? = nil, ids : Array(String)? = nil, in_stock : Bool? = nil, limit : Int64? = nil, product : String? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_skus(active: active, attributes: attributes, ending_before: ending_before, expand: expand, ids: ids, in_stock: in_stock, limit: limit, product: product, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_skus(*, active : Bool? = nil, attributes : Hash(String, String)? = nil, ending_before : String? = nil, expand : Array(String)? = nil, ids : Array(String)? = nil, in_stock : Bool? = nil, limit : Int64? = nil, product : String? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_skus ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_skus, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !product.nil? && product.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product\" when calling DefaultApi.get_skus, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_skus, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/skus"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["attributes"] = attributes.to_s if !attributes.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["ids"] = @api_client.build_collection_param(ids, "csv") if !ids.nil? && !ids.empty?
      query_params["in_stock"] = in_stock.to_s if !in_stock.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["product"] = product.to_s if !product.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_skus",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p>
    # @param id [String]
    # @return [GetSkusId200Response]
    def get_skus_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_skus_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(GetSkusId200Response, Integer, Hash)>] GetSkusId200Response data, response status code and response headers
    def get_skus_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_skus_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_skus_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetSkusId200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_skus_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_skus_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_skus_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_skus_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_skus_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/skus/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_skus_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
    # @param source [String]
    # @return [Source]
    def get_sources_source(*, source : String, client_secret : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = get_sources_source_with_http_info(source: source, client_secret: client_secret, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
    # @param source [String]
    # @return [Array<(Source, Integer, Hash)>] Source data, response status code and response headers
    def get_sources_source_with_http_info(*, source : String, client_secret : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_get_sources_source(source: source, client_secret: client_secret, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_sources_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Source.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
    # @param source [String]
    # @return nil
    def get_sources_source(*, source : String, client_secret : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_sources_source(source: source, client_secret: client_secret, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_sources_source(*, source : String, client_secret : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_sources_source ..." }
      end
      if @api_client.config.client_side_validation && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.get_sources_source, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !client_secret.nil? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\" when calling DefaultApi.get_sources_source, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sources/{source}".sub("{" + "source" + "}", URI.encode_path(source.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_sources_source",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a new Source MandateNotification.</p>
    # @param mandate_notification [String]
    # @param source [String]
    # @return [SourceMandateNotification]
    def get_sources_source_mandate_notifications_mandate_notification(*, mandate_notification : String, source : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_sources_source_mandate_notifications_mandate_notification_with_http_info(mandate_notification: mandate_notification, source: source, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a new Source MandateNotification.&lt;/p&gt;
    # @param mandate_notification [String]
    # @param source [String]
    # @return [Array<(SourceMandateNotification, Integer, Hash)>] SourceMandateNotification data, response status code and response headers
    def get_sources_source_mandate_notifications_mandate_notification_with_http_info(*, mandate_notification : String, source : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_sources_source_mandate_notifications_mandate_notification(mandate_notification: mandate_notification, source: source, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_sources_source_mandate_notifications_mandate_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SourceMandateNotification.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a new Source MandateNotification.&lt;/p&gt;
    # @param mandate_notification [String]
    # @param source [String]
    # @return nil
    def get_sources_source_mandate_notifications_mandate_notification(*, mandate_notification : String, source : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_sources_source_mandate_notifications_mandate_notification(mandate_notification: mandate_notification, source: source, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_sources_source_mandate_notifications_mandate_notification(*, mandate_notification : String, source : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_sources_source_mandate_notifications_mandate_notification ..." }
      end
      if @api_client.config.client_side_validation && mandate_notification.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"mandate_notification\" when calling DefaultApi.get_sources_source_mandate_notifications_mandate_notification, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.get_sources_source_mandate_notifications_mandate_notification, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sources/{source}/mandate_notifications/{mandate_notification}".sub("{" + "mandate_notification" + "}", URI.encode_path(mandate_notification.to_s)).sub("{" + "source" + "}", URI.encode_path(source.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_sources_source_mandate_notifications_mandate_notification",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>List source transactions for a given source.</p>
    # @param source [String]
    # @return [ApmsSourcesSourceTransactionList]
    def get_sources_source_source_transactions(*, source : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_sources_source_source_transactions_with_http_info(source: source, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;List source transactions for a given source.&lt;/p&gt;
    # @param source [String]
    # @return [Array<(ApmsSourcesSourceTransactionList, Integer, Hash)>] ApmsSourcesSourceTransactionList data, response status code and response headers
    def get_sources_source_source_transactions_with_http_info(*, source : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_sources_source_source_transactions(source: source, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_sources_source_source_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ApmsSourcesSourceTransactionList.from_json(data), status_code, headers
    end

    # &lt;p&gt;List source transactions for a given source.&lt;/p&gt;
    # @param source [String]
    # @return nil
    def get_sources_source_source_transactions(*, source : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_sources_source_source_transactions(source: source, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_sources_source_source_transactions(*, source : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_sources_source_source_transactions ..." }
      end
      if @api_client.config.client_side_validation && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.get_sources_source_source_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_sources_source_source_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_sources_source_source_transactions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sources/{source}/source_transactions".sub("{" + "source" + "}", URI.encode_path(source.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_sources_source_source_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
    # @param source [String]
    # @param source_transaction [String]
    # @return [SourceTransaction]
    def get_sources_source_source_transactions_source_transaction(*, source : String, source_transaction : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_sources_source_source_transactions_source_transaction_with_http_info(source: source, source_transaction: source_transaction, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
    # @param source [String]
    # @param source_transaction [String]
    # @return [Array<(SourceTransaction, Integer, Hash)>] SourceTransaction data, response status code and response headers
    def get_sources_source_source_transactions_source_transaction_with_http_info(*, source : String, source_transaction : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_sources_source_source_transactions_source_transaction(source: source, source_transaction: source_transaction, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_sources_source_source_transactions_source_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SourceTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
    # @param source [String]
    # @param source_transaction [String]
    # @return nil
    def get_sources_source_source_transactions_source_transaction(*, source : String, source_transaction : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_sources_source_source_transactions_source_transaction(source: source, source_transaction: source_transaction, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_sources_source_source_transactions_source_transaction(*, source : String, source_transaction : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_sources_source_source_transactions_source_transaction ..." }
      end
      if @api_client.config.client_side_validation && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.get_sources_source_source_transactions_source_transaction, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && source_transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_transaction\" when calling DefaultApi.get_sources_source_source_transactions_source_transaction, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sources/{source}/source_transactions/{source_transaction}".sub("{" + "source" + "}", URI.encode_path(source.to_s)).sub("{" + "source_transaction" + "}", URI.encode_path(source_transaction.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_sources_source_source_transactions_source_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your subscription items for a given subscription.</p>
    # @param subscription [String] The ID of the subscription whose items will be retrieved.
    # @return [GetSubscriptionItems200Response]
    def get_subscription_items(*, subscription : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_subscription_items_with_http_info(subscription: subscription, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your subscription items for a given subscription.&lt;/p&gt;
    # @param subscription [String] The ID of the subscription whose items will be retrieved.
    # @return [Array<(GetSubscriptionItems200Response, Integer, Hash)>] GetSubscriptionItems200Response data, response status code and response headers
    def get_subscription_items_with_http_info(*, subscription : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_subscription_items(subscription: subscription, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_subscription_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetSubscriptionItems200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your subscription items for a given subscription.&lt;/p&gt;
    # @param subscription [String] The ID of the subscription whose items will be retrieved.
    # @return nil
    def get_subscription_items(*, subscription : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_subscription_items(subscription: subscription, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_subscription_items(*, subscription : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_subscription_items ..." }
      end
      if @api_client.config.client_side_validation && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\" when calling DefaultApi.get_subscription_items, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscription_items"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_subscription_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the subscription item with the given ID.</p>
    # @param item [String]
    # @return [SubscriptionItem]
    def get_subscription_items_item(*, item : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_subscription_items_item_with_http_info(item: item, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the subscription item with the given ID.&lt;/p&gt;
    # @param item [String]
    # @return [Array<(SubscriptionItem, Integer, Hash)>] SubscriptionItem data, response status code and response headers
    def get_subscription_items_item_with_http_info(*, item : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_subscription_items_item(item: item, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_subscription_items_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionItem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the subscription item with the given ID.&lt;/p&gt;
    # @param item [String]
    # @return nil
    def get_subscription_items_item(*, item : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_subscription_items_item(item: item, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_subscription_items_item(*, item : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_subscription_items_item ..." }
      end
      if @api_client.config.client_side_validation && item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"item\" when calling DefaultApi.get_subscription_items_item, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscription_items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_subscription_items_item",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>  <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
    # @param subscription_item [String]
    # @return [GetSubscriptionItemsSubscriptionItemUsageRecordSummaries200Response]
    def get_subscription_items_subscription_item_usage_record_summaries(*, subscription_item : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_subscription_items_subscription_item_usage_record_summaries_with_http_info(subscription_item: subscription_item, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).&lt;/p&gt;  &lt;p&gt;The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.&lt;/p&gt;
    # @param subscription_item [String]
    # @return [Array<(GetSubscriptionItemsSubscriptionItemUsageRecordSummaries200Response, Integer, Hash)>] GetSubscriptionItemsSubscriptionItemUsageRecordSummaries200Response data, response status code and response headers
    def get_subscription_items_subscription_item_usage_record_summaries_with_http_info(*, subscription_item : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_subscription_items_subscription_item_usage_record_summaries(subscription_item: subscription_item, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_subscription_items_subscription_item_usage_record_summaries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetSubscriptionItemsSubscriptionItemUsageRecordSummaries200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).&lt;/p&gt;  &lt;p&gt;The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.&lt;/p&gt;
    # @param subscription_item [String]
    # @return nil
    def get_subscription_items_subscription_item_usage_record_summaries(*, subscription_item : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_subscription_items_subscription_item_usage_record_summaries(subscription_item: subscription_item, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_subscription_items_subscription_item_usage_record_summaries(*, subscription_item : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_subscription_items_subscription_item_usage_record_summaries ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_subscription_items_subscription_item_usage_record_summaries, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_subscription_items_subscription_item_usage_record_summaries, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscription_items/{subscription_item}/usage_record_summaries".sub("{" + "subscription_item" + "}", URI.encode_path(subscription_item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_subscription_items_subscription_item_usage_record_summaries",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the list of your subscription schedules.</p>
    # @return [GetSubscriptionSchedules200Response]
    def get_subscription_schedules(*, canceled_at : GetAccountsCreatedParameter? = nil, completed_at : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, released_at : GetAccountsCreatedParameter? = nil, scheduled : Bool? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_subscription_schedules_with_http_info(canceled_at: canceled_at, completed_at: completed_at, created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, released_at: released_at, scheduled: scheduled, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Retrieves the list of your subscription schedules.&lt;/p&gt;
    # @return [Array<(GetSubscriptionSchedules200Response, Integer, Hash)>] GetSubscriptionSchedules200Response data, response status code and response headers
    def get_subscription_schedules_with_http_info(*, canceled_at : GetAccountsCreatedParameter? = nil, completed_at : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, released_at : GetAccountsCreatedParameter? = nil, scheduled : Bool? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_subscription_schedules(canceled_at: canceled_at, completed_at: completed_at, created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, released_at: released_at, scheduled: scheduled, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_subscription_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetSubscriptionSchedules200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the list of your subscription schedules.&lt;/p&gt;
    # @return nil
    def get_subscription_schedules(*, canceled_at : GetAccountsCreatedParameter? = nil, completed_at : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, released_at : GetAccountsCreatedParameter? = nil, scheduled : Bool? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_subscription_schedules(canceled_at: canceled_at, completed_at: completed_at, created: created, customer: customer, ending_before: ending_before, expand: expand, limit: limit, released_at: released_at, scheduled: scheduled, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_subscription_schedules(*, canceled_at : GetAccountsCreatedParameter? = nil, completed_at : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, released_at : GetAccountsCreatedParameter? = nil, scheduled : Bool? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_subscription_schedules ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_subscription_schedules, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_subscription_schedules, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_subscription_schedules, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscription_schedules"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["canceled_at"] = canceled_at.to_s if !canceled_at.nil?
      query_params["completed_at"] = completed_at.to_s if !completed_at.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["released_at"] = released_at.to_s if !released_at.nil?
      query_params["scheduled"] = scheduled.to_s if !scheduled.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_subscription_schedules",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
    # @param schedule [String]
    # @return [SubscriptionSchedule]
    def get_subscription_schedules_schedule(*, schedule : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_subscription_schedules_schedule_with_http_info(schedule: schedule, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.&lt;/p&gt;
    # @param schedule [String]
    # @return [Array<(SubscriptionSchedule, Integer, Hash)>] SubscriptionSchedule data, response status code and response headers
    def get_subscription_schedules_schedule_with_http_info(*, schedule : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_subscription_schedules_schedule(schedule: schedule, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_subscription_schedules_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionSchedule.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.&lt;/p&gt;
    # @param schedule [String]
    # @return nil
    def get_subscription_schedules_schedule(*, schedule : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_subscription_schedules_schedule(schedule: schedule, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_subscription_schedules_schedule(*, schedule : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_subscription_schedules_schedule ..." }
      end
      if @api_client.config.client_side_validation && schedule.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"schedule\" when calling DefaultApi.get_subscription_schedules_schedule, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscription_schedules/{schedule}".sub("{" + "schedule" + "}", URI.encode_path(schedule.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_subscription_schedules_schedule",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
    # @return [GetSubscriptions200Response]
    def get_subscriptions(*, collection_method : String? = nil, created : GetAccountsCreatedParameter? = nil, current_period_end : GetAccountsCreatedParameter? = nil, current_period_start : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, price : String? = nil, starting_after : String? = nil, status : String? = nil, test_clock : String? = nil)
      data, _status_code, _headers = get_subscriptions_with_http_info(collection_method: collection_method, created: created, current_period_end: current_period_end, current_period_start: current_period_start, customer: customer, ending_before: ending_before, expand: expand, limit: limit, price: price, starting_after: starting_after, status: status, test_clock: test_clock)
      data
    end

    # &lt;p&gt;By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify &lt;code&gt;status&#x3D;canceled&lt;/code&gt;.&lt;/p&gt;
    # @return [Array<(GetSubscriptions200Response, Integer, Hash)>] GetSubscriptions200Response data, response status code and response headers
    def get_subscriptions_with_http_info(*, collection_method : String? = nil, created : GetAccountsCreatedParameter? = nil, current_period_end : GetAccountsCreatedParameter? = nil, current_period_start : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, price : String? = nil, starting_after : String? = nil, status : String? = nil, test_clock : String? = nil)
      request = build_api_request_for_get_subscriptions(collection_method: collection_method, created: created, current_period_end: current_period_end, current_period_start: current_period_start, customer: customer, ending_before: ending_before, expand: expand, limit: limit, price: price, starting_after: starting_after, status: status, test_clock: test_clock)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetSubscriptions200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify &lt;code&gt;status&#x3D;canceled&lt;/code&gt;.&lt;/p&gt;
    # @return nil
    def get_subscriptions(*, collection_method : String? = nil, created : GetAccountsCreatedParameter? = nil, current_period_end : GetAccountsCreatedParameter? = nil, current_period_start : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, price : String? = nil, starting_after : String? = nil, status : String? = nil, test_clock : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_subscriptions(collection_method: collection_method, created: created, current_period_end: current_period_end, current_period_start: current_period_start, customer: customer, ending_before: ending_before, expand: expand, limit: limit, price: price, starting_after: starting_after, status: status, test_clock: test_clock).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_subscriptions(*, collection_method : String? = nil, created : GetAccountsCreatedParameter? = nil, current_period_end : GetAccountsCreatedParameter? = nil, current_period_start : GetAccountsCreatedParameter? = nil, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, price : String? = nil, starting_after : String? = nil, status : String? = nil, test_clock : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_subscriptions ..." }
      end
      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !price.nil? && price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\" when calling DefaultApi.get_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["active", "all", "canceled", "ended", "incomplete", "incomplete_expired", "past_due", "trialing", "unpaid"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !test_clock.nil? && test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\" when calling DefaultApi.get_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscriptions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["current_period_end"] = current_period_end.to_s if !current_period_end.nil?
      query_params["current_period_start"] = current_period_start.to_s if !current_period_start.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["price"] = price.to_s if !price.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["test_clock"] = test_clock.to_s if !test_clock.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_subscriptions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for subscriptions you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).
    # @return [SearchResult6]
    def get_subscriptions_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      data, _status_code, _headers = get_subscriptions_search_with_http_info(query: query, expand: expand, limit: limit, page: page)
      data
    end

    # &lt;p&gt;Search for subscriptions you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).
    # @return [Array<(SearchResult6, Integer, Hash)>] SearchResult6 data, response status code and response headers
    def get_subscriptions_search_with_http_info(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil)
      request = build_api_request_for_get_subscriptions_search(query: query, expand: expand, limit: limit, page: page)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_subscriptions_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SearchResult6.from_json(data), status_code, headers
    end

    # &lt;p&gt;Search for subscriptions you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @param query [String] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).
    # @return nil
    def get_subscriptions_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_subscriptions_search(query: query, expand: expand, limit: limit, page: page).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_subscriptions_search(*, query : String, expand : Array(String)? = nil, limit : Int64? = nil, page : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_subscriptions_search ..." }
      end
      if @api_client.config.client_side_validation && query.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"query\" when calling DefaultApi.get_subscriptions_search, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"page\" when calling DefaultApi.get_subscriptions_search, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscriptions/search"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["page"] = page.to_s if !page.nil?
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_subscriptions_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the subscription with the given ID.</p>
    # @param subscription_exposed_id [String]
    # @return [Subscription]
    def get_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_subscriptions_subscription_exposed_id_with_http_info(subscription_exposed_id: subscription_exposed_id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
    # @param subscription_exposed_id [String]
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def get_subscriptions_subscription_exposed_id_with_http_info(*, subscription_exposed_id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_subscriptions_subscription_exposed_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Subscription.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
    # @param subscription_exposed_id [String]
    # @return nil
    def get_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_subscriptions_subscription_exposed_id ..." }
      end
      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.get_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscriptions/{subscription_exposed_id}".sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A list of <a href=\"https://stripe.com/docs/tax/tax-categories\">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
    # @return [TaxProductResourceTaxCodeList]
    def get_tax_codes(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_tax_codes_with_http_info(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;A list of &lt;a href&#x3D;\&quot;https://stripe.com/docs/tax/tax-categories\&quot;&gt;all tax codes available&lt;/a&gt; to add to Products in order to allow specific tax calculations.&lt;/p&gt;
    # @return [Array<(TaxProductResourceTaxCodeList, Integer, Hash)>] TaxProductResourceTaxCodeList data, response status code and response headers
    def get_tax_codes_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_tax_codes(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_tax_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TaxProductResourceTaxCodeList.from_json(data), status_code, headers
    end

    # &lt;p&gt;A list of &lt;a href&#x3D;\&quot;https://stripe.com/docs/tax/tax-categories\&quot;&gt;all tax codes available&lt;/a&gt; to add to Products in order to allow specific tax calculations.&lt;/p&gt;
    # @return nil
    def get_tax_codes(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_tax_codes(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_tax_codes(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_tax_codes ..." }
      end
      # resource path
      local_var_path = "/v1/tax_codes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_tax_codes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
    # @param id [String]
    # @return [TaxCode]
    def get_tax_codes_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_tax_codes_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TaxCode, Integer, Hash)>] TaxCode data, response status code and response headers
    def get_tax_codes_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_tax_codes_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_tax_codes_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TaxCode.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_tax_codes_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_tax_codes_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_tax_codes_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_tax_codes_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_tax_codes_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/tax_codes/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_tax_codes_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
    # @return [GetTaxRates200Response]
    def get_tax_rates(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, inclusive : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_tax_rates_with_http_info(active: active, created: created, ending_before: ending_before, expand: expand, inclusive: inclusive, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.&lt;/p&gt;
    # @return [Array<(GetTaxRates200Response, Integer, Hash)>] GetTaxRates200Response data, response status code and response headers
    def get_tax_rates_with_http_info(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, inclusive : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_tax_rates(active: active, created: created, ending_before: ending_before, expand: expand, inclusive: inclusive, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_tax_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTaxRates200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.&lt;/p&gt;
    # @return nil
    def get_tax_rates(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, inclusive : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_tax_rates(active: active, created: created, ending_before: ending_before, expand: expand, inclusive: inclusive, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_tax_rates(*, active : Bool? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, inclusive : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_tax_rates ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_tax_rates, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_tax_rates, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/tax_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["active"] = active.to_s if !active.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["inclusive"] = inclusive.to_s if !inclusive.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_tax_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a tax rate with the given ID</p>
    # @param tax_rate [String]
    # @return [TaxRate]
    def get_tax_rates_tax_rate(*, tax_rate : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_tax_rates_tax_rate_with_http_info(tax_rate: tax_rate, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a tax rate with the given ID&lt;/p&gt;
    # @param tax_rate [String]
    # @return [Array<(TaxRate, Integer, Hash)>] TaxRate data, response status code and response headers
    def get_tax_rates_tax_rate_with_http_info(*, tax_rate : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_tax_rates_tax_rate(tax_rate: tax_rate, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_tax_rates_tax_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TaxRate.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a tax rate with the given ID&lt;/p&gt;
    # @param tax_rate [String]
    # @return nil
    def get_tax_rates_tax_rate(*, tax_rate : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_tax_rates_tax_rate(tax_rate: tax_rate, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_tax_rates_tax_rate(*, tax_rate : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_tax_rates_tax_rate ..." }
      end
      if @api_client.config.client_side_validation && tax_rate.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tax_rate\" when calling DefaultApi.get_tax_rates_tax_rate, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/tax_rates/{tax_rate}".sub("{" + "tax_rate" + "}", URI.encode_path(tax_rate.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_tax_rates_tax_rate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Configuration</code> objects.</p>
    # @return [TerminalConfigurationConfigurationList]
    def get_terminal_configurations(*, ending_before : String? = nil, expand : Array(String)? = nil, is_account_default : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_terminal_configurations_with_http_info(ending_before: ending_before, expand: expand, is_account_default: is_account_default, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
    # @return [Array<(TerminalConfigurationConfigurationList, Integer, Hash)>] TerminalConfigurationConfigurationList data, response status code and response headers
    def get_terminal_configurations_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, is_account_default : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_terminal_configurations(ending_before: ending_before, expand: expand, is_account_default: is_account_default, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_terminal_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalConfigurationConfigurationList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
    # @return nil
    def get_terminal_configurations(*, ending_before : String? = nil, expand : Array(String)? = nil, is_account_default : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_terminal_configurations(ending_before: ending_before, expand: expand, is_account_default: is_account_default, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_terminal_configurations(*, ending_before : String? = nil, expand : Array(String)? = nil, is_account_default : Bool? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_terminal_configurations ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_terminal_configurations, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_terminal_configurations, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/configurations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["is_account_default"] = is_account_default.to_s if !is_account_default.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_terminal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Configuration</code> object.</p>
    # @param configuration [String]
    # @return [GetTerminalConfigurationsConfiguration200Response]
    def get_terminal_configurations_configuration(*, configuration : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_terminal_configurations_configuration_with_http_info(configuration: configuration, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @param configuration [String]
    # @return [Array<(GetTerminalConfigurationsConfiguration200Response, Integer, Hash)>] GetTerminalConfigurationsConfiguration200Response data, response status code and response headers
    def get_terminal_configurations_configuration_with_http_info(*, configuration : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_terminal_configurations_configuration(configuration: configuration, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_terminal_configurations_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTerminalConfigurationsConfiguration200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @param configuration [String]
    # @return nil
    def get_terminal_configurations_configuration(*, configuration : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_terminal_configurations_configuration(configuration: configuration, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_terminal_configurations_configuration(*, configuration : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_terminal_configurations_configuration ..." }
      end
      if @api_client.config.client_side_validation && configuration.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"configuration\" when calling DefaultApi.get_terminal_configurations_configuration, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Location</code> objects.</p>
    # @return [TerminalLocationLocationList]
    def get_terminal_locations(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_terminal_locations_with_http_info(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
    # @return [Array<(TerminalLocationLocationList, Integer, Hash)>] TerminalLocationLocationList data, response status code and response headers
    def get_terminal_locations_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_terminal_locations(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_terminal_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalLocationLocationList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
    # @return nil
    def get_terminal_locations(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_terminal_locations(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_terminal_locations(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_terminal_locations ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_terminal_locations, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_terminal_locations, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/locations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_terminal_locations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Location</code> object.</p>
    # @param location [String]
    # @return [GetTerminalLocationsLocation200Response]
    def get_terminal_locations_location(*, location : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_terminal_locations_location_with_http_info(location: location, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @param location [String]
    # @return [Array<(GetTerminalLocationsLocation200Response, Integer, Hash)>] GetTerminalLocationsLocation200Response data, response status code and response headers
    def get_terminal_locations_location_with_http_info(*, location : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_terminal_locations_location(location: location, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_terminal_locations_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTerminalLocationsLocation200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
    # @param location [String]
    # @return nil
    def get_terminal_locations_location(*, location : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_terminal_locations_location(location: location, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_terminal_locations_location(*, location : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_terminal_locations_location ..." }
      end
      if @api_client.config.client_side_validation && location.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"location\" when calling DefaultApi.get_terminal_locations_location, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of <code>Reader</code> objects.</p>
    # @return [TerminalReaderRetrieveReader]
    def get_terminal_readers(*, device_type : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, location : String? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_terminal_readers_with_http_info(device_type: device_type, ending_before: ending_before, expand: expand, limit: limit, location: location, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
    # @return [Array<(TerminalReaderRetrieveReader, Integer, Hash)>] TerminalReaderRetrieveReader data, response status code and response headers
    def get_terminal_readers_with_http_info(*, device_type : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, location : String? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_terminal_readers(device_type: device_type, ending_before: ending_before, expand: expand, limit: limit, location: location, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_terminal_readers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalReaderRetrieveReader.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
    # @return nil
    def get_terminal_readers(*, device_type : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, location : String? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_terminal_readers(device_type: device_type, ending_before: ending_before, expand: expand, limit: limit, location: location, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_terminal_readers(*, device_type : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, location : String? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_terminal_readers ..." }
      end
      allowable_values = ["bbpos_chipper2x", "bbpos_wisepad3", "bbpos_wisepos_e", "simulated_wisepos_e", "stripe_m2", "verifone_P400"]
      if @api_client.config.client_side_validation && !device_type.nil? && !allowable_values.includes?(device_type)
        raise ArgumentError.new("invalid value for \"device_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_terminal_readers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !location.nil? && location.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"location\" when calling DefaultApi.get_terminal_readers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_terminal_readers, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["offline", "online"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/terminal/readers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["device_type"] = device_type.to_s if !device_type.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["location"] = location.to_s if !location.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_terminal_readers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a <code>Reader</code> object.</p>
    # @param reader [String]
    # @return [GetTerminalReadersReader200Response]
    def get_terminal_readers_reader(*, reader : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_terminal_readers_reader_with_http_info(reader: reader, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @param reader [String]
    # @return [Array<(GetTerminalReadersReader200Response, Integer, Hash)>] GetTerminalReadersReader200Response data, response status code and response headers
    def get_terminal_readers_reader_with_http_info(*, reader : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_terminal_readers_reader(reader: reader, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_terminal_readers_reader\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTerminalReadersReader200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @param reader [String]
    # @return nil
    def get_terminal_readers_reader(*, reader : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_terminal_readers_reader(reader: reader, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_terminal_readers_reader(*, reader : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_terminal_readers_reader ..." }
      end
      if @api_client.config.client_side_validation && reader.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reader\" when calling DefaultApi.get_terminal_readers_reader, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your test clocks.</p>
    # @return [GetTestHelpersTestClocks200Response]
    def get_test_helpers_test_clocks(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_test_helpers_test_clocks_with_http_info(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
    # @return [Array<(GetTestHelpersTestClocks200Response, Integer, Hash)>] GetTestHelpersTestClocks200Response data, response status code and response headers
    def get_test_helpers_test_clocks_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_test_helpers_test_clocks(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_test_helpers_test_clocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTestHelpersTestClocks200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
    # @return nil
    def get_test_helpers_test_clocks(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_test_helpers_test_clocks(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_test_helpers_test_clocks(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_test_helpers_test_clocks ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_test_helpers_test_clocks, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_test_helpers_test_clocks, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_test_helpers_test_clocks",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a test clock.</p>
    # @param test_clock [String]
    # @return [TestHelpersTestClock]
    def get_test_helpers_test_clocks_test_clock(*, test_clock : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_test_helpers_test_clocks_test_clock_with_http_info(test_clock: test_clock, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
    # @param test_clock [String]
    # @return [Array<(TestHelpersTestClock, Integer, Hash)>] TestHelpersTestClock data, response status code and response headers
    def get_test_helpers_test_clocks_test_clock_with_http_info(*, test_clock : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_test_helpers_test_clocks_test_clock(test_clock: test_clock, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_test_helpers_test_clocks_test_clock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TestHelpersTestClock.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
    # @param test_clock [String]
    # @return nil
    def get_test_helpers_test_clocks_test_clock(*, test_clock : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_test_helpers_test_clocks_test_clock(test_clock: test_clock, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_test_helpers_test_clocks_test_clock(*, test_clock : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_test_helpers_test_clocks_test_clock ..." }
      end
      if @api_client.config.client_side_validation && test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\" when calling DefaultApi.get_test_helpers_test_clocks_test_clock, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_test_helpers_test_clocks_test_clock",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the token with the given ID.</p>
    # @param token [String]
    # @return [Token]
    def get_tokens_token(*, token : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_tokens_token_with_http_info(token: token, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the token with the given ID.&lt;/p&gt;
    # @param token [String]
    # @return [Array<(Token, Integer, Hash)>] Token data, response status code and response headers
    def get_tokens_token_with_http_info(*, token : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_tokens_token(token: token, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_tokens_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Token.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the token with the given ID.&lt;/p&gt;
    # @param token [String]
    # @return nil
    def get_tokens_token(*, token : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_tokens_token(token: token, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_tokens_token(*, token : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_tokens_token ..." }
      end
      if @api_client.config.client_side_validation && token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"token\" when calling DefaultApi.get_tokens_token, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/tokens/{token}".sub("{" + "token" + "}", URI.encode_path(token.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_tokens_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of top-ups.</p>
    # @return [TopupList]
    def get_topups(*, amount : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_topups_with_http_info(amount: amount, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of top-ups.&lt;/p&gt;
    # @return [Array<(TopupList, Integer, Hash)>] TopupList data, response status code and response headers
    def get_topups_with_http_info(*, amount : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_topups(amount: amount, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_topups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TopupList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of top-ups.&lt;/p&gt;
    # @return nil
    def get_topups(*, amount : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_topups(amount: amount, created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_topups(*, amount : GetAccountsCreatedParameter? = nil, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_topups ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_topups, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_topups, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["canceled", "failed", "pending", "succeeded"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !status.nil? && status.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"status\" when calling DefaultApi.get_topups, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/topups"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["amount"] = amount.to_s if !amount.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_topups",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
    # @param topup [String]
    # @return [Topup]
    def get_topups_topup(*, topup : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_topups_topup_with_http_info(topup: topup, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.&lt;/p&gt;
    # @param topup [String]
    # @return [Array<(Topup, Integer, Hash)>] Topup data, response status code and response headers
    def get_topups_topup_with_http_info(*, topup : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_topups_topup(topup: topup, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_topups_topup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Topup.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.&lt;/p&gt;
    # @param topup [String]
    # @return nil
    def get_topups_topup(*, topup : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_topups_topup(topup: topup, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_topups_topup(*, topup : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_topups_topup ..." }
      end
      if @api_client.config.client_side_validation && topup.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"topup\" when calling DefaultApi.get_topups_topup, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/topups/{topup}".sub("{" + "topup" + "}", URI.encode_path(topup.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_topups_topup",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
    # @return [TransferList]
    def get_transfers(*, created : GetAccountsCreatedParameter? = nil, destination : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, transfer_group : String? = nil)
      data, _status_code, _headers = get_transfers_with_http_info(created: created, destination: destination, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.&lt;/p&gt;
    # @return [Array<(TransferList, Integer, Hash)>] TransferList data, response status code and response headers
    def get_transfers_with_http_info(*, created : GetAccountsCreatedParameter? = nil, destination : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, transfer_group : String? = nil)
      request = build_api_request_for_get_transfers(created: created, destination: destination, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, transfer_group: transfer_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TransferList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.&lt;/p&gt;
    # @return nil
    def get_transfers(*, created : GetAccountsCreatedParameter? = nil, destination : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, transfer_group : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_transfers(created: created, destination: destination, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, transfer_group: transfer_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_transfers(*, created : GetAccountsCreatedParameter? = nil, destination : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, transfer_group : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_transfers ..." }
      end
      if @api_client.config.client_side_validation && !destination.nil? && destination.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"destination\" when calling DefaultApi.get_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !transfer_group.nil? && transfer_group.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer_group\" when calling DefaultApi.get_transfers, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["destination"] = destination.to_s if !destination.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
    # @param id [String]
    # @return [TransferReversalList]
    def get_transfers_id_reversals(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_transfers_id_reversals_with_http_info(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional reversals.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TransferReversalList, Integer, Hash)>] TransferReversalList data, response status code and response headers
    def get_transfers_id_reversals_with_http_info(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_transfers_id_reversals(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_transfers_id_reversals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TransferReversalList.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional reversals.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_transfers_id_reversals(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_transfers_id_reversals(id: id, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_transfers_id_reversals(*, id : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_transfers_id_reversals ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_transfers_id_reversals, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_transfers_id_reversals, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_transfers_id_reversals, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/transfers/{id}/reversals".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_transfers_id_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
    # @param transfer [String]
    # @return [Transfer]
    def get_transfers_transfer(*, transfer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_transfers_transfer_with_http_info(transfer: transfer, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.&lt;/p&gt;
    # @param transfer [String]
    # @return [Array<(Transfer, Integer, Hash)>] Transfer data, response status code and response headers
    def get_transfers_transfer_with_http_info(*, transfer : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_transfers_transfer(transfer: transfer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_transfers_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Transfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.&lt;/p&gt;
    # @param transfer [String]
    # @return nil
    def get_transfers_transfer(*, transfer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_transfers_transfer(transfer: transfer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_transfers_transfer(*, transfer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_transfers_transfer ..." }
      end
      if @api_client.config.client_side_validation && transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer\" when calling DefaultApi.get_transfers_transfer, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/transfers/{transfer}".sub("{" + "transfer" + "}", URI.encode_path(transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_transfers_transfer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
    # @param id [String]
    # @param transfer [String]
    # @return [TransferReversal]
    def get_transfers_transfer_reversals_id(*, id : String, transfer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_transfers_transfer_reversals_id_with_http_info(id: id, transfer: transfer, expand: expand)
      data
    end

    # &lt;p&gt;By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.&lt;/p&gt;
    # @param id [String]
    # @param transfer [String]
    # @return [Array<(TransferReversal, Integer, Hash)>] TransferReversal data, response status code and response headers
    def get_transfers_transfer_reversals_id_with_http_info(*, id : String, transfer : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_transfers_transfer_reversals_id(id: id, transfer: transfer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_transfers_transfer_reversals_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TransferReversal.from_json(data), status_code, headers
    end

    # &lt;p&gt;By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.&lt;/p&gt;
    # @param id [String]
    # @param transfer [String]
    # @return nil
    def get_transfers_transfer_reversals_id(*, id : String, transfer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_transfers_transfer_reversals_id(id: id, transfer: transfer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_transfers_transfer_reversals_id(*, id : String, transfer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_transfers_transfer_reversals_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_transfers_transfer_reversals_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer\" when calling DefaultApi.get_transfers_transfer_reversals_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/transfers/{transfer}/reversals/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "transfer" + "}", URI.encode_path(transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_transfers_transfer_reversals_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of CreditReversals.</p>
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [ReceivedCreditsResourceTreasuryCreditReversalList]
    def get_treasury_credit_reversals(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, received_credit : String? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_treasury_credit_reversals_with_http_info(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, received_credit: received_credit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of CreditReversals.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [Array<(ReceivedCreditsResourceTreasuryCreditReversalList, Integer, Hash)>] ReceivedCreditsResourceTreasuryCreditReversalList data, response status code and response headers
    def get_treasury_credit_reversals_with_http_info(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, received_credit : String? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_treasury_credit_reversals(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, received_credit: received_credit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_credit_reversals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ReceivedCreditsResourceTreasuryCreditReversalList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of CreditReversals.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return nil
    def get_treasury_credit_reversals(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, received_credit : String? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_credit_reversals(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, received_credit: received_credit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_credit_reversals(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, received_credit : String? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_credit_reversals ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_credit_reversals, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !received_credit.nil? && received_credit.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"received_credit\" when calling DefaultApi.get_treasury_credit_reversals, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_credit_reversals, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["canceled", "posted", "processing"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/treasury/credit_reversals"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["received_credit"] = received_credit.to_s if !received_credit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_credit_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
    # @param credit_reversal [String]
    # @return [TreasuryCreditReversal]
    def get_treasury_credit_reversals_credit_reversal(*, credit_reversal : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_credit_reversals_credit_reversal_with_http_info(credit_reversal: credit_reversal, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list&lt;/p&gt;
    # @param credit_reversal [String]
    # @return [Array<(TreasuryCreditReversal, Integer, Hash)>] TreasuryCreditReversal data, response status code and response headers
    def get_treasury_credit_reversals_credit_reversal_with_http_info(*, credit_reversal : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_credit_reversals_credit_reversal(credit_reversal: credit_reversal, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_credit_reversals_credit_reversal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryCreditReversal.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list&lt;/p&gt;
    # @param credit_reversal [String]
    # @return nil
    def get_treasury_credit_reversals_credit_reversal(*, credit_reversal : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_credit_reversals_credit_reversal(credit_reversal: credit_reversal, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_credit_reversals_credit_reversal(*, credit_reversal : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_credit_reversals_credit_reversal ..." }
      end
      if @api_client.config.client_side_validation && credit_reversal.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"credit_reversal\" when calling DefaultApi.get_treasury_credit_reversals_credit_reversal, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/credit_reversals/{credit_reversal}".sub("{" + "credit_reversal" + "}", URI.encode_path(credit_reversal.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_credit_reversals_credit_reversal",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of DebitReversals.</p>
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [ReceivedDebitsResourceTreasuryDebitReversalList]
    def get_treasury_debit_reversals(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, received_debit : String? = nil, resolution : String? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_treasury_debit_reversals_with_http_info(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, received_debit: received_debit, resolution: resolution, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of DebitReversals.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [Array<(ReceivedDebitsResourceTreasuryDebitReversalList, Integer, Hash)>] ReceivedDebitsResourceTreasuryDebitReversalList data, response status code and response headers
    def get_treasury_debit_reversals_with_http_info(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, received_debit : String? = nil, resolution : String? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_treasury_debit_reversals(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, received_debit: received_debit, resolution: resolution, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_debit_reversals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ReceivedDebitsResourceTreasuryDebitReversalList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of DebitReversals.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return nil
    def get_treasury_debit_reversals(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, received_debit : String? = nil, resolution : String? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_debit_reversals(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, received_debit: received_debit, resolution: resolution, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_debit_reversals(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, received_debit : String? = nil, resolution : String? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_debit_reversals ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_debit_reversals, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !received_debit.nil? && received_debit.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"received_debit\" when calling DefaultApi.get_treasury_debit_reversals, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["lost", "won"]
      if @api_client.config.client_side_validation && !resolution.nil? && !allowable_values.includes?(resolution)
        raise ArgumentError.new("invalid value for \"resolution\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_debit_reversals, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["canceled", "completed", "processing"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/treasury/debit_reversals"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["received_debit"] = received_debit.to_s if !received_debit.nil?
      query_params["resolution"] = resolution.to_s if !resolution.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_debit_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a DebitReversal object.</p>
    # @param debit_reversal [String]
    # @return [TreasuryDebitReversal]
    def get_treasury_debit_reversals_debit_reversal(*, debit_reversal : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_debit_reversals_debit_reversal_with_http_info(debit_reversal: debit_reversal, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a DebitReversal object.&lt;/p&gt;
    # @param debit_reversal [String]
    # @return [Array<(TreasuryDebitReversal, Integer, Hash)>] TreasuryDebitReversal data, response status code and response headers
    def get_treasury_debit_reversals_debit_reversal_with_http_info(*, debit_reversal : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_debit_reversals_debit_reversal(debit_reversal: debit_reversal, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_debit_reversals_debit_reversal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryDebitReversal.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a DebitReversal object.&lt;/p&gt;
    # @param debit_reversal [String]
    # @return nil
    def get_treasury_debit_reversals_debit_reversal(*, debit_reversal : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_debit_reversals_debit_reversal(debit_reversal: debit_reversal, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_debit_reversals_debit_reversal(*, debit_reversal : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_debit_reversals_debit_reversal ..." }
      end
      if @api_client.config.client_side_validation && debit_reversal.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"debit_reversal\" when calling DefaultApi.get_treasury_debit_reversals_debit_reversal, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/debit_reversals/{debit_reversal}".sub("{" + "debit_reversal" + "}", URI.encode_path(debit_reversal.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_debit_reversals_debit_reversal",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of FinancialAccounts.</p>
    # @return [GetTreasuryFinancialAccounts200Response]
    def get_treasury_financial_accounts(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_treasury_financial_accounts_with_http_info(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of FinancialAccounts.&lt;/p&gt;
    # @return [Array<(GetTreasuryFinancialAccounts200Response, Integer, Hash)>] GetTreasuryFinancialAccounts200Response data, response status code and response headers
    def get_treasury_financial_accounts_with_http_info(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_treasury_financial_accounts(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_financial_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTreasuryFinancialAccounts200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of FinancialAccounts.&lt;/p&gt;
    # @return nil
    def get_treasury_financial_accounts(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_financial_accounts(created: created, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_financial_accounts(*, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_financial_accounts ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_financial_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_financial_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_financial_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of a FinancialAccount.</p>
    # @param financial_account [String]
    # @return [TreasuryFinancialAccount]
    def get_treasury_financial_accounts_financial_account(*, financial_account : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_financial_accounts_financial_account_with_http_info(financial_account: financial_account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of a FinancialAccount.&lt;/p&gt;
    # @param financial_account [String]
    # @return [Array<(TreasuryFinancialAccount, Integer, Hash)>] TreasuryFinancialAccount data, response status code and response headers
    def get_treasury_financial_accounts_financial_account_with_http_info(*, financial_account : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_financial_accounts_financial_account(financial_account: financial_account, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_financial_accounts_financial_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryFinancialAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of a FinancialAccount.&lt;/p&gt;
    # @param financial_account [String]
    # @return nil
    def get_treasury_financial_accounts_financial_account(*, financial_account : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_financial_accounts_financial_account(financial_account: financial_account, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_financial_accounts_financial_account(*, financial_account : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_financial_accounts_financial_account ..." }
      end
      if @api_client.config.client_side_validation && financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\" when calling DefaultApi.get_treasury_financial_accounts_financial_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts/{financial_account}".sub("{" + "financial_account" + "}", URI.encode_path(financial_account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_financial_accounts_financial_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves Features information associated with the FinancialAccount.</p>
    # @param financial_account [String]
    # @return [TreasuryFinancialAccountFeatures]
    def get_treasury_financial_accounts_financial_account_features(*, financial_account : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_financial_accounts_financial_account_features_with_http_info(financial_account: financial_account, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves Features information associated with the FinancialAccount.&lt;/p&gt;
    # @param financial_account [String]
    # @return [Array<(TreasuryFinancialAccountFeatures, Integer, Hash)>] TreasuryFinancialAccountFeatures data, response status code and response headers
    def get_treasury_financial_accounts_financial_account_features_with_http_info(*, financial_account : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_financial_accounts_financial_account_features(financial_account: financial_account, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_financial_accounts_financial_account_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryFinancialAccountFeatures.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves Features information associated with the FinancialAccount.&lt;/p&gt;
    # @param financial_account [String]
    # @return nil
    def get_treasury_financial_accounts_financial_account_features(*, financial_account : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_financial_accounts_financial_account_features(financial_account: financial_account, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_financial_accounts_financial_account_features(*, financial_account : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_financial_accounts_financial_account_features ..." }
      end
      if @api_client.config.client_side_validation && financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\" when calling DefaultApi.get_treasury_financial_accounts_financial_account_features, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts/{financial_account}/features".sub("{" + "financial_account" + "}", URI.encode_path(financial_account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_financial_accounts_financial_account_features",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [InboundTransfersResourceTreasuryInboundTransferList]
    def get_treasury_inbound_transfers(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_treasury_inbound_transfers_with_http_info(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of InboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [Array<(InboundTransfersResourceTreasuryInboundTransferList, Integer, Hash)>] InboundTransfersResourceTreasuryInboundTransferList data, response status code and response headers
    def get_treasury_inbound_transfers_with_http_info(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_treasury_inbound_transfers(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_inbound_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return InboundTransfersResourceTreasuryInboundTransferList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of InboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return nil
    def get_treasury_inbound_transfers(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_inbound_transfers(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_inbound_transfers(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_inbound_transfers ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_inbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_inbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["canceled", "failed", "processing", "succeeded"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/treasury/inbound_transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_inbound_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing InboundTransfer.</p>
    # @param id [String]
    # @return [TreasuryInboundTransfer]
    def get_treasury_inbound_transfers_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_inbound_transfers_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing InboundTransfer.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryInboundTransfer, Integer, Hash)>] TreasuryInboundTransfer data, response status code and response headers
    def get_treasury_inbound_transfers_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_inbound_transfers_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_inbound_transfers_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryInboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing InboundTransfer.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_treasury_inbound_transfers_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_inbound_transfers_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_inbound_transfers_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_inbound_transfers_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_treasury_inbound_transfers_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/inbound_transfers/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_inbound_transfers_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [OutboundPaymentsResourceTreasuryOutboundPaymentList]
    def get_treasury_outbound_payments(*, financial_account : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_treasury_outbound_payments_with_http_info(financial_account: financial_account, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of OutboundPayments sent from the specified FinancialAccount.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [Array<(OutboundPaymentsResourceTreasuryOutboundPaymentList, Integer, Hash)>] OutboundPaymentsResourceTreasuryOutboundPaymentList data, response status code and response headers
    def get_treasury_outbound_payments_with_http_info(*, financial_account : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_treasury_outbound_payments(financial_account: financial_account, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_outbound_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return OutboundPaymentsResourceTreasuryOutboundPaymentList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of OutboundPayments sent from the specified FinancialAccount.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return nil
    def get_treasury_outbound_payments(*, financial_account : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_outbound_payments(financial_account: financial_account, customer: customer, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_outbound_payments(*, financial_account : String, customer : String? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_outbound_payments ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.get_treasury_outbound_payments, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_outbound_payments, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_outbound_payments, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["canceled", "failed", "posted", "processing", "returned"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/treasury/outbound_payments"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_outbound_payments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
    # @param id [String]
    # @return [TreasuryOutboundPayment]
    def get_treasury_outbound_payments_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_outbound_payments_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryOutboundPayment, Integer, Hash)>] TreasuryOutboundPayment data, response status code and response headers
    def get_treasury_outbound_payments_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_outbound_payments_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_outbound_payments_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundPayment.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_treasury_outbound_payments_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_outbound_payments_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_outbound_payments_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_outbound_payments_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_treasury_outbound_payments_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_payments/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_outbound_payments_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [OutboundTransfersResourceTreasuryOutboundTransferList]
    def get_treasury_outbound_transfers(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_treasury_outbound_transfers_with_http_info(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of OutboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [Array<(OutboundTransfersResourceTreasuryOutboundTransferList, Integer, Hash)>] OutboundTransfersResourceTreasuryOutboundTransferList data, response status code and response headers
    def get_treasury_outbound_transfers_with_http_info(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_treasury_outbound_transfers(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_outbound_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return OutboundTransfersResourceTreasuryOutboundTransferList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of OutboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return nil
    def get_treasury_outbound_transfers(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_outbound_transfers(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_outbound_transfers(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_outbound_transfers ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_outbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_outbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["canceled", "failed", "posted", "processing", "returned"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/treasury/outbound_transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_outbound_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
    # @param outbound_transfer [String]
    # @return [TreasuryOutboundTransfer]
    def get_treasury_outbound_transfers_outbound_transfer(*, outbound_transfer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_outbound_transfers_outbound_transfer_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return [Array<(TreasuryOutboundTransfer, Integer, Hash)>] TreasuryOutboundTransfer data, response status code and response headers
    def get_treasury_outbound_transfers_outbound_transfer_with_http_info(*, outbound_transfer : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_outbound_transfers_outbound_transfer(outbound_transfer: outbound_transfer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_outbound_transfers_outbound_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return nil
    def get_treasury_outbound_transfers_outbound_transfer(*, outbound_transfer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_outbound_transfers_outbound_transfer(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_outbound_transfers_outbound_transfer(*, outbound_transfer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_outbound_transfers_outbound_transfer ..." }
      end
      if @api_client.config.client_side_validation && outbound_transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"outbound_transfer\" when calling DefaultApi.get_treasury_outbound_transfers_outbound_transfer, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_transfers/{outbound_transfer}".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_outbound_transfers_outbound_transfer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of ReceivedCredits.</p>
    # @param financial_account [String] The FinancialAccount that received the funds.
    # @return [ReceivedCreditsResourceTreasuryReceivedCreditList]
    def get_treasury_received_credits(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, linked_flows : LinkedFlowsParam? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_treasury_received_credits_with_http_info(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, linked_flows: linked_flows, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of ReceivedCredits.&lt;/p&gt;
    # @param financial_account [String] The FinancialAccount that received the funds.
    # @return [Array<(ReceivedCreditsResourceTreasuryReceivedCreditList, Integer, Hash)>] ReceivedCreditsResourceTreasuryReceivedCreditList data, response status code and response headers
    def get_treasury_received_credits_with_http_info(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, linked_flows : LinkedFlowsParam? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_treasury_received_credits(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, linked_flows: linked_flows, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_received_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ReceivedCreditsResourceTreasuryReceivedCreditList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of ReceivedCredits.&lt;/p&gt;
    # @param financial_account [String] The FinancialAccount that received the funds.
    # @return nil
    def get_treasury_received_credits(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, linked_flows : LinkedFlowsParam? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_received_credits(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, linked_flows: linked_flows, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_received_credits(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, linked_flows : LinkedFlowsParam? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_received_credits ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_received_credits, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_received_credits, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["failed", "succeeded"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/treasury/received_credits"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["linked_flows"] = linked_flows.to_s if !linked_flows.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_received_credits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
    # @param id [String]
    # @return [TreasuryReceivedCredit]
    def get_treasury_received_credits_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_received_credits_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryReceivedCredit, Integer, Hash)>] TreasuryReceivedCredit data, response status code and response headers
    def get_treasury_received_credits_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_received_credits_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_received_credits_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryReceivedCredit.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_treasury_received_credits_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_received_credits_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_received_credits_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_received_credits_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_treasury_received_credits_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/received_credits/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_received_credits_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of ReceivedDebits.</p>
    # @param financial_account [String] The FinancialAccount that funds were pulled from.
    # @return [ReceivedDebitsResourceTreasuryReceivedDebitList]
    def get_treasury_received_debits(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      data, _status_code, _headers = get_treasury_received_debits_with_http_info(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)
      data
    end

    # &lt;p&gt;Returns a list of ReceivedDebits.&lt;/p&gt;
    # @param financial_account [String] The FinancialAccount that funds were pulled from.
    # @return [Array<(ReceivedDebitsResourceTreasuryReceivedDebitList, Integer, Hash)>] ReceivedDebitsResourceTreasuryReceivedDebitList data, response status code and response headers
    def get_treasury_received_debits_with_http_info(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil)
      request = build_api_request_for_get_treasury_received_debits(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_received_debits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ReceivedDebitsResourceTreasuryReceivedDebitList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of ReceivedDebits.&lt;/p&gt;
    # @param financial_account [String] The FinancialAccount that funds were pulled from.
    # @return nil
    def get_treasury_received_debits(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_received_debits(financial_account: financial_account, ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_received_debits(*, financial_account : String, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_received_debits ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_received_debits, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_received_debits, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["failed", "succeeded"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/treasury/received_debits"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_received_debits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
    # @param id [String]
    # @return [TreasuryReceivedDebit]
    def get_treasury_received_debits_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_received_debits_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryReceivedDebit, Integer, Hash)>] TreasuryReceivedDebit data, response status code and response headers
    def get_treasury_received_debits_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_received_debits_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_received_debits_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryReceivedDebit.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_treasury_received_debits_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_received_debits_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_received_debits_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_received_debits_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_treasury_received_debits_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/received_debits/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_received_debits_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a list of TransactionEntry objects.</p>
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [TransactionsResourceTreasuryTransactionEntryList]
    def get_treasury_transaction_entries(*, financial_account : String, created : GetAccountsCreatedParameter? = nil, effective_at : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, order_by : String? = nil, starting_after : String? = nil, transaction : String? = nil)
      data, _status_code, _headers = get_treasury_transaction_entries_with_http_info(financial_account: financial_account, created: created, effective_at: effective_at, ending_before: ending_before, expand: expand, limit: limit, order_by: order_by, starting_after: starting_after, transaction: transaction)
      data
    end

    # &lt;p&gt;Retrieves a list of TransactionEntry objects.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [Array<(TransactionsResourceTreasuryTransactionEntryList, Integer, Hash)>] TransactionsResourceTreasuryTransactionEntryList data, response status code and response headers
    def get_treasury_transaction_entries_with_http_info(*, financial_account : String, created : GetAccountsCreatedParameter? = nil, effective_at : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, order_by : String? = nil, starting_after : String? = nil, transaction : String? = nil)
      request = build_api_request_for_get_treasury_transaction_entries(financial_account: financial_account, created: created, effective_at: effective_at, ending_before: ending_before, expand: expand, limit: limit, order_by: order_by, starting_after: starting_after, transaction: transaction)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_transaction_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TransactionsResourceTreasuryTransactionEntryList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a list of TransactionEntry objects.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return nil
    def get_treasury_transaction_entries(*, financial_account : String, created : GetAccountsCreatedParameter? = nil, effective_at : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, order_by : String? = nil, starting_after : String? = nil, transaction : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_transaction_entries(financial_account: financial_account, created: created, effective_at: effective_at, ending_before: ending_before, expand: expand, limit: limit, order_by: order_by, starting_after: starting_after, transaction: transaction).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_transaction_entries(*, financial_account : String, created : GetAccountsCreatedParameter? = nil, effective_at : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, order_by : String? = nil, starting_after : String? = nil, transaction : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_transaction_entries ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_transaction_entries, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["created", "effective_at"]
      if @api_client.config.client_side_validation && !order_by.nil? && !allowable_values.includes?(order_by)
        raise ArgumentError.new("invalid value for \"order_by\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_transaction_entries, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !transaction.nil? && transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transaction\" when calling DefaultApi.get_treasury_transaction_entries, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/transaction_entries"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["effective_at"] = effective_at.to_s if !effective_at.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["order_by"] = order_by.to_s if !order_by.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["transaction"] = transaction.to_s if !transaction.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_transaction_entries",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a TransactionEntry object.</p>
    # @param id [String]
    # @return [TreasuryTransactionEntry]
    def get_treasury_transaction_entries_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_transaction_entries_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves a TransactionEntry object.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryTransactionEntry, Integer, Hash)>] TreasuryTransactionEntry data, response status code and response headers
    def get_treasury_transaction_entries_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_transaction_entries_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_transaction_entries_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryTransactionEntry.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a TransactionEntry object.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_treasury_transaction_entries_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_transaction_entries_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_transaction_entries_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_transaction_entries_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_treasury_transaction_entries_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/transaction_entries/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_transaction_entries_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves a list of Transaction objects.</p>
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [TransactionsResourceTreasuryTransactionList]
    def get_treasury_transactions(*, financial_account : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, order_by : String? = nil, starting_after : String? = nil, status : String? = nil, status_transitions : StatusTransitionTimestampSpecs? = nil)
      data, _status_code, _headers = get_treasury_transactions_with_http_info(financial_account: financial_account, created: created, ending_before: ending_before, expand: expand, limit: limit, order_by: order_by, starting_after: starting_after, status: status, status_transitions: status_transitions)
      data
    end

    # &lt;p&gt;Retrieves a list of Transaction objects.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return [Array<(TransactionsResourceTreasuryTransactionList, Integer, Hash)>] TransactionsResourceTreasuryTransactionList data, response status code and response headers
    def get_treasury_transactions_with_http_info(*, financial_account : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, order_by : String? = nil, starting_after : String? = nil, status : String? = nil, status_transitions : StatusTransitionTimestampSpecs? = nil)
      request = build_api_request_for_get_treasury_transactions(financial_account: financial_account, created: created, ending_before: ending_before, expand: expand, limit: limit, order_by: order_by, starting_after: starting_after, status: status, status_transitions: status_transitions)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TransactionsResourceTreasuryTransactionList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves a list of Transaction objects.&lt;/p&gt;
    # @param financial_account [String] Returns objects associated with this FinancialAccount.
    # @return nil
    def get_treasury_transactions(*, financial_account : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, order_by : String? = nil, starting_after : String? = nil, status : String? = nil, status_transitions : StatusTransitionTimestampSpecs? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_transactions(financial_account: financial_account, created: created, ending_before: ending_before, expand: expand, limit: limit, order_by: order_by, starting_after: starting_after, status: status, status_transitions: status_transitions).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_transactions(*, financial_account : String, created : GetAccountsCreatedParameter? = nil, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, order_by : String? = nil, starting_after : String? = nil, status : String? = nil, status_transitions : StatusTransitionTimestampSpecs? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_transactions ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_treasury_transactions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["created", "posted_at"]
      if @api_client.config.client_side_validation && !order_by.nil? && !allowable_values.includes?(order_by)
        raise ArgumentError.new("invalid value for \"order_by\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_treasury_transactions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["open", "posted", "void"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/treasury/transactions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["created"] = created.to_s if !created.nil?
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["order_by"] = order_by.to_s if !order_by.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["status_transitions"] = status_transitions.to_s if !status_transitions.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the details of an existing Transaction.</p>
    # @param id [String]
    # @return [TreasuryTransaction]
    def get_treasury_transactions_id(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_treasury_transactions_id_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the details of an existing Transaction.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryTransaction, Integer, Hash)>] TreasuryTransaction data, response status code and response headers
    def get_treasury_transactions_id_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_treasury_transactions_id(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_treasury_transactions_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the details of an existing Transaction.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def get_treasury_transactions_id(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_treasury_transactions_id(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_treasury_transactions_id(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_treasury_transactions_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.get_treasury_transactions_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/transactions/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_treasury_transactions_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Returns a list of your webhook endpoints.</p>
    # @return [GetWebhookEndpoints200Response]
    def get_webhook_endpoints(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      data, _status_code, _headers = get_webhook_endpoints_with_http_info(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)
      data
    end

    # &lt;p&gt;Returns a list of your webhook endpoints.&lt;/p&gt;
    # @return [Array<(GetWebhookEndpoints200Response, Integer, Hash)>] GetWebhookEndpoints200Response data, response status code and response headers
    def get_webhook_endpoints_with_http_info(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil)
      request = build_api_request_for_get_webhook_endpoints(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_webhook_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetWebhookEndpoints200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Returns a list of your webhook endpoints.&lt;/p&gt;
    # @return nil
    def get_webhook_endpoints(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_webhook_endpoints(ending_before: ending_before, expand: expand, limit: limit, starting_after: starting_after).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_webhook_endpoints(*, ending_before : String? = nil, expand : Array(String)? = nil, limit : Int64? = nil, starting_after : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_webhook_endpoints ..." }
      end
      if @api_client.config.client_side_validation && !ending_before.nil? && ending_before.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"ending_before\" when calling DefaultApi.get_webhook_endpoints, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !starting_after.nil? && starting_after.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"starting_after\" when calling DefaultApi.get_webhook_endpoints, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_webhook_endpoints",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the webhook endpoint with the given ID.</p>
    # @param webhook_endpoint [String]
    # @return [WebhookEndpoint]
    def get_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String, expand : Array(String)? = nil)
      data, _status_code, _headers = get_webhook_endpoints_webhook_endpoint_with_http_info(webhook_endpoint: webhook_endpoint, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the webhook endpoint with the given ID.&lt;/p&gt;
    # @param webhook_endpoint [String]
    # @return [Array<(WebhookEndpoint, Integer, Hash)>] WebhookEndpoint data, response status code and response headers
    def get_webhook_endpoints_webhook_endpoint_with_http_info(*, webhook_endpoint : String, expand : Array(String)? = nil)
      request = build_api_request_for_get_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#get_webhook_endpoints_webhook_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return WebhookEndpoint.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieves the webhook endpoint with the given ID.&lt;/p&gt;
    # @param webhook_endpoint [String]
    # @return nil
    def get_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_get_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.get_webhook_endpoints_webhook_endpoint ..." }
      end
      if @api_client.config.client_side_validation && webhook_endpoint.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"webhook_endpoint\" when calling DefaultApi.get_webhook_endpoints_webhook_endpoint, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints/{webhook_endpoint}".sub("{" + "webhook_endpoint" + "}", URI.encode_path(webhook_endpoint.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "DefaultApi.get_webhook_endpoints_webhook_endpoint",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Initiate 3D Secure authentication.</p>
    # @param amount [Int64] Amount of the charge that you will create when authentication completes.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param return_url [String] The URL that the cardholder's browser will be returned to when authentication completes.
    # @return [ThreeDSecure]
    def post3d_secure(*, amount : Int64, currency : String, return_url : String, card : String? = nil, customer : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post3d_secure_with_http_info(amount: amount, currency: currency, return_url: return_url, card: card, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Initiate 3D Secure authentication.&lt;/p&gt;
    # @param amount [Int64] Amount of the charge that you will create when authentication completes.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param return_url [String] The URL that the cardholder's browser will be returned to when authentication completes.
    # @return [Array<(ThreeDSecure, Integer, Hash)>] ThreeDSecure data, response status code and response headers
    def post3d_secure_with_http_info(*, amount : Int64, currency : String, return_url : String, card : String? = nil, customer : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post3d_secure(amount: amount, currency: currency, return_url: return_url, card: card, customer: customer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post3d_secure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ThreeDSecure.from_json(data), status_code, headers
    end

    # &lt;p&gt;Initiate 3D Secure authentication.&lt;/p&gt;
    # @param amount [Int64] Amount of the charge that you will create when authentication completes.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param return_url [String] The URL that the cardholder's browser will be returned to when authentication completes.
    # @return nil
    def post3d_secure(*, amount : Int64, currency : String, return_url : String, card : String? = nil, customer : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post3d_secure(amount: amount, currency: currency, return_url: return_url, card: card, customer: customer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post3d_secure(*, amount : Int64, currency : String, return_url : String, card : String? = nil, customer : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post3d_secure ..." }
      end
      if @api_client.config.client_side_validation && !card.nil? && card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"card\" when calling DefaultApi.post3d_secure, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post3d_secure, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/3d_secure"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["return_url"] = return_url.to_s if !return_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post3d_secure",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <a href=\"/docs/connect/accounts\">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>  <p>To update your own account, use the <a href=\"https://dashboard.stripe.com/account\">Dashboard</a>. Refer to our <a href=\"/docs/connect/updating-accounts\">Connect</a> documentation to learn more about updating accounts.</p>
    # @return [Account]
    def post_account(*, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecsUpdate? = nil, tos_acceptance : TosAcceptanceSpecs? = nil)
      data, _status_code, _headers = post_account_with_http_info(account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance)
      data
    end

    # &lt;p&gt;Updates a &lt;a href&#x3D;\&quot;/docs/connect/accounts\&quot;&gt;connected account&lt;/a&gt; by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked &lt;strong&gt;Custom Only&lt;/strong&gt; below.) Parameters marked &lt;strong&gt;Custom and Express&lt;/strong&gt; are not supported for Standard accounts.&lt;/p&gt;  &lt;p&gt;To update your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;Dashboard&lt;/a&gt;. Refer to our &lt;a href&#x3D;\&quot;/docs/connect/updating-accounts\&quot;&gt;Connect&lt;/a&gt; documentation to learn more about updating accounts.&lt;/p&gt;
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def post_account_with_http_info(*, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecsUpdate? = nil, tos_acceptance : TosAcceptanceSpecs? = nil)
      request = build_api_request_for_post_account(account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Account.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a &lt;a href&#x3D;\&quot;/docs/connect/accounts\&quot;&gt;connected account&lt;/a&gt; by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked &lt;strong&gt;Custom Only&lt;/strong&gt; below.) Parameters marked &lt;strong&gt;Custom and Express&lt;/strong&gt; are not supported for Standard accounts.&lt;/p&gt;  &lt;p&gt;To update your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;Dashboard&lt;/a&gt;. Refer to our &lt;a href&#x3D;\&quot;/docs/connect/updating-accounts\&quot;&gt;Connect&lt;/a&gt; documentation to learn more about updating accounts.&lt;/p&gt;
    # @return nil
    def post_account(*, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecsUpdate? = nil, tos_acceptance : TosAcceptanceSpecs? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account(account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account(*, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecsUpdate? = nil, tos_acceptance : TosAcceptanceSpecs? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account ..." }
      end
      if @api_client.config.client_side_validation && !account_token.nil? && account_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_token\" when calling DefaultApi.post_account, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["company", "government_entity", "individual", "non_profit"]
      if @api_client.config.client_side_validation && !business_type.nil? && !allowable_values.includes?(business_type)
        raise ArgumentError.new("invalid value for \"business_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !external_account.nil? && external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\" when calling DefaultApi.post_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_token"] = account_token.to_s if !account_token.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["business_profile"] = business_profile.to_s if !business_profile.nil?
      form_params["business_type"] = business_type.to_s if !business_type.nil?
      form_params["capabilities"] = capabilities.to_s if !capabilities.nil?
      form_params["company"] = company.to_s if !company.nil?
      form_params["default_currency"] = default_currency.to_s if !default_currency.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["external_account"] = external_account.to_s if !external_account.nil?
      form_params["individual"] = individual.to_s if !individual.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["settings"] = settings.to_s if !settings.nil?
      form_params["tos_acceptance"] = tos_acceptance.to_s if !tos_acceptance.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create an external account for a given account.</p>
    # @return [ExternalAccount]
    def post_account_bank_accounts(*, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil)
      data, _status_code, _headers = post_account_bank_accounts_with_http_info(bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account)
      data
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def post_account_bank_accounts_with_http_info(*, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil)
      request = build_api_request_for_post_account_bank_accounts(bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_bank_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @return nil
    def post_account_bank_accounts(*, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_bank_accounts(bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_bank_accounts(*, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_bank_accounts ..." }
      end
      if @api_client.config.client_side_validation && !external_account.nil? && external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\" when calling DefaultApi.post_account_bank_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/bank_accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["default_for_currency"] = default_for_currency.to_s if !default_for_currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["external_account"] = external_account.to_s if !external_account.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_bank_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
    # @param id [String]
    # @return [ExternalAccount]
    def post_account_bank_accounts_id(*, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      data, _status_code, _headers = post_account_bank_accounts_id_with_http_info(id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name)
      data
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def post_account_bank_accounts_id_with_http_info(*, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      request = build_api_request_for_post_account_bank_accounts_id(id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_account_bank_accounts_id(*, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_bank_accounts_id(id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_bank_accounts_id(*, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_bank_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && !account_holder_name.nil? && account_holder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_name\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["", "company", "individual"]
      if @api_client.config.client_side_validation && !account_holder_type.nil? && !allowable_values.includes?(account_holder_type)
        raise ArgumentError.new("invalid value for \"account_holder_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_holder_type.nil? && account_holder_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_type\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["checking", "futsu", "savings", "toza"]
      if @api_client.config.client_side_validation && !account_type.nil? && !allowable_values.includes?(account_type)
        raise ArgumentError.new("invalid value for \"account_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_type.nil? && account_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_type\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_city.nil? && address_city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_city\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_country.nil? && address_country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_country\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line1.nil? && address_line1.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line1\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line2.nil? && address_line2.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line2\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_state.nil? && address_state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_state\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_zip.nil? && address_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_zip\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_month.nil? && exp_month.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_month\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_year.nil? && exp_year.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_year\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/bank_accounts/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder_name"] = account_holder_name.to_s if !account_holder_name.nil?
      form_params["account_holder_type"] = account_holder_type.to_s if !account_holder_type.nil?
      form_params["account_type"] = account_type.to_s if !account_type.nil?
      form_params["address_city"] = address_city.to_s if !address_city.nil?
      form_params["address_country"] = address_country.to_s if !address_country.nil?
      form_params["address_line1"] = address_line1.to_s if !address_line1.nil?
      form_params["address_line2"] = address_line2.to_s if !address_line2.nil?
      form_params["address_state"] = address_state.to_s if !address_state.nil?
      form_params["address_zip"] = address_zip.to_s if !address_zip.nil?
      form_params["default_for_currency"] = default_for_currency.to_s if !default_for_currency.nil?
      form_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      form_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing Account Capability.</p>
    # @param capability [String]
    # @return [Capability]
    def post_account_capabilities_capability(*, capability : String, expand : Array(String)? = nil, requested : Bool? = nil)
      data, _status_code, _headers = post_account_capabilities_capability_with_http_info(capability: capability, expand: expand, requested: requested)
      data
    end

    # &lt;p&gt;Updates an existing Account Capability.&lt;/p&gt;
    # @param capability [String]
    # @return [Array<(Capability, Integer, Hash)>] Capability data, response status code and response headers
    def post_account_capabilities_capability_with_http_info(*, capability : String, expand : Array(String)? = nil, requested : Bool? = nil)
      request = build_api_request_for_post_account_capabilities_capability(capability: capability, expand: expand, requested: requested)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_capabilities_capability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Capability.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing Account Capability.&lt;/p&gt;
    # @param capability [String]
    # @return nil
    def post_account_capabilities_capability(*, capability : String, expand : Array(String)? = nil, requested : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_capabilities_capability(capability: capability, expand: expand, requested: requested).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_capabilities_capability(*, capability : String, expand : Array(String)? = nil, requested : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_capabilities_capability ..." }
      end
      # resource path
      local_var_path = "/v1/account/capabilities/{capability}".sub("{" + "capability" + "}", URI.encode_path(capability.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["requested"] = requested.to_s if !requested.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_capabilities_capability",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create an external account for a given account.</p>
    # @return [ExternalAccount]
    def post_account_external_accounts(*, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil)
      data, _status_code, _headers = post_account_external_accounts_with_http_info(bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account)
      data
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def post_account_external_accounts_with_http_info(*, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil)
      request = build_api_request_for_post_account_external_accounts(bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_external_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @return nil
    def post_account_external_accounts(*, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_external_accounts(bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_external_accounts(*, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_external_accounts ..." }
      end
      if @api_client.config.client_side_validation && !external_account.nil? && external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\" when calling DefaultApi.post_account_external_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/external_accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["default_for_currency"] = default_for_currency.to_s if !default_for_currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["external_account"] = external_account.to_s if !external_account.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_external_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
    # @param id [String]
    # @return [ExternalAccount]
    def post_account_external_accounts_id(*, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      data, _status_code, _headers = post_account_external_accounts_id_with_http_info(id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name)
      data
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def post_account_external_accounts_id_with_http_info(*, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      request = build_api_request_for_post_account_external_accounts_id(id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_external_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_account_external_accounts_id(*, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_external_accounts_id(id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_external_accounts_id(*, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_external_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && !account_holder_name.nil? && account_holder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_name\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["", "company", "individual"]
      if @api_client.config.client_side_validation && !account_holder_type.nil? && !allowable_values.includes?(account_holder_type)
        raise ArgumentError.new("invalid value for \"account_holder_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_holder_type.nil? && account_holder_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_type\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["checking", "futsu", "savings", "toza"]
      if @api_client.config.client_side_validation && !account_type.nil? && !allowable_values.includes?(account_type)
        raise ArgumentError.new("invalid value for \"account_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_type.nil? && account_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_type\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_city.nil? && address_city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_city\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_country.nil? && address_country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_country\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line1.nil? && address_line1.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line1\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line2.nil? && address_line2.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line2\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_state.nil? && address_state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_state\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_zip.nil? && address_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_zip\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_month.nil? && exp_month.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_month\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_year.nil? && exp_year.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_year\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/external_accounts/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder_name"] = account_holder_name.to_s if !account_holder_name.nil?
      form_params["account_holder_type"] = account_holder_type.to_s if !account_holder_type.nil?
      form_params["account_type"] = account_type.to_s if !account_type.nil?
      form_params["address_city"] = address_city.to_s if !address_city.nil?
      form_params["address_country"] = address_country.to_s if !address_country.nil?
      form_params["address_line1"] = address_line1.to_s if !address_line1.nil?
      form_params["address_line2"] = address_line2.to_s if !address_line2.nil?
      form_params["address_state"] = address_state.to_s if !address_state.nil?
      form_params["address_zip"] = address_zip.to_s if !address_zip.nil?
      form_params["default_for_currency"] = default_for_currency.to_s if !default_for_currency.nil?
      form_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      form_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
    # @param account [String] The identifier of the account to create an account link for.
    # @param _type [String] The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
    # @return [AccountLink]
    def post_account_links(*, account : String, _type : String, collect : String? = nil, expand : Array(String)? = nil, refresh_url : String? = nil, return_url : String? = nil)
      data, _status_code, _headers = post_account_links_with_http_info(account: account, _type: _type, collect: collect, expand: expand, refresh_url: refresh_url, return_url: return_url)
      data
    end

    # &lt;p&gt;Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.&lt;/p&gt;
    # @param account [String] The identifier of the account to create an account link for.
    # @param _type [String] The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
    # @return [Array<(AccountLink, Integer, Hash)>] AccountLink data, response status code and response headers
    def post_account_links_with_http_info(*, account : String, _type : String, collect : String? = nil, expand : Array(String)? = nil, refresh_url : String? = nil, return_url : String? = nil)
      request = build_api_request_for_post_account_links(account: account, _type: _type, collect: collect, expand: expand, refresh_url: refresh_url, return_url: return_url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return AccountLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.&lt;/p&gt;
    # @param account [String] The identifier of the account to create an account link for.
    # @param _type [String] The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
    # @return nil
    def post_account_links(*, account : String, _type : String, collect : String? = nil, expand : Array(String)? = nil, refresh_url : String? = nil, return_url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_links(account: account, _type: _type, collect: collect, expand: expand, refresh_url: refresh_url, return_url: return_url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_links(*, account : String, _type : String, collect : String? = nil, expand : Array(String)? = nil, refresh_url : String? = nil, return_url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_links ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_account_links, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["account_onboarding", "account_update"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      allowable_values = ["currently_due", "eventually_due"]
      if @api_client.config.client_side_validation && !collect.nil? && !allowable_values.includes?(collect)
        raise ArgumentError.new("invalid value for \"collect\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/account_links"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["collect"] = collect.to_s if !collect.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["refresh_url"] = refresh_url.to_s if !refresh_url.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>  <p><strong>You may only create login links for <a href=\"/docs/connect/express-accounts\">Express accounts</a> connected to your platform</strong>.</p>
    # @param account [String]
    # @return [LoginLink]
    def post_account_login_links(*, account : String, expand : Array(String)? = nil, redirect_url : String? = nil)
      data, _status_code, _headers = post_account_login_links_with_http_info(account: account, expand: expand, redirect_url: redirect_url)
      data
    end

    # &lt;p&gt;Creates a single-use login link for an Express account to access their Stripe dashboard.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;You may only create login links for &lt;a href&#x3D;\&quot;/docs/connect/express-accounts\&quot;&gt;Express accounts&lt;/a&gt; connected to your platform&lt;/strong&gt;.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(LoginLink, Integer, Hash)>] LoginLink data, response status code and response headers
    def post_account_login_links_with_http_info(*, account : String, expand : Array(String)? = nil, redirect_url : String? = nil)
      request = build_api_request_for_post_account_login_links(account: account, expand: expand, redirect_url: redirect_url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_login_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return LoginLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a single-use login link for an Express account to access their Stripe dashboard.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;You may only create login links for &lt;a href&#x3D;\&quot;/docs/connect/express-accounts\&quot;&gt;Express accounts&lt;/a&gt; connected to your platform&lt;/strong&gt;.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_account_login_links(*, account : String, expand : Array(String)? = nil, redirect_url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_login_links(account: account, expand: expand, redirect_url: redirect_url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_login_links(*, account : String, expand : Array(String)? = nil, redirect_url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_login_links ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_account_login_links, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/login_links"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["redirect_url"] = redirect_url.to_s if !redirect_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_login_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new person.</p>
    # @return [Person]
    def post_account_people(*, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      data, _status_code, _headers = post_account_people_with_http_info(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)
      data
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def post_account_people_with_http_info(*, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      request = build_api_request_for_post_account_people(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_people\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @return nil
    def post_account_people(*, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_people(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_people(*, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_people ..." }
      end
      if @api_client.config.client_side_validation && !account.nil? && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name.nil? && first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kana.nil? && first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kanji.nil? && first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number.nil? && id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number_secondary.nil? && id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name.nil? && last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kana.nil? && last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kanji.nil? && last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !maiden_name.nil? && maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nationality.nil? && nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !person_token.nil? && person_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person_token\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !political_exposure.nil? && political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\" when calling DefaultApi.post_account_people, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/people"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["address"] = address.to_s if !address.nil?
      form_params["address_kana"] = address_kana.to_s if !address_kana.nil?
      form_params["address_kanji"] = address_kanji.to_s if !address_kanji.nil?
      form_params["dob"] = dob.to_s if !dob.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["first_name"] = first_name.to_s if !first_name.nil?
      form_params["first_name_kana"] = first_name_kana.to_s if !first_name_kana.nil?
      form_params["first_name_kanji"] = first_name_kanji.to_s if !first_name_kanji.nil?
      form_params["full_name_aliases"] = full_name_aliases.to_s if !full_name_aliases.nil?
      form_params["gender"] = gender.to_s if !gender.nil?
      form_params["id_number"] = id_number.to_s if !id_number.nil?
      form_params["id_number_secondary"] = id_number_secondary.to_s if !id_number_secondary.nil?
      form_params["last_name"] = last_name.to_s if !last_name.nil?
      form_params["last_name_kana"] = last_name_kana.to_s if !last_name_kana.nil?
      form_params["last_name_kanji"] = last_name_kanji.to_s if !last_name_kanji.nil?
      form_params["maiden_name"] = maiden_name.to_s if !maiden_name.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nationality"] = nationality.to_s if !nationality.nil?
      form_params["person_token"] = person_token.to_s if !person_token.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["political_exposure"] = political_exposure.to_s if !political_exposure.nil?
      form_params["registered_address"] = registered_address.to_s if !registered_address.nil?
      form_params["relationship"] = relationship.to_s if !relationship.nil?
      form_params["ssn_last_4"] = ssn_last_4.to_s if !ssn_last_4.nil?
      form_params["verification"] = verification.to_s if !verification.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_people",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing person.</p>
    # @param person [String]
    # @return [Person]
    def post_account_people_person(*, person : String, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      data, _status_code, _headers = post_account_people_person_with_http_info(person: person, account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)
      data
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @param person [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def post_account_people_person_with_http_info(*, person : String, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      request = build_api_request_for_post_account_people_person(person: person, account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_people_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @param person [String]
    # @return nil
    def post_account_people_person(*, person : String, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_people_person(person: person, account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_people_person(*, person : String, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_people_person ..." }
      end
      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !account.nil? && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name.nil? && first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kana.nil? && first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kanji.nil? && first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number.nil? && id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number_secondary.nil? && id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name.nil? && last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kana.nil? && last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kanji.nil? && last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !maiden_name.nil? && maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nationality.nil? && nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !person_token.nil? && person_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person_token\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !political_exposure.nil? && political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\" when calling DefaultApi.post_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/people/{person}".sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["address"] = address.to_s if !address.nil?
      form_params["address_kana"] = address_kana.to_s if !address_kana.nil?
      form_params["address_kanji"] = address_kanji.to_s if !address_kanji.nil?
      form_params["dob"] = dob.to_s if !dob.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["first_name"] = first_name.to_s if !first_name.nil?
      form_params["first_name_kana"] = first_name_kana.to_s if !first_name_kana.nil?
      form_params["first_name_kanji"] = first_name_kanji.to_s if !first_name_kanji.nil?
      form_params["full_name_aliases"] = full_name_aliases.to_s if !full_name_aliases.nil?
      form_params["gender"] = gender.to_s if !gender.nil?
      form_params["id_number"] = id_number.to_s if !id_number.nil?
      form_params["id_number_secondary"] = id_number_secondary.to_s if !id_number_secondary.nil?
      form_params["last_name"] = last_name.to_s if !last_name.nil?
      form_params["last_name_kana"] = last_name_kana.to_s if !last_name_kana.nil?
      form_params["last_name_kanji"] = last_name_kanji.to_s if !last_name_kanji.nil?
      form_params["maiden_name"] = maiden_name.to_s if !maiden_name.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nationality"] = nationality.to_s if !nationality.nil?
      form_params["person_token"] = person_token.to_s if !person_token.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["political_exposure"] = political_exposure.to_s if !political_exposure.nil?
      form_params["registered_address"] = registered_address.to_s if !registered_address.nil?
      form_params["relationship"] = relationship.to_s if !relationship.nil?
      form_params["ssn_last_4"] = ssn_last_4.to_s if !ssn_last_4.nil?
      form_params["verification"] = verification.to_s if !verification.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_people_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new person.</p>
    # @return [Person]
    def post_account_persons(*, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      data, _status_code, _headers = post_account_persons_with_http_info(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)
      data
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def post_account_persons_with_http_info(*, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      request = build_api_request_for_post_account_persons(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_persons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @return nil
    def post_account_persons(*, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_persons(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_persons(*, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_persons ..." }
      end
      if @api_client.config.client_side_validation && !account.nil? && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name.nil? && first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kana.nil? && first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kanji.nil? && first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number.nil? && id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number_secondary.nil? && id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name.nil? && last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kana.nil? && last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kanji.nil? && last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !maiden_name.nil? && maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nationality.nil? && nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !person_token.nil? && person_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person_token\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !political_exposure.nil? && political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\" when calling DefaultApi.post_account_persons, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/persons"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["address"] = address.to_s if !address.nil?
      form_params["address_kana"] = address_kana.to_s if !address_kana.nil?
      form_params["address_kanji"] = address_kanji.to_s if !address_kanji.nil?
      form_params["dob"] = dob.to_s if !dob.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["first_name"] = first_name.to_s if !first_name.nil?
      form_params["first_name_kana"] = first_name_kana.to_s if !first_name_kana.nil?
      form_params["first_name_kanji"] = first_name_kanji.to_s if !first_name_kanji.nil?
      form_params["full_name_aliases"] = full_name_aliases.to_s if !full_name_aliases.nil?
      form_params["gender"] = gender.to_s if !gender.nil?
      form_params["id_number"] = id_number.to_s if !id_number.nil?
      form_params["id_number_secondary"] = id_number_secondary.to_s if !id_number_secondary.nil?
      form_params["last_name"] = last_name.to_s if !last_name.nil?
      form_params["last_name_kana"] = last_name_kana.to_s if !last_name_kana.nil?
      form_params["last_name_kanji"] = last_name_kanji.to_s if !last_name_kanji.nil?
      form_params["maiden_name"] = maiden_name.to_s if !maiden_name.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nationality"] = nationality.to_s if !nationality.nil?
      form_params["person_token"] = person_token.to_s if !person_token.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["political_exposure"] = political_exposure.to_s if !political_exposure.nil?
      form_params["registered_address"] = registered_address.to_s if !registered_address.nil?
      form_params["relationship"] = relationship.to_s if !relationship.nil?
      form_params["ssn_last_4"] = ssn_last_4.to_s if !ssn_last_4.nil?
      form_params["verification"] = verification.to_s if !verification.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_persons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing person.</p>
    # @param person [String]
    # @return [Person]
    def post_account_persons_person(*, person : String, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      data, _status_code, _headers = post_account_persons_person_with_http_info(person: person, account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)
      data
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @param person [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def post_account_persons_person_with_http_info(*, person : String, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      request = build_api_request_for_post_account_persons_person(person: person, account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_account_persons_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @param person [String]
    # @return nil
    def post_account_persons_person(*, person : String, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_account_persons_person(person: person, account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_account_persons_person(*, person : String, account : String? = nil, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_account_persons_person ..." }
      end
      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !account.nil? && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name.nil? && first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kana.nil? && first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kanji.nil? && first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number.nil? && id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number_secondary.nil? && id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name.nil? && last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kana.nil? && last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kanji.nil? && last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !maiden_name.nil? && maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nationality.nil? && nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !person_token.nil? && person_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person_token\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !political_exposure.nil? && political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\" when calling DefaultApi.post_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/account/persons/{person}".sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["address"] = address.to_s if !address.nil?
      form_params["address_kana"] = address_kana.to_s if !address_kana.nil?
      form_params["address_kanji"] = address_kanji.to_s if !address_kanji.nil?
      form_params["dob"] = dob.to_s if !dob.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["first_name"] = first_name.to_s if !first_name.nil?
      form_params["first_name_kana"] = first_name_kana.to_s if !first_name_kana.nil?
      form_params["first_name_kanji"] = first_name_kanji.to_s if !first_name_kanji.nil?
      form_params["full_name_aliases"] = full_name_aliases.to_s if !full_name_aliases.nil?
      form_params["gender"] = gender.to_s if !gender.nil?
      form_params["id_number"] = id_number.to_s if !id_number.nil?
      form_params["id_number_secondary"] = id_number_secondary.to_s if !id_number_secondary.nil?
      form_params["last_name"] = last_name.to_s if !last_name.nil?
      form_params["last_name_kana"] = last_name_kana.to_s if !last_name_kana.nil?
      form_params["last_name_kanji"] = last_name_kanji.to_s if !last_name_kanji.nil?
      form_params["maiden_name"] = maiden_name.to_s if !maiden_name.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nationality"] = nationality.to_s if !nationality.nil?
      form_params["person_token"] = person_token.to_s if !person_token.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["political_exposure"] = political_exposure.to_s if !political_exposure.nil?
      form_params["registered_address"] = registered_address.to_s if !registered_address.nil?
      form_params["relationship"] = relationship.to_s if !relationship.nil?
      form_params["ssn_last_4"] = ssn_last_4.to_s if !ssn_last_4.nil?
      form_params["verification"] = verification.to_s if !verification.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>With <a href=\"/docs/connect\">Connect</a>, you can create Stripe accounts for your users. To do this, you’ll first need to <a href=\"https://dashboard.stripe.com/account/applications/settings\">register your platform</a>.</p>
    # @return [Account]
    def post_accounts(*, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, country : String? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecs? = nil, tos_acceptance : TosAcceptanceSpecs? = nil, _type : String? = nil)
      data, _status_code, _headers = post_accounts_with_http_info(account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, country: country, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance, _type: _type)
      data
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can create Stripe accounts for your users. To do this, you’ll first need to &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/applications/settings\&quot;&gt;register your platform&lt;/a&gt;.&lt;/p&gt;
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def post_accounts_with_http_info(*, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, country : String? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecs? = nil, tos_acceptance : TosAcceptanceSpecs? = nil, _type : String? = nil)
      request = build_api_request_for_post_accounts(account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, country: country, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Account.from_json(data), status_code, headers
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can create Stripe accounts for your users. To do this, you’ll first need to &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/applications/settings\&quot;&gt;register your platform&lt;/a&gt;.&lt;/p&gt;
    # @return nil
    def post_accounts(*, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, country : String? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecs? = nil, tos_acceptance : TosAcceptanceSpecs? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts(account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, country: country, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts(*, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, country : String? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecs? = nil, tos_acceptance : TosAcceptanceSpecs? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts ..." }
      end
      if @api_client.config.client_side_validation && !account_token.nil? && account_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_token\" when calling DefaultApi.post_accounts, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["company", "government_entity", "individual", "non_profit"]
      if @api_client.config.client_side_validation && !business_type.nil? && !allowable_values.includes?(business_type)
        raise ArgumentError.new("invalid value for \"business_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !country.nil? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\" when calling DefaultApi.post_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !external_account.nil? && external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\" when calling DefaultApi.post_accounts, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["custom", "express", "standard"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_token"] = account_token.to_s if !account_token.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["business_profile"] = business_profile.to_s if !business_profile.nil?
      form_params["business_type"] = business_type.to_s if !business_type.nil?
      form_params["capabilities"] = capabilities.to_s if !capabilities.nil?
      form_params["company"] = company.to_s if !company.nil?
      form_params["country"] = country.to_s if !country.nil?
      form_params["default_currency"] = default_currency.to_s if !default_currency.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["external_account"] = external_account.to_s if !external_account.nil?
      form_params["individual"] = individual.to_s if !individual.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["settings"] = settings.to_s if !settings.nil?
      form_params["tos_acceptance"] = tos_acceptance.to_s if !tos_acceptance.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <a href=\"/docs/connect/accounts\">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>  <p>To update your own account, use the <a href=\"https://dashboard.stripe.com/account\">Dashboard</a>. Refer to our <a href=\"/docs/connect/updating-accounts\">Connect</a> documentation to learn more about updating accounts.</p>
    # @param account [String]
    # @return [Account]
    def post_accounts_account(*, account : String, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecsUpdate? = nil, tos_acceptance : TosAcceptanceSpecs? = nil)
      data, _status_code, _headers = post_accounts_account_with_http_info(account: account, account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance)
      data
    end

    # &lt;p&gt;Updates a &lt;a href&#x3D;\&quot;/docs/connect/accounts\&quot;&gt;connected account&lt;/a&gt; by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked &lt;strong&gt;Custom Only&lt;/strong&gt; below.) Parameters marked &lt;strong&gt;Custom and Express&lt;/strong&gt; are not supported for Standard accounts.&lt;/p&gt;  &lt;p&gt;To update your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;Dashboard&lt;/a&gt;. Refer to our &lt;a href&#x3D;\&quot;/docs/connect/updating-accounts\&quot;&gt;Connect&lt;/a&gt; documentation to learn more about updating accounts.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def post_accounts_account_with_http_info(*, account : String, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecsUpdate? = nil, tos_acceptance : TosAcceptanceSpecs? = nil)
      request = build_api_request_for_post_accounts_account(account: account, account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Account.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a &lt;a href&#x3D;\&quot;/docs/connect/accounts\&quot;&gt;connected account&lt;/a&gt; by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked &lt;strong&gt;Custom Only&lt;/strong&gt; below.) Parameters marked &lt;strong&gt;Custom and Express&lt;/strong&gt; are not supported for Standard accounts.&lt;/p&gt;  &lt;p&gt;To update your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account\&quot;&gt;Dashboard&lt;/a&gt;. Refer to our &lt;a href&#x3D;\&quot;/docs/connect/updating-accounts\&quot;&gt;Connect&lt;/a&gt; documentation to learn more about updating accounts.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_accounts_account(*, account : String, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecsUpdate? = nil, tos_acceptance : TosAcceptanceSpecs? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account(account: account, account_token: account_token, bank_account: bank_account, business_profile: business_profile, business_type: business_type, capabilities: capabilities, company: company, default_currency: default_currency, documents: documents, email: email, expand: expand, external_account: external_account, individual: individual, metadata: metadata, settings: settings, tos_acceptance: tos_acceptance).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account(*, account : String, account_token : String? = nil, bank_account : PostAccountRequestBankAccount? = nil, business_profile : BusinessProfileSpecs? = nil, business_type : String? = nil, capabilities : CapabilitiesParam? = nil, company : CompanySpecs? = nil, default_currency : String? = nil, documents : DocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, external_account : String? = nil, individual : IndividualSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, settings : SettingsSpecsUpdate? = nil, tos_acceptance : TosAcceptanceSpecs? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !account_token.nil? && account_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_token\" when calling DefaultApi.post_accounts_account, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["company", "government_entity", "individual", "non_profit"]
      if @api_client.config.client_side_validation && !business_type.nil? && !allowable_values.includes?(business_type)
        raise ArgumentError.new("invalid value for \"business_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !external_account.nil? && external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\" when calling DefaultApi.post_accounts_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_token"] = account_token.to_s if !account_token.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["business_profile"] = business_profile.to_s if !business_profile.nil?
      form_params["business_type"] = business_type.to_s if !business_type.nil?
      form_params["capabilities"] = capabilities.to_s if !capabilities.nil?
      form_params["company"] = company.to_s if !company.nil?
      form_params["default_currency"] = default_currency.to_s if !default_currency.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["external_account"] = external_account.to_s if !external_account.nil?
      form_params["individual"] = individual.to_s if !individual.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["settings"] = settings.to_s if !settings.nil?
      form_params["tos_acceptance"] = tos_acceptance.to_s if !tos_acceptance.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create an external account for a given account.</p>
    # @param account [String]
    # @return [ExternalAccount]
    def post_accounts_account_bank_accounts(*, account : String, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil)
      data, _status_code, _headers = post_accounts_account_bank_accounts_with_http_info(account: account, bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account)
      data
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def post_accounts_account_bank_accounts_with_http_info(*, account : String, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil)
      request = build_api_request_for_post_accounts_account_bank_accounts(account: account, bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_bank_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_accounts_account_bank_accounts(*, account : String, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_bank_accounts(account: account, bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_bank_accounts(*, account : String, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_bank_accounts ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_bank_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !external_account.nil? && external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\" when calling DefaultApi.post_accounts_account_bank_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/bank_accounts".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["default_for_currency"] = default_for_currency.to_s if !default_for_currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["external_account"] = external_account.to_s if !external_account.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_bank_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
    # @param account [String]
    # @param id [String]
    # @return [ExternalAccount]
    def post_accounts_account_bank_accounts_id(*, account : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      data, _status_code, _headers = post_accounts_account_bank_accounts_id_with_http_info(account: account, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name)
      data
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def post_accounts_account_bank_accounts_id_with_http_info(*, account : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      request = build_api_request_for_post_accounts_account_bank_accounts_id(account: account, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return nil
    def post_accounts_account_bank_accounts_id(*, account : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_bank_accounts_id(account: account, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_bank_accounts_id(*, account : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_bank_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !account_holder_name.nil? && account_holder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_name\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["", "company", "individual"]
      if @api_client.config.client_side_validation && !account_holder_type.nil? && !allowable_values.includes?(account_holder_type)
        raise ArgumentError.new("invalid value for \"account_holder_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_holder_type.nil? && account_holder_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_type\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["checking", "futsu", "savings", "toza"]
      if @api_client.config.client_side_validation && !account_type.nil? && !allowable_values.includes?(account_type)
        raise ArgumentError.new("invalid value for \"account_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_type.nil? && account_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_type\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_city.nil? && address_city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_city\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_country.nil? && address_country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_country\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line1.nil? && address_line1.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line1\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line2.nil? && address_line2.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line2\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_state.nil? && address_state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_state\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_zip.nil? && address_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_zip\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_month.nil? && exp_month.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_month\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_year.nil? && exp_year.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_year\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_accounts_account_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/bank_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder_name"] = account_holder_name.to_s if !account_holder_name.nil?
      form_params["account_holder_type"] = account_holder_type.to_s if !account_holder_type.nil?
      form_params["account_type"] = account_type.to_s if !account_type.nil?
      form_params["address_city"] = address_city.to_s if !address_city.nil?
      form_params["address_country"] = address_country.to_s if !address_country.nil?
      form_params["address_line1"] = address_line1.to_s if !address_line1.nil?
      form_params["address_line2"] = address_line2.to_s if !address_line2.nil?
      form_params["address_state"] = address_state.to_s if !address_state.nil?
      form_params["address_zip"] = address_zip.to_s if !address_zip.nil?
      form_params["default_for_currency"] = default_for_currency.to_s if !default_for_currency.nil?
      form_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      form_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing Account Capability.</p>
    # @param account [String]
    # @param capability [String]
    # @return [Capability]
    def post_accounts_account_capabilities_capability(*, account : String, capability : String, expand : Array(String)? = nil, requested : Bool? = nil)
      data, _status_code, _headers = post_accounts_account_capabilities_capability_with_http_info(account: account, capability: capability, expand: expand, requested: requested)
      data
    end

    # &lt;p&gt;Updates an existing Account Capability.&lt;/p&gt;
    # @param account [String]
    # @param capability [String]
    # @return [Array<(Capability, Integer, Hash)>] Capability data, response status code and response headers
    def post_accounts_account_capabilities_capability_with_http_info(*, account : String, capability : String, expand : Array(String)? = nil, requested : Bool? = nil)
      request = build_api_request_for_post_accounts_account_capabilities_capability(account: account, capability: capability, expand: expand, requested: requested)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_capabilities_capability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Capability.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing Account Capability.&lt;/p&gt;
    # @param account [String]
    # @param capability [String]
    # @return nil
    def post_accounts_account_capabilities_capability(*, account : String, capability : String, expand : Array(String)? = nil, requested : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_capabilities_capability(account: account, capability: capability, expand: expand, requested: requested).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_capabilities_capability(*, account : String, capability : String, expand : Array(String)? = nil, requested : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_capabilities_capability ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_capabilities_capability, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/capabilities/{capability}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "capability" + "}", URI.encode_path(capability.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["requested"] = requested.to_s if !requested.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_capabilities_capability",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create an external account for a given account.</p>
    # @param account [String]
    # @return [ExternalAccount]
    def post_accounts_account_external_accounts(*, account : String, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil)
      data, _status_code, _headers = post_accounts_account_external_accounts_with_http_info(account: account, bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account)
      data
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def post_accounts_account_external_accounts_with_http_info(*, account : String, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil)
      request = build_api_request_for_post_accounts_account_external_accounts(account: account, bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_external_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_accounts_account_external_accounts(*, account : String, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_external_accounts(account: account, bank_account: bank_account, default_for_currency: default_for_currency, expand: expand, external_account: external_account).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_external_accounts(*, account : String, bank_account : PostAccountRequestBankAccount? = nil, default_for_currency : Bool? = nil, expand : Array(String)? = nil, external_account : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_external_accounts ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_external_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !external_account.nil? && external_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"external_account\" when calling DefaultApi.post_accounts_account_external_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["default_for_currency"] = default_for_currency.to_s if !default_for_currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["external_account"] = external_account.to_s if !external_account.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_external_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
    # @param account [String]
    # @param id [String]
    # @return [ExternalAccount]
    def post_accounts_account_external_accounts_id(*, account : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      data, _status_code, _headers = post_accounts_account_external_accounts_id_with_http_info(account: account, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name)
      data
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return [Array<(ExternalAccount, Integer, Hash)>] ExternalAccount data, response status code and response headers
    def post_accounts_account_external_accounts_id_with_http_info(*, account : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      request = build_api_request_for_post_accounts_account_external_accounts_id(account: account, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_external_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ExternalAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a &lt;a href&#x3D;\&quot;/docs/connect/custom-accounts\&quot;&gt;Custom account&lt;/a&gt;, and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
    # @param account [String]
    # @param id [String]
    # @return nil
    def post_accounts_account_external_accounts_id(*, account : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_external_accounts_id(account: account, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, account_type: account_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, default_for_currency: default_for_currency, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_external_accounts_id(*, account : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, account_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, default_for_currency : Bool? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_external_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !account_holder_name.nil? && account_holder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_name\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["", "company", "individual"]
      if @api_client.config.client_side_validation && !account_holder_type.nil? && !allowable_values.includes?(account_holder_type)
        raise ArgumentError.new("invalid value for \"account_holder_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_holder_type.nil? && account_holder_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_type\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["checking", "futsu", "savings", "toza"]
      if @api_client.config.client_side_validation && !account_type.nil? && !allowable_values.includes?(account_type)
        raise ArgumentError.new("invalid value for \"account_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_type.nil? && account_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_type\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_city.nil? && address_city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_city\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_country.nil? && address_country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_country\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line1.nil? && address_line1.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line1\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line2.nil? && address_line2.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line2\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_state.nil? && address_state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_state\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_zip.nil? && address_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_zip\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_month.nil? && exp_month.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_month\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_year.nil? && exp_year.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_year\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_accounts_account_external_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/external_accounts/{id}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder_name"] = account_holder_name.to_s if !account_holder_name.nil?
      form_params["account_holder_type"] = account_holder_type.to_s if !account_holder_type.nil?
      form_params["account_type"] = account_type.to_s if !account_type.nil?
      form_params["address_city"] = address_city.to_s if !address_city.nil?
      form_params["address_country"] = address_country.to_s if !address_country.nil?
      form_params["address_line1"] = address_line1.to_s if !address_line1.nil?
      form_params["address_line2"] = address_line2.to_s if !address_line2.nil?
      form_params["address_state"] = address_state.to_s if !address_state.nil?
      form_params["address_zip"] = address_zip.to_s if !address_zip.nil?
      form_params["default_for_currency"] = default_for_currency.to_s if !default_for_currency.nil?
      form_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      form_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_external_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>  <p><strong>You may only create login links for <a href=\"/docs/connect/express-accounts\">Express accounts</a> connected to your platform</strong>.</p>
    # @param account [String]
    # @return [LoginLink]
    def post_accounts_account_login_links(*, account : String, expand : Array(String)? = nil, redirect_url : String? = nil)
      data, _status_code, _headers = post_accounts_account_login_links_with_http_info(account: account, expand: expand, redirect_url: redirect_url)
      data
    end

    # &lt;p&gt;Creates a single-use login link for an Express account to access their Stripe dashboard.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;You may only create login links for &lt;a href&#x3D;\&quot;/docs/connect/express-accounts\&quot;&gt;Express accounts&lt;/a&gt; connected to your platform&lt;/strong&gt;.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(LoginLink, Integer, Hash)>] LoginLink data, response status code and response headers
    def post_accounts_account_login_links_with_http_info(*, account : String, expand : Array(String)? = nil, redirect_url : String? = nil)
      request = build_api_request_for_post_accounts_account_login_links(account: account, expand: expand, redirect_url: redirect_url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_login_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return LoginLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a single-use login link for an Express account to access their Stripe dashboard.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;You may only create login links for &lt;a href&#x3D;\&quot;/docs/connect/express-accounts\&quot;&gt;Express accounts&lt;/a&gt; connected to your platform&lt;/strong&gt;.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_accounts_account_login_links(*, account : String, expand : Array(String)? = nil, redirect_url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_login_links(account: account, expand: expand, redirect_url: redirect_url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_login_links(*, account : String, expand : Array(String)? = nil, redirect_url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_login_links ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_login_links, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/login_links".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["redirect_url"] = redirect_url.to_s if !redirect_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_login_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new person.</p>
    # @param account [String]
    # @return [Person]
    def post_accounts_account_people(*, account : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      data, _status_code, _headers = post_accounts_account_people_with_http_info(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)
      data
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def post_accounts_account_people_with_http_info(*, account : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      request = build_api_request_for_post_accounts_account_people(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_people\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_accounts_account_people(*, account : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_people(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_people(*, account : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_people ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name.nil? && first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kana.nil? && first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kanji.nil? && first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number.nil? && id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number_secondary.nil? && id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name.nil? && last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kana.nil? && last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kanji.nil? && last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !maiden_name.nil? && maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nationality.nil? && nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !person_token.nil? && person_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person_token\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !political_exposure.nil? && political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\" when calling DefaultApi.post_accounts_account_people, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/people".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["address"] = address.to_s if !address.nil?
      form_params["address_kana"] = address_kana.to_s if !address_kana.nil?
      form_params["address_kanji"] = address_kanji.to_s if !address_kanji.nil?
      form_params["dob"] = dob.to_s if !dob.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["first_name"] = first_name.to_s if !first_name.nil?
      form_params["first_name_kana"] = first_name_kana.to_s if !first_name_kana.nil?
      form_params["first_name_kanji"] = first_name_kanji.to_s if !first_name_kanji.nil?
      form_params["full_name_aliases"] = full_name_aliases.to_s if !full_name_aliases.nil?
      form_params["gender"] = gender.to_s if !gender.nil?
      form_params["id_number"] = id_number.to_s if !id_number.nil?
      form_params["id_number_secondary"] = id_number_secondary.to_s if !id_number_secondary.nil?
      form_params["last_name"] = last_name.to_s if !last_name.nil?
      form_params["last_name_kana"] = last_name_kana.to_s if !last_name_kana.nil?
      form_params["last_name_kanji"] = last_name_kanji.to_s if !last_name_kanji.nil?
      form_params["maiden_name"] = maiden_name.to_s if !maiden_name.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nationality"] = nationality.to_s if !nationality.nil?
      form_params["person_token"] = person_token.to_s if !person_token.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["political_exposure"] = political_exposure.to_s if !political_exposure.nil?
      form_params["registered_address"] = registered_address.to_s if !registered_address.nil?
      form_params["relationship"] = relationship.to_s if !relationship.nil?
      form_params["ssn_last_4"] = ssn_last_4.to_s if !ssn_last_4.nil?
      form_params["verification"] = verification.to_s if !verification.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_people",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing person.</p>
    # @param account [String]
    # @param person [String]
    # @return [Person]
    def post_accounts_account_people_person(*, account : String, person : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      data, _status_code, _headers = post_accounts_account_people_person_with_http_info(account: account, person: person, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)
      data
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def post_accounts_account_people_person_with_http_info(*, account : String, person : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      request = build_api_request_for_post_accounts_account_people_person(account: account, person: person, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_people_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return nil
    def post_accounts_account_people_person(*, account : String, person : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_people_person(account: account, person: person, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_people_person(*, account : String, person : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_people_person ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name.nil? && first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kana.nil? && first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kanji.nil? && first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number.nil? && id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number_secondary.nil? && id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name.nil? && last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kana.nil? && last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kanji.nil? && last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !maiden_name.nil? && maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nationality.nil? && nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !person_token.nil? && person_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person_token\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !political_exposure.nil? && political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\" when calling DefaultApi.post_accounts_account_people_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/people/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["address"] = address.to_s if !address.nil?
      form_params["address_kana"] = address_kana.to_s if !address_kana.nil?
      form_params["address_kanji"] = address_kanji.to_s if !address_kanji.nil?
      form_params["dob"] = dob.to_s if !dob.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["first_name"] = first_name.to_s if !first_name.nil?
      form_params["first_name_kana"] = first_name_kana.to_s if !first_name_kana.nil?
      form_params["first_name_kanji"] = first_name_kanji.to_s if !first_name_kanji.nil?
      form_params["full_name_aliases"] = full_name_aliases.to_s if !full_name_aliases.nil?
      form_params["gender"] = gender.to_s if !gender.nil?
      form_params["id_number"] = id_number.to_s if !id_number.nil?
      form_params["id_number_secondary"] = id_number_secondary.to_s if !id_number_secondary.nil?
      form_params["last_name"] = last_name.to_s if !last_name.nil?
      form_params["last_name_kana"] = last_name_kana.to_s if !last_name_kana.nil?
      form_params["last_name_kanji"] = last_name_kanji.to_s if !last_name_kanji.nil?
      form_params["maiden_name"] = maiden_name.to_s if !maiden_name.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nationality"] = nationality.to_s if !nationality.nil?
      form_params["person_token"] = person_token.to_s if !person_token.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["political_exposure"] = political_exposure.to_s if !political_exposure.nil?
      form_params["registered_address"] = registered_address.to_s if !registered_address.nil?
      form_params["relationship"] = relationship.to_s if !relationship.nil?
      form_params["ssn_last_4"] = ssn_last_4.to_s if !ssn_last_4.nil?
      form_params["verification"] = verification.to_s if !verification.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_people_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new person.</p>
    # @param account [String]
    # @return [Person]
    def post_accounts_account_persons(*, account : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      data, _status_code, _headers = post_accounts_account_persons_with_http_info(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)
      data
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @param account [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def post_accounts_account_persons_with_http_info(*, account : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      request = build_api_request_for_post_accounts_account_persons(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_persons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new person.&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_accounts_account_persons(*, account : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_persons(account: account, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_persons(*, account : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_persons ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name.nil? && first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kana.nil? && first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kanji.nil? && first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number.nil? && id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number_secondary.nil? && id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name.nil? && last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kana.nil? && last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kanji.nil? && last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !maiden_name.nil? && maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nationality.nil? && nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !person_token.nil? && person_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person_token\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !political_exposure.nil? && political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\" when calling DefaultApi.post_accounts_account_persons, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["address"] = address.to_s if !address.nil?
      form_params["address_kana"] = address_kana.to_s if !address_kana.nil?
      form_params["address_kanji"] = address_kanji.to_s if !address_kanji.nil?
      form_params["dob"] = dob.to_s if !dob.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["first_name"] = first_name.to_s if !first_name.nil?
      form_params["first_name_kana"] = first_name_kana.to_s if !first_name_kana.nil?
      form_params["first_name_kanji"] = first_name_kanji.to_s if !first_name_kanji.nil?
      form_params["full_name_aliases"] = full_name_aliases.to_s if !full_name_aliases.nil?
      form_params["gender"] = gender.to_s if !gender.nil?
      form_params["id_number"] = id_number.to_s if !id_number.nil?
      form_params["id_number_secondary"] = id_number_secondary.to_s if !id_number_secondary.nil?
      form_params["last_name"] = last_name.to_s if !last_name.nil?
      form_params["last_name_kana"] = last_name_kana.to_s if !last_name_kana.nil?
      form_params["last_name_kanji"] = last_name_kanji.to_s if !last_name_kanji.nil?
      form_params["maiden_name"] = maiden_name.to_s if !maiden_name.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nationality"] = nationality.to_s if !nationality.nil?
      form_params["person_token"] = person_token.to_s if !person_token.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["political_exposure"] = political_exposure.to_s if !political_exposure.nil?
      form_params["registered_address"] = registered_address.to_s if !registered_address.nil?
      form_params["relationship"] = relationship.to_s if !relationship.nil?
      form_params["ssn_last_4"] = ssn_last_4.to_s if !ssn_last_4.nil?
      form_params["verification"] = verification.to_s if !verification.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_persons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing person.</p>
    # @param account [String]
    # @param person [String]
    # @return [Person]
    def post_accounts_account_persons_person(*, account : String, person : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      data, _status_code, _headers = post_accounts_account_persons_person_with_http_info(account: account, person: person, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)
      data
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return [Array<(Person, Integer, Hash)>] Person data, response status code and response headers
    def post_accounts_account_persons_person_with_http_info(*, account : String, person : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil)
      request = build_api_request_for_post_accounts_account_persons_person(account: account, person: person, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_persons_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Person.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing person.&lt;/p&gt;
    # @param account [String]
    # @param person [String]
    # @return nil
    def post_accounts_account_persons_person(*, account : String, person : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_persons_person(account: account, person: person, address: address, address_kana: address_kana, address_kanji: address_kanji, dob: dob, documents: documents, email: email, expand: expand, first_name: first_name, first_name_kana: first_name_kana, first_name_kanji: first_name_kanji, full_name_aliases: full_name_aliases, gender: gender, id_number: id_number, id_number_secondary: id_number_secondary, last_name: last_name, last_name_kana: last_name_kana, last_name_kanji: last_name_kanji, maiden_name: maiden_name, metadata: metadata, nationality: nationality, person_token: person_token, phone: phone, political_exposure: political_exposure, registered_address: registered_address, relationship: relationship, ssn_last_4: ssn_last_4, verification: verification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_persons_person(*, account : String, person : String, address : AddressSpecs1? = nil, address_kana : JapanAddressKanaSpecs1? = nil, address_kanji : JapanAddressKanjiSpecs1? = nil, dob : PostAccountPeopleRequestDob? = nil, documents : PersonDocumentsSpecs? = nil, email : String? = nil, expand : Array(String)? = nil, first_name : String? = nil, first_name_kana : String? = nil, first_name_kanji : String? = nil, full_name_aliases : PostAccountPeopleRequestFullNameAliases? = nil, gender : String? = nil, id_number : String? = nil, id_number_secondary : String? = nil, last_name : String? = nil, last_name_kana : String? = nil, last_name_kanji : String? = nil, maiden_name : String? = nil, metadata : PostAccountRequestMetadata? = nil, nationality : String? = nil, person_token : String? = nil, phone : String? = nil, political_exposure : String? = nil, registered_address : AddressSpecs2? = nil, relationship : RelationshipSpecs? = nil, ssn_last_4 : String? = nil, verification : PersonVerificationSpecs1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_persons_person ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && person.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name.nil? && first_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kana.nil? && first_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kana\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !first_name_kanji.nil? && first_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"first_name_kanji\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number.nil? && id_number.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !id_number_secondary.nil? && id_number_secondary.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id_number_secondary\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name.nil? && last_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kana.nil? && last_name_kana.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kana\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !last_name_kanji.nil? && last_name_kanji.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"last_name_kanji\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !maiden_name.nil? && maiden_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"maiden_name\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nationality.nil? && nationality.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nationality\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !person_token.nil? && person_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"person_token\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !political_exposure.nil? && political_exposure.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"political_exposure\" when calling DefaultApi.post_accounts_account_persons_person, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/persons/{person}".sub("{" + "account" + "}", URI.encode_path(account.to_s)).sub("{" + "person" + "}", URI.encode_path(person.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["address"] = address.to_s if !address.nil?
      form_params["address_kana"] = address_kana.to_s if !address_kana.nil?
      form_params["address_kanji"] = address_kanji.to_s if !address_kanji.nil?
      form_params["dob"] = dob.to_s if !dob.nil?
      form_params["documents"] = documents.to_s if !documents.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["first_name"] = first_name.to_s if !first_name.nil?
      form_params["first_name_kana"] = first_name_kana.to_s if !first_name_kana.nil?
      form_params["first_name_kanji"] = first_name_kanji.to_s if !first_name_kanji.nil?
      form_params["full_name_aliases"] = full_name_aliases.to_s if !full_name_aliases.nil?
      form_params["gender"] = gender.to_s if !gender.nil?
      form_params["id_number"] = id_number.to_s if !id_number.nil?
      form_params["id_number_secondary"] = id_number_secondary.to_s if !id_number_secondary.nil?
      form_params["last_name"] = last_name.to_s if !last_name.nil?
      form_params["last_name_kana"] = last_name_kana.to_s if !last_name_kana.nil?
      form_params["last_name_kanji"] = last_name_kanji.to_s if !last_name_kanji.nil?
      form_params["maiden_name"] = maiden_name.to_s if !maiden_name.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nationality"] = nationality.to_s if !nationality.nil?
      form_params["person_token"] = person_token.to_s if !person_token.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["political_exposure"] = political_exposure.to_s if !political_exposure.nil?
      form_params["registered_address"] = registered_address.to_s if !registered_address.nil?
      form_params["relationship"] = relationship.to_s if !relationship.nil?
      form_params["ssn_last_4"] = ssn_last_4.to_s if !ssn_last_4.nil?
      form_params["verification"] = verification.to_s if !verification.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_persons_person",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>With <a href=\"/docs/connect\">Connect</a>, you may flag accounts as suspicious.</p>  <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
    # @param account [String]
    # @param reason [String] The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.
    # @return [Account]
    def post_accounts_account_reject(*, account : String, reason : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_accounts_account_reject_with_http_info(account: account, reason: reason, expand: expand)
      data
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you may flag accounts as suspicious.&lt;/p&gt;  &lt;p&gt;Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.&lt;/p&gt;
    # @param account [String]
    # @param reason [String] The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def post_accounts_account_reject_with_http_info(*, account : String, reason : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_accounts_account_reject(account: account, reason: reason, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_accounts_account_reject\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Account.from_json(data), status_code, headers
    end

    # &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you may flag accounts as suspicious.&lt;/p&gt;  &lt;p&gt;Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.&lt;/p&gt;
    # @param account [String]
    # @param reason [String] The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.
    # @return nil
    def post_accounts_account_reject(*, account : String, reason : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_accounts_account_reject(account: account, reason: reason, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_accounts_account_reject(*, account : String, reason : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_accounts_account_reject ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_accounts_account_reject, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reason\" when calling DefaultApi.post_accounts_account_reject, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/accounts/{account}/reject".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["reason"] = reason.to_s if !reason.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_accounts_account_reject",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create an apple pay domain.</p>
    # @param domain_name [String]
    # @return [ApplePayDomain]
    def post_apple_pay_domains(*, domain_name : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_apple_pay_domains_with_http_info(domain_name: domain_name, expand: expand)
      data
    end

    # &lt;p&gt;Create an apple pay domain.&lt;/p&gt;
    # @param domain_name [String]
    # @return [Array<(ApplePayDomain, Integer, Hash)>] ApplePayDomain data, response status code and response headers
    def post_apple_pay_domains_with_http_info(*, domain_name : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_apple_pay_domains(domain_name: domain_name, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_apple_pay_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ApplePayDomain.from_json(data), status_code, headers
    end

    # &lt;p&gt;Create an apple pay domain.&lt;/p&gt;
    # @param domain_name [String]
    # @return nil
    def post_apple_pay_domains(*, domain_name : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_apple_pay_domains(domain_name: domain_name, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_apple_pay_domains(*, domain_name : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_apple_pay_domains ..." }
      end
      # resource path
      local_var_path = "/v1/apple_pay/domains"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["domain_name"] = domain_name.to_s if !domain_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_apple_pay_domains",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request only accepts metadata as an argument.</p>
    # @param fee [String]
    # @param id [String]
    # @return [FeeRefund]
    def post_application_fees_fee_refunds_id(*, fee : String, id : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_application_fees_fee_refunds_id_with_http_info(fee: fee, id: id, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata as an argument.&lt;/p&gt;
    # @param fee [String]
    # @param id [String]
    # @return [Array<(FeeRefund, Integer, Hash)>] FeeRefund data, response status code and response headers
    def post_application_fees_fee_refunds_id_with_http_info(*, fee : String, id : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_application_fees_fee_refunds_id(fee: fee, id: id, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_application_fees_fee_refunds_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FeeRefund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata as an argument.&lt;/p&gt;
    # @param fee [String]
    # @param id [String]
    # @return nil
    def post_application_fees_fee_refunds_id(*, fee : String, id : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_application_fees_fee_refunds_id(fee: fee, id: id, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_application_fees_fee_refunds_id(*, fee : String, id : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_application_fees_fee_refunds_id ..." }
      end
      if @api_client.config.client_side_validation && fee.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"fee\" when calling DefaultApi.post_application_fees_fee_refunds_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_application_fees_fee_refunds_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/application_fees/{fee}/refunds/{id}".sub("{" + "fee" + "}", URI.encode_path(fee.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_application_fees_fee_refunds_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # 
    # @param id [String]
    # @return [ApplicationFee]
    def post_application_fees_id_refund(*, id : String, amount : Int64? = nil, directive : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_application_fees_id_refund_with_http_info(id: id, amount: amount, directive: directive, expand: expand)
      data
    end

    # 
    # @param id [String]
    # @return [Array<(ApplicationFee, Integer, Hash)>] ApplicationFee data, response status code and response headers
    def post_application_fees_id_refund_with_http_info(*, id : String, amount : Int64? = nil, directive : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_application_fees_id_refund(id: id, amount: amount, directive: directive, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_application_fees_id_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ApplicationFee.from_json(data), status_code, headers
    end

    # 
    # @param id [String]
    # @return nil
    def post_application_fees_id_refund(*, id : String, amount : Int64? = nil, directive : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_application_fees_id_refund(id: id, amount: amount, directive: directive, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_application_fees_id_refund(*, id : String, amount : Int64? = nil, directive : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_application_fees_id_refund ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_application_fees_id_refund, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !directive.nil? && directive.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"directive\" when calling DefaultApi.post_application_fees_id_refund, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/application_fees/{id}/refund".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["directive"] = directive.to_s if !directive.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_application_fees_id_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.</p>  <p>You can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.</p>  <p>Once entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.</p>
    # @param id [String]
    # @return [FeeRefund]
    def post_application_fees_id_refunds(*, id : String, amount : Int64? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_application_fees_id_refunds_with_http_info(id: id, amount: amount, expand: expand)
      data
    end

    # &lt;p&gt;Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(FeeRefund, Integer, Hash)>] FeeRefund data, response status code and response headers
    def post_application_fees_id_refunds_with_http_info(*, id : String, amount : Int64? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_application_fees_id_refunds(id: id, amount: amount, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_application_fees_id_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FeeRefund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_application_fees_id_refunds(*, id : String, amount : Int64? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_application_fees_id_refunds(id: id, amount: amount, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_application_fees_id_refunds(*, id : String, amount : Int64? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_application_fees_id_refunds ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_application_fees_id_refunds, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/application_fees/{id}/refunds".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_application_fees_id_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create or replace a secret in the secret store.</p>
    # @param name [String] A name for the secret that's unique within the scope.
    # @param payload [String] The plaintext secret value to be stored.
    # @param scope [ScopeParam1]
    # @return [AppsSecret]
    def post_apps_secrets(*, name : String, payload : String, scope : ScopeParam1, expand : Array(String)? = nil)
      data, _status_code, _headers = post_apps_secrets_with_http_info(name: name, payload: payload, scope: scope, expand: expand)
      data
    end

    # &lt;p&gt;Create or replace a secret in the secret store.&lt;/p&gt;
    # @param name [String] A name for the secret that's unique within the scope.
    # @param payload [String] The plaintext secret value to be stored.
    # @param scope [ScopeParam1]
    # @return [Array<(AppsSecret, Integer, Hash)>] AppsSecret data, response status code and response headers
    def post_apps_secrets_with_http_info(*, name : String, payload : String, scope : ScopeParam1, expand : Array(String)? = nil)
      request = build_api_request_for_post_apps_secrets(name: name, payload: payload, scope: scope, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_apps_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return AppsSecret.from_json(data), status_code, headers
    end

    # &lt;p&gt;Create or replace a secret in the secret store.&lt;/p&gt;
    # @param name [String] A name for the secret that's unique within the scope.
    # @param payload [String] The plaintext secret value to be stored.
    # @param scope [ScopeParam1]
    # @return nil
    def post_apps_secrets(*, name : String, payload : String, scope : ScopeParam1, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_apps_secrets(name: name, payload: payload, scope: scope, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_apps_secrets(*, name : String, payload : String, scope : ScopeParam1, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_apps_secrets ..." }
      end
      if @api_client.config.client_side_validation && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_apps_secrets, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && payload.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payload\" when calling DefaultApi.post_apps_secrets, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/apps/secrets"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["name"] = name.to_s if !name.nil?
      form_params["payload"] = payload.to_s if !payload.nil?
      form_params["scope"] = scope.to_s if !scope.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_apps_secrets",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Deletes a secret from the secret store by name and scope.</p>
    # @param name [String] A name for the secret that's unique within the scope.
    # @param scope [ScopeParam1]
    # @return [AppsSecret]
    def post_apps_secrets_delete(*, name : String, scope : ScopeParam1, expand : Array(String)? = nil)
      data, _status_code, _headers = post_apps_secrets_delete_with_http_info(name: name, scope: scope, expand: expand)
      data
    end

    # &lt;p&gt;Deletes a secret from the secret store by name and scope.&lt;/p&gt;
    # @param name [String] A name for the secret that's unique within the scope.
    # @param scope [ScopeParam1]
    # @return [Array<(AppsSecret, Integer, Hash)>] AppsSecret data, response status code and response headers
    def post_apps_secrets_delete_with_http_info(*, name : String, scope : ScopeParam1, expand : Array(String)? = nil)
      request = build_api_request_for_post_apps_secrets_delete(name: name, scope: scope, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_apps_secrets_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return AppsSecret.from_json(data), status_code, headers
    end

    # &lt;p&gt;Deletes a secret from the secret store by name and scope.&lt;/p&gt;
    # @param name [String] A name for the secret that's unique within the scope.
    # @param scope [ScopeParam1]
    # @return nil
    def post_apps_secrets_delete(*, name : String, scope : ScopeParam1, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_apps_secrets_delete(name: name, scope: scope, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_apps_secrets_delete(*, name : String, scope : ScopeParam1, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_apps_secrets_delete ..." }
      end
      if @api_client.config.client_side_validation && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_apps_secrets_delete, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/apps/secrets/delete"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["name"] = name.to_s if !name.nil?
      form_params["scope"] = scope.to_s if !scope.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_apps_secrets_delete",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
    # @param business_profile [BusinessProfileCreateParam]
    # @param features [FeaturesCreationParam]
    # @return [BillingPortalConfiguration]
    def post_billing_portal_configurations(*, business_profile : BusinessProfileCreateParam, features : FeaturesCreationParam, default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_billing_portal_configurations_with_http_info(business_profile: business_profile, features: features, default_return_url: default_return_url, expand: expand)
      data
    end

    # &lt;p&gt;Creates a configuration that describes the functionality and behavior of a PortalSession&lt;/p&gt;
    # @param business_profile [BusinessProfileCreateParam]
    # @param features [FeaturesCreationParam]
    # @return [Array<(BillingPortalConfiguration, Integer, Hash)>] BillingPortalConfiguration data, response status code and response headers
    def post_billing_portal_configurations_with_http_info(*, business_profile : BusinessProfileCreateParam, features : FeaturesCreationParam, default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_billing_portal_configurations(business_profile: business_profile, features: features, default_return_url: default_return_url, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_billing_portal_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BillingPortalConfiguration.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a configuration that describes the functionality and behavior of a PortalSession&lt;/p&gt;
    # @param business_profile [BusinessProfileCreateParam]
    # @param features [FeaturesCreationParam]
    # @return nil
    def post_billing_portal_configurations(*, business_profile : BusinessProfileCreateParam, features : FeaturesCreationParam, default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_billing_portal_configurations(business_profile: business_profile, features: features, default_return_url: default_return_url, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_billing_portal_configurations(*, business_profile : BusinessProfileCreateParam, features : FeaturesCreationParam, default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_billing_portal_configurations ..." }
      end
      # resource path
      local_var_path = "/v1/billing_portal/configurations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["business_profile"] = business_profile.to_s if !business_profile.nil?
      form_params["default_return_url"] = default_return_url.to_s if !default_return_url.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = features.to_s if !features.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_billing_portal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a configuration that describes the functionality of the customer portal.</p>
    # @param configuration [String]
    # @return [BillingPortalConfiguration]
    def post_billing_portal_configurations_configuration(*, configuration : String, active : Bool? = nil, business_profile : BusinessProfileUpdateParam? = nil, default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, expand : Array(String)? = nil, features : FeaturesUpdatingParam? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_billing_portal_configurations_configuration_with_http_info(configuration: configuration, active: active, business_profile: business_profile, default_return_url: default_return_url, expand: expand, features: features, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates a configuration that describes the functionality of the customer portal.&lt;/p&gt;
    # @param configuration [String]
    # @return [Array<(BillingPortalConfiguration, Integer, Hash)>] BillingPortalConfiguration data, response status code and response headers
    def post_billing_portal_configurations_configuration_with_http_info(*, configuration : String, active : Bool? = nil, business_profile : BusinessProfileUpdateParam? = nil, default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, expand : Array(String)? = nil, features : FeaturesUpdatingParam? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_billing_portal_configurations_configuration(configuration: configuration, active: active, business_profile: business_profile, default_return_url: default_return_url, expand: expand, features: features, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_billing_portal_configurations_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BillingPortalConfiguration.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a configuration that describes the functionality of the customer portal.&lt;/p&gt;
    # @param configuration [String]
    # @return nil
    def post_billing_portal_configurations_configuration(*, configuration : String, active : Bool? = nil, business_profile : BusinessProfileUpdateParam? = nil, default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, expand : Array(String)? = nil, features : FeaturesUpdatingParam? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_billing_portal_configurations_configuration(configuration: configuration, active: active, business_profile: business_profile, default_return_url: default_return_url, expand: expand, features: features, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_billing_portal_configurations_configuration(*, configuration : String, active : Bool? = nil, business_profile : BusinessProfileUpdateParam? = nil, default_return_url : PostBillingPortalConfigurationsRequestDefaultReturnUrl? = nil, expand : Array(String)? = nil, features : FeaturesUpdatingParam? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_billing_portal_configurations_configuration ..." }
      end
      if @api_client.config.client_side_validation && configuration.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"configuration\" when calling DefaultApi.post_billing_portal_configurations_configuration, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/billing_portal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["business_profile"] = business_profile.to_s if !business_profile.nil?
      form_params["default_return_url"] = default_return_url.to_s if !default_return_url.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = features.to_s if !features.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_billing_portal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a session of the customer portal.</p>
    # @param customer [String] The ID of an existing customer.
    # @return [BillingPortalSession]
    def post_billing_portal_sessions(*, customer : String, configuration : String? = nil, expand : Array(String)? = nil, locale : String? = nil, on_behalf_of : String? = nil, return_url : String? = nil)
      data, _status_code, _headers = post_billing_portal_sessions_with_http_info(customer: customer, configuration: configuration, expand: expand, locale: locale, on_behalf_of: on_behalf_of, return_url: return_url)
      data
    end

    # &lt;p&gt;Creates a session of the customer portal.&lt;/p&gt;
    # @param customer [String] The ID of an existing customer.
    # @return [Array<(BillingPortalSession, Integer, Hash)>] BillingPortalSession data, response status code and response headers
    def post_billing_portal_sessions_with_http_info(*, customer : String, configuration : String? = nil, expand : Array(String)? = nil, locale : String? = nil, on_behalf_of : String? = nil, return_url : String? = nil)
      request = build_api_request_for_post_billing_portal_sessions(customer: customer, configuration: configuration, expand: expand, locale: locale, on_behalf_of: on_behalf_of, return_url: return_url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_billing_portal_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BillingPortalSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a session of the customer portal.&lt;/p&gt;
    # @param customer [String] The ID of an existing customer.
    # @return nil
    def post_billing_portal_sessions(*, customer : String, configuration : String? = nil, expand : Array(String)? = nil, locale : String? = nil, on_behalf_of : String? = nil, return_url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_billing_portal_sessions(customer: customer, configuration: configuration, expand: expand, locale: locale, on_behalf_of: on_behalf_of, return_url: return_url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_billing_portal_sessions(*, customer : String, configuration : String? = nil, expand : Array(String)? = nil, locale : String? = nil, on_behalf_of : String? = nil, return_url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_billing_portal_sessions ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_billing_portal_sessions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !configuration.nil? && configuration.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"configuration\" when calling DefaultApi.post_billing_portal_sessions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["auto", "bg", "cs", "da", "de", "el", "en", "en-AU", "en-CA", "en-GB", "en-IE", "en-IN", "en-NZ", "en-SG", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW"]
      if @api_client.config.client_side_validation && !locale.nil? && !allowable_values.includes?(locale)
        raise ArgumentError.new("invalid value for \"locale\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/billing_portal/sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["configuration"] = configuration.to_s if !configuration.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["locale"] = locale.to_s if !locale.nil?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_billing_portal_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p>
    # @return [Charge]
    def post_charges(*, amount : Int64? = nil, application_fee : Int64? = nil, application_fee_amount : Int64? = nil, capture : Bool? = nil, card : PostChargesRequestCard? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, destination : PostChargesRequestDestination? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : String? = nil, radar_options : RadarOptions? = nil, receipt_email : String? = nil, shipping : OptionalFieldsShipping? = nil, source : String? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataSpecs? = nil, transfer_group : String? = nil)
      data, _status_code, _headers = post_charges_with_http_info(amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, capture: capture, card: card, currency: currency, customer: customer, description: description, destination: destination, expand: expand, metadata: metadata, on_behalf_of: on_behalf_of, radar_options: radar_options, receipt_email: receipt_email, shipping: shipping, source: source, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;To charge a credit card or other payment source, you create a &lt;code&gt;Charge&lt;/code&gt; object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).&lt;/p&gt;
    # @return [Array<(Charge, Integer, Hash)>] Charge data, response status code and response headers
    def post_charges_with_http_info(*, amount : Int64? = nil, application_fee : Int64? = nil, application_fee_amount : Int64? = nil, capture : Bool? = nil, card : PostChargesRequestCard? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, destination : PostChargesRequestDestination? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : String? = nil, radar_options : RadarOptions? = nil, receipt_email : String? = nil, shipping : OptionalFieldsShipping? = nil, source : String? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataSpecs? = nil, transfer_group : String? = nil)
      request = build_api_request_for_post_charges(amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, capture: capture, card: card, currency: currency, customer: customer, description: description, destination: destination, expand: expand, metadata: metadata, on_behalf_of: on_behalf_of, radar_options: radar_options, receipt_email: receipt_email, shipping: shipping, source: source, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Charge.from_json(data), status_code, headers
    end

    # &lt;p&gt;To charge a credit card or other payment source, you create a &lt;code&gt;Charge&lt;/code&gt; object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).&lt;/p&gt;
    # @return nil
    def post_charges(*, amount : Int64? = nil, application_fee : Int64? = nil, application_fee_amount : Int64? = nil, capture : Bool? = nil, card : PostChargesRequestCard? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, destination : PostChargesRequestDestination? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : String? = nil, radar_options : RadarOptions? = nil, receipt_email : String? = nil, shipping : OptionalFieldsShipping? = nil, source : String? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataSpecs? = nil, transfer_group : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_charges(amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, capture: capture, card: card, currency: currency, customer: customer, description: description, destination: destination, expand: expand, metadata: metadata, on_behalf_of: on_behalf_of, radar_options: radar_options, receipt_email: receipt_email, shipping: shipping, source: source, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges(*, amount : Int64? = nil, application_fee : Int64? = nil, application_fee_amount : Int64? = nil, capture : Bool? = nil, card : PostChargesRequestCard? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, destination : PostChargesRequestDestination? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : String? = nil, radar_options : RadarOptions? = nil, receipt_email : String? = nil, shipping : OptionalFieldsShipping? = nil, source : String? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataSpecs? = nil, transfer_group : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_charges ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 500
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_charges, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_charges, the character length must be smaller than or equal to 40000.")
      end

      if @api_client.config.client_side_validation && !on_behalf_of.nil? && on_behalf_of.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"on_behalf_of\" when calling DefaultApi.post_charges, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_charges, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_charges, the character length must be smaller than or equal to 22.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor_suffix.nil? && statement_descriptor_suffix.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\" when calling DefaultApi.post_charges, the character length must be smaller than or equal to 22.")
      end

      # resource path
      local_var_path = "/v1/charges"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["application_fee"] = application_fee.to_s if !application_fee.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["capture"] = capture.to_s if !capture.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["destination"] = destination.to_s if !destination.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["radar_options"] = radar_options.to_s if !radar_options.nil?
      form_params["receipt_email"] = receipt_email.to_s if !receipt_email.nil?
      form_params["shipping"] = shipping.to_s if !shipping.nil?
      form_params["source"] = source.to_s if !source.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["statement_descriptor_suffix"] = statement_descriptor_suffix.to_s if !statement_descriptor_suffix.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?
      form_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_charges",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param charge [String]
    # @return [Charge]
    def post_charges_charge(*, charge : String, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, fraud_details : FraudDetails? = nil, metadata : PostAccountRequestMetadata? = nil, receipt_email : String? = nil, shipping : OptionalFieldsShipping? = nil, transfer_group : String? = nil)
      data, _status_code, _headers = post_charges_charge_with_http_info(charge: charge, customer: customer, description: description, expand: expand, fraud_details: fraud_details, metadata: metadata, receipt_email: receipt_email, shipping: shipping, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param charge [String]
    # @return [Array<(Charge, Integer, Hash)>] Charge data, response status code and response headers
    def post_charges_charge_with_http_info(*, charge : String, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, fraud_details : FraudDetails? = nil, metadata : PostAccountRequestMetadata? = nil, receipt_email : String? = nil, shipping : OptionalFieldsShipping? = nil, transfer_group : String? = nil)
      request = build_api_request_for_post_charges_charge(charge: charge, customer: customer, description: description, expand: expand, fraud_details: fraud_details, metadata: metadata, receipt_email: receipt_email, shipping: shipping, transfer_group: transfer_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_charges_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Charge.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param charge [String]
    # @return nil
    def post_charges_charge(*, charge : String, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, fraud_details : FraudDetails? = nil, metadata : PostAccountRequestMetadata? = nil, receipt_email : String? = nil, shipping : OptionalFieldsShipping? = nil, transfer_group : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_charges_charge(charge: charge, customer: customer, description: description, expand: expand, fraud_details: fraud_details, metadata: metadata, receipt_email: receipt_email, shipping: shipping, transfer_group: transfer_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges_charge(*, charge : String, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, fraud_details : FraudDetails? = nil, metadata : PostAccountRequestMetadata? = nil, receipt_email : String? = nil, shipping : OptionalFieldsShipping? = nil, transfer_group : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_charges_charge ..." }
      end
      if @api_client.config.client_side_validation && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.post_charges_charge, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_charges_charge, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_charges_charge, the character length must be smaller than or equal to 40000.")
      end

      if @api_client.config.client_side_validation && !receipt_email.nil? && receipt_email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"receipt_email\" when calling DefaultApi.post_charges_charge, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges/{charge}".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["fraud_details"] = fraud_details.to_s if !fraud_details.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["receipt_email"] = receipt_email.to_s if !receipt_email.nil?
      form_params["shipping"] = shipping.to_s if !shipping.nil?
      form_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_charges_charge",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href=\"#create_charge\">created a charge</a> with the capture option set to false.</p>  <p>Uncaptured payments expire a set number of days after they are created (<a href=\"/docs/charges/placing-a-hold\">7 by default</a>). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
    # @param charge [String]
    # @return [Charge]
    def post_charges_charge_capture(*, charge : String, amount : Int64? = nil, application_fee : Int64? = nil, application_fee_amount : Int64? = nil, expand : Array(String)? = nil, receipt_email : String? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataSpecs1? = nil, transfer_group : String? = nil)
      data, _status_code, _headers = post_charges_charge_capture_with_http_info(charge: charge, amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, expand: expand, receipt_email: receipt_email, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you &lt;a href&#x3D;\&quot;#create_charge\&quot;&gt;created a charge&lt;/a&gt; with the capture option set to false.&lt;/p&gt;  &lt;p&gt;Uncaptured payments expire a set number of days after they are created (&lt;a href&#x3D;\&quot;/docs/charges/placing-a-hold\&quot;&gt;7 by default&lt;/a&gt;). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.&lt;/p&gt;
    # @param charge [String]
    # @return [Array<(Charge, Integer, Hash)>] Charge data, response status code and response headers
    def post_charges_charge_capture_with_http_info(*, charge : String, amount : Int64? = nil, application_fee : Int64? = nil, application_fee_amount : Int64? = nil, expand : Array(String)? = nil, receipt_email : String? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataSpecs1? = nil, transfer_group : String? = nil)
      request = build_api_request_for_post_charges_charge_capture(charge: charge, amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, expand: expand, receipt_email: receipt_email, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_charges_charge_capture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Charge.from_json(data), status_code, headers
    end

    # &lt;p&gt;Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you &lt;a href&#x3D;\&quot;#create_charge\&quot;&gt;created a charge&lt;/a&gt; with the capture option set to false.&lt;/p&gt;  &lt;p&gt;Uncaptured payments expire a set number of days after they are created (&lt;a href&#x3D;\&quot;/docs/charges/placing-a-hold\&quot;&gt;7 by default&lt;/a&gt;). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.&lt;/p&gt;
    # @param charge [String]
    # @return nil
    def post_charges_charge_capture(*, charge : String, amount : Int64? = nil, application_fee : Int64? = nil, application_fee_amount : Int64? = nil, expand : Array(String)? = nil, receipt_email : String? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataSpecs1? = nil, transfer_group : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_charges_charge_capture(charge: charge, amount: amount, application_fee: application_fee, application_fee_amount: application_fee_amount, expand: expand, receipt_email: receipt_email, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges_charge_capture(*, charge : String, amount : Int64? = nil, application_fee : Int64? = nil, application_fee_amount : Int64? = nil, expand : Array(String)? = nil, receipt_email : String? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataSpecs1? = nil, transfer_group : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_charges_charge_capture ..." }
      end
      if @api_client.config.client_side_validation && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.post_charges_charge_capture, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_charges_charge_capture, the character length must be smaller than or equal to 22.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor_suffix.nil? && statement_descriptor_suffix.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\" when calling DefaultApi.post_charges_charge_capture, the character length must be smaller than or equal to 22.")
      end

      # resource path
      local_var_path = "/v1/charges/{charge}/capture".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["application_fee"] = application_fee.to_s if !application_fee.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["receipt_email"] = receipt_email.to_s if !receipt_email.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["statement_descriptor_suffix"] = statement_descriptor_suffix.to_s if !statement_descriptor_suffix.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?
      form_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_charges_charge_capture",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # 
    # @param charge [String]
    # @return [Dispute]
    def post_charges_charge_dispute(*, charge : String, evidence : DisputeEvidenceParams? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, submit : Bool? = nil)
      data, _status_code, _headers = post_charges_charge_dispute_with_http_info(charge: charge, evidence: evidence, expand: expand, metadata: metadata, submit: submit)
      data
    end

    # 
    # @param charge [String]
    # @return [Array<(Dispute, Integer, Hash)>] Dispute data, response status code and response headers
    def post_charges_charge_dispute_with_http_info(*, charge : String, evidence : DisputeEvidenceParams? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, submit : Bool? = nil)
      request = build_api_request_for_post_charges_charge_dispute(charge: charge, evidence: evidence, expand: expand, metadata: metadata, submit: submit)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_charges_charge_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Dispute.from_json(data), status_code, headers
    end

    # 
    # @param charge [String]
    # @return nil
    def post_charges_charge_dispute(*, charge : String, evidence : DisputeEvidenceParams? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, submit : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_charges_charge_dispute(charge: charge, evidence: evidence, expand: expand, metadata: metadata, submit: submit).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges_charge_dispute(*, charge : String, evidence : DisputeEvidenceParams? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, submit : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_charges_charge_dispute ..." }
      end
      if @api_client.config.client_side_validation && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.post_charges_charge_dispute, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges/{charge}/dispute".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["evidence"] = evidence.to_s if !evidence.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["submit"] = submit.to_s if !submit.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_charges_charge_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # 
    # @param charge [String]
    # @return [Dispute]
    def post_charges_charge_dispute_close(*, charge : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_charges_charge_dispute_close_with_http_info(charge: charge, expand: expand)
      data
    end

    # 
    # @param charge [String]
    # @return [Array<(Dispute, Integer, Hash)>] Dispute data, response status code and response headers
    def post_charges_charge_dispute_close_with_http_info(*, charge : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_charges_charge_dispute_close(charge: charge, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_charges_charge_dispute_close\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Dispute.from_json(data), status_code, headers
    end

    # 
    # @param charge [String]
    # @return nil
    def post_charges_charge_dispute_close(*, charge : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_charges_charge_dispute_close(charge: charge, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges_charge_dispute_close(*, charge : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_charges_charge_dispute_close ..." }
      end
      if @api_client.config.client_side_validation && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.post_charges_charge_dispute_close, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges/{charge}/dispute/close".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_charges_charge_dispute_close",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>  <p>Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.</p>  <p>You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.</p>  <p>Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.</p>
    # @param charge [String]
    # @return [Charge]
    def post_charges_charge_refund(*, charge : String, amount : Int64? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil)
      data, _status_code, _headers = post_charges_charge_refund_with_http_info(charge: charge, amount: amount, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer)
      data
    end

    # &lt;p&gt;When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.&lt;/p&gt;  &lt;p&gt;Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.&lt;/p&gt;
    # @param charge [String]
    # @return [Array<(Charge, Integer, Hash)>] Charge data, response status code and response headers
    def post_charges_charge_refund_with_http_info(*, charge : String, amount : Int64? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil)
      request = build_api_request_for_post_charges_charge_refund(charge: charge, amount: amount, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_charges_charge_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Charge.from_json(data), status_code, headers
    end

    # &lt;p&gt;When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.&lt;/p&gt;  &lt;p&gt;Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.&lt;/p&gt;
    # @param charge [String]
    # @return nil
    def post_charges_charge_refund(*, charge : String, amount : Int64? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_charges_charge_refund(charge: charge, amount: amount, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges_charge_refund(*, charge : String, amount : Int64? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_charges_charge_refund ..." }
      end
      if @api_client.config.client_side_validation && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.post_charges_charge_refund, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_intent.nil? && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.post_charges_charge_refund, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["duplicate", "fraudulent", "requested_by_customer"]
      if @api_client.config.client_side_validation && !reason.nil? && !allowable_values.includes?(reason)
        raise ArgumentError.new("invalid value for \"reason\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !reason.nil? && reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reason\" when calling DefaultApi.post_charges_charge_refund, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges/{charge}/refund".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["instructions_email"] = instructions_email.to_s if !instructions_email.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      form_params["reason"] = reason.to_s if !reason.nil?
      form_params["refund_application_fee"] = refund_application_fee.to_s if !refund_application_fee.nil?
      form_params["reverse_transfer"] = reverse_transfer.to_s if !reverse_transfer.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_charges_charge_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create a refund.</p>
    # @param charge [String]
    # @return [Refund]
    def post_charges_charge_refunds(*, charge : String, amount : Int64? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil)
      data, _status_code, _headers = post_charges_charge_refunds_with_http_info(charge: charge, amount: amount, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer)
      data
    end

    # &lt;p&gt;Create a refund.&lt;/p&gt;
    # @param charge [String]
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def post_charges_charge_refunds_with_http_info(*, charge : String, amount : Int64? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil)
      request = build_api_request_for_post_charges_charge_refunds(charge: charge, amount: amount, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_charges_charge_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Refund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Create a refund.&lt;/p&gt;
    # @param charge [String]
    # @return nil
    def post_charges_charge_refunds(*, charge : String, amount : Int64? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_charges_charge_refunds(charge: charge, amount: amount, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges_charge_refunds(*, charge : String, amount : Int64? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_charges_charge_refunds ..." }
      end
      if @api_client.config.client_side_validation && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.post_charges_charge_refunds, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_intent.nil? && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.post_charges_charge_refunds, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["duplicate", "fraudulent", "requested_by_customer"]
      if @api_client.config.client_side_validation && !reason.nil? && !allowable_values.includes?(reason)
        raise ArgumentError.new("invalid value for \"reason\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !reason.nil? && reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reason\" when calling DefaultApi.post_charges_charge_refunds, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/charges/{charge}/refunds".sub("{" + "charge" + "}", URI.encode_path(charge.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["instructions_email"] = instructions_email.to_s if !instructions_email.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      form_params["reason"] = reason.to_s if !reason.nil?
      form_params["refund_application_fee"] = refund_application_fee.to_s if !refund_application_fee.nil?
      form_params["reverse_transfer"] = reverse_transfer.to_s if !reverse_transfer.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_charges_charge_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Update a specified refund.</p>
    # @param charge [String]
    # @param refund [String]
    # @return [Refund]
    def post_charges_charge_refunds_refund(*, charge : String, refund : String, expand : Array(String)? = nil, metadata : IndividualSpecsMetadata? = nil)
      data, _status_code, _headers = post_charges_charge_refunds_refund_with_http_info(charge: charge, refund: refund, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Update a specified refund.&lt;/p&gt;
    # @param charge [String]
    # @param refund [String]
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def post_charges_charge_refunds_refund_with_http_info(*, charge : String, refund : String, expand : Array(String)? = nil, metadata : IndividualSpecsMetadata? = nil)
      request = build_api_request_for_post_charges_charge_refunds_refund(charge: charge, refund: refund, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_charges_charge_refunds_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Refund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Update a specified refund.&lt;/p&gt;
    # @param charge [String]
    # @param refund [String]
    # @return nil
    def post_charges_charge_refunds_refund(*, charge : String, refund : String, expand : Array(String)? = nil, metadata : IndividualSpecsMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_charges_charge_refunds_refund(charge: charge, refund: refund, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_charges_charge_refunds_refund(*, charge : String, refund : String, expand : Array(String)? = nil, metadata : IndividualSpecsMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_charges_charge_refunds_refund ..." }
      end
      # resource path
      local_var_path = "/v1/charges/{charge}/refunds/{refund}".sub("{" + "charge" + "}", URI.encode_path(charge.to_s)).sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_charges_charge_refunds_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a Session object.</p>
    # @param cancel_url [String] The URL the customer will be directed to if they decide to cancel payment and return to your website.
    # @param success_url [String] The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
    # @return [CheckoutSession]
    def post_checkout_sessions(*, cancel_url : String, success_url : String, after_expiration : AfterExpirationParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : AutomaticTaxParams? = nil, billing_address_collection : String? = nil, client_reference_id : String? = nil, consent_collection : ConsentCollectionParams? = nil, customer : String? = nil, customer_creation : String? = nil, customer_email : String? = nil, customer_update : CustomerUpdateParams? = nil, discounts : Array(DiscountParams)? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, line_items : Array(LineItemParams)? = nil, locale : String? = nil, mode : String? = nil, payment_intent_data : PaymentIntentDataParams? = nil, payment_method_options : PaymentMethodOptionsParam? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : PhoneNumberCollectionParams? = nil, setup_intent_data : SetupIntentDataParam? = nil, shipping_address_collection : ShippingAddressCollectionParams? = nil, shipping_options : Array(ShippingOptionParams)? = nil, submit_type : String? = nil, subscription_data : SubscriptionDataParams? = nil, tax_id_collection : TaxIdCollectionParams? = nil)
      data, _status_code, _headers = post_checkout_sessions_with_http_info(cancel_url: cancel_url, success_url: success_url, after_expiration: after_expiration, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, client_reference_id: client_reference_id, consent_collection: consent_collection, customer: customer, customer_creation: customer_creation, customer_email: customer_email, customer_update: customer_update, discounts: discounts, expand: expand, expires_at: expires_at, line_items: line_items, locale: locale, mode: mode, payment_intent_data: payment_intent_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, setup_intent_data: setup_intent_data, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection)
      data
    end

    # &lt;p&gt;Creates a Session object.&lt;/p&gt;
    # @param cancel_url [String] The URL the customer will be directed to if they decide to cancel payment and return to your website.
    # @param success_url [String] The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
    # @return [Array<(CheckoutSession, Integer, Hash)>] CheckoutSession data, response status code and response headers
    def post_checkout_sessions_with_http_info(*, cancel_url : String, success_url : String, after_expiration : AfterExpirationParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : AutomaticTaxParams? = nil, billing_address_collection : String? = nil, client_reference_id : String? = nil, consent_collection : ConsentCollectionParams? = nil, customer : String? = nil, customer_creation : String? = nil, customer_email : String? = nil, customer_update : CustomerUpdateParams? = nil, discounts : Array(DiscountParams)? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, line_items : Array(LineItemParams)? = nil, locale : String? = nil, mode : String? = nil, payment_intent_data : PaymentIntentDataParams? = nil, payment_method_options : PaymentMethodOptionsParam? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : PhoneNumberCollectionParams? = nil, setup_intent_data : SetupIntentDataParam? = nil, shipping_address_collection : ShippingAddressCollectionParams? = nil, shipping_options : Array(ShippingOptionParams)? = nil, submit_type : String? = nil, subscription_data : SubscriptionDataParams? = nil, tax_id_collection : TaxIdCollectionParams? = nil)
      request = build_api_request_for_post_checkout_sessions(cancel_url: cancel_url, success_url: success_url, after_expiration: after_expiration, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, client_reference_id: client_reference_id, consent_collection: consent_collection, customer: customer, customer_creation: customer_creation, customer_email: customer_email, customer_update: customer_update, discounts: discounts, expand: expand, expires_at: expires_at, line_items: line_items, locale: locale, mode: mode, payment_intent_data: payment_intent_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, setup_intent_data: setup_intent_data, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_checkout_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CheckoutSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a Session object.&lt;/p&gt;
    # @param cancel_url [String] The URL the customer will be directed to if they decide to cancel payment and return to your website.
    # @param success_url [String] The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
    # @return nil
    def post_checkout_sessions(*, cancel_url : String, success_url : String, after_expiration : AfterExpirationParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : AutomaticTaxParams? = nil, billing_address_collection : String? = nil, client_reference_id : String? = nil, consent_collection : ConsentCollectionParams? = nil, customer : String? = nil, customer_creation : String? = nil, customer_email : String? = nil, customer_update : CustomerUpdateParams? = nil, discounts : Array(DiscountParams)? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, line_items : Array(LineItemParams)? = nil, locale : String? = nil, mode : String? = nil, payment_intent_data : PaymentIntentDataParams? = nil, payment_method_options : PaymentMethodOptionsParam? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : PhoneNumberCollectionParams? = nil, setup_intent_data : SetupIntentDataParam? = nil, shipping_address_collection : ShippingAddressCollectionParams? = nil, shipping_options : Array(ShippingOptionParams)? = nil, submit_type : String? = nil, subscription_data : SubscriptionDataParams? = nil, tax_id_collection : TaxIdCollectionParams? = nil, &block : Crest::Response ->)
      build_api_request_for_post_checkout_sessions(cancel_url: cancel_url, success_url: success_url, after_expiration: after_expiration, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, client_reference_id: client_reference_id, consent_collection: consent_collection, customer: customer, customer_creation: customer_creation, customer_email: customer_email, customer_update: customer_update, discounts: discounts, expand: expand, expires_at: expires_at, line_items: line_items, locale: locale, mode: mode, payment_intent_data: payment_intent_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, setup_intent_data: setup_intent_data, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_checkout_sessions(*, cancel_url : String, success_url : String, after_expiration : AfterExpirationParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : AutomaticTaxParams? = nil, billing_address_collection : String? = nil, client_reference_id : String? = nil, consent_collection : ConsentCollectionParams? = nil, customer : String? = nil, customer_creation : String? = nil, customer_email : String? = nil, customer_update : CustomerUpdateParams? = nil, discounts : Array(DiscountParams)? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, line_items : Array(LineItemParams)? = nil, locale : String? = nil, mode : String? = nil, payment_intent_data : PaymentIntentDataParams? = nil, payment_method_options : PaymentMethodOptionsParam? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : PhoneNumberCollectionParams? = nil, setup_intent_data : SetupIntentDataParam? = nil, shipping_address_collection : ShippingAddressCollectionParams? = nil, shipping_options : Array(ShippingOptionParams)? = nil, submit_type : String? = nil, subscription_data : SubscriptionDataParams? = nil, tax_id_collection : TaxIdCollectionParams? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_checkout_sessions ..." }
      end
      if @api_client.config.client_side_validation && cancel_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cancel_url\" when calling DefaultApi.post_checkout_sessions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && success_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"success_url\" when calling DefaultApi.post_checkout_sessions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["auto", "required"]
      if @api_client.config.client_side_validation && !billing_address_collection.nil? && !allowable_values.includes?(billing_address_collection)
        raise ArgumentError.new("invalid value for \"billing_address_collection\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !client_reference_id.nil? && client_reference_id.to_s.size > 200
        raise ArgumentError.new("invalid value for \"client_reference_id\" when calling DefaultApi.post_checkout_sessions, the character length must be smaller than or equal to 200.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_checkout_sessions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always", "if_required"]
      if @api_client.config.client_side_validation && !customer_creation.nil? && !allowable_values.includes?(customer_creation)
        raise ArgumentError.new("invalid value for \"customer_creation\", must be one of #{allowable_values}")
      end
      allowable_values = ["auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fil", "fr", "fr-CA", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "th", "tr", "vi", "zh", "zh-HK", "zh-TW"]
      if @api_client.config.client_side_validation && !locale.nil? && !allowable_values.includes?(locale)
        raise ArgumentError.new("invalid value for \"locale\", must be one of #{allowable_values}")
      end
      allowable_values = ["payment", "setup", "subscription"]
      if @api_client.config.client_side_validation && !mode.nil? && !allowable_values.includes?(mode)
        raise ArgumentError.new("invalid value for \"mode\", must be one of #{allowable_values}")
      end
      allowable_values = ["acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "oxxo", "p24", "paynow", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"]
      if @api_client.config.client_side_validation && !payment_method_types.nil? && !payment_method_types.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"payment_method_types\", must include one of #{allowable_values}")
      end
      allowable_values = ["auto", "book", "donate", "pay"]
      if @api_client.config.client_side_validation && !submit_type.nil? && !allowable_values.includes?(submit_type)
        raise ArgumentError.new("invalid value for \"submit_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/checkout/sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["after_expiration"] = after_expiration.to_s if !after_expiration.nil?
      form_params["allow_promotion_codes"] = allow_promotion_codes.to_s if !allow_promotion_codes.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["billing_address_collection"] = billing_address_collection.to_s if !billing_address_collection.nil?
      form_params["cancel_url"] = cancel_url.to_s if !cancel_url.nil?
      form_params["client_reference_id"] = client_reference_id.to_s if !client_reference_id.nil?
      form_params["consent_collection"] = consent_collection.to_s if !consent_collection.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["customer_creation"] = customer_creation.to_s if !customer_creation.nil?
      form_params["customer_email"] = customer_email.to_s if !customer_email.nil?
      form_params["customer_update"] = customer_update.to_s if !customer_update.nil?
      form_params["discounts"] = @api_client.build_collection_param(discounts, "csv") if !discounts.nil? && !discounts.empty?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expires_at"] = expires_at.to_s if !expires_at.nil?
      form_params["line_items"] = @api_client.build_collection_param(line_items, "csv") if !line_items.nil? && !line_items.empty?
      form_params["locale"] = locale.to_s if !locale.nil?
      form_params["mode"] = mode.to_s if !mode.nil?
      form_params["payment_intent_data"] = payment_intent_data.to_s if !payment_intent_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?
      form_params["phone_number_collection"] = phone_number_collection.to_s if !phone_number_collection.nil?
      form_params["setup_intent_data"] = setup_intent_data.to_s if !setup_intent_data.nil?
      form_params["shipping_address_collection"] = shipping_address_collection.to_s if !shipping_address_collection.nil?
      form_params["shipping_options"] = @api_client.build_collection_param(shipping_options, "csv") if !shipping_options.nil? && !shipping_options.empty?
      form_params["submit_type"] = submit_type.to_s if !submit_type.nil?
      form_params["subscription_data"] = subscription_data.to_s if !subscription_data.nil?
      form_params["success_url"] = success_url.to_s if !success_url.nil?
      form_params["tax_id_collection"] = tax_id_collection.to_s if !tax_id_collection.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_checkout_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>  <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
    # @param session [String]
    # @return [CheckoutSession]
    def post_checkout_sessions_session_expire(*, session : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_checkout_sessions_session_expire_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;A Session can be expired when it is in one of these statuses: &lt;code&gt;open&lt;/code&gt; &lt;/p&gt;  &lt;p&gt;After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.&lt;/p&gt;
    # @param session [String]
    # @return [Array<(CheckoutSession, Integer, Hash)>] CheckoutSession data, response status code and response headers
    def post_checkout_sessions_session_expire_with_http_info(*, session : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_checkout_sessions_session_expire(session: session, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_checkout_sessions_session_expire\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CheckoutSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;A Session can be expired when it is in one of these statuses: &lt;code&gt;open&lt;/code&gt; &lt;/p&gt;  &lt;p&gt;After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.&lt;/p&gt;
    # @param session [String]
    # @return nil
    def post_checkout_sessions_session_expire(*, session : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_checkout_sessions_session_expire(session: session, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_checkout_sessions_session_expire(*, session : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_checkout_sessions_session_expire ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.post_checkout_sessions_session_expire, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/checkout/sessions/{session}/expire".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_checkout_sessions_session_expire",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can create coupons easily via the <a href=\"https://dashboard.stripe.com/coupons\">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>  <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
    # @return [Coupon]
    def post_coupons(*, amount_off : Int64? = nil, applies_to : AppliesToParams? = nil, currency : String? = nil, duration : String? = nil, duration_in_months : Int64? = nil, expand : Array(String)? = nil, id : String? = nil, max_redemptions : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, percent_off : Float64? = nil, redeem_by : Int64? = nil)
      data, _status_code, _headers = post_coupons_with_http_info(amount_off: amount_off, applies_to: applies_to, currency: currency, duration: duration, duration_in_months: duration_in_months, expand: expand, id: id, max_redemptions: max_redemptions, metadata: metadata, name: name, percent_off: percent_off, redeem_by: redeem_by)
      data
    end

    # &lt;p&gt;You can create coupons easily via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.&lt;/p&gt;  &lt;p&gt;A coupon has either a &lt;code&gt;percent_off&lt;/code&gt; or an &lt;code&gt;amount_off&lt;/code&gt; and &lt;code&gt;currency&lt;/code&gt;. If you set an &lt;code&gt;amount_off&lt;/code&gt;, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of &lt;currency&gt;100&lt;/currency&gt; will have a final total of &lt;currency&gt;0&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it and an invoice with a subtotal of &lt;currency&gt;300&lt;/currency&gt; will have a final total of &lt;currency&gt;100&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it.&lt;/p&gt;
    # @return [Array<(Coupon, Integer, Hash)>] Coupon data, response status code and response headers
    def post_coupons_with_http_info(*, amount_off : Int64? = nil, applies_to : AppliesToParams? = nil, currency : String? = nil, duration : String? = nil, duration_in_months : Int64? = nil, expand : Array(String)? = nil, id : String? = nil, max_redemptions : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, percent_off : Float64? = nil, redeem_by : Int64? = nil)
      request = build_api_request_for_post_coupons(amount_off: amount_off, applies_to: applies_to, currency: currency, duration: duration, duration_in_months: duration_in_months, expand: expand, id: id, max_redemptions: max_redemptions, metadata: metadata, name: name, percent_off: percent_off, redeem_by: redeem_by)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Coupon.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can create coupons easily via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.&lt;/p&gt;  &lt;p&gt;A coupon has either a &lt;code&gt;percent_off&lt;/code&gt; or an &lt;code&gt;amount_off&lt;/code&gt; and &lt;code&gt;currency&lt;/code&gt;. If you set an &lt;code&gt;amount_off&lt;/code&gt;, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of &lt;currency&gt;100&lt;/currency&gt; will have a final total of &lt;currency&gt;0&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it and an invoice with a subtotal of &lt;currency&gt;300&lt;/currency&gt; will have a final total of &lt;currency&gt;100&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it.&lt;/p&gt;
    # @return nil
    def post_coupons(*, amount_off : Int64? = nil, applies_to : AppliesToParams? = nil, currency : String? = nil, duration : String? = nil, duration_in_months : Int64? = nil, expand : Array(String)? = nil, id : String? = nil, max_redemptions : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, percent_off : Float64? = nil, redeem_by : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_post_coupons(amount_off: amount_off, applies_to: applies_to, currency: currency, duration: duration, duration_in_months: duration_in_months, expand: expand, id: id, max_redemptions: max_redemptions, metadata: metadata, name: name, percent_off: percent_off, redeem_by: redeem_by).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_coupons(*, amount_off : Int64? = nil, applies_to : AppliesToParams? = nil, currency : String? = nil, duration : String? = nil, duration_in_months : Int64? = nil, expand : Array(String)? = nil, id : String? = nil, max_redemptions : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, percent_off : Float64? = nil, redeem_by : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_coupons ..." }
      end
      allowable_values = ["forever", "once", "repeating"]
      if @api_client.config.client_side_validation && !duration.nil? && !allowable_values.includes?(duration)
        raise ArgumentError.new("invalid value for \"duration\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !id.nil? && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_coupons, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 40
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_coupons, the character length must be smaller than or equal to 40.")
      end

      # resource path
      local_var_path = "/v1/coupons"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount_off"] = amount_off.to_s if !amount_off.nil?
      form_params["applies_to"] = applies_to.to_s if !applies_to.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["duration"] = duration.to_s if !duration.nil?
      form_params["duration_in_months"] = duration_in_months.to_s if !duration_in_months.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["id"] = id.to_s if !id.nil?
      form_params["max_redemptions"] = max_redemptions.to_s if !max_redemptions.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["percent_off"] = percent_off.to_s if !percent_off.nil?
      form_params["redeem_by"] = redeem_by.to_s if !redeem_by.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_coupons",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
    # @param coupon [String]
    # @return [Coupon]
    def post_coupons_coupon(*, coupon : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      data, _status_code, _headers = post_coupons_coupon_with_http_info(coupon: coupon, expand: expand, metadata: metadata, name: name)
      data
    end

    # &lt;p&gt;Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.&lt;/p&gt;
    # @param coupon [String]
    # @return [Array<(Coupon, Integer, Hash)>] Coupon data, response status code and response headers
    def post_coupons_coupon_with_http_info(*, coupon : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil)
      request = build_api_request_for_post_coupons_coupon(coupon: coupon, expand: expand, metadata: metadata, name: name)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_coupons_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Coupon.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.&lt;/p&gt;
    # @param coupon [String]
    # @return nil
    def post_coupons_coupon(*, coupon : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_coupons_coupon(coupon: coupon, expand: expand, metadata: metadata, name: name).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_coupons_coupon(*, coupon : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_coupons_coupon ..." }
      end
      if @api_client.config.client_side_validation && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.post_coupons_coupon, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 40
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_coupons_coupon, the character length must be smaller than or equal to 40.")
      end

      # resource path
      local_var_path = "/v1/coupons/{coupon}".sub("{" + "coupon" + "}", URI.encode_path(coupon.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_coupons_coupon",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result in any combination of the following:</p>  <ul> <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li> <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li> <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li> </ul>  <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>  <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code> or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
    # @param invoice [String] ID of the invoice.
    # @return [CreditNote]
    def post_credit_notes(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, expand : Array(String)? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil)
      data, _status_code, _headers = post_credit_notes_with_http_info(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount)
      data
    end

    # &lt;p&gt;Issue a credit note to adjust the amount of a finalized invoice. For a &lt;code&gt;status&#x3D;open&lt;/code&gt; invoice, a credit note reduces its &lt;code&gt;amount_due&lt;/code&gt;. For a &lt;code&gt;status&#x3D;paid&lt;/code&gt; invoice, a credit note does not affect its &lt;code&gt;amount_due&lt;/code&gt;. Instead, it can result in any combination of the following:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;Refund: create a new refund (using &lt;code&gt;refund_amount&lt;/code&gt;) or link an existing refund (using &lt;code&gt;refund&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Customer balance credit: credit the customer’s balance (using &lt;code&gt;credit_amount&lt;/code&gt;) which will be automatically applied to their next invoice when it’s finalized.&lt;/li&gt; &lt;li&gt;Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using &lt;code&gt;out_of_band_amount&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.&lt;/p&gt;  &lt;p&gt;You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s &lt;code&gt;pre_payment_credit_notes_amount&lt;/code&gt; or &lt;code&gt;post_payment_credit_notes_amount&lt;/code&gt; depending on its &lt;code&gt;status&lt;/code&gt; at the time of credit note creation.&lt;/p&gt;
    # @param invoice [String] ID of the invoice.
    # @return [Array<(CreditNote, Integer, Hash)>] CreditNote data, response status code and response headers
    def post_credit_notes_with_http_info(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, expand : Array(String)? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil)
      request = build_api_request_for_post_credit_notes(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_credit_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CreditNote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Issue a credit note to adjust the amount of a finalized invoice. For a &lt;code&gt;status&#x3D;open&lt;/code&gt; invoice, a credit note reduces its &lt;code&gt;amount_due&lt;/code&gt;. For a &lt;code&gt;status&#x3D;paid&lt;/code&gt; invoice, a credit note does not affect its &lt;code&gt;amount_due&lt;/code&gt;. Instead, it can result in any combination of the following:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;Refund: create a new refund (using &lt;code&gt;refund_amount&lt;/code&gt;) or link an existing refund (using &lt;code&gt;refund&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Customer balance credit: credit the customer’s balance (using &lt;code&gt;credit_amount&lt;/code&gt;) which will be automatically applied to their next invoice when it’s finalized.&lt;/li&gt; &lt;li&gt;Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using &lt;code&gt;out_of_band_amount&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.&lt;/p&gt;  &lt;p&gt;You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s &lt;code&gt;pre_payment_credit_notes_amount&lt;/code&gt; or &lt;code&gt;post_payment_credit_notes_amount&lt;/code&gt; depending on its &lt;code&gt;status&lt;/code&gt; at the time of credit note creation.&lt;/p&gt;
    # @param invoice [String] ID of the invoice.
    # @return nil
    def post_credit_notes(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, expand : Array(String)? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_post_credit_notes(invoice: invoice, amount: amount, credit_amount: credit_amount, expand: expand, lines: lines, memo: memo, out_of_band_amount: out_of_band_amount, reason: reason, refund: refund, refund_amount: refund_amount).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_credit_notes(*, invoice : String, amount : Int64? = nil, credit_amount : Int64? = nil, expand : Array(String)? = nil, lines : Array(CreditNoteLineItemParams)? = nil, memo : String? = nil, out_of_band_amount : Int64? = nil, reason : String? = nil, refund : String? = nil, refund_amount : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_credit_notes ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.post_credit_notes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !memo.nil? && memo.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"memo\" when calling DefaultApi.post_credit_notes, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["duplicate", "fraudulent", "order_change", "product_unsatisfactory"]
      if @api_client.config.client_side_validation && !reason.nil? && !allowable_values.includes?(reason)
        raise ArgumentError.new("invalid value for \"reason\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/credit_notes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["credit_amount"] = credit_amount.to_s if !credit_amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice"] = invoice.to_s if !invoice.nil?
      form_params["lines"] = @api_client.build_collection_param(lines, "csv") if !lines.nil? && !lines.empty?
      form_params["memo"] = memo.to_s if !memo.nil?
      form_params["out_of_band_amount"] = out_of_band_amount.to_s if !out_of_band_amount.nil?
      form_params["reason"] = reason.to_s if !reason.nil?
      form_params["refund"] = refund.to_s if !refund.nil?
      form_params["refund_amount"] = refund_amount.to_s if !refund_amount.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_credit_notes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing credit note.</p>
    # @param id [String]
    # @return [CreditNote]
    def post_credit_notes_id(*, id : String, expand : Array(String)? = nil, memo : String? = nil)
      data, _status_code, _headers = post_credit_notes_id_with_http_info(id: id, expand: expand, memo: memo)
      data
    end

    # &lt;p&gt;Updates an existing credit note.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(CreditNote, Integer, Hash)>] CreditNote data, response status code and response headers
    def post_credit_notes_id_with_http_info(*, id : String, expand : Array(String)? = nil, memo : String? = nil)
      request = build_api_request_for_post_credit_notes_id(id: id, expand: expand, memo: memo)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_credit_notes_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CreditNote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing credit note.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_credit_notes_id(*, id : String, expand : Array(String)? = nil, memo : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_credit_notes_id(id: id, expand: expand, memo: memo).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_credit_notes_id(*, id : String, expand : Array(String)? = nil, memo : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_credit_notes_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_credit_notes_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !memo.nil? && memo.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"memo\" when calling DefaultApi.post_credit_notes_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/credit_notes/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["memo"] = memo.to_s if !memo.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_credit_notes_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Marks a credit note as void. Learn more about <a href=\"/docs/billing/invoices/credit-notes#voiding\">voiding credit notes</a>.</p>
    # @param id [String]
    # @return [CreditNote]
    def post_credit_notes_id_void(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_credit_notes_id_void_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Marks a credit note as void. Learn more about &lt;a href&#x3D;\&quot;/docs/billing/invoices/credit-notes#voiding\&quot;&gt;voiding credit notes&lt;/a&gt;.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(CreditNote, Integer, Hash)>] CreditNote data, response status code and response headers
    def post_credit_notes_id_void_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_credit_notes_id_void(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_credit_notes_id_void\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CreditNote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Marks a credit note as void. Learn more about &lt;a href&#x3D;\&quot;/docs/billing/invoices/credit-notes#voiding\&quot;&gt;voiding credit notes&lt;/a&gt;.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_credit_notes_id_void(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_credit_notes_id_void(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_credit_notes_id_void(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_credit_notes_id_void ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_credit_notes_id_void, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/credit_notes/{id}/void".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_credit_notes_id_void",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new customer object.</p>
    # @return [Customer]
    def post_customers(*, address : PostCustomersRequestAddress? = nil, balance : Int64? = nil, cash_balance : CashBalanceParam? = nil, coupon : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, invoice_prefix : String? = nil, invoice_settings : CustomerParam? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, next_invoice_sequence : Int64? = nil, payment_method : String? = nil, phone : String? = nil, preferred_locales : Array(String)? = nil, promotion_code : String? = nil, shipping : PostCustomersRequestShipping? = nil, source : String? = nil, tax : TaxParam? = nil, tax_exempt : String? = nil, tax_id_data : Array(DataParams)? = nil, test_clock : String? = nil)
      data, _status_code, _headers = post_customers_with_http_info(address: address, balance: balance, cash_balance: cash_balance, coupon: coupon, description: description, email: email, expand: expand, invoice_prefix: invoice_prefix, invoice_settings: invoice_settings, metadata: metadata, name: name, next_invoice_sequence: next_invoice_sequence, payment_method: payment_method, phone: phone, preferred_locales: preferred_locales, promotion_code: promotion_code, shipping: shipping, source: source, tax: tax, tax_exempt: tax_exempt, tax_id_data: tax_id_data, test_clock: test_clock)
      data
    end

    # &lt;p&gt;Creates a new customer object.&lt;/p&gt;
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def post_customers_with_http_info(*, address : PostCustomersRequestAddress? = nil, balance : Int64? = nil, cash_balance : CashBalanceParam? = nil, coupon : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, invoice_prefix : String? = nil, invoice_settings : CustomerParam? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, next_invoice_sequence : Int64? = nil, payment_method : String? = nil, phone : String? = nil, preferred_locales : Array(String)? = nil, promotion_code : String? = nil, shipping : PostCustomersRequestShipping? = nil, source : String? = nil, tax : TaxParam? = nil, tax_exempt : String? = nil, tax_id_data : Array(DataParams)? = nil, test_clock : String? = nil)
      request = build_api_request_for_post_customers(address: address, balance: balance, cash_balance: cash_balance, coupon: coupon, description: description, email: email, expand: expand, invoice_prefix: invoice_prefix, invoice_settings: invoice_settings, metadata: metadata, name: name, next_invoice_sequence: next_invoice_sequence, payment_method: payment_method, phone: phone, preferred_locales: preferred_locales, promotion_code: promotion_code, shipping: shipping, source: source, tax: tax, tax_exempt: tax_exempt, tax_id_data: tax_id_data, test_clock: test_clock)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Customer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new customer object.&lt;/p&gt;
    # @return nil
    def post_customers(*, address : PostCustomersRequestAddress? = nil, balance : Int64? = nil, cash_balance : CashBalanceParam? = nil, coupon : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, invoice_prefix : String? = nil, invoice_settings : CustomerParam? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, next_invoice_sequence : Int64? = nil, payment_method : String? = nil, phone : String? = nil, preferred_locales : Array(String)? = nil, promotion_code : String? = nil, shipping : PostCustomersRequestShipping? = nil, source : String? = nil, tax : TaxParam? = nil, tax_exempt : String? = nil, tax_id_data : Array(DataParams)? = nil, test_clock : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers(address: address, balance: balance, cash_balance: cash_balance, coupon: coupon, description: description, email: email, expand: expand, invoice_prefix: invoice_prefix, invoice_settings: invoice_settings, metadata: metadata, name: name, next_invoice_sequence: next_invoice_sequence, payment_method: payment_method, phone: phone, preferred_locales: preferred_locales, promotion_code: promotion_code, shipping: shipping, source: source, tax: tax, tax_exempt: tax_exempt, tax_id_data: tax_id_data, test_clock: test_clock).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers(*, address : PostCustomersRequestAddress? = nil, balance : Int64? = nil, cash_balance : CashBalanceParam? = nil, coupon : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, invoice_prefix : String? = nil, invoice_settings : CustomerParam? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, next_invoice_sequence : Int64? = nil, payment_method : String? = nil, phone : String? = nil, preferred_locales : Array(String)? = nil, promotion_code : String? = nil, shipping : PostCustomersRequestShipping? = nil, source : String? = nil, tax : TaxParam? = nil, tax_exempt : String? = nil, tax_id_data : Array(DataParams)? = nil, test_clock : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers ..." }
      end
      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !email.nil? && email.to_s.size > 512
        raise ArgumentError.new("invalid value for \"email\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 512.")
      end

      if @api_client.config.client_side_validation && !invoice_prefix.nil? && invoice_prefix.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice_prefix\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 256
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 256.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !phone.nil? && phone.to_s.size > 20
        raise ArgumentError.new("invalid value for \"phone\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && !promotion_code.nil? && promotion_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"promotion_code\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["", "exempt", "none", "reverse"]
      if @api_client.config.client_side_validation && !tax_exempt.nil? && !allowable_values.includes?(tax_exempt)
        raise ArgumentError.new("invalid value for \"tax_exempt\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !test_clock.nil? && test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\" when calling DefaultApi.post_customers, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["address"] = address.to_s if !address.nil?
      form_params["balance"] = balance.to_s if !balance.nil?
      form_params["cash_balance"] = cash_balance.to_s if !cash_balance.nil?
      form_params["coupon"] = coupon.to_s if !coupon.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice_prefix"] = invoice_prefix.to_s if !invoice_prefix.nil?
      form_params["invoice_settings"] = invoice_settings.to_s if !invoice_settings.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["next_invoice_sequence"] = next_invoice_sequence.to_s if !next_invoice_sequence.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["preferred_locales"] = @api_client.build_collection_param(preferred_locales, "csv") if !preferred_locales.nil? && !preferred_locales.empty?
      form_params["promotion_code"] = promotion_code.to_s if !promotion_code.nil?
      form_params["shipping"] = shipping.to_s if !shipping.nil?
      form_params["source"] = source.to_s if !source.nil?
      form_params["tax"] = tax.to_s if !tax.nil?
      form_params["tax_exempt"] = tax_exempt.to_s if !tax_exempt.nil?
      form_params["tax_id_data"] = @api_client.build_collection_param(tax_id_data, "csv") if !tax_id_data.nil? && !tax_id_data.empty?
      form_params["test_clock"] = test_clock.to_s if !test_clock.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>  <p>This request accepts mostly the same arguments as the customer creation call.</p>
    # @param customer [String]
    # @return [Customer]
    def post_customers_customer(*, customer : String, address : PostCustomersRequestAddress? = nil, balance : Int64? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, cash_balance : CashBalanceParam? = nil, coupon : String? = nil, default_alipay_account : String? = nil, default_bank_account : String? = nil, default_card : String? = nil, default_source : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, invoice_prefix : String? = nil, invoice_settings : CustomerParam? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, next_invoice_sequence : Int64? = nil, phone : String? = nil, preferred_locales : Array(String)? = nil, promotion_code : String? = nil, shipping : PostCustomersRequestShipping? = nil, source : String? = nil, tax : TaxParam? = nil, tax_exempt : String? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil)
      data, _status_code, _headers = post_customers_customer_with_http_info(customer: customer, address: address, balance: balance, bank_account: bank_account, card: card, cash_balance: cash_balance, coupon: coupon, default_alipay_account: default_alipay_account, default_bank_account: default_bank_account, default_card: default_card, default_source: default_source, description: description, email: email, expand: expand, invoice_prefix: invoice_prefix, invoice_settings: invoice_settings, metadata: metadata, name: name, next_invoice_sequence: next_invoice_sequence, phone: phone, preferred_locales: preferred_locales, promotion_code: promotion_code, shipping: shipping, source: source, tax: tax, tax_exempt: tax_exempt, trial_end: trial_end)
      data
    end

    # &lt;p&gt;Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the &lt;strong&gt;source&lt;/strong&gt; parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the &lt;strong&gt;source&lt;/strong&gt; parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the &lt;code&gt;past_due&lt;/code&gt; state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the &lt;strong&gt;default_source&lt;/strong&gt; for a customer will not trigger this behavior.&lt;/p&gt;  &lt;p&gt;This request accepts mostly the same arguments as the customer creation call.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def post_customers_customer_with_http_info(*, customer : String, address : PostCustomersRequestAddress? = nil, balance : Int64? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, cash_balance : CashBalanceParam? = nil, coupon : String? = nil, default_alipay_account : String? = nil, default_bank_account : String? = nil, default_card : String? = nil, default_source : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, invoice_prefix : String? = nil, invoice_settings : CustomerParam? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, next_invoice_sequence : Int64? = nil, phone : String? = nil, preferred_locales : Array(String)? = nil, promotion_code : String? = nil, shipping : PostCustomersRequestShipping? = nil, source : String? = nil, tax : TaxParam? = nil, tax_exempt : String? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil)
      request = build_api_request_for_post_customers_customer(customer: customer, address: address, balance: balance, bank_account: bank_account, card: card, cash_balance: cash_balance, coupon: coupon, default_alipay_account: default_alipay_account, default_bank_account: default_bank_account, default_card: default_card, default_source: default_source, description: description, email: email, expand: expand, invoice_prefix: invoice_prefix, invoice_settings: invoice_settings, metadata: metadata, name: name, next_invoice_sequence: next_invoice_sequence, phone: phone, preferred_locales: preferred_locales, promotion_code: promotion_code, shipping: shipping, source: source, tax: tax, tax_exempt: tax_exempt, trial_end: trial_end)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Customer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the &lt;strong&gt;source&lt;/strong&gt; parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the &lt;strong&gt;source&lt;/strong&gt; parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the &lt;code&gt;past_due&lt;/code&gt; state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the &lt;strong&gt;default_source&lt;/strong&gt; for a customer will not trigger this behavior.&lt;/p&gt;  &lt;p&gt;This request accepts mostly the same arguments as the customer creation call.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def post_customers_customer(*, customer : String, address : PostCustomersRequestAddress? = nil, balance : Int64? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, cash_balance : CashBalanceParam? = nil, coupon : String? = nil, default_alipay_account : String? = nil, default_bank_account : String? = nil, default_card : String? = nil, default_source : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, invoice_prefix : String? = nil, invoice_settings : CustomerParam? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, next_invoice_sequence : Int64? = nil, phone : String? = nil, preferred_locales : Array(String)? = nil, promotion_code : String? = nil, shipping : PostCustomersRequestShipping? = nil, source : String? = nil, tax : TaxParam? = nil, tax_exempt : String? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer(customer: customer, address: address, balance: balance, bank_account: bank_account, card: card, cash_balance: cash_balance, coupon: coupon, default_alipay_account: default_alipay_account, default_bank_account: default_bank_account, default_card: default_card, default_source: default_source, description: description, email: email, expand: expand, invoice_prefix: invoice_prefix, invoice_settings: invoice_settings, metadata: metadata, name: name, next_invoice_sequence: next_invoice_sequence, phone: phone, preferred_locales: preferred_locales, promotion_code: promotion_code, shipping: shipping, source: source, tax: tax, tax_exempt: tax_exempt, trial_end: trial_end).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer(*, customer : String, address : PostCustomersRequestAddress? = nil, balance : Int64? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, cash_balance : CashBalanceParam? = nil, coupon : String? = nil, default_alipay_account : String? = nil, default_bank_account : String? = nil, default_card : String? = nil, default_source : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, invoice_prefix : String? = nil, invoice_settings : CustomerParam? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, next_invoice_sequence : Int64? = nil, phone : String? = nil, preferred_locales : Array(String)? = nil, promotion_code : String? = nil, shipping : PostCustomersRequestShipping? = nil, source : String? = nil, tax : TaxParam? = nil, tax_exempt : String? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_alipay_account.nil? && default_alipay_account.to_s.size > 500
        raise ArgumentError.new("invalid value for \"default_alipay_account\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !default_bank_account.nil? && default_bank_account.to_s.size > 500
        raise ArgumentError.new("invalid value for \"default_bank_account\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !default_card.nil? && default_card.to_s.size > 500
        raise ArgumentError.new("invalid value for \"default_card\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !default_source.nil? && default_source.to_s.size > 500
        raise ArgumentError.new("invalid value for \"default_source\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !email.nil? && email.to_s.size > 512
        raise ArgumentError.new("invalid value for \"email\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 512.")
      end

      if @api_client.config.client_side_validation && !invoice_prefix.nil? && invoice_prefix.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice_prefix\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 256
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 256.")
      end

      if @api_client.config.client_side_validation && !phone.nil? && phone.to_s.size > 20
        raise ArgumentError.new("invalid value for \"phone\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && !promotion_code.nil? && promotion_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"promotion_code\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_customers_customer, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["", "exempt", "none", "reverse"]
      if @api_client.config.client_side_validation && !tax_exempt.nil? && !allowable_values.includes?(tax_exempt)
        raise ArgumentError.new("invalid value for \"tax_exempt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/customers/{customer}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["address"] = address.to_s if !address.nil?
      form_params["balance"] = balance.to_s if !balance.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["cash_balance"] = cash_balance.to_s if !cash_balance.nil?
      form_params["coupon"] = coupon.to_s if !coupon.nil?
      form_params["default_alipay_account"] = default_alipay_account.to_s if !default_alipay_account.nil?
      form_params["default_bank_account"] = default_bank_account.to_s if !default_bank_account.nil?
      form_params["default_card"] = default_card.to_s if !default_card.nil?
      form_params["default_source"] = default_source.to_s if !default_source.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice_prefix"] = invoice_prefix.to_s if !invoice_prefix.nil?
      form_params["invoice_settings"] = invoice_settings.to_s if !invoice_settings.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["next_invoice_sequence"] = next_invoice_sequence.to_s if !next_invoice_sequence.nil?
      form_params["phone"] = phone.to_s if !phone.nil?
      form_params["preferred_locales"] = @api_client.build_collection_param(preferred_locales, "csv") if !preferred_locales.nil? && !preferred_locales.empty?
      form_params["promotion_code"] = promotion_code.to_s if !promotion_code.nil?
      form_params["shipping"] = shipping.to_s if !shipping.nil?
      form_params["source"] = source.to_s if !source.nil?
      form_params["tax"] = tax.to_s if !tax.nil?
      form_params["tax_exempt"] = tax_exempt.to_s if !tax_exempt.nil?
      form_params["trial_end"] = trial_end.to_s if !trial_end.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an immutable transaction that updates the customer’s credit <a href=\"/docs/billing/customer/balance\">balance</a>.</p>
    # @param customer [String]
    # @param amount [Int64] The integer amount in **cents (or local equivalent)** to apply to the customer's credit balance.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value.
    # @return [CustomerBalanceTransaction]
    def post_customers_customer_balance_transactions(*, customer : String, amount : Int64, currency : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_customers_customer_balance_transactions_with_http_info(customer: customer, amount: amount, currency: currency, description: description, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Creates an immutable transaction that updates the customer’s credit &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balance&lt;/a&gt;.&lt;/p&gt;
    # @param customer [String]
    # @param amount [Int64] The integer amount in **cents (or local equivalent)** to apply to the customer's credit balance.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value.
    # @return [Array<(CustomerBalanceTransaction, Integer, Hash)>] CustomerBalanceTransaction data, response status code and response headers
    def post_customers_customer_balance_transactions_with_http_info(*, customer : String, amount : Int64, currency : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_customers_customer_balance_transactions(customer: customer, amount: amount, currency: currency, description: description, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_balance_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CustomerBalanceTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates an immutable transaction that updates the customer’s credit &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balance&lt;/a&gt;.&lt;/p&gt;
    # @param customer [String]
    # @param amount [Int64] The integer amount in **cents (or local equivalent)** to apply to the customer's credit balance.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value.
    # @return nil
    def post_customers_customer_balance_transactions(*, customer : String, amount : Int64, currency : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_balance_transactions(customer: customer, amount: amount, currency: currency, description: description, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_balance_transactions(*, customer : String, amount : Int64, currency : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_balance_transactions ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_balance_transactions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 350
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_customers_customer_balance_transactions, the character length must be smaller than or equal to 350.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/balance_transactions".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_balance_transactions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
    # @param customer [String]
    # @param transaction [String]
    # @return [CustomerBalanceTransaction]
    def post_customers_customer_balance_transactions_transaction(*, customer : String, transaction : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_customers_customer_balance_transactions_transaction_with_http_info(customer: customer, transaction: transaction, description: description, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Most credit balance transaction fields are immutable, but you may update its &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;metadata&lt;/code&gt;.&lt;/p&gt;
    # @param customer [String]
    # @param transaction [String]
    # @return [Array<(CustomerBalanceTransaction, Integer, Hash)>] CustomerBalanceTransaction data, response status code and response headers
    def post_customers_customer_balance_transactions_transaction_with_http_info(*, customer : String, transaction : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_customers_customer_balance_transactions_transaction(customer: customer, transaction: transaction, description: description, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_balance_transactions_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CustomerBalanceTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Most credit balance transaction fields are immutable, but you may update its &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;metadata&lt;/code&gt;.&lt;/p&gt;
    # @param customer [String]
    # @param transaction [String]
    # @return nil
    def post_customers_customer_balance_transactions_transaction(*, customer : String, transaction : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_balance_transactions_transaction(customer: customer, transaction: transaction, description: description, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_balance_transactions_transaction(*, customer : String, transaction : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_balance_transactions_transaction ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_balance_transactions_transaction, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transaction\" when calling DefaultApi.post_customers_customer_balance_transactions_transaction, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 350
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_customers_customer_balance_transactions_transaction, the character length must be smaller than or equal to 350.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/balance_transactions/{transaction}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_balance_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>  <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href=\"/docs/api#update_customer\">update the customer</a> to have a new <code>default_source</code>.</p>
    # @param customer [String]
    # @return [PaymentSource]
    def post_customers_customer_bank_accounts(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil)
      data, _status_code, _headers = post_customers_customer_bank_accounts_with_http_info(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source)
      data
    end

    # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(PaymentSource, Integer, Hash)>] PaymentSource data, response status code and response headers
    def post_customers_customer_bank_accounts_with_http_info(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil)
      request = build_api_request_for_post_customers_customer_bank_accounts(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_bank_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentSource.from_json(data), status_code, headers
    end

    # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def post_customers_customer_bank_accounts(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_bank_accounts(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_bank_accounts(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_bank_accounts ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_bank_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !alipay_account.nil? && alipay_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"alipay_account\" when calling DefaultApi.post_customers_customer_bank_accounts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_customers_customer_bank_accounts, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/bank_accounts".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["alipay_account"] = alipay_account.to_s if !alipay_account.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["source"] = source.to_s if !source.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_bank_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Update a specified source for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [PostCustomersCustomerBankAccountsId200Response]
    def post_customers_customer_bank_accounts_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil)
      data, _status_code, _headers = post_customers_customer_bank_accounts_id_with_http_info(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner)
      data
    end

    # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(PostCustomersCustomerBankAccountsId200Response, Integer, Hash)>] PostCustomersCustomerBankAccountsId200Response data, response status code and response headers
    def post_customers_customer_bank_accounts_id_with_http_info(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil)
      request = build_api_request_for_post_customers_customer_bank_accounts_id(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_bank_accounts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PostCustomersCustomerBankAccountsId200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def post_customers_customer_bank_accounts_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_bank_accounts_id(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_bank_accounts_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_bank_accounts_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !account_holder_name.nil? && account_holder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_name\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["company", "individual"]
      if @api_client.config.client_side_validation && !account_holder_type.nil? && !allowable_values.includes?(account_holder_type)
        raise ArgumentError.new("invalid value for \"account_holder_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_holder_type.nil? && account_holder_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_type\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_city.nil? && address_city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_city\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_country.nil? && address_country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_country\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line1.nil? && address_line1.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line1\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line2.nil? && address_line2.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line2\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_state.nil? && address_state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_state\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_zip.nil? && address_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_zip\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_month.nil? && exp_month.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_month\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_year.nil? && exp_year.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_year\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_customers_customer_bank_accounts_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/bank_accounts/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder_name"] = account_holder_name.to_s if !account_holder_name.nil?
      form_params["account_holder_type"] = account_holder_type.to_s if !account_holder_type.nil?
      form_params["address_city"] = address_city.to_s if !address_city.nil?
      form_params["address_country"] = address_country.to_s if !address_country.nil?
      form_params["address_line1"] = address_line1.to_s if !address_line1.nil?
      form_params["address_line2"] = address_line2.to_s if !address_line2.nil?
      form_params["address_state"] = address_state.to_s if !address_state.nil?
      form_params["address_zip"] = address_zip.to_s if !address_zip.nil?
      form_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      form_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["owner"] = owner.to_s if !owner.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_bank_accounts_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verify a specified bank account for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [BankAccount]
    def post_customers_customer_bank_accounts_id_verify(*, customer : String, id : String, amounts : Array(Int64)? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_customers_customer_bank_accounts_id_verify_with_http_info(customer: customer, id: id, amounts: amounts, expand: expand)
      data
    end

    # &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(BankAccount, Integer, Hash)>] BankAccount data, response status code and response headers
    def post_customers_customer_bank_accounts_id_verify_with_http_info(*, customer : String, id : String, amounts : Array(Int64)? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_customers_customer_bank_accounts_id_verify(customer: customer, id: id, amounts: amounts, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_bank_accounts_id_verify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BankAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def post_customers_customer_bank_accounts_id_verify(*, customer : String, id : String, amounts : Array(Int64)? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_bank_accounts_id_verify(customer: customer, id: id, amounts: amounts, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_bank_accounts_id_verify(*, customer : String, id : String, amounts : Array(Int64)? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_bank_accounts_id_verify ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_bank_accounts_id_verify, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_customers_customer_bank_accounts_id_verify, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/bank_accounts/{id}/verify".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amounts"] = @api_client.build_collection_param(amounts, "csv") if !amounts.nil? && !amounts.empty?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_bank_accounts_id_verify",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>  <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href=\"/docs/api#update_customer\">update the customer</a> to have a new <code>default_source</code>.</p>
    # @param customer [String]
    # @return [PaymentSource]
    def post_customers_customer_cards(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil)
      data, _status_code, _headers = post_customers_customer_cards_with_http_info(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source)
      data
    end

    # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(PaymentSource, Integer, Hash)>] PaymentSource data, response status code and response headers
    def post_customers_customer_cards_with_http_info(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil)
      request = build_api_request_for_post_customers_customer_cards(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentSource.from_json(data), status_code, headers
    end

    # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def post_customers_customer_cards(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_cards(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_cards(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_cards ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_cards, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !alipay_account.nil? && alipay_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"alipay_account\" when calling DefaultApi.post_customers_customer_cards, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_customers_customer_cards, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/cards".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["alipay_account"] = alipay_account.to_s if !alipay_account.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["source"] = source.to_s if !source.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_cards",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Update a specified source for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [PostCustomersCustomerBankAccountsId200Response]
    def post_customers_customer_cards_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil)
      data, _status_code, _headers = post_customers_customer_cards_id_with_http_info(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner)
      data
    end

    # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(PostCustomersCustomerBankAccountsId200Response, Integer, Hash)>] PostCustomersCustomerBankAccountsId200Response data, response status code and response headers
    def post_customers_customer_cards_id_with_http_info(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil)
      request = build_api_request_for_post_customers_customer_cards_id(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_cards_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PostCustomersCustomerBankAccountsId200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def post_customers_customer_cards_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_cards_id(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_cards_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_cards_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !account_holder_name.nil? && account_holder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_name\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["company", "individual"]
      if @api_client.config.client_side_validation && !account_holder_type.nil? && !allowable_values.includes?(account_holder_type)
        raise ArgumentError.new("invalid value for \"account_holder_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_holder_type.nil? && account_holder_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_type\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_city.nil? && address_city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_city\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_country.nil? && address_country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_country\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line1.nil? && address_line1.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line1\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line2.nil? && address_line2.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line2\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_state.nil? && address_state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_state\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_zip.nil? && address_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_zip\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_month.nil? && exp_month.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_month\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_year.nil? && exp_year.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_year\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_customers_customer_cards_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/cards/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder_name"] = account_holder_name.to_s if !account_holder_name.nil?
      form_params["account_holder_type"] = account_holder_type.to_s if !account_holder_type.nil?
      form_params["address_city"] = address_city.to_s if !address_city.nil?
      form_params["address_country"] = address_country.to_s if !address_country.nil?
      form_params["address_line1"] = address_line1.to_s if !address_line1.nil?
      form_params["address_line2"] = address_line2.to_s if !address_line2.nil?
      form_params["address_state"] = address_state.to_s if !address_state.nil?
      form_params["address_zip"] = address_zip.to_s if !address_zip.nil?
      form_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      form_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["owner"] = owner.to_s if !owner.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_cards_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a customer’s cash balance.</p>
    # @param customer [String]
    # @return [CashBalance]
    def post_customers_customer_cash_balance(*, customer : String, expand : Array(String)? = nil, settings : BalanceSettingsParam? = nil)
      data, _status_code, _headers = post_customers_customer_cash_balance_with_http_info(customer: customer, expand: expand, settings: settings)
      data
    end

    # &lt;p&gt;Updates a customer’s cash balance.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(CashBalance, Integer, Hash)>] CashBalance data, response status code and response headers
    def post_customers_customer_cash_balance_with_http_info(*, customer : String, expand : Array(String)? = nil, settings : BalanceSettingsParam? = nil)
      request = build_api_request_for_post_customers_customer_cash_balance(customer: customer, expand: expand, settings: settings)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_cash_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return CashBalance.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a customer’s cash balance.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def post_customers_customer_cash_balance(*, customer : String, expand : Array(String)? = nil, settings : BalanceSettingsParam? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_cash_balance(customer: customer, expand: expand, settings: settings).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_cash_balance(*, customer : String, expand : Array(String)? = nil, settings : BalanceSettingsParam? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_cash_balance ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_cash_balance, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/cash_balance".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["settings"] = settings.to_s if !settings.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_cash_balance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new funding instructions will be created. If funding instructions have already been created for a given customer, the same funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
    # @param customer [String]
    # @param bank_transfer [BankTransferParams]
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param funding_type [String] The `funding_type` to get the instructions for.
    # @return [FundingInstructions]
    def post_customers_customer_funding_instructions(*, customer : String, bank_transfer : BankTransferParams, currency : String, funding_type : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_customers_customer_funding_instructions_with_http_info(customer: customer, bank_transfer: bank_transfer, currency: currency, funding_type: funding_type, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new funding instructions will be created. If funding instructions have already been created for a given customer, the same funding instructions will be retrieved. In other words, we will return the same funding instructions each time.&lt;/p&gt;
    # @param customer [String]
    # @param bank_transfer [BankTransferParams]
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param funding_type [String] The `funding_type` to get the instructions for.
    # @return [Array<(FundingInstructions, Integer, Hash)>] FundingInstructions data, response status code and response headers
    def post_customers_customer_funding_instructions_with_http_info(*, customer : String, bank_transfer : BankTransferParams, currency : String, funding_type : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_customers_customer_funding_instructions(customer: customer, bank_transfer: bank_transfer, currency: currency, funding_type: funding_type, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_funding_instructions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FundingInstructions.from_json(data), status_code, headers
    end

    # &lt;p&gt;Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new funding instructions will be created. If funding instructions have already been created for a given customer, the same funding instructions will be retrieved. In other words, we will return the same funding instructions each time.&lt;/p&gt;
    # @param customer [String]
    # @param bank_transfer [BankTransferParams]
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param funding_type [String] The `funding_type` to get the instructions for.
    # @return nil
    def post_customers_customer_funding_instructions(*, customer : String, bank_transfer : BankTransferParams, currency : String, funding_type : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_funding_instructions(customer: customer, bank_transfer: bank_transfer, currency: currency, funding_type: funding_type, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_funding_instructions(*, customer : String, bank_transfer : BankTransferParams, currency : String, funding_type : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_funding_instructions ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_funding_instructions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["bank_transfer"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(funding_type)
        raise ArgumentError.new("invalid value for \"funding_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/customers/{customer}/funding_instructions".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bank_transfer"] = bank_transfer.to_s if !bank_transfer.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["funding_type"] = funding_type.to_s if !funding_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_funding_instructions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>  <p>If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should <a href=\"/docs/api#update_customer\">update the customer</a> to have a new <code>default_source</code>.</p>
    # @param customer [String]
    # @return [PaymentSource]
    def post_customers_customer_sources(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil)
      data, _status_code, _headers = post_customers_customer_sources_with_http_info(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source)
      data
    end

    # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(PaymentSource, Integer, Hash)>] PaymentSource data, response status code and response headers
    def post_customers_customer_sources_with_http_info(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil)
      request = build_api_request_for_post_customers_customer_sources(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentSource.from_json(data), status_code, headers
    end

    # &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def post_customers_customer_sources(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_sources(customer: customer, alipay_account: alipay_account, bank_account: bank_account, card: card, expand: expand, source: source).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_sources(*, customer : String, alipay_account : String? = nil, bank_account : PostCustomersCustomerRequestBankAccount? = nil, card : PostChargesRequestCard? = nil, expand : Array(String)? = nil, source : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_sources ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_sources, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !alipay_account.nil? && alipay_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"alipay_account\" when calling DefaultApi.post_customers_customer_sources, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_customers_customer_sources, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/sources".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["alipay_account"] = alipay_account.to_s if !alipay_account.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["source"] = source.to_s if !source.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_sources",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Update a specified source for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [PostCustomersCustomerBankAccountsId200Response]
    def post_customers_customer_sources_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil)
      data, _status_code, _headers = post_customers_customer_sources_id_with_http_info(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner)
      data
    end

    # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(PostCustomersCustomerBankAccountsId200Response, Integer, Hash)>] PostCustomersCustomerBankAccountsId200Response data, response status code and response headers
    def post_customers_customer_sources_id_with_http_info(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil)
      request = build_api_request_for_post_customers_customer_sources_id(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_sources_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PostCustomersCustomerBankAccountsId200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def post_customers_customer_sources_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_sources_id(customer: customer, id: id, account_holder_name: account_holder_name, account_holder_type: account_holder_type, address_city: address_city, address_country: address_country, address_line1: address_line1, address_line2: address_line2, address_state: address_state, address_zip: address_zip, exp_month: exp_month, exp_year: exp_year, expand: expand, metadata: metadata, name: name, owner: owner).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_sources_id(*, customer : String, id : String, account_holder_name : String? = nil, account_holder_type : String? = nil, address_city : String? = nil, address_country : String? = nil, address_line1 : String? = nil, address_line2 : String? = nil, address_state : String? = nil, address_zip : String? = nil, exp_month : String? = nil, exp_year : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, owner : Owner? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_sources_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !account_holder_name.nil? && account_holder_name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_name\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["company", "individual"]
      if @api_client.config.client_side_validation && !account_holder_type.nil? && !allowable_values.includes?(account_holder_type)
        raise ArgumentError.new("invalid value for \"account_holder_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !account_holder_type.nil? && account_holder_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account_holder_type\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_city.nil? && address_city.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_city\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_country.nil? && address_country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_country\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line1.nil? && address_line1.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line1\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_line2.nil? && address_line2.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_line2\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_state.nil? && address_state.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_state\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !address_zip.nil? && address_zip.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"address_zip\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_month.nil? && exp_month.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_month\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !exp_year.nil? && exp_year.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"exp_year\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_customers_customer_sources_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/sources/{id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder_name"] = account_holder_name.to_s if !account_holder_name.nil?
      form_params["account_holder_type"] = account_holder_type.to_s if !account_holder_type.nil?
      form_params["address_city"] = address_city.to_s if !address_city.nil?
      form_params["address_country"] = address_country.to_s if !address_country.nil?
      form_params["address_line1"] = address_line1.to_s if !address_line1.nil?
      form_params["address_line2"] = address_line2.to_s if !address_line2.nil?
      form_params["address_state"] = address_state.to_s if !address_state.nil?
      form_params["address_zip"] = address_zip.to_s if !address_zip.nil?
      form_params["exp_month"] = exp_month.to_s if !exp_month.nil?
      form_params["exp_year"] = exp_year.to_s if !exp_year.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["owner"] = owner.to_s if !owner.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_sources_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verify a specified bank account for a given customer.</p>
    # @param customer [String]
    # @param id [String]
    # @return [BankAccount]
    def post_customers_customer_sources_id_verify(*, customer : String, id : String, amounts : Array(Int64)? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_customers_customer_sources_id_verify_with_http_info(customer: customer, id: id, amounts: amounts, expand: expand)
      data
    end

    # &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return [Array<(BankAccount, Integer, Hash)>] BankAccount data, response status code and response headers
    def post_customers_customer_sources_id_verify_with_http_info(*, customer : String, id : String, amounts : Array(Int64)? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_customers_customer_sources_id_verify(customer: customer, id: id, amounts: amounts, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_sources_id_verify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return BankAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
    # @param customer [String]
    # @param id [String]
    # @return nil
    def post_customers_customer_sources_id_verify(*, customer : String, id : String, amounts : Array(Int64)? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_sources_id_verify(customer: customer, id: id, amounts: amounts, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_sources_id_verify(*, customer : String, id : String, amounts : Array(Int64)? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_sources_id_verify ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_sources_id_verify, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_customers_customer_sources_id_verify, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/sources/{id}/verify".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amounts"] = @api_client.build_collection_param(amounts, "csv") if !amounts.nil? && !amounts.empty?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_sources_id_verify",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new subscription on an existing customer.</p>
    # @param customer [String]
    # @return [Subscription]
    def post_customers_customer_subscriptions(*, customer : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, backdate_start_date : Int64? = nil, billing_cycle_anchor : Int64? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : Int64? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemCreateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, transfer_data : TransferDataSpecs3? = nil, trial_end : PostCustomersCustomerSubscriptionsRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, trial_period_days : Int64? = nil)
      data, _status_code, _headers = post_customers_customer_subscriptions_with_http_info(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, expand: expand, items: items, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days)
      data
    end

    # &lt;p&gt;Creates a new subscription on an existing customer.&lt;/p&gt;
    # @param customer [String]
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def post_customers_customer_subscriptions_with_http_info(*, customer : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, backdate_start_date : Int64? = nil, billing_cycle_anchor : Int64? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : Int64? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemCreateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, transfer_data : TransferDataSpecs3? = nil, trial_end : PostCustomersCustomerSubscriptionsRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, trial_period_days : Int64? = nil)
      request = build_api_request_for_post_customers_customer_subscriptions(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, expand: expand, items: items, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Subscription.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new subscription on an existing customer.&lt;/p&gt;
    # @param customer [String]
    # @return nil
    def post_customers_customer_subscriptions(*, customer : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, backdate_start_date : Int64? = nil, billing_cycle_anchor : Int64? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : Int64? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemCreateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, transfer_data : TransferDataSpecs3? = nil, trial_end : PostCustomersCustomerSubscriptionsRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, trial_period_days : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_subscriptions(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, expand: expand, items: items, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_subscriptions(*, customer : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, backdate_start_date : Int64? = nil, billing_cycle_anchor : Int64? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : Int64? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemCreateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, transfer_data : TransferDataSpecs3? = nil, trial_end : PostCustomersCustomerSubscriptionsRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, trial_period_days : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_subscriptions ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.post_customers_customer_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_payment_method.nil? && default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\" when calling DefaultApi.post_customers_customer_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_source.nil? && default_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_source\" when calling DefaultApi.post_customers_customer_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete"]
      if @api_client.config.client_side_validation && !payment_behavior.nil? && !allowable_values.includes?(payment_behavior)
        raise ArgumentError.new("invalid value for \"payment_behavior\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !promotion_code.nil? && promotion_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"promotion_code\" when calling DefaultApi.post_customers_customer_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !proration_behavior.nil? && !allowable_values.includes?(proration_behavior)
        raise ArgumentError.new("invalid value for \"proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/customers/{customer}/subscriptions".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["add_invoice_items"] = @api_client.build_collection_param(add_invoice_items, "csv") if !add_invoice_items.nil? && !add_invoice_items.empty?
      form_params["application_fee_percent"] = application_fee_percent.to_s if !application_fee_percent.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["backdate_start_date"] = backdate_start_date.to_s if !backdate_start_date.nil?
      form_params["billing_cycle_anchor"] = billing_cycle_anchor.to_s if !billing_cycle_anchor.nil?
      form_params["billing_thresholds"] = billing_thresholds.to_s if !billing_thresholds.nil?
      form_params["cancel_at"] = cancel_at.to_s if !cancel_at.nil?
      form_params["cancel_at_period_end"] = cancel_at_period_end.to_s if !cancel_at_period_end.nil?
      form_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      form_params["coupon"] = coupon.to_s if !coupon.nil?
      form_params["days_until_due"] = days_until_due.to_s if !days_until_due.nil?
      form_params["default_payment_method"] = default_payment_method.to_s if !default_payment_method.nil?
      form_params["default_source"] = default_source.to_s if !default_source.nil?
      form_params["default_tax_rates"] = default_tax_rates.to_s if !default_tax_rates.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["items"] = @api_client.build_collection_param(items, "csv") if !items.nil? && !items.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["off_session"] = off_session.to_s if !off_session.nil?
      form_params["payment_behavior"] = payment_behavior.to_s if !payment_behavior.nil?
      form_params["payment_settings"] = payment_settings.to_s if !payment_settings.nil?
      form_params["pending_invoice_item_interval"] = pending_invoice_item_interval.to_s if !pending_invoice_item_interval.nil?
      form_params["promotion_code"] = promotion_code.to_s if !promotion_code.nil?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?
      form_params["trial_end"] = trial_end.to_s if !trial_end.nil?
      form_params["trial_from_plan"] = trial_from_plan.to_s if !trial_from_plan.nil?
      form_params["trial_period_days"] = trial_period_days.to_s if !trial_period_days.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_subscriptions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href=\"#upcoming_invoice\">upcoming invoice</a> endpoint.</p>
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Subscription]
    def post_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, billing_cycle_anchor : String? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemUpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, pause_collection : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, transfer_data : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, trial_from_plan : Bool? = nil)
      data, _status_code, _headers = post_customers_customer_subscriptions_subscription_exposed_id_with_http_info(customer: customer, subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, expand: expand, items: items, metadata: metadata, off_session: off_session, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan)
      data
    end

    # &lt;p&gt;Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the &lt;a href&#x3D;\&quot;#upcoming_invoice\&quot;&gt;upcoming invoice&lt;/a&gt; endpoint.&lt;/p&gt;
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def post_customers_customer_subscriptions_subscription_exposed_id_with_http_info(*, customer : String, subscription_exposed_id : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, billing_cycle_anchor : String? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemUpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, pause_collection : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, transfer_data : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, trial_from_plan : Bool? = nil)
      request = build_api_request_for_post_customers_customer_subscriptions_subscription_exposed_id(customer: customer, subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, expand: expand, items: items, metadata: metadata, off_session: off_session, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_subscriptions_subscription_exposed_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Subscription.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the &lt;a href&#x3D;\&quot;#upcoming_invoice\&quot;&gt;upcoming invoice&lt;/a&gt; endpoint.&lt;/p&gt;
    # @param customer [String]
    # @param subscription_exposed_id [String]
    # @return nil
    def post_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, billing_cycle_anchor : String? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemUpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, pause_collection : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, transfer_data : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_subscriptions_subscription_exposed_id(customer: customer, subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, expand: expand, items: items, metadata: metadata, off_session: off_session, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_subscriptions_subscription_exposed_id(*, customer : String, subscription_exposed_id : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, billing_cycle_anchor : String? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemUpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, pause_collection : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, transfer_data : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, trial_from_plan : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["now", "unchanged"]
      if @api_client.config.client_side_validation && !billing_cycle_anchor.nil? && !allowable_values.includes?(billing_cycle_anchor)
        raise ArgumentError.new("invalid value for \"billing_cycle_anchor\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !billing_cycle_anchor.nil? && billing_cycle_anchor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"billing_cycle_anchor\" when calling DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_payment_method.nil? && default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\" when calling DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_source.nil? && default_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_source\" when calling DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete"]
      if @api_client.config.client_side_validation && !payment_behavior.nil? && !allowable_values.includes?(payment_behavior)
        raise ArgumentError.new("invalid value for \"payment_behavior\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !promotion_code.nil? && promotion_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"promotion_code\" when calling DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !proration_behavior.nil? && !allowable_values.includes?(proration_behavior)
        raise ArgumentError.new("invalid value for \"proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}".sub("{" + "customer" + "}", URI.encode_path(customer.to_s)).sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["add_invoice_items"] = @api_client.build_collection_param(add_invoice_items, "csv") if !add_invoice_items.nil? && !add_invoice_items.empty?
      form_params["application_fee_percent"] = application_fee_percent.to_s if !application_fee_percent.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["billing_cycle_anchor"] = billing_cycle_anchor.to_s if !billing_cycle_anchor.nil?
      form_params["billing_thresholds"] = billing_thresholds.to_s if !billing_thresholds.nil?
      form_params["cancel_at"] = cancel_at.to_s if !cancel_at.nil?
      form_params["cancel_at_period_end"] = cancel_at_period_end.to_s if !cancel_at_period_end.nil?
      form_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      form_params["coupon"] = coupon.to_s if !coupon.nil?
      form_params["days_until_due"] = days_until_due.to_s if !days_until_due.nil?
      form_params["default_payment_method"] = default_payment_method.to_s if !default_payment_method.nil?
      form_params["default_source"] = default_source.to_s if !default_source.nil?
      form_params["default_tax_rates"] = default_tax_rates.to_s if !default_tax_rates.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["items"] = @api_client.build_collection_param(items, "csv") if !items.nil? && !items.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["off_session"] = off_session.to_s if !off_session.nil?
      form_params["pause_collection"] = pause_collection.to_s if !pause_collection.nil?
      form_params["payment_behavior"] = payment_behavior.to_s if !payment_behavior.nil?
      form_params["payment_settings"] = payment_settings.to_s if !payment_settings.nil?
      form_params["pending_invoice_item_interval"] = pending_invoice_item_interval.to_s if !pending_invoice_item_interval.nil?
      form_params["promotion_code"] = promotion_code.to_s if !promotion_code.nil?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?
      form_params["proration_date"] = proration_date.to_s if !proration_date.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?
      form_params["trial_end"] = trial_end.to_s if !trial_end.nil?
      form_params["trial_from_plan"] = trial_from_plan.to_s if !trial_from_plan.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>TaxID</code> object for a customer.</p>
    # @param customer [String]
    # @param _type [String] Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`
    # @param value [String] Value of the tax ID.
    # @return [TaxId]
    def post_customers_customer_tax_ids(*, customer : String, _type : String, value : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_customers_customer_tax_ids_with_http_info(customer: customer, _type: _type, value: value, expand: expand)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;TaxID&lt;/code&gt; object for a customer.&lt;/p&gt;
    # @param customer [String]
    # @param _type [String] Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`
    # @param value [String] Value of the tax ID.
    # @return [Array<(TaxId, Integer, Hash)>] TaxId data, response status code and response headers
    def post_customers_customer_tax_ids_with_http_info(*, customer : String, _type : String, value : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_customers_customer_tax_ids(customer: customer, _type: _type, value: value, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_customers_customer_tax_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TaxId.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new &lt;code&gt;TaxID&lt;/code&gt; object for a customer.&lt;/p&gt;
    # @param customer [String]
    # @param _type [String] Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`
    # @param value [String] Value of the tax ID.
    # @return nil
    def post_customers_customer_tax_ids(*, customer : String, _type : String, value : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_customers_customer_tax_ids(customer: customer, _type: _type, value: value, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_customers_customer_tax_ids(*, customer : String, _type : String, value : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_customers_customer_tax_ids ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_customers_customer_tax_ids, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["ae_trn", "au_abn", "au_arn", "bg_uic", "br_cnpj", "br_cpf", "ca_bn", "ca_gst_hst", "ca_pst_bc", "ca_pst_mb", "ca_pst_sk", "ca_qst", "ch_vat", "cl_tin", "es_cif", "eu_oss_vat", "eu_vat", "gb_vat", "ge_vat", "hk_br", "hu_tin", "id_npwp", "il_vat", "in_gst", "is_vat", "jp_cn", "jp_rn", "kr_brn", "li_uid", "mx_rfc", "my_frp", "my_itn", "my_sst", "no_vat", "nz_gst", "ru_inn", "ru_kpp", "sa_vat", "sg_gst", "sg_uen", "si_tin", "th_vat", "tw_vat", "ua_vat", "us_ein", "za_vat"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\" when calling DefaultApi.post_customers_customer_tax_ids, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/customers/{customer}/tax_ids".sub("{" + "customer" + "}", URI.encode_path(customer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["type"] = _type.to_s if !_type.nil?
      form_params["value"] = value.to_s if !value.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_customers_customer_tax_ids",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href=\"https://dashboard.stripe.com/disputes\">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>  <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href=\"/docs/disputes/categories\">guide to dispute types</a>.</p>
    # @param dispute [String]
    # @return [Dispute]
    def post_disputes_dispute(*, dispute : String, evidence : DisputeEvidenceParams? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, submit : Bool? = nil)
      data, _status_code, _headers = post_disputes_dispute_with_http_info(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata, submit: submit)
      data
    end

    # &lt;p&gt;When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/disputes\&quot;&gt;dashboard&lt;/a&gt;, but if you prefer, you can use the API to submit evidence programmatically.&lt;/p&gt;  &lt;p&gt;Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our &lt;a href&#x3D;\&quot;/docs/disputes/categories\&quot;&gt;guide to dispute types&lt;/a&gt;.&lt;/p&gt;
    # @param dispute [String]
    # @return [Array<(Dispute, Integer, Hash)>] Dispute data, response status code and response headers
    def post_disputes_dispute_with_http_info(*, dispute : String, evidence : DisputeEvidenceParams? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, submit : Bool? = nil)
      request = build_api_request_for_post_disputes_dispute(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata, submit: submit)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_disputes_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Dispute.from_json(data), status_code, headers
    end

    # &lt;p&gt;When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/disputes\&quot;&gt;dashboard&lt;/a&gt;, but if you prefer, you can use the API to submit evidence programmatically.&lt;/p&gt;  &lt;p&gt;Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our &lt;a href&#x3D;\&quot;/docs/disputes/categories\&quot;&gt;guide to dispute types&lt;/a&gt;.&lt;/p&gt;
    # @param dispute [String]
    # @return nil
    def post_disputes_dispute(*, dispute : String, evidence : DisputeEvidenceParams? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, submit : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_disputes_dispute(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata, submit: submit).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_disputes_dispute(*, dispute : String, evidence : DisputeEvidenceParams? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, submit : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_disputes_dispute ..." }
      end
      if @api_client.config.client_side_validation && dispute.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"dispute\" when calling DefaultApi.post_disputes_dispute, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["evidence"] = evidence.to_s if !evidence.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["submit"] = submit.to_s if !submit.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>  <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
    # @param dispute [String]
    # @return [Dispute]
    def post_disputes_dispute_close(*, dispute : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_disputes_dispute_close_with_http_info(dispute: dispute, expand: expand)
      data
    end

    # &lt;p&gt;Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.&lt;/p&gt;  &lt;p&gt;The status of the dispute will change from &lt;code&gt;needs_response&lt;/code&gt; to &lt;code&gt;lost&lt;/code&gt;. &lt;em&gt;Closing a dispute is irreversible&lt;/em&gt;.&lt;/p&gt;
    # @param dispute [String]
    # @return [Array<(Dispute, Integer, Hash)>] Dispute data, response status code and response headers
    def post_disputes_dispute_close_with_http_info(*, dispute : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_disputes_dispute_close(dispute: dispute, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_disputes_dispute_close\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Dispute.from_json(data), status_code, headers
    end

    # &lt;p&gt;Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.&lt;/p&gt;  &lt;p&gt;The status of the dispute will change from &lt;code&gt;needs_response&lt;/code&gt; to &lt;code&gt;lost&lt;/code&gt;. &lt;em&gt;Closing a dispute is irreversible&lt;/em&gt;.&lt;/p&gt;
    # @param dispute [String]
    # @return nil
    def post_disputes_dispute_close(*, dispute : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_disputes_dispute_close(dispute: dispute, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_disputes_dispute_close(*, dispute : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_disputes_dispute_close ..." }
      end
      if @api_client.config.client_side_validation && dispute.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"dispute\" when calling DefaultApi.post_disputes_dispute_close, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/disputes/{dispute}/close".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_disputes_dispute_close",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a short-lived API key for a given resource.</p>
    # @return [EphemeralKey]
    def post_ephemeral_keys(*, customer : String? = nil, expand : Array(String)? = nil, issuing_card : String? = nil)
      data, _status_code, _headers = post_ephemeral_keys_with_http_info(customer: customer, expand: expand, issuing_card: issuing_card)
      data
    end

    # &lt;p&gt;Creates a short-lived API key for a given resource.&lt;/p&gt;
    # @return [Array<(EphemeralKey, Integer, Hash)>] EphemeralKey data, response status code and response headers
    def post_ephemeral_keys_with_http_info(*, customer : String? = nil, expand : Array(String)? = nil, issuing_card : String? = nil)
      request = build_api_request_for_post_ephemeral_keys(customer: customer, expand: expand, issuing_card: issuing_card)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_ephemeral_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return EphemeralKey.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a short-lived API key for a given resource.&lt;/p&gt;
    # @return nil
    def post_ephemeral_keys(*, customer : String? = nil, expand : Array(String)? = nil, issuing_card : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_ephemeral_keys(customer: customer, expand: expand, issuing_card: issuing_card).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_ephemeral_keys(*, customer : String? = nil, expand : Array(String)? = nil, issuing_card : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_ephemeral_keys ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_ephemeral_keys, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !issuing_card.nil? && issuing_card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"issuing_card\" when calling DefaultApi.post_ephemeral_keys, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/ephemeral_keys"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["issuing_card"] = issuing_card.to_s if !issuing_card.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_ephemeral_keys",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new file link object.</p>
    # @param file [String] The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document_downloadable`, `pci_document`, `selfie`, `sigma_scheduled_query`, or `tax_document_user_upload`.
    # @return [FileLink]
    def post_file_links(*, file : String, expand : Array(String)? = nil, expires_at : Int64? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_file_links_with_http_info(file: file, expand: expand, expires_at: expires_at, metadata: metadata)
      data
    end

    # &lt;p&gt;Creates a new file link object.&lt;/p&gt;
    # @param file [String] The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document_downloadable`, `pci_document`, `selfie`, `sigma_scheduled_query`, or `tax_document_user_upload`.
    # @return [Array<(FileLink, Integer, Hash)>] FileLink data, response status code and response headers
    def post_file_links_with_http_info(*, file : String, expand : Array(String)? = nil, expires_at : Int64? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_file_links(file: file, expand: expand, expires_at: expires_at, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_file_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FileLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new file link object.&lt;/p&gt;
    # @param file [String] The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document_downloadable`, `pci_document`, `selfie`, `sigma_scheduled_query`, or `tax_document_user_upload`.
    # @return nil
    def post_file_links(*, file : String, expand : Array(String)? = nil, expires_at : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_file_links(file: file, expand: expand, expires_at: expires_at, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_file_links(*, file : String, expand : Array(String)? = nil, expires_at : Int64? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_file_links ..." }
      end
      if @api_client.config.client_side_validation && file.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"file\" when calling DefaultApi.post_file_links, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/file_links"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expires_at"] = expires_at.to_s if !expires_at.nil?
      form_params["file"] = file.to_s if !file.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_file_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing file link object. Expired links can no longer be updated.</p>
    # @param link [String]
    # @return [FileLink]
    def post_file_links_link(*, link : String, expand : Array(String)? = nil, expires_at : PostFileLinksLinkRequestExpiresAt? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_file_links_link_with_http_info(link: link, expand: expand, expires_at: expires_at, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates an existing file link object. Expired links can no longer be updated.&lt;/p&gt;
    # @param link [String]
    # @return [Array<(FileLink, Integer, Hash)>] FileLink data, response status code and response headers
    def post_file_links_link_with_http_info(*, link : String, expand : Array(String)? = nil, expires_at : PostFileLinksLinkRequestExpiresAt? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_file_links_link(link: link, expand: expand, expires_at: expires_at, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_file_links_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FileLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing file link object. Expired links can no longer be updated.&lt;/p&gt;
    # @param link [String]
    # @return nil
    def post_file_links_link(*, link : String, expand : Array(String)? = nil, expires_at : PostFileLinksLinkRequestExpiresAt? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_file_links_link(link: link, expand: expand, expires_at: expires_at, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_file_links_link(*, link : String, expand : Array(String)? = nil, expires_at : PostFileLinksLinkRequestExpiresAt? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_file_links_link ..." }
      end
      # resource path
      local_var_path = "/v1/file_links/{link}".sub("{" + "link" + "}", URI.encode_path(link.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expires_at"] = expires_at.to_s if !expires_at.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_file_links_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>  <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
    # @param file [String] A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol).
    # @param purpose [String] The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
    # @return [::File]
    def post_files(*, file : String, purpose : String, expand : Array(String)? = nil, file_link_data : FileLinkCreationParams? = nil)
      data, _status_code, _headers = post_files_with_http_info(file: file, purpose: purpose, expand: expand, file_link_data: file_link_data)
      data
    end

    # &lt;p&gt;To upload a file to Stripe, you’ll need to send a request of type &lt;code&gt;multipart/form-data&lt;/code&gt;. The request should contain the file you would like to upload, as well as the parameters for creating a file.&lt;/p&gt;  &lt;p&gt;All of Stripe’s officially supported Client libraries should have support for sending &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt;
    # @param file [String] A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol).
    # @param purpose [String] The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
    # @return [Array<(::File, Integer, Hash)>] ::File data, response status code and response headers
    def post_files_with_http_info(*, file : String, purpose : String, expand : Array(String)? = nil, file_link_data : FileLinkCreationParams? = nil)
      request = build_api_request_for_post_files(file: file, purpose: purpose, expand: expand, file_link_data: file_link_data)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ::File.from_json(data), status_code, headers
    end

    # &lt;p&gt;To upload a file to Stripe, you’ll need to send a request of type &lt;code&gt;multipart/form-data&lt;/code&gt;. The request should contain the file you would like to upload, as well as the parameters for creating a file.&lt;/p&gt;  &lt;p&gt;All of Stripe’s officially supported Client libraries should have support for sending &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt;
    # @param file [String] A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol).
    # @param purpose [String] The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
    # @return nil
    def post_files(*, file : String, purpose : String, expand : Array(String)? = nil, file_link_data : FileLinkCreationParams? = nil, &block : Crest::Response ->)
      build_api_request_for_post_files(file: file, purpose: purpose, expand: expand, file_link_data: file_link_data).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_files(*, file : String, purpose : String, expand : Array(String)? = nil, file_link_data : FileLinkCreationParams? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_files ..." }
      end
      allowable_values = ["account_requirement", "additional_verification", "business_icon", "business_logo", "customer_signature", "dispute_evidence", "identity_document", "pci_document", "tax_document_user_upload"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(purpose)
        raise ArgumentError.new("invalid value for \"purpose\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/files"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["file"] = file.to_s if !file.nil?
      form_params["file_link_data"] = file_link_data.to_s if !file_link_data.nil?
      form_params["purpose"] = purpose.to_s if !purpose.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_files",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
    # @param account [String]
    # @return [FinancialConnectionsAccount]
    def post_financial_connections_accounts_account_disconnect(*, account : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_financial_connections_accounts_account_disconnect_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
    # @param account [String]
    # @return [Array<(FinancialConnectionsAccount, Integer, Hash)>] FinancialConnectionsAccount data, response status code and response headers
    def post_financial_connections_accounts_account_disconnect_with_http_info(*, account : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_financial_connections_accounts_account_disconnect(account: account, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_financial_connections_accounts_account_disconnect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_financial_connections_accounts_account_disconnect(*, account : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_financial_connections_accounts_account_disconnect(account: account, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_financial_connections_accounts_account_disconnect(*, account : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_financial_connections_accounts_account_disconnect ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_financial_connections_accounts_account_disconnect, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/financial_connections/accounts/{account}/disconnect".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_financial_connections_accounts_account_disconnect",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
    # @param account [String]
    # @param features [Array(String)] The list of account features that you would like to refresh. Either: `balance` or `ownership`.
    # @return [FinancialConnectionsAccount]
    def post_financial_connections_accounts_account_refresh(*, account : String, features : Array(String), expand : Array(String)? = nil)
      data, _status_code, _headers = post_financial_connections_accounts_account_refresh_with_http_info(account: account, features: features, expand: expand)
      data
    end

    # &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @param account [String]
    # @param features [Array(String)] The list of account features that you would like to refresh. Either: `balance` or `ownership`.
    # @return [Array<(FinancialConnectionsAccount, Integer, Hash)>] FinancialConnectionsAccount data, response status code and response headers
    def post_financial_connections_accounts_account_refresh_with_http_info(*, account : String, features : Array(String), expand : Array(String)? = nil)
      request = build_api_request_for_post_financial_connections_accounts_account_refresh(account: account, features: features, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_financial_connections_accounts_account_refresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @param account [String]
    # @param features [Array(String)] The list of account features that you would like to refresh. Either: `balance` or `ownership`.
    # @return nil
    def post_financial_connections_accounts_account_refresh(*, account : String, features : Array(String), expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_financial_connections_accounts_account_refresh(account: account, features: features, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_financial_connections_accounts_account_refresh(*, account : String, features : Array(String), expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_financial_connections_accounts_account_refresh ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_financial_connections_accounts_account_refresh, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["balance", "ownership"]
      if @api_client.config.client_side_validation && !features.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"features\", must include one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/financial_connections/accounts/{account}/refresh".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = @api_client.build_collection_param(features, "csv") if !features.nil? && !features.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_financial_connections_accounts_account_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
    # @param account_holder [AccountholderParams1]
    # @param permissions [Array(String)] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @return [FinancialConnectionsSession]
    def post_financial_connections_sessions(*, account_holder : AccountholderParams1, permissions : Array(String), expand : Array(String)? = nil, filters : FiltersParams? = nil, return_url : String? = nil)
      data, _status_code, _headers = post_financial_connections_sessions_with_http_info(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url)
      data
    end

    # &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
    # @param account_holder [AccountholderParams1]
    # @param permissions [Array(String)] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @return [Array<(FinancialConnectionsSession, Integer, Hash)>] FinancialConnectionsSession data, response status code and response headers
    def post_financial_connections_sessions_with_http_info(*, account_holder : AccountholderParams1, permissions : Array(String), expand : Array(String)? = nil, filters : FiltersParams? = nil, return_url : String? = nil)
      request = build_api_request_for_post_financial_connections_sessions(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_financial_connections_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
    # @param account_holder [AccountholderParams1]
    # @param permissions [Array(String)] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @return nil
    def post_financial_connections_sessions(*, account_holder : AccountholderParams1, permissions : Array(String), expand : Array(String)? = nil, filters : FiltersParams? = nil, return_url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_financial_connections_sessions(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_financial_connections_sessions(*, account_holder : AccountholderParams1, permissions : Array(String), expand : Array(String)? = nil, filters : FiltersParams? = nil, return_url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_financial_connections_sessions ..." }
      end
      allowable_values = ["balances", "ownership", "payment_method", "transactions"]
      if @api_client.config.client_side_validation && !permissions.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"permissions\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !return_url.nil? && return_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"return_url\" when calling DefaultApi.post_financial_connections_sessions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/financial_connections/sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder"] = account_holder.to_s if !account_holder.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["filters"] = filters.to_s if !filters.nil?
      form_params["permissions"] = @api_client.build_collection_param(permissions, "csv") if !permissions.nil? && !permissions.empty?
      form_params["return_url"] = return_url.to_s if !return_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_financial_connections_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a VerificationSession object.</p>  <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>  <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>  <p>Related guide: <a href=\"/docs/identity/verify-identity-documents\">Verify your users’ identity documents</a>.</p>
    # @param _type [String] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    # @return [IdentityVerificationSession]
    def post_identity_verification_sessions(*, _type : String, expand : Array(String)? = nil, options : SessionOptionsParam? = nil, return_url : String? = nil)
      data, _status_code, _headers = post_identity_verification_sessions_with_http_info(_type: _type, expand: expand, options: options, return_url: return_url)
      data
    end

    # &lt;p&gt;Creates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;After the VerificationSession is created, display a verification modal using the session &lt;code&gt;client_secret&lt;/code&gt; or send your users to the session’s &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;Related guide: &lt;a href&#x3D;\&quot;/docs/identity/verify-identity-documents\&quot;&gt;Verify your users’ identity documents&lt;/a&gt;.&lt;/p&gt;
    # @param _type [String] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    # @return [Array<(IdentityVerificationSession, Integer, Hash)>] IdentityVerificationSession data, response status code and response headers
    def post_identity_verification_sessions_with_http_info(*, _type : String, expand : Array(String)? = nil, options : SessionOptionsParam? = nil, return_url : String? = nil)
      request = build_api_request_for_post_identity_verification_sessions(_type: _type, expand: expand, options: options, return_url: return_url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_identity_verification_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IdentityVerificationSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;After the VerificationSession is created, display a verification modal using the session &lt;code&gt;client_secret&lt;/code&gt; or send your users to the session’s &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;Related guide: &lt;a href&#x3D;\&quot;/docs/identity/verify-identity-documents\&quot;&gt;Verify your users’ identity documents&lt;/a&gt;.&lt;/p&gt;
    # @param _type [String] The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    # @return nil
    def post_identity_verification_sessions(*, _type : String, expand : Array(String)? = nil, options : SessionOptionsParam? = nil, return_url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_identity_verification_sessions(_type: _type, expand: expand, options: options, return_url: return_url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_identity_verification_sessions(*, _type : String, expand : Array(String)? = nil, options : SessionOptionsParam? = nil, return_url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_identity_verification_sessions ..." }
      end
      allowable_values = ["document", "id_number"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/identity/verification_sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["options"] = options.to_s if !options.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_identity_verification_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a VerificationSession object.</p>  <p>When the session status is <code>requires_input</code>, you can use this method to update the verification check and options.</p>
    # @param session [String]
    # @return [IdentityVerificationSession]
    def post_identity_verification_sessions_session(*, session : String, expand : Array(String)? = nil, options : SessionOptionsParam? = nil, _type : String? = nil)
      data, _status_code, _headers = post_identity_verification_sessions_session_with_http_info(session: session, expand: expand, options: options, _type: _type)
      data
    end

    # &lt;p&gt;Updates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to update the verification check and options.&lt;/p&gt;
    # @param session [String]
    # @return [Array<(IdentityVerificationSession, Integer, Hash)>] IdentityVerificationSession data, response status code and response headers
    def post_identity_verification_sessions_session_with_http_info(*, session : String, expand : Array(String)? = nil, options : SessionOptionsParam? = nil, _type : String? = nil)
      request = build_api_request_for_post_identity_verification_sessions_session(session: session, expand: expand, options: options, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_identity_verification_sessions_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IdentityVerificationSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to update the verification check and options.&lt;/p&gt;
    # @param session [String]
    # @return nil
    def post_identity_verification_sessions_session(*, session : String, expand : Array(String)? = nil, options : SessionOptionsParam? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_identity_verification_sessions_session(session: session, expand: expand, options: options, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_identity_verification_sessions_session(*, session : String, expand : Array(String)? = nil, options : SessionOptionsParam? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_identity_verification_sessions_session ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.post_identity_verification_sessions_session, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["document", "id_number"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/identity/verification_sessions/{session}".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["options"] = options.to_s if !options.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_identity_verification_sessions_session",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href=\"/docs/identity/how-sessions-work\">status</a>.</p>  <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href=\"/docs/identity/verification-sessions#cancel\">Learn more</a>.</p>
    # @param session [String]
    # @return [IdentityVerificationSession]
    def post_identity_verification_sessions_session_cancel(*, session : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_identity_verification_sessions_session_cancel_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;A VerificationSession object can be canceled when it is in &lt;code&gt;requires_input&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Once canceled, future submission attempts are disabled. This cannot be undone. &lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#cancel\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
    # @param session [String]
    # @return [Array<(IdentityVerificationSession, Integer, Hash)>] IdentityVerificationSession data, response status code and response headers
    def post_identity_verification_sessions_session_cancel_with_http_info(*, session : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_identity_verification_sessions_session_cancel(session: session, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_identity_verification_sessions_session_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IdentityVerificationSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;A VerificationSession object can be canceled when it is in &lt;code&gt;requires_input&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Once canceled, future submission attempts are disabled. This cannot be undone. &lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#cancel\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
    # @param session [String]
    # @return nil
    def post_identity_verification_sessions_session_cancel(*, session : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_identity_verification_sessions_session_cancel(session: session, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_identity_verification_sessions_session_cancel(*, session : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_identity_verification_sessions_session_cancel ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.post_identity_verification_sessions_session_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions/{session}/cancel".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_identity_verification_sessions_session_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.</p>  <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code> <a href=\"/docs/identity/how-sessions-work\">status</a>. Redacting a VerificationSession in <code>requires_action</code> state will automatically cancel it.</p>  <p>The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event will be emitted.</p>  <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or used for any purpose.</p>  <p><a href=\"/docs/identity/verification-sessions#redact\">Learn more</a>.</p>
    # @param session [String]
    # @return [IdentityVerificationSession]
    def post_identity_verification_sessions_session_redact(*, session : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_identity_verification_sessions_session_redact_with_http_info(session: session, expand: expand)
      data
    end

    # &lt;p&gt;Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.&lt;/p&gt;  &lt;p&gt;A VerificationSession object can be redacted when it is in &lt;code&gt;requires_input&lt;/code&gt; or &lt;code&gt;verified&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;. Redacting a VerificationSession in &lt;code&gt;requires_action&lt;/code&gt; state will automatically cancel it.&lt;/p&gt;  &lt;p&gt;The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s &lt;code&gt;redaction.status&lt;/code&gt; field will be set to &lt;code&gt;processing&lt;/code&gt;; when the process is finished, it will change to &lt;code&gt;redacted&lt;/code&gt; and an &lt;code&gt;identity.verification_session.redacted&lt;/code&gt; event will be emitted.&lt;/p&gt;  &lt;p&gt;Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string &lt;code&gt;[redacted]&lt;/code&gt; or a similar placeholder. The &lt;code&gt;metadata&lt;/code&gt; field will also be erased. Redacted objects cannot be updated or used for any purpose.&lt;/p&gt;  &lt;p&gt;&lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#redact\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
    # @param session [String]
    # @return [Array<(IdentityVerificationSession, Integer, Hash)>] IdentityVerificationSession data, response status code and response headers
    def post_identity_verification_sessions_session_redact_with_http_info(*, session : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_identity_verification_sessions_session_redact(session: session, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_identity_verification_sessions_session_redact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IdentityVerificationSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.&lt;/p&gt;  &lt;p&gt;A VerificationSession object can be redacted when it is in &lt;code&gt;requires_input&lt;/code&gt; or &lt;code&gt;verified&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;. Redacting a VerificationSession in &lt;code&gt;requires_action&lt;/code&gt; state will automatically cancel it.&lt;/p&gt;  &lt;p&gt;The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s &lt;code&gt;redaction.status&lt;/code&gt; field will be set to &lt;code&gt;processing&lt;/code&gt;; when the process is finished, it will change to &lt;code&gt;redacted&lt;/code&gt; and an &lt;code&gt;identity.verification_session.redacted&lt;/code&gt; event will be emitted.&lt;/p&gt;  &lt;p&gt;Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string &lt;code&gt;[redacted]&lt;/code&gt; or a similar placeholder. The &lt;code&gt;metadata&lt;/code&gt; field will also be erased. Redacted objects cannot be updated or used for any purpose.&lt;/p&gt;  &lt;p&gt;&lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#redact\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
    # @param session [String]
    # @return nil
    def post_identity_verification_sessions_session_redact(*, session : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_identity_verification_sessions_session_redact(session: session, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_identity_verification_sessions_session_redact(*, session : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_identity_verification_sessions_session_redact ..." }
      end
      if @api_client.config.client_side_validation && session.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"session\" when calling DefaultApi.post_identity_verification_sessions_session_redact, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/identity/verification_sessions/{session}/redact".sub("{" + "session" + "}", URI.encode_path(session.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_identity_verification_sessions_session_redact",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
    # @param customer [String] The ID of the customer who will be billed when this invoice item is billed.
    # @return [Invoiceitem]
    def post_invoiceitems(*, customer : String, amount : Int64? = nil, currency : String? = nil, description : String? = nil, discountable : Bool? = nil, discounts : PostInvoiceitemsRequestDiscounts? = nil, expand : Array(String)? = nil, invoice : String? = nil, metadata : PostAccountRequestMetadata? = nil, period : Period1? = nil, price : String? = nil, price_data : OneTimePriceData1? = nil, quantity : Int64? = nil, subscription : String? = nil, tax_rates : Array(String)? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil)
      data, _status_code, _headers = post_invoiceitems_with_http_info(customer: customer, amount: amount, currency: currency, description: description, discountable: discountable, discounts: discounts, expand: expand, invoice: invoice, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, subscription: subscription, tax_rates: tax_rates, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal)
      data
    end

    # &lt;p&gt;Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.&lt;/p&gt;
    # @param customer [String] The ID of the customer who will be billed when this invoice item is billed.
    # @return [Array<(Invoiceitem, Integer, Hash)>] Invoiceitem data, response status code and response headers
    def post_invoiceitems_with_http_info(*, customer : String, amount : Int64? = nil, currency : String? = nil, description : String? = nil, discountable : Bool? = nil, discounts : PostInvoiceitemsRequestDiscounts? = nil, expand : Array(String)? = nil, invoice : String? = nil, metadata : PostAccountRequestMetadata? = nil, period : Period1? = nil, price : String? = nil, price_data : OneTimePriceData1? = nil, quantity : Int64? = nil, subscription : String? = nil, tax_rates : Array(String)? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil)
      request = build_api_request_for_post_invoiceitems(customer: customer, amount: amount, currency: currency, description: description, discountable: discountable, discounts: discounts, expand: expand, invoice: invoice, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, subscription: subscription, tax_rates: tax_rates, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoiceitems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoiceitem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.&lt;/p&gt;
    # @param customer [String] The ID of the customer who will be billed when this invoice item is billed.
    # @return nil
    def post_invoiceitems(*, customer : String, amount : Int64? = nil, currency : String? = nil, description : String? = nil, discountable : Bool? = nil, discounts : PostInvoiceitemsRequestDiscounts? = nil, expand : Array(String)? = nil, invoice : String? = nil, metadata : PostAccountRequestMetadata? = nil, period : Period1? = nil, price : String? = nil, price_data : OneTimePriceData1? = nil, quantity : Int64? = nil, subscription : String? = nil, tax_rates : Array(String)? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoiceitems(customer: customer, amount: amount, currency: currency, description: description, discountable: discountable, discounts: discounts, expand: expand, invoice: invoice, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, subscription: subscription, tax_rates: tax_rates, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoiceitems(*, customer : String, amount : Int64? = nil, currency : String? = nil, description : String? = nil, discountable : Bool? = nil, discounts : PostInvoiceitemsRequestDiscounts? = nil, expand : Array(String)? = nil, invoice : String? = nil, metadata : PostAccountRequestMetadata? = nil, period : Period1? = nil, price : String? = nil, price_data : OneTimePriceData1? = nil, quantity : Int64? = nil, subscription : String? = nil, tax_rates : Array(String)? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoiceitems ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !invoice.nil? && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.post_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !price.nil? && price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\" when calling DefaultApi.post_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !subscription.nil? && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\" when calling DefaultApi.post_invoiceitems, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoiceitems"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["discountable"] = discountable.to_s if !discountable.nil?
      form_params["discounts"] = discounts.to_s if !discounts.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice"] = invoice.to_s if !invoice.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["period"] = period.to_s if !period.nil?
      form_params["price"] = price.to_s if !price.nil?
      form_params["price_data"] = price_data.to_s if !price_data.nil?
      form_params["quantity"] = quantity.to_s if !quantity.nil?
      form_params["subscription"] = subscription.to_s if !subscription.nil?
      form_params["tax_rates"] = @api_client.build_collection_param(tax_rates, "csv") if !tax_rates.nil? && !tax_rates.empty?
      form_params["unit_amount"] = unit_amount.to_s if !unit_amount.nil?
      form_params["unit_amount_decimal"] = unit_amount_decimal.to_s if !unit_amount_decimal.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoiceitems",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
    # @param invoiceitem [String]
    # @return [Invoiceitem]
    def post_invoiceitems_invoiceitem(*, invoiceitem : String, amount : Int64? = nil, description : String? = nil, discountable : Bool? = nil, discounts : PostInvoiceitemsInvoiceitemRequestDiscounts? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, period : Period1? = nil, price : String? = nil, price_data : OneTimePriceData1? = nil, quantity : Int64? = nil, tax_rates : PostInvoiceitemsInvoiceitemRequestTaxRates? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil)
      data, _status_code, _headers = post_invoiceitems_invoiceitem_with_http_info(invoiceitem: invoiceitem, amount: amount, description: description, discountable: discountable, discounts: discounts, expand: expand, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, tax_rates: tax_rates, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal)
      data
    end

    # &lt;p&gt;Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.&lt;/p&gt;
    # @param invoiceitem [String]
    # @return [Array<(Invoiceitem, Integer, Hash)>] Invoiceitem data, response status code and response headers
    def post_invoiceitems_invoiceitem_with_http_info(*, invoiceitem : String, amount : Int64? = nil, description : String? = nil, discountable : Bool? = nil, discounts : PostInvoiceitemsInvoiceitemRequestDiscounts? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, period : Period1? = nil, price : String? = nil, price_data : OneTimePriceData1? = nil, quantity : Int64? = nil, tax_rates : PostInvoiceitemsInvoiceitemRequestTaxRates? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil)
      request = build_api_request_for_post_invoiceitems_invoiceitem(invoiceitem: invoiceitem, amount: amount, description: description, discountable: discountable, discounts: discounts, expand: expand, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, tax_rates: tax_rates, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoiceitems_invoiceitem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoiceitem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.&lt;/p&gt;
    # @param invoiceitem [String]
    # @return nil
    def post_invoiceitems_invoiceitem(*, invoiceitem : String, amount : Int64? = nil, description : String? = nil, discountable : Bool? = nil, discounts : PostInvoiceitemsInvoiceitemRequestDiscounts? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, period : Period1? = nil, price : String? = nil, price_data : OneTimePriceData1? = nil, quantity : Int64? = nil, tax_rates : PostInvoiceitemsInvoiceitemRequestTaxRates? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoiceitems_invoiceitem(invoiceitem: invoiceitem, amount: amount, description: description, discountable: discountable, discounts: discounts, expand: expand, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, tax_rates: tax_rates, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoiceitems_invoiceitem(*, invoiceitem : String, amount : Int64? = nil, description : String? = nil, discountable : Bool? = nil, discounts : PostInvoiceitemsInvoiceitemRequestDiscounts? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, period : Period1? = nil, price : String? = nil, price_data : OneTimePriceData1? = nil, quantity : Int64? = nil, tax_rates : PostInvoiceitemsInvoiceitemRequestTaxRates? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoiceitems_invoiceitem ..." }
      end
      if @api_client.config.client_side_validation && invoiceitem.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoiceitem\" when calling DefaultApi.post_invoiceitems_invoiceitem, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_invoiceitems_invoiceitem, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !price.nil? && price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\" when calling DefaultApi.post_invoiceitems_invoiceitem, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoiceitems/{invoiceitem}".sub("{" + "invoiceitem" + "}", URI.encode_path(invoiceitem.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["discountable"] = discountable.to_s if !discountable.nil?
      form_params["discounts"] = discounts.to_s if !discounts.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["period"] = period.to_s if !period.nil?
      form_params["price"] = price.to_s if !price.nil?
      form_params["price_data"] = price_data.to_s if !price_data.nil?
      form_params["quantity"] = quantity.to_s if !quantity.nil?
      form_params["tax_rates"] = tax_rates.to_s if !tax_rates.nil?
      form_params["unit_amount"] = unit_amount.to_s if !unit_amount.nil?
      form_params["unit_amount_decimal"] = unit_amount_decimal.to_s if !unit_amount_decimal.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoiceitems_invoiceitem",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you <a href=\"#finalize_invoice\">finalize</a> the invoice, which allows you to <a href=\"#pay_invoice\">pay</a> or <a href=\"#send_invoice\">send</a> the invoice to your customers.</p>
    # @return [Invoice]
    def post_invoices(*, account_tax_ids : PostInvoicesRequestAccountTaxIds? = nil, application_fee_amount : Int64? = nil, auto_advance : Bool? = nil, automatic_tax : AutomaticTaxParam? = nil, collection_method : String? = nil, custom_fields : PostInvoicesRequestCustomFields? = nil, customer : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : Array(String)? = nil, description : String? = nil, discounts : PostInvoicesRequestDiscounts? = nil, due_date : Int64? = nil, expand : Array(String)? = nil, footer : String? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : String? = nil, payment_settings : PaymentSettings1? = nil, pending_invoice_items_behavior : String? = nil, statement_descriptor : String? = nil, subscription : String? = nil, transfer_data : TransferDataSpecs4? = nil)
      data, _status_code, _headers = post_invoices_with_http_info(account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, customer: customer, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, expand: expand, footer: footer, metadata: metadata, on_behalf_of: on_behalf_of, payment_settings: payment_settings, pending_invoice_items_behavior: pending_invoice_items_behavior, statement_descriptor: statement_descriptor, subscription: subscription, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you &lt;a href&#x3D;\&quot;#finalize_invoice\&quot;&gt;finalize&lt;/a&gt; the invoice, which allows you to &lt;a href&#x3D;\&quot;#pay_invoice\&quot;&gt;pay&lt;/a&gt; or &lt;a href&#x3D;\&quot;#send_invoice\&quot;&gt;send&lt;/a&gt; the invoice to your customers.&lt;/p&gt;
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def post_invoices_with_http_info(*, account_tax_ids : PostInvoicesRequestAccountTaxIds? = nil, application_fee_amount : Int64? = nil, auto_advance : Bool? = nil, automatic_tax : AutomaticTaxParam? = nil, collection_method : String? = nil, custom_fields : PostInvoicesRequestCustomFields? = nil, customer : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : Array(String)? = nil, description : String? = nil, discounts : PostInvoicesRequestDiscounts? = nil, due_date : Int64? = nil, expand : Array(String)? = nil, footer : String? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : String? = nil, payment_settings : PaymentSettings1? = nil, pending_invoice_items_behavior : String? = nil, statement_descriptor : String? = nil, subscription : String? = nil, transfer_data : TransferDataSpecs4? = nil)
      request = build_api_request_for_post_invoices(account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, customer: customer, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, expand: expand, footer: footer, metadata: metadata, on_behalf_of: on_behalf_of, payment_settings: payment_settings, pending_invoice_items_behavior: pending_invoice_items_behavior, statement_descriptor: statement_descriptor, subscription: subscription, transfer_data: transfer_data)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you &lt;a href&#x3D;\&quot;#finalize_invoice\&quot;&gt;finalize&lt;/a&gt; the invoice, which allows you to &lt;a href&#x3D;\&quot;#pay_invoice\&quot;&gt;pay&lt;/a&gt; or &lt;a href&#x3D;\&quot;#send_invoice\&quot;&gt;send&lt;/a&gt; the invoice to your customers.&lt;/p&gt;
    # @return nil
    def post_invoices(*, account_tax_ids : PostInvoicesRequestAccountTaxIds? = nil, application_fee_amount : Int64? = nil, auto_advance : Bool? = nil, automatic_tax : AutomaticTaxParam? = nil, collection_method : String? = nil, custom_fields : PostInvoicesRequestCustomFields? = nil, customer : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : Array(String)? = nil, description : String? = nil, discounts : PostInvoicesRequestDiscounts? = nil, due_date : Int64? = nil, expand : Array(String)? = nil, footer : String? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : String? = nil, payment_settings : PaymentSettings1? = nil, pending_invoice_items_behavior : String? = nil, statement_descriptor : String? = nil, subscription : String? = nil, transfer_data : TransferDataSpecs4? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoices(account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, customer: customer, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, expand: expand, footer: footer, metadata: metadata, on_behalf_of: on_behalf_of, payment_settings: payment_settings, pending_invoice_items_behavior: pending_invoice_items_behavior, statement_descriptor: statement_descriptor, subscription: subscription, transfer_data: transfer_data).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoices(*, account_tax_ids : PostInvoicesRequestAccountTaxIds? = nil, application_fee_amount : Int64? = nil, auto_advance : Bool? = nil, automatic_tax : AutomaticTaxParam? = nil, collection_method : String? = nil, custom_fields : PostInvoicesRequestCustomFields? = nil, customer : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : Array(String)? = nil, description : String? = nil, discounts : PostInvoicesRequestDiscounts? = nil, due_date : Int64? = nil, expand : Array(String)? = nil, footer : String? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : String? = nil, payment_settings : PaymentSettings1? = nil, pending_invoice_items_behavior : String? = nil, statement_descriptor : String? = nil, subscription : String? = nil, transfer_data : TransferDataSpecs4? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoices ..." }
      end
      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_invoices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_payment_method.nil? && default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\" when calling DefaultApi.post_invoices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_source.nil? && default_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_source\" when calling DefaultApi.post_invoices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_invoices, the character length must be smaller than or equal to 1500.")
      end

      if @api_client.config.client_side_validation && !footer.nil? && footer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"footer\" when calling DefaultApi.post_invoices, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["exclude", "include", "include_and_require"]
      if @api_client.config.client_side_validation && !pending_invoice_items_behavior.nil? && !allowable_values.includes?(pending_invoice_items_behavior)
        raise ArgumentError.new("invalid value for \"pending_invoice_items_behavior\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_invoices, the character length must be smaller than or equal to 22.")
      end

      if @api_client.config.client_side_validation && !subscription.nil? && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\" when calling DefaultApi.post_invoices, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_tax_ids"] = account_tax_ids.to_s if !account_tax_ids.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["auto_advance"] = auto_advance.to_s if !auto_advance.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      form_params["custom_fields"] = custom_fields.to_s if !custom_fields.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["days_until_due"] = days_until_due.to_s if !days_until_due.nil?
      form_params["default_payment_method"] = default_payment_method.to_s if !default_payment_method.nil?
      form_params["default_source"] = default_source.to_s if !default_source.nil?
      form_params["default_tax_rates"] = @api_client.build_collection_param(default_tax_rates, "csv") if !default_tax_rates.nil? && !default_tax_rates.empty?
      form_params["description"] = description.to_s if !description.nil?
      form_params["discounts"] = discounts.to_s if !discounts.nil?
      form_params["due_date"] = due_date.to_s if !due_date.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["footer"] = footer.to_s if !footer.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["payment_settings"] = payment_settings.to_s if !payment_settings.nil?
      form_params["pending_invoice_items_behavior"] = pending_invoice_items_behavior.to_s if !pending_invoice_items_behavior.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["subscription"] = subscription.to_s if !subscription.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Draft invoices are fully editable. Once an invoice is <a href=\"/docs/billing/invoices/workflow#finalized\">finalized</a>, monetary values, as well as <code>collection_method</code>, become uneditable.</p>  <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or <a href=\"/docs/billing/invoices/reconciliation\">automatically reconciling</a> invoices, pass <code>auto_advance=false</code>.</p>
    # @param invoice [String]
    # @return [Invoice]
    def post_invoices_invoice(*, invoice : String, account_tax_ids : PostInvoicesRequestAccountTaxIds? = nil, application_fee_amount : Int64? = nil, auto_advance : Bool? = nil, automatic_tax : AutomaticTaxParam? = nil, collection_method : String? = nil, custom_fields : PostInvoicesInvoiceRequestCustomFields? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostInvoicesInvoiceRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostInvoicesInvoiceRequestDiscounts? = nil, due_date : Int64? = nil, expand : Array(String)? = nil, footer : String? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : PostInvoicesInvoiceRequestOnBehalfOf? = nil, payment_settings : PaymentSettings1? = nil, statement_descriptor : String? = nil, transfer_data : PostInvoicesInvoiceRequestTransferData? = nil)
      data, _status_code, _headers = post_invoices_invoice_with_http_info(invoice: invoice, account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, expand: expand, footer: footer, metadata: metadata, on_behalf_of: on_behalf_of, payment_settings: payment_settings, statement_descriptor: statement_descriptor, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;Draft invoices are fully editable. Once an invoice is &lt;a href&#x3D;\&quot;/docs/billing/invoices/workflow#finalized\&quot;&gt;finalized&lt;/a&gt;, monetary values, as well as &lt;code&gt;collection_method&lt;/code&gt;, become uneditable.&lt;/p&gt;  &lt;p&gt;If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or &lt;a href&#x3D;\&quot;/docs/billing/invoices/reconciliation\&quot;&gt;automatically reconciling&lt;/a&gt; invoices, pass &lt;code&gt;auto_advance&#x3D;false&lt;/code&gt;.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def post_invoices_invoice_with_http_info(*, invoice : String, account_tax_ids : PostInvoicesRequestAccountTaxIds? = nil, application_fee_amount : Int64? = nil, auto_advance : Bool? = nil, automatic_tax : AutomaticTaxParam? = nil, collection_method : String? = nil, custom_fields : PostInvoicesInvoiceRequestCustomFields? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostInvoicesInvoiceRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostInvoicesInvoiceRequestDiscounts? = nil, due_date : Int64? = nil, expand : Array(String)? = nil, footer : String? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : PostInvoicesInvoiceRequestOnBehalfOf? = nil, payment_settings : PaymentSettings1? = nil, statement_descriptor : String? = nil, transfer_data : PostInvoicesInvoiceRequestTransferData? = nil)
      request = build_api_request_for_post_invoices_invoice(invoice: invoice, account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, expand: expand, footer: footer, metadata: metadata, on_behalf_of: on_behalf_of, payment_settings: payment_settings, statement_descriptor: statement_descriptor, transfer_data: transfer_data)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoices_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;Draft invoices are fully editable. Once an invoice is &lt;a href&#x3D;\&quot;/docs/billing/invoices/workflow#finalized\&quot;&gt;finalized&lt;/a&gt;, monetary values, as well as &lt;code&gt;collection_method&lt;/code&gt;, become uneditable.&lt;/p&gt;  &lt;p&gt;If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or &lt;a href&#x3D;\&quot;/docs/billing/invoices/reconciliation\&quot;&gt;automatically reconciling&lt;/a&gt; invoices, pass &lt;code&gt;auto_advance&#x3D;false&lt;/code&gt;.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def post_invoices_invoice(*, invoice : String, account_tax_ids : PostInvoicesRequestAccountTaxIds? = nil, application_fee_amount : Int64? = nil, auto_advance : Bool? = nil, automatic_tax : AutomaticTaxParam? = nil, collection_method : String? = nil, custom_fields : PostInvoicesInvoiceRequestCustomFields? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostInvoicesInvoiceRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostInvoicesInvoiceRequestDiscounts? = nil, due_date : Int64? = nil, expand : Array(String)? = nil, footer : String? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : PostInvoicesInvoiceRequestOnBehalfOf? = nil, payment_settings : PaymentSettings1? = nil, statement_descriptor : String? = nil, transfer_data : PostInvoicesInvoiceRequestTransferData? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoices_invoice(invoice: invoice, account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, expand: expand, footer: footer, metadata: metadata, on_behalf_of: on_behalf_of, payment_settings: payment_settings, statement_descriptor: statement_descriptor, transfer_data: transfer_data).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice(*, invoice : String, account_tax_ids : PostInvoicesRequestAccountTaxIds? = nil, application_fee_amount : Int64? = nil, auto_advance : Bool? = nil, automatic_tax : AutomaticTaxParam? = nil, collection_method : String? = nil, custom_fields : PostInvoicesInvoiceRequestCustomFields? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostInvoicesInvoiceRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostInvoicesInvoiceRequestDiscounts? = nil, due_date : Int64? = nil, expand : Array(String)? = nil, footer : String? = nil, metadata : PostAccountRequestMetadata? = nil, on_behalf_of : PostInvoicesInvoiceRequestOnBehalfOf? = nil, payment_settings : PaymentSettings1? = nil, statement_descriptor : String? = nil, transfer_data : PostInvoicesInvoiceRequestTransferData? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoices_invoice ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.post_invoices_invoice, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !default_payment_method.nil? && default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\" when calling DefaultApi.post_invoices_invoice, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_source.nil? && default_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_source\" when calling DefaultApi.post_invoices_invoice, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 1500
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_invoices_invoice, the character length must be smaller than or equal to 1500.")
      end

      if @api_client.config.client_side_validation && !footer.nil? && footer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"footer\" when calling DefaultApi.post_invoices_invoice, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_invoices_invoice, the character length must be smaller than or equal to 22.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_tax_ids"] = account_tax_ids.to_s if !account_tax_ids.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["auto_advance"] = auto_advance.to_s if !auto_advance.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      form_params["custom_fields"] = custom_fields.to_s if !custom_fields.nil?
      form_params["days_until_due"] = days_until_due.to_s if !days_until_due.nil?
      form_params["default_payment_method"] = default_payment_method.to_s if !default_payment_method.nil?
      form_params["default_source"] = default_source.to_s if !default_source.nil?
      form_params["default_tax_rates"] = default_tax_rates.to_s if !default_tax_rates.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["discounts"] = discounts.to_s if !discounts.nil?
      form_params["due_date"] = due_date.to_s if !due_date.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["footer"] = footer.to_s if !footer.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["payment_settings"] = payment_settings.to_s if !payment_settings.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
    # @param invoice [String]
    # @return [Invoice]
    def post_invoices_invoice_finalize(*, invoice : String, auto_advance : Bool? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_invoices_invoice_finalize_with_http_info(invoice: invoice, auto_advance: auto_advance, expand: expand)
      data
    end

    # &lt;p&gt;Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def post_invoices_invoice_finalize_with_http_info(*, invoice : String, auto_advance : Bool? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_invoices_invoice_finalize(invoice: invoice, auto_advance: auto_advance, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoices_invoice_finalize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def post_invoices_invoice_finalize(*, invoice : String, auto_advance : Bool? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoices_invoice_finalize(invoice: invoice, auto_advance: auto_advance, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_finalize(*, invoice : String, auto_advance : Bool? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoices_invoice_finalize ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.post_invoices_invoice_finalize, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/finalize".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["auto_advance"] = auto_advance.to_s if !auto_advance.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoices_invoice_finalize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
    # @param invoice [String]
    # @return [Invoice]
    def post_invoices_invoice_mark_uncollectible(*, invoice : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_invoices_invoice_mark_uncollectible_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def post_invoices_invoice_mark_uncollectible_with_http_info(*, invoice : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_invoices_invoice_mark_uncollectible(invoice: invoice, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoices_invoice_mark_uncollectible\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def post_invoices_invoice_mark_uncollectible(*, invoice : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoices_invoice_mark_uncollectible(invoice: invoice, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_mark_uncollectible(*, invoice : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoices_invoice_mark_uncollectible ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.post_invoices_invoice_mark_uncollectible, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/mark_uncollectible".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoices_invoice_mark_uncollectible",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href=\"https://dashboard.stripe.com/account/billing/automatic\">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
    # @param invoice [String]
    # @return [Invoice]
    def post_invoices_invoice_pay(*, invoice : String, expand : Array(String)? = nil, forgive : Bool? = nil, off_session : Bool? = nil, paid_out_of_band : Bool? = nil, payment_method : String? = nil, source : String? = nil)
      data, _status_code, _headers = post_invoices_invoice_pay_with_http_info(invoice: invoice, expand: expand, forgive: forgive, off_session: off_session, paid_out_of_band: paid_out_of_band, payment_method: payment_method, source: source)
      data
    end

    # &lt;p&gt;Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def post_invoices_invoice_pay_with_http_info(*, invoice : String, expand : Array(String)? = nil, forgive : Bool? = nil, off_session : Bool? = nil, paid_out_of_band : Bool? = nil, payment_method : String? = nil, source : String? = nil)
      request = build_api_request_for_post_invoices_invoice_pay(invoice: invoice, expand: expand, forgive: forgive, off_session: off_session, paid_out_of_band: paid_out_of_band, payment_method: payment_method, source: source)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoices_invoice_pay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def post_invoices_invoice_pay(*, invoice : String, expand : Array(String)? = nil, forgive : Bool? = nil, off_session : Bool? = nil, paid_out_of_band : Bool? = nil, payment_method : String? = nil, source : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoices_invoice_pay(invoice: invoice, expand: expand, forgive: forgive, off_session: off_session, paid_out_of_band: paid_out_of_band, payment_method: payment_method, source: source).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_pay(*, invoice : String, expand : Array(String)? = nil, forgive : Bool? = nil, off_session : Bool? = nil, paid_out_of_band : Bool? = nil, payment_method : String? = nil, source : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoices_invoice_pay ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.post_invoices_invoice_pay, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_invoices_invoice_pay, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_invoices_invoice_pay, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/pay".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["forgive"] = forgive.to_s if !forgive.nil?
      form_params["off_session"] = off_session.to_s if !off_session.nil?
      form_params["paid_out_of_band"] = paid_out_of_band.to_s if !paid_out_of_band.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["source"] = source.to_s if !source.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoices_invoice_pay",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe will automatically send invoices to customers according to your <a href=\"https://dashboard.stripe.com/account/billing/automatic\">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>  <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
    # @param invoice [String]
    # @return [Invoice]
    def post_invoices_invoice_send(*, invoice : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_invoices_invoice_send_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Stripe will automatically send invoices to customers according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.&lt;/p&gt;  &lt;p&gt;Requests made in test-mode result in no emails being sent, despite sending an &lt;code&gt;invoice.sent&lt;/code&gt; event.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def post_invoices_invoice_send_with_http_info(*, invoice : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_invoices_invoice_send(invoice: invoice, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoices_invoice_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;Stripe will automatically send invoices to customers according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.&lt;/p&gt;  &lt;p&gt;Requests made in test-mode result in no emails being sent, despite sending an &lt;code&gt;invoice.sent&lt;/code&gt; event.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def post_invoices_invoice_send(*, invoice : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoices_invoice_send(invoice: invoice, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_send(*, invoice : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoices_invoice_send ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.post_invoices_invoice_send, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/send".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoices_invoice_send",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href=\"#delete_invoice\">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
    # @param invoice [String]
    # @return [Invoice]
    def post_invoices_invoice_void(*, invoice : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_invoices_invoice_void_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to &lt;a href&#x3D;\&quot;#delete_invoice\&quot;&gt;deletion&lt;/a&gt;, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.&lt;/p&gt;
    # @param invoice [String]
    # @return [Array<(Invoice, Integer, Hash)>] Invoice data, response status code and response headers
    def post_invoices_invoice_void_with_http_info(*, invoice : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_invoices_invoice_void(invoice: invoice, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_invoices_invoice_void\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Invoice.from_json(data), status_code, headers
    end

    # &lt;p&gt;Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to &lt;a href&#x3D;\&quot;#delete_invoice\&quot;&gt;deletion&lt;/a&gt;, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.&lt;/p&gt;
    # @param invoice [String]
    # @return nil
    def post_invoices_invoice_void(*, invoice : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_invoices_invoice_void(invoice: invoice, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_void(*, invoice : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_invoices_invoice_void ..." }
      end
      if @api_client.config.client_side_validation && invoice.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"invoice\" when calling DefaultApi.post_invoices_invoice_void, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/void".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_invoices_invoice_void",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param authorization [String]
    # @return [IssuingAuthorization]
    def post_issuing_authorizations_authorization(*, authorization : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_issuing_authorizations_authorization_with_http_info(authorization: authorization, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param authorization [String]
    # @return [Array<(IssuingAuthorization, Integer, Hash)>] IssuingAuthorization data, response status code and response headers
    def post_issuing_authorizations_authorization_with_http_info(*, authorization : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_issuing_authorizations_authorization(authorization: authorization, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_authorizations_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingAuthorization.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param authorization [String]
    # @return nil
    def post_issuing_authorizations_authorization(*, authorization : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_authorizations_authorization(authorization: authorization, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization(*, authorization : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_authorizations_authorization ..." }
      end
      if @api_client.config.client_side_validation && authorization.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"authorization\" when calling DefaultApi.post_issuing_authorizations_authorization, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_authorizations_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href=\"/docs/issuing/controls/real-time-authorizations\">real-time authorization</a> flow.</p>
    # @param authorization [String]
    # @return [IssuingAuthorization]
    def post_issuing_authorizations_authorization_approve(*, authorization : String, amount : Int64? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_issuing_authorizations_authorization_approve_with_http_info(authorization: authorization, amount: amount, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.&lt;/p&gt;
    # @param authorization [String]
    # @return [Array<(IssuingAuthorization, Integer, Hash)>] IssuingAuthorization data, response status code and response headers
    def post_issuing_authorizations_authorization_approve_with_http_info(*, authorization : String, amount : Int64? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_issuing_authorizations_authorization_approve(authorization: authorization, amount: amount, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_authorizations_authorization_approve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingAuthorization.from_json(data), status_code, headers
    end

    # &lt;p&gt;Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.&lt;/p&gt;
    # @param authorization [String]
    # @return nil
    def post_issuing_authorizations_authorization_approve(*, authorization : String, amount : Int64? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_authorizations_authorization_approve(authorization: authorization, amount: amount, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization_approve(*, authorization : String, amount : Int64? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_authorizations_authorization_approve ..." }
      end
      if @api_client.config.client_side_validation && authorization.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"authorization\" when calling DefaultApi.post_issuing_authorizations_authorization_approve, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}/approve".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_authorizations_authorization_approve",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href=\"/docs/issuing/controls/real-time-authorizations\">real time authorization</a> flow.</p>
    # @param authorization [String]
    # @return [IssuingAuthorization]
    def post_issuing_authorizations_authorization_decline(*, authorization : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_issuing_authorizations_authorization_decline_with_http_info(authorization: authorization, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow.&lt;/p&gt;
    # @param authorization [String]
    # @return [Array<(IssuingAuthorization, Integer, Hash)>] IssuingAuthorization data, response status code and response headers
    def post_issuing_authorizations_authorization_decline_with_http_info(*, authorization : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_issuing_authorizations_authorization_decline(authorization: authorization, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_authorizations_authorization_decline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingAuthorization.from_json(data), status_code, headers
    end

    # &lt;p&gt;Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow.&lt;/p&gt;
    # @param authorization [String]
    # @return nil
    def post_issuing_authorizations_authorization_decline(*, authorization : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_authorizations_authorization_decline(authorization: authorization, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_authorizations_authorization_decline(*, authorization : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_authorizations_authorization_decline ..." }
      end
      if @api_client.config.client_side_validation && authorization.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"authorization\" when calling DefaultApi.post_issuing_authorizations_authorization_decline, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/authorizations/{authorization}/decline".sub("{" + "authorization" + "}", URI.encode_path(authorization.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_authorizations_authorization_decline",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
    # @param billing [BillingSpecs]
    # @param name [String] The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters.
    # @param _type [String] One of `individual` or `company`.
    # @return [IssuingCardholder]
    def post_issuing_cardholders(*, billing : BillingSpecs, name : String, _type : String, company : CompanyParam? = nil, email : String? = nil, expand : Array(String)? = nil, individual : IndividualParam? = nil, phone_number : String? = nil, spending_controls : AuthorizationControlsParamV2? = nil, status : String? = nil)
      data, _status_code, _headers = post_issuing_cardholders_with_http_info(billing: billing, name: name, _type: _type, company: company, email: email, expand: expand, individual: individual, phone_number: phone_number, spending_controls: spending_controls, status: status)
      data
    end

    # &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
    # @param billing [BillingSpecs]
    # @param name [String] The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters.
    # @param _type [String] One of `individual` or `company`.
    # @return [Array<(IssuingCardholder, Integer, Hash)>] IssuingCardholder data, response status code and response headers
    def post_issuing_cardholders_with_http_info(*, billing : BillingSpecs, name : String, _type : String, company : CompanyParam? = nil, email : String? = nil, expand : Array(String)? = nil, individual : IndividualParam? = nil, phone_number : String? = nil, spending_controls : AuthorizationControlsParamV2? = nil, status : String? = nil)
      request = build_api_request_for_post_issuing_cardholders(billing: billing, name: name, _type: _type, company: company, email: email, expand: expand, individual: individual, phone_number: phone_number, spending_controls: spending_controls, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_cardholders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingCardholder.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
    # @param billing [BillingSpecs]
    # @param name [String] The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters.
    # @param _type [String] One of `individual` or `company`.
    # @return nil
    def post_issuing_cardholders(*, billing : BillingSpecs, name : String, _type : String, company : CompanyParam? = nil, email : String? = nil, expand : Array(String)? = nil, individual : IndividualParam? = nil, phone_number : String? = nil, spending_controls : AuthorizationControlsParamV2? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_cardholders(billing: billing, name: name, _type: _type, company: company, email: email, expand: expand, individual: individual, phone_number: phone_number, spending_controls: spending_controls, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_cardholders(*, billing : BillingSpecs, name : String, _type : String, company : CompanyParam? = nil, email : String? = nil, expand : Array(String)? = nil, individual : IndividualParam? = nil, phone_number : String? = nil, spending_controls : AuthorizationControlsParamV2? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_cardholders ..." }
      end
      allowable_values = ["company", "individual"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      allowable_values = ["active", "inactive"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/issuing/cardholders"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["billing"] = billing.to_s if !billing.nil?
      form_params["company"] = company.to_s if !company.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["individual"] = individual.to_s if !individual.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["phone_number"] = phone_number.to_s if !phone_number.nil?
      form_params["spending_controls"] = spending_controls.to_s if !spending_controls.nil?
      form_params["status"] = status.to_s if !status.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_cardholders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param cardholder [String]
    # @return [IssuingCardholder]
    def post_issuing_cardholders_cardholder(*, cardholder : String, billing : BillingSpecs? = nil, company : CompanyParam? = nil, email : String? = nil, expand : Array(String)? = nil, individual : IndividualParam? = nil, phone_number : String? = nil, spending_controls : AuthorizationControlsParamV2? = nil, status : String? = nil)
      data, _status_code, _headers = post_issuing_cardholders_cardholder_with_http_info(cardholder: cardholder, billing: billing, company: company, email: email, expand: expand, individual: individual, phone_number: phone_number, spending_controls: spending_controls, status: status)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param cardholder [String]
    # @return [Array<(IssuingCardholder, Integer, Hash)>] IssuingCardholder data, response status code and response headers
    def post_issuing_cardholders_cardholder_with_http_info(*, cardholder : String, billing : BillingSpecs? = nil, company : CompanyParam? = nil, email : String? = nil, expand : Array(String)? = nil, individual : IndividualParam? = nil, phone_number : String? = nil, spending_controls : AuthorizationControlsParamV2? = nil, status : String? = nil)
      request = build_api_request_for_post_issuing_cardholders_cardholder(cardholder: cardholder, billing: billing, company: company, email: email, expand: expand, individual: individual, phone_number: phone_number, spending_controls: spending_controls, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_cardholders_cardholder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingCardholder.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param cardholder [String]
    # @return nil
    def post_issuing_cardholders_cardholder(*, cardholder : String, billing : BillingSpecs? = nil, company : CompanyParam? = nil, email : String? = nil, expand : Array(String)? = nil, individual : IndividualParam? = nil, phone_number : String? = nil, spending_controls : AuthorizationControlsParamV2? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_cardholders_cardholder(cardholder: cardholder, billing: billing, company: company, email: email, expand: expand, individual: individual, phone_number: phone_number, spending_controls: spending_controls, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_cardholders_cardholder(*, cardholder : String, billing : BillingSpecs? = nil, company : CompanyParam? = nil, email : String? = nil, expand : Array(String)? = nil, individual : IndividualParam? = nil, phone_number : String? = nil, spending_controls : AuthorizationControlsParamV2? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_cardholders_cardholder ..." }
      end
      if @api_client.config.client_side_validation && cardholder.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder\" when calling DefaultApi.post_issuing_cardholders_cardholder, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["active", "inactive"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/issuing/cardholders/{cardholder}".sub("{" + "cardholder" + "}", URI.encode_path(cardholder.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["billing"] = billing.to_s if !billing.nil?
      form_params["company"] = company.to_s if !company.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["individual"] = individual.to_s if !individual.nil?
      form_params["phone_number"] = phone_number.to_s if !phone_number.nil?
      form_params["spending_controls"] = spending_controls.to_s if !spending_controls.nil?
      form_params["status"] = status.to_s if !status.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_cardholders_cardholder",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an Issuing <code>Card</code> object.</p>
    # @param currency [String] The currency for the card.
    # @param _type [String] The type of card to issue. Possible values are `physical` or `virtual`.
    # @return [IssuingCard]
    def post_issuing_cards(*, currency : String, _type : String, cardholder : String? = nil, expand : Array(String)? = nil, financial_account : String? = nil, replacement_for : String? = nil, replacement_reason : String? = nil, shipping : ShippingSpecs? = nil, spending_controls : AuthorizationControlsParam? = nil, status : String? = nil)
      data, _status_code, _headers = post_issuing_cards_with_http_info(currency: currency, _type: _type, cardholder: cardholder, expand: expand, financial_account: financial_account, replacement_for: replacement_for, replacement_reason: replacement_reason, shipping: shipping, spending_controls: spending_controls, status: status)
      data
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @param currency [String] The currency for the card.
    # @param _type [String] The type of card to issue. Possible values are `physical` or `virtual`.
    # @return [Array<(IssuingCard, Integer, Hash)>] IssuingCard data, response status code and response headers
    def post_issuing_cards_with_http_info(*, currency : String, _type : String, cardholder : String? = nil, expand : Array(String)? = nil, financial_account : String? = nil, replacement_for : String? = nil, replacement_reason : String? = nil, shipping : ShippingSpecs? = nil, spending_controls : AuthorizationControlsParam? = nil, status : String? = nil)
      request = build_api_request_for_post_issuing_cards(currency: currency, _type: _type, cardholder: cardholder, expand: expand, financial_account: financial_account, replacement_for: replacement_for, replacement_reason: replacement_reason, shipping: shipping, spending_controls: spending_controls, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingCard.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
    # @param currency [String] The currency for the card.
    # @param _type [String] The type of card to issue. Possible values are `physical` or `virtual`.
    # @return nil
    def post_issuing_cards(*, currency : String, _type : String, cardholder : String? = nil, expand : Array(String)? = nil, financial_account : String? = nil, replacement_for : String? = nil, replacement_reason : String? = nil, shipping : ShippingSpecs? = nil, spending_controls : AuthorizationControlsParam? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_cards(currency: currency, _type: _type, cardholder: cardholder, expand: expand, financial_account: financial_account, replacement_for: replacement_for, replacement_reason: replacement_reason, shipping: shipping, spending_controls: spending_controls, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_cards(*, currency : String, _type : String, cardholder : String? = nil, expand : Array(String)? = nil, financial_account : String? = nil, replacement_for : String? = nil, replacement_reason : String? = nil, shipping : ShippingSpecs? = nil, spending_controls : AuthorizationControlsParam? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_cards ..." }
      end
      allowable_values = ["physical", "virtual"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !cardholder.nil? && cardholder.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cardholder\" when calling DefaultApi.post_issuing_cards, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !replacement_for.nil? && replacement_for.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"replacement_for\" when calling DefaultApi.post_issuing_cards, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["damaged", "expired", "lost", "stolen"]
      if @api_client.config.client_side_validation && !replacement_reason.nil? && !allowable_values.includes?(replacement_reason)
        raise ArgumentError.new("invalid value for \"replacement_reason\", must be one of #{allowable_values}")
      end
      allowable_values = ["active", "inactive"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/issuing/cards"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["cardholder"] = cardholder.to_s if !cardholder.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["replacement_for"] = replacement_for.to_s if !replacement_for.nil?
      form_params["replacement_reason"] = replacement_reason.to_s if !replacement_reason.nil?
      form_params["shipping"] = shipping.to_s if !shipping.nil?
      form_params["spending_controls"] = spending_controls.to_s if !spending_controls.nil?
      form_params["status"] = status.to_s if !status.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_cards",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param card [String]
    # @return [IssuingCard]
    def post_issuing_cards_card(*, card : String, cancellation_reason : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, pin : EncryptedPinParam? = nil, spending_controls : AuthorizationControlsParam? = nil, status : String? = nil)
      data, _status_code, _headers = post_issuing_cards_card_with_http_info(card: card, cancellation_reason: cancellation_reason, expand: expand, metadata: metadata, pin: pin, spending_controls: spending_controls, status: status)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param card [String]
    # @return [Array<(IssuingCard, Integer, Hash)>] IssuingCard data, response status code and response headers
    def post_issuing_cards_card_with_http_info(*, card : String, cancellation_reason : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, pin : EncryptedPinParam? = nil, spending_controls : AuthorizationControlsParam? = nil, status : String? = nil)
      request = build_api_request_for_post_issuing_cards_card(card: card, cancellation_reason: cancellation_reason, expand: expand, metadata: metadata, pin: pin, spending_controls: spending_controls, status: status)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_cards_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingCard.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param card [String]
    # @return nil
    def post_issuing_cards_card(*, card : String, cancellation_reason : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, pin : EncryptedPinParam? = nil, spending_controls : AuthorizationControlsParam? = nil, status : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_cards_card(card: card, cancellation_reason: cancellation_reason, expand: expand, metadata: metadata, pin: pin, spending_controls: spending_controls, status: status).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_cards_card(*, card : String, cancellation_reason : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, pin : EncryptedPinParam? = nil, spending_controls : AuthorizationControlsParam? = nil, status : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_cards_card ..." }
      end
      if @api_client.config.client_side_validation && card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"card\" when calling DefaultApi.post_issuing_cards_card, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["lost", "stolen"]
      if @api_client.config.client_side_validation && !cancellation_reason.nil? && !allowable_values.includes?(cancellation_reason)
        raise ArgumentError.new("invalid value for \"cancellation_reason\", must be one of #{allowable_values}")
      end
      allowable_values = ["active", "canceled", "inactive"]
      if @api_client.config.client_side_validation && !status.nil? && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/issuing/cards/{card}".sub("{" + "card" + "}", URI.encode_path(card.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["cancellation_reason"] = cancellation_reason.to_s if !cancellation_reason.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["pin"] = pin.to_s if !pin.nil?
      form_params["spending_controls"] = spending_controls.to_s if !spending_controls.nil?
      form_params["status"] = status.to_s if !status.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_cards_card",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href=\"/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
    # @return [IssuingDispute]
    def post_issuing_disputes(*, evidence : EvidenceParam? = nil, expand : Array(String)? = nil, transaction : String? = nil, treasury : TreasuryParam? = nil)
      data, _status_code, _headers = post_issuing_disputes_with_http_info(evidence: evidence, expand: expand, transaction: transaction, treasury: treasury)
      data
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
    # @return [Array<(IssuingDispute, Integer, Hash)>] IssuingDispute data, response status code and response headers
    def post_issuing_disputes_with_http_info(*, evidence : EvidenceParam? = nil, expand : Array(String)? = nil, transaction : String? = nil, treasury : TreasuryParam? = nil)
      request = build_api_request_for_post_issuing_disputes(evidence: evidence, expand: expand, transaction: transaction, treasury: treasury)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_disputes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingDispute.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
    # @return nil
    def post_issuing_disputes(*, evidence : EvidenceParam? = nil, expand : Array(String)? = nil, transaction : String? = nil, treasury : TreasuryParam? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_disputes(evidence: evidence, expand: expand, transaction: transaction, treasury: treasury).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes(*, evidence : EvidenceParam? = nil, expand : Array(String)? = nil, transaction : String? = nil, treasury : TreasuryParam? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_disputes ..." }
      end
      if @api_client.config.client_side_validation && !transaction.nil? && transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transaction\" when calling DefaultApi.post_issuing_disputes, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/disputes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["evidence"] = evidence.to_s if !evidence.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["transaction"] = transaction.to_s if !transaction.nil?
      form_params["treasury"] = treasury.to_s if !treasury.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_disputes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
    # @param dispute [String]
    # @return [IssuingDispute]
    def post_issuing_disputes_dispute(*, dispute : String, evidence : EvidenceParam? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_issuing_disputes_dispute_with_http_info(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
    # @param dispute [String]
    # @return [Array<(IssuingDispute, Integer, Hash)>] IssuingDispute data, response status code and response headers
    def post_issuing_disputes_dispute_with_http_info(*, dispute : String, evidence : EvidenceParam? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_issuing_disputes_dispute(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_disputes_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingDispute.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
    # @param dispute [String]
    # @return nil
    def post_issuing_disputes_dispute(*, dispute : String, evidence : EvidenceParam? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_disputes_dispute(dispute: dispute, evidence: evidence, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes_dispute(*, dispute : String, evidence : EvidenceParam? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_disputes_dispute ..." }
      end
      if @api_client.config.client_side_validation && dispute.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"dispute\" when calling DefaultApi.post_issuing_disputes_dispute, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["evidence"] = evidence.to_s if !evidence.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_disputes_dispute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href=\"/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\">Dispute reasons and evidence</a>.</p>
    # @param dispute [String]
    # @return [IssuingDispute]
    def post_issuing_disputes_dispute_submit(*, dispute : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_issuing_disputes_dispute_submit_with_http_info(dispute: dispute, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
    # @param dispute [String]
    # @return [Array<(IssuingDispute, Integer, Hash)>] IssuingDispute data, response status code and response headers
    def post_issuing_disputes_dispute_submit_with_http_info(*, dispute : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_issuing_disputes_dispute_submit(dispute: dispute, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_disputes_dispute_submit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingDispute.from_json(data), status_code, headers
    end

    # &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
    # @param dispute [String]
    # @return nil
    def post_issuing_disputes_dispute_submit(*, dispute : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_disputes_dispute_submit(dispute: dispute, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_disputes_dispute_submit(*, dispute : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_disputes_dispute_submit ..." }
      end
      if @api_client.config.client_side_validation && dispute.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"dispute\" when calling DefaultApi.post_issuing_disputes_dispute_submit, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/disputes/{dispute}/submit".sub("{" + "dispute" + "}", URI.encode_path(dispute.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_disputes_dispute_submit",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param settlement [String]
    # @return [IssuingSettlement]
    def post_issuing_settlements_settlement(*, settlement : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_issuing_settlements_settlement_with_http_info(settlement: settlement, expand: expand)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Settlement&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param settlement [String]
    # @return [Array<(IssuingSettlement, Integer, Hash)>] IssuingSettlement data, response status code and response headers
    def post_issuing_settlements_settlement_with_http_info(*, settlement : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_issuing_settlements_settlement(settlement: settlement, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_settlements_settlement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingSettlement.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Settlement&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param settlement [String]
    # @return nil
    def post_issuing_settlements_settlement(*, settlement : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_settlements_settlement(settlement: settlement, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_settlements_settlement(*, settlement : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_settlements_settlement ..." }
      end
      if @api_client.config.client_side_validation && settlement.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"settlement\" when calling DefaultApi.post_issuing_settlements_settlement, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/settlements/{settlement}".sub("{" + "settlement" + "}", URI.encode_path(settlement.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_settlements_settlement",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param transaction [String]
    # @return [IssuingTransaction]
    def post_issuing_transactions_transaction(*, transaction : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_issuing_transactions_transaction_with_http_info(transaction: transaction, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param transaction [String]
    # @return [Array<(IssuingTransaction, Integer, Hash)>] IssuingTransaction data, response status code and response headers
    def post_issuing_transactions_transaction_with_http_info(*, transaction : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_issuing_transactions_transaction(transaction: transaction, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_issuing_transactions_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return IssuingTransaction.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param transaction [String]
    # @return nil
    def post_issuing_transactions_transaction(*, transaction : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_issuing_transactions_transaction(transaction: transaction, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_issuing_transactions_transaction(*, transaction : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_issuing_transactions_transaction ..." }
      end
      if @api_client.config.client_side_validation && transaction.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transaction\" when calling DefaultApi.post_issuing_transactions_transaction, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/issuing/transactions/{transaction}".sub("{" + "transaction" + "}", URI.encode_path(transaction.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_issuing_transactions_transaction",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
    # @param account_holder [AccountholderParams1]
    # @param permissions [Array(String)] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @return [FinancialConnectionsSession]
    def post_link_account_sessions(*, account_holder : AccountholderParams1, permissions : Array(String), expand : Array(String)? = nil, filters : FiltersParams? = nil, return_url : String? = nil)
      data, _status_code, _headers = post_link_account_sessions_with_http_info(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url)
      data
    end

    # &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
    # @param account_holder [AccountholderParams1]
    # @param permissions [Array(String)] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @return [Array<(FinancialConnectionsSession, Integer, Hash)>] FinancialConnectionsSession data, response status code and response headers
    def post_link_account_sessions_with_http_info(*, account_holder : AccountholderParams1, permissions : Array(String), expand : Array(String)? = nil, filters : FiltersParams? = nil, return_url : String? = nil)
      request = build_api_request_for_post_link_account_sessions(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_link_account_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsSession.from_json(data), status_code, headers
    end

    # &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
    # @param account_holder [AccountholderParams1]
    # @param permissions [Array(String)] List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
    # @return nil
    def post_link_account_sessions(*, account_holder : AccountholderParams1, permissions : Array(String), expand : Array(String)? = nil, filters : FiltersParams? = nil, return_url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_link_account_sessions(account_holder: account_holder, permissions: permissions, expand: expand, filters: filters, return_url: return_url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_link_account_sessions(*, account_holder : AccountholderParams1, permissions : Array(String), expand : Array(String)? = nil, filters : FiltersParams? = nil, return_url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_link_account_sessions ..." }
      end
      allowable_values = ["balances", "ownership", "payment_method", "transactions"]
      if @api_client.config.client_side_validation && !permissions.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"permissions\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !return_url.nil? && return_url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"return_url\" when calling DefaultApi.post_link_account_sessions, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/link_account_sessions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account_holder"] = account_holder.to_s if !account_holder.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["filters"] = filters.to_s if !filters.nil?
      form_params["permissions"] = @api_client.build_collection_param(permissions, "csv") if !permissions.nil? && !permissions.empty?
      form_params["return_url"] = return_url.to_s if !return_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_link_account_sessions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
    # @param account [String]
    # @return [FinancialConnectionsAccount]
    def post_linked_accounts_account_disconnect(*, account : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_linked_accounts_account_disconnect_with_http_info(account: account, expand: expand)
      data
    end

    # &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
    # @param account [String]
    # @return [Array<(FinancialConnectionsAccount, Integer, Hash)>] FinancialConnectionsAccount data, response status code and response headers
    def post_linked_accounts_account_disconnect_with_http_info(*, account : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_linked_accounts_account_disconnect(account: account, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_linked_accounts_account_disconnect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
    # @param account [String]
    # @return nil
    def post_linked_accounts_account_disconnect(*, account : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_linked_accounts_account_disconnect(account: account, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_linked_accounts_account_disconnect(*, account : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_linked_accounts_account_disconnect ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_linked_accounts_account_disconnect, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/linked_accounts/{account}/disconnect".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_linked_accounts_account_disconnect",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
    # @param account [String]
    # @param features [Array(String)] The list of account features that you would like to refresh. Either: `balance` or `ownership`.
    # @return [FinancialConnectionsAccount]
    def post_linked_accounts_account_refresh(*, account : String, features : Array(String), expand : Array(String)? = nil)
      data, _status_code, _headers = post_linked_accounts_account_refresh_with_http_info(account: account, features: features, expand: expand)
      data
    end

    # &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @param account [String]
    # @param features [Array(String)] The list of account features that you would like to refresh. Either: `balance` or `ownership`.
    # @return [Array<(FinancialConnectionsAccount, Integer, Hash)>] FinancialConnectionsAccount data, response status code and response headers
    def post_linked_accounts_account_refresh_with_http_info(*, account : String, features : Array(String), expand : Array(String)? = nil)
      request = build_api_request_for_post_linked_accounts_account_refresh(account: account, features: features, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_linked_accounts_account_refresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return FinancialConnectionsAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
    # @param account [String]
    # @param features [Array(String)] The list of account features that you would like to refresh. Either: `balance` or `ownership`.
    # @return nil
    def post_linked_accounts_account_refresh(*, account : String, features : Array(String), expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_linked_accounts_account_refresh(account: account, features: features, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_linked_accounts_account_refresh(*, account : String, features : Array(String), expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_linked_accounts_account_refresh ..." }
      end
      if @api_client.config.client_side_validation && account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"account\" when calling DefaultApi.post_linked_accounts_account_refresh, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["balance", "ownership"]
      if @api_client.config.client_side_validation && !features.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"features\", must include one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/linked_accounts/{account}/refresh".sub("{" + "account" + "}", URI.encode_path(account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = @api_client.build_collection_param(features, "csv") if !features.nil? && !features.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_linked_accounts_account_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>open</code> order object.</p>
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param line_items [Array(CreateParams)] A list of line items the customer is ordering. Each line item includes information about the product, the quantity, and the resulting cost.
    # @return [Order]
    def post_orders(*, currency : String, line_items : Array(CreateParams), automatic_tax : AutomaticTax1? = nil, billing_details : PostOrdersRequestBillingDetails? = nil, customer : String? = nil, description : String? = nil, discounts : PostOrdersRequestDiscounts? = nil, expand : Array(String)? = nil, ip_address : String? = nil, payment : CreateParams1? = nil, shipping_cost : PostOrdersRequestShippingCost? = nil, shipping_details : PostOrdersRequestShippingDetails? = nil, tax_details : TaxDetails? = nil)
      data, _status_code, _headers = post_orders_with_http_info(currency: currency, line_items: line_items, automatic_tax: automatic_tax, billing_details: billing_details, customer: customer, description: description, discounts: discounts, expand: expand, ip_address: ip_address, payment: payment, shipping_cost: shipping_cost, shipping_details: shipping_details, tax_details: tax_details)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;open&lt;/code&gt; order object.&lt;/p&gt;
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param line_items [Array(CreateParams)] A list of line items the customer is ordering. Each line item includes information about the product, the quantity, and the resulting cost.
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def post_orders_with_http_info(*, currency : String, line_items : Array(CreateParams), automatic_tax : AutomaticTax1? = nil, billing_details : PostOrdersRequestBillingDetails? = nil, customer : String? = nil, description : String? = nil, discounts : PostOrdersRequestDiscounts? = nil, expand : Array(String)? = nil, ip_address : String? = nil, payment : CreateParams1? = nil, shipping_cost : PostOrdersRequestShippingCost? = nil, shipping_details : PostOrdersRequestShippingDetails? = nil, tax_details : TaxDetails? = nil)
      request = build_api_request_for_post_orders(currency: currency, line_items: line_items, automatic_tax: automatic_tax, billing_details: billing_details, customer: customer, description: description, discounts: discounts, expand: expand, ip_address: ip_address, payment: payment, shipping_cost: shipping_cost, shipping_details: shipping_details, tax_details: tax_details)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Order.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new &lt;code&gt;open&lt;/code&gt; order object.&lt;/p&gt;
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param line_items [Array(CreateParams)] A list of line items the customer is ordering. Each line item includes information about the product, the quantity, and the resulting cost.
    # @return nil
    def post_orders(*, currency : String, line_items : Array(CreateParams), automatic_tax : AutomaticTax1? = nil, billing_details : PostOrdersRequestBillingDetails? = nil, customer : String? = nil, description : String? = nil, discounts : PostOrdersRequestDiscounts? = nil, expand : Array(String)? = nil, ip_address : String? = nil, payment : CreateParams1? = nil, shipping_cost : PostOrdersRequestShippingCost? = nil, shipping_details : PostOrdersRequestShippingDetails? = nil, tax_details : TaxDetails? = nil, &block : Crest::Response ->)
      build_api_request_for_post_orders(currency: currency, line_items: line_items, automatic_tax: automatic_tax, billing_details: billing_details, customer: customer, description: description, discounts: discounts, expand: expand, ip_address: ip_address, payment: payment, shipping_cost: shipping_cost, shipping_details: shipping_details, tax_details: tax_details).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_orders(*, currency : String, line_items : Array(CreateParams), automatic_tax : AutomaticTax1? = nil, billing_details : PostOrdersRequestBillingDetails? = nil, customer : String? = nil, description : String? = nil, discounts : PostOrdersRequestDiscounts? = nil, expand : Array(String)? = nil, ip_address : String? = nil, payment : CreateParams1? = nil, shipping_cost : PostOrdersRequestShippingCost? = nil, shipping_details : PostOrdersRequestShippingDetails? = nil, tax_details : TaxDetails? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_orders ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_orders, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_orders, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/orders"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["billing_details"] = billing_details.to_s if !billing_details.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["discounts"] = discounts.to_s if !discounts.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["ip_address"] = ip_address.to_s if !ip_address.nil?
      form_params["line_items"] = @api_client.build_collection_param(line_items, "csv") if !line_items.nil? && !line_items.empty?
      form_params["payment"] = payment.to_s if !payment.nil?
      form_params["shipping_cost"] = shipping_cost.to_s if !shipping_cost.nil?
      form_params["shipping_details"] = shipping_details.to_s if !shipping_details.nil?
      form_params["tax_details"] = tax_details.to_s if !tax_details.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_orders",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param id [String]
    # @return [Order]
    def post_orders_id(*, id : String, automatic_tax : AutomaticTax1? = nil, billing_details : PostOrdersRequestBillingDetails? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, discounts : PostOrdersIdRequestDiscounts? = nil, expand : Array(String)? = nil, ip_address : String? = nil, line_items : Array(UpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, payment : UpdateParams1? = nil, shipping_cost : PostOrdersRequestShippingCost? = nil, shipping_details : PostOrdersRequestShippingDetails? = nil, tax_details : TaxDetails? = nil)
      data, _status_code, _headers = post_orders_id_with_http_info(id: id, automatic_tax: automatic_tax, billing_details: billing_details, currency: currency, customer: customer, description: description, discounts: discounts, expand: expand, ip_address: ip_address, line_items: line_items, metadata: metadata, payment: payment, shipping_cost: shipping_cost, shipping_details: shipping_details, tax_details: tax_details)
      data
    end

    # &lt;p&gt;Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def post_orders_id_with_http_info(*, id : String, automatic_tax : AutomaticTax1? = nil, billing_details : PostOrdersRequestBillingDetails? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, discounts : PostOrdersIdRequestDiscounts? = nil, expand : Array(String)? = nil, ip_address : String? = nil, line_items : Array(UpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, payment : UpdateParams1? = nil, shipping_cost : PostOrdersRequestShippingCost? = nil, shipping_details : PostOrdersRequestShippingDetails? = nil, tax_details : TaxDetails? = nil)
      request = build_api_request_for_post_orders_id(id: id, automatic_tax: automatic_tax, billing_details: billing_details, currency: currency, customer: customer, description: description, discounts: discounts, expand: expand, ip_address: ip_address, line_items: line_items, metadata: metadata, payment: payment, shipping_cost: shipping_cost, shipping_details: shipping_details, tax_details: tax_details)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_orders_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Order.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_orders_id(*, id : String, automatic_tax : AutomaticTax1? = nil, billing_details : PostOrdersRequestBillingDetails? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, discounts : PostOrdersIdRequestDiscounts? = nil, expand : Array(String)? = nil, ip_address : String? = nil, line_items : Array(UpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, payment : UpdateParams1? = nil, shipping_cost : PostOrdersRequestShippingCost? = nil, shipping_details : PostOrdersRequestShippingDetails? = nil, tax_details : TaxDetails? = nil, &block : Crest::Response ->)
      build_api_request_for_post_orders_id(id: id, automatic_tax: automatic_tax, billing_details: billing_details, currency: currency, customer: customer, description: description, discounts: discounts, expand: expand, ip_address: ip_address, line_items: line_items, metadata: metadata, payment: payment, shipping_cost: shipping_cost, shipping_details: shipping_details, tax_details: tax_details).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_orders_id(*, id : String, automatic_tax : AutomaticTax1? = nil, billing_details : PostOrdersRequestBillingDetails? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, discounts : PostOrdersIdRequestDiscounts? = nil, expand : Array(String)? = nil, ip_address : String? = nil, line_items : Array(UpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, payment : UpdateParams1? = nil, shipping_cost : PostOrdersRequestShippingCost? = nil, shipping_details : PostOrdersRequestShippingDetails? = nil, tax_details : TaxDetails? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_orders_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_orders_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_orders_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_orders_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/orders/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["billing_details"] = billing_details.to_s if !billing_details.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["discounts"] = discounts.to_s if !discounts.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["ip_address"] = ip_address.to_s if !ip_address.nil?
      form_params["line_items"] = @api_client.build_collection_param(line_items, "csv") if !line_items.nil? && !line_items.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["payment"] = payment.to_s if !payment.nil?
      form_params["shipping_cost"] = shipping_cost.to_s if !shipping_cost.nil?
      form_params["shipping_details"] = shipping_details.to_s if !shipping_details.nil?
      form_params["tax_details"] = tax_details.to_s if !tax_details.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_orders_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels the order as well as the payment intent if one is attached.</p>
    # @param id [String]
    # @return [Order]
    def post_orders_id_cancel(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_orders_id_cancel_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Cancels the order as well as the payment intent if one is attached.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def post_orders_id_cancel_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_orders_id_cancel(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_orders_id_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Order.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels the order as well as the payment intent if one is attached.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_orders_id_cancel(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_orders_id_cancel(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_orders_id_cancel(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_orders_id_cancel ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_orders_id_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/orders/{id}/cancel".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_orders_id_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reopens a <code>submitted</code> order.</p>
    # @param id [String]
    # @return [Order]
    def post_orders_id_reopen(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_orders_id_reopen_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Reopens a &lt;code&gt;submitted&lt;/code&gt; order.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def post_orders_id_reopen_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_orders_id_reopen(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_orders_id_reopen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Order.from_json(data), status_code, headers
    end

    # &lt;p&gt;Reopens a &lt;code&gt;submitted&lt;/code&gt; order.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_orders_id_reopen(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_orders_id_reopen(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_orders_id_reopen(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_orders_id_reopen ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_orders_id_reopen, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/orders/{id}/reopen".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_orders_id_reopen",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Submitting an Order transitions the status to <code>processing</code> and creates a PaymentIntent object so the order can be paid. If the Order has an <code>amount_total</code> of 0, no PaymentIntent object will be created. Once the order is submitted, its contents cannot be changed, unless the <a href=\"#reopen_order\">reopen</a> method is called.</p>
    # @param id [String]
    # @param expected_total [Int64] `expected_total` should always be set to the order's `amount_total` field. If they don't match, submitting the order will fail. This helps detect race conditions where something else concurrently modifies the order.
    # @return [Order]
    def post_orders_id_submit(*, id : String, expected_total : Int64, expand : Array(String)? = nil)
      data, _status_code, _headers = post_orders_id_submit_with_http_info(id: id, expected_total: expected_total, expand: expand)
      data
    end

    # &lt;p&gt;Submitting an Order transitions the status to &lt;code&gt;processing&lt;/code&gt; and creates a PaymentIntent object so the order can be paid. If the Order has an &lt;code&gt;amount_total&lt;/code&gt; of 0, no PaymentIntent object will be created. Once the order is submitted, its contents cannot be changed, unless the &lt;a href&#x3D;\&quot;#reopen_order\&quot;&gt;reopen&lt;/a&gt; method is called.&lt;/p&gt;
    # @param id [String]
    # @param expected_total [Int64] `expected_total` should always be set to the order's `amount_total` field. If they don't match, submitting the order will fail. This helps detect race conditions where something else concurrently modifies the order.
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def post_orders_id_submit_with_http_info(*, id : String, expected_total : Int64, expand : Array(String)? = nil)
      request = build_api_request_for_post_orders_id_submit(id: id, expected_total: expected_total, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_orders_id_submit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Order.from_json(data), status_code, headers
    end

    # &lt;p&gt;Submitting an Order transitions the status to &lt;code&gt;processing&lt;/code&gt; and creates a PaymentIntent object so the order can be paid. If the Order has an &lt;code&gt;amount_total&lt;/code&gt; of 0, no PaymentIntent object will be created. Once the order is submitted, its contents cannot be changed, unless the &lt;a href&#x3D;\&quot;#reopen_order\&quot;&gt;reopen&lt;/a&gt; method is called.&lt;/p&gt;
    # @param id [String]
    # @param expected_total [Int64] `expected_total` should always be set to the order's `amount_total` field. If they don't match, submitting the order will fail. This helps detect race conditions where something else concurrently modifies the order.
    # @return nil
    def post_orders_id_submit(*, id : String, expected_total : Int64, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_orders_id_submit(id: id, expected_total: expected_total, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_orders_id_submit(*, id : String, expected_total : Int64, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_orders_id_submit ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_orders_id_submit, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/orders/{id}/submit".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expected_total"] = expected_total.to_s if !expected_total.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_orders_id_submit",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a PaymentIntent object.</p>  <p>After the PaymentIntent is created, attach a payment method and <a href=\"/docs/api/payment_intents/confirm\">confirm</a> to continue the payment. You can read more about the different payment flows available via the Payment Intents API <a href=\"/docs/payments/payment-intents\">here</a>.</p>  <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the <a href=\"/docs/api/payment_intents/confirm\">confirm API</a> when <code>confirm=true</code> is supplied.</p>
    # @param amount [Int64] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return [PaymentIntent]
    def post_payment_intents(*, amount : Int64, currency : String, application_fee_amount : Int64? = nil, automatic_payment_methods : AutomaticPaymentMethodsParam? = nil, capture_method : String? = nil, confirm : Bool? = nil, confirmation_method : String? = nil, customer : String? = nil, description : String? = nil, error_on_requires_action : Bool? = nil, expand : Array(String)? = nil, mandate : String? = nil, mandate_data : SecretKeyParam? = nil, off_session : PostPaymentIntentsRequestOffSession? = nil, on_behalf_of : String? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, radar_options : RadarOptions? = nil, receipt_email : String? = nil, return_url : String? = nil, setup_future_usage : String? = nil, shipping : OptionalFieldsShipping1? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataCreationParams? = nil, transfer_group : String? = nil, use_stripe_sdk : Bool? = nil)
      data, _status_code, _headers = post_payment_intents_with_http_info(amount: amount, currency: currency, application_fee_amount: application_fee_amount, automatic_payment_methods: automatic_payment_methods, capture_method: capture_method, confirm: confirm, confirmation_method: confirmation_method, customer: customer, description: description, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group, use_stripe_sdk: use_stripe_sdk)
      data
    end

    # &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. You can read more about the different payment flows available via the Payment Intents API &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is supplied.&lt;/p&gt;
    # @param amount [Int64] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def post_payment_intents_with_http_info(*, amount : Int64, currency : String, application_fee_amount : Int64? = nil, automatic_payment_methods : AutomaticPaymentMethodsParam? = nil, capture_method : String? = nil, confirm : Bool? = nil, confirmation_method : String? = nil, customer : String? = nil, description : String? = nil, error_on_requires_action : Bool? = nil, expand : Array(String)? = nil, mandate : String? = nil, mandate_data : SecretKeyParam? = nil, off_session : PostPaymentIntentsRequestOffSession? = nil, on_behalf_of : String? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, radar_options : RadarOptions? = nil, receipt_email : String? = nil, return_url : String? = nil, setup_future_usage : String? = nil, shipping : OptionalFieldsShipping1? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataCreationParams? = nil, transfer_group : String? = nil, use_stripe_sdk : Bool? = nil)
      request = build_api_request_for_post_payment_intents(amount: amount, currency: currency, application_fee_amount: application_fee_amount, automatic_payment_methods: automatic_payment_methods, capture_method: capture_method, confirm: confirm, confirmation_method: confirmation_method, customer: customer, description: description, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group, use_stripe_sdk: use_stripe_sdk)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_intents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. You can read more about the different payment flows available via the Payment Intents API &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is used during creation, it is equivalent to creating and confirming the PaymentIntent in the same call. You may use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when &lt;code&gt;confirm&#x3D;true&lt;/code&gt; is supplied.&lt;/p&gt;
    # @param amount [Int64] Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return nil
    def post_payment_intents(*, amount : Int64, currency : String, application_fee_amount : Int64? = nil, automatic_payment_methods : AutomaticPaymentMethodsParam? = nil, capture_method : String? = nil, confirm : Bool? = nil, confirmation_method : String? = nil, customer : String? = nil, description : String? = nil, error_on_requires_action : Bool? = nil, expand : Array(String)? = nil, mandate : String? = nil, mandate_data : SecretKeyParam? = nil, off_session : PostPaymentIntentsRequestOffSession? = nil, on_behalf_of : String? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, radar_options : RadarOptions? = nil, receipt_email : String? = nil, return_url : String? = nil, setup_future_usage : String? = nil, shipping : OptionalFieldsShipping1? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataCreationParams? = nil, transfer_group : String? = nil, use_stripe_sdk : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_intents(amount: amount, currency: currency, application_fee_amount: application_fee_amount, automatic_payment_methods: automatic_payment_methods, capture_method: capture_method, confirm: confirm, confirmation_method: confirmation_method, customer: customer, description: description, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group, use_stripe_sdk: use_stripe_sdk).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents(*, amount : Int64, currency : String, application_fee_amount : Int64? = nil, automatic_payment_methods : AutomaticPaymentMethodsParam? = nil, capture_method : String? = nil, confirm : Bool? = nil, confirmation_method : String? = nil, customer : String? = nil, description : String? = nil, error_on_requires_action : Bool? = nil, expand : Array(String)? = nil, mandate : String? = nil, mandate_data : SecretKeyParam? = nil, off_session : PostPaymentIntentsRequestOffSession? = nil, on_behalf_of : String? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, radar_options : RadarOptions? = nil, receipt_email : String? = nil, return_url : String? = nil, setup_future_usage : String? = nil, shipping : OptionalFieldsShipping1? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataCreationParams? = nil, transfer_group : String? = nil, use_stripe_sdk : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_intents ..." }
      end
      allowable_values = ["automatic", "manual"]
      if @api_client.config.client_side_validation && !capture_method.nil? && !allowable_values.includes?(capture_method)
        raise ArgumentError.new("invalid value for \"capture_method\", must be one of #{allowable_values}")
      end
      allowable_values = ["automatic", "manual"]
      if @api_client.config.client_side_validation && !confirmation_method.nil? && !allowable_values.includes?(confirmation_method)
        raise ArgumentError.new("invalid value for \"confirmation_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_payment_intents, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_payment_intents, the character length must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !mandate.nil? && mandate.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"mandate\" when calling DefaultApi.post_payment_intents, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_payment_intents, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["off_session", "on_session"]
      if @api_client.config.client_side_validation && !setup_future_usage.nil? && !allowable_values.includes?(setup_future_usage)
        raise ArgumentError.new("invalid value for \"setup_future_usage\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_payment_intents, the character length must be smaller than or equal to 22.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor_suffix.nil? && statement_descriptor_suffix.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\" when calling DefaultApi.post_payment_intents, the character length must be smaller than or equal to 22.")
      end

      # resource path
      local_var_path = "/v1/payment_intents"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["automatic_payment_methods"] = automatic_payment_methods.to_s if !automatic_payment_methods.nil?
      form_params["capture_method"] = capture_method.to_s if !capture_method.nil?
      form_params["confirm"] = confirm.to_s if !confirm.nil?
      form_params["confirmation_method"] = confirmation_method.to_s if !confirmation_method.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["error_on_requires_action"] = error_on_requires_action.to_s if !error_on_requires_action.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["mandate"] = mandate.to_s if !mandate.nil?
      form_params["mandate_data"] = mandate_data.to_s if !mandate_data.nil?
      form_params["off_session"] = off_session.to_s if !off_session.nil?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?
      form_params["radar_options"] = radar_options.to_s if !radar_options.nil?
      form_params["receipt_email"] = receipt_email.to_s if !receipt_email.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?
      form_params["setup_future_usage"] = setup_future_usage.to_s if !setup_future_usage.nil?
      form_params["shipping"] = shipping.to_s if !shipping.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["statement_descriptor_suffix"] = statement_descriptor_suffix.to_s if !statement_descriptor_suffix.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?
      form_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?
      form_params["use_stripe_sdk"] = use_stripe_sdk.to_s if !use_stripe_sdk.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates properties on a PaymentIntent object without confirming.</p>  <p>Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the <code>payment_method</code> will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the <a href=\"/docs/api/payment_intents/confirm\">confirm API</a> instead.</p>
    # @param intent [String]
    # @return [PaymentIntent]
    def post_payment_intents_intent(*, intent : String, amount : Int64? = nil, application_fee_amount : PostPaymentIntentsIntentRequestApplicationFeeAmount? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, receipt_email : PostPaymentIntentsIntentRequestReceiptEmail? = nil, setup_future_usage : String? = nil, shipping : PostPaymentIntentsIntentRequestShipping? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataUpdateParams? = nil, transfer_group : String? = nil)
      data, _status_code, _headers = post_payment_intents_intent_with_http_info(intent: intent, amount: amount, application_fee_amount: application_fee_amount, currency: currency, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, receipt_email: receipt_email, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def post_payment_intents_intent_with_http_info(*, intent : String, amount : Int64? = nil, application_fee_amount : PostPaymentIntentsIntentRequestApplicationFeeAmount? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, receipt_email : PostPaymentIntentsIntentRequestReceiptEmail? = nil, setup_future_usage : String? = nil, shipping : PostPaymentIntentsIntentRequestShipping? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataUpdateParams? = nil, transfer_group : String? = nil)
      request = build_api_request_for_post_payment_intents_intent(intent: intent, amount: amount, application_fee_amount: application_fee_amount, currency: currency, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, receipt_email: receipt_email, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_intents_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you may need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; will always require you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties via the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_payment_intents_intent(*, intent : String, amount : Int64? = nil, application_fee_amount : PostPaymentIntentsIntentRequestApplicationFeeAmount? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, receipt_email : PostPaymentIntentsIntentRequestReceiptEmail? = nil, setup_future_usage : String? = nil, shipping : PostPaymentIntentsIntentRequestShipping? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataUpdateParams? = nil, transfer_group : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_intents_intent(intent: intent, amount: amount, application_fee_amount: application_fee_amount, currency: currency, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, receipt_email: receipt_email, setup_future_usage: setup_future_usage, shipping: shipping, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data, transfer_group: transfer_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent(*, intent : String, amount : Int64? = nil, application_fee_amount : PostPaymentIntentsIntentRequestApplicationFeeAmount? = nil, currency : String? = nil, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, receipt_email : PostPaymentIntentsIntentRequestReceiptEmail? = nil, setup_future_usage : String? = nil, shipping : PostPaymentIntentsIntentRequestShipping? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataUpdateParams? = nil, transfer_group : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_intents_intent ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_payment_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_payment_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_payment_intents_intent, the character length must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_payment_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["", "off_session", "on_session"]
      if @api_client.config.client_side_validation && !setup_future_usage.nil? && !allowable_values.includes?(setup_future_usage)
        raise ArgumentError.new("invalid value for \"setup_future_usage\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_payment_intents_intent, the character length must be smaller than or equal to 22.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor_suffix.nil? && statement_descriptor_suffix.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\" when calling DefaultApi.post_payment_intents_intent, the character length must be smaller than or equal to 22.")
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?
      form_params["receipt_email"] = receipt_email.to_s if !receipt_email.nil?
      form_params["setup_future_usage"] = setup_future_usage.to_s if !setup_future_usage.nil?
      form_params["shipping"] = shipping.to_s if !shipping.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["statement_descriptor_suffix"] = statement_descriptor_suffix.to_s if !statement_descriptor_suffix.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?
      form_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Manually reconcile the remaining amount for a customer_balance PaymentIntent.</p>  <p>This can be used when the cash balance for <a href=\"docs/payments/customer-balance/reconciliation#cash-manual-reconciliation\">a customer in manual reconciliation mode</a> received funds.</p>
    # @param intent [String]
    # @return [PaymentIntent]
    def post_payment_intents_intent_apply_customer_balance(*, intent : String, amount : Int64? = nil, currency : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_payment_intents_intent_apply_customer_balance_with_http_info(intent: intent, amount: amount, currency: currency, expand: expand)
      data
    end

    # &lt;p&gt;Manually reconcile the remaining amount for a customer_balance PaymentIntent.&lt;/p&gt;  &lt;p&gt;This can be used when the cash balance for &lt;a href&#x3D;\&quot;docs/payments/customer-balance/reconciliation#cash-manual-reconciliation\&quot;&gt;a customer in manual reconciliation mode&lt;/a&gt; received funds.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def post_payment_intents_intent_apply_customer_balance_with_http_info(*, intent : String, amount : Int64? = nil, currency : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_payment_intents_intent_apply_customer_balance(intent: intent, amount: amount, currency: currency, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_intents_intent_apply_customer_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Manually reconcile the remaining amount for a customer_balance PaymentIntent.&lt;/p&gt;  &lt;p&gt;This can be used when the cash balance for &lt;a href&#x3D;\&quot;docs/payments/customer-balance/reconciliation#cash-manual-reconciliation\&quot;&gt;a customer in manual reconciliation mode&lt;/a&gt; received funds.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_payment_intents_intent_apply_customer_balance(*, intent : String, amount : Int64? = nil, currency : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_intents_intent_apply_customer_balance(intent: intent, amount: amount, currency: currency, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_apply_customer_balance(*, intent : String, amount : Int64? = nil, currency : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_intents_intent_apply_customer_balance ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_payment_intents_intent_apply_customer_balance, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/apply_customer_balance".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_intents_intent_apply_customer_balance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>, or <code>processing</code>. </p>  <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded. </p>  <p>You cannot cancel the PaymentIntent for a Checkout Session. <a href=\"/docs/api/checkout/sessions/expire\">Expire the Checkout Session</a> instead</p>
    # @param intent [String]
    # @return [PaymentIntent]
    def post_payment_intents_intent_cancel(*, intent : String, cancellation_reason : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_payment_intents_intent_cancel_with_http_info(intent: intent, cancellation_reason: cancellation_reason, expand: expand)
      data
    end

    # &lt;p&gt;A PaymentIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt;, or &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with &lt;code&gt;status&#x3D;’requires_capture’&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; will automatically be refunded. &lt;/p&gt;  &lt;p&gt;You cannot cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def post_payment_intents_intent_cancel_with_http_info(*, intent : String, cancellation_reason : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_payment_intents_intent_cancel(intent: intent, cancellation_reason: cancellation_reason, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_intents_intent_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;A PaymentIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt;, or &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with &lt;code&gt;status&#x3D;’requires_capture’&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; will automatically be refunded. &lt;/p&gt;  &lt;p&gt;You cannot cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_payment_intents_intent_cancel(*, intent : String, cancellation_reason : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_intents_intent_cancel(intent: intent, cancellation_reason: cancellation_reason, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_cancel(*, intent : String, cancellation_reason : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_intents_intent_cancel ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_payment_intents_intent_cancel, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["abandoned", "duplicate", "fraudulent", "requested_by_customer"]
      if @api_client.config.client_side_validation && !cancellation_reason.nil? && !allowable_values.includes?(cancellation_reason)
        raise ArgumentError.new("invalid value for \"cancellation_reason\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !cancellation_reason.nil? && cancellation_reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cancellation_reason\" when calling DefaultApi.post_payment_intents_intent_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/cancel".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["cancellation_reason"] = cancellation_reason.to_s if !cancellation_reason.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_intents_intent_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>  <p>Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).</p>  <p>Learn more about <a href=\"/docs/payments/capture-later\">separate authorization and capture</a>.</p>
    # @param intent [String]
    # @return [PaymentIntent]
    def post_payment_intents_intent_capture(*, intent : String, amount_to_capture : Int64? = nil, application_fee_amount : Int64? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataUpdateParams1? = nil)
      data, _status_code, _headers = post_payment_intents_intent_capture_with_http_info(intent: intent, amount_to_capture: amount_to_capture, application_fee_amount: application_fee_amount, expand: expand, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def post_payment_intents_intent_capture_with_http_info(*, intent : String, amount_to_capture : Int64? = nil, application_fee_amount : Int64? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataUpdateParams1? = nil)
      request = build_api_request_for_post_payment_intents_intent_capture(intent: intent, amount_to_capture: amount_to_capture, application_fee_amount: application_fee_amount, expand: expand, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_intents_intent_capture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_payment_intents_intent_capture(*, intent : String, amount_to_capture : Int64? = nil, application_fee_amount : Int64? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataUpdateParams1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_intents_intent_capture(intent: intent, amount_to_capture: amount_to_capture, application_fee_amount: application_fee_amount, expand: expand, statement_descriptor: statement_descriptor, statement_descriptor_suffix: statement_descriptor_suffix, transfer_data: transfer_data).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_capture(*, intent : String, amount_to_capture : Int64? = nil, application_fee_amount : Int64? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, statement_descriptor_suffix : String? = nil, transfer_data : TransferDataUpdateParams1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_intents_intent_capture ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_payment_intents_intent_capture, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_payment_intents_intent_capture, the character length must be smaller than or equal to 22.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor_suffix.nil? && statement_descriptor_suffix.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor_suffix\" when calling DefaultApi.post_payment_intents_intent_capture, the character length must be smaller than or equal to 22.")
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/capture".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount_to_capture"] = amount_to_capture.to_s if !amount_to_capture.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["statement_descriptor_suffix"] = statement_descriptor_suffix.to_s if !statement_descriptor_suffix.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_intents_intent_capture",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment.</p>  <p>If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If payment fails, the PaymentIntent will transition to the <code>requires_payment_method</code> status. If payment succeeds, the PaymentIntent will transition to the <code>succeeded</code> status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>  <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted using our <a href=\"/docs/stripe-js/reference#stripe-handle-card-payment\">client SDKs</a> and the PaymentIntent’s <a href=\"#payment_intent_object-client_secret\">client_secret</a>. After <code>next_action</code>s are handled by the client, no additional confirmation is required to complete the payment.</p>  <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the <code>requires_confirmation</code> state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the <a href=\"/docs/payments/payment-intents/web-manual\">expanded documentation</a> to learn more about manual confirmation.</p>
    # @param intent [String]
    # @return [PaymentIntent]
    def post_payment_intents_intent_confirm(*, intent : String, client_secret : String? = nil, error_on_requires_action : Bool? = nil, expand : Array(String)? = nil, mandate : String? = nil, mandate_data : PostPaymentIntentsIntentConfirmRequestMandateData? = nil, off_session : PostPaymentIntentsIntentConfirmRequestOffSession? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, radar_options : RadarOptions? = nil, receipt_email : PostPaymentIntentsIntentRequestReceiptEmail? = nil, return_url : String? = nil, setup_future_usage : String? = nil, shipping : PostPaymentIntentsIntentRequestShipping? = nil, use_stripe_sdk : Bool? = nil)
      data, _status_code, _headers = post_payment_intents_intent_confirm_with_http_info(intent: intent, client_secret: client_secret, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, use_stripe_sdk: use_stripe_sdk)
      data
    end

    # &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment.&lt;/p&gt;  &lt;p&gt;If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;).&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment.&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the &lt;a href&#x3D;\&quot;/docs/payments/payment-intents/web-manual\&quot;&gt;expanded documentation&lt;/a&gt; to learn more about manual confirmation.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def post_payment_intents_intent_confirm_with_http_info(*, intent : String, client_secret : String? = nil, error_on_requires_action : Bool? = nil, expand : Array(String)? = nil, mandate : String? = nil, mandate_data : PostPaymentIntentsIntentConfirmRequestMandateData? = nil, off_session : PostPaymentIntentsIntentConfirmRequestOffSession? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, radar_options : RadarOptions? = nil, receipt_email : PostPaymentIntentsIntentRequestReceiptEmail? = nil, return_url : String? = nil, setup_future_usage : String? = nil, shipping : PostPaymentIntentsIntentRequestShipping? = nil, use_stripe_sdk : Bool? = nil)
      request = build_api_request_for_post_payment_intents_intent_confirm(intent: intent, client_secret: client_secret, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, use_stripe_sdk: use_stripe_sdk)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_intents_intent_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment.&lt;/p&gt;  &lt;p&gt;If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;).&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment.&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt. Read the &lt;a href&#x3D;\&quot;/docs/payments/payment-intents/web-manual\&quot;&gt;expanded documentation&lt;/a&gt; to learn more about manual confirmation.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_payment_intents_intent_confirm(*, intent : String, client_secret : String? = nil, error_on_requires_action : Bool? = nil, expand : Array(String)? = nil, mandate : String? = nil, mandate_data : PostPaymentIntentsIntentConfirmRequestMandateData? = nil, off_session : PostPaymentIntentsIntentConfirmRequestOffSession? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, radar_options : RadarOptions? = nil, receipt_email : PostPaymentIntentsIntentRequestReceiptEmail? = nil, return_url : String? = nil, setup_future_usage : String? = nil, shipping : PostPaymentIntentsIntentRequestShipping? = nil, use_stripe_sdk : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_intents_intent_confirm(intent: intent, client_secret: client_secret, error_on_requires_action: error_on_requires_action, expand: expand, mandate: mandate, mandate_data: mandate_data, off_session: off_session, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, radar_options: radar_options, receipt_email: receipt_email, return_url: return_url, setup_future_usage: setup_future_usage, shipping: shipping, use_stripe_sdk: use_stripe_sdk).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_confirm(*, intent : String, client_secret : String? = nil, error_on_requires_action : Bool? = nil, expand : Array(String)? = nil, mandate : String? = nil, mandate_data : PostPaymentIntentsIntentConfirmRequestMandateData? = nil, off_session : PostPaymentIntentsIntentConfirmRequestOffSession? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams? = nil, payment_method_options : PaymentMethodOptionsParam11? = nil, payment_method_types : Array(String)? = nil, radar_options : RadarOptions? = nil, receipt_email : PostPaymentIntentsIntentRequestReceiptEmail? = nil, return_url : String? = nil, setup_future_usage : String? = nil, shipping : PostPaymentIntentsIntentRequestShipping? = nil, use_stripe_sdk : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_intents_intent_confirm ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_payment_intents_intent_confirm, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !client_secret.nil? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\" when calling DefaultApi.post_payment_intents_intent_confirm, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !mandate.nil? && mandate.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"mandate\" when calling DefaultApi.post_payment_intents_intent_confirm, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_payment_intents_intent_confirm, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["", "off_session", "on_session"]
      if @api_client.config.client_side_validation && !setup_future_usage.nil? && !allowable_values.includes?(setup_future_usage)
        raise ArgumentError.new("invalid value for \"setup_future_usage\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/payment_intents/{intent}/confirm".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      form_params["error_on_requires_action"] = error_on_requires_action.to_s if !error_on_requires_action.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["mandate"] = mandate.to_s if !mandate.nil?
      form_params["mandate_data"] = mandate_data.to_s if !mandate_data.nil?
      form_params["off_session"] = off_session.to_s if !off_session.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?
      form_params["radar_options"] = radar_options.to_s if !radar_options.nil?
      form_params["receipt_email"] = receipt_email.to_s if !receipt_email.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?
      form_params["setup_future_usage"] = setup_future_usage.to_s if !setup_future_usage.nil?
      form_params["shipping"] = shipping.to_s if !shipping.nil?
      form_params["use_stripe_sdk"] = use_stripe_sdk.to_s if !use_stripe_sdk.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_intents_intent_confirm",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Perform an incremental authorization on an eligible <a href=\"/docs/api/payment_intents/object\">PaymentIntent</a>. To be eligible, the PaymentIntent’s status must be <code>requires_capture</code> and <a href=\"/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\">incremental_authorization_supported</a> must be <code>true</code>.</p>  <p>Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher <code>amount</code> provided. As with the initial authorization, incremental authorizations may be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.</p>  <p>If the incremental authorization succeeds, the PaymentIntent object is returned with the updated <a href=\"/docs/api/payment_intents/object#payment_intent_object-amount\">amount</a>. If the incremental authorization fails, a <a href=\"/docs/error-codes#card-declined\">card_declined</a> error is returned, and no fields on the PaymentIntent or Charge are updated. The PaymentIntent object remains capturable for the previously authorized amount.</p>  <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. Once captured, a PaymentIntent can no longer be incremented.</p>  <p>Learn more about <a href=\"/docs/terminal/features/incremental-authorizations\">incremental authorizations</a>.</p>
    # @param intent [String]
    # @param amount [Int64] The updated total amount you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
    # @return [PaymentIntent]
    def post_payment_intents_intent_increment_authorization(*, intent : String, amount : Int64, application_fee_amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, transfer_data : TransferDataUpdateParams2? = nil)
      data, _status_code, _headers = post_payment_intents_intent_increment_authorization_with_http_info(intent: intent, amount: amount, application_fee_amount: application_fee_amount, description: description, expand: expand, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. As with the initial authorization, incremental authorizations may be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object is returned with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error is returned, and no fields on the PaymentIntent or Charge are updated. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. Once captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
    # @param intent [String]
    # @param amount [Int64] The updated total amount you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def post_payment_intents_intent_increment_authorization_with_http_info(*, intent : String, amount : Int64, application_fee_amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, transfer_data : TransferDataUpdateParams2? = nil)
      request = build_api_request_for_post_payment_intents_intent_increment_authorization(intent: intent, amount: amount, application_fee_amount: application_fee_amount, description: description, expand: expand, transfer_data: transfer_data)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_intents_intent_increment_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. As with the initial authorization, incremental authorizations may be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object is returned with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error is returned, and no fields on the PaymentIntent or Charge are updated. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. Once captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
    # @param intent [String]
    # @param amount [Int64] The updated total amount you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
    # @return nil
    def post_payment_intents_intent_increment_authorization(*, intent : String, amount : Int64, application_fee_amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, transfer_data : TransferDataUpdateParams2? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_intents_intent_increment_authorization(intent: intent, amount: amount, application_fee_amount: application_fee_amount, description: description, expand: expand, transfer_data: transfer_data).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_increment_authorization(*, intent : String, amount : Int64, application_fee_amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, transfer_data : TransferDataUpdateParams2? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_intents_intent_increment_authorization ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_payment_intents_intent_increment_authorization, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_payment_intents_intent_increment_authorization, the character length must be smaller than or equal to 1000.")
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/increment_authorization".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_intents_intent_increment_authorization",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verifies microdeposits on a PaymentIntent object.</p>
    # @param intent [String]
    # @return [PaymentIntent]
    def post_payment_intents_intent_verify_microdeposits(*, intent : String, amounts : Array(Int64)? = nil, client_secret : String? = nil, descriptor_code : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_payment_intents_intent_verify_microdeposits_with_http_info(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand)
      data
    end

    # &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(PaymentIntent, Integer, Hash)>] PaymentIntent data, response status code and response headers
    def post_payment_intents_intent_verify_microdeposits_with_http_info(*, intent : String, amounts : Array(Int64)? = nil, client_secret : String? = nil, descriptor_code : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_payment_intents_intent_verify_microdeposits(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_intents_intent_verify_microdeposits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_payment_intents_intent_verify_microdeposits(*, intent : String, amounts : Array(Int64)? = nil, client_secret : String? = nil, descriptor_code : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_intents_intent_verify_microdeposits(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_intents_intent_verify_microdeposits(*, intent : String, amounts : Array(Int64)? = nil, client_secret : String? = nil, descriptor_code : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_intents_intent_verify_microdeposits ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_payment_intents_intent_verify_microdeposits, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !client_secret.nil? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\" when calling DefaultApi.post_payment_intents_intent_verify_microdeposits, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !descriptor_code.nil? && descriptor_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"descriptor_code\" when calling DefaultApi.post_payment_intents_intent_verify_microdeposits, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_intents/{intent}/verify_microdeposits".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amounts"] = @api_client.build_collection_param(amounts, "csv") if !amounts.nil? && !amounts.empty?
      form_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      form_params["descriptor_code"] = descriptor_code.to_s if !descriptor_code.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_intents_intent_verify_microdeposits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a payment link.</p>
    # @param line_items [Array(LineItemsCreateParams)] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @return [PaymentLink]
    def post_payment_links(*, line_items : Array(LineItemsCreateParams), after_completion : AfterCompletionParams? = nil, allow_promotion_codes : Bool? = nil, application_fee_amount : Int64? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxParams1? = nil, billing_address_collection : String? = nil, consent_collection : ConsentCollectionParams1? = nil, customer_creation : String? = nil, expand : Array(String)? = nil, on_behalf_of : String? = nil, payment_intent_data : PaymentIntentDataParams1? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : PhoneNumberCollectionParams1? = nil, shipping_address_collection : ShippingAddressCollectionParams1? = nil, shipping_options : Array(ShippingOptionParams1)? = nil, submit_type : String? = nil, subscription_data : SubscriptionDataParams1? = nil, tax_id_collection : TaxIdCollectionParams1? = nil, transfer_data : TransferDataParams1? = nil)
      data, _status_code, _headers = post_payment_links_with_http_info(line_items: line_items, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, consent_collection: consent_collection, customer_creation: customer_creation, expand: expand, on_behalf_of: on_behalf_of, payment_intent_data: payment_intent_data, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;Creates a payment link.&lt;/p&gt;
    # @param line_items [Array(LineItemsCreateParams)] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @return [Array<(PaymentLink, Integer, Hash)>] PaymentLink data, response status code and response headers
    def post_payment_links_with_http_info(*, line_items : Array(LineItemsCreateParams), after_completion : AfterCompletionParams? = nil, allow_promotion_codes : Bool? = nil, application_fee_amount : Int64? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxParams1? = nil, billing_address_collection : String? = nil, consent_collection : ConsentCollectionParams1? = nil, customer_creation : String? = nil, expand : Array(String)? = nil, on_behalf_of : String? = nil, payment_intent_data : PaymentIntentDataParams1? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : PhoneNumberCollectionParams1? = nil, shipping_address_collection : ShippingAddressCollectionParams1? = nil, shipping_options : Array(ShippingOptionParams1)? = nil, submit_type : String? = nil, subscription_data : SubscriptionDataParams1? = nil, tax_id_collection : TaxIdCollectionParams1? = nil, transfer_data : TransferDataParams1? = nil)
      request = build_api_request_for_post_payment_links(line_items: line_items, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, consent_collection: consent_collection, customer_creation: customer_creation, expand: expand, on_behalf_of: on_behalf_of, payment_intent_data: payment_intent_data, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection, transfer_data: transfer_data)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a payment link.&lt;/p&gt;
    # @param line_items [Array(LineItemsCreateParams)] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @return nil
    def post_payment_links(*, line_items : Array(LineItemsCreateParams), after_completion : AfterCompletionParams? = nil, allow_promotion_codes : Bool? = nil, application_fee_amount : Int64? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxParams1? = nil, billing_address_collection : String? = nil, consent_collection : ConsentCollectionParams1? = nil, customer_creation : String? = nil, expand : Array(String)? = nil, on_behalf_of : String? = nil, payment_intent_data : PaymentIntentDataParams1? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : PhoneNumberCollectionParams1? = nil, shipping_address_collection : ShippingAddressCollectionParams1? = nil, shipping_options : Array(ShippingOptionParams1)? = nil, submit_type : String? = nil, subscription_data : SubscriptionDataParams1? = nil, tax_id_collection : TaxIdCollectionParams1? = nil, transfer_data : TransferDataParams1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_links(line_items: line_items, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, consent_collection: consent_collection, customer_creation: customer_creation, expand: expand, on_behalf_of: on_behalf_of, payment_intent_data: payment_intent_data, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection, transfer_data: transfer_data).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_links(*, line_items : Array(LineItemsCreateParams), after_completion : AfterCompletionParams? = nil, allow_promotion_codes : Bool? = nil, application_fee_amount : Int64? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxParams1? = nil, billing_address_collection : String? = nil, consent_collection : ConsentCollectionParams1? = nil, customer_creation : String? = nil, expand : Array(String)? = nil, on_behalf_of : String? = nil, payment_intent_data : PaymentIntentDataParams1? = nil, payment_method_types : Array(String)? = nil, phone_number_collection : PhoneNumberCollectionParams1? = nil, shipping_address_collection : ShippingAddressCollectionParams1? = nil, shipping_options : Array(ShippingOptionParams1)? = nil, submit_type : String? = nil, subscription_data : SubscriptionDataParams1? = nil, tax_id_collection : TaxIdCollectionParams1? = nil, transfer_data : TransferDataParams1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_links ..." }
      end
      allowable_values = ["auto", "required"]
      if @api_client.config.client_side_validation && !billing_address_collection.nil? && !allowable_values.includes?(billing_address_collection)
        raise ArgumentError.new("invalid value for \"billing_address_collection\", must be one of #{allowable_values}")
      end
      allowable_values = ["always", "if_required"]
      if @api_client.config.client_side_validation && !customer_creation.nil? && !allowable_values.includes?(customer_creation)
        raise ArgumentError.new("invalid value for \"customer_creation\", must be one of #{allowable_values}")
      end
      allowable_values = ["card"]
      if @api_client.config.client_side_validation && !payment_method_types.nil? && !payment_method_types.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"payment_method_types\", must include one of #{allowable_values}")
      end
      allowable_values = ["auto", "book", "donate", "pay"]
      if @api_client.config.client_side_validation && !submit_type.nil? && !allowable_values.includes?(submit_type)
        raise ArgumentError.new("invalid value for \"submit_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/payment_links"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["after_completion"] = after_completion.to_s if !after_completion.nil?
      form_params["allow_promotion_codes"] = allow_promotion_codes.to_s if !allow_promotion_codes.nil?
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["application_fee_percent"] = application_fee_percent.to_s if !application_fee_percent.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["billing_address_collection"] = billing_address_collection.to_s if !billing_address_collection.nil?
      form_params["consent_collection"] = consent_collection.to_s if !consent_collection.nil?
      form_params["customer_creation"] = customer_creation.to_s if !customer_creation.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["line_items"] = @api_client.build_collection_param(line_items, "csv") if !line_items.nil? && !line_items.empty?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["payment_intent_data"] = payment_intent_data.to_s if !payment_intent_data.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?
      form_params["phone_number_collection"] = phone_number_collection.to_s if !phone_number_collection.nil?
      form_params["shipping_address_collection"] = shipping_address_collection.to_s if !shipping_address_collection.nil?
      form_params["shipping_options"] = @api_client.build_collection_param(shipping_options, "csv") if !shipping_options.nil? && !shipping_options.empty?
      form_params["submit_type"] = submit_type.to_s if !submit_type.nil?
      form_params["subscription_data"] = subscription_data.to_s if !subscription_data.nil?
      form_params["tax_id_collection"] = tax_id_collection.to_s if !tax_id_collection.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a payment link.</p>
    # @param payment_link [String]
    # @return [PaymentLink]
    def post_payment_links_payment_link(*, payment_link : String, active : Bool? = nil, after_completion : AfterCompletionParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : AutomaticTaxParams1? = nil, billing_address_collection : String? = nil, customer_creation : String? = nil, expand : Array(String)? = nil, line_items : Array(LineItemsUpdateParams)? = nil, payment_method_types : PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? = nil, shipping_address_collection : PostPaymentLinksPaymentLinkRequestShippingAddressCollection? = nil)
      data, _status_code, _headers = post_payment_links_payment_link_with_http_info(payment_link: payment_link, active: active, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, customer_creation: customer_creation, expand: expand, line_items: line_items, payment_method_types: payment_method_types, shipping_address_collection: shipping_address_collection)
      data
    end

    # &lt;p&gt;Updates a payment link.&lt;/p&gt;
    # @param payment_link [String]
    # @return [Array<(PaymentLink, Integer, Hash)>] PaymentLink data, response status code and response headers
    def post_payment_links_payment_link_with_http_info(*, payment_link : String, active : Bool? = nil, after_completion : AfterCompletionParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : AutomaticTaxParams1? = nil, billing_address_collection : String? = nil, customer_creation : String? = nil, expand : Array(String)? = nil, line_items : Array(LineItemsUpdateParams)? = nil, payment_method_types : PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? = nil, shipping_address_collection : PostPaymentLinksPaymentLinkRequestShippingAddressCollection? = nil)
      request = build_api_request_for_post_payment_links_payment_link(payment_link: payment_link, active: active, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, customer_creation: customer_creation, expand: expand, line_items: line_items, payment_method_types: payment_method_types, shipping_address_collection: shipping_address_collection)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_links_payment_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentLink.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a payment link.&lt;/p&gt;
    # @param payment_link [String]
    # @return nil
    def post_payment_links_payment_link(*, payment_link : String, active : Bool? = nil, after_completion : AfterCompletionParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : AutomaticTaxParams1? = nil, billing_address_collection : String? = nil, customer_creation : String? = nil, expand : Array(String)? = nil, line_items : Array(LineItemsUpdateParams)? = nil, payment_method_types : PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? = nil, shipping_address_collection : PostPaymentLinksPaymentLinkRequestShippingAddressCollection? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_links_payment_link(payment_link: payment_link, active: active, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, customer_creation: customer_creation, expand: expand, line_items: line_items, payment_method_types: payment_method_types, shipping_address_collection: shipping_address_collection).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_links_payment_link(*, payment_link : String, active : Bool? = nil, after_completion : AfterCompletionParams? = nil, allow_promotion_codes : Bool? = nil, automatic_tax : AutomaticTaxParams1? = nil, billing_address_collection : String? = nil, customer_creation : String? = nil, expand : Array(String)? = nil, line_items : Array(LineItemsUpdateParams)? = nil, payment_method_types : PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? = nil, shipping_address_collection : PostPaymentLinksPaymentLinkRequestShippingAddressCollection? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_links_payment_link ..." }
      end
      if @api_client.config.client_side_validation && payment_link.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_link\" when calling DefaultApi.post_payment_links_payment_link, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["auto", "required"]
      if @api_client.config.client_side_validation && !billing_address_collection.nil? && !allowable_values.includes?(billing_address_collection)
        raise ArgumentError.new("invalid value for \"billing_address_collection\", must be one of #{allowable_values}")
      end
      allowable_values = ["always", "if_required"]
      if @api_client.config.client_side_validation && !customer_creation.nil? && !allowable_values.includes?(customer_creation)
        raise ArgumentError.new("invalid value for \"customer_creation\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/payment_links/{payment_link}".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["after_completion"] = after_completion.to_s if !after_completion.nil?
      form_params["allow_promotion_codes"] = allow_promotion_codes.to_s if !allow_promotion_codes.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["billing_address_collection"] = billing_address_collection.to_s if !billing_address_collection.nil?
      form_params["customer_creation"] = customer_creation.to_s if !customer_creation.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["line_items"] = @api_client.build_collection_param(line_items, "csv") if !line_items.nil? && !line_items.empty?
      form_params["payment_method_types"] = payment_method_types.to_s if !payment_method_types.nil?
      form_params["shipping_address_collection"] = shipping_address_collection.to_s if !shipping_address_collection.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_links_payment_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a PaymentMethod object. Read the <a href=\"/docs/stripe-js/reference#stripe-create-payment-method\">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>  <p>Instead of creating a PaymentMethod directly, we recommend using the <a href=\"/docs/payments/accept-a-payment\">PaymentIntents</a> API to accept a payment immediately or the <a href=\"/docs/payments/save-and-reuse\">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
    # @return [PaymentMethod]
    def post_payment_methods(*, acss_debit : PaymentMethodParam2? = nil, affirm : JSON::Any? = nil, afterpay_clearpay : JSON::Any? = nil, alipay : JSON::Any? = nil, au_becs_debit : Param10? = nil, bacs_debit : Param11? = nil, bancontact : JSON::Any? = nil, billing_details : BillingDetailsInnerParams1? = nil, boleto : Param12? = nil, card : PostPaymentMethodsRequestCard? = nil, customer : String? = nil, customer_balance : JSON::Any? = nil, eps : Param13? = nil, expand : Array(String)? = nil, fpx : Param14? = nil, giropay : JSON::Any? = nil, grabpay : JSON::Any? = nil, ideal : Param15? = nil, interac_present : JSON::Any? = nil, klarna : Param16? = nil, konbini : JSON::Any? = nil, link : JSON::Any? = nil, oxxo : JSON::Any? = nil, p24 : Param17? = nil, payment_method : String? = nil, paynow : JSON::Any? = nil, radar_options : RadarOptions? = nil, sepa_debit : Param18? = nil, sofort : Param19? = nil, _type : String? = nil, us_bank_account : PaymentMethodParam3? = nil, wechat_pay : JSON::Any? = nil)
      data, _status_code, _headers = post_payment_methods_with_http_info(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, billing_details: billing_details, boleto: boleto, card: card, customer: customer, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, grabpay: grabpay, ideal: ideal, interac_present: interac_present, klarna: klarna, konbini: konbini, link: link, oxxo: oxxo, p24: p24, payment_method: payment_method, paynow: paynow, radar_options: radar_options, sepa_debit: sepa_debit, sofort: sofort, _type: _type, us_bank_account: us_bank_account, wechat_pay: wechat_pay)
      data
    end

    # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
    # @return [Array<(PaymentMethod, Integer, Hash)>] PaymentMethod data, response status code and response headers
    def post_payment_methods_with_http_info(*, acss_debit : PaymentMethodParam2? = nil, affirm : JSON::Any? = nil, afterpay_clearpay : JSON::Any? = nil, alipay : JSON::Any? = nil, au_becs_debit : Param10? = nil, bacs_debit : Param11? = nil, bancontact : JSON::Any? = nil, billing_details : BillingDetailsInnerParams1? = nil, boleto : Param12? = nil, card : PostPaymentMethodsRequestCard? = nil, customer : String? = nil, customer_balance : JSON::Any? = nil, eps : Param13? = nil, expand : Array(String)? = nil, fpx : Param14? = nil, giropay : JSON::Any? = nil, grabpay : JSON::Any? = nil, ideal : Param15? = nil, interac_present : JSON::Any? = nil, klarna : Param16? = nil, konbini : JSON::Any? = nil, link : JSON::Any? = nil, oxxo : JSON::Any? = nil, p24 : Param17? = nil, payment_method : String? = nil, paynow : JSON::Any? = nil, radar_options : RadarOptions? = nil, sepa_debit : Param18? = nil, sofort : Param19? = nil, _type : String? = nil, us_bank_account : PaymentMethodParam3? = nil, wechat_pay : JSON::Any? = nil)
      request = build_api_request_for_post_payment_methods(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, billing_details: billing_details, boleto: boleto, card: card, customer: customer, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, grabpay: grabpay, ideal: ideal, interac_present: interac_present, klarna: klarna, konbini: konbini, link: link, oxxo: oxxo, p24: p24, payment_method: payment_method, paynow: paynow, radar_options: radar_options, sepa_debit: sepa_debit, sofort: sofort, _type: _type, us_bank_account: us_bank_account, wechat_pay: wechat_pay)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentMethod.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
    # @return nil
    def post_payment_methods(*, acss_debit : PaymentMethodParam2? = nil, affirm : JSON::Any? = nil, afterpay_clearpay : JSON::Any? = nil, alipay : JSON::Any? = nil, au_becs_debit : Param10? = nil, bacs_debit : Param11? = nil, bancontact : JSON::Any? = nil, billing_details : BillingDetailsInnerParams1? = nil, boleto : Param12? = nil, card : PostPaymentMethodsRequestCard? = nil, customer : String? = nil, customer_balance : JSON::Any? = nil, eps : Param13? = nil, expand : Array(String)? = nil, fpx : Param14? = nil, giropay : JSON::Any? = nil, grabpay : JSON::Any? = nil, ideal : Param15? = nil, interac_present : JSON::Any? = nil, klarna : Param16? = nil, konbini : JSON::Any? = nil, link : JSON::Any? = nil, oxxo : JSON::Any? = nil, p24 : Param17? = nil, payment_method : String? = nil, paynow : JSON::Any? = nil, radar_options : RadarOptions? = nil, sepa_debit : Param18? = nil, sofort : Param19? = nil, _type : String? = nil, us_bank_account : PaymentMethodParam3? = nil, wechat_pay : JSON::Any? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_methods(acss_debit: acss_debit, affirm: affirm, afterpay_clearpay: afterpay_clearpay, alipay: alipay, au_becs_debit: au_becs_debit, bacs_debit: bacs_debit, bancontact: bancontact, billing_details: billing_details, boleto: boleto, card: card, customer: customer, customer_balance: customer_balance, eps: eps, expand: expand, fpx: fpx, giropay: giropay, grabpay: grabpay, ideal: ideal, interac_present: interac_present, klarna: klarna, konbini: konbini, link: link, oxxo: oxxo, p24: p24, payment_method: payment_method, paynow: paynow, radar_options: radar_options, sepa_debit: sepa_debit, sofort: sofort, _type: _type, us_bank_account: us_bank_account, wechat_pay: wechat_pay).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_methods(*, acss_debit : PaymentMethodParam2? = nil, affirm : JSON::Any? = nil, afterpay_clearpay : JSON::Any? = nil, alipay : JSON::Any? = nil, au_becs_debit : Param10? = nil, bacs_debit : Param11? = nil, bancontact : JSON::Any? = nil, billing_details : BillingDetailsInnerParams1? = nil, boleto : Param12? = nil, card : PostPaymentMethodsRequestCard? = nil, customer : String? = nil, customer_balance : JSON::Any? = nil, eps : Param13? = nil, expand : Array(String)? = nil, fpx : Param14? = nil, giropay : JSON::Any? = nil, grabpay : JSON::Any? = nil, ideal : Param15? = nil, interac_present : JSON::Any? = nil, klarna : Param16? = nil, konbini : JSON::Any? = nil, link : JSON::Any? = nil, oxxo : JSON::Any? = nil, p24 : Param17? = nil, payment_method : String? = nil, paynow : JSON::Any? = nil, radar_options : RadarOptions? = nil, sepa_debit : Param18? = nil, sofort : Param19? = nil, _type : String? = nil, us_bank_account : PaymentMethodParam3? = nil, wechat_pay : JSON::Any? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_methods ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_payment_methods, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_payment_methods, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["acss_debit", "affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "boleto", "card", "customer_balance", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "oxxo", "p24", "paynow", "sepa_debit", "sofort", "us_bank_account", "wechat_pay"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/payment_methods"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["acss_debit"] = acss_debit.to_s if !acss_debit.nil?
      form_params["affirm"] = affirm.to_s if !affirm.nil?
      form_params["afterpay_clearpay"] = afterpay_clearpay.to_s if !afterpay_clearpay.nil?
      form_params["alipay"] = alipay.to_s if !alipay.nil?
      form_params["au_becs_debit"] = au_becs_debit.to_s if !au_becs_debit.nil?
      form_params["bacs_debit"] = bacs_debit.to_s if !bacs_debit.nil?
      form_params["bancontact"] = bancontact.to_s if !bancontact.nil?
      form_params["billing_details"] = billing_details.to_s if !billing_details.nil?
      form_params["boleto"] = boleto.to_s if !boleto.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["customer_balance"] = customer_balance.to_s if !customer_balance.nil?
      form_params["eps"] = eps.to_s if !eps.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["fpx"] = fpx.to_s if !fpx.nil?
      form_params["giropay"] = giropay.to_s if !giropay.nil?
      form_params["grabpay"] = grabpay.to_s if !grabpay.nil?
      form_params["ideal"] = ideal.to_s if !ideal.nil?
      form_params["interac_present"] = interac_present.to_s if !interac_present.nil?
      form_params["klarna"] = klarna.to_s if !klarna.nil?
      form_params["konbini"] = konbini.to_s if !konbini.nil?
      form_params["link"] = link.to_s if !link.nil?
      form_params["oxxo"] = oxxo.to_s if !oxxo.nil?
      form_params["p24"] = p24.to_s if !p24.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["paynow"] = paynow.to_s if !paynow.nil?
      form_params["radar_options"] = radar_options.to_s if !radar_options.nil?
      form_params["sepa_debit"] = sepa_debit.to_s if !sepa_debit.nil?
      form_params["sofort"] = sofort.to_s if !sofort.nil?
      form_params["type"] = _type.to_s if !_type.nil?
      form_params["us_bank_account"] = us_bank_account.to_s if !us_bank_account.nil?
      form_params["wechat_pay"] = wechat_pay.to_s if !wechat_pay.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_methods",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
    # @param payment_method [String]
    # @return [PaymentMethod]
    def post_payment_methods_payment_method(*, payment_method : String, billing_details : BillingDetailsInnerParams1? = nil, card : UpdateApiParam? = nil, expand : Array(String)? = nil, link : JSON::Any? = nil, metadata : PostAccountRequestMetadata? = nil, us_bank_account : UpdateParam? = nil)
      data, _status_code, _headers = post_payment_methods_payment_method_with_http_info(payment_method: payment_method, billing_details: billing_details, card: card, expand: expand, link: link, metadata: metadata, us_bank_account: us_bank_account)
      data
    end

    # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
    # @param payment_method [String]
    # @return [Array<(PaymentMethod, Integer, Hash)>] PaymentMethod data, response status code and response headers
    def post_payment_methods_payment_method_with_http_info(*, payment_method : String, billing_details : BillingDetailsInnerParams1? = nil, card : UpdateApiParam? = nil, expand : Array(String)? = nil, link : JSON::Any? = nil, metadata : PostAccountRequestMetadata? = nil, us_bank_account : UpdateParam? = nil)
      request = build_api_request_for_post_payment_methods_payment_method(payment_method: payment_method, billing_details: billing_details, card: card, expand: expand, link: link, metadata: metadata, us_bank_account: us_bank_account)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_methods_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentMethod.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.&lt;/p&gt;
    # @param payment_method [String]
    # @return nil
    def post_payment_methods_payment_method(*, payment_method : String, billing_details : BillingDetailsInnerParams1? = nil, card : UpdateApiParam? = nil, expand : Array(String)? = nil, link : JSON::Any? = nil, metadata : PostAccountRequestMetadata? = nil, us_bank_account : UpdateParam? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_methods_payment_method(payment_method: payment_method, billing_details: billing_details, card: card, expand: expand, link: link, metadata: metadata, us_bank_account: us_bank_account).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method(*, payment_method : String, billing_details : BillingDetailsInnerParams1? = nil, card : UpdateApiParam? = nil, expand : Array(String)? = nil, link : JSON::Any? = nil, metadata : PostAccountRequestMetadata? = nil, us_bank_account : UpdateParam? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_methods_payment_method ..." }
      end
      if @api_client.config.client_side_validation && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_payment_methods_payment_method, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["billing_details"] = billing_details.to_s if !billing_details.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["link"] = link.to_s if !link.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["us_bank_account"] = us_bank_account.to_s if !us_bank_account.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_methods_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Attaches a PaymentMethod object to a Customer.</p>  <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href=\"/docs/api/setup_intents\">SetupIntent</a> or a PaymentIntent with <a href=\"/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\">setup_future_usage</a>. These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod. See <a href=\"/docs/payments/payment-intents#future-usage\">Optimizing cards for future payments</a> for more information about setting up future payments.</p>  <p>To use this PaymentMethod as the default for invoice or subscription payments, set <a href=\"/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\"><code>invoice_settings.default_payment_method</code></a>, on the Customer to the PaymentMethod’s ID.</p>
    # @param payment_method [String]
    # @param customer [String] The ID of the customer to which to attach the PaymentMethod.
    # @return [PaymentMethod]
    def post_payment_methods_payment_method_attach(*, payment_method : String, customer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_payment_methods_payment_method_attach_with_http_info(payment_method: payment_method, customer: customer, expand: expand)
      data
    end

    # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint does not ensure that future payments can be made with the attached PaymentMethod. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
    # @param payment_method [String]
    # @param customer [String] The ID of the customer to which to attach the PaymentMethod.
    # @return [Array<(PaymentMethod, Integer, Hash)>] PaymentMethod data, response status code and response headers
    def post_payment_methods_payment_method_attach_with_http_info(*, payment_method : String, customer : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_payment_methods_payment_method_attach(payment_method: payment_method, customer: customer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_methods_payment_method_attach\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentMethod.from_json(data), status_code, headers
    end

    # &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint does not ensure that future payments can be made with the attached PaymentMethod. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
    # @param payment_method [String]
    # @param customer [String] The ID of the customer to which to attach the PaymentMethod.
    # @return nil
    def post_payment_methods_payment_method_attach(*, payment_method : String, customer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_methods_payment_method_attach(payment_method: payment_method, customer: customer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method_attach(*, payment_method : String, customer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_methods_payment_method_attach ..." }
      end
      if @api_client.config.client_side_validation && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_payment_methods_payment_method_attach, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_payment_methods_payment_method_attach, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}/attach".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_methods_payment_method_attach",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
    # @param payment_method [String]
    # @return [PaymentMethod]
    def post_payment_methods_payment_method_detach(*, payment_method : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_payment_methods_payment_method_detach_with_http_info(payment_method: payment_method, expand: expand)
      data
    end

    # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
    # @param payment_method [String]
    # @return [Array<(PaymentMethod, Integer, Hash)>] PaymentMethod data, response status code and response headers
    def post_payment_methods_payment_method_detach_with_http_info(*, payment_method : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_payment_methods_payment_method_detach(payment_method: payment_method, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payment_methods_payment_method_detach\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PaymentMethod.from_json(data), status_code, headers
    end

    # &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
    # @param payment_method [String]
    # @return nil
    def post_payment_methods_payment_method_detach(*, payment_method : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payment_methods_payment_method_detach(payment_method: payment_method, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_methods_payment_method_detach(*, payment_method : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payment_methods_payment_method_detach ..." }
      end
      if @api_client.config.client_side_validation && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_payment_methods_payment_method_detach, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payment_methods/{payment_method}/detach".sub("{" + "payment_method" + "}", URI.encode_path(payment_method.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payment_methods_payment_method_detach",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To send funds to your own bank account, you create a new payout object. Your <a href=\"#balance\">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>  <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>  <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href=\"#balance_object\">balance object</a> details available and pending amounts by source type.</p>
    # @param amount [Int64] A positive integer in cents representing how much to payout.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return [Payout]
    def post_payouts(*, amount : Int64, currency : String, description : String? = nil, destination : String? = nil, expand : Array(String)? = nil, method : String? = nil, source_type : String? = nil, statement_descriptor : String? = nil)
      data, _status_code, _headers = post_payouts_with_http_info(amount: amount, currency: currency, description: description, destination: destination, expand: expand, method: method, source_type: source_type, statement_descriptor: statement_descriptor)
      data
    end

    # &lt;p&gt;To send funds to your own bank account, you create a new payout object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The &lt;a href&#x3D;\&quot;#balance_object\&quot;&gt;balance object&lt;/a&gt; details available and pending amounts by source type.&lt;/p&gt;
    # @param amount [Int64] A positive integer in cents representing how much to payout.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return [Array<(Payout, Integer, Hash)>] Payout data, response status code and response headers
    def post_payouts_with_http_info(*, amount : Int64, currency : String, description : String? = nil, destination : String? = nil, expand : Array(String)? = nil, method : String? = nil, source_type : String? = nil, statement_descriptor : String? = nil)
      request = build_api_request_for_post_payouts(amount: amount, currency: currency, description: description, destination: destination, expand: expand, method: method, source_type: source_type, statement_descriptor: statement_descriptor)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Payout.from_json(data), status_code, headers
    end

    # &lt;p&gt;To send funds to your own bank account, you create a new payout object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The &lt;a href&#x3D;\&quot;#balance_object\&quot;&gt;balance object&lt;/a&gt; details available and pending amounts by source type.&lt;/p&gt;
    # @param amount [Int64] A positive integer in cents representing how much to payout.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return nil
    def post_payouts(*, amount : Int64, currency : String, description : String? = nil, destination : String? = nil, expand : Array(String)? = nil, method : String? = nil, source_type : String? = nil, statement_descriptor : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payouts(amount: amount, currency: currency, description: description, destination: destination, expand: expand, method: method, source_type: source_type, statement_descriptor: statement_descriptor).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payouts(*, amount : Int64, currency : String, description : String? = nil, destination : String? = nil, expand : Array(String)? = nil, method : String? = nil, source_type : String? = nil, statement_descriptor : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payouts ..." }
      end
      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_payouts, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["instant", "standard"]
      if @api_client.config.client_side_validation && !method.nil? && !allowable_values.includes?(method)
        raise ArgumentError.new("invalid value for \"method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !method.nil? && method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"method\" when calling DefaultApi.post_payouts, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["bank_account", "card", "fpx"]
      if @api_client.config.client_side_validation && !source_type.nil? && !allowable_values.includes?(source_type)
        raise ArgumentError.new("invalid value for \"source_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !source_type.nil? && source_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_type\" when calling DefaultApi.post_payouts, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_payouts, the character length must be smaller than or equal to 22.")
      end

      # resource path
      local_var_path = "/v1/payouts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["destination"] = destination.to_s if !destination.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["method"] = method.to_s if !method.nil?
      form_params["source_type"] = source_type.to_s if !source_type.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payouts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p>
    # @param payout [String]
    # @return [Payout]
    def post_payouts_payout(*, payout : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_payouts_payout_with_http_info(payout: payout, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.&lt;/p&gt;
    # @param payout [String]
    # @return [Array<(Payout, Integer, Hash)>] Payout data, response status code and response headers
    def post_payouts_payout_with_http_info(*, payout : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_payouts_payout(payout: payout, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payouts_payout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Payout.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.&lt;/p&gt;
    # @param payout [String]
    # @return nil
    def post_payouts_payout(*, payout : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payouts_payout(payout: payout, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout(*, payout : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payouts_payout ..." }
      end
      if @api_client.config.client_side_validation && payout.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payout\" when calling DefaultApi.post_payouts_payout, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payouts_payout",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p>
    # @param payout [String]
    # @return [Payout]
    def post_payouts_payout_cancel(*, payout : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_payouts_payout_cancel_with_http_info(payout: payout, expand: expand)
      data
    end

    # &lt;p&gt;A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.&lt;/p&gt;
    # @param payout [String]
    # @return [Array<(Payout, Integer, Hash)>] Payout data, response status code and response headers
    def post_payouts_payout_cancel_with_http_info(*, payout : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_payouts_payout_cancel(payout: payout, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payouts_payout_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Payout.from_json(data), status_code, headers
    end

    # &lt;p&gt;A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.&lt;/p&gt;
    # @param payout [String]
    # @return nil
    def post_payouts_payout_cancel(*, payout : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payouts_payout_cancel(payout: payout, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout_cancel(*, payout : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payouts_payout_cancel ..." }
      end
      if @api_client.config.client_side_validation && payout.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payout\" when calling DefaultApi.post_payouts_payout_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}/cancel".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payouts_payout_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the <code>pending</code> status, <code>/v1/payouts/:id/cancel</code> should be used instead.</p>  <p>By requesting a reversal via <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.</p>
    # @param payout [String]
    # @return [Payout]
    def post_payouts_payout_reverse(*, payout : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_payouts_payout_reverse_with_http_info(payout: payout, expand: expand)
      data
    end

    # &lt;p&gt;Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the &lt;code&gt;pending&lt;/code&gt; status, &lt;code&gt;/v1/payouts/:id/cancel&lt;/code&gt; should be used instead.&lt;/p&gt;  &lt;p&gt;By requesting a reversal via &lt;code&gt;/v1/payouts/:id/reverse&lt;/code&gt;, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.&lt;/p&gt;
    # @param payout [String]
    # @return [Array<(Payout, Integer, Hash)>] Payout data, response status code and response headers
    def post_payouts_payout_reverse_with_http_info(*, payout : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_payouts_payout_reverse(payout: payout, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_payouts_payout_reverse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Payout.from_json(data), status_code, headers
    end

    # &lt;p&gt;Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the &lt;code&gt;pending&lt;/code&gt; status, &lt;code&gt;/v1/payouts/:id/cancel&lt;/code&gt; should be used instead.&lt;/p&gt;  &lt;p&gt;By requesting a reversal via &lt;code&gt;/v1/payouts/:id/reverse&lt;/code&gt;, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.&lt;/p&gt;
    # @param payout [String]
    # @return nil
    def post_payouts_payout_reverse(*, payout : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_payouts_payout_reverse(payout: payout, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payouts_payout_reverse(*, payout : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_payouts_payout_reverse ..." }
      end
      if @api_client.config.client_side_validation && payout.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payout\" when calling DefaultApi.post_payouts_payout_reverse, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/payouts/{payout}/reverse".sub("{" + "payout" + "}", URI.encode_path(payout.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_payouts_payout_reverse",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can now model subscriptions more flexibly using the <a href=\"#prices\">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param interval [String] Specifies billing frequency. Either `day`, `week`, `month` or `year`.
    # @return [Plan]
    def post_plans(*, currency : String, interval : String, active : Bool? = nil, aggregate_usage : String? = nil, amount : Int64? = nil, amount_decimal : String? = nil, billing_scheme : String? = nil, expand : Array(String)? = nil, id : String? = nil, interval_count : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, product : PostPlansRequestProduct? = nil, tiers : Array(Tier)? = nil, tiers_mode : String? = nil, transform_usage : TransformUsageParam? = nil, trial_period_days : Int64? = nil, usage_type : String? = nil)
      data, _status_code, _headers = post_plans_with_http_info(currency: currency, interval: interval, active: active, aggregate_usage: aggregate_usage, amount: amount, amount_decimal: amount_decimal, billing_scheme: billing_scheme, expand: expand, id: id, interval_count: interval_count, metadata: metadata, nickname: nickname, product: product, tiers: tiers, tiers_mode: tiers_mode, transform_usage: transform_usage, trial_period_days: trial_period_days, usage_type: usage_type)
      data
    end

    # &lt;p&gt;You can now model subscriptions more flexibly using the &lt;a href&#x3D;\&quot;#prices\&quot;&gt;Prices API&lt;/a&gt;. It replaces the Plans API and is backwards compatible to simplify your migration.&lt;/p&gt;
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param interval [String] Specifies billing frequency. Either `day`, `week`, `month` or `year`.
    # @return [Array<(Plan, Integer, Hash)>] Plan data, response status code and response headers
    def post_plans_with_http_info(*, currency : String, interval : String, active : Bool? = nil, aggregate_usage : String? = nil, amount : Int64? = nil, amount_decimal : String? = nil, billing_scheme : String? = nil, expand : Array(String)? = nil, id : String? = nil, interval_count : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, product : PostPlansRequestProduct? = nil, tiers : Array(Tier)? = nil, tiers_mode : String? = nil, transform_usage : TransformUsageParam? = nil, trial_period_days : Int64? = nil, usage_type : String? = nil)
      request = build_api_request_for_post_plans(currency: currency, interval: interval, active: active, aggregate_usage: aggregate_usage, amount: amount, amount_decimal: amount_decimal, billing_scheme: billing_scheme, expand: expand, id: id, interval_count: interval_count, metadata: metadata, nickname: nickname, product: product, tiers: tiers, tiers_mode: tiers_mode, transform_usage: transform_usage, trial_period_days: trial_period_days, usage_type: usage_type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Plan.from_json(data), status_code, headers
    end

    # &lt;p&gt;You can now model subscriptions more flexibly using the &lt;a href&#x3D;\&quot;#prices\&quot;&gt;Prices API&lt;/a&gt;. It replaces the Plans API and is backwards compatible to simplify your migration.&lt;/p&gt;
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param interval [String] Specifies billing frequency. Either `day`, `week`, `month` or `year`.
    # @return nil
    def post_plans(*, currency : String, interval : String, active : Bool? = nil, aggregate_usage : String? = nil, amount : Int64? = nil, amount_decimal : String? = nil, billing_scheme : String? = nil, expand : Array(String)? = nil, id : String? = nil, interval_count : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, product : PostPlansRequestProduct? = nil, tiers : Array(Tier)? = nil, tiers_mode : String? = nil, transform_usage : TransformUsageParam? = nil, trial_period_days : Int64? = nil, usage_type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_plans(currency: currency, interval: interval, active: active, aggregate_usage: aggregate_usage, amount: amount, amount_decimal: amount_decimal, billing_scheme: billing_scheme, expand: expand, id: id, interval_count: interval_count, metadata: metadata, nickname: nickname, product: product, tiers: tiers, tiers_mode: tiers_mode, transform_usage: transform_usage, trial_period_days: trial_period_days, usage_type: usage_type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_plans(*, currency : String, interval : String, active : Bool? = nil, aggregate_usage : String? = nil, amount : Int64? = nil, amount_decimal : String? = nil, billing_scheme : String? = nil, expand : Array(String)? = nil, id : String? = nil, interval_count : Int64? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, product : PostPlansRequestProduct? = nil, tiers : Array(Tier)? = nil, tiers_mode : String? = nil, transform_usage : TransformUsageParam? = nil, trial_period_days : Int64? = nil, usage_type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_plans ..." }
      end
      allowable_values = ["day", "month", "week", "year"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(interval)
        raise ArgumentError.new("invalid value for \"interval\", must be one of #{allowable_values}")
      end
      allowable_values = ["last_during_period", "last_ever", "max", "sum"]
      if @api_client.config.client_side_validation && !aggregate_usage.nil? && !allowable_values.includes?(aggregate_usage)
        raise ArgumentError.new("invalid value for \"aggregate_usage\", must be one of #{allowable_values}")
      end
      allowable_values = ["per_unit", "tiered"]
      if @api_client.config.client_side_validation && !billing_scheme.nil? && !allowable_values.includes?(billing_scheme)
        raise ArgumentError.new("invalid value for \"billing_scheme\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !id.nil? && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_plans, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nickname.nil? && nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\" when calling DefaultApi.post_plans, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["graduated", "volume"]
      if @api_client.config.client_side_validation && !tiers_mode.nil? && !allowable_values.includes?(tiers_mode)
        raise ArgumentError.new("invalid value for \"tiers_mode\", must be one of #{allowable_values}")
      end
      allowable_values = ["licensed", "metered"]
      if @api_client.config.client_side_validation && !usage_type.nil? && !allowable_values.includes?(usage_type)
        raise ArgumentError.new("invalid value for \"usage_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/plans"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["aggregate_usage"] = aggregate_usage.to_s if !aggregate_usage.nil?
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["amount_decimal"] = amount_decimal.to_s if !amount_decimal.nil?
      form_params["billing_scheme"] = billing_scheme.to_s if !billing_scheme.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["id"] = id.to_s if !id.nil?
      form_params["interval"] = interval.to_s if !interval.nil?
      form_params["interval_count"] = interval_count.to_s if !interval_count.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nickname"] = nickname.to_s if !nickname.nil?
      form_params["product"] = product.to_s if !product.nil?
      form_params["tiers"] = @api_client.build_collection_param(tiers, "csv") if !tiers.nil? && !tiers.empty?
      form_params["tiers_mode"] = tiers_mode.to_s if !tiers_mode.nil?
      form_params["transform_usage"] = transform_usage.to_s if !transform_usage.nil?
      form_params["trial_period_days"] = trial_period_days.to_s if !trial_period_days.nil?
      form_params["usage_type"] = usage_type.to_s if !usage_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_plans",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
    # @param plan [String]
    # @return [Plan]
    def post_plans_plan(*, plan : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, product : String? = nil, trial_period_days : Int64? = nil)
      data, _status_code, _headers = post_plans_plan_with_http_info(plan: plan, active: active, expand: expand, metadata: metadata, nickname: nickname, product: product, trial_period_days: trial_period_days)
      data
    end

    # &lt;p&gt;Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.&lt;/p&gt;
    # @param plan [String]
    # @return [Array<(Plan, Integer, Hash)>] Plan data, response status code and response headers
    def post_plans_plan_with_http_info(*, plan : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, product : String? = nil, trial_period_days : Int64? = nil)
      request = build_api_request_for_post_plans_plan(plan: plan, active: active, expand: expand, metadata: metadata, nickname: nickname, product: product, trial_period_days: trial_period_days)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_plans_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Plan.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.&lt;/p&gt;
    # @param plan [String]
    # @return nil
    def post_plans_plan(*, plan : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, product : String? = nil, trial_period_days : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_post_plans_plan(plan: plan, active: active, expand: expand, metadata: metadata, nickname: nickname, product: product, trial_period_days: trial_period_days).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_plans_plan(*, plan : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, product : String? = nil, trial_period_days : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_plans_plan ..." }
      end
      if @api_client.config.client_side_validation && plan.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"plan\" when calling DefaultApi.post_plans_plan, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !nickname.nil? && nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\" when calling DefaultApi.post_plans_plan, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !product.nil? && product.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product\" when calling DefaultApi.post_plans_plan, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/plans/{plan}".sub("{" + "plan" + "}", URI.encode_path(plan.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nickname"] = nickname.to_s if !nickname.nil?
      form_params["product"] = product.to_s if !product.nil?
      form_params["trial_period_days"] = trial_period_days.to_s if !trial_period_days.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_plans_plan",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return [Price]
    def post_prices(*, currency : String, active : Bool? = nil, billing_scheme : String? = nil, expand : Array(String)? = nil, lookup_key : String? = nil, nickname : String? = nil, product : String? = nil, product_data : InlineProductParams1? = nil, recurring : Recurring1? = nil, tax_behavior : String? = nil, tiers : Array(Tier)? = nil, tiers_mode : String? = nil, transfer_lookup_key : Bool? = nil, transform_quantity : TransformUsageParam? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil)
      data, _status_code, _headers = post_prices_with_http_info(currency: currency, active: active, billing_scheme: billing_scheme, expand: expand, lookup_key: lookup_key, nickname: nickname, product: product, product_data: product_data, recurring: recurring, tax_behavior: tax_behavior, tiers: tiers, tiers_mode: tiers_mode, transfer_lookup_key: transfer_lookup_key, transform_quantity: transform_quantity, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal)
      data
    end

    # &lt;p&gt;Creates a new price for an existing product. The price can be recurring or one-time.&lt;/p&gt;
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return [Array<(Price, Integer, Hash)>] Price data, response status code and response headers
    def post_prices_with_http_info(*, currency : String, active : Bool? = nil, billing_scheme : String? = nil, expand : Array(String)? = nil, lookup_key : String? = nil, nickname : String? = nil, product : String? = nil, product_data : InlineProductParams1? = nil, recurring : Recurring1? = nil, tax_behavior : String? = nil, tiers : Array(Tier)? = nil, tiers_mode : String? = nil, transfer_lookup_key : Bool? = nil, transform_quantity : TransformUsageParam? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil)
      request = build_api_request_for_post_prices(currency: currency, active: active, billing_scheme: billing_scheme, expand: expand, lookup_key: lookup_key, nickname: nickname, product: product, product_data: product_data, recurring: recurring, tax_behavior: tax_behavior, tiers: tiers, tiers_mode: tiers_mode, transfer_lookup_key: transfer_lookup_key, transform_quantity: transform_quantity, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Price.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new price for an existing product. The price can be recurring or one-time.&lt;/p&gt;
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return nil
    def post_prices(*, currency : String, active : Bool? = nil, billing_scheme : String? = nil, expand : Array(String)? = nil, lookup_key : String? = nil, nickname : String? = nil, product : String? = nil, product_data : InlineProductParams1? = nil, recurring : Recurring1? = nil, tax_behavior : String? = nil, tiers : Array(Tier)? = nil, tiers_mode : String? = nil, transfer_lookup_key : Bool? = nil, transform_quantity : TransformUsageParam? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_prices(currency: currency, active: active, billing_scheme: billing_scheme, expand: expand, lookup_key: lookup_key, nickname: nickname, product: product, product_data: product_data, recurring: recurring, tax_behavior: tax_behavior, tiers: tiers, tiers_mode: tiers_mode, transfer_lookup_key: transfer_lookup_key, transform_quantity: transform_quantity, unit_amount: unit_amount, unit_amount_decimal: unit_amount_decimal).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_prices(*, currency : String, active : Bool? = nil, billing_scheme : String? = nil, expand : Array(String)? = nil, lookup_key : String? = nil, nickname : String? = nil, product : String? = nil, product_data : InlineProductParams1? = nil, recurring : Recurring1? = nil, tax_behavior : String? = nil, tiers : Array(Tier)? = nil, tiers_mode : String? = nil, transfer_lookup_key : Bool? = nil, transform_quantity : TransformUsageParam? = nil, unit_amount : Int64? = nil, unit_amount_decimal : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_prices ..." }
      end
      allowable_values = ["per_unit", "tiered"]
      if @api_client.config.client_side_validation && !billing_scheme.nil? && !allowable_values.includes?(billing_scheme)
        raise ArgumentError.new("invalid value for \"billing_scheme\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !lookup_key.nil? && lookup_key.to_s.size > 200
        raise ArgumentError.new("invalid value for \"lookup_key\" when calling DefaultApi.post_prices, the character length must be smaller than or equal to 200.")
      end

      if @api_client.config.client_side_validation && !nickname.nil? && nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\" when calling DefaultApi.post_prices, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !product.nil? && product.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product\" when calling DefaultApi.post_prices, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["exclusive", "inclusive", "unspecified"]
      if @api_client.config.client_side_validation && !tax_behavior.nil? && !allowable_values.includes?(tax_behavior)
        raise ArgumentError.new("invalid value for \"tax_behavior\", must be one of #{allowable_values}")
      end
      allowable_values = ["graduated", "volume"]
      if @api_client.config.client_side_validation && !tiers_mode.nil? && !allowable_values.includes?(tiers_mode)
        raise ArgumentError.new("invalid value for \"tiers_mode\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/prices"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["billing_scheme"] = billing_scheme.to_s if !billing_scheme.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["lookup_key"] = lookup_key.to_s if !lookup_key.nil?
      form_params["nickname"] = nickname.to_s if !nickname.nil?
      form_params["product"] = product.to_s if !product.nil?
      form_params["product_data"] = product_data.to_s if !product_data.nil?
      form_params["recurring"] = recurring.to_s if !recurring.nil?
      form_params["tax_behavior"] = tax_behavior.to_s if !tax_behavior.nil?
      form_params["tiers"] = @api_client.build_collection_param(tiers, "csv") if !tiers.nil? && !tiers.empty?
      form_params["tiers_mode"] = tiers_mode.to_s if !tiers_mode.nil?
      form_params["transfer_lookup_key"] = transfer_lookup_key.to_s if !transfer_lookup_key.nil?
      form_params["transform_quantity"] = transform_quantity.to_s if !transform_quantity.nil?
      form_params["unit_amount"] = unit_amount.to_s if !unit_amount.nil?
      form_params["unit_amount_decimal"] = unit_amount_decimal.to_s if !unit_amount_decimal.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_prices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
    # @param price [String]
    # @return [Price]
    def post_prices_price(*, price : String, active : Bool? = nil, expand : Array(String)? = nil, lookup_key : String? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, tax_behavior : String? = nil, transfer_lookup_key : Bool? = nil)
      data, _status_code, _headers = post_prices_price_with_http_info(price: price, active: active, expand: expand, lookup_key: lookup_key, metadata: metadata, nickname: nickname, tax_behavior: tax_behavior, transfer_lookup_key: transfer_lookup_key)
      data
    end

    # &lt;p&gt;Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.&lt;/p&gt;
    # @param price [String]
    # @return [Array<(Price, Integer, Hash)>] Price data, response status code and response headers
    def post_prices_price_with_http_info(*, price : String, active : Bool? = nil, expand : Array(String)? = nil, lookup_key : String? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, tax_behavior : String? = nil, transfer_lookup_key : Bool? = nil)
      request = build_api_request_for_post_prices_price(price: price, active: active, expand: expand, lookup_key: lookup_key, metadata: metadata, nickname: nickname, tax_behavior: tax_behavior, transfer_lookup_key: transfer_lookup_key)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_prices_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Price.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.&lt;/p&gt;
    # @param price [String]
    # @return nil
    def post_prices_price(*, price : String, active : Bool? = nil, expand : Array(String)? = nil, lookup_key : String? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, tax_behavior : String? = nil, transfer_lookup_key : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_prices_price(price: price, active: active, expand: expand, lookup_key: lookup_key, metadata: metadata, nickname: nickname, tax_behavior: tax_behavior, transfer_lookup_key: transfer_lookup_key).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_prices_price(*, price : String, active : Bool? = nil, expand : Array(String)? = nil, lookup_key : String? = nil, metadata : PostAccountRequestMetadata? = nil, nickname : String? = nil, tax_behavior : String? = nil, transfer_lookup_key : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_prices_price ..." }
      end
      if @api_client.config.client_side_validation && price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\" when calling DefaultApi.post_prices_price, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !lookup_key.nil? && lookup_key.to_s.size > 200
        raise ArgumentError.new("invalid value for \"lookup_key\" when calling DefaultApi.post_prices_price, the character length must be smaller than or equal to 200.")
      end

      if @api_client.config.client_side_validation && !nickname.nil? && nickname.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"nickname\" when calling DefaultApi.post_prices_price, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["exclusive", "inclusive", "unspecified"]
      if @api_client.config.client_side_validation && !tax_behavior.nil? && !allowable_values.includes?(tax_behavior)
        raise ArgumentError.new("invalid value for \"tax_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/prices/{price}".sub("{" + "price" + "}", URI.encode_path(price.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["lookup_key"] = lookup_key.to_s if !lookup_key.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["nickname"] = nickname.to_s if !nickname.nil?
      form_params["tax_behavior"] = tax_behavior.to_s if !tax_behavior.nil?
      form_params["transfer_lookup_key"] = transfer_lookup_key.to_s if !transfer_lookup_key.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_prices_price",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new product object.</p>
    # @param name [String] The product's name, meant to be displayable to the customer.
    # @return [Product]
    def post_products(*, name : String, active : Bool? = nil, default_price_data : PriceDataWithoutProduct? = nil, description : String? = nil, expand : Array(String)? = nil, id : String? = nil, images : Array(String)? = nil, package_dimensions : PackageDimensionsSpecs? = nil, shippable : Bool? = nil, statement_descriptor : String? = nil, tax_code : String? = nil, unit_label : String? = nil, url : String? = nil)
      data, _status_code, _headers = post_products_with_http_info(name: name, active: active, default_price_data: default_price_data, description: description, expand: expand, id: id, images: images, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url)
      data
    end

    # &lt;p&gt;Creates a new product object.&lt;/p&gt;
    # @param name [String] The product's name, meant to be displayable to the customer.
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def post_products_with_http_info(*, name : String, active : Bool? = nil, default_price_data : PriceDataWithoutProduct? = nil, description : String? = nil, expand : Array(String)? = nil, id : String? = nil, images : Array(String)? = nil, package_dimensions : PackageDimensionsSpecs? = nil, shippable : Bool? = nil, statement_descriptor : String? = nil, tax_code : String? = nil, unit_label : String? = nil, url : String? = nil)
      request = build_api_request_for_post_products(name: name, active: active, default_price_data: default_price_data, description: description, expand: expand, id: id, images: images, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Product.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new product object.&lt;/p&gt;
    # @param name [String] The product's name, meant to be displayable to the customer.
    # @return nil
    def post_products(*, name : String, active : Bool? = nil, default_price_data : PriceDataWithoutProduct? = nil, description : String? = nil, expand : Array(String)? = nil, id : String? = nil, images : Array(String)? = nil, package_dimensions : PackageDimensionsSpecs? = nil, shippable : Bool? = nil, statement_descriptor : String? = nil, tax_code : String? = nil, unit_label : String? = nil, url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_products(name: name, active: active, default_price_data: default_price_data, description: description, expand: expand, id: id, images: images, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_products(*, name : String, active : Bool? = nil, default_price_data : PriceDataWithoutProduct? = nil, description : String? = nil, expand : Array(String)? = nil, id : String? = nil, images : Array(String)? = nil, package_dimensions : PackageDimensionsSpecs? = nil, shippable : Bool? = nil, statement_descriptor : String? = nil, tax_code : String? = nil, unit_label : String? = nil, url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_products ..." }
      end
      if @api_client.config.client_side_validation && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_products, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_products, the character length must be smaller than or equal to 40000.")
      end

      if @api_client.config.client_side_validation && !id.nil? && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_products, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_products, the character length must be smaller than or equal to 22.")
      end

      if @api_client.config.client_side_validation && !unit_label.nil? && unit_label.to_s.size > 12
        raise ArgumentError.new("invalid value for \"unit_label\" when calling DefaultApi.post_products, the character length must be smaller than or equal to 12.")
      end

      if @api_client.config.client_side_validation && !url.nil? && url.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"url\" when calling DefaultApi.post_products, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/products"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["default_price_data"] = default_price_data.to_s if !default_price_data.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["id"] = id.to_s if !id.nil?
      form_params["images"] = @api_client.build_collection_param(images, "csv") if !images.nil? && !images.empty?
      form_params["name"] = name.to_s if !name.nil?
      form_params["package_dimensions"] = package_dimensions.to_s if !package_dimensions.nil?
      form_params["shippable"] = shippable.to_s if !shippable.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["tax_code"] = tax_code.to_s if !tax_code.nil?
      form_params["unit_label"] = unit_label.to_s if !unit_label.nil?
      form_params["url"] = url.to_s if !url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_products",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param id [String]
    # @return [Product]
    def post_products_id(*, id : String, active : Bool? = nil, default_price : String? = nil, description : String? = nil, expand : Array(String)? = nil, images : PostProductsIdRequestImages? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, package_dimensions : PostProductsIdRequestPackageDimensions? = nil, shippable : Bool? = nil, statement_descriptor : String? = nil, tax_code : PostProductsIdRequestTaxCode? = nil, unit_label : String? = nil, url : PostProductsIdRequestUrl? = nil)
      data, _status_code, _headers = post_products_id_with_http_info(id: id, active: active, default_price: default_price, description: description, expand: expand, images: images, metadata: metadata, name: name, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url)
      data
    end

    # &lt;p&gt;Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Product, Integer, Hash)>] Product data, response status code and response headers
    def post_products_id_with_http_info(*, id : String, active : Bool? = nil, default_price : String? = nil, description : String? = nil, expand : Array(String)? = nil, images : PostProductsIdRequestImages? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, package_dimensions : PostProductsIdRequestPackageDimensions? = nil, shippable : Bool? = nil, statement_descriptor : String? = nil, tax_code : PostProductsIdRequestTaxCode? = nil, unit_label : String? = nil, url : PostProductsIdRequestUrl? = nil)
      request = build_api_request_for_post_products_id(id: id, active: active, default_price: default_price, description: description, expand: expand, images: images, metadata: metadata, name: name, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_products_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Product.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_products_id(*, id : String, active : Bool? = nil, default_price : String? = nil, description : String? = nil, expand : Array(String)? = nil, images : PostProductsIdRequestImages? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, package_dimensions : PostProductsIdRequestPackageDimensions? = nil, shippable : Bool? = nil, statement_descriptor : String? = nil, tax_code : PostProductsIdRequestTaxCode? = nil, unit_label : String? = nil, url : PostProductsIdRequestUrl? = nil, &block : Crest::Response ->)
      build_api_request_for_post_products_id(id: id, active: active, default_price: default_price, description: description, expand: expand, images: images, metadata: metadata, name: name, package_dimensions: package_dimensions, shippable: shippable, statement_descriptor: statement_descriptor, tax_code: tax_code, unit_label: unit_label, url: url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_products_id(*, id : String, active : Bool? = nil, default_price : String? = nil, description : String? = nil, expand : Array(String)? = nil, images : PostProductsIdRequestImages? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, package_dimensions : PostProductsIdRequestPackageDimensions? = nil, shippable : Bool? = nil, statement_descriptor : String? = nil, tax_code : PostProductsIdRequestTaxCode? = nil, unit_label : String? = nil, url : PostProductsIdRequestUrl? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_products_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_products_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_price.nil? && default_price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_price\" when calling DefaultApi.post_products_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 40000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_products_id, the character length must be smaller than or equal to 40000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_products_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 22
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_products_id, the character length must be smaller than or equal to 22.")
      end

      if @api_client.config.client_side_validation && !unit_label.nil? && unit_label.to_s.size > 12
        raise ArgumentError.new("invalid value for \"unit_label\" when calling DefaultApi.post_products_id, the character length must be smaller than or equal to 12.")
      end

      # resource path
      local_var_path = "/v1/products/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["default_price"] = default_price.to_s if !default_price.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["images"] = images.to_s if !images.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["package_dimensions"] = package_dimensions.to_s if !package_dimensions.nil?
      form_params["shippable"] = shippable.to_s if !shippable.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["tax_code"] = tax_code.to_s if !tax_code.nil?
      form_params["unit_label"] = unit_label.to_s if !unit_label.nil?
      form_params["url"] = url.to_s if !url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_products_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
    # @param coupon [String] The coupon for this promotion code.
    # @return [PromotionCode]
    def post_promotion_codes(*, coupon : String, active : Bool? = nil, code : String? = nil, customer : String? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, max_redemptions : Int64? = nil, restrictions : RestrictionsParams? = nil)
      data, _status_code, _headers = post_promotion_codes_with_http_info(coupon: coupon, active: active, code: code, customer: customer, expand: expand, expires_at: expires_at, max_redemptions: max_redemptions, restrictions: restrictions)
      data
    end

    # &lt;p&gt;A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.&lt;/p&gt;
    # @param coupon [String] The coupon for this promotion code.
    # @return [Array<(PromotionCode, Integer, Hash)>] PromotionCode data, response status code and response headers
    def post_promotion_codes_with_http_info(*, coupon : String, active : Bool? = nil, code : String? = nil, customer : String? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, max_redemptions : Int64? = nil, restrictions : RestrictionsParams? = nil)
      request = build_api_request_for_post_promotion_codes(coupon: coupon, active: active, code: code, customer: customer, expand: expand, expires_at: expires_at, max_redemptions: max_redemptions, restrictions: restrictions)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_promotion_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PromotionCode.from_json(data), status_code, headers
    end

    # &lt;p&gt;A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.&lt;/p&gt;
    # @param coupon [String] The coupon for this promotion code.
    # @return nil
    def post_promotion_codes(*, coupon : String, active : Bool? = nil, code : String? = nil, customer : String? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, max_redemptions : Int64? = nil, restrictions : RestrictionsParams? = nil, &block : Crest::Response ->)
      build_api_request_for_post_promotion_codes(coupon: coupon, active: active, code: code, customer: customer, expand: expand, expires_at: expires_at, max_redemptions: max_redemptions, restrictions: restrictions).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_promotion_codes(*, coupon : String, active : Bool? = nil, code : String? = nil, customer : String? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, max_redemptions : Int64? = nil, restrictions : RestrictionsParams? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_promotion_codes ..." }
      end
      if @api_client.config.client_side_validation && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.post_promotion_codes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !code.nil? && code.to_s.size > 500
        raise ArgumentError.new("invalid value for \"code\" when calling DefaultApi.post_promotion_codes, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_promotion_codes, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/promotion_codes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["code"] = code.to_s if !code.nil?
      form_params["coupon"] = coupon.to_s if !coupon.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expires_at"] = expires_at.to_s if !expires_at.nil?
      form_params["max_redemptions"] = max_redemptions.to_s if !max_redemptions.nil?
      form_params["restrictions"] = restrictions.to_s if !restrictions.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_promotion_codes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
    # @param promotion_code [String]
    # @return [PromotionCode]
    def post_promotion_codes_promotion_code(*, promotion_code : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_promotion_codes_promotion_code_with_http_info(promotion_code: promotion_code, active: active, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.&lt;/p&gt;
    # @param promotion_code [String]
    # @return [Array<(PromotionCode, Integer, Hash)>] PromotionCode data, response status code and response headers
    def post_promotion_codes_promotion_code_with_http_info(*, promotion_code : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_promotion_codes_promotion_code(promotion_code: promotion_code, active: active, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_promotion_codes_promotion_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return PromotionCode.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.&lt;/p&gt;
    # @param promotion_code [String]
    # @return nil
    def post_promotion_codes_promotion_code(*, promotion_code : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_promotion_codes_promotion_code(promotion_code: promotion_code, active: active, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_promotion_codes_promotion_code(*, promotion_code : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_promotion_codes_promotion_code ..." }
      end
      if @api_client.config.client_side_validation && promotion_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"promotion_code\" when calling DefaultApi.post_promotion_codes_promotion_code, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/promotion_codes/{promotion_code}".sub("{" + "promotion_code" + "}", URI.encode_path(promotion_code.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_promotion_codes_promotion_code",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href=\"https://dashboard.stripe.com/settings/billing/quote\">quote template</a>.</p>
    # @return [Quote]
    def post_quotes(*, application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil, application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil, automatic_tax : AutomaticTaxParam2? = nil, collection_method : String? = nil, customer : String? = nil, default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostQuotesRequestDiscounts? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, footer : String? = nil, from_quote : FromQuoteParams? = nil, header : String? = nil, invoice_settings : QuoteParam? = nil, line_items : Array(LineItemCreateParams)? = nil, on_behalf_of : PostQuotesRequestOnBehalfOf? = nil, subscription_data : SubscriptionDataCreateParams? = nil, test_clock : String? = nil, transfer_data : PostQuotesRequestTransferData? = nil)
      data, _status_code, _headers = post_quotes_with_http_info(application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, from_quote: from_quote, header: header, invoice_settings: invoice_settings, line_items: line_items, on_behalf_of: on_behalf_of, subscription_data: subscription_data, test_clock: test_clock, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;A quote models prices and services for a customer. Default options for &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;expires_at&lt;/code&gt; can be set in the dashboard via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/settings/billing/quote\&quot;&gt;quote template&lt;/a&gt;.&lt;/p&gt;
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def post_quotes_with_http_info(*, application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil, application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil, automatic_tax : AutomaticTaxParam2? = nil, collection_method : String? = nil, customer : String? = nil, default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostQuotesRequestDiscounts? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, footer : String? = nil, from_quote : FromQuoteParams? = nil, header : String? = nil, invoice_settings : QuoteParam? = nil, line_items : Array(LineItemCreateParams)? = nil, on_behalf_of : PostQuotesRequestOnBehalfOf? = nil, subscription_data : SubscriptionDataCreateParams? = nil, test_clock : String? = nil, transfer_data : PostQuotesRequestTransferData? = nil)
      request = build_api_request_for_post_quotes(application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, from_quote: from_quote, header: header, invoice_settings: invoice_settings, line_items: line_items, on_behalf_of: on_behalf_of, subscription_data: subscription_data, test_clock: test_clock, transfer_data: transfer_data)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_quotes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Quote.from_json(data), status_code, headers
    end

    # &lt;p&gt;A quote models prices and services for a customer. Default options for &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;expires_at&lt;/code&gt; can be set in the dashboard via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/settings/billing/quote\&quot;&gt;quote template&lt;/a&gt;.&lt;/p&gt;
    # @return nil
    def post_quotes(*, application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil, application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil, automatic_tax : AutomaticTaxParam2? = nil, collection_method : String? = nil, customer : String? = nil, default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostQuotesRequestDiscounts? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, footer : String? = nil, from_quote : FromQuoteParams? = nil, header : String? = nil, invoice_settings : QuoteParam? = nil, line_items : Array(LineItemCreateParams)? = nil, on_behalf_of : PostQuotesRequestOnBehalfOf? = nil, subscription_data : SubscriptionDataCreateParams? = nil, test_clock : String? = nil, transfer_data : PostQuotesRequestTransferData? = nil, &block : Crest::Response ->)
      build_api_request_for_post_quotes(application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, from_quote: from_quote, header: header, invoice_settings: invoice_settings, line_items: line_items, on_behalf_of: on_behalf_of, subscription_data: subscription_data, test_clock: test_clock, transfer_data: transfer_data).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_quotes(*, application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil, application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil, automatic_tax : AutomaticTaxParam2? = nil, collection_method : String? = nil, customer : String? = nil, default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostQuotesRequestDiscounts? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, footer : String? = nil, from_quote : FromQuoteParams? = nil, header : String? = nil, invoice_settings : QuoteParam? = nil, line_items : Array(LineItemCreateParams)? = nil, on_behalf_of : PostQuotesRequestOnBehalfOf? = nil, subscription_data : SubscriptionDataCreateParams? = nil, test_clock : String? = nil, transfer_data : PostQuotesRequestTransferData? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_quotes ..." }
      end
      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_quotes, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 500
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_quotes, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !footer.nil? && footer.to_s.size > 500
        raise ArgumentError.new("invalid value for \"footer\" when calling DefaultApi.post_quotes, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !header.nil? && header.to_s.size > 50
        raise ArgumentError.new("invalid value for \"header\" when calling DefaultApi.post_quotes, the character length must be smaller than or equal to 50.")
      end

      if @api_client.config.client_side_validation && !test_clock.nil? && test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\" when calling DefaultApi.post_quotes, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["application_fee_percent"] = application_fee_percent.to_s if !application_fee_percent.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["default_tax_rates"] = default_tax_rates.to_s if !default_tax_rates.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["discounts"] = discounts.to_s if !discounts.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expires_at"] = expires_at.to_s if !expires_at.nil?
      form_params["footer"] = footer.to_s if !footer.nil?
      form_params["from_quote"] = from_quote.to_s if !from_quote.nil?
      form_params["header"] = header.to_s if !header.nil?
      form_params["invoice_settings"] = invoice_settings.to_s if !invoice_settings.nil?
      form_params["line_items"] = @api_client.build_collection_param(line_items, "csv") if !line_items.nil? && !line_items.empty?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["subscription_data"] = subscription_data.to_s if !subscription_data.nil?
      form_params["test_clock"] = test_clock.to_s if !test_clock.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_quotes",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A quote models prices and services for a customer.</p>
    # @param quote [String]
    # @return [Quote]
    def post_quotes_quote(*, quote : String, application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil, application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil, automatic_tax : AutomaticTaxParam2? = nil, collection_method : String? = nil, customer : String? = nil, default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostQuotesRequestDiscounts? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, footer : String? = nil, header : String? = nil, invoice_settings : QuoteParam? = nil, line_items : Array(LineItemUpdateParams)? = nil, on_behalf_of : PostQuotesRequestOnBehalfOf? = nil, subscription_data : SubscriptionDataUpdateParams? = nil, transfer_data : PostQuotesRequestTransferData? = nil)
      data, _status_code, _headers = post_quotes_quote_with_http_info(quote: quote, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, header: header, invoice_settings: invoice_settings, line_items: line_items, on_behalf_of: on_behalf_of, subscription_data: subscription_data, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;A quote models prices and services for a customer.&lt;/p&gt;
    # @param quote [String]
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def post_quotes_quote_with_http_info(*, quote : String, application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil, application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil, automatic_tax : AutomaticTaxParam2? = nil, collection_method : String? = nil, customer : String? = nil, default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostQuotesRequestDiscounts? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, footer : String? = nil, header : String? = nil, invoice_settings : QuoteParam? = nil, line_items : Array(LineItemUpdateParams)? = nil, on_behalf_of : PostQuotesRequestOnBehalfOf? = nil, subscription_data : SubscriptionDataUpdateParams? = nil, transfer_data : PostQuotesRequestTransferData? = nil)
      request = build_api_request_for_post_quotes_quote(quote: quote, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, header: header, invoice_settings: invoice_settings, line_items: line_items, on_behalf_of: on_behalf_of, subscription_data: subscription_data, transfer_data: transfer_data)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_quotes_quote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Quote.from_json(data), status_code, headers
    end

    # &lt;p&gt;A quote models prices and services for a customer.&lt;/p&gt;
    # @param quote [String]
    # @return nil
    def post_quotes_quote(*, quote : String, application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil, application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil, automatic_tax : AutomaticTaxParam2? = nil, collection_method : String? = nil, customer : String? = nil, default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostQuotesRequestDiscounts? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, footer : String? = nil, header : String? = nil, invoice_settings : QuoteParam? = nil, line_items : Array(LineItemUpdateParams)? = nil, on_behalf_of : PostQuotesRequestOnBehalfOf? = nil, subscription_data : SubscriptionDataUpdateParams? = nil, transfer_data : PostQuotesRequestTransferData? = nil, &block : Crest::Response ->)
      build_api_request_for_post_quotes_quote(quote: quote, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, collection_method: collection_method, customer: customer, default_tax_rates: default_tax_rates, description: description, discounts: discounts, expand: expand, expires_at: expires_at, footer: footer, header: header, invoice_settings: invoice_settings, line_items: line_items, on_behalf_of: on_behalf_of, subscription_data: subscription_data, transfer_data: transfer_data).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_quotes_quote(*, quote : String, application_fee_amount : PostQuotesRequestApplicationFeeAmount? = nil, application_fee_percent : PostQuotesRequestApplicationFeePercent? = nil, automatic_tax : AutomaticTaxParam2? = nil, collection_method : String? = nil, customer : String? = nil, default_tax_rates : PostQuotesRequestDefaultTaxRates? = nil, description : String? = nil, discounts : PostQuotesRequestDiscounts? = nil, expand : Array(String)? = nil, expires_at : Int64? = nil, footer : String? = nil, header : String? = nil, invoice_settings : QuoteParam? = nil, line_items : Array(LineItemUpdateParams)? = nil, on_behalf_of : PostQuotesRequestOnBehalfOf? = nil, subscription_data : SubscriptionDataUpdateParams? = nil, transfer_data : PostQuotesRequestTransferData? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_quotes_quote ..." }
      end
      if @api_client.config.client_side_validation && quote.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"quote\" when calling DefaultApi.post_quotes_quote, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_quotes_quote, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 500
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_quotes_quote, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !footer.nil? && footer.to_s.size > 500
        raise ArgumentError.new("invalid value for \"footer\" when calling DefaultApi.post_quotes_quote, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !header.nil? && header.to_s.size > 50
        raise ArgumentError.new("invalid value for \"header\" when calling DefaultApi.post_quotes_quote, the character length must be smaller than or equal to 50.")
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["application_fee_amount"] = application_fee_amount.to_s if !application_fee_amount.nil?
      form_params["application_fee_percent"] = application_fee_percent.to_s if !application_fee_percent.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["default_tax_rates"] = default_tax_rates.to_s if !default_tax_rates.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["discounts"] = discounts.to_s if !discounts.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expires_at"] = expires_at.to_s if !expires_at.nil?
      form_params["footer"] = footer.to_s if !footer.nil?
      form_params["header"] = header.to_s if !header.nil?
      form_params["invoice_settings"] = invoice_settings.to_s if !invoice_settings.nil?
      form_params["line_items"] = @api_client.build_collection_param(line_items, "csv") if !line_items.nil? && !line_items.empty?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["subscription_data"] = subscription_data.to_s if !subscription_data.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_quotes_quote",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Accepts the specified quote.</p>
    # @param quote [String]
    # @return [Quote]
    def post_quotes_quote_accept(*, quote : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_quotes_quote_accept_with_http_info(quote: quote, expand: expand)
      data
    end

    # &lt;p&gt;Accepts the specified quote.&lt;/p&gt;
    # @param quote [String]
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def post_quotes_quote_accept_with_http_info(*, quote : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_quotes_quote_accept(quote: quote, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_quotes_quote_accept\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Quote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Accepts the specified quote.&lt;/p&gt;
    # @param quote [String]
    # @return nil
    def post_quotes_quote_accept(*, quote : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_quotes_quote_accept(quote: quote, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_quotes_quote_accept(*, quote : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_quotes_quote_accept ..." }
      end
      if @api_client.config.client_side_validation && quote.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"quote\" when calling DefaultApi.post_quotes_quote_accept, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/accept".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_quotes_quote_accept",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels the quote.</p>
    # @param quote [String]
    # @return [Quote]
    def post_quotes_quote_cancel(*, quote : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_quotes_quote_cancel_with_http_info(quote: quote, expand: expand)
      data
    end

    # &lt;p&gt;Cancels the quote.&lt;/p&gt;
    # @param quote [String]
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def post_quotes_quote_cancel_with_http_info(*, quote : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_quotes_quote_cancel(quote: quote, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_quotes_quote_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Quote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels the quote.&lt;/p&gt;
    # @param quote [String]
    # @return nil
    def post_quotes_quote_cancel(*, quote : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_quotes_quote_cancel(quote: quote, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_quotes_quote_cancel(*, quote : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_quotes_quote_cancel ..." }
      end
      if @api_client.config.client_side_validation && quote.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"quote\" when calling DefaultApi.post_quotes_quote_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/cancel".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_quotes_quote_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Finalizes the quote.</p>
    # @param quote [String]
    # @return [Quote]
    def post_quotes_quote_finalize(*, quote : String, expand : Array(String)? = nil, expires_at : Int64? = nil)
      data, _status_code, _headers = post_quotes_quote_finalize_with_http_info(quote: quote, expand: expand, expires_at: expires_at)
      data
    end

    # &lt;p&gt;Finalizes the quote.&lt;/p&gt;
    # @param quote [String]
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def post_quotes_quote_finalize_with_http_info(*, quote : String, expand : Array(String)? = nil, expires_at : Int64? = nil)
      request = build_api_request_for_post_quotes_quote_finalize(quote: quote, expand: expand, expires_at: expires_at)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_quotes_quote_finalize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Quote.from_json(data), status_code, headers
    end

    # &lt;p&gt;Finalizes the quote.&lt;/p&gt;
    # @param quote [String]
    # @return nil
    def post_quotes_quote_finalize(*, quote : String, expand : Array(String)? = nil, expires_at : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_post_quotes_quote_finalize(quote: quote, expand: expand, expires_at: expires_at).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_quotes_quote_finalize(*, quote : String, expand : Array(String)? = nil, expires_at : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_quotes_quote_finalize ..." }
      end
      if @api_client.config.client_side_validation && quote.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"quote\" when calling DefaultApi.post_quotes_quote_finalize, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/quotes/{quote}/finalize".sub("{" + "quote" + "}", URI.encode_path(quote.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["expires_at"] = expires_at.to_s if !expires_at.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_quotes_quote_finalize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
    # @param value [String] The value of the item (whose type must match the type of the parent value list).
    # @param value_list [String] The identifier of the value list which the created item will be added to.
    # @return [RadarValueListItem]
    def post_radar_value_list_items(*, value : String, value_list : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_radar_value_list_items_with_http_info(value: value, value_list: value_list, expand: expand)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;ValueListItem&lt;/code&gt; object, which is added to the specified parent value list.&lt;/p&gt;
    # @param value [String] The value of the item (whose type must match the type of the parent value list).
    # @param value_list [String] The identifier of the value list which the created item will be added to.
    # @return [Array<(RadarValueListItem, Integer, Hash)>] RadarValueListItem data, response status code and response headers
    def post_radar_value_list_items_with_http_info(*, value : String, value_list : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_radar_value_list_items(value: value, value_list: value_list, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_radar_value_list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RadarValueListItem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new &lt;code&gt;ValueListItem&lt;/code&gt; object, which is added to the specified parent value list.&lt;/p&gt;
    # @param value [String] The value of the item (whose type must match the type of the parent value list).
    # @param value_list [String] The identifier of the value list which the created item will be added to.
    # @return nil
    def post_radar_value_list_items(*, value : String, value_list : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_radar_value_list_items(value: value, value_list: value_list, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_radar_value_list_items(*, value : String, value_list : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_radar_value_list_items ..." }
      end
      if @api_client.config.client_side_validation && value.to_s.size > 800
        raise ArgumentError.new("invalid value for \"value\" when calling DefaultApi.post_radar_value_list_items, the character length must be smaller than or equal to 800.")
      end

      if @api_client.config.client_side_validation && value_list.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"value_list\" when calling DefaultApi.post_radar_value_list_items, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/value_list_items"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["value"] = value.to_s if !value.nil?
      form_params["value_list"] = value_list.to_s if !value_list.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_radar_value_list_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
    # @param _alias [String] The name of the value list for use in rules.
    # @param name [String] The human-readable name of the value list.
    # @return [RadarValueList]
    def post_radar_value_lists(*, _alias : String, name : String, expand : Array(String)? = nil, item_type : String? = nil)
      data, _status_code, _headers = post_radar_value_lists_with_http_info(_alias: _alias, name: name, expand: expand, item_type: item_type)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;ValueList&lt;/code&gt; object, which can then be referenced in rules.&lt;/p&gt;
    # @param _alias [String] The name of the value list for use in rules.
    # @param name [String] The human-readable name of the value list.
    # @return [Array<(RadarValueList, Integer, Hash)>] RadarValueList data, response status code and response headers
    def post_radar_value_lists_with_http_info(*, _alias : String, name : String, expand : Array(String)? = nil, item_type : String? = nil)
      request = build_api_request_for_post_radar_value_lists(_alias: _alias, name: name, expand: expand, item_type: item_type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_radar_value_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RadarValueList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new &lt;code&gt;ValueList&lt;/code&gt; object, which can then be referenced in rules.&lt;/p&gt;
    # @param _alias [String] The name of the value list for use in rules.
    # @param name [String] The human-readable name of the value list.
    # @return nil
    def post_radar_value_lists(*, _alias : String, name : String, expand : Array(String)? = nil, item_type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_radar_value_lists(_alias: _alias, name: name, expand: expand, item_type: item_type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_radar_value_lists(*, _alias : String, name : String, expand : Array(String)? = nil, item_type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_radar_value_lists ..." }
      end
      if @api_client.config.client_side_validation && _alias.to_s.size > 100
        raise ArgumentError.new("invalid value for \"_alias\" when calling DefaultApi.post_radar_value_lists, the character length must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && name.to_s.size > 100
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_radar_value_lists, the character length must be smaller than or equal to 100.")
      end

      allowable_values = ["card_bin", "card_fingerprint", "case_sensitive_string", "country", "customer_id", "email", "ip_address", "string"]
      if @api_client.config.client_side_validation && !item_type.nil? && !allowable_values.includes?(item_type)
        raise ArgumentError.new("invalid value for \"item_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !item_type.nil? && item_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"item_type\" when calling DefaultApi.post_radar_value_lists, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/radar/value_lists"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["alias"] = _alias.to_s if !_alias.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["item_type"] = item_type.to_s if !item_type.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_radar_value_lists",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
    # @param value_list [String]
    # @return [RadarValueList]
    def post_radar_value_lists_value_list(*, value_list : String, _alias : String? = nil, expand : Array(String)? = nil, name : String? = nil)
      data, _status_code, _headers = post_radar_value_lists_value_list_with_http_info(value_list: value_list, _alias: _alias, expand: expand, name: name)
      data
    end

    # &lt;p&gt;Updates a &lt;code&gt;ValueList&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that &lt;code&gt;item_type&lt;/code&gt; is immutable.&lt;/p&gt;
    # @param value_list [String]
    # @return [Array<(RadarValueList, Integer, Hash)>] RadarValueList data, response status code and response headers
    def post_radar_value_lists_value_list_with_http_info(*, value_list : String, _alias : String? = nil, expand : Array(String)? = nil, name : String? = nil)
      request = build_api_request_for_post_radar_value_lists_value_list(value_list: value_list, _alias: _alias, expand: expand, name: name)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_radar_value_lists_value_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return RadarValueList.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a &lt;code&gt;ValueList&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that &lt;code&gt;item_type&lt;/code&gt; is immutable.&lt;/p&gt;
    # @param value_list [String]
    # @return nil
    def post_radar_value_lists_value_list(*, value_list : String, _alias : String? = nil, expand : Array(String)? = nil, name : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_radar_value_lists_value_list(value_list: value_list, _alias: _alias, expand: expand, name: name).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_radar_value_lists_value_list(*, value_list : String, _alias : String? = nil, expand : Array(String)? = nil, name : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_radar_value_lists_value_list ..." }
      end
      if @api_client.config.client_side_validation && value_list.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"value_list\" when calling DefaultApi.post_radar_value_lists_value_list, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !_alias.nil? && _alias.to_s.size > 100
        raise ArgumentError.new("invalid value for \"_alias\" when calling DefaultApi.post_radar_value_lists_value_list, the character length must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 100
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_radar_value_lists_value_list, the character length must be smaller than or equal to 100.")
      end

      # resource path
      local_var_path = "/v1/radar/value_lists/{value_list}".sub("{" + "value_list" + "}", URI.encode_path(value_list.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["alias"] = _alias.to_s if !_alias.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_radar_value_lists_value_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity. Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
    # @param name [String] The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name.
    # @param _type [String] Type of the recipient: either `individual` or `corporation`.
    # @return [Recipient]
    def post_recipients(*, name : String, _type : String, bank_account : String? = nil, card : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, tax_id : String? = nil)
      data, _status_code, _headers = post_recipients_with_http_info(name: name, _type: _type, bank_account: bank_account, card: card, description: description, email: email, expand: expand, metadata: metadata, tax_id: tax_id)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Recipient&lt;/code&gt; object and verifies the recipient’s identity. Also verifies the recipient’s bank account information or debit card, if either is provided.&lt;/p&gt;
    # @param name [String] The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name.
    # @param _type [String] Type of the recipient: either `individual` or `corporation`.
    # @return [Array<(Recipient, Integer, Hash)>] Recipient data, response status code and response headers
    def post_recipients_with_http_info(*, name : String, _type : String, bank_account : String? = nil, card : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, tax_id : String? = nil)
      request = build_api_request_for_post_recipients(name: name, _type: _type, bank_account: bank_account, card: card, description: description, email: email, expand: expand, metadata: metadata, tax_id: tax_id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_recipients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Recipient.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Recipient&lt;/code&gt; object and verifies the recipient’s identity. Also verifies the recipient’s bank account information or debit card, if either is provided.&lt;/p&gt;
    # @param name [String] The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name.
    # @param _type [String] Type of the recipient: either `individual` or `corporation`.
    # @return nil
    def post_recipients(*, name : String, _type : String, bank_account : String? = nil, card : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, tax_id : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_recipients(name: name, _type: _type, bank_account: bank_account, card: card, description: description, email: email, expand: expand, metadata: metadata, tax_id: tax_id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_recipients(*, name : String, _type : String, bank_account : String? = nil, card : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, tax_id : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_recipients ..." }
      end
      if @api_client.config.client_side_validation && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_recipients, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\" when calling DefaultApi.post_recipients, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !bank_account.nil? && bank_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"bank_account\" when calling DefaultApi.post_recipients, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !card.nil? && card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"card\" when calling DefaultApi.post_recipients, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_recipients, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !email.nil? && email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"email\" when calling DefaultApi.post_recipients, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !tax_id.nil? && tax_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tax_id\" when calling DefaultApi.post_recipients, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/recipients"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["tax_id"] = tax_id.to_s if !tax_id.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_recipients",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified recipient by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>If you update the name or tax ID, the identity verification will automatically be rerun. If you update the bank account, the bank account validation will automatically be rerun.</p>
    # @param id [String]
    # @return [Recipient]
    def post_recipients_id(*, id : String, bank_account : String? = nil, card : String? = nil, default_card : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, tax_id : String? = nil)
      data, _status_code, _headers = post_recipients_id_with_http_info(id: id, bank_account: bank_account, card: card, default_card: default_card, description: description, email: email, expand: expand, metadata: metadata, name: name, tax_id: tax_id)
      data
    end

    # &lt;p&gt;Updates the specified recipient by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;If you update the name or tax ID, the identity verification will automatically be rerun. If you update the bank account, the bank account validation will automatically be rerun.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Recipient, Integer, Hash)>] Recipient data, response status code and response headers
    def post_recipients_id_with_http_info(*, id : String, bank_account : String? = nil, card : String? = nil, default_card : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, tax_id : String? = nil)
      request = build_api_request_for_post_recipients_id(id: id, bank_account: bank_account, card: card, default_card: default_card, description: description, email: email, expand: expand, metadata: metadata, name: name, tax_id: tax_id)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_recipients_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Recipient.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified recipient by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;If you update the name or tax ID, the identity verification will automatically be rerun. If you update the bank account, the bank account validation will automatically be rerun.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_recipients_id(*, id : String, bank_account : String? = nil, card : String? = nil, default_card : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, tax_id : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_recipients_id(id: id, bank_account: bank_account, card: card, default_card: default_card, description: description, email: email, expand: expand, metadata: metadata, name: name, tax_id: tax_id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_recipients_id(*, id : String, bank_account : String? = nil, card : String? = nil, default_card : String? = nil, description : String? = nil, email : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, name : String? = nil, tax_id : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_recipients_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !bank_account.nil? && bank_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"bank_account\" when calling DefaultApi.post_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !card.nil? && card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"card\" when calling DefaultApi.post_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_card.nil? && default_card.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_card\" when calling DefaultApi.post_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !email.nil? && email.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"email\" when calling DefaultApi.post_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !tax_id.nil? && tax_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tax_id\" when calling DefaultApi.post_recipients_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/recipients/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["default_card"] = default_card.to_s if !default_card.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["email"] = email.to_s if !email.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["name"] = name.to_s if !name.nil?
      form_params["tax_id"] = tax_id.to_s if !tax_id.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_recipients_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Create a refund.</p>
    # @return [Refund]
    def post_refunds(*, amount : Int64? = nil, charge : String? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil)
      data, _status_code, _headers = post_refunds_with_http_info(amount: amount, charge: charge, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer)
      data
    end

    # &lt;p&gt;Create a refund.&lt;/p&gt;
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def post_refunds_with_http_info(*, amount : Int64? = nil, charge : String? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil)
      request = build_api_request_for_post_refunds(amount: amount, charge: charge, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Refund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Create a refund.&lt;/p&gt;
    # @return nil
    def post_refunds(*, amount : Int64? = nil, charge : String? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_refunds(amount: amount, charge: charge, expand: expand, instructions_email: instructions_email, metadata: metadata, payment_intent: payment_intent, reason: reason, refund_application_fee: refund_application_fee, reverse_transfer: reverse_transfer).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_refunds(*, amount : Int64? = nil, charge : String? = nil, expand : Array(String)? = nil, instructions_email : String? = nil, metadata : PostAccountRequestMetadata? = nil, payment_intent : String? = nil, reason : String? = nil, refund_application_fee : Bool? = nil, reverse_transfer : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_refunds ..." }
      end
      if @api_client.config.client_side_validation && !charge.nil? && charge.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"charge\" when calling DefaultApi.post_refunds, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_intent.nil? && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.post_refunds, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["duplicate", "fraudulent", "requested_by_customer"]
      if @api_client.config.client_side_validation && !reason.nil? && !allowable_values.includes?(reason)
        raise ArgumentError.new("invalid value for \"reason\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !reason.nil? && reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reason\" when calling DefaultApi.post_refunds, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/refunds"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["charge"] = charge.to_s if !charge.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["instructions_email"] = instructions_email.to_s if !instructions_email.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      form_params["reason"] = reason.to_s if !reason.nil?
      form_params["refund_application_fee"] = refund_application_fee.to_s if !refund_application_fee.nil?
      form_params["reverse_transfer"] = reverse_transfer.to_s if !reverse_transfer.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_refunds",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request only accepts <code>metadata</code> as an argument.</p>
    # @param refund [String]
    # @return [Refund]
    def post_refunds_refund(*, refund : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_refunds_refund_with_http_info(refund: refund, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts &lt;code&gt;metadata&lt;/code&gt; as an argument.&lt;/p&gt;
    # @param refund [String]
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def post_refunds_refund_with_http_info(*, refund : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_refunds_refund(refund: refund, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_refunds_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Refund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts &lt;code&gt;metadata&lt;/code&gt; as an argument.&lt;/p&gt;
    # @param refund [String]
    # @return nil
    def post_refunds_refund(*, refund : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_refunds_refund(refund: refund, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_refunds_refund(*, refund : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_refunds_refund ..." }
      end
      # resource path
      local_var_path = "/v1/refunds/{refund}".sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_refunds_refund",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels a refund with a status of <code>requires_action</code>.</p>  <p>Refunds in other states cannot be canceled, and only refunds for payment methods that require customer action will enter the <code>requires_action</code> state.</p>
    # @param refund [String]
    # @return [Refund]
    def post_refunds_refund_cancel(*, refund : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_refunds_refund_cancel_with_http_info(refund: refund, expand: expand)
      data
    end

    # &lt;p&gt;Cancels a refund with a status of &lt;code&gt;requires_action&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Refunds in other states cannot be canceled, and only refunds for payment methods that require customer action will enter the &lt;code&gt;requires_action&lt;/code&gt; state.&lt;/p&gt;
    # @param refund [String]
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def post_refunds_refund_cancel_with_http_info(*, refund : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_refunds_refund_cancel(refund: refund, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_refunds_refund_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Refund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels a refund with a status of &lt;code&gt;requires_action&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Refunds in other states cannot be canceled, and only refunds for payment methods that require customer action will enter the &lt;code&gt;requires_action&lt;/code&gt; state.&lt;/p&gt;
    # @param refund [String]
    # @return nil
    def post_refunds_refund_cancel(*, refund : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_refunds_refund_cancel(refund: refund, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_refunds_refund_cancel(*, refund : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_refunds_refund_cancel ..." }
      end
      # resource path
      local_var_path = "/v1/refunds/{refund}/cancel".sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_refunds_refund_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new object and begin running the report. (Certain report types require a <a href=\"https://stripe.com/docs/keys#test-live-modes\">live-mode API key</a>.)</p>
    # @param report_type [String] The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `\\\"balance.summary.1\\\"`.
    # @return [ReportingReportRun]
    def post_reporting_report_runs(*, report_type : String, expand : Array(String)? = nil, parameters : RunParameterSpecs? = nil)
      data, _status_code, _headers = post_reporting_report_runs_with_http_info(report_type: report_type, expand: expand, parameters: parameters)
      data
    end

    # &lt;p&gt;Creates a new object and begin running the report. (Certain report types require a &lt;a href&#x3D;\&quot;https://stripe.com/docs/keys#test-live-modes\&quot;&gt;live-mode API key&lt;/a&gt;.)&lt;/p&gt;
    # @param report_type [String] The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `\\\"balance.summary.1\\\"`.
    # @return [Array<(ReportingReportRun, Integer, Hash)>] ReportingReportRun data, response status code and response headers
    def post_reporting_report_runs_with_http_info(*, report_type : String, expand : Array(String)? = nil, parameters : RunParameterSpecs? = nil)
      request = build_api_request_for_post_reporting_report_runs(report_type: report_type, expand: expand, parameters: parameters)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_reporting_report_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ReportingReportRun.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new object and begin running the report. (Certain report types require a &lt;a href&#x3D;\&quot;https://stripe.com/docs/keys#test-live-modes\&quot;&gt;live-mode API key&lt;/a&gt;.)&lt;/p&gt;
    # @param report_type [String] The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `\\\"balance.summary.1\\\"`.
    # @return nil
    def post_reporting_report_runs(*, report_type : String, expand : Array(String)? = nil, parameters : RunParameterSpecs? = nil, &block : Crest::Response ->)
      build_api_request_for_post_reporting_report_runs(report_type: report_type, expand: expand, parameters: parameters).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_reporting_report_runs(*, report_type : String, expand : Array(String)? = nil, parameters : RunParameterSpecs? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_reporting_report_runs ..." }
      end
      # resource path
      local_var_path = "/v1/reporting/report_runs"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["parameters"] = parameters.to_s if !parameters.nil?
      form_params["report_type"] = report_type.to_s if !report_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_reporting_report_runs",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
    # @param review [String]
    # @return [Review]
    def post_reviews_review_approve(*, review : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_reviews_review_approve_with_http_info(review: review, expand: expand)
      data
    end

    # &lt;p&gt;Approves a &lt;code&gt;Review&lt;/code&gt; object, closing it and removing it from the list of reviews.&lt;/p&gt;
    # @param review [String]
    # @return [Array<(Review, Integer, Hash)>] Review data, response status code and response headers
    def post_reviews_review_approve_with_http_info(*, review : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_reviews_review_approve(review: review, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_reviews_review_approve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Review.from_json(data), status_code, headers
    end

    # &lt;p&gt;Approves a &lt;code&gt;Review&lt;/code&gt; object, closing it and removing it from the list of reviews.&lt;/p&gt;
    # @param review [String]
    # @return nil
    def post_reviews_review_approve(*, review : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_reviews_review_approve(review: review, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_reviews_review_approve(*, review : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_reviews_review_approve ..." }
      end
      if @api_client.config.client_side_validation && review.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"review\" when calling DefaultApi.post_reviews_review_approve, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/reviews/{review}/approve".sub("{" + "review" + "}", URI.encode_path(review.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_reviews_review_approve",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a SetupIntent object.</p>  <p>After the SetupIntent is created, attach a payment method and <a href=\"/docs/api/setup_intents/confirm\">confirm</a> to collect any required permissions to charge the payment method later.</p>
    # @return [SetupIntent]
    def post_setup_intents(*, confirm : Bool? = nil, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, mandate_data : SecretKeyParam2? = nil, on_behalf_of : String? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, payment_method_types : Array(String)? = nil, return_url : String? = nil, single_use : SetupIntentSingleUseParams? = nil, usage : String? = nil)
      data, _status_code, _headers = post_setup_intents_with_http_info(confirm: confirm, customer: customer, description: description, expand: expand, mandate_data: mandate_data, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, return_url: return_url, single_use: single_use, usage: usage)
      data
    end

    # &lt;p&gt;Creates a SetupIntent object.&lt;/p&gt;  &lt;p&gt;After the SetupIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/setup_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to collect any required permissions to charge the payment method later.&lt;/p&gt;
    # @return [Array<(SetupIntent, Integer, Hash)>] SetupIntent data, response status code and response headers
    def post_setup_intents_with_http_info(*, confirm : Bool? = nil, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, mandate_data : SecretKeyParam2? = nil, on_behalf_of : String? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, payment_method_types : Array(String)? = nil, return_url : String? = nil, single_use : SetupIntentSingleUseParams? = nil, usage : String? = nil)
      request = build_api_request_for_post_setup_intents(confirm: confirm, customer: customer, description: description, expand: expand, mandate_data: mandate_data, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, return_url: return_url, single_use: single_use, usage: usage)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_setup_intents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SetupIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a SetupIntent object.&lt;/p&gt;  &lt;p&gt;After the SetupIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/setup_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to collect any required permissions to charge the payment method later.&lt;/p&gt;
    # @return nil
    def post_setup_intents(*, confirm : Bool? = nil, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, mandate_data : SecretKeyParam2? = nil, on_behalf_of : String? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, payment_method_types : Array(String)? = nil, return_url : String? = nil, single_use : SetupIntentSingleUseParams? = nil, usage : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_setup_intents(confirm: confirm, customer: customer, description: description, expand: expand, mandate_data: mandate_data, on_behalf_of: on_behalf_of, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types, return_url: return_url, single_use: single_use, usage: usage).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_setup_intents(*, confirm : Bool? = nil, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, mandate_data : SecretKeyParam2? = nil, on_behalf_of : String? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, payment_method_types : Array(String)? = nil, return_url : String? = nil, single_use : SetupIntentSingleUseParams? = nil, usage : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_setup_intents ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_setup_intents, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_setup_intents, the character length must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_setup_intents, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["off_session", "on_session"]
      if @api_client.config.client_side_validation && !usage.nil? && !allowable_values.includes?(usage)
        raise ArgumentError.new("invalid value for \"usage\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/setup_intents"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["confirm"] = confirm.to_s if !confirm.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["mandate_data"] = mandate_data.to_s if !mandate_data.nil?
      form_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?
      form_params["return_url"] = return_url.to_s if !return_url.nil?
      form_params["single_use"] = single_use.to_s if !single_use.nil?
      form_params["usage"] = usage.to_s if !usage.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_setup_intents",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a SetupIntent object.</p>
    # @param intent [String]
    # @return [SetupIntent]
    def post_setup_intents_intent(*, intent : String, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, payment_method_types : Array(String)? = nil)
      data, _status_code, _headers = post_setup_intents_intent_with_http_info(intent: intent, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types)
      data
    end

    # &lt;p&gt;Updates a SetupIntent object.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(SetupIntent, Integer, Hash)>] SetupIntent data, response status code and response headers
    def post_setup_intents_intent_with_http_info(*, intent : String, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, payment_method_types : Array(String)? = nil)
      request = build_api_request_for_post_setup_intents_intent(intent: intent, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_setup_intents_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SetupIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a SetupIntent object.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_setup_intents_intent(*, intent : String, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, payment_method_types : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_setup_intents_intent(intent: intent, customer: customer, description: description, expand: expand, metadata: metadata, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, payment_method_types: payment_method_types).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent(*, intent : String, customer : String? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, payment_method_types : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_setup_intents_intent ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_setup_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_setup_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_setup_intents_intent, the character length must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_setup_intents_intent, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["payment_method_types"] = @api_client.build_collection_param(payment_method_types, "csv") if !payment_method_types.nil? && !payment_method_types.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_setup_intents_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>  <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
    # @param intent [String]
    # @return [SetupIntent]
    def post_setup_intents_intent_cancel(*, intent : String, cancellation_reason : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_setup_intents_intent_cancel_with_http_info(intent: intent, cancellation_reason: cancellation_reason, expand: expand)
      data
    end

    # &lt;p&gt;A SetupIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, or &lt;code&gt;requires_action&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(SetupIntent, Integer, Hash)>] SetupIntent data, response status code and response headers
    def post_setup_intents_intent_cancel_with_http_info(*, intent : String, cancellation_reason : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_setup_intents_intent_cancel(intent: intent, cancellation_reason: cancellation_reason, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_setup_intents_intent_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SetupIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;A SetupIntent object can be canceled when it is in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, or &lt;code&gt;requires_action&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_setup_intents_intent_cancel(*, intent : String, cancellation_reason : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_setup_intents_intent_cancel(intent: intent, cancellation_reason: cancellation_reason, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_cancel(*, intent : String, cancellation_reason : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_setup_intents_intent_cancel ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_setup_intents_intent_cancel, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["abandoned", "duplicate", "requested_by_customer"]
      if @api_client.config.client_side_validation && !cancellation_reason.nil? && !allowable_values.includes?(cancellation_reason)
        raise ArgumentError.new("invalid value for \"cancellation_reason\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !cancellation_reason.nil? && cancellation_reason.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"cancellation_reason\" when calling DefaultApi.post_setup_intents_intent_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/cancel".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["cancellation_reason"] = cancellation_reason.to_s if !cancellation_reason.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_setup_intents_intent_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.</p>  <p>If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the <code>succeeded</code> status.</p>  <p>Otherwise, it will transition to the <code>requires_action</code> status and suggest additional actions via <code>next_action</code>. If setup fails, the SetupIntent will transition to the <code>requires_payment_method</code> status.</p>
    # @param intent [String]
    # @return [SetupIntent]
    def post_setup_intents_intent_confirm(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil, mandate_data : PostPaymentIntentsIntentConfirmRequestMandateData? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, return_url : String? = nil)
      data, _status_code, _headers = post_setup_intents_intent_confirm_with_http_info(intent: intent, client_secret: client_secret, expand: expand, mandate_data: mandate_data, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, return_url: return_url)
      data
    end

    # &lt;p&gt;Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.&lt;/p&gt;  &lt;p&gt;If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status.&lt;/p&gt;  &lt;p&gt;Otherwise, it will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If setup fails, the SetupIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(SetupIntent, Integer, Hash)>] SetupIntent data, response status code and response headers
    def post_setup_intents_intent_confirm_with_http_info(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil, mandate_data : PostPaymentIntentsIntentConfirmRequestMandateData? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, return_url : String? = nil)
      request = build_api_request_for_post_setup_intents_intent_confirm(intent: intent, client_secret: client_secret, expand: expand, mandate_data: mandate_data, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, return_url: return_url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_setup_intents_intent_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SetupIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.&lt;/p&gt;  &lt;p&gt;If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status.&lt;/p&gt;  &lt;p&gt;Otherwise, it will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If setup fails, the SetupIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_setup_intents_intent_confirm(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil, mandate_data : PostPaymentIntentsIntentConfirmRequestMandateData? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, return_url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_setup_intents_intent_confirm(intent: intent, client_secret: client_secret, expand: expand, mandate_data: mandate_data, payment_method: payment_method, payment_method_data: payment_method_data, payment_method_options: payment_method_options, return_url: return_url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_confirm(*, intent : String, client_secret : String? = nil, expand : Array(String)? = nil, mandate_data : PostPaymentIntentsIntentConfirmRequestMandateData? = nil, payment_method : String? = nil, payment_method_data : PaymentMethodDataParams1? = nil, payment_method_options : PaymentMethodOptionsParam18? = nil, return_url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_setup_intents_intent_confirm ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_setup_intents_intent_confirm, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !client_secret.nil? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\" when calling DefaultApi.post_setup_intents_intent_confirm, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !payment_method.nil? && payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_method\" when calling DefaultApi.post_setup_intents_intent_confirm, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/confirm".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["mandate_data"] = mandate_data.to_s if !mandate_data.nil?
      form_params["payment_method"] = payment_method.to_s if !payment_method.nil?
      form_params["payment_method_data"] = payment_method_data.to_s if !payment_method_data.nil?
      form_params["payment_method_options"] = payment_method_options.to_s if !payment_method_options.nil?
      form_params["return_url"] = return_url.to_s if !return_url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_setup_intents_intent_confirm",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verifies microdeposits on a SetupIntent object.</p>
    # @param intent [String]
    # @return [SetupIntent]
    def post_setup_intents_intent_verify_microdeposits(*, intent : String, amounts : Array(Int64)? = nil, client_secret : String? = nil, descriptor_code : String? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_setup_intents_intent_verify_microdeposits_with_http_info(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand)
      data
    end

    # &lt;p&gt;Verifies microdeposits on a SetupIntent object.&lt;/p&gt;
    # @param intent [String]
    # @return [Array<(SetupIntent, Integer, Hash)>] SetupIntent data, response status code and response headers
    def post_setup_intents_intent_verify_microdeposits_with_http_info(*, intent : String, amounts : Array(Int64)? = nil, client_secret : String? = nil, descriptor_code : String? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_setup_intents_intent_verify_microdeposits(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_setup_intents_intent_verify_microdeposits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SetupIntent.from_json(data), status_code, headers
    end

    # &lt;p&gt;Verifies microdeposits on a SetupIntent object.&lt;/p&gt;
    # @param intent [String]
    # @return nil
    def post_setup_intents_intent_verify_microdeposits(*, intent : String, amounts : Array(Int64)? = nil, client_secret : String? = nil, descriptor_code : String? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_setup_intents_intent_verify_microdeposits(intent: intent, amounts: amounts, client_secret: client_secret, descriptor_code: descriptor_code, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_setup_intents_intent_verify_microdeposits(*, intent : String, amounts : Array(Int64)? = nil, client_secret : String? = nil, descriptor_code : String? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_setup_intents_intent_verify_microdeposits ..." }
      end
      if @api_client.config.client_side_validation && intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"intent\" when calling DefaultApi.post_setup_intents_intent_verify_microdeposits, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !client_secret.nil? && client_secret.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"client_secret\" when calling DefaultApi.post_setup_intents_intent_verify_microdeposits, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !descriptor_code.nil? && descriptor_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"descriptor_code\" when calling DefaultApi.post_setup_intents_intent_verify_microdeposits, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/setup_intents/{intent}/verify_microdeposits".sub("{" + "intent" + "}", URI.encode_path(intent.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amounts"] = @api_client.build_collection_param(amounts, "csv") if !amounts.nil? && !amounts.empty?
      form_params["client_secret"] = client_secret.to_s if !client_secret.nil?
      form_params["descriptor_code"] = descriptor_code.to_s if !descriptor_code.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_setup_intents_intent_verify_microdeposits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new shipping rate object.</p>
    # @param display_name [String] The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    # @return [ShippingRate]
    def post_shipping_rates(*, display_name : String, delivery_estimate : DeliveryEstimate1? = nil, expand : Array(String)? = nil, fixed_amount : FixedAmount1? = nil, tax_behavior : String? = nil, tax_code : String? = nil, _type : String? = nil)
      data, _status_code, _headers = post_shipping_rates_with_http_info(display_name: display_name, delivery_estimate: delivery_estimate, expand: expand, fixed_amount: fixed_amount, tax_behavior: tax_behavior, tax_code: tax_code, _type: _type)
      data
    end

    # &lt;p&gt;Creates a new shipping rate object.&lt;/p&gt;
    # @param display_name [String] The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    # @return [Array<(ShippingRate, Integer, Hash)>] ShippingRate data, response status code and response headers
    def post_shipping_rates_with_http_info(*, display_name : String, delivery_estimate : DeliveryEstimate1? = nil, expand : Array(String)? = nil, fixed_amount : FixedAmount1? = nil, tax_behavior : String? = nil, tax_code : String? = nil, _type : String? = nil)
      request = build_api_request_for_post_shipping_rates(display_name: display_name, delivery_estimate: delivery_estimate, expand: expand, fixed_amount: fixed_amount, tax_behavior: tax_behavior, tax_code: tax_code, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_shipping_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ShippingRate.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new shipping rate object.&lt;/p&gt;
    # @param display_name [String] The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    # @return nil
    def post_shipping_rates(*, display_name : String, delivery_estimate : DeliveryEstimate1? = nil, expand : Array(String)? = nil, fixed_amount : FixedAmount1? = nil, tax_behavior : String? = nil, tax_code : String? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_shipping_rates(display_name: display_name, delivery_estimate: delivery_estimate, expand: expand, fixed_amount: fixed_amount, tax_behavior: tax_behavior, tax_code: tax_code, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_shipping_rates(*, display_name : String, delivery_estimate : DeliveryEstimate1? = nil, expand : Array(String)? = nil, fixed_amount : FixedAmount1? = nil, tax_behavior : String? = nil, tax_code : String? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_shipping_rates ..." }
      end
      if @api_client.config.client_side_validation && display_name.to_s.size > 100
        raise ArgumentError.new("invalid value for \"display_name\" when calling DefaultApi.post_shipping_rates, the character length must be smaller than or equal to 100.")
      end

      allowable_values = ["exclusive", "inclusive", "unspecified"]
      if @api_client.config.client_side_validation && !tax_behavior.nil? && !allowable_values.includes?(tax_behavior)
        raise ArgumentError.new("invalid value for \"tax_behavior\", must be one of #{allowable_values}")
      end
      allowable_values = ["fixed_amount"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/shipping_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["delivery_estimate"] = delivery_estimate.to_s if !delivery_estimate.nil?
      form_params["display_name"] = display_name.to_s if !display_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["fixed_amount"] = fixed_amount.to_s if !fixed_amount.nil?
      form_params["tax_behavior"] = tax_behavior.to_s if !tax_behavior.nil?
      form_params["tax_code"] = tax_code.to_s if !tax_code.nil?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_shipping_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing shipping rate object.</p>
    # @param shipping_rate_token [String]
    # @return [ShippingRate]
    def post_shipping_rates_shipping_rate_token(*, shipping_rate_token : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_shipping_rates_shipping_rate_token_with_http_info(shipping_rate_token: shipping_rate_token, active: active, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates an existing shipping rate object.&lt;/p&gt;
    # @param shipping_rate_token [String]
    # @return [Array<(ShippingRate, Integer, Hash)>] ShippingRate data, response status code and response headers
    def post_shipping_rates_shipping_rate_token_with_http_info(*, shipping_rate_token : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_shipping_rates_shipping_rate_token(shipping_rate_token: shipping_rate_token, active: active, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_shipping_rates_shipping_rate_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ShippingRate.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing shipping rate object.&lt;/p&gt;
    # @param shipping_rate_token [String]
    # @return nil
    def post_shipping_rates_shipping_rate_token(*, shipping_rate_token : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_shipping_rates_shipping_rate_token(shipping_rate_token: shipping_rate_token, active: active, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_shipping_rates_shipping_rate_token(*, shipping_rate_token : String, active : Bool? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_shipping_rates_shipping_rate_token ..." }
      end
      if @api_client.config.client_side_validation && shipping_rate_token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"shipping_rate_token\" when calling DefaultApi.post_shipping_rates_shipping_rate_token, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/shipping_rates/{shipping_rate_token}".sub("{" + "shipping_rate_token" + "}", URI.encode_path(shipping_rate_token.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_shipping_rates_shipping_rate_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new SKU associated with a product.</p>
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param inventory [InventoryCreateSpecs]
    # @param price [Int64] The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @param product [String] The ID of the product this SKU is associated with. Must be a product with type `good`.
    # @return [Sku]
    def post_skus(*, currency : String, inventory : InventoryCreateSpecs, price : Int64, product : String, active : Bool? = nil, expand : Array(String)? = nil, id : String? = nil, image : String? = nil, package_dimensions : PackageDimensionsSpecs2? = nil)
      data, _status_code, _headers = post_skus_with_http_info(currency: currency, inventory: inventory, price: price, product: product, active: active, expand: expand, id: id, image: image, package_dimensions: package_dimensions)
      data
    end

    # &lt;p&gt;Creates a new SKU associated with a product.&lt;/p&gt;
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param inventory [InventoryCreateSpecs]
    # @param price [Int64] The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @param product [String] The ID of the product this SKU is associated with. Must be a product with type `good`.
    # @return [Array<(Sku, Integer, Hash)>] Sku data, response status code and response headers
    def post_skus_with_http_info(*, currency : String, inventory : InventoryCreateSpecs, price : Int64, product : String, active : Bool? = nil, expand : Array(String)? = nil, id : String? = nil, image : String? = nil, package_dimensions : PackageDimensionsSpecs2? = nil)
      request = build_api_request_for_post_skus(currency: currency, inventory: inventory, price: price, product: product, active: active, expand: expand, id: id, image: image, package_dimensions: package_dimensions)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_skus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Sku.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new SKU associated with a product.&lt;/p&gt;
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param inventory [InventoryCreateSpecs]
    # @param price [Int64] The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    # @param product [String] The ID of the product this SKU is associated with. Must be a product with type `good`.
    # @return nil
    def post_skus(*, currency : String, inventory : InventoryCreateSpecs, price : Int64, product : String, active : Bool? = nil, expand : Array(String)? = nil, id : String? = nil, image : String? = nil, package_dimensions : PackageDimensionsSpecs2? = nil, &block : Crest::Response ->)
      build_api_request_for_post_skus(currency: currency, inventory: inventory, price: price, product: product, active: active, expand: expand, id: id, image: image, package_dimensions: package_dimensions).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_skus(*, currency : String, inventory : InventoryCreateSpecs, price : Int64, product : String, active : Bool? = nil, expand : Array(String)? = nil, id : String? = nil, image : String? = nil, package_dimensions : PackageDimensionsSpecs2? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_skus ..." }
      end
      if @api_client.config.client_side_validation && product.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product\" when calling DefaultApi.post_skus, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !image.nil? && image.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"image\" when calling DefaultApi.post_skus, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/skus"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["id"] = id.to_s if !id.nil?
      form_params["image"] = image.to_s if !image.nil?
      form_params["inventory"] = inventory.to_s if !inventory.nil?
      form_params["package_dimensions"] = package_dimensions.to_s if !package_dimensions.nil?
      form_params["price"] = price.to_s if !price.nil?
      form_params["product"] = product.to_s if !product.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_skus",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
    # @param id [String]
    # @return [Sku]
    def post_skus_id(*, id : String, active : Bool? = nil, currency : String? = nil, expand : Array(String)? = nil, image : String? = nil, inventory : InventoryUpdateSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, package_dimensions : PostSkusIdRequestPackageDimensions? = nil, price : Int64? = nil, product : String? = nil)
      data, _status_code, _headers = post_skus_id_with_http_info(id: id, active: active, currency: currency, expand: expand, image: image, inventory: inventory, metadata: metadata, package_dimensions: package_dimensions, price: price, product: product)
      data
    end

    # &lt;p&gt;Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;Note that a SKU’s &lt;code&gt;attributes&lt;/code&gt; are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(Sku, Integer, Hash)>] Sku data, response status code and response headers
    def post_skus_id_with_http_info(*, id : String, active : Bool? = nil, currency : String? = nil, expand : Array(String)? = nil, image : String? = nil, inventory : InventoryUpdateSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, package_dimensions : PostSkusIdRequestPackageDimensions? = nil, price : Int64? = nil, product : String? = nil)
      request = build_api_request_for_post_skus_id(id: id, active: active, currency: currency, expand: expand, image: image, inventory: inventory, metadata: metadata, package_dimensions: package_dimensions, price: price, product: product)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_skus_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Sku.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;Note that a SKU’s &lt;code&gt;attributes&lt;/code&gt; are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_skus_id(*, id : String, active : Bool? = nil, currency : String? = nil, expand : Array(String)? = nil, image : String? = nil, inventory : InventoryUpdateSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, package_dimensions : PostSkusIdRequestPackageDimensions? = nil, price : Int64? = nil, product : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_skus_id(id: id, active: active, currency: currency, expand: expand, image: image, inventory: inventory, metadata: metadata, package_dimensions: package_dimensions, price: price, product: product).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_skus_id(*, id : String, active : Bool? = nil, currency : String? = nil, expand : Array(String)? = nil, image : String? = nil, inventory : InventoryUpdateSpecs? = nil, metadata : PostAccountRequestMetadata? = nil, package_dimensions : PostSkusIdRequestPackageDimensions? = nil, price : Int64? = nil, product : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_skus_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_skus_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !image.nil? && image.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"image\" when calling DefaultApi.post_skus_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !product.nil? && product.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"product\" when calling DefaultApi.post_skus_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/skus/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["image"] = image.to_s if !image.nil?
      form_params["inventory"] = inventory.to_s if !inventory.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["package_dimensions"] = package_dimensions.to_s if !package_dimensions.nil?
      form_params["price"] = price.to_s if !price.nil?
      form_params["product"] = product.to_s if !product.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_skus_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new source object.</p>
    # @return [Source]
    def post_sources(*, amount : Int64? = nil, currency : String? = nil, customer : String? = nil, expand : Array(String)? = nil, flow : String? = nil, mandate : MandateParams? = nil, original_source : String? = nil, owner : Owner1? = nil, receiver : ReceiverParams? = nil, redirect : RedirectParams? = nil, source_order : ShallowOrderSpecs? = nil, statement_descriptor : String? = nil, token : String? = nil, _type : String? = nil, usage : String? = nil)
      data, _status_code, _headers = post_sources_with_http_info(amount: amount, currency: currency, customer: customer, expand: expand, flow: flow, mandate: mandate, original_source: original_source, owner: owner, receiver: receiver, redirect: redirect, source_order: source_order, statement_descriptor: statement_descriptor, token: token, _type: _type, usage: usage)
      data
    end

    # &lt;p&gt;Creates a new source object.&lt;/p&gt;
    # @return [Array<(Source, Integer, Hash)>] Source data, response status code and response headers
    def post_sources_with_http_info(*, amount : Int64? = nil, currency : String? = nil, customer : String? = nil, expand : Array(String)? = nil, flow : String? = nil, mandate : MandateParams? = nil, original_source : String? = nil, owner : Owner1? = nil, receiver : ReceiverParams? = nil, redirect : RedirectParams? = nil, source_order : ShallowOrderSpecs? = nil, statement_descriptor : String? = nil, token : String? = nil, _type : String? = nil, usage : String? = nil)
      request = build_api_request_for_post_sources(amount: amount, currency: currency, customer: customer, expand: expand, flow: flow, mandate: mandate, original_source: original_source, owner: owner, receiver: receiver, redirect: redirect, source_order: source_order, statement_descriptor: statement_descriptor, token: token, _type: _type, usage: usage)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Source.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new source object.&lt;/p&gt;
    # @return nil
    def post_sources(*, amount : Int64? = nil, currency : String? = nil, customer : String? = nil, expand : Array(String)? = nil, flow : String? = nil, mandate : MandateParams? = nil, original_source : String? = nil, owner : Owner1? = nil, receiver : ReceiverParams? = nil, redirect : RedirectParams? = nil, source_order : ShallowOrderSpecs? = nil, statement_descriptor : String? = nil, token : String? = nil, _type : String? = nil, usage : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_sources(amount: amount, currency: currency, customer: customer, expand: expand, flow: flow, mandate: mandate, original_source: original_source, owner: owner, receiver: receiver, redirect: redirect, source_order: source_order, statement_descriptor: statement_descriptor, token: token, _type: _type, usage: usage).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_sources(*, amount : Int64? = nil, currency : String? = nil, customer : String? = nil, expand : Array(String)? = nil, flow : String? = nil, mandate : MandateParams? = nil, original_source : String? = nil, owner : Owner1? = nil, receiver : ReceiverParams? = nil, redirect : RedirectParams? = nil, source_order : ShallowOrderSpecs? = nil, statement_descriptor : String? = nil, token : String? = nil, _type : String? = nil, usage : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_sources ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 500
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_sources, the character length must be smaller than or equal to 500.")
      end

      allowable_values = ["code_verification", "none", "receiver", "redirect"]
      if @api_client.config.client_side_validation && !flow.nil? && !allowable_values.includes?(flow)
        raise ArgumentError.new("invalid value for \"flow\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !flow.nil? && flow.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"flow\" when calling DefaultApi.post_sources, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !original_source.nil? && original_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"original_source\" when calling DefaultApi.post_sources, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_sources, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !token.nil? && token.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"token\" when calling DefaultApi.post_sources, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !_type.nil? && _type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"_type\" when calling DefaultApi.post_sources, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["reusable", "single_use"]
      if @api_client.config.client_side_validation && !usage.nil? && !allowable_values.includes?(usage)
        raise ArgumentError.new("invalid value for \"usage\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !usage.nil? && usage.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"usage\" when calling DefaultApi.post_sources, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sources"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["flow"] = flow.to_s if !flow.nil?
      form_params["mandate"] = mandate.to_s if !mandate.nil?
      form_params["original_source"] = original_source.to_s if !original_source.nil?
      form_params["owner"] = owner.to_s if !owner.nil?
      form_params["receiver"] = receiver.to_s if !receiver.nil?
      form_params["redirect"] = redirect.to_s if !redirect.nil?
      form_params["source_order"] = source_order.to_s if !source_order.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["token"] = token.to_s if !token.nil?
      form_params["type"] = _type.to_s if !_type.nil?
      form_params["usage"] = usage.to_s if !usage.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_sources",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href=\"/docs/sources\">payment method guides</a> for more detail.</p>
    # @param source [String]
    # @return [Source]
    def post_sources_source(*, source : String, amount : Int64? = nil, expand : Array(String)? = nil, mandate : MandateParams? = nil, metadata : PostAccountRequestMetadata? = nil, owner : Owner1? = nil, source_order : OrderParams? = nil)
      data, _status_code, _headers = post_sources_source_with_http_info(source: source, amount: amount, expand: expand, mandate: mandate, metadata: metadata, owner: owner, source_order: source_order)
      data
    end

    # &lt;p&gt;Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts the &lt;code&gt;metadata&lt;/code&gt; and &lt;code&gt;owner&lt;/code&gt; as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our &lt;a href&#x3D;\&quot;/docs/sources\&quot;&gt;payment method guides&lt;/a&gt; for more detail.&lt;/p&gt;
    # @param source [String]
    # @return [Array<(Source, Integer, Hash)>] Source data, response status code and response headers
    def post_sources_source_with_http_info(*, source : String, amount : Int64? = nil, expand : Array(String)? = nil, mandate : MandateParams? = nil, metadata : PostAccountRequestMetadata? = nil, owner : Owner1? = nil, source_order : OrderParams? = nil)
      request = build_api_request_for_post_sources_source(source: source, amount: amount, expand: expand, mandate: mandate, metadata: metadata, owner: owner, source_order: source_order)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_sources_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Source.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts the &lt;code&gt;metadata&lt;/code&gt; and &lt;code&gt;owner&lt;/code&gt; as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our &lt;a href&#x3D;\&quot;/docs/sources\&quot;&gt;payment method guides&lt;/a&gt; for more detail.&lt;/p&gt;
    # @param source [String]
    # @return nil
    def post_sources_source(*, source : String, amount : Int64? = nil, expand : Array(String)? = nil, mandate : MandateParams? = nil, metadata : PostAccountRequestMetadata? = nil, owner : Owner1? = nil, source_order : OrderParams? = nil, &block : Crest::Response ->)
      build_api_request_for_post_sources_source(source: source, amount: amount, expand: expand, mandate: mandate, metadata: metadata, owner: owner, source_order: source_order).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_sources_source(*, source : String, amount : Int64? = nil, expand : Array(String)? = nil, mandate : MandateParams? = nil, metadata : PostAccountRequestMetadata? = nil, owner : Owner1? = nil, source_order : OrderParams? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_sources_source ..." }
      end
      if @api_client.config.client_side_validation && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_sources_source, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sources/{source}".sub("{" + "source" + "}", URI.encode_path(source.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["mandate"] = mandate.to_s if !mandate.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["owner"] = owner.to_s if !owner.nil?
      form_params["source_order"] = source_order.to_s if !source_order.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_sources_source",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Verify a given source.</p>
    # @param source [String]
    # @param values [Array(String)] The values needed to verify the source.
    # @return [Source]
    def post_sources_source_verify(*, source : String, values : Array(String), expand : Array(String)? = nil)
      data, _status_code, _headers = post_sources_source_verify_with_http_info(source: source, values: values, expand: expand)
      data
    end

    # &lt;p&gt;Verify a given source.&lt;/p&gt;
    # @param source [String]
    # @param values [Array(String)] The values needed to verify the source.
    # @return [Array<(Source, Integer, Hash)>] Source data, response status code and response headers
    def post_sources_source_verify_with_http_info(*, source : String, values : Array(String), expand : Array(String)? = nil)
      request = build_api_request_for_post_sources_source_verify(source: source, values: values, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_sources_source_verify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Source.from_json(data), status_code, headers
    end

    # &lt;p&gt;Verify a given source.&lt;/p&gt;
    # @param source [String]
    # @param values [Array(String)] The values needed to verify the source.
    # @return nil
    def post_sources_source_verify(*, source : String, values : Array(String), expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_sources_source_verify(source: source, values: values, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_sources_source_verify(*, source : String, values : Array(String), expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_sources_source_verify ..." }
      end
      if @api_client.config.client_side_validation && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_sources_source_verify, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/sources/{source}/verify".sub("{" + "source" + "}", URI.encode_path(source.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["values"] = @api_client.build_collection_param(values, "csv") if !values.nil? && !values.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_sources_source_verify",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
    # @param subscription [String] The identifier of the subscription to modify.
    # @return [SubscriptionItem]
    def post_subscription_items(*, subscription : String, billing_thresholds : PostSubscriptionItemsRequestBillingThresholds? = nil, expand : Array(String)? = nil, payment_behavior : String? = nil, price : String? = nil, price_data : RecurringPriceData1? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, quantity : Int64? = nil, tax_rates : PostSubscriptionItemsRequestTaxRates? = nil)
      data, _status_code, _headers = post_subscription_items_with_http_info(subscription: subscription, billing_thresholds: billing_thresholds, expand: expand, payment_behavior: payment_behavior, price: price, price_data: price_data, proration_behavior: proration_behavior, proration_date: proration_date, quantity: quantity, tax_rates: tax_rates)
      data
    end

    # &lt;p&gt;Adds a new item to an existing subscription. No existing items will be changed or replaced.&lt;/p&gt;
    # @param subscription [String] The identifier of the subscription to modify.
    # @return [Array<(SubscriptionItem, Integer, Hash)>] SubscriptionItem data, response status code and response headers
    def post_subscription_items_with_http_info(*, subscription : String, billing_thresholds : PostSubscriptionItemsRequestBillingThresholds? = nil, expand : Array(String)? = nil, payment_behavior : String? = nil, price : String? = nil, price_data : RecurringPriceData1? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, quantity : Int64? = nil, tax_rates : PostSubscriptionItemsRequestTaxRates? = nil)
      request = build_api_request_for_post_subscription_items(subscription: subscription, billing_thresholds: billing_thresholds, expand: expand, payment_behavior: payment_behavior, price: price, price_data: price_data, proration_behavior: proration_behavior, proration_date: proration_date, quantity: quantity, tax_rates: tax_rates)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscription_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionItem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Adds a new item to an existing subscription. No existing items will be changed or replaced.&lt;/p&gt;
    # @param subscription [String] The identifier of the subscription to modify.
    # @return nil
    def post_subscription_items(*, subscription : String, billing_thresholds : PostSubscriptionItemsRequestBillingThresholds? = nil, expand : Array(String)? = nil, payment_behavior : String? = nil, price : String? = nil, price_data : RecurringPriceData1? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, quantity : Int64? = nil, tax_rates : PostSubscriptionItemsRequestTaxRates? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscription_items(subscription: subscription, billing_thresholds: billing_thresholds, expand: expand, payment_behavior: payment_behavior, price: price, price_data: price_data, proration_behavior: proration_behavior, proration_date: proration_date, quantity: quantity, tax_rates: tax_rates).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscription_items(*, subscription : String, billing_thresholds : PostSubscriptionItemsRequestBillingThresholds? = nil, expand : Array(String)? = nil, payment_behavior : String? = nil, price : String? = nil, price_data : RecurringPriceData1? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, quantity : Int64? = nil, tax_rates : PostSubscriptionItemsRequestTaxRates? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscription_items ..." }
      end
      if @api_client.config.client_side_validation && subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription\" when calling DefaultApi.post_subscription_items, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete"]
      if @api_client.config.client_side_validation && !payment_behavior.nil? && !allowable_values.includes?(payment_behavior)
        raise ArgumentError.new("invalid value for \"payment_behavior\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !price.nil? && price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\" when calling DefaultApi.post_subscription_items, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !proration_behavior.nil? && !allowable_values.includes?(proration_behavior)
        raise ArgumentError.new("invalid value for \"proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/subscription_items"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["billing_thresholds"] = billing_thresholds.to_s if !billing_thresholds.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["payment_behavior"] = payment_behavior.to_s if !payment_behavior.nil?
      form_params["price"] = price.to_s if !price.nil?
      form_params["price_data"] = price_data.to_s if !price_data.nil?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?
      form_params["proration_date"] = proration_date.to_s if !proration_date.nil?
      form_params["quantity"] = quantity.to_s if !quantity.nil?
      form_params["subscription"] = subscription.to_s if !subscription.nil?
      form_params["tax_rates"] = tax_rates.to_s if !tax_rates.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscription_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the plan or quantity of an item on a current subscription.</p>
    # @param item [String]
    # @return [SubscriptionItem]
    def post_subscription_items_item(*, item : String, billing_thresholds : PostSubscriptionItemsRequestBillingThresholds? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, price : String? = nil, price_data : RecurringPriceData1? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, quantity : Int64? = nil, tax_rates : PostSubscriptionItemsRequestTaxRates? = nil)
      data, _status_code, _headers = post_subscription_items_item_with_http_info(item: item, billing_thresholds: billing_thresholds, expand: expand, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, price: price, price_data: price_data, proration_behavior: proration_behavior, proration_date: proration_date, quantity: quantity, tax_rates: tax_rates)
      data
    end

    # &lt;p&gt;Updates the plan or quantity of an item on a current subscription.&lt;/p&gt;
    # @param item [String]
    # @return [Array<(SubscriptionItem, Integer, Hash)>] SubscriptionItem data, response status code and response headers
    def post_subscription_items_item_with_http_info(*, item : String, billing_thresholds : PostSubscriptionItemsRequestBillingThresholds? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, price : String? = nil, price_data : RecurringPriceData1? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, quantity : Int64? = nil, tax_rates : PostSubscriptionItemsRequestTaxRates? = nil)
      request = build_api_request_for_post_subscription_items_item(item: item, billing_thresholds: billing_thresholds, expand: expand, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, price: price, price_data: price_data, proration_behavior: proration_behavior, proration_date: proration_date, quantity: quantity, tax_rates: tax_rates)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscription_items_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionItem.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the plan or quantity of an item on a current subscription.&lt;/p&gt;
    # @param item [String]
    # @return nil
    def post_subscription_items_item(*, item : String, billing_thresholds : PostSubscriptionItemsRequestBillingThresholds? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, price : String? = nil, price_data : RecurringPriceData1? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, quantity : Int64? = nil, tax_rates : PostSubscriptionItemsRequestTaxRates? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscription_items_item(item: item, billing_thresholds: billing_thresholds, expand: expand, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, price: price, price_data: price_data, proration_behavior: proration_behavior, proration_date: proration_date, quantity: quantity, tax_rates: tax_rates).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscription_items_item(*, item : String, billing_thresholds : PostSubscriptionItemsRequestBillingThresholds? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, price : String? = nil, price_data : RecurringPriceData1? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, quantity : Int64? = nil, tax_rates : PostSubscriptionItemsRequestTaxRates? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscription_items_item ..." }
      end
      if @api_client.config.client_side_validation && item.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"item\" when calling DefaultApi.post_subscription_items_item, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete"]
      if @api_client.config.client_side_validation && !payment_behavior.nil? && !allowable_values.includes?(payment_behavior)
        raise ArgumentError.new("invalid value for \"payment_behavior\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !price.nil? && price.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"price\" when calling DefaultApi.post_subscription_items_item, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !proration_behavior.nil? && !allowable_values.includes?(proration_behavior)
        raise ArgumentError.new("invalid value for \"proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/subscription_items/{item}".sub("{" + "item" + "}", URI.encode_path(item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["billing_thresholds"] = billing_thresholds.to_s if !billing_thresholds.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["off_session"] = off_session.to_s if !off_session.nil?
      form_params["payment_behavior"] = payment_behavior.to_s if !payment_behavior.nil?
      form_params["price"] = price.to_s if !price.nil?
      form_params["price_data"] = price_data.to_s if !price_data.nil?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?
      form_params["proration_date"] = proration_date.to_s if !proration_date.nil?
      form_params["quantity"] = quantity.to_s if !quantity.nil?
      form_params["tax_rates"] = tax_rates.to_s if !tax_rates.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscription_items_item",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>  <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href=\"https://stripe.com/docs/billing/subscriptions/metered-billing\">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>  <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href=\"/docs/api/plans/create#create_plan-aggregate_usage\">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>  <p>The default pricing model for metered billing is <a href=\"/docs/api/plans/object#plan_object-billing_scheme\">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href=\"https://stripe.com/docs/billing/subscriptions/tiers\">tiered pricing</a> model.</p>
    # @param subscription_item [String]
    # @param quantity [Int64] The usage quantity for the specified timestamp.
    # @return [UsageRecord]
    def post_subscription_items_subscription_item_usage_records(*, subscription_item : String, quantity : Int64, action : String? = nil, expand : Array(String)? = nil, timestamp : PostSubscriptionItemsSubscriptionItemUsageRecordsRequestTimestamp? = nil)
      data, _status_code, _headers = post_subscription_items_subscription_item_usage_records_with_http_info(subscription_item: subscription_item, quantity: quantity, action: action, expand: expand, timestamp: timestamp)
      data
    end

    # &lt;p&gt;Creates a usage record for a specified subscription item and date, and fills it with a quantity.&lt;/p&gt;  &lt;p&gt;Usage records provide &lt;code&gt;quantity&lt;/code&gt; information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the &lt;a href&#x3D;\&quot;https://stripe.com/docs/billing/subscriptions/metered-billing\&quot;&gt;metered billing&lt;/a&gt; plan, Stripe helps you send accurate invoices to your customers.&lt;/p&gt;  &lt;p&gt;The default calculation for usage is to add up all the &lt;code&gt;quantity&lt;/code&gt; values of the usage records within a billing period. You can change this default behavior with the billing plan’s &lt;code&gt;aggregate_usage&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/api/plans/create#create_plan-aggregate_usage\&quot;&gt;parameter&lt;/a&gt;. When there is more than one usage record with the same timestamp, Stripe adds the &lt;code&gt;quantity&lt;/code&gt; values together. In most cases, this is the desired resolution, however, you can change this behavior with the &lt;code&gt;action&lt;/code&gt; parameter.&lt;/p&gt;  &lt;p&gt;The default pricing model for metered billing is &lt;a href&#x3D;\&quot;/docs/api/plans/object#plan_object-billing_scheme\&quot;&gt;per-unit pricing&lt;/a&gt;. For finer granularity, you can configure metered billing to have a &lt;a href&#x3D;\&quot;https://stripe.com/docs/billing/subscriptions/tiers\&quot;&gt;tiered pricing&lt;/a&gt; model.&lt;/p&gt;
    # @param subscription_item [String]
    # @param quantity [Int64] The usage quantity for the specified timestamp.
    # @return [Array<(UsageRecord, Integer, Hash)>] UsageRecord data, response status code and response headers
    def post_subscription_items_subscription_item_usage_records_with_http_info(*, subscription_item : String, quantity : Int64, action : String? = nil, expand : Array(String)? = nil, timestamp : PostSubscriptionItemsSubscriptionItemUsageRecordsRequestTimestamp? = nil)
      request = build_api_request_for_post_subscription_items_subscription_item_usage_records(subscription_item: subscription_item, quantity: quantity, action: action, expand: expand, timestamp: timestamp)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscription_items_subscription_item_usage_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return UsageRecord.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a usage record for a specified subscription item and date, and fills it with a quantity.&lt;/p&gt;  &lt;p&gt;Usage records provide &lt;code&gt;quantity&lt;/code&gt; information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the &lt;a href&#x3D;\&quot;https://stripe.com/docs/billing/subscriptions/metered-billing\&quot;&gt;metered billing&lt;/a&gt; plan, Stripe helps you send accurate invoices to your customers.&lt;/p&gt;  &lt;p&gt;The default calculation for usage is to add up all the &lt;code&gt;quantity&lt;/code&gt; values of the usage records within a billing period. You can change this default behavior with the billing plan’s &lt;code&gt;aggregate_usage&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/api/plans/create#create_plan-aggregate_usage\&quot;&gt;parameter&lt;/a&gt;. When there is more than one usage record with the same timestamp, Stripe adds the &lt;code&gt;quantity&lt;/code&gt; values together. In most cases, this is the desired resolution, however, you can change this behavior with the &lt;code&gt;action&lt;/code&gt; parameter.&lt;/p&gt;  &lt;p&gt;The default pricing model for metered billing is &lt;a href&#x3D;\&quot;/docs/api/plans/object#plan_object-billing_scheme\&quot;&gt;per-unit pricing&lt;/a&gt;. For finer granularity, you can configure metered billing to have a &lt;a href&#x3D;\&quot;https://stripe.com/docs/billing/subscriptions/tiers\&quot;&gt;tiered pricing&lt;/a&gt; model.&lt;/p&gt;
    # @param subscription_item [String]
    # @param quantity [Int64] The usage quantity for the specified timestamp.
    # @return nil
    def post_subscription_items_subscription_item_usage_records(*, subscription_item : String, quantity : Int64, action : String? = nil, expand : Array(String)? = nil, timestamp : PostSubscriptionItemsSubscriptionItemUsageRecordsRequestTimestamp? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscription_items_subscription_item_usage_records(subscription_item: subscription_item, quantity: quantity, action: action, expand: expand, timestamp: timestamp).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscription_items_subscription_item_usage_records(*, subscription_item : String, quantity : Int64, action : String? = nil, expand : Array(String)? = nil, timestamp : PostSubscriptionItemsSubscriptionItemUsageRecordsRequestTimestamp? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscription_items_subscription_item_usage_records ..." }
      end
      allowable_values = ["increment", "set"]
      if @api_client.config.client_side_validation && !action.nil? && !allowable_values.includes?(action)
        raise ArgumentError.new("invalid value for \"action\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/subscription_items/{subscription_item}/usage_records".sub("{" + "subscription_item" + "}", URI.encode_path(subscription_item.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["action"] = action.to_s if !action.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["quantity"] = quantity.to_s if !quantity.nil?
      form_params["timestamp"] = timestamp.to_s if !timestamp.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscription_items_subscription_item_usage_records",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
    # @return [SubscriptionSchedule]
    def post_subscription_schedules(*, customer : String? = nil, default_settings : DefaultSettingsParams? = nil, end_behavior : String? = nil, expand : Array(String)? = nil, from_subscription : String? = nil, metadata : PostAccountRequestMetadata? = nil, phases : Array(PhaseConfigurationParams)? = nil, start_date : PostSubscriptionSchedulesRequestStartDate? = nil)
      data, _status_code, _headers = post_subscription_schedules_with_http_info(customer: customer, default_settings: default_settings, end_behavior: end_behavior, expand: expand, from_subscription: from_subscription, metadata: metadata, phases: phases, start_date: start_date)
      data
    end

    # &lt;p&gt;Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;
    # @return [Array<(SubscriptionSchedule, Integer, Hash)>] SubscriptionSchedule data, response status code and response headers
    def post_subscription_schedules_with_http_info(*, customer : String? = nil, default_settings : DefaultSettingsParams? = nil, end_behavior : String? = nil, expand : Array(String)? = nil, from_subscription : String? = nil, metadata : PostAccountRequestMetadata? = nil, phases : Array(PhaseConfigurationParams)? = nil, start_date : PostSubscriptionSchedulesRequestStartDate? = nil)
      request = build_api_request_for_post_subscription_schedules(customer: customer, default_settings: default_settings, end_behavior: end_behavior, expand: expand, from_subscription: from_subscription, metadata: metadata, phases: phases, start_date: start_date)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscription_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionSchedule.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;
    # @return nil
    def post_subscription_schedules(*, customer : String? = nil, default_settings : DefaultSettingsParams? = nil, end_behavior : String? = nil, expand : Array(String)? = nil, from_subscription : String? = nil, metadata : PostAccountRequestMetadata? = nil, phases : Array(PhaseConfigurationParams)? = nil, start_date : PostSubscriptionSchedulesRequestStartDate? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscription_schedules(customer: customer, default_settings: default_settings, end_behavior: end_behavior, expand: expand, from_subscription: from_subscription, metadata: metadata, phases: phases, start_date: start_date).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscription_schedules(*, customer : String? = nil, default_settings : DefaultSettingsParams? = nil, end_behavior : String? = nil, expand : Array(String)? = nil, from_subscription : String? = nil, metadata : PostAccountRequestMetadata? = nil, phases : Array(PhaseConfigurationParams)? = nil, start_date : PostSubscriptionSchedulesRequestStartDate? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscription_schedules ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_subscription_schedules, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["cancel", "none", "release", "renew"]
      if @api_client.config.client_side_validation && !end_behavior.nil? && !allowable_values.includes?(end_behavior)
        raise ArgumentError.new("invalid value for \"end_behavior\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !from_subscription.nil? && from_subscription.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"from_subscription\" when calling DefaultApi.post_subscription_schedules, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscription_schedules"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["default_settings"] = default_settings.to_s if !default_settings.nil?
      form_params["end_behavior"] = end_behavior.to_s if !end_behavior.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["from_subscription"] = from_subscription.to_s if !from_subscription.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["phases"] = @api_client.build_collection_param(phases, "csv") if !phases.nil? && !phases.empty?
      form_params["start_date"] = start_date.to_s if !start_date.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscription_schedules",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing subscription schedule.</p>
    # @param schedule [String]
    # @return [SubscriptionSchedule]
    def post_subscription_schedules_schedule(*, schedule : String, default_settings : DefaultSettingsParams? = nil, end_behavior : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, phases : Array(PhaseConfigurationParams1)? = nil, proration_behavior : String? = nil)
      data, _status_code, _headers = post_subscription_schedules_schedule_with_http_info(schedule: schedule, default_settings: default_settings, end_behavior: end_behavior, expand: expand, metadata: metadata, phases: phases, proration_behavior: proration_behavior)
      data
    end

    # &lt;p&gt;Updates an existing subscription schedule.&lt;/p&gt;
    # @param schedule [String]
    # @return [Array<(SubscriptionSchedule, Integer, Hash)>] SubscriptionSchedule data, response status code and response headers
    def post_subscription_schedules_schedule_with_http_info(*, schedule : String, default_settings : DefaultSettingsParams? = nil, end_behavior : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, phases : Array(PhaseConfigurationParams1)? = nil, proration_behavior : String? = nil)
      request = build_api_request_for_post_subscription_schedules_schedule(schedule: schedule, default_settings: default_settings, end_behavior: end_behavior, expand: expand, metadata: metadata, phases: phases, proration_behavior: proration_behavior)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscription_schedules_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionSchedule.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing subscription schedule.&lt;/p&gt;
    # @param schedule [String]
    # @return nil
    def post_subscription_schedules_schedule(*, schedule : String, default_settings : DefaultSettingsParams? = nil, end_behavior : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, phases : Array(PhaseConfigurationParams1)? = nil, proration_behavior : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscription_schedules_schedule(schedule: schedule, default_settings: default_settings, end_behavior: end_behavior, expand: expand, metadata: metadata, phases: phases, proration_behavior: proration_behavior).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscription_schedules_schedule(*, schedule : String, default_settings : DefaultSettingsParams? = nil, end_behavior : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, phases : Array(PhaseConfigurationParams1)? = nil, proration_behavior : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscription_schedules_schedule ..." }
      end
      if @api_client.config.client_side_validation && schedule.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"schedule\" when calling DefaultApi.post_subscription_schedules_schedule, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["cancel", "none", "release", "renew"]
      if @api_client.config.client_side_validation && !end_behavior.nil? && !allowable_values.includes?(end_behavior)
        raise ArgumentError.new("invalid value for \"end_behavior\", must be one of #{allowable_values}")
      end
      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !proration_behavior.nil? && !allowable_values.includes?(proration_behavior)
        raise ArgumentError.new("invalid value for \"proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/subscription_schedules/{schedule}".sub("{" + "schedule" + "}", URI.encode_path(schedule.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["default_settings"] = default_settings.to_s if !default_settings.nil?
      form_params["end_behavior"] = end_behavior.to_s if !end_behavior.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["phases"] = @api_client.build_collection_param(phases, "csv") if !phases.nil? && !phases.empty?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscription_schedules_schedule",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
    # @param schedule [String]
    # @return [SubscriptionSchedule]
    def post_subscription_schedules_schedule_cancel(*, schedule : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil)
      data, _status_code, _headers = post_subscription_schedules_schedule_cancel_with_http_info(schedule: schedule, expand: expand, invoice_now: invoice_now, prorate: prorate)
      data
    end

    # &lt;p&gt;Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
    # @param schedule [String]
    # @return [Array<(SubscriptionSchedule, Integer, Hash)>] SubscriptionSchedule data, response status code and response headers
    def post_subscription_schedules_schedule_cancel_with_http_info(*, schedule : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil)
      request = build_api_request_for_post_subscription_schedules_schedule_cancel(schedule: schedule, expand: expand, invoice_now: invoice_now, prorate: prorate)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscription_schedules_schedule_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionSchedule.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
    # @param schedule [String]
    # @return nil
    def post_subscription_schedules_schedule_cancel(*, schedule : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscription_schedules_schedule_cancel(schedule: schedule, expand: expand, invoice_now: invoice_now, prorate: prorate).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscription_schedules_schedule_cancel(*, schedule : String, expand : Array(String)? = nil, invoice_now : Bool? = nil, prorate : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscription_schedules_schedule_cancel ..." }
      end
      if @api_client.config.client_side_validation && schedule.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"schedule\" when calling DefaultApi.post_subscription_schedules_schedule_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscription_schedules/{schedule}/cancel".sub("{" + "schedule" + "}", URI.encode_path(schedule.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["invoice_now"] = invoice_now.to_s if !invoice_now.nil?
      form_params["prorate"] = prorate.to_s if !prorate.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscription_schedules_schedule_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
    # @param schedule [String]
    # @return [SubscriptionSchedule]
    def post_subscription_schedules_schedule_release(*, schedule : String, expand : Array(String)? = nil, preserve_cancel_date : Bool? = nil)
      data, _status_code, _headers = post_subscription_schedules_schedule_release_with_http_info(schedule: schedule, expand: expand, preserve_cancel_date: preserve_cancel_date)
      data
    end

    # &lt;p&gt;Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;. If the subscription schedule is currently associated with a subscription, releasing it will remove its &lt;code&gt;subscription&lt;/code&gt; property and set the subscription’s ID to the &lt;code&gt;released_subscription&lt;/code&gt; property.&lt;/p&gt;
    # @param schedule [String]
    # @return [Array<(SubscriptionSchedule, Integer, Hash)>] SubscriptionSchedule data, response status code and response headers
    def post_subscription_schedules_schedule_release_with_http_info(*, schedule : String, expand : Array(String)? = nil, preserve_cancel_date : Bool? = nil)
      request = build_api_request_for_post_subscription_schedules_schedule_release(schedule: schedule, expand: expand, preserve_cancel_date: preserve_cancel_date)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscription_schedules_schedule_release\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return SubscriptionSchedule.from_json(data), status_code, headers
    end

    # &lt;p&gt;Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;. If the subscription schedule is currently associated with a subscription, releasing it will remove its &lt;code&gt;subscription&lt;/code&gt; property and set the subscription’s ID to the &lt;code&gt;released_subscription&lt;/code&gt; property.&lt;/p&gt;
    # @param schedule [String]
    # @return nil
    def post_subscription_schedules_schedule_release(*, schedule : String, expand : Array(String)? = nil, preserve_cancel_date : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscription_schedules_schedule_release(schedule: schedule, expand: expand, preserve_cancel_date: preserve_cancel_date).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscription_schedules_schedule_release(*, schedule : String, expand : Array(String)? = nil, preserve_cancel_date : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscription_schedules_schedule_release ..." }
      end
      if @api_client.config.client_side_validation && schedule.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"schedule\" when calling DefaultApi.post_subscription_schedules_schedule_release, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/subscription_schedules/{schedule}/release".sub("{" + "schedule" + "}", URI.encode_path(schedule.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["preserve_cancel_date"] = preserve_cancel_date.to_s if !preserve_cancel_date.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscription_schedules_schedule_release",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>  <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request. The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>  <p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href=\"/docs/billing/subscriptions/subscription-schedules#managing\">subscription schedules</a> instead. Schedules provide the flexibility to model more complex billing configurations that change over time.</p>
    # @param customer [String] The identifier of the customer to subscribe.
    # @return [Subscription]
    def post_subscriptions(*, customer : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, backdate_start_date : Int64? = nil, billing_cycle_anchor : Int64? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : Int64? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? = nil, description : String? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemCreateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, transfer_data : TransferDataSpecs3? = nil, trial_end : PostCustomersCustomerSubscriptionsRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, trial_period_days : Int64? = nil)
      data, _status_code, _headers = post_subscriptions_with_http_info(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, expand: expand, items: items, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days)
      data
    end

    # &lt;p&gt;Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;  &lt;p&gt;When you create a subscription with &lt;code&gt;collection_method&#x3D;charge_automatically&lt;/code&gt;, the first invoice is finalized as part of the request. The &lt;code&gt;payment_behavior&lt;/code&gt; parameter determines the exact behavior of the initial payment.&lt;/p&gt;  &lt;p&gt;To start subscriptions where the first invoice always begins in a &lt;code&gt;draft&lt;/code&gt; status, use &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/subscription-schedules#managing\&quot;&gt;subscription schedules&lt;/a&gt; instead. Schedules provide the flexibility to model more complex billing configurations that change over time.&lt;/p&gt;
    # @param customer [String] The identifier of the customer to subscribe.
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def post_subscriptions_with_http_info(*, customer : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, backdate_start_date : Int64? = nil, billing_cycle_anchor : Int64? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : Int64? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? = nil, description : String? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemCreateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, transfer_data : TransferDataSpecs3? = nil, trial_end : PostCustomersCustomerSubscriptionsRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, trial_period_days : Int64? = nil)
      request = build_api_request_for_post_subscriptions(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, expand: expand, items: items, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Subscription.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;  &lt;p&gt;When you create a subscription with &lt;code&gt;collection_method&#x3D;charge_automatically&lt;/code&gt;, the first invoice is finalized as part of the request. The &lt;code&gt;payment_behavior&lt;/code&gt; parameter determines the exact behavior of the initial payment.&lt;/p&gt;  &lt;p&gt;To start subscriptions where the first invoice always begins in a &lt;code&gt;draft&lt;/code&gt; status, use &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/subscription-schedules#managing\&quot;&gt;subscription schedules&lt;/a&gt; instead. Schedules provide the flexibility to model more complex billing configurations that change over time.&lt;/p&gt;
    # @param customer [String] The identifier of the customer to subscribe.
    # @return nil
    def post_subscriptions(*, customer : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, backdate_start_date : Int64? = nil, billing_cycle_anchor : Int64? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : Int64? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? = nil, description : String? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemCreateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, transfer_data : TransferDataSpecs3? = nil, trial_end : PostCustomersCustomerSubscriptionsRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, trial_period_days : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscriptions(customer: customer, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, backdate_start_date: backdate_start_date, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, expand: expand, items: items, metadata: metadata, off_session: off_session, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan, trial_period_days: trial_period_days).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscriptions(*, customer : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, backdate_start_date : Int64? = nil, billing_cycle_anchor : Int64? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : Int64? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? = nil, description : String? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemCreateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, transfer_data : TransferDataSpecs3? = nil, trial_end : PostCustomersCustomerSubscriptionsRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, trial_period_days : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscriptions ..." }
      end
      if @api_client.config.client_side_validation && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.post_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_payment_method.nil? && default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\" when calling DefaultApi.post_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_source.nil? && default_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_source\" when calling DefaultApi.post_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 500
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_subscriptions, the character length must be smaller than or equal to 500.")
      end

      allowable_values = ["allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete"]
      if @api_client.config.client_side_validation && !payment_behavior.nil? && !allowable_values.includes?(payment_behavior)
        raise ArgumentError.new("invalid value for \"payment_behavior\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !promotion_code.nil? && promotion_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"promotion_code\" when calling DefaultApi.post_subscriptions, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !proration_behavior.nil? && !allowable_values.includes?(proration_behavior)
        raise ArgumentError.new("invalid value for \"proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/subscriptions"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["add_invoice_items"] = @api_client.build_collection_param(add_invoice_items, "csv") if !add_invoice_items.nil? && !add_invoice_items.empty?
      form_params["application_fee_percent"] = application_fee_percent.to_s if !application_fee_percent.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["backdate_start_date"] = backdate_start_date.to_s if !backdate_start_date.nil?
      form_params["billing_cycle_anchor"] = billing_cycle_anchor.to_s if !billing_cycle_anchor.nil?
      form_params["billing_thresholds"] = billing_thresholds.to_s if !billing_thresholds.nil?
      form_params["cancel_at"] = cancel_at.to_s if !cancel_at.nil?
      form_params["cancel_at_period_end"] = cancel_at_period_end.to_s if !cancel_at_period_end.nil?
      form_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      form_params["coupon"] = coupon.to_s if !coupon.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["days_until_due"] = days_until_due.to_s if !days_until_due.nil?
      form_params["default_payment_method"] = default_payment_method.to_s if !default_payment_method.nil?
      form_params["default_source"] = default_source.to_s if !default_source.nil?
      form_params["default_tax_rates"] = default_tax_rates.to_s if !default_tax_rates.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["items"] = @api_client.build_collection_param(items, "csv") if !items.nil? && !items.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["off_session"] = off_session.to_s if !off_session.nil?
      form_params["payment_behavior"] = payment_behavior.to_s if !payment_behavior.nil?
      form_params["payment_settings"] = payment_settings.to_s if !payment_settings.nil?
      form_params["pending_invoice_item_interval"] = pending_invoice_item_interval.to_s if !pending_invoice_item_interval.nil?
      form_params["promotion_code"] = promotion_code.to_s if !promotion_code.nil?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?
      form_params["trial_end"] = trial_end.to_s if !trial_end.nil?
      form_params["trial_from_plan"] = trial_from_plan.to_s if !trial_from_plan.nil?
      form_params["trial_period_days"] = trial_period_days.to_s if !trial_period_days.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscriptions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href=\"#upcoming_invoice\">upcoming invoice</a> endpoint.</p>
    # @param subscription_exposed_id [String]
    # @return [Subscription]
    def post_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, billing_cycle_anchor : String? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil, description : String? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemUpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, pause_collection : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, transfer_data : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, trial_from_plan : Bool? = nil)
      data, _status_code, _headers = post_subscriptions_subscription_exposed_id_with_http_info(subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, expand: expand, items: items, metadata: metadata, off_session: off_session, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan)
      data
    end

    # &lt;p&gt;Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the &lt;a href&#x3D;\&quot;#upcoming_invoice\&quot;&gt;upcoming invoice&lt;/a&gt; endpoint.&lt;/p&gt;
    # @param subscription_exposed_id [String]
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def post_subscriptions_subscription_exposed_id_with_http_info(*, subscription_exposed_id : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, billing_cycle_anchor : String? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil, description : String? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemUpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, pause_collection : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, transfer_data : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, trial_from_plan : Bool? = nil)
      request = build_api_request_for_post_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, expand: expand, items: items, metadata: metadata, off_session: off_session, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_subscriptions_subscription_exposed_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Subscription.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the &lt;a href&#x3D;\&quot;#upcoming_invoice\&quot;&gt;upcoming invoice&lt;/a&gt; endpoint.&lt;/p&gt;
    # @param subscription_exposed_id [String]
    # @return nil
    def post_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, billing_cycle_anchor : String? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil, description : String? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemUpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, pause_collection : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, transfer_data : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, trial_from_plan : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_subscriptions_subscription_exposed_id(subscription_exposed_id: subscription_exposed_id, add_invoice_items: add_invoice_items, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_cycle_anchor: billing_cycle_anchor, billing_thresholds: billing_thresholds, cancel_at: cancel_at, cancel_at_period_end: cancel_at_period_end, collection_method: collection_method, coupon: coupon, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, expand: expand, items: items, metadata: metadata, off_session: off_session, pause_collection: pause_collection, payment_behavior: payment_behavior, payment_settings: payment_settings, pending_invoice_item_interval: pending_invoice_item_interval, promotion_code: promotion_code, proration_behavior: proration_behavior, proration_date: proration_date, transfer_data: transfer_data, trial_end: trial_end, trial_from_plan: trial_from_plan).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_subscriptions_subscription_exposed_id(*, subscription_exposed_id : String, add_invoice_items : Array(AddInvoiceItemEntry)? = nil, application_fee_percent : Float64? = nil, automatic_tax : AutomaticTaxConfig? = nil, billing_cycle_anchor : String? = nil, billing_thresholds : PostCustomersCustomerSubscriptionsRequestBillingThresholds? = nil, cancel_at : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? = nil, cancel_at_period_end : Bool? = nil, collection_method : String? = nil, coupon : String? = nil, days_until_due : Int64? = nil, default_payment_method : String? = nil, default_source : String? = nil, default_tax_rates : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? = nil, description : String? = nil, expand : Array(String)? = nil, items : Array(SubscriptionItemUpdateParams)? = nil, metadata : PostAccountRequestMetadata? = nil, off_session : Bool? = nil, pause_collection : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? = nil, payment_behavior : String? = nil, payment_settings : PaymentSettings? = nil, pending_invoice_item_interval : PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? = nil, promotion_code : String? = nil, proration_behavior : String? = nil, proration_date : Int64? = nil, transfer_data : PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? = nil, trial_end : PostCustomersCustomerRequestTrialEnd? = nil, trial_from_plan : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_subscriptions_subscription_exposed_id ..." }
      end
      if @api_client.config.client_side_validation && subscription_exposed_id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"subscription_exposed_id\" when calling DefaultApi.post_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["now", "unchanged"]
      if @api_client.config.client_side_validation && !billing_cycle_anchor.nil? && !allowable_values.includes?(billing_cycle_anchor)
        raise ArgumentError.new("invalid value for \"billing_cycle_anchor\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !billing_cycle_anchor.nil? && billing_cycle_anchor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"billing_cycle_anchor\" when calling DefaultApi.post_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["charge_automatically", "send_invoice"]
      if @api_client.config.client_side_validation && !collection_method.nil? && !allowable_values.includes?(collection_method)
        raise ArgumentError.new("invalid value for \"collection_method\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !coupon.nil? && coupon.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"coupon\" when calling DefaultApi.post_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_payment_method.nil? && default_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_payment_method\" when calling DefaultApi.post_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !default_source.nil? && default_source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"default_source\" when calling DefaultApi.post_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 500
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 500.")
      end

      allowable_values = ["allow_incomplete", "default_incomplete", "error_if_incomplete", "pending_if_incomplete"]
      if @api_client.config.client_side_validation && !payment_behavior.nil? && !allowable_values.includes?(payment_behavior)
        raise ArgumentError.new("invalid value for \"payment_behavior\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !promotion_code.nil? && promotion_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"promotion_code\" when calling DefaultApi.post_subscriptions_subscription_exposed_id, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["always_invoice", "create_prorations", "none"]
      if @api_client.config.client_side_validation && !proration_behavior.nil? && !allowable_values.includes?(proration_behavior)
        raise ArgumentError.new("invalid value for \"proration_behavior\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/subscriptions/{subscription_exposed_id}".sub("{" + "subscription_exposed_id" + "}", URI.encode_path(subscription_exposed_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["add_invoice_items"] = @api_client.build_collection_param(add_invoice_items, "csv") if !add_invoice_items.nil? && !add_invoice_items.empty?
      form_params["application_fee_percent"] = application_fee_percent.to_s if !application_fee_percent.nil?
      form_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      form_params["billing_cycle_anchor"] = billing_cycle_anchor.to_s if !billing_cycle_anchor.nil?
      form_params["billing_thresholds"] = billing_thresholds.to_s if !billing_thresholds.nil?
      form_params["cancel_at"] = cancel_at.to_s if !cancel_at.nil?
      form_params["cancel_at_period_end"] = cancel_at_period_end.to_s if !cancel_at_period_end.nil?
      form_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      form_params["coupon"] = coupon.to_s if !coupon.nil?
      form_params["days_until_due"] = days_until_due.to_s if !days_until_due.nil?
      form_params["default_payment_method"] = default_payment_method.to_s if !default_payment_method.nil?
      form_params["default_source"] = default_source.to_s if !default_source.nil?
      form_params["default_tax_rates"] = default_tax_rates.to_s if !default_tax_rates.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["items"] = @api_client.build_collection_param(items, "csv") if !items.nil? && !items.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["off_session"] = off_session.to_s if !off_session.nil?
      form_params["pause_collection"] = pause_collection.to_s if !pause_collection.nil?
      form_params["payment_behavior"] = payment_behavior.to_s if !payment_behavior.nil?
      form_params["payment_settings"] = payment_settings.to_s if !payment_settings.nil?
      form_params["pending_invoice_item_interval"] = pending_invoice_item_interval.to_s if !pending_invoice_item_interval.nil?
      form_params["promotion_code"] = promotion_code.to_s if !promotion_code.nil?
      form_params["proration_behavior"] = proration_behavior.to_s if !proration_behavior.nil?
      form_params["proration_date"] = proration_date.to_s if !proration_date.nil?
      form_params["transfer_data"] = transfer_data.to_s if !transfer_data.nil?
      form_params["trial_end"] = trial_end.to_s if !trial_end.nil?
      form_params["trial_from_plan"] = trial_from_plan.to_s if !trial_from_plan.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_subscriptions_subscription_exposed_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new tax rate.</p>
    # @param display_name [String] The display name of the tax rate, which will be shown to users.
    # @param inclusive [Bool] This specifies if the tax rate is inclusive or exclusive.
    # @param percentage [Float64] This represents the tax rate percent out of 100.
    # @return [TaxRate]
    def post_tax_rates(*, display_name : String, inclusive : Bool, percentage : Float64, active : Bool? = nil, country : String? = nil, description : String? = nil, expand : Array(String)? = nil, jurisdiction : String? = nil, state : String? = nil, tax_type : String? = nil)
      data, _status_code, _headers = post_tax_rates_with_http_info(display_name: display_name, inclusive: inclusive, percentage: percentage, active: active, country: country, description: description, expand: expand, jurisdiction: jurisdiction, state: state, tax_type: tax_type)
      data
    end

    # &lt;p&gt;Creates a new tax rate.&lt;/p&gt;
    # @param display_name [String] The display name of the tax rate, which will be shown to users.
    # @param inclusive [Bool] This specifies if the tax rate is inclusive or exclusive.
    # @param percentage [Float64] This represents the tax rate percent out of 100.
    # @return [Array<(TaxRate, Integer, Hash)>] TaxRate data, response status code and response headers
    def post_tax_rates_with_http_info(*, display_name : String, inclusive : Bool, percentage : Float64, active : Bool? = nil, country : String? = nil, description : String? = nil, expand : Array(String)? = nil, jurisdiction : String? = nil, state : String? = nil, tax_type : String? = nil)
      request = build_api_request_for_post_tax_rates(display_name: display_name, inclusive: inclusive, percentage: percentage, active: active, country: country, description: description, expand: expand, jurisdiction: jurisdiction, state: state, tax_type: tax_type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_tax_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TaxRate.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new tax rate.&lt;/p&gt;
    # @param display_name [String] The display name of the tax rate, which will be shown to users.
    # @param inclusive [Bool] This specifies if the tax rate is inclusive or exclusive.
    # @param percentage [Float64] This represents the tax rate percent out of 100.
    # @return nil
    def post_tax_rates(*, display_name : String, inclusive : Bool, percentage : Float64, active : Bool? = nil, country : String? = nil, description : String? = nil, expand : Array(String)? = nil, jurisdiction : String? = nil, state : String? = nil, tax_type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_tax_rates(display_name: display_name, inclusive: inclusive, percentage: percentage, active: active, country: country, description: description, expand: expand, jurisdiction: jurisdiction, state: state, tax_type: tax_type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_tax_rates(*, display_name : String, inclusive : Bool, percentage : Float64, active : Bool? = nil, country : String? = nil, description : String? = nil, expand : Array(String)? = nil, jurisdiction : String? = nil, state : String? = nil, tax_type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_tax_rates ..." }
      end
      if @api_client.config.client_side_validation && display_name.to_s.size > 50
        raise ArgumentError.new("invalid value for \"display_name\" when calling DefaultApi.post_tax_rates, the character length must be smaller than or equal to 50.")
      end

      if @api_client.config.client_side_validation && !country.nil? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\" when calling DefaultApi.post_tax_rates, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_tax_rates, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !jurisdiction.nil? && jurisdiction.to_s.size > 50
        raise ArgumentError.new("invalid value for \"jurisdiction\" when calling DefaultApi.post_tax_rates, the character length must be smaller than or equal to 50.")
      end

      if @api_client.config.client_side_validation && !state.nil? && state.to_s.size > 2
        raise ArgumentError.new("invalid value for \"state\" when calling DefaultApi.post_tax_rates, the character length must be smaller than or equal to 2.")
      end

      allowable_values = ["gst", "hst", "jct", "pst", "qst", "rst", "sales_tax", "vat"]
      if @api_client.config.client_side_validation && !tax_type.nil? && !allowable_values.includes?(tax_type)
        raise ArgumentError.new("invalid value for \"tax_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/tax_rates"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["country"] = country.to_s if !country.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["display_name"] = display_name.to_s if !display_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["inclusive"] = inclusive.to_s if !inclusive.nil?
      form_params["jurisdiction"] = jurisdiction.to_s if !jurisdiction.nil?
      form_params["percentage"] = percentage.to_s if !percentage.nil?
      form_params["state"] = state.to_s if !state.nil?
      form_params["tax_type"] = tax_type.to_s if !tax_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_tax_rates",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an existing tax rate.</p>
    # @param tax_rate [String]
    # @return [TaxRate]
    def post_tax_rates_tax_rate(*, tax_rate : String, active : Bool? = nil, country : String? = nil, description : String? = nil, display_name : String? = nil, expand : Array(String)? = nil, jurisdiction : String? = nil, metadata : PostAccountRequestMetadata? = nil, state : String? = nil, tax_type : String? = nil)
      data, _status_code, _headers = post_tax_rates_tax_rate_with_http_info(tax_rate: tax_rate, active: active, country: country, description: description, display_name: display_name, expand: expand, jurisdiction: jurisdiction, metadata: metadata, state: state, tax_type: tax_type)
      data
    end

    # &lt;p&gt;Updates an existing tax rate.&lt;/p&gt;
    # @param tax_rate [String]
    # @return [Array<(TaxRate, Integer, Hash)>] TaxRate data, response status code and response headers
    def post_tax_rates_tax_rate_with_http_info(*, tax_rate : String, active : Bool? = nil, country : String? = nil, description : String? = nil, display_name : String? = nil, expand : Array(String)? = nil, jurisdiction : String? = nil, metadata : PostAccountRequestMetadata? = nil, state : String? = nil, tax_type : String? = nil)
      request = build_api_request_for_post_tax_rates_tax_rate(tax_rate: tax_rate, active: active, country: country, description: description, display_name: display_name, expand: expand, jurisdiction: jurisdiction, metadata: metadata, state: state, tax_type: tax_type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_tax_rates_tax_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TaxRate.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates an existing tax rate.&lt;/p&gt;
    # @param tax_rate [String]
    # @return nil
    def post_tax_rates_tax_rate(*, tax_rate : String, active : Bool? = nil, country : String? = nil, description : String? = nil, display_name : String? = nil, expand : Array(String)? = nil, jurisdiction : String? = nil, metadata : PostAccountRequestMetadata? = nil, state : String? = nil, tax_type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_tax_rates_tax_rate(tax_rate: tax_rate, active: active, country: country, description: description, display_name: display_name, expand: expand, jurisdiction: jurisdiction, metadata: metadata, state: state, tax_type: tax_type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_tax_rates_tax_rate(*, tax_rate : String, active : Bool? = nil, country : String? = nil, description : String? = nil, display_name : String? = nil, expand : Array(String)? = nil, jurisdiction : String? = nil, metadata : PostAccountRequestMetadata? = nil, state : String? = nil, tax_type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_tax_rates_tax_rate ..." }
      end
      if @api_client.config.client_side_validation && tax_rate.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"tax_rate\" when calling DefaultApi.post_tax_rates_tax_rate, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !country.nil? && country.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"country\" when calling DefaultApi.post_tax_rates_tax_rate, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_tax_rates_tax_rate, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !display_name.nil? && display_name.to_s.size > 50
        raise ArgumentError.new("invalid value for \"display_name\" when calling DefaultApi.post_tax_rates_tax_rate, the character length must be smaller than or equal to 50.")
      end

      if @api_client.config.client_side_validation && !jurisdiction.nil? && jurisdiction.to_s.size > 50
        raise ArgumentError.new("invalid value for \"jurisdiction\" when calling DefaultApi.post_tax_rates_tax_rate, the character length must be smaller than or equal to 50.")
      end

      if @api_client.config.client_side_validation && !state.nil? && state.to_s.size > 2
        raise ArgumentError.new("invalid value for \"state\" when calling DefaultApi.post_tax_rates_tax_rate, the character length must be smaller than or equal to 2.")
      end

      allowable_values = ["gst", "hst", "jct", "pst", "qst", "rst", "sales_tax", "vat"]
      if @api_client.config.client_side_validation && !tax_type.nil? && !allowable_values.includes?(tax_type)
        raise ArgumentError.new("invalid value for \"tax_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/tax_rates/{tax_rate}".sub("{" + "tax_rate" + "}", URI.encode_path(tax_rate.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["active"] = active.to_s if !active.nil?
      form_params["country"] = country.to_s if !country.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["display_name"] = display_name.to_s if !display_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["jurisdiction"] = jurisdiction.to_s if !jurisdiction.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["state"] = state.to_s if !state.nil?
      form_params["tax_type"] = tax_type.to_s if !tax_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_tax_rates_tax_rate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Configuration</code> object.</p>
    # @return [TerminalConfiguration]
    def post_terminal_configurations(*, bbpos_wisepos_e : BbposWisePose? = nil, expand : Array(String)? = nil, tipping : PostTerminalConfigurationsRequestTipping? = nil, verifone_p400 : VerifoneP400? = nil)
      data, _status_code, _headers = post_terminal_configurations_with_http_info(bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, tipping: tipping, verifone_p400: verifone_p400)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @return [Array<(TerminalConfiguration, Integer, Hash)>] TerminalConfiguration data, response status code and response headers
    def post_terminal_configurations_with_http_info(*, bbpos_wisepos_e : BbposWisePose? = nil, expand : Array(String)? = nil, tipping : PostTerminalConfigurationsRequestTipping? = nil, verifone_p400 : VerifoneP400? = nil)
      request = build_api_request_for_post_terminal_configurations(bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, tipping: tipping, verifone_p400: verifone_p400)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalConfiguration.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @return nil
    def post_terminal_configurations(*, bbpos_wisepos_e : BbposWisePose? = nil, expand : Array(String)? = nil, tipping : PostTerminalConfigurationsRequestTipping? = nil, verifone_p400 : VerifoneP400? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_configurations(bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, tipping: tipping, verifone_p400: verifone_p400).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_configurations(*, bbpos_wisepos_e : BbposWisePose? = nil, expand : Array(String)? = nil, tipping : PostTerminalConfigurationsRequestTipping? = nil, verifone_p400 : VerifoneP400? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_configurations ..." }
      end
      # resource path
      local_var_path = "/v1/terminal/configurations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bbpos_wisepos_e"] = bbpos_wisepos_e.to_s if !bbpos_wisepos_e.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["tipping"] = tipping.to_s if !tipping.nil?
      form_params["verifone_p400"] = verifone_p400.to_s if !verifone_p400.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_configurations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a new <code>Configuration</code> object.</p>
    # @param configuration [String]
    # @return [GetTerminalConfigurationsConfiguration200Response]
    def post_terminal_configurations_configuration(*, configuration : String, bbpos_wisepos_e : PostTerminalConfigurationsConfigurationRequestBbposWiseposE? = nil, expand : Array(String)? = nil, tipping : PostTerminalConfigurationsRequestTipping? = nil, verifone_p400 : PostTerminalConfigurationsConfigurationRequestVerifoneP400? = nil)
      data, _status_code, _headers = post_terminal_configurations_configuration_with_http_info(configuration: configuration, bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, tipping: tipping, verifone_p400: verifone_p400)
      data
    end

    # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @param configuration [String]
    # @return [Array<(GetTerminalConfigurationsConfiguration200Response, Integer, Hash)>] GetTerminalConfigurationsConfiguration200Response data, response status code and response headers
    def post_terminal_configurations_configuration_with_http_info(*, configuration : String, bbpos_wisepos_e : PostTerminalConfigurationsConfigurationRequestBbposWiseposE? = nil, expand : Array(String)? = nil, tipping : PostTerminalConfigurationsRequestTipping? = nil, verifone_p400 : PostTerminalConfigurationsConfigurationRequestVerifoneP400? = nil)
      request = build_api_request_for_post_terminal_configurations_configuration(configuration: configuration, bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, tipping: tipping, verifone_p400: verifone_p400)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_configurations_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTerminalConfigurationsConfiguration200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
    # @param configuration [String]
    # @return nil
    def post_terminal_configurations_configuration(*, configuration : String, bbpos_wisepos_e : PostTerminalConfigurationsConfigurationRequestBbposWiseposE? = nil, expand : Array(String)? = nil, tipping : PostTerminalConfigurationsRequestTipping? = nil, verifone_p400 : PostTerminalConfigurationsConfigurationRequestVerifoneP400? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_configurations_configuration(configuration: configuration, bbpos_wisepos_e: bbpos_wisepos_e, expand: expand, tipping: tipping, verifone_p400: verifone_p400).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_configurations_configuration(*, configuration : String, bbpos_wisepos_e : PostTerminalConfigurationsConfigurationRequestBbposWiseposE? = nil, expand : Array(String)? = nil, tipping : PostTerminalConfigurationsRequestTipping? = nil, verifone_p400 : PostTerminalConfigurationsConfigurationRequestVerifoneP400? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_configurations_configuration ..." }
      end
      if @api_client.config.client_side_validation && configuration.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"configuration\" when calling DefaultApi.post_terminal_configurations_configuration, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/configurations/{configuration}".sub("{" + "configuration" + "}", URI.encode_path(configuration.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["bbpos_wisepos_e"] = bbpos_wisepos_e.to_s if !bbpos_wisepos_e.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["tipping"] = tipping.to_s if !tipping.nil?
      form_params["verifone_p400"] = verifone_p400.to_s if !verifone_p400.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_configurations_configuration",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
    # @return [TerminalConnectionToken]
    def post_terminal_connection_tokens(*, expand : Array(String)? = nil, location : String? = nil)
      data, _status_code, _headers = post_terminal_connection_tokens_with_http_info(expand: expand, location: location)
      data
    end

    # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
    # @return [Array<(TerminalConnectionToken, Integer, Hash)>] TerminalConnectionToken data, response status code and response headers
    def post_terminal_connection_tokens_with_http_info(*, expand : Array(String)? = nil, location : String? = nil)
      request = build_api_request_for_post_terminal_connection_tokens(expand: expand, location: location)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_connection_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalConnectionToken.from_json(data), status_code, headers
    end

    # &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
    # @return nil
    def post_terminal_connection_tokens(*, expand : Array(String)? = nil, location : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_connection_tokens(expand: expand, location: location).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_connection_tokens(*, expand : Array(String)? = nil, location : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_connection_tokens ..." }
      end
      if @api_client.config.client_side_validation && !location.nil? && location.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"location\" when calling DefaultApi.post_terminal_connection_tokens, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/connection_tokens"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["location"] = location.to_s if !location.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_connection_tokens",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Location</code> object. For further details, including which address fields are required in each country, see the <a href=\"/docs/terminal/fleet/locations\">Manage locations</a> guide.</p>
    # @param address [CreateLocationAddressParam]
    # @param display_name [String] A name for the location.
    # @return [TerminalLocation]
    def post_terminal_locations(*, address : CreateLocationAddressParam, display_name : String, configuration_overrides : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_terminal_locations_with_http_info(address: address, display_name: display_name, configuration_overrides: configuration_overrides, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
    # @param address [CreateLocationAddressParam]
    # @param display_name [String] A name for the location.
    # @return [Array<(TerminalLocation, Integer, Hash)>] TerminalLocation data, response status code and response headers
    def post_terminal_locations_with_http_info(*, address : CreateLocationAddressParam, display_name : String, configuration_overrides : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_terminal_locations(address: address, display_name: display_name, configuration_overrides: configuration_overrides, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalLocation.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
    # @param address [CreateLocationAddressParam]
    # @param display_name [String] A name for the location.
    # @return nil
    def post_terminal_locations(*, address : CreateLocationAddressParam, display_name : String, configuration_overrides : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_locations(address: address, display_name: display_name, configuration_overrides: configuration_overrides, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_locations(*, address : CreateLocationAddressParam, display_name : String, configuration_overrides : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_locations ..." }
      end
      if @api_client.config.client_side_validation && display_name.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"display_name\" when calling DefaultApi.post_terminal_locations, the character length must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !configuration_overrides.nil? && configuration_overrides.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"configuration_overrides\" when calling DefaultApi.post_terminal_locations, the character length must be smaller than or equal to 1000.")
      end

      # resource path
      local_var_path = "/v1/terminal/locations"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["address"] = address.to_s if !address.nil?
      form_params["configuration_overrides"] = configuration_overrides.to_s if !configuration_overrides.nil?
      form_params["display_name"] = display_name.to_s if !display_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_locations",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param location [String]
    # @return [GetTerminalLocationsLocation200Response]
    def post_terminal_locations_location(*, location : String, address : OptionalFieldsAddress1? = nil, configuration_overrides : String? = nil, display_name : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_terminal_locations_location_with_http_info(location: location, address: address, configuration_overrides: configuration_overrides, display_name: display_name, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param location [String]
    # @return [Array<(GetTerminalLocationsLocation200Response, Integer, Hash)>] GetTerminalLocationsLocation200Response data, response status code and response headers
    def post_terminal_locations_location_with_http_info(*, location : String, address : OptionalFieldsAddress1? = nil, configuration_overrides : String? = nil, display_name : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_terminal_locations_location(location: location, address: address, configuration_overrides: configuration_overrides, display_name: display_name, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_locations_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTerminalLocationsLocation200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param location [String]
    # @return nil
    def post_terminal_locations_location(*, location : String, address : OptionalFieldsAddress1? = nil, configuration_overrides : String? = nil, display_name : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_locations_location(location: location, address: address, configuration_overrides: configuration_overrides, display_name: display_name, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_locations_location(*, location : String, address : OptionalFieldsAddress1? = nil, configuration_overrides : String? = nil, display_name : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_locations_location ..." }
      end
      if @api_client.config.client_side_validation && location.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"location\" when calling DefaultApi.post_terminal_locations_location, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !configuration_overrides.nil? && configuration_overrides.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"configuration_overrides\" when calling DefaultApi.post_terminal_locations_location, the character length must be smaller than or equal to 1000.")
      end

      if @api_client.config.client_side_validation && !display_name.nil? && display_name.to_s.size > 1000
        raise ArgumentError.new("invalid value for \"display_name\" when calling DefaultApi.post_terminal_locations_location, the character length must be smaller than or equal to 1000.")
      end

      # resource path
      local_var_path = "/v1/terminal/locations/{location}".sub("{" + "location" + "}", URI.encode_path(location.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["address"] = address.to_s if !address.nil?
      form_params["configuration_overrides"] = configuration_overrides.to_s if !configuration_overrides.nil?
      form_params["display_name"] = display_name.to_s if !display_name.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_locations_location",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new <code>Reader</code> object.</p>
    # @param registration_code [String] A code generated by the reader used for registering to an account.
    # @return [TerminalReader]
    def post_terminal_readers(*, registration_code : String, expand : Array(String)? = nil, label : String? = nil, location : String? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_terminal_readers_with_http_info(registration_code: registration_code, expand: expand, label: label, location: location, metadata: metadata)
      data
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @param registration_code [String] A code generated by the reader used for registering to an account.
    # @return [Array<(TerminalReader, Integer, Hash)>] TerminalReader data, response status code and response headers
    def post_terminal_readers_with_http_info(*, registration_code : String, expand : Array(String)? = nil, label : String? = nil, location : String? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_terminal_readers(registration_code: registration_code, expand: expand, label: label, location: location, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_readers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalReader.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
    # @param registration_code [String] A code generated by the reader used for registering to an account.
    # @return nil
    def post_terminal_readers(*, registration_code : String, expand : Array(String)? = nil, label : String? = nil, location : String? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_readers(registration_code: registration_code, expand: expand, label: label, location: location, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers(*, registration_code : String, expand : Array(String)? = nil, label : String? = nil, location : String? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_readers ..." }
      end
      if @api_client.config.client_side_validation && registration_code.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"registration_code\" when calling DefaultApi.post_terminal_readers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !label.nil? && label.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"label\" when calling DefaultApi.post_terminal_readers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !location.nil? && location.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"location\" when calling DefaultApi.post_terminal_readers, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/readers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["label"] = label.to_s if !label.nil?
      form_params["location"] = location.to_s if !location.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["registration_code"] = registration_code.to_s if !registration_code.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_readers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
    # @param reader [String]
    # @return [GetTerminalReadersReader200Response]
    def post_terminal_readers_reader(*, reader : String, expand : Array(String)? = nil, label : String? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_terminal_readers_reader_with_http_info(reader: reader, expand: expand, label: label, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param reader [String]
    # @return [Array<(GetTerminalReadersReader200Response, Integer, Hash)>] GetTerminalReadersReader200Response data, response status code and response headers
    def post_terminal_readers_reader_with_http_info(*, reader : String, expand : Array(String)? = nil, label : String? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_terminal_readers_reader(reader: reader, expand: expand, label: label, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_readers_reader\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return GetTerminalReadersReader200Response.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
    # @param reader [String]
    # @return nil
    def post_terminal_readers_reader(*, reader : String, expand : Array(String)? = nil, label : String? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_readers_reader(reader: reader, expand: expand, label: label, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader(*, reader : String, expand : Array(String)? = nil, label : String? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_readers_reader ..." }
      end
      if @api_client.config.client_side_validation && reader.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reader\" when calling DefaultApi.post_terminal_readers_reader, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !label.nil? && label.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"label\" when calling DefaultApi.post_terminal_readers_reader, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["label"] = label.to_s if !label.nil?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_readers_reader",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels the current reader action.</p>
    # @param reader [String]
    # @return [TerminalReader]
    def post_terminal_readers_reader_cancel_action(*, reader : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_terminal_readers_reader_cancel_action_with_http_info(reader: reader, expand: expand)
      data
    end

    # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
    # @param reader [String]
    # @return [Array<(TerminalReader, Integer, Hash)>] TerminalReader data, response status code and response headers
    def post_terminal_readers_reader_cancel_action_with_http_info(*, reader : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_terminal_readers_reader_cancel_action(reader: reader, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_readers_reader_cancel_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalReader.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
    # @param reader [String]
    # @return nil
    def post_terminal_readers_reader_cancel_action(*, reader : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_readers_reader_cancel_action(reader: reader, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_cancel_action(*, reader : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_readers_reader_cancel_action ..." }
      end
      if @api_client.config.client_side_validation && reader.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reader\" when calling DefaultApi.post_terminal_readers_reader_cancel_action, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/cancel_action".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_readers_reader_cancel_action",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Initiates a payment flow on a Reader.</p>
    # @param reader [String]
    # @param payment_intent [String] PaymentIntent ID
    # @return [TerminalReader]
    def post_terminal_readers_reader_process_payment_intent(*, reader : String, payment_intent : String, expand : Array(String)? = nil, process_config : ProcessConfig? = nil)
      data, _status_code, _headers = post_terminal_readers_reader_process_payment_intent_with_http_info(reader: reader, payment_intent: payment_intent, expand: expand, process_config: process_config)
      data
    end

    # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
    # @param reader [String]
    # @param payment_intent [String] PaymentIntent ID
    # @return [Array<(TerminalReader, Integer, Hash)>] TerminalReader data, response status code and response headers
    def post_terminal_readers_reader_process_payment_intent_with_http_info(*, reader : String, payment_intent : String, expand : Array(String)? = nil, process_config : ProcessConfig? = nil)
      request = build_api_request_for_post_terminal_readers_reader_process_payment_intent(reader: reader, payment_intent: payment_intent, expand: expand, process_config: process_config)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_readers_reader_process_payment_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalReader.from_json(data), status_code, headers
    end

    # &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
    # @param reader [String]
    # @param payment_intent [String] PaymentIntent ID
    # @return nil
    def post_terminal_readers_reader_process_payment_intent(*, reader : String, payment_intent : String, expand : Array(String)? = nil, process_config : ProcessConfig? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_readers_reader_process_payment_intent(reader: reader, payment_intent: payment_intent, expand: expand, process_config: process_config).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_process_payment_intent(*, reader : String, payment_intent : String, expand : Array(String)? = nil, process_config : ProcessConfig? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_readers_reader_process_payment_intent ..." }
      end
      if @api_client.config.client_side_validation && reader.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reader\" when calling DefaultApi.post_terminal_readers_reader_process_payment_intent, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && payment_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"payment_intent\" when calling DefaultApi.post_terminal_readers_reader_process_payment_intent, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/process_payment_intent".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["payment_intent"] = payment_intent.to_s if !payment_intent.nil?
      form_params["process_config"] = process_config.to_s if !process_config.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_readers_reader_process_payment_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Initiates a setup intent flow on a Reader.</p>
    # @param reader [String]
    # @param customer_consent_collected [Bool] Customer Consent Collected
    # @param setup_intent [String] SetupIntent ID
    # @return [TerminalReader]
    def post_terminal_readers_reader_process_setup_intent(*, reader : String, customer_consent_collected : Bool, setup_intent : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_terminal_readers_reader_process_setup_intent_with_http_info(reader: reader, customer_consent_collected: customer_consent_collected, setup_intent: setup_intent, expand: expand)
      data
    end

    # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
    # @param reader [String]
    # @param customer_consent_collected [Bool] Customer Consent Collected
    # @param setup_intent [String] SetupIntent ID
    # @return [Array<(TerminalReader, Integer, Hash)>] TerminalReader data, response status code and response headers
    def post_terminal_readers_reader_process_setup_intent_with_http_info(*, reader : String, customer_consent_collected : Bool, setup_intent : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_terminal_readers_reader_process_setup_intent(reader: reader, customer_consent_collected: customer_consent_collected, setup_intent: setup_intent, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_readers_reader_process_setup_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalReader.from_json(data), status_code, headers
    end

    # &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
    # @param reader [String]
    # @param customer_consent_collected [Bool] Customer Consent Collected
    # @param setup_intent [String] SetupIntent ID
    # @return nil
    def post_terminal_readers_reader_process_setup_intent(*, reader : String, customer_consent_collected : Bool, setup_intent : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_readers_reader_process_setup_intent(reader: reader, customer_consent_collected: customer_consent_collected, setup_intent: setup_intent, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_process_setup_intent(*, reader : String, customer_consent_collected : Bool, setup_intent : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_readers_reader_process_setup_intent ..." }
      end
      if @api_client.config.client_side_validation && reader.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reader\" when calling DefaultApi.post_terminal_readers_reader_process_setup_intent, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && setup_intent.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"setup_intent\" when calling DefaultApi.post_terminal_readers_reader_process_setup_intent, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/process_setup_intent".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["customer_consent_collected"] = customer_consent_collected.to_s if !customer_consent_collected.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["setup_intent"] = setup_intent.to_s if !setup_intent.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_readers_reader_process_setup_intent",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Sets reader display to show cart details.</p>
    # @param reader [String]
    # @param _type [String] Type
    # @return [TerminalReader]
    def post_terminal_readers_reader_set_reader_display(*, reader : String, _type : String, cart : Cart? = nil, expand : Array(String)? = nil)
      data, _status_code, _headers = post_terminal_readers_reader_set_reader_display_with_http_info(reader: reader, _type: _type, cart: cart, expand: expand)
      data
    end

    # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
    # @param reader [String]
    # @param _type [String] Type
    # @return [Array<(TerminalReader, Integer, Hash)>] TerminalReader data, response status code and response headers
    def post_terminal_readers_reader_set_reader_display_with_http_info(*, reader : String, _type : String, cart : Cart? = nil, expand : Array(String)? = nil)
      request = build_api_request_for_post_terminal_readers_reader_set_reader_display(reader: reader, _type: _type, cart: cart, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_terminal_readers_reader_set_reader_display\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalReader.from_json(data), status_code, headers
    end

    # &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
    # @param reader [String]
    # @param _type [String] Type
    # @return nil
    def post_terminal_readers_reader_set_reader_display(*, reader : String, _type : String, cart : Cart? = nil, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_terminal_readers_reader_set_reader_display(reader: reader, _type: _type, cart: cart, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_terminal_readers_reader_set_reader_display(*, reader : String, _type : String, cart : Cart? = nil, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_terminal_readers_reader_set_reader_display ..." }
      end
      if @api_client.config.client_side_validation && reader.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reader\" when calling DefaultApi.post_terminal_readers_reader_set_reader_display, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["cart"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/terminal/readers/{reader}/set_reader_display".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["cart"] = cart.to_s if !cart.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_terminal_readers_reader_set_reader_display",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Expire a refund with a status of <code>requires_action</code>.</p>
    # @param refund [String]
    # @return [Refund]
    def post_test_helpers_refunds_refund_expire(*, refund : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_test_helpers_refunds_refund_expire_with_http_info(refund: refund, expand: expand)
      data
    end

    # &lt;p&gt;Expire a refund with a status of &lt;code&gt;requires_action&lt;/code&gt;.&lt;/p&gt;
    # @param refund [String]
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def post_test_helpers_refunds_refund_expire_with_http_info(*, refund : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_test_helpers_refunds_refund_expire(refund: refund, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_refunds_refund_expire\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Refund.from_json(data), status_code, headers
    end

    # &lt;p&gt;Expire a refund with a status of &lt;code&gt;requires_action&lt;/code&gt;.&lt;/p&gt;
    # @param refund [String]
    # @return nil
    def post_test_helpers_refunds_refund_expire(*, refund : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_refunds_refund_expire(refund: refund, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_refunds_refund_expire(*, refund : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_refunds_refund_expire ..." }
      end
      # resource path
      local_var_path = "/v1/test_helpers/refunds/{refund}/expire".sub("{" + "refund" + "}", URI.encode_path(refund.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_refunds_refund_expire",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
    # @param reader [String]
    # @return [TerminalReader]
    def post_test_helpers_terminal_readers_reader_present_payment_method(*, reader : String, card_present : CardPresent? = nil, expand : Array(String)? = nil, _type : String? = nil)
      data, _status_code, _headers = post_test_helpers_terminal_readers_reader_present_payment_method_with_http_info(reader: reader, card_present: card_present, expand: expand, _type: _type)
      data
    end

    # &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
    # @param reader [String]
    # @return [Array<(TerminalReader, Integer, Hash)>] TerminalReader data, response status code and response headers
    def post_test_helpers_terminal_readers_reader_present_payment_method_with_http_info(*, reader : String, card_present : CardPresent? = nil, expand : Array(String)? = nil, _type : String? = nil)
      request = build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(reader: reader, card_present: card_present, expand: expand, _type: _type)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_terminal_readers_reader_present_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TerminalReader.from_json(data), status_code, headers
    end

    # &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
    # @param reader [String]
    # @return nil
    def post_test_helpers_terminal_readers_reader_present_payment_method(*, reader : String, card_present : CardPresent? = nil, expand : Array(String)? = nil, _type : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(reader: reader, card_present: card_present, expand: expand, _type: _type).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_terminal_readers_reader_present_payment_method(*, reader : String, card_present : CardPresent? = nil, expand : Array(String)? = nil, _type : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_terminal_readers_reader_present_payment_method ..." }
      end
      if @api_client.config.client_side_validation && reader.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"reader\" when calling DefaultApi.post_test_helpers_terminal_readers_reader_present_payment_method, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["card_present"]
      if @api_client.config.client_side_validation && !_type.nil? && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/test_helpers/terminal/readers/{reader}/present_payment_method".sub("{" + "reader" + "}", URI.encode_path(reader.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["card_present"] = card_present.to_s if !card_present.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["type"] = _type.to_s if !_type.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_terminal_readers_reader_present_payment_method",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new test clock that can be attached to new customers and quotes.</p>
    # @param frozen_time [Int64] The initial frozen time for this test clock.
    # @return [TestHelpersTestClock]
    def post_test_helpers_test_clocks(*, frozen_time : Int64, expand : Array(String)? = nil, name : String? = nil)
      data, _status_code, _headers = post_test_helpers_test_clocks_with_http_info(frozen_time: frozen_time, expand: expand, name: name)
      data
    end

    # &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
    # @param frozen_time [Int64] The initial frozen time for this test clock.
    # @return [Array<(TestHelpersTestClock, Integer, Hash)>] TestHelpersTestClock data, response status code and response headers
    def post_test_helpers_test_clocks_with_http_info(*, frozen_time : Int64, expand : Array(String)? = nil, name : String? = nil)
      request = build_api_request_for_post_test_helpers_test_clocks(frozen_time: frozen_time, expand: expand, name: name)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_test_clocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TestHelpersTestClock.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
    # @param frozen_time [Int64] The initial frozen time for this test clock.
    # @return nil
    def post_test_helpers_test_clocks(*, frozen_time : Int64, expand : Array(String)? = nil, name : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_test_clocks(frozen_time: frozen_time, expand: expand, name: name).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_test_clocks(*, frozen_time : Int64, expand : Array(String)? = nil, name : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_test_clocks ..." }
      end
      if @api_client.config.client_side_validation && !name.nil? && name.to_s.size > 300
        raise ArgumentError.new("invalid value for \"name\" when calling DefaultApi.post_test_helpers_test_clocks, the character length must be smaller than or equal to 300.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["frozen_time"] = frozen_time.to_s if !frozen_time.nil?
      form_params["name"] = name.to_s if !name.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_test_clocks",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
    # @param test_clock [String]
    # @param frozen_time [Int64] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @return [TestHelpersTestClock]
    def post_test_helpers_test_clocks_test_clock_advance(*, test_clock : String, frozen_time : Int64, expand : Array(String)? = nil)
      data, _status_code, _headers = post_test_helpers_test_clocks_test_clock_advance_with_http_info(test_clock: test_clock, frozen_time: frozen_time, expand: expand)
      data
    end

    # &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
    # @param test_clock [String]
    # @param frozen_time [Int64] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @return [Array<(TestHelpersTestClock, Integer, Hash)>] TestHelpersTestClock data, response status code and response headers
    def post_test_helpers_test_clocks_test_clock_advance_with_http_info(*, test_clock : String, frozen_time : Int64, expand : Array(String)? = nil)
      request = build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(test_clock: test_clock, frozen_time: frozen_time, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_test_clocks_test_clock_advance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TestHelpersTestClock.from_json(data), status_code, headers
    end

    # &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
    # @param test_clock [String]
    # @param frozen_time [Int64] The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
    # @return nil
    def post_test_helpers_test_clocks_test_clock_advance(*, test_clock : String, frozen_time : Int64, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(test_clock: test_clock, frozen_time: frozen_time, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_test_clocks_test_clock_advance(*, test_clock : String, frozen_time : Int64, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_test_clocks_test_clock_advance ..." }
      end
      if @api_client.config.client_side_validation && test_clock.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"test_clock\" when calling DefaultApi.post_test_helpers_test_clocks_test_clock_advance, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/test_clocks/{test_clock}/advance".sub("{" + "test_clock" + "}", URI.encode_path(test_clock.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["frozen_time"] = frozen_time.to_s if !frozen_time.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_test_clocks_test_clock_advance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
    # @param id [String]
    # @return [TreasuryInboundTransfer]
    def post_test_helpers_treasury_inbound_transfers_id_fail(*, id : String, expand : Array(String)? = nil, failure_details : FailureDetailsParams? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_inbound_transfers_id_fail_with_http_info(id: id, expand: expand, failure_details: failure_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryInboundTransfer, Integer, Hash)>] TreasuryInboundTransfer data, response status code and response headers
    def post_test_helpers_treasury_inbound_transfers_id_fail_with_http_info(*, id : String, expand : Array(String)? = nil, failure_details : FailureDetailsParams? = nil)
      request = build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(id: id, expand: expand, failure_details: failure_details)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_inbound_transfers_id_fail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryInboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_test_helpers_treasury_inbound_transfers_id_fail(*, id : String, expand : Array(String)? = nil, failure_details : FailureDetailsParams? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(id: id, expand: expand, failure_details: failure_details).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_fail(*, id : String, expand : Array(String)? = nil, failure_details : FailureDetailsParams? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_inbound_transfers_id_fail ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_test_helpers_treasury_inbound_transfers_id_fail, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/inbound_transfers/{id}/fail".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["failure_details"] = failure_details.to_s if !failure_details.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_inbound_transfers_id_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
    # @param id [String]
    # @return [TreasuryInboundTransfer]
    def post_test_helpers_treasury_inbound_transfers_id_return(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_inbound_transfers_id_return_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the &lt;code&gt;succeeded&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryInboundTransfer, Integer, Hash)>] TreasuryInboundTransfer data, response status code and response headers
    def post_test_helpers_treasury_inbound_transfers_id_return_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_return(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_inbound_transfers_id_return\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryInboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the &lt;code&gt;succeeded&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_test_helpers_treasury_inbound_transfers_id_return(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_return(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_return(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_inbound_transfers_id_return ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_test_helpers_treasury_inbound_transfers_id_return, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/inbound_transfers/{id}/return".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_inbound_transfers_id_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
    # @param id [String]
    # @return [TreasuryInboundTransfer]
    def post_test_helpers_treasury_inbound_transfers_id_succeed(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_inbound_transfers_id_succeed_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryInboundTransfer, Integer, Hash)>] TreasuryInboundTransfer data, response status code and response headers
    def post_test_helpers_treasury_inbound_transfers_id_succeed_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_inbound_transfers_id_succeed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryInboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_test_helpers_treasury_inbound_transfers_id_succeed(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_inbound_transfers_id_succeed(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_inbound_transfers_id_succeed ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_test_helpers_treasury_inbound_transfers_id_succeed, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/inbound_transfers/{id}/succeed".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_inbound_transfers_id_succeed",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @param id [String]
    # @return [TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_fail(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_fail_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryOutboundPayment, Integer, Hash)>] TreasuryOutboundPayment data, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_fail_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_outbound_payments_id_fail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundPayment.from_json(data), status_code, headers
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_fail(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_fail(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_outbound_payments_id_fail ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_test_helpers_treasury_outbound_payments_id_fail, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/fail".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_outbound_payments_id_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @param id [String]
    # @return [TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_post(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_post_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryOutboundPayment, Integer, Hash)>] TreasuryOutboundPayment data, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_post_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_outbound_payments_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundPayment.from_json(data), status_code, headers
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_post(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_post(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_outbound_payments_id_post ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_test_helpers_treasury_outbound_payments_id_post, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/post".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_outbound_payments_id_post",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
    # @param id [String]
    # @return [TreasuryOutboundPayment]
    def post_test_helpers_treasury_outbound_payments_id_return(*, id : String, expand : Array(String)? = nil, returned_details : ReturnedDetailsParams? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_outbound_payments_id_return_with_http_info(id: id, expand: expand, returned_details: returned_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryOutboundPayment, Integer, Hash)>] TreasuryOutboundPayment data, response status code and response headers
    def post_test_helpers_treasury_outbound_payments_id_return_with_http_info(*, id : String, expand : Array(String)? = nil, returned_details : ReturnedDetailsParams? = nil)
      request = build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(id: id, expand: expand, returned_details: returned_details)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_outbound_payments_id_return\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundPayment.from_json(data), status_code, headers
    end

    # &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_test_helpers_treasury_outbound_payments_id_return(*, id : String, expand : Array(String)? = nil, returned_details : ReturnedDetailsParams? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(id: id, expand: expand, returned_details: returned_details).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_payments_id_return(*, id : String, expand : Array(String)? = nil, returned_details : ReturnedDetailsParams? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_outbound_payments_id_return ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_test_helpers_treasury_outbound_payments_id_return, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_payments/{id}/return".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["returned_details"] = returned_details.to_s if !returned_details.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_outbound_payments_id_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @param outbound_transfer [String]
    # @return [TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(*, outbound_transfer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return [Array<(TreasuryOutboundTransfer, Integer, Hash)>] TreasuryOutboundTransfer data, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail_with_http_info(*, outbound_transfer : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(outbound_transfer: outbound_transfer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(*, outbound_transfer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail(*, outbound_transfer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail ..." }
      end
      if @api_client.config.client_side_validation && outbound_transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"outbound_transfer\" when calling DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @param outbound_transfer [String]
    # @return [TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(*, outbound_transfer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_post_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return [Array<(TreasuryOutboundTransfer, Integer, Hash)>] TreasuryOutboundTransfer data, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post_with_http_info(*, outbound_transfer : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(outbound_transfer: outbound_transfer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(*, outbound_transfer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_post(*, outbound_transfer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_post ..." }
      end
      if @api_client.config.client_side_validation && outbound_transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"outbound_transfer\" when calling DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_post, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_post",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
    # @param outbound_transfer [String]
    # @return [TreasuryOutboundTransfer]
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(*, outbound_transfer : String, expand : Array(String)? = nil, returned_details : ReturnedDetailsParams1? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_outbound_transfers_outbound_transfer_return_with_http_info(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details)
      data
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return [Array<(TreasuryOutboundTransfer, Integer, Hash)>] TreasuryOutboundTransfer data, response status code and response headers
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return_with_http_info(*, outbound_transfer : String, expand : Array(String)? = nil, returned_details : ReturnedDetailsParams1? = nil)
      request = build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_outbound_transfers_outbound_transfer_return\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return nil
    def post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(*, outbound_transfer : String, expand : Array(String)? = nil, returned_details : ReturnedDetailsParams1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(outbound_transfer: outbound_transfer, expand: expand, returned_details: returned_details).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_outbound_transfers_outbound_transfer_return(*, outbound_transfer : String, expand : Array(String)? = nil, returned_details : ReturnedDetailsParams1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_return ..." }
      end
      if @api_client.config.client_side_validation && outbound_transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"outbound_transfer\" when calling DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_return, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["returned_details"] = returned_details.to_s if !returned_details.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_outbound_transfers_outbound_transfer_return",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to send funds to.
    # @param network [String] The rails used for the object.
    # @return [TreasuryReceivedCredit]
    def post_test_helpers_treasury_received_credits(*, amount : Int64, currency : String, financial_account : String, network : String, description : String? = nil, expand : Array(String)? = nil, initiating_payment_method_details : SourceParams? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_received_credits_with_http_info(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)
      data
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to send funds to.
    # @param network [String] The rails used for the object.
    # @return [Array<(TreasuryReceivedCredit, Integer, Hash)>] TreasuryReceivedCredit data, response status code and response headers
    def post_test_helpers_treasury_received_credits_with_http_info(*, amount : Int64, currency : String, financial_account : String, network : String, description : String? = nil, expand : Array(String)? = nil, initiating_payment_method_details : SourceParams? = nil)
      request = build_api_request_for_post_test_helpers_treasury_received_credits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_received_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryReceivedCredit.from_json(data), status_code, headers
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to send funds to.
    # @param network [String] The rails used for the object.
    # @return nil
    def post_test_helpers_treasury_received_credits(*, amount : Int64, currency : String, financial_account : String, network : String, description : String? = nil, expand : Array(String)? = nil, initiating_payment_method_details : SourceParams? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_received_credits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_received_credits(*, amount : Int64, currency : String, financial_account : String, network : String, description : String? = nil, expand : Array(String)? = nil, initiating_payment_method_details : SourceParams? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_received_credits ..." }
      end
      allowable_values = ["ach", "us_domestic_wire"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(network)
        raise ArgumentError.new("invalid value for \"network\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_test_helpers_treasury_received_credits, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/received_credits"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["initiating_payment_method_details"] = initiating_payment_method_details.to_s if !initiating_payment_method_details.nil?
      form_params["network"] = network.to_s if !network.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_received_credits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @param network [String] The rails used for the object.
    # @return [TreasuryReceivedDebit]
    def post_test_helpers_treasury_received_debits(*, amount : Int64, currency : String, financial_account : String, network : String, description : String? = nil, expand : Array(String)? = nil, initiating_payment_method_details : SourceParams? = nil)
      data, _status_code, _headers = post_test_helpers_treasury_received_debits_with_http_info(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)
      data
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @param network [String] The rails used for the object.
    # @return [Array<(TreasuryReceivedDebit, Integer, Hash)>] TreasuryReceivedDebit data, response status code and response headers
    def post_test_helpers_treasury_received_debits_with_http_info(*, amount : Int64, currency : String, financial_account : String, network : String, description : String? = nil, expand : Array(String)? = nil, initiating_payment_method_details : SourceParams? = nil)
      request = build_api_request_for_post_test_helpers_treasury_received_debits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_test_helpers_treasury_received_debits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryReceivedDebit.from_json(data), status_code, headers
    end

    # &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @param network [String] The rails used for the object.
    # @return nil
    def post_test_helpers_treasury_received_debits(*, amount : Int64, currency : String, financial_account : String, network : String, description : String? = nil, expand : Array(String)? = nil, initiating_payment_method_details : SourceParams? = nil, &block : Crest::Response ->)
      build_api_request_for_post_test_helpers_treasury_received_debits(amount: amount, currency: currency, financial_account: financial_account, network: network, description: description, expand: expand, initiating_payment_method_details: initiating_payment_method_details).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_test_helpers_treasury_received_debits(*, amount : Int64, currency : String, financial_account : String, network : String, description : String? = nil, expand : Array(String)? = nil, initiating_payment_method_details : SourceParams? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_test_helpers_treasury_received_debits ..." }
      end
      allowable_values = ["ach"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(network)
        raise ArgumentError.new("invalid value for \"network\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_test_helpers_treasury_received_debits, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/test_helpers/treasury/received_debits"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["initiating_payment_method_details"] = initiating_payment_method_details.to_s if !initiating_payment_method_details.nil?
      form_params["network"] = network.to_s if !network.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_test_helpers_treasury_received_debits",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href=\"#accounts\">Custom account</a>.</p>
    # @return [Token]
    def post_tokens(*, account : ConnectJsAccountTokenSpecs? = nil, bank_account : TokenCreateBankAccount? = nil, card : PostTokensRequestCard? = nil, customer : String? = nil, cvc_update : CvcParams? = nil, expand : Array(String)? = nil, person : PersonTokenSpecs? = nil, pii : PiiTokenSpecs? = nil)
      data, _status_code, _headers = post_tokens_with_http_info(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii)
      data
    end

    # &lt;p&gt;Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a &lt;a href&#x3D;\&quot;#accounts\&quot;&gt;Custom account&lt;/a&gt;.&lt;/p&gt;
    # @return [Array<(Token, Integer, Hash)>] Token data, response status code and response headers
    def post_tokens_with_http_info(*, account : ConnectJsAccountTokenSpecs? = nil, bank_account : TokenCreateBankAccount? = nil, card : PostTokensRequestCard? = nil, customer : String? = nil, cvc_update : CvcParams? = nil, expand : Array(String)? = nil, person : PersonTokenSpecs? = nil, pii : PiiTokenSpecs? = nil)
      request = build_api_request_for_post_tokens(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Token.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a single-use token that represents a bank account’s details. This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a &lt;a href&#x3D;\&quot;#accounts\&quot;&gt;Custom account&lt;/a&gt;.&lt;/p&gt;
    # @return nil
    def post_tokens(*, account : ConnectJsAccountTokenSpecs? = nil, bank_account : TokenCreateBankAccount? = nil, card : PostTokensRequestCard? = nil, customer : String? = nil, cvc_update : CvcParams? = nil, expand : Array(String)? = nil, person : PersonTokenSpecs? = nil, pii : PiiTokenSpecs? = nil, &block : Crest::Response ->)
      build_api_request_for_post_tokens(account: account, bank_account: bank_account, card: card, customer: customer, cvc_update: cvc_update, expand: expand, person: person, pii: pii).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_tokens(*, account : ConnectJsAccountTokenSpecs? = nil, bank_account : TokenCreateBankAccount? = nil, card : PostTokensRequestCard? = nil, customer : String? = nil, cvc_update : CvcParams? = nil, expand : Array(String)? = nil, person : PersonTokenSpecs? = nil, pii : PiiTokenSpecs? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_tokens ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_tokens, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/tokens"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["account"] = account.to_s if !account.nil?
      form_params["bank_account"] = bank_account.to_s if !bank_account.nil?
      form_params["card"] = card.to_s if !card.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["cvc_update"] = cvc_update.to_s if !cvc_update.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["person"] = person.to_s if !person.nil?
      form_params["pii"] = pii.to_s if !pii.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_tokens",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Top up the balance of an account</p>
    # @param amount [Int64] A positive integer representing how much to transfer.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return [Topup]
    def post_topups(*, amount : Int64, currency : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, source : String? = nil, statement_descriptor : String? = nil, transfer_group : String? = nil)
      data, _status_code, _headers = post_topups_with_http_info(amount: amount, currency: currency, description: description, expand: expand, metadata: metadata, source: source, statement_descriptor: statement_descriptor, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;Top up the balance of an account&lt;/p&gt;
    # @param amount [Int64] A positive integer representing how much to transfer.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return [Array<(Topup, Integer, Hash)>] Topup data, response status code and response headers
    def post_topups_with_http_info(*, amount : Int64, currency : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, source : String? = nil, statement_descriptor : String? = nil, transfer_group : String? = nil)
      request = build_api_request_for_post_topups(amount: amount, currency: currency, description: description, expand: expand, metadata: metadata, source: source, statement_descriptor: statement_descriptor, transfer_group: transfer_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_topups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Topup.from_json(data), status_code, headers
    end

    # &lt;p&gt;Top up the balance of an account&lt;/p&gt;
    # @param amount [Int64] A positive integer representing how much to transfer.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @return nil
    def post_topups(*, amount : Int64, currency : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, source : String? = nil, statement_descriptor : String? = nil, transfer_group : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_topups(amount: amount, currency: currency, description: description, expand: expand, metadata: metadata, source: source, statement_descriptor: statement_descriptor, transfer_group: transfer_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_topups(*, amount : Int64, currency : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, source : String? = nil, statement_descriptor : String? = nil, transfer_group : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_topups ..." }
      end
      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_topups, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !source.nil? && source.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source\" when calling DefaultApi.post_topups, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 15
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_topups, the character length must be smaller than or equal to 15.")
      end

      # resource path
      local_var_path = "/v1/topups"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["source"] = source.to_s if !source.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?
      form_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_topups",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
    # @param topup [String]
    # @return [Topup]
    def post_topups_topup(*, topup : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_topups_topup_with_http_info(topup: topup, description: description, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the metadata of a top-up. Other top-up details are not editable by design.&lt;/p&gt;
    # @param topup [String]
    # @return [Array<(Topup, Integer, Hash)>] Topup data, response status code and response headers
    def post_topups_topup_with_http_info(*, topup : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_topups_topup(topup: topup, description: description, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_topups_topup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Topup.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the metadata of a top-up. Other top-up details are not editable by design.&lt;/p&gt;
    # @param topup [String]
    # @return nil
    def post_topups_topup(*, topup : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_topups_topup(topup: topup, description: description, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_topups_topup(*, topup : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_topups_topup ..." }
      end
      if @api_client.config.client_side_validation && topup.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"topup\" when calling DefaultApi.post_topups_topup, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_topups_topup, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/topups/{topup}".sub("{" + "topup" + "}", URI.encode_path(topup.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_topups_topup",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
    # @param topup [String]
    # @return [Topup]
    def post_topups_topup_cancel(*, topup : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_topups_topup_cancel_with_http_info(topup: topup, expand: expand)
      data
    end

    # &lt;p&gt;Cancels a top-up. Only pending top-ups can be canceled.&lt;/p&gt;
    # @param topup [String]
    # @return [Array<(Topup, Integer, Hash)>] Topup data, response status code and response headers
    def post_topups_topup_cancel_with_http_info(*, topup : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_topups_topup_cancel(topup: topup, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_topups_topup_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Topup.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels a top-up. Only pending top-ups can be canceled.&lt;/p&gt;
    # @param topup [String]
    # @return nil
    def post_topups_topup_cancel(*, topup : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_topups_topup_cancel(topup: topup, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_topups_topup_cancel(*, topup : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_topups_topup_cancel ..." }
      end
      if @api_client.config.client_side_validation && topup.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"topup\" when calling DefaultApi.post_topups_topup_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/topups/{topup}/cancel".sub("{" + "topup" + "}", URI.encode_path(topup.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_topups_topup_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href=\"#balance\">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
    # @param currency [String] 3-letter [ISO code for currency](https://stripe.com/docs/payouts).
    # @param destination [String] The ID of a connected Stripe account. <a href=\\\"/docs/connect/charges-transfers\\\">See the Connect documentation</a> for details.
    # @return [Transfer]
    def post_transfers(*, currency : String, destination : String, amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, source_transaction : String? = nil, source_type : String? = nil, transfer_group : String? = nil)
      data, _status_code, _headers = post_transfers_with_http_info(currency: currency, destination: destination, amount: amount, description: description, expand: expand, source_transaction: source_transaction, source_type: source_type, transfer_group: transfer_group)
      data
    end

    # &lt;p&gt;To send funds from your Stripe account to a connected account, you create a new transfer object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;
    # @param currency [String] 3-letter [ISO code for currency](https://stripe.com/docs/payouts).
    # @param destination [String] The ID of a connected Stripe account. <a href=\\\"/docs/connect/charges-transfers\\\">See the Connect documentation</a> for details.
    # @return [Array<(Transfer, Integer, Hash)>] Transfer data, response status code and response headers
    def post_transfers_with_http_info(*, currency : String, destination : String, amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, source_transaction : String? = nil, source_type : String? = nil, transfer_group : String? = nil)
      request = build_api_request_for_post_transfers(currency: currency, destination: destination, amount: amount, description: description, expand: expand, source_transaction: source_transaction, source_type: source_type, transfer_group: transfer_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Transfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;To send funds from your Stripe account to a connected account, you create a new transfer object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;
    # @param currency [String] 3-letter [ISO code for currency](https://stripe.com/docs/payouts).
    # @param destination [String] The ID of a connected Stripe account. <a href=\\\"/docs/connect/charges-transfers\\\">See the Connect documentation</a> for details.
    # @return nil
    def post_transfers(*, currency : String, destination : String, amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, source_transaction : String? = nil, source_type : String? = nil, transfer_group : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_transfers(currency: currency, destination: destination, amount: amount, description: description, expand: expand, source_transaction: source_transaction, source_type: source_type, transfer_group: transfer_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_transfers(*, currency : String, destination : String, amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, source_transaction : String? = nil, source_type : String? = nil, transfer_group : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_transfers ..." }
      end
      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_transfers, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["bank_account", "card", "fpx"]
      if @api_client.config.client_side_validation && !source_type.nil? && !allowable_values.includes?(source_type)
        raise ArgumentError.new("invalid value for \"source_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !source_type.nil? && source_type.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"source_type\" when calling DefaultApi.post_transfers, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["destination"] = destination.to_s if !destination.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["source_transaction"] = source_transaction.to_s if !source_transaction.nil?
      form_params["source_type"] = source_type.to_s if !source_type.nil?
      form_params["transfer_group"] = transfer_group.to_s if !transfer_group.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When you create a new reversal, you must specify a transfer to create it on.</p>  <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>  <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
    # @param id [String]
    # @return [TransferReversal]
    def post_transfers_id_reversals(*, id : String, amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, refund_application_fee : Bool? = nil)
      data, _status_code, _headers = post_transfers_id_reversals_with_http_info(id: id, amount: amount, description: description, expand: expand, metadata: metadata, refund_application_fee: refund_application_fee)
      data
    end

    # &lt;p&gt;When you create a new reversal, you must specify a transfer to create it on.&lt;/p&gt;  &lt;p&gt;When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.&lt;/p&gt;  &lt;p&gt;Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TransferReversal, Integer, Hash)>] TransferReversal data, response status code and response headers
    def post_transfers_id_reversals_with_http_info(*, id : String, amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, refund_application_fee : Bool? = nil)
      request = build_api_request_for_post_transfers_id_reversals(id: id, amount: amount, description: description, expand: expand, metadata: metadata, refund_application_fee: refund_application_fee)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_transfers_id_reversals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TransferReversal.from_json(data), status_code, headers
    end

    # &lt;p&gt;When you create a new reversal, you must specify a transfer to create it on.&lt;/p&gt;  &lt;p&gt;When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.&lt;/p&gt;  &lt;p&gt;Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_transfers_id_reversals(*, id : String, amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, refund_application_fee : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_post_transfers_id_reversals(id: id, amount: amount, description: description, expand: expand, metadata: metadata, refund_application_fee: refund_application_fee).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_transfers_id_reversals(*, id : String, amount : Int64? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, refund_application_fee : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_transfers_id_reversals ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_transfers_id_reversals, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_transfers_id_reversals, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/transfers/{id}/reversals".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["refund_application_fee"] = refund_application_fee.to_s if !refund_application_fee.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_transfers_id_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request accepts only metadata as an argument.</p>
    # @param transfer [String]
    # @return [Transfer]
    def post_transfers_transfer(*, transfer : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_transfers_transfer_with_http_info(transfer: transfer, description: description, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts only metadata as an argument.&lt;/p&gt;
    # @param transfer [String]
    # @return [Array<(Transfer, Integer, Hash)>] Transfer data, response status code and response headers
    def post_transfers_transfer_with_http_info(*, transfer : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_transfers_transfer(transfer: transfer, description: description, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_transfers_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Transfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts only metadata as an argument.&lt;/p&gt;
    # @param transfer [String]
    # @return nil
    def post_transfers_transfer(*, transfer : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_transfers_transfer(transfer: transfer, description: description, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_transfers_transfer(*, transfer : String, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_transfers_transfer ..." }
      end
      if @api_client.config.client_side_validation && transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer\" when calling DefaultApi.post_transfers_transfer, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_transfers_transfer, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/transfers/{transfer}".sub("{" + "transfer" + "}", URI.encode_path(transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_transfers_transfer",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>  <p>This request only accepts metadata and description as arguments.</p>
    # @param id [String]
    # @param transfer [String]
    # @return [TransferReversal]
    def post_transfers_transfer_reversals_id(*, id : String, transfer : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_transfers_transfer_reversals_id_with_http_info(id: id, transfer: transfer, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata and description as arguments.&lt;/p&gt;
    # @param id [String]
    # @param transfer [String]
    # @return [Array<(TransferReversal, Integer, Hash)>] TransferReversal data, response status code and response headers
    def post_transfers_transfer_reversals_id_with_http_info(*, id : String, transfer : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_transfers_transfer_reversals_id(id: id, transfer: transfer, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_transfers_transfer_reversals_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TransferReversal.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata and description as arguments.&lt;/p&gt;
    # @param id [String]
    # @param transfer [String]
    # @return nil
    def post_transfers_transfer_reversals_id(*, id : String, transfer : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_transfers_transfer_reversals_id(id: id, transfer: transfer, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_transfers_transfer_reversals_id(*, id : String, transfer : String, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_transfers_transfer_reversals_id ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_transfers_transfer_reversals_id, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"transfer\" when calling DefaultApi.post_transfers_transfer_reversals_id, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/transfers/{transfer}/reversals/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s)).sub("{" + "transfer" + "}", URI.encode_path(transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_transfers_transfer_reversals_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
    # @param received_credit [String] The ReceivedCredit to reverse.
    # @return [TreasuryCreditReversal]
    def post_treasury_credit_reversals(*, received_credit : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_treasury_credit_reversals_with_http_info(received_credit: received_credit, expand: expand)
      data
    end

    # &lt;p&gt;Reverses a ReceivedCredit and creates a CreditReversal object.&lt;/p&gt;
    # @param received_credit [String] The ReceivedCredit to reverse.
    # @return [Array<(TreasuryCreditReversal, Integer, Hash)>] TreasuryCreditReversal data, response status code and response headers
    def post_treasury_credit_reversals_with_http_info(*, received_credit : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_treasury_credit_reversals(received_credit: received_credit, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_credit_reversals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryCreditReversal.from_json(data), status_code, headers
    end

    # &lt;p&gt;Reverses a ReceivedCredit and creates a CreditReversal object.&lt;/p&gt;
    # @param received_credit [String] The ReceivedCredit to reverse.
    # @return nil
    def post_treasury_credit_reversals(*, received_credit : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_credit_reversals(received_credit: received_credit, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_credit_reversals(*, received_credit : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_credit_reversals ..." }
      end
      if @api_client.config.client_side_validation && received_credit.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"received_credit\" when calling DefaultApi.post_treasury_credit_reversals, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/credit_reversals"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["received_credit"] = received_credit.to_s if !received_credit.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_credit_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
    # @param received_debit [String] The ReceivedDebit to reverse.
    # @return [TreasuryDebitReversal]
    def post_treasury_debit_reversals(*, received_debit : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_treasury_debit_reversals_with_http_info(received_debit: received_debit, expand: expand)
      data
    end

    # &lt;p&gt;Reverses a ReceivedDebit and creates a DebitReversal object.&lt;/p&gt;
    # @param received_debit [String] The ReceivedDebit to reverse.
    # @return [Array<(TreasuryDebitReversal, Integer, Hash)>] TreasuryDebitReversal data, response status code and response headers
    def post_treasury_debit_reversals_with_http_info(*, received_debit : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_treasury_debit_reversals(received_debit: received_debit, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_debit_reversals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryDebitReversal.from_json(data), status_code, headers
    end

    # &lt;p&gt;Reverses a ReceivedDebit and creates a DebitReversal object.&lt;/p&gt;
    # @param received_debit [String] The ReceivedDebit to reverse.
    # @return nil
    def post_treasury_debit_reversals(*, received_debit : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_debit_reversals(received_debit: received_debit, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_debit_reversals(*, received_debit : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_debit_reversals ..." }
      end
      if @api_client.config.client_side_validation && received_debit.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"received_debit\" when calling DefaultApi.post_treasury_debit_reversals, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/debit_reversals"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["received_debit"] = received_debit.to_s if !received_debit.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_debit_reversals",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
    # @param supported_currencies [Array(String)] The currencies the FinancialAccount can hold a balance in.
    # @return [TreasuryFinancialAccount]
    def post_treasury_financial_accounts(*, supported_currencies : Array(String), expand : Array(String)? = nil, features : FeatureAccess? = nil, platform_restrictions : PlatformRestrictions? = nil)
      data, _status_code, _headers = post_treasury_financial_accounts_with_http_info(supported_currencies: supported_currencies, expand: expand, features: features, platform_restrictions: platform_restrictions)
      data
    end

    # &lt;p&gt;Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.&lt;/p&gt;
    # @param supported_currencies [Array(String)] The currencies the FinancialAccount can hold a balance in.
    # @return [Array<(TreasuryFinancialAccount, Integer, Hash)>] TreasuryFinancialAccount data, response status code and response headers
    def post_treasury_financial_accounts_with_http_info(*, supported_currencies : Array(String), expand : Array(String)? = nil, features : FeatureAccess? = nil, platform_restrictions : PlatformRestrictions? = nil)
      request = build_api_request_for_post_treasury_financial_accounts(supported_currencies: supported_currencies, expand: expand, features: features, platform_restrictions: platform_restrictions)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_financial_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryFinancialAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.&lt;/p&gt;
    # @param supported_currencies [Array(String)] The currencies the FinancialAccount can hold a balance in.
    # @return nil
    def post_treasury_financial_accounts(*, supported_currencies : Array(String), expand : Array(String)? = nil, features : FeatureAccess? = nil, platform_restrictions : PlatformRestrictions? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_financial_accounts(supported_currencies: supported_currencies, expand: expand, features: features, platform_restrictions: platform_restrictions).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_financial_accounts(*, supported_currencies : Array(String), expand : Array(String)? = nil, features : FeatureAccess? = nil, platform_restrictions : PlatformRestrictions? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_financial_accounts ..." }
      end
      # resource path
      local_var_path = "/v1/treasury/financial_accounts"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = features.to_s if !features.nil?
      form_params["platform_restrictions"] = platform_restrictions.to_s if !platform_restrictions.nil?
      form_params["supported_currencies"] = @api_client.build_collection_param(supported_currencies, "csv") if !supported_currencies.nil? && !supported_currencies.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_financial_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the details of a FinancialAccount.</p>
    # @param financial_account [String]
    # @return [TreasuryFinancialAccount]
    def post_treasury_financial_accounts_financial_account(*, financial_account : String, expand : Array(String)? = nil, features : FeatureAccess1? = nil, platform_restrictions : PlatformRestrictions? = nil)
      data, _status_code, _headers = post_treasury_financial_accounts_financial_account_with_http_info(financial_account: financial_account, expand: expand, features: features, platform_restrictions: platform_restrictions)
      data
    end

    # &lt;p&gt;Updates the details of a FinancialAccount.&lt;/p&gt;
    # @param financial_account [String]
    # @return [Array<(TreasuryFinancialAccount, Integer, Hash)>] TreasuryFinancialAccount data, response status code and response headers
    def post_treasury_financial_accounts_financial_account_with_http_info(*, financial_account : String, expand : Array(String)? = nil, features : FeatureAccess1? = nil, platform_restrictions : PlatformRestrictions? = nil)
      request = build_api_request_for_post_treasury_financial_accounts_financial_account(financial_account: financial_account, expand: expand, features: features, platform_restrictions: platform_restrictions)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_financial_accounts_financial_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryFinancialAccount.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the details of a FinancialAccount.&lt;/p&gt;
    # @param financial_account [String]
    # @return nil
    def post_treasury_financial_accounts_financial_account(*, financial_account : String, expand : Array(String)? = nil, features : FeatureAccess1? = nil, platform_restrictions : PlatformRestrictions? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_financial_accounts_financial_account(financial_account: financial_account, expand: expand, features: features, platform_restrictions: platform_restrictions).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_financial_accounts_financial_account(*, financial_account : String, expand : Array(String)? = nil, features : FeatureAccess1? = nil, platform_restrictions : PlatformRestrictions? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_financial_accounts_financial_account ..." }
      end
      if @api_client.config.client_side_validation && financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\" when calling DefaultApi.post_treasury_financial_accounts_financial_account, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts/{financial_account}".sub("{" + "financial_account" + "}", URI.encode_path(financial_account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["features"] = features.to_s if !features.nil?
      form_params["platform_restrictions"] = platform_restrictions.to_s if !platform_restrictions.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_financial_accounts_financial_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the Features associated with a FinancialAccount.</p>
    # @param financial_account [String]
    # @return [TreasuryFinancialAccountFeatures]
    def post_treasury_financial_accounts_financial_account_features(*, financial_account : String, card_issuing : Access1? = nil, deposit_insurance : Access2? = nil, expand : Array(String)? = nil, financial_addresses : FinancialAddresses1? = nil, inbound_transfers : InboundTransfers2? = nil, intra_stripe_flows : Access3? = nil, outbound_payments : OutboundPayments1? = nil, outbound_transfers : OutboundTransfers1? = nil)
      data, _status_code, _headers = post_treasury_financial_accounts_financial_account_features_with_http_info(financial_account: financial_account, card_issuing: card_issuing, deposit_insurance: deposit_insurance, expand: expand, financial_addresses: financial_addresses, inbound_transfers: inbound_transfers, intra_stripe_flows: intra_stripe_flows, outbound_payments: outbound_payments, outbound_transfers: outbound_transfers)
      data
    end

    # &lt;p&gt;Updates the Features associated with a FinancialAccount.&lt;/p&gt;
    # @param financial_account [String]
    # @return [Array<(TreasuryFinancialAccountFeatures, Integer, Hash)>] TreasuryFinancialAccountFeatures data, response status code and response headers
    def post_treasury_financial_accounts_financial_account_features_with_http_info(*, financial_account : String, card_issuing : Access1? = nil, deposit_insurance : Access2? = nil, expand : Array(String)? = nil, financial_addresses : FinancialAddresses1? = nil, inbound_transfers : InboundTransfers2? = nil, intra_stripe_flows : Access3? = nil, outbound_payments : OutboundPayments1? = nil, outbound_transfers : OutboundTransfers1? = nil)
      request = build_api_request_for_post_treasury_financial_accounts_financial_account_features(financial_account: financial_account, card_issuing: card_issuing, deposit_insurance: deposit_insurance, expand: expand, financial_addresses: financial_addresses, inbound_transfers: inbound_transfers, intra_stripe_flows: intra_stripe_flows, outbound_payments: outbound_payments, outbound_transfers: outbound_transfers)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_financial_accounts_financial_account_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryFinancialAccountFeatures.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the Features associated with a FinancialAccount.&lt;/p&gt;
    # @param financial_account [String]
    # @return nil
    def post_treasury_financial_accounts_financial_account_features(*, financial_account : String, card_issuing : Access1? = nil, deposit_insurance : Access2? = nil, expand : Array(String)? = nil, financial_addresses : FinancialAddresses1? = nil, inbound_transfers : InboundTransfers2? = nil, intra_stripe_flows : Access3? = nil, outbound_payments : OutboundPayments1? = nil, outbound_transfers : OutboundTransfers1? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_financial_accounts_financial_account_features(financial_account: financial_account, card_issuing: card_issuing, deposit_insurance: deposit_insurance, expand: expand, financial_addresses: financial_addresses, inbound_transfers: inbound_transfers, intra_stripe_flows: intra_stripe_flows, outbound_payments: outbound_payments, outbound_transfers: outbound_transfers).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_financial_accounts_financial_account_features(*, financial_account : String, card_issuing : Access1? = nil, deposit_insurance : Access2? = nil, expand : Array(String)? = nil, financial_addresses : FinancialAddresses1? = nil, inbound_transfers : InboundTransfers2? = nil, intra_stripe_flows : Access3? = nil, outbound_payments : OutboundPayments1? = nil, outbound_transfers : OutboundTransfers1? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_financial_accounts_financial_account_features ..." }
      end
      if @api_client.config.client_side_validation && financial_account.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"financial_account\" when calling DefaultApi.post_treasury_financial_accounts_financial_account_features, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/financial_accounts/{financial_account}/features".sub("{" + "financial_account" + "}", URI.encode_path(financial_account.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["card_issuing"] = card_issuing.to_s if !card_issuing.nil?
      form_params["deposit_insurance"] = deposit_insurance.to_s if !deposit_insurance.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_addresses"] = financial_addresses.to_s if !financial_addresses.nil?
      form_params["inbound_transfers"] = inbound_transfers.to_s if !inbound_transfers.nil?
      form_params["intra_stripe_flows"] = intra_stripe_flows.to_s if !intra_stripe_flows.nil?
      form_params["outbound_payments"] = outbound_payments.to_s if !outbound_payments.nil?
      form_params["outbound_transfers"] = outbound_transfers.to_s if !outbound_transfers.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_financial_accounts_financial_account_features",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an InboundTransfer.</p>
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to send funds to.
    # @param origin_payment_method [String] The origin payment method to be debited for the InboundTransfer.
    # @return [TreasuryInboundTransfer]
    def post_treasury_inbound_transfers(*, amount : Int64, currency : String, financial_account : String, origin_payment_method : String, description : String? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil)
      data, _status_code, _headers = post_treasury_inbound_transfers_with_http_info(amount: amount, currency: currency, financial_account: financial_account, origin_payment_method: origin_payment_method, description: description, expand: expand, statement_descriptor: statement_descriptor)
      data
    end

    # &lt;p&gt;Creates an InboundTransfer.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to send funds to.
    # @param origin_payment_method [String] The origin payment method to be debited for the InboundTransfer.
    # @return [Array<(TreasuryInboundTransfer, Integer, Hash)>] TreasuryInboundTransfer data, response status code and response headers
    def post_treasury_inbound_transfers_with_http_info(*, amount : Int64, currency : String, financial_account : String, origin_payment_method : String, description : String? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil)
      request = build_api_request_for_post_treasury_inbound_transfers(amount: amount, currency: currency, financial_account: financial_account, origin_payment_method: origin_payment_method, description: description, expand: expand, statement_descriptor: statement_descriptor)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_inbound_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryInboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates an InboundTransfer.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to send funds to.
    # @param origin_payment_method [String] The origin payment method to be debited for the InboundTransfer.
    # @return nil
    def post_treasury_inbound_transfers(*, amount : Int64, currency : String, financial_account : String, origin_payment_method : String, description : String? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_inbound_transfers(amount: amount, currency: currency, financial_account: financial_account, origin_payment_method: origin_payment_method, description: description, expand: expand, statement_descriptor: statement_descriptor).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_inbound_transfers(*, amount : Int64, currency : String, financial_account : String, origin_payment_method : String, description : String? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_inbound_transfers ..." }
      end
      if @api_client.config.client_side_validation && origin_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"origin_payment_method\" when calling DefaultApi.post_treasury_inbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_treasury_inbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 10
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_treasury_inbound_transfers, the character length must be smaller than or equal to 10.")
      end

      # resource path
      local_var_path = "/v1/treasury/inbound_transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["origin_payment_method"] = origin_payment_method.to_s if !origin_payment_method.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_inbound_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancels an InboundTransfer.</p>
    # @param inbound_transfer [String]
    # @return [TreasuryInboundTransfer]
    def post_treasury_inbound_transfers_inbound_transfer_cancel(*, inbound_transfer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_treasury_inbound_transfers_inbound_transfer_cancel_with_http_info(inbound_transfer: inbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;Cancels an InboundTransfer.&lt;/p&gt;
    # @param inbound_transfer [String]
    # @return [Array<(TreasuryInboundTransfer, Integer, Hash)>] TreasuryInboundTransfer data, response status code and response headers
    def post_treasury_inbound_transfers_inbound_transfer_cancel_with_http_info(*, inbound_transfer : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_treasury_inbound_transfers_inbound_transfer_cancel(inbound_transfer: inbound_transfer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_inbound_transfers_inbound_transfer_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryInboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancels an InboundTransfer.&lt;/p&gt;
    # @param inbound_transfer [String]
    # @return nil
    def post_treasury_inbound_transfers_inbound_transfer_cancel(*, inbound_transfer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_inbound_transfers_inbound_transfer_cancel(inbound_transfer: inbound_transfer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_inbound_transfers_inbound_transfer_cancel(*, inbound_transfer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_inbound_transfers_inbound_transfer_cancel ..." }
      end
      if @api_client.config.client_side_validation && inbound_transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"inbound_transfer\" when calling DefaultApi.post_treasury_inbound_transfers_inbound_transfer_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/inbound_transfers/{inbound_transfer}/cancel".sub("{" + "inbound_transfer" + "}", URI.encode_path(inbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_inbound_transfers_inbound_transfer_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an OutboundPayment.</p>
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @return [TreasuryOutboundPayment]
    def post_treasury_outbound_payments(*, amount : Int64, currency : String, financial_account : String, customer : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_data : PaymentMethodData? = nil, destination_payment_method_options : PaymentMethodOptions2? = nil, end_user_details : EndUserDetailsParams? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil)
      data, _status_code, _headers = post_treasury_outbound_payments_with_http_info(amount: amount, currency: currency, financial_account: financial_account, customer: customer, description: description, destination_payment_method: destination_payment_method, destination_payment_method_data: destination_payment_method_data, destination_payment_method_options: destination_payment_method_options, end_user_details: end_user_details, expand: expand, statement_descriptor: statement_descriptor)
      data
    end

    # &lt;p&gt;Creates an OutboundPayment.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @return [Array<(TreasuryOutboundPayment, Integer, Hash)>] TreasuryOutboundPayment data, response status code and response headers
    def post_treasury_outbound_payments_with_http_info(*, amount : Int64, currency : String, financial_account : String, customer : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_data : PaymentMethodData? = nil, destination_payment_method_options : PaymentMethodOptions2? = nil, end_user_details : EndUserDetailsParams? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil)
      request = build_api_request_for_post_treasury_outbound_payments(amount: amount, currency: currency, financial_account: financial_account, customer: customer, description: description, destination_payment_method: destination_payment_method, destination_payment_method_data: destination_payment_method_data, destination_payment_method_options: destination_payment_method_options, end_user_details: end_user_details, expand: expand, statement_descriptor: statement_descriptor)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_outbound_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundPayment.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates an OutboundPayment.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @return nil
    def post_treasury_outbound_payments(*, amount : Int64, currency : String, financial_account : String, customer : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_data : PaymentMethodData? = nil, destination_payment_method_options : PaymentMethodOptions2? = nil, end_user_details : EndUserDetailsParams? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_outbound_payments(amount: amount, currency: currency, financial_account: financial_account, customer: customer, description: description, destination_payment_method: destination_payment_method, destination_payment_method_data: destination_payment_method_data, destination_payment_method_options: destination_payment_method_options, end_user_details: end_user_details, expand: expand, statement_descriptor: statement_descriptor).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_outbound_payments(*, amount : Int64, currency : String, financial_account : String, customer : String? = nil, description : String? = nil, destination_payment_method : String? = nil, destination_payment_method_data : PaymentMethodData? = nil, destination_payment_method_options : PaymentMethodOptions2? = nil, end_user_details : EndUserDetailsParams? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_outbound_payments ..." }
      end
      if @api_client.config.client_side_validation && !customer.nil? && customer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"customer\" when calling DefaultApi.post_treasury_outbound_payments, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_treasury_outbound_payments, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !destination_payment_method.nil? && destination_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"destination_payment_method\" when calling DefaultApi.post_treasury_outbound_payments, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_treasury_outbound_payments, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_payments"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["customer"] = customer.to_s if !customer.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["destination_payment_method"] = destination_payment_method.to_s if !destination_payment_method.nil?
      form_params["destination_payment_method_data"] = destination_payment_method_data.to_s if !destination_payment_method_data.nil?
      form_params["destination_payment_method_options"] = destination_payment_method_options.to_s if !destination_payment_method_options.nil?
      form_params["end_user_details"] = end_user_details.to_s if !end_user_details.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_outbound_payments",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Cancel an OutboundPayment.</p>
    # @param id [String]
    # @return [TreasuryOutboundPayment]
    def post_treasury_outbound_payments_id_cancel(*, id : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_treasury_outbound_payments_id_cancel_with_http_info(id: id, expand: expand)
      data
    end

    # &lt;p&gt;Cancel an OutboundPayment.&lt;/p&gt;
    # @param id [String]
    # @return [Array<(TreasuryOutboundPayment, Integer, Hash)>] TreasuryOutboundPayment data, response status code and response headers
    def post_treasury_outbound_payments_id_cancel_with_http_info(*, id : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_treasury_outbound_payments_id_cancel(id: id, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_outbound_payments_id_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundPayment.from_json(data), status_code, headers
    end

    # &lt;p&gt;Cancel an OutboundPayment.&lt;/p&gt;
    # @param id [String]
    # @return nil
    def post_treasury_outbound_payments_id_cancel(*, id : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_outbound_payments_id_cancel(id: id, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_outbound_payments_id_cancel(*, id : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_outbound_payments_id_cancel ..." }
      end
      if @api_client.config.client_side_validation && id.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"id\" when calling DefaultApi.post_treasury_outbound_payments_id_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_payments/{id}/cancel".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_outbound_payments_id_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates an OutboundTransfer.</p>
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param destination_payment_method [String] The PaymentMethod to use as the payment instrument for the OutboundTransfer.
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @return [TreasuryOutboundTransfer]
    def post_treasury_outbound_transfers(*, amount : Int64, currency : String, destination_payment_method : String, financial_account : String, description : String? = nil, destination_payment_method_options : PaymentMethodOptions3? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil)
      data, _status_code, _headers = post_treasury_outbound_transfers_with_http_info(amount: amount, currency: currency, destination_payment_method: destination_payment_method, financial_account: financial_account, description: description, destination_payment_method_options: destination_payment_method_options, expand: expand, statement_descriptor: statement_descriptor)
      data
    end

    # &lt;p&gt;Creates an OutboundTransfer.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param destination_payment_method [String] The PaymentMethod to use as the payment instrument for the OutboundTransfer.
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @return [Array<(TreasuryOutboundTransfer, Integer, Hash)>] TreasuryOutboundTransfer data, response status code and response headers
    def post_treasury_outbound_transfers_with_http_info(*, amount : Int64, currency : String, destination_payment_method : String, financial_account : String, description : String? = nil, destination_payment_method_options : PaymentMethodOptions3? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil)
      request = build_api_request_for_post_treasury_outbound_transfers(amount: amount, currency: currency, destination_payment_method: destination_payment_method, financial_account: financial_account, description: description, destination_payment_method_options: destination_payment_method_options, expand: expand, statement_descriptor: statement_descriptor)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_outbound_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;Creates an OutboundTransfer.&lt;/p&gt;
    # @param amount [Int64] Amount (in cents) to be transferred.
    # @param currency [String] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    # @param destination_payment_method [String] The PaymentMethod to use as the payment instrument for the OutboundTransfer.
    # @param financial_account [String] The FinancialAccount to pull funds from.
    # @return nil
    def post_treasury_outbound_transfers(*, amount : Int64, currency : String, destination_payment_method : String, financial_account : String, description : String? = nil, destination_payment_method_options : PaymentMethodOptions3? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_outbound_transfers(amount: amount, currency: currency, destination_payment_method: destination_payment_method, financial_account: financial_account, description: description, destination_payment_method_options: destination_payment_method_options, expand: expand, statement_descriptor: statement_descriptor).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_outbound_transfers(*, amount : Int64, currency : String, destination_payment_method : String, financial_account : String, description : String? = nil, destination_payment_method_options : PaymentMethodOptions3? = nil, expand : Array(String)? = nil, statement_descriptor : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_outbound_transfers ..." }
      end
      if @api_client.config.client_side_validation && destination_payment_method.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"destination_payment_method\" when calling DefaultApi.post_treasury_outbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_treasury_outbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !statement_descriptor.nil? && statement_descriptor.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"statement_descriptor\" when calling DefaultApi.post_treasury_outbound_transfers, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_transfers"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["amount"] = amount.to_s if !amount.nil?
      form_params["currency"] = currency.to_s if !currency.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["destination_payment_method"] = destination_payment_method.to_s if !destination_payment_method.nil?
      form_params["destination_payment_method_options"] = destination_payment_method_options.to_s if !destination_payment_method_options.nil?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["financial_account"] = financial_account.to_s if !financial_account.nil?
      form_params["statement_descriptor"] = statement_descriptor.to_s if !statement_descriptor.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_outbound_transfers",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
    # @param outbound_transfer [String]
    # @return [TreasuryOutboundTransfer]
    def post_treasury_outbound_transfers_outbound_transfer_cancel(*, outbound_transfer : String, expand : Array(String)? = nil)
      data, _status_code, _headers = post_treasury_outbound_transfers_outbound_transfer_cancel_with_http_info(outbound_transfer: outbound_transfer, expand: expand)
      data
    end

    # &lt;p&gt;An OutboundTransfer can be canceled if the funds have not yet been paid out.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return [Array<(TreasuryOutboundTransfer, Integer, Hash)>] TreasuryOutboundTransfer data, response status code and response headers
    def post_treasury_outbound_transfers_outbound_transfer_cancel_with_http_info(*, outbound_transfer : String, expand : Array(String)? = nil)
      request = build_api_request_for_post_treasury_outbound_transfers_outbound_transfer_cancel(outbound_transfer: outbound_transfer, expand: expand)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_treasury_outbound_transfers_outbound_transfer_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TreasuryOutboundTransfer.from_json(data), status_code, headers
    end

    # &lt;p&gt;An OutboundTransfer can be canceled if the funds have not yet been paid out.&lt;/p&gt;
    # @param outbound_transfer [String]
    # @return nil
    def post_treasury_outbound_transfers_outbound_transfer_cancel(*, outbound_transfer : String, expand : Array(String)? = nil, &block : Crest::Response ->)
      build_api_request_for_post_treasury_outbound_transfers_outbound_transfer_cancel(outbound_transfer: outbound_transfer, expand: expand).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_treasury_outbound_transfers_outbound_transfer_cancel(*, outbound_transfer : String, expand : Array(String)? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_treasury_outbound_transfers_outbound_transfer_cancel ..." }
      end
      if @api_client.config.client_side_validation && outbound_transfer.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"outbound_transfer\" when calling DefaultApi.post_treasury_outbound_transfers_outbound_transfer_cancel, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/treasury/outbound_transfers/{outbound_transfer}/cancel".sub("{" + "outbound_transfer" + "}", URI.encode_path(outbound_transfer.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_treasury_outbound_transfers_outbound_transfer_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href=\"https://dashboard.stripe.com/account/webhooks\">webhooks settings</a> section of the Dashboard.</p>
    # @param enabled_events [Array(String)] The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.
    # @param url [String] The URL of the webhook endpoint.
    # @return [WebhookEndpoint]
    def post_webhook_endpoints(*, enabled_events : Array(String), url : String, api_version : String? = nil, connect : Bool? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      data, _status_code, _headers = post_webhook_endpoints_with_http_info(enabled_events: enabled_events, url: url, api_version: api_version, connect: connect, description: description, expand: expand, metadata: metadata)
      data
    end

    # &lt;p&gt;A webhook endpoint must have a &lt;code&gt;url&lt;/code&gt; and a list of &lt;code&gt;enabled_events&lt;/code&gt;. You may optionally specify the Boolean &lt;code&gt;connect&lt;/code&gt; parameter. If set to true, then a Connect webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; only about events from your account is created. You can also create webhook endpoints in the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhooks settings&lt;/a&gt; section of the Dashboard.&lt;/p&gt;
    # @param enabled_events [Array(String)] The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.
    # @param url [String] The URL of the webhook endpoint.
    # @return [Array<(WebhookEndpoint, Integer, Hash)>] WebhookEndpoint data, response status code and response headers
    def post_webhook_endpoints_with_http_info(*, enabled_events : Array(String), url : String, api_version : String? = nil, connect : Bool? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil)
      request = build_api_request_for_post_webhook_endpoints(enabled_events: enabled_events, url: url, api_version: api_version, connect: connect, description: description, expand: expand, metadata: metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_webhook_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return WebhookEndpoint.from_json(data), status_code, headers
    end

    # &lt;p&gt;A webhook endpoint must have a &lt;code&gt;url&lt;/code&gt; and a list of &lt;code&gt;enabled_events&lt;/code&gt;. You may optionally specify the Boolean &lt;code&gt;connect&lt;/code&gt; parameter. If set to true, then a Connect webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; only about events from your account is created. You can also create webhook endpoints in the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhooks settings&lt;/a&gt; section of the Dashboard.&lt;/p&gt;
    # @param enabled_events [Array(String)] The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.
    # @param url [String] The URL of the webhook endpoint.
    # @return nil
    def post_webhook_endpoints(*, enabled_events : Array(String), url : String, api_version : String? = nil, connect : Bool? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_post_webhook_endpoints(enabled_events: enabled_events, url: url, api_version: api_version, connect: connect, description: description, expand: expand, metadata: metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_webhook_endpoints(*, enabled_events : Array(String), url : String, api_version : String? = nil, connect : Bool? = nil, description : String? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_webhook_endpoints ..." }
      end
      allowable_values = ["*", "account.application.authorized", "account.application.deauthorized", "account.external_account.created", "account.external_account.deleted", "account.external_account.updated", "account.updated", "application_fee.created", "application_fee.refund.updated", "application_fee.refunded", "balance.available", "billing_portal.configuration.created", "billing_portal.configuration.updated", "billing_portal.session.created", "capability.updated", "cash_balance.funds_available", "charge.captured", "charge.dispute.closed", "charge.dispute.created", "charge.dispute.funds_reinstated", "charge.dispute.funds_withdrawn", "charge.dispute.updated", "charge.expired", "charge.failed", "charge.pending", "charge.refund.updated", "charge.refunded", "charge.succeeded", "charge.updated", "checkout.session.async_payment_failed", "checkout.session.async_payment_succeeded", "checkout.session.completed", "checkout.session.expired", "coupon.created", "coupon.deleted", "coupon.updated", "credit_note.created", "credit_note.updated", "credit_note.voided", "customer.created", "customer.deleted", "customer.discount.created", "customer.discount.deleted", "customer.discount.updated", "customer.source.created", "customer.source.deleted", "customer.source.expiring", "customer.source.updated", "customer.subscription.created", "customer.subscription.deleted", "customer.subscription.pending_update_applied", "customer.subscription.pending_update_expired", "customer.subscription.trial_will_end", "customer.subscription.updated", "customer.tax_id.created", "customer.tax_id.deleted", "customer.tax_id.updated", "customer.updated", "file.created", "identity.verification_session.canceled", "identity.verification_session.created", "identity.verification_session.processing", "identity.verification_session.redacted", "identity.verification_session.requires_input", "identity.verification_session.verified", "invoice.created", "invoice.deleted", "invoice.finalization_failed", "invoice.finalized", "invoice.marked_uncollectible", "invoice.paid", "invoice.payment_action_required", "invoice.payment_failed", "invoice.payment_succeeded", "invoice.sent", "invoice.upcoming", "invoice.updated", "invoice.voided", "invoiceitem.created", "invoiceitem.deleted", "invoiceitem.updated", "issuing_authorization.created", "issuing_authorization.request", "issuing_authorization.updated", "issuing_card.created", "issuing_card.updated", "issuing_cardholder.created", "issuing_cardholder.updated", "issuing_dispute.closed", "issuing_dispute.created", "issuing_dispute.funds_reinstated", "issuing_dispute.submitted", "issuing_dispute.updated", "issuing_transaction.created", "issuing_transaction.updated", "mandate.updated", "order.created", "order.payment_failed", "order.payment_succeeded", "order.updated", "order_return.created", "payment_intent.amount_capturable_updated", "payment_intent.canceled", "payment_intent.created", "payment_intent.partially_funded", "payment_intent.payment_failed", "payment_intent.processing", "payment_intent.requires_action", "payment_intent.succeeded", "payment_link.created", "payment_link.updated", "payment_method.attached", "payment_method.automatically_updated", "payment_method.detached", "payment_method.updated", "payout.canceled", "payout.created", "payout.failed", "payout.paid", "payout.updated", "person.created", "person.deleted", "person.updated", "plan.created", "plan.deleted", "plan.updated", "price.created", "price.deleted", "price.updated", "product.created", "product.deleted", "product.updated", "promotion_code.created", "promotion_code.updated", "quote.accepted", "quote.canceled", "quote.created", "quote.finalized", "radar.early_fraud_warning.created", "radar.early_fraud_warning.updated", "recipient.created", "recipient.deleted", "recipient.updated", "reporting.report_run.failed", "reporting.report_run.succeeded", "reporting.report_type.updated", "review.closed", "review.opened", "setup_intent.canceled", "setup_intent.created", "setup_intent.requires_action", "setup_intent.setup_failed", "setup_intent.succeeded", "sigma.scheduled_query_run.created", "sku.created", "sku.deleted", "sku.updated", "source.canceled", "source.chargeable", "source.failed", "source.mandate_notification", "source.refund_attributes_required", "source.transaction.created", "source.transaction.updated", "subscription_schedule.aborted", "subscription_schedule.canceled", "subscription_schedule.completed", "subscription_schedule.created", "subscription_schedule.expiring", "subscription_schedule.released", "subscription_schedule.updated", "tax_rate.created", "tax_rate.updated", "terminal.reader.action_failed", "terminal.reader.action_succeeded", "test_helpers.test_clock.advancing", "test_helpers.test_clock.created", "test_helpers.test_clock.deleted", "test_helpers.test_clock.internal_failure", "test_helpers.test_clock.ready", "topup.canceled", "topup.created", "topup.failed", "topup.reversed", "topup.succeeded", "transfer.created", "transfer.failed", "transfer.paid", "transfer.reversed", "transfer.updated", "treasury.credit_reversal.created", "treasury.credit_reversal.posted", "treasury.debit_reversal.completed", "treasury.debit_reversal.created", "treasury.debit_reversal.initial_credit_granted", "treasury.financial_account.closed", "treasury.financial_account.created", "treasury.financial_account.features_status_updated", "treasury.inbound_transfer.canceled", "treasury.inbound_transfer.created", "treasury.inbound_transfer.failed", "treasury.inbound_transfer.succeeded", "treasury.outbound_payment.canceled", "treasury.outbound_payment.created", "treasury.outbound_payment.expected_arrival_date_updated", "treasury.outbound_payment.failed", "treasury.outbound_payment.posted", "treasury.outbound_payment.returned", "treasury.outbound_transfer.canceled", "treasury.outbound_transfer.created", "treasury.outbound_transfer.expected_arrival_date_updated", "treasury.outbound_transfer.failed", "treasury.outbound_transfer.posted", "treasury.outbound_transfer.returned", "treasury.received_credit.created", "treasury.received_credit.failed", "treasury.received_credit.reversed", "treasury.received_credit.succeeded", "treasury.received_debit.created"]
      if @api_client.config.client_side_validation && !enabled_events.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"enabled_events\", must include one of #{allowable_values}")
      end
      allowable_values = ["2011-01-01", "2011-06-21", "2011-06-28", "2011-08-01", "2011-09-15", "2011-11-17", "2012-02-23", "2012-03-25", "2012-06-18", "2012-06-28", "2012-07-09", "2012-09-24", "2012-10-26", "2012-11-07", "2013-02-11", "2013-02-13", "2013-07-05", "2013-08-12", "2013-08-13", "2013-10-29", "2013-12-03", "2014-01-31", "2014-03-13", "2014-03-28", "2014-05-19", "2014-06-13", "2014-06-17", "2014-07-22", "2014-07-26", "2014-08-04", "2014-08-20", "2014-09-08", "2014-10-07", "2014-11-05", "2014-11-20", "2014-12-08", "2014-12-17", "2014-12-22", "2015-01-11", "2015-01-26", "2015-02-10", "2015-02-16", "2015-02-18", "2015-03-24", "2015-04-07", "2015-06-15", "2015-07-07", "2015-07-13", "2015-07-28", "2015-08-07", "2015-08-19", "2015-09-03", "2015-09-08", "2015-09-23", "2015-10-01", "2015-10-12", "2015-10-16", "2016-02-03", "2016-02-19", "2016-02-22", "2016-02-23", "2016-02-29", "2016-03-07", "2016-06-15", "2016-07-06", "2016-10-19", "2017-01-27", "2017-02-14", "2017-04-06", "2017-05-25", "2017-06-05", "2017-08-15", "2017-12-14", "2018-01-23", "2018-02-05", "2018-02-06", "2018-02-28", "2018-05-21", "2018-07-27", "2018-08-23", "2018-09-06", "2018-09-24", "2018-10-31", "2018-11-08", "2019-02-11", "2019-02-19", "2019-03-14", "2019-05-16", "2019-08-14", "2019-09-09", "2019-10-08", "2019-10-17", "2019-11-05", "2019-12-03", "2020-03-02", "2020-08-27"]
      if @api_client.config.client_side_validation && !api_version.nil? && !allowable_values.includes?(api_version)
        raise ArgumentError.new("invalid value for \"api_version\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !api_version.nil? && api_version.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"api_version\" when calling DefaultApi.post_webhook_endpoints, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_webhook_endpoints, the character length must be smaller than or equal to 5000.")
      end

      # resource path
      local_var_path = "/v1/webhook_endpoints"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["api_version"] = api_version.to_s if !api_version.nil?
      form_params["connect"] = connect.to_s if !connect.nil?
      form_params["description"] = description.to_s if !description.nil?
      form_params["enabled_events"] = @api_client.build_collection_param(enabled_events, "csv") if !enabled_events.nil? && !enabled_events.empty?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["url"] = url.to_s if !url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_webhook_endpoints",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
    # @param webhook_endpoint [String]
    # @return [WebhookEndpoint]
    def post_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String, description : String? = nil, disabled : Bool? = nil, enabled_events : Array(String)? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, url : String? = nil)
      data, _status_code, _headers = post_webhook_endpoints_webhook_endpoint_with_http_info(webhook_endpoint: webhook_endpoint, description: description, disabled: disabled, enabled_events: enabled_events, expand: expand, metadata: metadata, url: url)
      data
    end

    # &lt;p&gt;Updates the webhook endpoint. You may edit the &lt;code&gt;url&lt;/code&gt;, the list of &lt;code&gt;enabled_events&lt;/code&gt;, and the status of your endpoint.&lt;/p&gt;
    # @param webhook_endpoint [String]
    # @return [Array<(WebhookEndpoint, Integer, Hash)>] WebhookEndpoint data, response status code and response headers
    def post_webhook_endpoints_webhook_endpoint_with_http_info(*, webhook_endpoint : String, description : String? = nil, disabled : Bool? = nil, enabled_events : Array(String)? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, url : String? = nil)
      request = build_api_request_for_post_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint, description: description, disabled: disabled, enabled_events: enabled_events, expand: expand, metadata: metadata, url: url)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: DefaultApi#post_webhook_endpoints_webhook_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return WebhookEndpoint.from_json(data), status_code, headers
    end

    # &lt;p&gt;Updates the webhook endpoint. You may edit the &lt;code&gt;url&lt;/code&gt;, the list of &lt;code&gt;enabled_events&lt;/code&gt;, and the status of your endpoint.&lt;/p&gt;
    # @param webhook_endpoint [String]
    # @return nil
    def post_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String, description : String? = nil, disabled : Bool? = nil, enabled_events : Array(String)? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, url : String? = nil, &block : Crest::Response ->)
      build_api_request_for_post_webhook_endpoints_webhook_endpoint(webhook_endpoint: webhook_endpoint, description: description, disabled: disabled, enabled_events: enabled_events, expand: expand, metadata: metadata, url: url).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_webhook_endpoints_webhook_endpoint(*, webhook_endpoint : String, description : String? = nil, disabled : Bool? = nil, enabled_events : Array(String)? = nil, expand : Array(String)? = nil, metadata : PostAccountRequestMetadata? = nil, url : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: DefaultApi.post_webhook_endpoints_webhook_endpoint ..." }
      end
      if @api_client.config.client_side_validation && webhook_endpoint.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"webhook_endpoint\" when calling DefaultApi.post_webhook_endpoints_webhook_endpoint, the character length must be smaller than or equal to 5000.")
      end

      if @api_client.config.client_side_validation && !description.nil? && description.to_s.size > 5000
        raise ArgumentError.new("invalid value for \"description\" when calling DefaultApi.post_webhook_endpoints_webhook_endpoint, the character length must be smaller than or equal to 5000.")
      end

      allowable_values = ["*", "account.application.authorized", "account.application.deauthorized", "account.external_account.created", "account.external_account.deleted", "account.external_account.updated", "account.updated", "application_fee.created", "application_fee.refund.updated", "application_fee.refunded", "balance.available", "billing_portal.configuration.created", "billing_portal.configuration.updated", "billing_portal.session.created", "capability.updated", "cash_balance.funds_available", "charge.captured", "charge.dispute.closed", "charge.dispute.created", "charge.dispute.funds_reinstated", "charge.dispute.funds_withdrawn", "charge.dispute.updated", "charge.expired", "charge.failed", "charge.pending", "charge.refund.updated", "charge.refunded", "charge.succeeded", "charge.updated", "checkout.session.async_payment_failed", "checkout.session.async_payment_succeeded", "checkout.session.completed", "checkout.session.expired", "coupon.created", "coupon.deleted", "coupon.updated", "credit_note.created", "credit_note.updated", "credit_note.voided", "customer.created", "customer.deleted", "customer.discount.created", "customer.discount.deleted", "customer.discount.updated", "customer.source.created", "customer.source.deleted", "customer.source.expiring", "customer.source.updated", "customer.subscription.created", "customer.subscription.deleted", "customer.subscription.pending_update_applied", "customer.subscription.pending_update_expired", "customer.subscription.trial_will_end", "customer.subscription.updated", "customer.tax_id.created", "customer.tax_id.deleted", "customer.tax_id.updated", "customer.updated", "file.created", "identity.verification_session.canceled", "identity.verification_session.created", "identity.verification_session.processing", "identity.verification_session.redacted", "identity.verification_session.requires_input", "identity.verification_session.verified", "invoice.created", "invoice.deleted", "invoice.finalization_failed", "invoice.finalized", "invoice.marked_uncollectible", "invoice.paid", "invoice.payment_action_required", "invoice.payment_failed", "invoice.payment_succeeded", "invoice.sent", "invoice.upcoming", "invoice.updated", "invoice.voided", "invoiceitem.created", "invoiceitem.deleted", "invoiceitem.updated", "issuing_authorization.created", "issuing_authorization.request", "issuing_authorization.updated", "issuing_card.created", "issuing_card.updated", "issuing_cardholder.created", "issuing_cardholder.updated", "issuing_dispute.closed", "issuing_dispute.created", "issuing_dispute.funds_reinstated", "issuing_dispute.submitted", "issuing_dispute.updated", "issuing_transaction.created", "issuing_transaction.updated", "mandate.updated", "order.created", "order.payment_failed", "order.payment_succeeded", "order.updated", "order_return.created", "payment_intent.amount_capturable_updated", "payment_intent.canceled", "payment_intent.created", "payment_intent.partially_funded", "payment_intent.payment_failed", "payment_intent.processing", "payment_intent.requires_action", "payment_intent.succeeded", "payment_link.created", "payment_link.updated", "payment_method.attached", "payment_method.automatically_updated", "payment_method.detached", "payment_method.updated", "payout.canceled", "payout.created", "payout.failed", "payout.paid", "payout.updated", "person.created", "person.deleted", "person.updated", "plan.created", "plan.deleted", "plan.updated", "price.created", "price.deleted", "price.updated", "product.created", "product.deleted", "product.updated", "promotion_code.created", "promotion_code.updated", "quote.accepted", "quote.canceled", "quote.created", "quote.finalized", "radar.early_fraud_warning.created", "radar.early_fraud_warning.updated", "recipient.created", "recipient.deleted", "recipient.updated", "reporting.report_run.failed", "reporting.report_run.succeeded", "reporting.report_type.updated", "review.closed", "review.opened", "setup_intent.canceled", "setup_intent.created", "setup_intent.requires_action", "setup_intent.setup_failed", "setup_intent.succeeded", "sigma.scheduled_query_run.created", "sku.created", "sku.deleted", "sku.updated", "source.canceled", "source.chargeable", "source.failed", "source.mandate_notification", "source.refund_attributes_required", "source.transaction.created", "source.transaction.updated", "subscription_schedule.aborted", "subscription_schedule.canceled", "subscription_schedule.completed", "subscription_schedule.created", "subscription_schedule.expiring", "subscription_schedule.released", "subscription_schedule.updated", "tax_rate.created", "tax_rate.updated", "terminal.reader.action_failed", "terminal.reader.action_succeeded", "test_helpers.test_clock.advancing", "test_helpers.test_clock.created", "test_helpers.test_clock.deleted", "test_helpers.test_clock.internal_failure", "test_helpers.test_clock.ready", "topup.canceled", "topup.created", "topup.failed", "topup.reversed", "topup.succeeded", "transfer.created", "transfer.failed", "transfer.paid", "transfer.reversed", "transfer.updated", "treasury.credit_reversal.created", "treasury.credit_reversal.posted", "treasury.debit_reversal.completed", "treasury.debit_reversal.created", "treasury.debit_reversal.initial_credit_granted", "treasury.financial_account.closed", "treasury.financial_account.created", "treasury.financial_account.features_status_updated", "treasury.inbound_transfer.canceled", "treasury.inbound_transfer.created", "treasury.inbound_transfer.failed", "treasury.inbound_transfer.succeeded", "treasury.outbound_payment.canceled", "treasury.outbound_payment.created", "treasury.outbound_payment.expected_arrival_date_updated", "treasury.outbound_payment.failed", "treasury.outbound_payment.posted", "treasury.outbound_payment.returned", "treasury.outbound_transfer.canceled", "treasury.outbound_transfer.created", "treasury.outbound_transfer.expected_arrival_date_updated", "treasury.outbound_transfer.failed", "treasury.outbound_transfer.posted", "treasury.outbound_transfer.returned", "treasury.received_credit.created", "treasury.received_credit.failed", "treasury.received_credit.reversed", "treasury.received_credit.succeeded", "treasury.received_debit.created"]
      if @api_client.config.client_side_validation && !enabled_events.nil? && !enabled_events.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"enabled_events\", must include one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/v1/webhook_endpoints/{webhook_endpoint}".sub("{" + "webhook_endpoint" + "}", URI.encode_path(webhook_endpoint.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["description"] = description.to_s if !description.nil?
      form_params["disabled"] = disabled.to_s if !disabled.nil?
      form_params["enabled_events"] = @api_client.build_collection_param(enabled_events, "csv") if !enabled_events.nil? && !enabled_events.empty?
      form_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      form_params["metadata"] = metadata.to_s if !metadata.nil?
      form_params["url"] = url.to_s if !url.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "DefaultApi.post_webhook_endpoints_webhook_endpoint",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
