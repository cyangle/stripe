#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/automatic_tax_param"
require "../models/connect_account_reference"
require "../models/customer_details_param"
require "../models/deleted_invoice"
require "../models/error"
require "../models/from_invoice"
require "../models/get_accounts_created_parameter"
require "../models/get_invoices_upcoming_discounts_parameter"
require "../models/get_invoices_upcoming_on_behalf_of_parameter"
require "../models/get_invoices_upcoming_subscription_billing_cycle_anchor_parameter"
require "../models/get_invoices_upcoming_subscription_cancel_at_parameter"
require "../models/get_invoices_upcoming_subscription_default_tax_rates_parameter"
require "../models/get_invoices_upcoming_subscription_trial_end_parameter"

require "../models/invoice"
require "../models/invoice_item_preview_params"
require "../models/invoice_lines_list"
require "../models/invoices_resource_list"
require "../models/line_item"
require "../models/one_time_price_data_with_product_data"
require "../models/payment_settings"
require "../models/period"
require "../models/post_accounts_request_metadata"
require "../models/post_invoices_invoice_lines_line_item_id_request_discounts"
require "../models/post_invoices_invoice_lines_line_item_id_request_metadata"
require "../models/post_invoices_invoice_lines_line_item_id_request_tax_amounts"
require "../models/post_invoices_invoice_lines_line_item_id_request_tax_rates"
require "../models/post_invoices_invoice_pay_request_mandate"
require "../models/post_invoices_invoice_request_custom_fields"
require "../models/post_invoices_invoice_request_default_source"
require "../models/post_invoices_invoice_request_default_tax_rates"
require "../models/post_invoices_invoice_request_discounts"
require "../models/post_invoices_invoice_request_effective_at"
require "../models/post_invoices_invoice_request_number"
require "../models/post_invoices_invoice_request_on_behalf_of"
require "../models/post_invoices_invoice_request_shipping_cost"
require "../models/post_invoices_invoice_request_shipping_details"
require "../models/post_invoices_invoice_request_transfer_data"
require "../models/post_invoices_request_account_tax_ids"
require "../models/post_invoices_request_custom_fields"
require "../models/post_invoices_request_discounts"
require "../models/recipient_shipping_with_optional_fields_address"
require "../models/rendering_param"
require "../models/schedule_details_params"
require "../models/search_result"
require "../models/shipping_cost"
require "../models/subscription_details_params"
require "../models/subscription_item_update_params"
require "../models/transfer_data_specs"

module Stripe
  class InvoicesApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href=\"#void_invoice\">voided</a>.</p>
    # @required @param invoice [String?]
    # @return [Stripe::DeletedInvoice]
    def delete_invoices_invoice(
      *,
      invoice : String? = nil
    ) : Stripe::DeletedInvoice
      data, _status_code, _headers = delete_invoices_invoice_with_http_info(invoice: invoice)
      data
    end

    # &lt;p&gt;Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be &lt;a href&#x3D;\&quot;#void_invoice\&quot;&gt;voided&lt;/a&gt;.&lt;/p&gt;
    # @required @param invoice [String?]
    # @return [Tuple(Stripe::DeletedInvoice, Integer, Hash)] Stripe::DeletedInvoice, response status code and response headers
    def delete_invoices_invoice_with_http_info(
      *,
      invoice : String? = nil
    ) : Tuple(Stripe::DeletedInvoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_invoices_invoice(invoice: invoice)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#delete_invoices_invoice\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedInvoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be &lt;a href&#x3D;\&quot;#void_invoice\&quot;&gt;voided&lt;/a&gt;.&lt;/p&gt;
    # @required @param invoice [String?]
    # @return nil
    def delete_invoices_invoice(
      *,
      invoice : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_invoices_invoice(invoice: invoice).execute(&block)
    end

    DELETE_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_delete_invoices_invoice(
      *,
      invoice : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.delete_invoices_invoice ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, DELETE_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "InvoicesApi.delete_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return invoices for the customer specified by this customer ID.
    # @optional @param subscription [String?] Only return invoices for the subscription specified by this subscription ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return invoices that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param collection_method [String?] The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    # @optional @param due_date [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::InvoicesResourceList]
    def get_invoices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      due_date : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::InvoicesResourceList
      data, _status_code, _headers = get_invoices_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, subscription: subscription, created: created, expand: expand, collection_method: collection_method, status: status, due_date: due_date)
      data
    end

    # &lt;p&gt;You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return invoices for the customer specified by this customer ID.
    # @optional @param subscription [String?] Only return invoices for the subscription specified by this subscription ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return invoices that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param collection_method [String?] The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    # @optional @param due_date [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::InvoicesResourceList, Integer, Hash)] Stripe::InvoicesResourceList, response status code and response headers
    def get_invoices_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      due_date : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::InvoicesResourceList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, subscription: subscription, created: created, expand: expand, collection_method: collection_method, status: status, due_date: due_date)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#get_invoices\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::InvoicesResourceList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return invoices for the customer specified by this customer ID.
    # @optional @param subscription [String?] Only return invoices for the subscription specified by this subscription ID.
    # @optional @param created [Stripe::GetAccountsCreatedParameter?] Only return invoices that were created during the given date interval.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param collection_method [String?] The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    # @optional @param due_date [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_invoices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      due_date : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, subscription: subscription, created: created, expand: expand, collection_method: collection_method, status: status, due_date: due_date).execute(&block)
    end

    GET_INVOICES_MAX_LENGTH_FOR_ENDING_BEFORE       = 5000
    GET_INVOICES_MAX_LENGTH_FOR_STARTING_AFTER      = 5000
    GET_INVOICES_MAX_LENGTH_FOR_CUSTOMER            = 5000
    GET_INVOICES_MAX_LENGTH_FOR_SUBSCRIPTION        = 5000
    GET_INVOICES_VALID_VALUES_FOR_COLLECTION_METHOD = String.static_array("charge_automatically", "send_invoice")
    GET_INVOICES_VALID_VALUES_FOR_STATUS            = String.static_array("draft", "open", "paid", "uncollectible", "void")

    # @return Crest::Request
    def build_api_request_for_get_invoices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      expand : Array(Array(String))? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      due_date : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.get_invoices ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_INVOICES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_INVOICES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_INVOICES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, GET_INVOICES_MAX_LENGTH_FOR_SUBSCRIPTION)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end

        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, GET_INVOICES_VALID_VALUES_FOR_COLLECTION_METHOD)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_INVOICES_VALID_VALUES_FOR_STATUS)
        end
        unless (_due_date = due_date).nil?
          _due_date.validate if _due_date.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["due_date"] = due_date.to_s if !due_date.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the invoice with the given ID.</p>
    # @required @param invoice [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Invoice]
    def get_invoices_invoice(
      *,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = get_invoices_invoice_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the invoice with the given ID.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def get_invoices_invoice_with_http_info(
      *,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_invoice(invoice: invoice, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#get_invoices_invoice\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the invoice with the given ID.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_invoices_invoice(
      *,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_invoice(invoice: invoice, expand: expand).execute(&block)
    end

    GET_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_invoice(
      *,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.get_invoices_invoice ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, GET_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @required @param invoice [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::InvoiceLinesList]
    def get_invoices_invoice_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::InvoiceLinesList
      data, _status_code, _headers = get_invoices_invoice_lines_with_http_info(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving an invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::InvoiceLinesList, Integer, Hash)] Stripe::InvoiceLinesList, response status code and response headers
    def get_invoices_invoice_lines_with_http_info(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::InvoiceLinesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_invoice_lines(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#get_invoices_invoice_lines\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::InvoiceLinesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving an invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_invoices_invoice_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_invoice_lines(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_INVOICE        = 5000
    GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_invoice_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.get_invoices_invoice_lines ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/lines".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_invoice_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for invoices you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_invoices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_invoices_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for invoices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_invoices_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#get_invoices_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for invoices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_invoices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_INVOICES_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_INVOICES_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.get_invoices_search ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_INVOICES_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_INVOICES_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>  <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>  <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>  <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href=\"https://docs.stripe.com/currencies/conversions\">Learn more</a></p>
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead.
    # @optional @param preview_mode [String?] Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead.
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead.
    # @optional @param subscription_resume_at [String?] For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead.
    # @optional @param subscription_cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview (up to 250).
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param on_behalf_of [Stripe::GetInvoicesUpcomingOnBehalfOfParameter?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param issuer [Stripe::ConnectAccountReference?] The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param schedule [String?] The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule_details [Stripe::ScheduleDetailsParams?] The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.
    # @optional @param subscription_details [Stripe::SubscriptionDetailsParams?] The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead.
    # @return [Stripe::Invoice]
    def get_invoices_upcoming(
      *,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      preview_mode : String? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_resume_at : String? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      on_behalf_of : Stripe::GetInvoicesUpcomingOnBehalfOfParameter? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      schedule : String? = nil,
      subscription : String? = nil,
      schedule_details : Stripe::ScheduleDetailsParams? = nil,
      subscription_details : Stripe::SubscriptionDetailsParams? = nil,
      subscription_cancel_now : Bool? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = get_invoices_upcoming_with_http_info(subscription_items: subscription_items, subscription_cancel_at: subscription_cancel_at, preview_mode: preview_mode, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_resume_at: subscription_resume_at, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, on_behalf_of: on_behalf_of, issuer: issuer, discounts: discounts, currency: currency, customer: customer, schedule: schedule, subscription: subscription, schedule_details: schedule_details, subscription_details: subscription_details, subscription_cancel_now: subscription_cancel_now)
      data
    end

    # &lt;p&gt;At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.&lt;/p&gt;  &lt;p&gt;Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.&lt;/p&gt;  &lt;p&gt;You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the &lt;code&gt;subscription_details.proration_date&lt;/code&gt; parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where &lt;code&gt;period[start]&lt;/code&gt; is equal to the &lt;code&gt;subscription_details.proration_date&lt;/code&gt; value passed in the request.&lt;/p&gt;  &lt;p&gt;Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. &lt;a href&#x3D;\&quot;https://docs.stripe.com/currencies/conversions\&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt;
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead.
    # @optional @param preview_mode [String?] Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead.
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead.
    # @optional @param subscription_resume_at [String?] For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead.
    # @optional @param subscription_cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview (up to 250).
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param on_behalf_of [Stripe::GetInvoicesUpcomingOnBehalfOfParameter?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param issuer [Stripe::ConnectAccountReference?] The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param schedule [String?] The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule_details [Stripe::ScheduleDetailsParams?] The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.
    # @optional @param subscription_details [Stripe::SubscriptionDetailsParams?] The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def get_invoices_upcoming_with_http_info(
      *,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      preview_mode : String? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_resume_at : String? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      on_behalf_of : Stripe::GetInvoicesUpcomingOnBehalfOfParameter? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      schedule : String? = nil,
      subscription : String? = nil,
      schedule_details : Stripe::ScheduleDetailsParams? = nil,
      subscription_details : Stripe::SubscriptionDetailsParams? = nil,
      subscription_cancel_now : Bool? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_upcoming(subscription_items: subscription_items, subscription_cancel_at: subscription_cancel_at, preview_mode: preview_mode, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_resume_at: subscription_resume_at, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, on_behalf_of: on_behalf_of, issuer: issuer, discounts: discounts, currency: currency, customer: customer, schedule: schedule, subscription: subscription, schedule_details: schedule_details, subscription_details: subscription_details, subscription_cancel_now: subscription_cancel_now)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#get_invoices_upcoming\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.&lt;/p&gt;  &lt;p&gt;Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.&lt;/p&gt;  &lt;p&gt;You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the &lt;code&gt;subscription_details.proration_date&lt;/code&gt; parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where &lt;code&gt;period[start]&lt;/code&gt; is equal to the &lt;code&gt;subscription_details.proration_date&lt;/code&gt; value passed in the request.&lt;/p&gt;  &lt;p&gt;Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. &lt;a href&#x3D;\&quot;https://docs.stripe.com/currencies/conversions\&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt;
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead.
    # @optional @param preview_mode [String?] Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead.
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead.
    # @optional @param subscription_resume_at [String?] For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead.
    # @optional @param subscription_cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview (up to 250).
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param on_behalf_of [Stripe::GetInvoicesUpcomingOnBehalfOfParameter?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param issuer [Stripe::ConnectAccountReference?] The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param schedule [String?] The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule_details [Stripe::ScheduleDetailsParams?] The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.
    # @optional @param subscription_details [Stripe::SubscriptionDetailsParams?] The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead.
    # @return nil
    def get_invoices_upcoming(
      *,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      preview_mode : String? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_resume_at : String? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      on_behalf_of : Stripe::GetInvoicesUpcomingOnBehalfOfParameter? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      schedule : String? = nil,
      subscription : String? = nil,
      schedule_details : Stripe::ScheduleDetailsParams? = nil,
      subscription_details : Stripe::SubscriptionDetailsParams? = nil,
      subscription_cancel_now : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_upcoming(subscription_items: subscription_items, subscription_cancel_at: subscription_cancel_at, preview_mode: preview_mode, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_resume_at: subscription_resume_at, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, on_behalf_of: on_behalf_of, issuer: issuer, discounts: discounts, currency: currency, customer: customer, schedule: schedule, subscription: subscription, schedule_details: schedule_details, subscription_details: subscription_details, subscription_cancel_now: subscription_cancel_now).execute(&block)
    end

    GET_INVOICES_UPCOMING_VALID_VALUES_FOR_PREVIEW_MODE                    = String.static_array("next", "recurring")
    GET_INVOICES_UPCOMING_VALID_VALUES_FOR_SUBSCRIPTION_PRORATION_BEHAVIOR = String.static_array("always_invoice", "create_prorations", "none")
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SUBSCRIPTION_RESUME_AT            = 5000
    GET_INVOICES_UPCOMING_VALID_VALUES_FOR_SUBSCRIPTION_RESUME_AT          = String.static_array("now")
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_COUPON                            = 5000
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_CUSTOMER                          = 5000
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SCHEDULE                          = 5000
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SUBSCRIPTION                      = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_upcoming(
      *,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      preview_mode : String? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_resume_at : String? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      on_behalf_of : Stripe::GetInvoicesUpcomingOnBehalfOfParameter? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      schedule : String? = nil,
      subscription : String? = nil,
      schedule_details : Stripe::ScheduleDetailsParams? = nil,
      subscription_details : Stripe::SubscriptionDetailsParams? = nil,
      subscription_cancel_now : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.get_invoices_upcoming ..." }
      end

      if client_side_validation?
        unless (_subscription_cancel_at = subscription_cancel_at).nil?
          _subscription_cancel_at.validate if _subscription_cancel_at.is_a?(OpenApi::Validatable)
        end
        unless (_preview_mode = preview_mode).nil?
          OpenApi::EnumValidator.validate("preview_mode", _preview_mode, GET_INVOICES_UPCOMING_VALID_VALUES_FOR_PREVIEW_MODE)
        end

        unless (_customer_details = customer_details).nil?
          _customer_details.validate if _customer_details.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_proration_behavior = subscription_proration_behavior).nil?
          OpenApi::EnumValidator.validate("subscription_proration_behavior", _subscription_proration_behavior, GET_INVOICES_UPCOMING_VALID_VALUES_FOR_SUBSCRIPTION_PRORATION_BEHAVIOR)
        end
        unless (_subscription_billing_cycle_anchor = subscription_billing_cycle_anchor).nil?
          _subscription_billing_cycle_anchor.validate if _subscription_billing_cycle_anchor.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_resume_at = subscription_resume_at).nil?
          OpenApi::EnumValidator.validate("subscription_resume_at", _subscription_resume_at, GET_INVOICES_UPCOMING_VALID_VALUES_FOR_SUBSCRIPTION_RESUME_AT)
        end

        unless (_subscription_trial_end = subscription_trial_end).nil?
          _subscription_trial_end.validate if _subscription_trial_end.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_default_tax_rates = subscription_default_tax_rates).nil?
          _subscription_default_tax_rates.validate if _subscription_default_tax_rates.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end

        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_COUPON)
        end
        unless (_on_behalf_of = on_behalf_of).nil?
          _on_behalf_of.validate if _on_behalf_of.is_a?(OpenApi::Validatable)
        end
        unless (_issuer = issuer).nil?
          _issuer.validate if _issuer.is_a?(OpenApi::Validatable)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_schedule = schedule).nil?
          OpenApi::PrimitiveValidator.validate_max_length("schedule", schedule.to_s.size, GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SCHEDULE)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SUBSCRIPTION)
        end
        unless (_schedule_details = schedule_details).nil?
          _schedule_details.validate if _schedule_details.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_details = subscription_details).nil?
          _subscription_details.validate if _subscription_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/upcoming"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["subscription_items"] = @api_client.build_collection_param(subscription_items, "csv") if !subscription_items.nil? && !subscription_items.empty?
      query_params["subscription_cancel_at"] = subscription_cancel_at.to_s if !subscription_cancel_at.nil?
      query_params["preview_mode"] = preview_mode.to_s if !preview_mode.nil?
      query_params["subscription_start_date"] = subscription_start_date.to_s if !subscription_start_date.nil?
      query_params["customer_details"] = customer_details.to_s if !customer_details.nil?
      query_params["subscription_proration_behavior"] = subscription_proration_behavior.to_s if !subscription_proration_behavior.nil?
      query_params["subscription_billing_cycle_anchor"] = subscription_billing_cycle_anchor.to_s if !subscription_billing_cycle_anchor.nil?
      query_params["subscription_resume_at"] = subscription_resume_at.to_s if !subscription_resume_at.nil?
      query_params["subscription_proration_date"] = subscription_proration_date.to_s if !subscription_proration_date.nil?
      query_params["subscription_trial_end"] = subscription_trial_end.to_s if !subscription_trial_end.nil?
      query_params["subscription_default_tax_rates"] = subscription_default_tax_rates.to_s if !subscription_default_tax_rates.nil?
      query_params["subscription_cancel_at_period_end"] = subscription_cancel_at_period_end.to_s if !subscription_cancel_at_period_end.nil?
      query_params["subscription_trial_from_plan"] = subscription_trial_from_plan.to_s if !subscription_trial_from_plan.nil?
      query_params["invoice_items"] = @api_client.build_collection_param(invoice_items, "csv") if !invoice_items.nil? && !invoice_items.empty?
      query_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["coupon"] = coupon.to_s if !coupon.nil?
      query_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      query_params["issuer"] = issuer.to_s if !issuer.nil?
      query_params["discounts"] = discounts.to_s if !discounts.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["schedule"] = schedule.to_s if !schedule.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["schedule_details"] = schedule_details.to_s if !schedule_details.nil?
      query_params["subscription_details"] = subscription_details.to_s if !subscription_details.nil?
      query_params["subscription_cancel_now"] = subscription_cancel_now.to_s if !subscription_cancel_now.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_upcoming",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead.
    # @optional @param preview_mode [String?] Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead.
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead.
    # @optional @param subscription_resume_at [String?] For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead.
    # @optional @param subscription_cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview (up to 250).
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param on_behalf_of [Stripe::GetInvoicesUpcomingOnBehalfOfParameter?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param issuer [Stripe::ConnectAccountReference?] The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param schedule [String?] The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule_details [Stripe::ScheduleDetailsParams?] The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.
    # @optional @param subscription_details [Stripe::SubscriptionDetailsParams?] The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead.
    # @return [Stripe::InvoiceLinesList]
    def get_invoices_upcoming_lines(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      preview_mode : String? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_resume_at : String? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      on_behalf_of : Stripe::GetInvoicesUpcomingOnBehalfOfParameter? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      schedule : String? = nil,
      subscription : String? = nil,
      schedule_details : Stripe::ScheduleDetailsParams? = nil,
      subscription_details : Stripe::SubscriptionDetailsParams? = nil,
      subscription_cancel_now : Bool? = nil
    ) : Stripe::InvoiceLinesList
      data, _status_code, _headers = get_invoices_upcoming_lines_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, subscription_items: subscription_items, subscription_cancel_at: subscription_cancel_at, preview_mode: preview_mode, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_resume_at: subscription_resume_at, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, on_behalf_of: on_behalf_of, issuer: issuer, discounts: discounts, currency: currency, customer: customer, schedule: schedule, subscription: subscription, schedule_details: schedule_details, subscription_details: subscription_details, subscription_cancel_now: subscription_cancel_now)
      data
    end

    # &lt;p&gt;When retrieving an upcoming invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead.
    # @optional @param preview_mode [String?] Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead.
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead.
    # @optional @param subscription_resume_at [String?] For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead.
    # @optional @param subscription_cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview (up to 250).
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param on_behalf_of [Stripe::GetInvoicesUpcomingOnBehalfOfParameter?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param issuer [Stripe::ConnectAccountReference?] The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param schedule [String?] The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule_details [Stripe::ScheduleDetailsParams?] The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.
    # @optional @param subscription_details [Stripe::SubscriptionDetailsParams?] The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead.
    # @return [Tuple(Stripe::InvoiceLinesList, Integer, Hash)] Stripe::InvoiceLinesList, response status code and response headers
    def get_invoices_upcoming_lines_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      preview_mode : String? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_resume_at : String? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      on_behalf_of : Stripe::GetInvoicesUpcomingOnBehalfOfParameter? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      schedule : String? = nil,
      subscription : String? = nil,
      schedule_details : Stripe::ScheduleDetailsParams? = nil,
      subscription_details : Stripe::SubscriptionDetailsParams? = nil,
      subscription_cancel_now : Bool? = nil
    ) : Tuple(Stripe::InvoiceLinesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_upcoming_lines(ending_before: ending_before, starting_after: starting_after, limit: limit, subscription_items: subscription_items, subscription_cancel_at: subscription_cancel_at, preview_mode: preview_mode, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_resume_at: subscription_resume_at, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, on_behalf_of: on_behalf_of, issuer: issuer, discounts: discounts, currency: currency, customer: customer, schedule: schedule, subscription: subscription, schedule_details: schedule_details, subscription_details: subscription_details, subscription_cancel_now: subscription_cancel_now)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#get_invoices_upcoming_lines\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::InvoiceLinesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving an upcoming invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead.
    # @optional @param preview_mode [String?] Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead.
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead.
    # @optional @param subscription_resume_at [String?] For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead.
    # @optional @param subscription_cancel_at_period_end [Bool?] Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview (up to 250).
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.
    # @optional @param on_behalf_of [Stripe::GetInvoicesUpcomingOnBehalfOfParameter?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param issuer [Stripe::ConnectAccountReference?] The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
    # @optional @param schedule [String?] The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule_details [Stripe::ScheduleDetailsParams?] The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.
    # @optional @param subscription_details [Stripe::SubscriptionDetailsParams?] The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead.
    # @return nil
    def get_invoices_upcoming_lines(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      preview_mode : String? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_resume_at : String? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      on_behalf_of : Stripe::GetInvoicesUpcomingOnBehalfOfParameter? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      schedule : String? = nil,
      subscription : String? = nil,
      schedule_details : Stripe::ScheduleDetailsParams? = nil,
      subscription_details : Stripe::SubscriptionDetailsParams? = nil,
      subscription_cancel_now : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_upcoming_lines(ending_before: ending_before, starting_after: starting_after, limit: limit, subscription_items: subscription_items, subscription_cancel_at: subscription_cancel_at, preview_mode: preview_mode, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_resume_at: subscription_resume_at, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, on_behalf_of: on_behalf_of, issuer: issuer, discounts: discounts, currency: currency, customer: customer, schedule: schedule, subscription: subscription, schedule_details: schedule_details, subscription_details: subscription_details, subscription_cancel_now: subscription_cancel_now).execute(&block)
    end

    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_ENDING_BEFORE                     = 5000
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_STARTING_AFTER                    = 5000
    GET_INVOICES_UPCOMING_LINES_VALID_VALUES_FOR_PREVIEW_MODE                    = String.static_array("next", "recurring")
    GET_INVOICES_UPCOMING_LINES_VALID_VALUES_FOR_SUBSCRIPTION_PRORATION_BEHAVIOR = String.static_array("always_invoice", "create_prorations", "none")
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SUBSCRIPTION_RESUME_AT            = 5000
    GET_INVOICES_UPCOMING_LINES_VALID_VALUES_FOR_SUBSCRIPTION_RESUME_AT          = String.static_array("now")
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_COUPON                            = 5000
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_CUSTOMER                          = 5000
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SCHEDULE                          = 5000
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SUBSCRIPTION                      = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_upcoming_lines(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      preview_mode : String? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_resume_at : String? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      on_behalf_of : Stripe::GetInvoicesUpcomingOnBehalfOfParameter? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      schedule : String? = nil,
      subscription : String? = nil,
      schedule_details : Stripe::ScheduleDetailsParams? = nil,
      subscription_details : Stripe::SubscriptionDetailsParams? = nil,
      subscription_cancel_now : Bool? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.get_invoices_upcoming_lines ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_subscription_cancel_at = subscription_cancel_at).nil?
          _subscription_cancel_at.validate if _subscription_cancel_at.is_a?(OpenApi::Validatable)
        end
        unless (_preview_mode = preview_mode).nil?
          OpenApi::EnumValidator.validate("preview_mode", _preview_mode, GET_INVOICES_UPCOMING_LINES_VALID_VALUES_FOR_PREVIEW_MODE)
        end

        unless (_customer_details = customer_details).nil?
          _customer_details.validate if _customer_details.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_proration_behavior = subscription_proration_behavior).nil?
          OpenApi::EnumValidator.validate("subscription_proration_behavior", _subscription_proration_behavior, GET_INVOICES_UPCOMING_LINES_VALID_VALUES_FOR_SUBSCRIPTION_PRORATION_BEHAVIOR)
        end
        unless (_subscription_billing_cycle_anchor = subscription_billing_cycle_anchor).nil?
          _subscription_billing_cycle_anchor.validate if _subscription_billing_cycle_anchor.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_resume_at = subscription_resume_at).nil?
          OpenApi::EnumValidator.validate("subscription_resume_at", _subscription_resume_at, GET_INVOICES_UPCOMING_LINES_VALID_VALUES_FOR_SUBSCRIPTION_RESUME_AT)
        end

        unless (_subscription_trial_end = subscription_trial_end).nil?
          _subscription_trial_end.validate if _subscription_trial_end.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_default_tax_rates = subscription_default_tax_rates).nil?
          _subscription_default_tax_rates.validate if _subscription_default_tax_rates.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end

        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_COUPON)
        end
        unless (_on_behalf_of = on_behalf_of).nil?
          _on_behalf_of.validate if _on_behalf_of.is_a?(OpenApi::Validatable)
        end
        unless (_issuer = issuer).nil?
          _issuer.validate if _issuer.is_a?(OpenApi::Validatable)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_schedule = schedule).nil?
          OpenApi::PrimitiveValidator.validate_max_length("schedule", schedule.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SCHEDULE)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SUBSCRIPTION)
        end
        unless (_schedule_details = schedule_details).nil?
          _schedule_details.validate if _schedule_details.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_details = subscription_details).nil?
          _subscription_details.validate if _subscription_details.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/upcoming/lines"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["subscription_items"] = @api_client.build_collection_param(subscription_items, "csv") if !subscription_items.nil? && !subscription_items.empty?
      query_params["subscription_cancel_at"] = subscription_cancel_at.to_s if !subscription_cancel_at.nil?
      query_params["preview_mode"] = preview_mode.to_s if !preview_mode.nil?
      query_params["subscription_start_date"] = subscription_start_date.to_s if !subscription_start_date.nil?
      query_params["customer_details"] = customer_details.to_s if !customer_details.nil?
      query_params["subscription_proration_behavior"] = subscription_proration_behavior.to_s if !subscription_proration_behavior.nil?
      query_params["subscription_billing_cycle_anchor"] = subscription_billing_cycle_anchor.to_s if !subscription_billing_cycle_anchor.nil?
      query_params["subscription_resume_at"] = subscription_resume_at.to_s if !subscription_resume_at.nil?
      query_params["subscription_proration_date"] = subscription_proration_date.to_s if !subscription_proration_date.nil?
      query_params["subscription_trial_end"] = subscription_trial_end.to_s if !subscription_trial_end.nil?
      query_params["subscription_default_tax_rates"] = subscription_default_tax_rates.to_s if !subscription_default_tax_rates.nil?
      query_params["subscription_cancel_at_period_end"] = subscription_cancel_at_period_end.to_s if !subscription_cancel_at_period_end.nil?
      query_params["subscription_trial_from_plan"] = subscription_trial_from_plan.to_s if !subscription_trial_from_plan.nil?
      query_params["invoice_items"] = @api_client.build_collection_param(invoice_items, "csv") if !invoice_items.nil? && !invoice_items.empty?
      query_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["coupon"] = coupon.to_s if !coupon.nil?
      query_params["on_behalf_of"] = on_behalf_of.to_s if !on_behalf_of.nil?
      query_params["issuer"] = issuer.to_s if !issuer.nil?
      query_params["discounts"] = discounts.to_s if !discounts.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["schedule"] = schedule.to_s if !schedule.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["schedule_details"] = schedule_details.to_s if !schedule_details.nil?
      query_params["subscription_details"] = subscription_details.to_s if !subscription_details.nil?
      query_params["subscription_cancel_now"] = subscription_cancel_now.to_s if !subscription_cancel_now.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_upcoming_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href=\"#finalize_invoice\">finalize</a> the invoice, which allows you to <a href=\"#pay_invoice\">pay</a> or <a href=\"#send_invoice\">send</a> the invoice to your customers.</p>
    # @optional @param account_tax_ids [Stripe::PostInvoicesRequestAccountTaxIds?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
    # @optional @param currency [String?] The currency to create this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param custom_fields [Stripe::PostInvoicesRequestCustomFields?]
    # @optional @param customer [String?] The ID of the customer who will be billed.
    # @optional @param days_until_due [Int32?] The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    # @optional @param default_source [String?] ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
    # @optional @param default_tax_rates [Array(String)?] The tax rates that will apply to any line item that does not have `tax_rates` set.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    # @optional @param discounts [Stripe::PostInvoicesRequestDiscounts?]
    # @optional @param due_date [Int32?] The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`.
    # @optional @param effective_at [Int32?] The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param footer [String?] Footer to be displayed on the invoice.
    # @optional @param from_invoice [Stripe::FromInvoice?]
    # @optional @param issuer [Stripe::ConnectAccountReference?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param number [String?] Set the number for this invoice. If no number is present then a number will be assigned automatically when the invoice is finalized. In many markets, regulations require invoices to be unique, sequential and / or gapless. You are responsible for ensuring this is true across all your different invoicing systems in the event that you edit the invoice number using our API. If you use only Stripe for your invoices and do not change invoice numbers, Stripe handles this aspect of compliance for you automatically.
    # @optional @param on_behalf_of [String?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_items_behavior [String?] How to handle pending invoice items on invoice creation. Defaults to `exclude` if the parameter is omitted.
    # @optional @param rendering [Stripe::RenderingParam?]
    # @optional @param shipping_cost [Stripe::ShippingCost?]
    # @optional @param shipping_details [Stripe::RecipientShippingWithOptionalFieldsAddress?]
    # @optional @param statement_descriptor [String?] Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
    # @optional @param subscription [String?] The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription's billing cycle and regular subscription events won't be affected.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @return [Stripe::Invoice]
    def post_invoices(
      *,
      account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      application_fee_amount : Int64? = nil,
      auto_advance : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      currency : String? = nil,
      custom_fields : Stripe::PostInvoicesRequestCustomFields? = nil,
      customer : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Array(String)? = nil,
      description : String? = nil,
      discounts : Stripe::PostInvoicesRequestDiscounts? = nil,
      due_date : Int64? = nil,
      effective_at : Int64? = nil,
      expand : Array(String)? = nil,
      footer : String? = nil,
      from_invoice : Stripe::FromInvoice? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      number : String? = nil,
      on_behalf_of : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_items_behavior : String? = nil,
      rendering : Stripe::RenderingParam? = nil,
      shipping_cost : Stripe::ShippingCost? = nil,
      shipping_details : Stripe::RecipientShippingWithOptionalFieldsAddress? = nil,
      statement_descriptor : String? = nil,
      subscription : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_with_http_info(account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, currency: currency, custom_fields: custom_fields, customer: customer, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, effective_at: effective_at, expand: expand, footer: footer, from_invoice: from_invoice, issuer: issuer, metadata: metadata, number: number, on_behalf_of: on_behalf_of, payment_settings: payment_settings, pending_invoice_items_behavior: pending_invoice_items_behavior, rendering: rendering, shipping_cost: shipping_cost, shipping_details: shipping_details, statement_descriptor: statement_descriptor, subscription: subscription, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you &lt;a href&#x3D;\&quot;#finalize_invoice\&quot;&gt;finalize&lt;/a&gt; the invoice, which allows you to &lt;a href&#x3D;\&quot;#pay_invoice\&quot;&gt;pay&lt;/a&gt; or &lt;a href&#x3D;\&quot;#send_invoice\&quot;&gt;send&lt;/a&gt; the invoice to your customers.&lt;/p&gt;
    # @optional @param account_tax_ids [Stripe::PostInvoicesRequestAccountTaxIds?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
    # @optional @param currency [String?] The currency to create this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param custom_fields [Stripe::PostInvoicesRequestCustomFields?]
    # @optional @param customer [String?] The ID of the customer who will be billed.
    # @optional @param days_until_due [Int32?] The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    # @optional @param default_source [String?] ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
    # @optional @param default_tax_rates [Array(String)?] The tax rates that will apply to any line item that does not have `tax_rates` set.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    # @optional @param discounts [Stripe::PostInvoicesRequestDiscounts?]
    # @optional @param due_date [Int32?] The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`.
    # @optional @param effective_at [Int32?] The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param footer [String?] Footer to be displayed on the invoice.
    # @optional @param from_invoice [Stripe::FromInvoice?]
    # @optional @param issuer [Stripe::ConnectAccountReference?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param number [String?] Set the number for this invoice. If no number is present then a number will be assigned automatically when the invoice is finalized. In many markets, regulations require invoices to be unique, sequential and / or gapless. You are responsible for ensuring this is true across all your different invoicing systems in the event that you edit the invoice number using our API. If you use only Stripe for your invoices and do not change invoice numbers, Stripe handles this aspect of compliance for you automatically.
    # @optional @param on_behalf_of [String?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_items_behavior [String?] How to handle pending invoice items on invoice creation. Defaults to `exclude` if the parameter is omitted.
    # @optional @param rendering [Stripe::RenderingParam?]
    # @optional @param shipping_cost [Stripe::ShippingCost?]
    # @optional @param shipping_details [Stripe::RecipientShippingWithOptionalFieldsAddress?]
    # @optional @param statement_descriptor [String?] Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
    # @optional @param subscription [String?] The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription's billing cycle and regular subscription events won't be affected.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_with_http_info(
      *,
      account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      application_fee_amount : Int64? = nil,
      auto_advance : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      currency : String? = nil,
      custom_fields : Stripe::PostInvoicesRequestCustomFields? = nil,
      customer : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Array(String)? = nil,
      description : String? = nil,
      discounts : Stripe::PostInvoicesRequestDiscounts? = nil,
      due_date : Int64? = nil,
      effective_at : Int64? = nil,
      expand : Array(String)? = nil,
      footer : String? = nil,
      from_invoice : Stripe::FromInvoice? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      number : String? = nil,
      on_behalf_of : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_items_behavior : String? = nil,
      rendering : Stripe::RenderingParam? = nil,
      shipping_cost : Stripe::ShippingCost? = nil,
      shipping_details : Stripe::RecipientShippingWithOptionalFieldsAddress? = nil,
      statement_descriptor : String? = nil,
      subscription : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices(account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, currency: currency, custom_fields: custom_fields, customer: customer, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, effective_at: effective_at, expand: expand, footer: footer, from_invoice: from_invoice, issuer: issuer, metadata: metadata, number: number, on_behalf_of: on_behalf_of, payment_settings: payment_settings, pending_invoice_items_behavior: pending_invoice_items_behavior, rendering: rendering, shipping_cost: shipping_cost, shipping_details: shipping_details, statement_descriptor: statement_descriptor, subscription: subscription, transfer_data: transfer_data)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#post_invoices\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you &lt;a href&#x3D;\&quot;#finalize_invoice\&quot;&gt;finalize&lt;/a&gt; the invoice, which allows you to &lt;a href&#x3D;\&quot;#pay_invoice\&quot;&gt;pay&lt;/a&gt; or &lt;a href&#x3D;\&quot;#send_invoice\&quot;&gt;send&lt;/a&gt; the invoice to your customers.&lt;/p&gt;
    # @optional @param account_tax_ids [Stripe::PostInvoicesRequestAccountTaxIds?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
    # @optional @param currency [String?] The currency to create this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param custom_fields [Stripe::PostInvoicesRequestCustomFields?]
    # @optional @param customer [String?] The ID of the customer who will be billed.
    # @optional @param days_until_due [Int32?] The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`.
    # @optional @param default_payment_method [String?] ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    # @optional @param default_source [String?] ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
    # @optional @param default_tax_rates [Array(String)?] The tax rates that will apply to any line item that does not have `tax_rates` set.
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    # @optional @param discounts [Stripe::PostInvoicesRequestDiscounts?]
    # @optional @param due_date [Int32?] The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`.
    # @optional @param effective_at [Int32?] The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param footer [String?] Footer to be displayed on the invoice.
    # @optional @param from_invoice [Stripe::FromInvoice?]
    # @optional @param issuer [Stripe::ConnectAccountReference?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param number [String?] Set the number for this invoice. If no number is present then a number will be assigned automatically when the invoice is finalized. In many markets, regulations require invoices to be unique, sequential and / or gapless. You are responsible for ensuring this is true across all your different invoicing systems in the event that you edit the invoice number using our API. If you use only Stripe for your invoices and do not change invoice numbers, Stripe handles this aspect of compliance for you automatically.
    # @optional @param on_behalf_of [String?] The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param pending_invoice_items_behavior [String?] How to handle pending invoice items on invoice creation. Defaults to `exclude` if the parameter is omitted.
    # @optional @param rendering [Stripe::RenderingParam?]
    # @optional @param shipping_cost [Stripe::ShippingCost?]
    # @optional @param shipping_details [Stripe::RecipientShippingWithOptionalFieldsAddress?]
    # @optional @param statement_descriptor [String?] Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
    # @optional @param subscription [String?] The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription's billing cycle and regular subscription events won't be affected.
    # @optional @param transfer_data [Stripe::TransferDataSpecs?]
    # @return nil
    def post_invoices(
      *,
      account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      application_fee_amount : Int64? = nil,
      auto_advance : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      currency : String? = nil,
      custom_fields : Stripe::PostInvoicesRequestCustomFields? = nil,
      customer : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Array(String)? = nil,
      description : String? = nil,
      discounts : Stripe::PostInvoicesRequestDiscounts? = nil,
      due_date : Int64? = nil,
      effective_at : Int64? = nil,
      expand : Array(String)? = nil,
      footer : String? = nil,
      from_invoice : Stripe::FromInvoice? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      number : String? = nil,
      on_behalf_of : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_items_behavior : String? = nil,
      rendering : Stripe::RenderingParam? = nil,
      shipping_cost : Stripe::ShippingCost? = nil,
      shipping_details : Stripe::RecipientShippingWithOptionalFieldsAddress? = nil,
      statement_descriptor : String? = nil,
      subscription : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices(account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, currency: currency, custom_fields: custom_fields, customer: customer, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, effective_at: effective_at, expand: expand, footer: footer, from_invoice: from_invoice, issuer: issuer, metadata: metadata, number: number, on_behalf_of: on_behalf_of, payment_settings: payment_settings, pending_invoice_items_behavior: pending_invoice_items_behavior, rendering: rendering, shipping_cost: shipping_cost, shipping_details: shipping_details, statement_descriptor: statement_descriptor, subscription: subscription, transfer_data: transfer_data).execute(&block)
    end

    POST_INVOICES_VALID_VALUES_FOR_COLLECTION_METHOD              = String.static_array("charge_automatically", "send_invoice")
    POST_INVOICES_MAX_LENGTH_FOR_CUSTOMER                         = 5000
    POST_INVOICES_MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD           = 5000
    POST_INVOICES_MAX_LENGTH_FOR_DEFAULT_SOURCE                   = 5000
    POST_INVOICES_MAX_LENGTH_FOR_DESCRIPTION                      = 1500
    POST_INVOICES_MAX_LENGTH_FOR_FOOTER                           = 5000
    POST_INVOICES_MAX_LENGTH_FOR_NUMBER                           =   26
    POST_INVOICES_VALID_VALUES_FOR_PENDING_INVOICE_ITEMS_BEHAVIOR = String.static_array("exclude", "include")
    POST_INVOICES_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR             =   22
    POST_INVOICES_MAX_LENGTH_FOR_SUBSCRIPTION                     = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices(
      *,
      account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      application_fee_amount : Int64? = nil,
      auto_advance : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      currency : String? = nil,
      custom_fields : Stripe::PostInvoicesRequestCustomFields? = nil,
      customer : String? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : String? = nil,
      default_tax_rates : Array(String)? = nil,
      description : String? = nil,
      discounts : Stripe::PostInvoicesRequestDiscounts? = nil,
      due_date : Int64? = nil,
      effective_at : Int64? = nil,
      expand : Array(String)? = nil,
      footer : String? = nil,
      from_invoice : Stripe::FromInvoice? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      number : String? = nil,
      on_behalf_of : String? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      pending_invoice_items_behavior : String? = nil,
      rendering : Stripe::RenderingParam? = nil,
      shipping_cost : Stripe::ShippingCost? = nil,
      shipping_details : Stripe::RecipientShippingWithOptionalFieldsAddress? = nil,
      statement_descriptor : String? = nil,
      subscription : String? = nil,
      transfer_data : Stripe::TransferDataSpecs? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.post_invoices ..." }
      end

      if client_side_validation?
        unless (_account_tax_ids = account_tax_ids).nil?
          _account_tax_ids.validate if _account_tax_ids.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, POST_INVOICES_VALID_VALUES_FOR_COLLECTION_METHOD)
        end

        unless (_custom_fields = custom_fields).nil?
          _custom_fields.validate if _custom_fields.is_a?(OpenApi::Validatable)
        end
        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, POST_INVOICES_MAX_LENGTH_FOR_CUSTOMER)
        end

        unless (_default_payment_method = default_payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("default_payment_method", default_payment_method.to_s.size, POST_INVOICES_MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD)
        end
        unless (_default_source = default_source).nil?
          OpenApi::PrimitiveValidator.validate_max_length("default_source", default_source.to_s.size, POST_INVOICES_MAX_LENGTH_FOR_DEFAULT_SOURCE)
        end

        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_INVOICES_MAX_LENGTH_FOR_DESCRIPTION)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_footer = footer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("footer", footer.to_s.size, POST_INVOICES_MAX_LENGTH_FOR_FOOTER)
        end
        unless (_from_invoice = from_invoice).nil?
          _from_invoice.validate if _from_invoice.is_a?(OpenApi::Validatable)
        end
        unless (_issuer = issuer).nil?
          _issuer.validate if _issuer.is_a?(OpenApi::Validatable)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_number = number).nil?
          OpenApi::PrimitiveValidator.validate_max_length("number", number.to_s.size, POST_INVOICES_MAX_LENGTH_FOR_NUMBER)
        end

        unless (_payment_settings = payment_settings).nil?
          _payment_settings.validate if _payment_settings.is_a?(OpenApi::Validatable)
        end
        unless (_pending_invoice_items_behavior = pending_invoice_items_behavior).nil?
          OpenApi::EnumValidator.validate("pending_invoice_items_behavior", _pending_invoice_items_behavior, POST_INVOICES_VALID_VALUES_FOR_PENDING_INVOICE_ITEMS_BEHAVIOR)
        end
        unless (_rendering = rendering).nil?
          _rendering.validate if _rendering.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_cost = shipping_cost).nil?
          _shipping_cost.validate if _shipping_cost.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_details = shipping_details).nil?
          _shipping_details.validate if _shipping_details.is_a?(OpenApi::Validatable)
        end
        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_INVOICES_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, POST_INVOICES_MAX_LENGTH_FOR_SUBSCRIPTION)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(account_tax_ids.to_json), "account_tax_ids")) if !account_tax_ids.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_amount", application_fee_amount.to_s) if !application_fee_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("auto_advance", auto_advance.to_s) if !auto_advance.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_tax.to_json), "automatic_tax")) if !automatic_tax.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("collection_method", collection_method.to_s) if !collection_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(custom_fields.to_json), "custom_fields")) if !custom_fields.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer", customer.to_s) if !customer.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("days_until_due", days_until_due.to_s) if !days_until_due.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("default_payment_method", default_payment_method.to_s) if !default_payment_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("default_source", default_source.to_s) if !default_source.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(default_tax_rates.to_json), "default_tax_rates")) if !default_tax_rates.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(discounts.to_json), "discounts")) if !discounts.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("due_date", due_date.to_s) if !due_date.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("effective_at", effective_at.to_s) if !effective_at.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("footer", footer.to_s) if !footer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(from_invoice.to_json), "from_invoice")) if !from_invoice.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(issuer.to_json), "issuer")) if !issuer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("number", number.to_s) if !number.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("on_behalf_of", on_behalf_of.to_s) if !on_behalf_of.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_settings.to_json), "payment_settings")) if !payment_settings.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("pending_invoice_items_behavior", pending_invoice_items_behavior.to_s) if !pending_invoice_items_behavior.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(rendering.to_json), "rendering")) if !rendering.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_cost.to_json), "shipping_cost")) if !shipping_cost.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_details.to_json), "shipping_details")) if !shipping_details.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("subscription", subscription.to_s) if !subscription.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Draft invoices are fully editable. Once an invoice is <a href=\"/docs/billing/invoices/workflow#finalized\">finalized</a>, monetary values, as well as <code>collection_method</code>, become uneditable.</p>  <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or <a href=\"/docs/billing/invoices/reconciliation\">automatically reconciling</a> invoices, pass <code>auto_advance=false</code>.</p>
    # @required @param invoice [String?]
    # @optional @param account_tax_ids [Stripe::PostInvoicesRequestAccountTaxIds?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
    # @optional @param custom_fields [Stripe::PostInvoicesInvoiceRequestCustomFields?]
    # @optional @param days_until_due [Int32?] The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
    # @optional @param default_payment_method [String?] ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    # @optional @param default_source [Stripe::PostInvoicesInvoiceRequestDefaultSource?]
    # @optional @param default_tax_rates [Stripe::PostInvoicesInvoiceRequestDefaultTaxRates?]
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    # @optional @param discounts [Stripe::PostInvoicesInvoiceRequestDiscounts?]
    # @optional @param due_date [Int32?] The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
    # @optional @param effective_at [Stripe::PostInvoicesInvoiceRequestEffectiveAt?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param footer [String?] Footer to be displayed on the invoice.
    # @optional @param issuer [Stripe::ConnectAccountReference?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param number [Stripe::PostInvoicesInvoiceRequestNumber?]
    # @optional @param on_behalf_of [Stripe::PostInvoicesInvoiceRequestOnBehalfOf?]
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param rendering [Stripe::RenderingParam?]
    # @optional @param shipping_cost [Stripe::PostInvoicesInvoiceRequestShippingCost?]
    # @optional @param shipping_details [Stripe::PostInvoicesInvoiceRequestShippingDetails?]
    # @optional @param statement_descriptor [String?] Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
    # @optional @param transfer_data [Stripe::PostInvoicesInvoiceRequestTransferData?]
    # @return [Stripe::Invoice]
    def post_invoices_invoice(
      *,
      invoice : String? = nil,
      account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      application_fee_amount : Int64? = nil,
      auto_advance : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      custom_fields : Stripe::PostInvoicesInvoiceRequestCustomFields? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : Stripe::PostInvoicesInvoiceRequestDefaultSource? = nil,
      default_tax_rates : Stripe::PostInvoicesInvoiceRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostInvoicesInvoiceRequestDiscounts? = nil,
      due_date : Int64? = nil,
      effective_at : Stripe::PostInvoicesInvoiceRequestEffectiveAt? = nil,
      expand : Array(String)? = nil,
      footer : String? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      number : Stripe::PostInvoicesInvoiceRequestNumber? = nil,
      on_behalf_of : Stripe::PostInvoicesInvoiceRequestOnBehalfOf? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      rendering : Stripe::RenderingParam? = nil,
      shipping_cost : Stripe::PostInvoicesInvoiceRequestShippingCost? = nil,
      shipping_details : Stripe::PostInvoicesInvoiceRequestShippingDetails? = nil,
      statement_descriptor : String? = nil,
      transfer_data : Stripe::PostInvoicesInvoiceRequestTransferData? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_with_http_info(invoice: invoice, account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, effective_at: effective_at, expand: expand, footer: footer, issuer: issuer, metadata: metadata, number: number, on_behalf_of: on_behalf_of, payment_settings: payment_settings, rendering: rendering, shipping_cost: shipping_cost, shipping_details: shipping_details, statement_descriptor: statement_descriptor, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;Draft invoices are fully editable. Once an invoice is &lt;a href&#x3D;\&quot;/docs/billing/invoices/workflow#finalized\&quot;&gt;finalized&lt;/a&gt;, monetary values, as well as &lt;code&gt;collection_method&lt;/code&gt;, become uneditable.&lt;/p&gt;  &lt;p&gt;If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or &lt;a href&#x3D;\&quot;/docs/billing/invoices/reconciliation\&quot;&gt;automatically reconciling&lt;/a&gt; invoices, pass &lt;code&gt;auto_advance&#x3D;false&lt;/code&gt;.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param account_tax_ids [Stripe::PostInvoicesRequestAccountTaxIds?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
    # @optional @param custom_fields [Stripe::PostInvoicesInvoiceRequestCustomFields?]
    # @optional @param days_until_due [Int32?] The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
    # @optional @param default_payment_method [String?] ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    # @optional @param default_source [Stripe::PostInvoicesInvoiceRequestDefaultSource?]
    # @optional @param default_tax_rates [Stripe::PostInvoicesInvoiceRequestDefaultTaxRates?]
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    # @optional @param discounts [Stripe::PostInvoicesInvoiceRequestDiscounts?]
    # @optional @param due_date [Int32?] The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
    # @optional @param effective_at [Stripe::PostInvoicesInvoiceRequestEffectiveAt?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param footer [String?] Footer to be displayed on the invoice.
    # @optional @param issuer [Stripe::ConnectAccountReference?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param number [Stripe::PostInvoicesInvoiceRequestNumber?]
    # @optional @param on_behalf_of [Stripe::PostInvoicesInvoiceRequestOnBehalfOf?]
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param rendering [Stripe::RenderingParam?]
    # @optional @param shipping_cost [Stripe::PostInvoicesInvoiceRequestShippingCost?]
    # @optional @param shipping_details [Stripe::PostInvoicesInvoiceRequestShippingDetails?]
    # @optional @param statement_descriptor [String?] Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
    # @optional @param transfer_data [Stripe::PostInvoicesInvoiceRequestTransferData?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_with_http_info(
      *,
      invoice : String? = nil,
      account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      application_fee_amount : Int64? = nil,
      auto_advance : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      custom_fields : Stripe::PostInvoicesInvoiceRequestCustomFields? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : Stripe::PostInvoicesInvoiceRequestDefaultSource? = nil,
      default_tax_rates : Stripe::PostInvoicesInvoiceRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostInvoicesInvoiceRequestDiscounts? = nil,
      due_date : Int64? = nil,
      effective_at : Stripe::PostInvoicesInvoiceRequestEffectiveAt? = nil,
      expand : Array(String)? = nil,
      footer : String? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      number : Stripe::PostInvoicesInvoiceRequestNumber? = nil,
      on_behalf_of : Stripe::PostInvoicesInvoiceRequestOnBehalfOf? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      rendering : Stripe::RenderingParam? = nil,
      shipping_cost : Stripe::PostInvoicesInvoiceRequestShippingCost? = nil,
      shipping_details : Stripe::PostInvoicesInvoiceRequestShippingDetails? = nil,
      statement_descriptor : String? = nil,
      transfer_data : Stripe::PostInvoicesInvoiceRequestTransferData? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice(invoice: invoice, account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, effective_at: effective_at, expand: expand, footer: footer, issuer: issuer, metadata: metadata, number: number, on_behalf_of: on_behalf_of, payment_settings: payment_settings, rendering: rendering, shipping_cost: shipping_cost, shipping_details: shipping_details, statement_descriptor: statement_descriptor, transfer_data: transfer_data)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#post_invoices_invoice\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Draft invoices are fully editable. Once an invoice is &lt;a href&#x3D;\&quot;/docs/billing/invoices/workflow#finalized\&quot;&gt;finalized&lt;/a&gt;, monetary values, as well as &lt;code&gt;collection_method&lt;/code&gt;, become uneditable.&lt;/p&gt;  &lt;p&gt;If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or &lt;a href&#x3D;\&quot;/docs/billing/invoices/reconciliation\&quot;&gt;automatically reconciling&lt;/a&gt; invoices, pass &lt;code&gt;auto_advance&#x3D;false&lt;/code&gt;.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param account_tax_ids [Stripe::PostInvoicesRequestAccountTaxIds?]
    # @optional @param application_fee_amount [Int32?] A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?]
    # @optional @param collection_method [String?] Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
    # @optional @param custom_fields [Stripe::PostInvoicesInvoiceRequestCustomFields?]
    # @optional @param days_until_due [Int32?] The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
    # @optional @param default_payment_method [String?] ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    # @optional @param default_source [Stripe::PostInvoicesInvoiceRequestDefaultSource?]
    # @optional @param default_tax_rates [Stripe::PostInvoicesInvoiceRequestDefaultTaxRates?]
    # @optional @param description [String?] An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    # @optional @param discounts [Stripe::PostInvoicesInvoiceRequestDiscounts?]
    # @optional @param due_date [Int32?] The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
    # @optional @param effective_at [Stripe::PostInvoicesInvoiceRequestEffectiveAt?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param footer [String?] Footer to be displayed on the invoice.
    # @optional @param issuer [Stripe::ConnectAccountReference?]
    # @optional @param metadata [Stripe::PostAccountsRequestMetadata?]
    # @optional @param number [Stripe::PostInvoicesInvoiceRequestNumber?]
    # @optional @param on_behalf_of [Stripe::PostInvoicesInvoiceRequestOnBehalfOf?]
    # @optional @param payment_settings [Stripe::PaymentSettings?]
    # @optional @param rendering [Stripe::RenderingParam?]
    # @optional @param shipping_cost [Stripe::PostInvoicesInvoiceRequestShippingCost?]
    # @optional @param shipping_details [Stripe::PostInvoicesInvoiceRequestShippingDetails?]
    # @optional @param statement_descriptor [String?] Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
    # @optional @param transfer_data [Stripe::PostInvoicesInvoiceRequestTransferData?]
    # @return nil
    def post_invoices_invoice(
      *,
      invoice : String? = nil,
      account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      application_fee_amount : Int64? = nil,
      auto_advance : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      custom_fields : Stripe::PostInvoicesInvoiceRequestCustomFields? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : Stripe::PostInvoicesInvoiceRequestDefaultSource? = nil,
      default_tax_rates : Stripe::PostInvoicesInvoiceRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostInvoicesInvoiceRequestDiscounts? = nil,
      due_date : Int64? = nil,
      effective_at : Stripe::PostInvoicesInvoiceRequestEffectiveAt? = nil,
      expand : Array(String)? = nil,
      footer : String? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      number : Stripe::PostInvoicesInvoiceRequestNumber? = nil,
      on_behalf_of : Stripe::PostInvoicesInvoiceRequestOnBehalfOf? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      rendering : Stripe::RenderingParam? = nil,
      shipping_cost : Stripe::PostInvoicesInvoiceRequestShippingCost? = nil,
      shipping_details : Stripe::PostInvoicesInvoiceRequestShippingDetails? = nil,
      statement_descriptor : String? = nil,
      transfer_data : Stripe::PostInvoicesInvoiceRequestTransferData? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice(invoice: invoice, account_tax_ids: account_tax_ids, application_fee_amount: application_fee_amount, auto_advance: auto_advance, automatic_tax: automatic_tax, collection_method: collection_method, custom_fields: custom_fields, days_until_due: days_until_due, default_payment_method: default_payment_method, default_source: default_source, default_tax_rates: default_tax_rates, description: description, discounts: discounts, due_date: due_date, effective_at: effective_at, expand: expand, footer: footer, issuer: issuer, metadata: metadata, number: number, on_behalf_of: on_behalf_of, payment_settings: payment_settings, rendering: rendering, shipping_cost: shipping_cost, shipping_details: shipping_details, statement_descriptor: statement_descriptor, transfer_data: transfer_data).execute(&block)
    end

    POST_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE                = 5000
    POST_INVOICES_INVOICE_VALID_VALUES_FOR_COLLECTION_METHOD    = String.static_array("charge_automatically", "send_invoice")
    POST_INVOICES_INVOICE_MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD = 5000
    POST_INVOICES_INVOICE_MAX_LENGTH_FOR_DESCRIPTION            = 1500
    POST_INVOICES_INVOICE_MAX_LENGTH_FOR_FOOTER                 = 5000
    POST_INVOICES_INVOICE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR   =   22

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice(
      *,
      invoice : String? = nil,
      account_tax_ids : Stripe::PostInvoicesRequestAccountTaxIds? = nil,
      application_fee_amount : Int64? = nil,
      auto_advance : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      collection_method : String? = nil,
      custom_fields : Stripe::PostInvoicesInvoiceRequestCustomFields? = nil,
      days_until_due : Int64? = nil,
      default_payment_method : String? = nil,
      default_source : Stripe::PostInvoicesInvoiceRequestDefaultSource? = nil,
      default_tax_rates : Stripe::PostInvoicesInvoiceRequestDefaultTaxRates? = nil,
      description : String? = nil,
      discounts : Stripe::PostInvoicesInvoiceRequestDiscounts? = nil,
      due_date : Int64? = nil,
      effective_at : Stripe::PostInvoicesInvoiceRequestEffectiveAt? = nil,
      expand : Array(String)? = nil,
      footer : String? = nil,
      issuer : Stripe::ConnectAccountReference? = nil,
      metadata : Stripe::PostAccountsRequestMetadata? = nil,
      number : Stripe::PostInvoicesInvoiceRequestNumber? = nil,
      on_behalf_of : Stripe::PostInvoicesInvoiceRequestOnBehalfOf? = nil,
      payment_settings : Stripe::PaymentSettings? = nil,
      rendering : Stripe::RenderingParam? = nil,
      shipping_cost : Stripe::PostInvoicesInvoiceRequestShippingCost? = nil,
      shipping_details : Stripe::PostInvoicesInvoiceRequestShippingDetails? = nil,
      statement_descriptor : String? = nil,
      transfer_data : Stripe::PostInvoicesInvoiceRequestTransferData? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_account_tax_ids = account_tax_ids).nil?
          _account_tax_ids.validate if _account_tax_ids.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, POST_INVOICES_INVOICE_VALID_VALUES_FOR_COLLECTION_METHOD)
        end
        unless (_custom_fields = custom_fields).nil?
          _custom_fields.validate if _custom_fields.is_a?(OpenApi::Validatable)
        end

        unless (_default_payment_method = default_payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("default_payment_method", default_payment_method.to_s.size, POST_INVOICES_INVOICE_MAX_LENGTH_FOR_DEFAULT_PAYMENT_METHOD)
        end
        unless (_default_source = default_source).nil?
          _default_source.validate if _default_source.is_a?(OpenApi::Validatable)
        end
        unless (_default_tax_rates = default_tax_rates).nil?
          _default_tax_rates.validate if _default_tax_rates.is_a?(OpenApi::Validatable)
        end
        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_INVOICES_INVOICE_MAX_LENGTH_FOR_DESCRIPTION)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_effective_at = effective_at).nil?
          _effective_at.validate if _effective_at.is_a?(OpenApi::Validatable)
        end

        unless (_footer = footer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("footer", footer.to_s.size, POST_INVOICES_INVOICE_MAX_LENGTH_FOR_FOOTER)
        end
        unless (_issuer = issuer).nil?
          _issuer.validate if _issuer.is_a?(OpenApi::Validatable)
        end
        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_number = number).nil?
          _number.validate if _number.is_a?(OpenApi::Validatable)
        end
        unless (_on_behalf_of = on_behalf_of).nil?
          _on_behalf_of.validate if _on_behalf_of.is_a?(OpenApi::Validatable)
        end
        unless (_payment_settings = payment_settings).nil?
          _payment_settings.validate if _payment_settings.is_a?(OpenApi::Validatable)
        end
        unless (_rendering = rendering).nil?
          _rendering.validate if _rendering.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_cost = shipping_cost).nil?
          _shipping_cost.validate if _shipping_cost.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_details = shipping_details).nil?
          _shipping_details.validate if _shipping_details.is_a?(OpenApi::Validatable)
        end
        unless (_statement_descriptor = statement_descriptor).nil?
          OpenApi::PrimitiveValidator.validate_max_length("statement_descriptor", statement_descriptor.to_s.size, POST_INVOICES_INVOICE_MAX_LENGTH_FOR_STATEMENT_DESCRIPTOR)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(account_tax_ids.to_json), "account_tax_ids")) if !account_tax_ids.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_amount", application_fee_amount.to_s) if !application_fee_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("auto_advance", auto_advance.to_s) if !auto_advance.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_tax.to_json), "automatic_tax")) if !automatic_tax.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("collection_method", collection_method.to_s) if !collection_method.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(custom_fields.to_json), "custom_fields")) if !custom_fields.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("days_until_due", days_until_due.to_s) if !days_until_due.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("default_payment_method", default_payment_method.to_s) if !default_payment_method.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(default_source.to_json), "default_source")) if !default_source.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(default_tax_rates.to_json), "default_tax_rates")) if !default_tax_rates.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(discounts.to_json), "discounts")) if !discounts.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("due_date", due_date.to_s) if !due_date.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(effective_at.to_json), "effective_at")) if !effective_at.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("footer", footer.to_s) if !footer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(issuer.to_json), "issuer")) if !issuer.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(number.to_json), "number")) if !number.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(on_behalf_of.to_json), "on_behalf_of")) if !on_behalf_of.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_settings.to_json), "payment_settings")) if !payment_settings.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(rendering.to_json), "rendering")) if !rendering.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_cost.to_json), "shipping_cost")) if !shipping_cost.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_details.to_json), "shipping_details")) if !shipping_details.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("statement_descriptor", statement_descriptor.to_s) if !statement_descriptor.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
    # @required @param invoice [String?]
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Invoice]
    def post_invoices_invoice_finalize(
      *,
      invoice : String? = nil,
      auto_advance : Bool? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_finalize_with_http_info(invoice: invoice, auto_advance: auto_advance, expand: expand)
      data
    end

    # &lt;p&gt;Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_finalize_with_http_info(
      *,
      invoice : String? = nil,
      auto_advance : Bool? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_finalize(invoice: invoice, auto_advance: auto_advance, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_finalize\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param auto_advance [Bool?] Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_invoices_invoice_finalize(
      *,
      invoice : String? = nil,
      auto_advance : Bool? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_finalize(invoice: invoice, auto_advance: auto_advance, expand: expand).execute(&block)
    end

    POST_INVOICES_INVOICE_FINALIZE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_finalize(
      *,
      invoice : String? = nil,
      auto_advance : Bool? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_finalize ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_FINALIZE_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/finalize".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("auto_advance", auto_advance.to_s) if !auto_advance.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_finalize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.</p>
    # @required @param invoice [String?] Invoice ID of line item
    # @required @param line_item_id [String?] Invoice line item ID
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount.
    # @optional @param description [String?] An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
    # @optional @param discountable [Bool?] Controls whether discounts apply to this line item. Defaults to false for prorations or negative line items, and true for all other line items. Cannot be set to true for prorations.
    # @optional @param discounts [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestMetadata?]
    # @optional @param period [Stripe::Period?]
    # @optional @param price [String?] The ID of the price object. One of `price` or `price_data` is required.
    # @optional @param price_data [Stripe::OneTimePriceDataWithProductData?]
    # @optional @param quantity [Int32?] Non-negative integer. The quantity of units for the line item.
    # @optional @param tax_amounts [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts?]
    # @optional @param tax_rates [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxRates?]
    # @return [Stripe::LineItem]
    def post_invoices_invoice_lines_line_item_id(
      *,
      invoice : String? = nil,
      line_item_id : String? = nil,
      amount : Int64? = nil,
      description : String? = nil,
      discountable : Bool? = nil,
      discounts : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestMetadata? = nil,
      period : Stripe::Period? = nil,
      price : String? = nil,
      price_data : Stripe::OneTimePriceDataWithProductData? = nil,
      quantity : Int64? = nil,
      tax_amounts : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts? = nil,
      tax_rates : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxRates? = nil
    ) : Stripe::LineItem
      data, _status_code, _headers = post_invoices_invoice_lines_line_item_id_with_http_info(invoice: invoice, line_item_id: line_item_id, amount: amount, description: description, discountable: discountable, discounts: discounts, expand: expand, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, tax_amounts: tax_amounts, tax_rates: tax_rates)
      data
    end

    # &lt;p&gt;Updates an invoice’s line item. Some fields, such as &lt;code&gt;tax_amounts&lt;/code&gt;, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as &lt;code&gt;amount&lt;/code&gt;, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.&lt;/p&gt;
    # @required @param invoice [String?] Invoice ID of line item
    # @required @param line_item_id [String?] Invoice line item ID
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount.
    # @optional @param description [String?] An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
    # @optional @param discountable [Bool?] Controls whether discounts apply to this line item. Defaults to false for prorations or negative line items, and true for all other line items. Cannot be set to true for prorations.
    # @optional @param discounts [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestMetadata?]
    # @optional @param period [Stripe::Period?]
    # @optional @param price [String?] The ID of the price object. One of `price` or `price_data` is required.
    # @optional @param price_data [Stripe::OneTimePriceDataWithProductData?]
    # @optional @param quantity [Int32?] Non-negative integer. The quantity of units for the line item.
    # @optional @param tax_amounts [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts?]
    # @optional @param tax_rates [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxRates?]
    # @return [Tuple(Stripe::LineItem, Integer, Hash)] Stripe::LineItem, response status code and response headers
    def post_invoices_invoice_lines_line_item_id_with_http_info(
      *,
      invoice : String? = nil,
      line_item_id : String? = nil,
      amount : Int64? = nil,
      description : String? = nil,
      discountable : Bool? = nil,
      discounts : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestMetadata? = nil,
      period : Stripe::Period? = nil,
      price : String? = nil,
      price_data : Stripe::OneTimePriceDataWithProductData? = nil,
      quantity : Int64? = nil,
      tax_amounts : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts? = nil,
      tax_rates : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxRates? = nil
    ) : Tuple(Stripe::LineItem, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_lines_line_item_id(invoice: invoice, line_item_id: line_item_id, amount: amount, description: description, discountable: discountable, discounts: discounts, expand: expand, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, tax_amounts: tax_amounts, tax_rates: tax_rates)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_lines_line_item_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::LineItem.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates an invoice’s line item. Some fields, such as &lt;code&gt;tax_amounts&lt;/code&gt;, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as &lt;code&gt;amount&lt;/code&gt;, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.&lt;/p&gt;
    # @required @param invoice [String?] Invoice ID of line item
    # @required @param line_item_id [String?] Invoice line item ID
    # @optional @param amount [Int32?] The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount.
    # @optional @param description [String?] An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
    # @optional @param discountable [Bool?] Controls whether discounts apply to this line item. Defaults to false for prorations or negative line items, and true for all other line items. Cannot be set to true for prorations.
    # @optional @param discounts [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestDiscounts?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param metadata [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestMetadata?]
    # @optional @param period [Stripe::Period?]
    # @optional @param price [String?] The ID of the price object. One of `price` or `price_data` is required.
    # @optional @param price_data [Stripe::OneTimePriceDataWithProductData?]
    # @optional @param quantity [Int32?] Non-negative integer. The quantity of units for the line item.
    # @optional @param tax_amounts [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts?]
    # @optional @param tax_rates [Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxRates?]
    # @return nil
    def post_invoices_invoice_lines_line_item_id(
      *,
      invoice : String? = nil,
      line_item_id : String? = nil,
      amount : Int64? = nil,
      description : String? = nil,
      discountable : Bool? = nil,
      discounts : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestMetadata? = nil,
      period : Stripe::Period? = nil,
      price : String? = nil,
      price_data : Stripe::OneTimePriceDataWithProductData? = nil,
      quantity : Int64? = nil,
      tax_amounts : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts? = nil,
      tax_rates : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxRates? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_lines_line_item_id(invoice: invoice, line_item_id: line_item_id, amount: amount, description: description, discountable: discountable, discounts: discounts, expand: expand, metadata: metadata, period: period, price: price, price_data: price_data, quantity: quantity, tax_amounts: tax_amounts, tax_rates: tax_rates).execute(&block)
    end

    POST_INVOICES_INVOICE_LINES_LINE_ITEM_ID_MAX_LENGTH_FOR_INVOICE      = 5000
    POST_INVOICES_INVOICE_LINES_LINE_ITEM_ID_MAX_LENGTH_FOR_LINE_ITEM_ID = 5000
    POST_INVOICES_INVOICE_LINES_LINE_ITEM_ID_MAX_LENGTH_FOR_DESCRIPTION  = 5000
    POST_INVOICES_INVOICE_LINES_LINE_ITEM_ID_MAX_LENGTH_FOR_PRICE        = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_lines_line_item_id(
      *,
      invoice : String? = nil,
      line_item_id : String? = nil,
      amount : Int64? = nil,
      description : String? = nil,
      discountable : Bool? = nil,
      discounts : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestDiscounts? = nil,
      expand : Array(String)? = nil,
      metadata : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestMetadata? = nil,
      period : Stripe::Period? = nil,
      price : String? = nil,
      price_data : Stripe::OneTimePriceDataWithProductData? = nil,
      quantity : Int64? = nil,
      tax_amounts : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts? = nil,
      tax_rates : Stripe::PostInvoicesInvoiceLinesLineItemIdRequestTaxRates? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_lines_line_item_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_LINES_LINE_ITEM_ID_MAX_LENGTH_FOR_INVOICE)
        end
        raise ArgumentError.new("\"line_item_id\" is required and cannot be null") if line_item_id.nil?
        unless (_line_item_id = line_item_id).nil?
          OpenApi::PrimitiveValidator.validate_max_length("line_item_id", line_item_id.to_s.size, POST_INVOICES_INVOICE_LINES_LINE_ITEM_ID_MAX_LENGTH_FOR_LINE_ITEM_ID)
        end

        unless (_description = description).nil?
          OpenApi::PrimitiveValidator.validate_max_length("description", description.to_s.size, POST_INVOICES_INVOICE_LINES_LINE_ITEM_ID_MAX_LENGTH_FOR_DESCRIPTION)
        end

        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_metadata = metadata).nil?
          _metadata.validate if _metadata.is_a?(OpenApi::Validatable)
        end
        unless (_period = period).nil?
          _period.validate if _period.is_a?(OpenApi::Validatable)
        end
        unless (_price = price).nil?
          OpenApi::PrimitiveValidator.validate_max_length("price", price.to_s.size, POST_INVOICES_INVOICE_LINES_LINE_ITEM_ID_MAX_LENGTH_FOR_PRICE)
        end
        unless (_price_data = price_data).nil?
          _price_data.validate if _price_data.is_a?(OpenApi::Validatable)
        end

        unless (_tax_amounts = tax_amounts).nil?
          _tax_amounts.validate if _tax_amounts.is_a?(OpenApi::Validatable)
        end
        unless (_tax_rates = tax_rates).nil?
          _tax_rates.validate if _tax_rates.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/lines/{line_item_id}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s)).sub("{" + "line_item_id" + "}", URI.encode_path(line_item_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("amount", amount.to_s) if !amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("description", description.to_s) if !description.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("discountable", discountable.to_s) if !discountable.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(discounts.to_json), "discounts")) if !discounts.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(period.to_json), "period")) if !period.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("price", price.to_s) if !price.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(price_data.to_json), "price_data")) if !price_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("quantity", quantity.to_s) if !quantity.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(tax_amounts.to_json), "tax_amounts")) if !tax_amounts.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(tax_rates.to_json), "tax_rates")) if !tax_rates.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_lines_line_item_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Invoice]
    def post_invoices_invoice_mark_uncollectible(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_mark_uncollectible_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_mark_uncollectible_with_http_info(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_mark_uncollectible(invoice: invoice, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_mark_uncollectible\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_invoices_invoice_mark_uncollectible(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_mark_uncollectible(invoice: invoice, expand: expand).execute(&block)
    end

    POST_INVOICES_INVOICE_MARK_UNCOLLECTIBLE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_mark_uncollectible(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_mark_uncollectible ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_MARK_UNCOLLECTIBLE_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/mark_uncollectible".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_mark_uncollectible",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href=\"https://dashboard.stripe.com/account/billing/automatic\">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param forgive [Bool?] In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.   Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`.
    # @optional @param mandate [Stripe::PostInvoicesInvoicePayRequestMandate?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session).
    # @optional @param paid_out_of_band [Bool?] Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`.
    # @optional @param payment_method [String?] A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid.
    # @optional @param source [String?] A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.
    # @return [Stripe::Invoice]
    def post_invoices_invoice_pay(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil,
      forgive : Bool? = nil,
      mandate : Stripe::PostInvoicesInvoicePayRequestMandate? = nil,
      off_session : Bool? = nil,
      paid_out_of_band : Bool? = nil,
      payment_method : String? = nil,
      source : String? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_pay_with_http_info(invoice: invoice, expand: expand, forgive: forgive, mandate: mandate, off_session: off_session, paid_out_of_band: paid_out_of_band, payment_method: payment_method, source: source)
      data
    end

    # &lt;p&gt;Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param forgive [Bool?] In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.   Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`.
    # @optional @param mandate [Stripe::PostInvoicesInvoicePayRequestMandate?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session).
    # @optional @param paid_out_of_band [Bool?] Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`.
    # @optional @param payment_method [String?] A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid.
    # @optional @param source [String?] A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_pay_with_http_info(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil,
      forgive : Bool? = nil,
      mandate : Stripe::PostInvoicesInvoicePayRequestMandate? = nil,
      off_session : Bool? = nil,
      paid_out_of_band : Bool? = nil,
      payment_method : String? = nil,
      source : String? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_pay(invoice: invoice, expand: expand, forgive: forgive, mandate: mandate, off_session: off_session, paid_out_of_band: paid_out_of_band, payment_method: payment_method, source: source)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_pay\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param forgive [Bool?] In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.   Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`.
    # @optional @param mandate [Stripe::PostInvoicesInvoicePayRequestMandate?]
    # @optional @param off_session [Bool?] Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session).
    # @optional @param paid_out_of_band [Bool?] Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`.
    # @optional @param payment_method [String?] A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid.
    # @optional @param source [String?] A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.
    # @return nil
    def post_invoices_invoice_pay(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil,
      forgive : Bool? = nil,
      mandate : Stripe::PostInvoicesInvoicePayRequestMandate? = nil,
      off_session : Bool? = nil,
      paid_out_of_band : Bool? = nil,
      payment_method : String? = nil,
      source : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_pay(invoice: invoice, expand: expand, forgive: forgive, mandate: mandate, off_session: off_session, paid_out_of_band: paid_out_of_band, payment_method: payment_method, source: source).execute(&block)
    end

    POST_INVOICES_INVOICE_PAY_MAX_LENGTH_FOR_INVOICE        = 5000
    POST_INVOICES_INVOICE_PAY_MAX_LENGTH_FOR_PAYMENT_METHOD = 5000
    POST_INVOICES_INVOICE_PAY_MAX_LENGTH_FOR_SOURCE         = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_pay(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil,
      forgive : Bool? = nil,
      mandate : Stripe::PostInvoicesInvoicePayRequestMandate? = nil,
      off_session : Bool? = nil,
      paid_out_of_band : Bool? = nil,
      payment_method : String? = nil,
      source : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_pay ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_PAY_MAX_LENGTH_FOR_INVOICE)
        end

        unless (_mandate = mandate).nil?
          _mandate.validate if _mandate.is_a?(OpenApi::Validatable)
        end

        unless (_payment_method = payment_method).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_method", payment_method.to_s.size, POST_INVOICES_INVOICE_PAY_MAX_LENGTH_FOR_PAYMENT_METHOD)
        end
        unless (_source = source).nil?
          OpenApi::PrimitiveValidator.validate_max_length("source", source.to_s.size, POST_INVOICES_INVOICE_PAY_MAX_LENGTH_FOR_SOURCE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/pay".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("forgive", forgive.to_s) if !forgive.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(mandate.to_json), "mandate")) if !mandate.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("off_session", off_session.to_s) if !off_session.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("paid_out_of_band", paid_out_of_band.to_s) if !paid_out_of_band.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method", payment_method.to_s) if !payment_method.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("source", source.to_s) if !source.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_pay",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe will automatically send invoices to customers according to your <a href=\"https://dashboard.stripe.com/account/billing/automatic\">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>  <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Invoice]
    def post_invoices_invoice_send(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_send_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Stripe will automatically send invoices to customers according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.&lt;/p&gt;  &lt;p&gt;Requests made in test-mode result in no emails being sent, despite sending an &lt;code&gt;invoice.sent&lt;/code&gt; event.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_send_with_http_info(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_send(invoice: invoice, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_send\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Stripe will automatically send invoices to customers according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.&lt;/p&gt;  &lt;p&gt;Requests made in test-mode result in no emails being sent, despite sending an &lt;code&gt;invoice.sent&lt;/code&gt; event.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_invoices_invoice_send(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_send(invoice: invoice, expand: expand).execute(&block)
    end

    POST_INVOICES_INVOICE_SEND_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_send(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_send ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_SEND_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/send".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_send",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href=\"#delete_invoice\">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>  <p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href=\"#create_invoice\">issue another invoice</a> or <a href=\"#create_credit_note\">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Invoice]
    def post_invoices_invoice_void(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_void_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to &lt;a href&#x3D;\&quot;#delete_invoice\&quot;&gt;deletion&lt;/a&gt;, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.&lt;/p&gt;  &lt;p&gt;Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to &lt;a href&#x3D;\&quot;#create_invoice\&quot;&gt;issue another invoice&lt;/a&gt; or &lt;a href&#x3D;\&quot;#create_credit_note\&quot;&gt;credit note&lt;/a&gt; instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_void_with_http_info(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_void(invoice: invoice, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_void\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to &lt;a href&#x3D;\&quot;#delete_invoice\&quot;&gt;deletion&lt;/a&gt;, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.&lt;/p&gt;  &lt;p&gt;Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to &lt;a href&#x3D;\&quot;#create_invoice\&quot;&gt;issue another invoice&lt;/a&gt; or &lt;a href&#x3D;\&quot;#create_credit_note\&quot;&gt;credit note&lt;/a&gt; instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @return nil
    def post_invoices_invoice_void(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_void(invoice: invoice, expand: expand).execute(&block)
    end

    POST_INVOICES_INVOICE_VOID_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_void(
      *,
      invoice : String? = nil,
      expand : Array(String)? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_void ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_VOID_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/void".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_void",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
