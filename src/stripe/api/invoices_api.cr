#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class InvoicesApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href=\"#void_invoice\">voided</a>.</p>
    # @required @param invoice [String?]
    # @return [Stripe::DeletedInvoice]
    def delete_invoices_invoice(
      *,
      invoice : String? = nil
    ) : Stripe::DeletedInvoice
      data, _status_code, _headers = delete_invoices_invoice_with_http_info(invoice: invoice)
      data
    end

    # &lt;p&gt;Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be &lt;a href&#x3D;\&quot;#void_invoice\&quot;&gt;voided&lt;/a&gt;.&lt;/p&gt;
    # @required @param invoice [String?]
    # @return [Tuple(Stripe::DeletedInvoice, Integer, Hash)] Stripe::DeletedInvoice, response status code and response headers
    def delete_invoices_invoice_with_http_info(
      *,
      invoice : String? = nil
    ) : Tuple(Stripe::DeletedInvoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete_invoices_invoice(invoice: invoice)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#delete_invoices_invoice\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::DeletedInvoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be &lt;a href&#x3D;\&quot;#void_invoice\&quot;&gt;voided&lt;/a&gt;.&lt;/p&gt;
    # @required @param invoice [String?]
    # @return nil
    def delete_invoices_invoice(
      *,
      invoice : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete_invoices_invoice(invoice: invoice).execute(&block)
    end

    DELETE_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_delete_invoices_invoice(
      *,
      invoice : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.delete_invoices_invoice ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, DELETE_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "InvoicesApi.delete_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return invoices for the customer specified by this customer ID.
    # @optional @param subscription [String?] Only return invoices for the subscription specified by this subscription ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param collection_method [String?] The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @optional @param due_date [Stripe::GetAccountsCreatedParameter?]
    # @return [Stripe::InvoicesList]
    def get_invoices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      expand : Array(Array(String))? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      due_date : Stripe::GetAccountsCreatedParameter? = nil
    ) : Stripe::InvoicesList
      data, _status_code, _headers = get_invoices_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, subscription: subscription, expand: expand, collection_method: collection_method, status: status, created: created, due_date: due_date)
      data
    end

    # &lt;p&gt;You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return invoices for the customer specified by this customer ID.
    # @optional @param subscription [String?] Only return invoices for the subscription specified by this subscription ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param collection_method [String?] The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @optional @param due_date [Stripe::GetAccountsCreatedParameter?]
    # @return [Tuple(Stripe::InvoicesList, Integer, Hash)] Stripe::InvoicesList, response status code and response headers
    def get_invoices_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      expand : Array(Array(String))? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      due_date : Stripe::GetAccountsCreatedParameter? = nil
    ) : Tuple(Stripe::InvoicesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, subscription: subscription, expand: expand, collection_method: collection_method, status: status, created: created, due_date: due_date)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#get_invoices\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::InvoicesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param customer [String?] Only return invoices for the customer specified by this customer ID.
    # @optional @param subscription [String?] Only return invoices for the subscription specified by this subscription ID.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param collection_method [String?] The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.
    # @optional @param status [String?] The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    # @optional @param created [Stripe::GetAccountsCreatedParameter?]
    # @optional @param due_date [Stripe::GetAccountsCreatedParameter?]
    # @return nil
    def get_invoices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      expand : Array(Array(String))? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      due_date : Stripe::GetAccountsCreatedParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices(ending_before: ending_before, starting_after: starting_after, limit: limit, customer: customer, subscription: subscription, expand: expand, collection_method: collection_method, status: status, created: created, due_date: due_date).execute(&block)
    end

    GET_INVOICES_MAX_LENGTH_FOR_ENDING_BEFORE       = 5000
    GET_INVOICES_MAX_LENGTH_FOR_STARTING_AFTER      = 5000
    GET_INVOICES_MAX_LENGTH_FOR_CUSTOMER            = 5000
    GET_INVOICES_MAX_LENGTH_FOR_SUBSCRIPTION        = 5000
    GET_INVOICES_VALID_VALUES_FOR_COLLECTION_METHOD = String.static_array("charge_automatically", "send_invoice")
    GET_INVOICES_MAX_LENGTH_FOR_STATUS              = 5000
    GET_INVOICES_VALID_VALUES_FOR_STATUS            = String.static_array("draft", "open", "paid", "uncollectible", "void")

    # @return Crest::Request
    def build_api_request_for_get_invoices(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      expand : Array(Array(String))? = nil,
      collection_method : String? = nil,
      status : String? = nil,
      created : Stripe::GetAccountsCreatedParameter? = nil,
      due_date : Stripe::GetAccountsCreatedParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.get_invoices ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_INVOICES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_INVOICES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_INVOICES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, GET_INVOICES_MAX_LENGTH_FOR_SUBSCRIPTION)
        end

        unless (_collection_method = collection_method).nil?
          OpenApi::EnumValidator.validate("collection_method", _collection_method, GET_INVOICES_VALID_VALUES_FOR_COLLECTION_METHOD)
        end
        unless (_status = status).nil?
          OpenApi::EnumValidator.validate("status", _status, GET_INVOICES_VALID_VALUES_FOR_STATUS)
        end
        unless (_created = created).nil?
          _created.validate if _created.is_a?(OpenApi::Validatable)
        end
        unless (_due_date = due_date).nil?
          _due_date.validate if _due_date.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["collection_method"] = collection_method.to_s if !collection_method.nil?
      query_params["status"] = status.to_s if !status.nil?
      query_params["created"] = created.to_s if !created.nil?
      query_params["due_date"] = due_date.to_s if !due_date.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieves the invoice with the given ID.</p>
    # @required @param invoice [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::Invoice]
    def get_invoices_invoice(
      *,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = get_invoices_invoice_with_http_info(invoice: invoice, expand: expand)
      data
    end

    # &lt;p&gt;Retrieves the invoice with the given ID.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def get_invoices_invoice_with_http_info(
      *,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_invoice(invoice: invoice, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#get_invoices_invoice\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieves the invoice with the given ID.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_invoices_invoice(
      *,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_invoice(invoice: invoice, expand: expand).execute(&block)
    end

    GET_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_invoice(
      *,
      invoice : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.get_invoices_invoice ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, GET_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @required @param invoice [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::InvoiceLinesList]
    def get_invoices_invoice_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::InvoiceLinesList
      data, _status_code, _headers = get_invoices_invoice_lines_with_http_info(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving an invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::InvoiceLinesList, Integer, Hash)] Stripe::InvoiceLinesList, response status code and response headers
    def get_invoices_invoice_lines_with_http_info(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::InvoiceLinesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_invoice_lines(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#get_invoices_invoice_lines\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::InvoiceLinesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving an invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_invoices_invoice_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_invoice_lines(invoice: invoice, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_INVOICE        = 5000
    GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_invoice_lines(
      *,
      invoice : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.get_invoices_invoice_lines ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_INVOICES_INVOICE_LINES_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/lines".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_invoice_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Search for invoices you’ve previously created using Stripe’s <a href=\"/docs/search#search-query-language\">Search Query Language</a>. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.</p>
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::SearchResult]
    def get_invoices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::SearchResult
      data, _status_code, _headers = get_invoices_search_with_http_info(query: query, page: page, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;Search for invoices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::SearchResult, Integer, Hash)] Stripe::SearchResult, response status code and response headers
    def get_invoices_search_with_http_info(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::SearchResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_search(query: query, page: page, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#get_invoices_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::SearchResult.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Search for invoices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
    # @required @param query [String?] The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
    # @optional @param page [String?] A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_invoices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_search(query: query, page: page, limit: limit, expand: expand).execute(&block)
    end

    GET_INVOICES_SEARCH_MAX_LENGTH_FOR_QUERY = 5000
    GET_INVOICES_SEARCH_MAX_LENGTH_FOR_PAGE  = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_search(
      *,
      query : String? = nil,
      page : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.get_invoices_search ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?
        unless (_query = query).nil?
          OpenApi::PrimitiveValidator.validate_max_length("query", query.to_s.size, GET_INVOICES_SEARCH_MAX_LENGTH_FOR_QUERY)
        end
        unless (_page = page).nil?
          OpenApi::PrimitiveValidator.validate_max_length("page", page.to_s.size, GET_INVOICES_SEARCH_MAX_LENGTH_FOR_PAGE)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["page"] = page.to_s if !page.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["query"] = query.to_s if !query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>  <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>  <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param subscription_cancel_at_period_end [Bool?] Boolean indicating whether this subscription should cancel at the end of the current period.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past)
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule [String?] The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.
    # @return [Stripe::Invoice]
    def get_invoices_upcoming(
      *,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      schedule : String? = nil,
      subscription_cancel_now : Bool? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = get_invoices_upcoming_with_http_info(subscription_items: subscription_items, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, discounts: discounts, currency: currency, customer: customer, subscription: subscription, schedule: schedule, subscription_cancel_now: subscription_cancel_now, subscription_cancel_at: subscription_cancel_at)
      data
    end

    # &lt;p&gt;At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.&lt;/p&gt;  &lt;p&gt;Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.&lt;/p&gt;  &lt;p&gt;You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a &lt;code&gt;proration_date&lt;/code&gt; parameter when doing the actual subscription update. The value passed in should be the same as the &lt;code&gt;subscription_proration_date&lt;/code&gt; returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where &lt;code&gt;period[start]&lt;/code&gt; is equal to the &lt;code&gt;subscription_proration_date&lt;/code&gt; on the upcoming invoice resource.&lt;/p&gt;
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param subscription_cancel_at_period_end [Bool?] Boolean indicating whether this subscription should cancel at the end of the current period.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past)
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule [String?] The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def get_invoices_upcoming_with_http_info(
      *,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      schedule : String? = nil,
      subscription_cancel_now : Bool? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_upcoming(subscription_items: subscription_items, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, discounts: discounts, currency: currency, customer: customer, subscription: subscription, schedule: schedule, subscription_cancel_now: subscription_cancel_now, subscription_cancel_at: subscription_cancel_at)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#get_invoices_upcoming\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.&lt;/p&gt;  &lt;p&gt;Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.&lt;/p&gt;  &lt;p&gt;You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a &lt;code&gt;proration_date&lt;/code&gt; parameter when doing the actual subscription update. The value passed in should be the same as the &lt;code&gt;subscription_proration_date&lt;/code&gt; returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where &lt;code&gt;period[start]&lt;/code&gt; is equal to the &lt;code&gt;subscription_proration_date&lt;/code&gt; on the upcoming invoice resource.&lt;/p&gt;
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param subscription_cancel_at_period_end [Bool?] Boolean indicating whether this subscription should cancel at the end of the current period.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past)
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule [String?] The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.
    # @return nil
    def get_invoices_upcoming(
      *,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      schedule : String? = nil,
      subscription_cancel_now : Bool? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_upcoming(subscription_items: subscription_items, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, discounts: discounts, currency: currency, customer: customer, subscription: subscription, schedule: schedule, subscription_cancel_now: subscription_cancel_now, subscription_cancel_at: subscription_cancel_at).execute(&block)
    end

    GET_INVOICES_UPCOMING_VALID_VALUES_FOR_SUBSCRIPTION_PRORATION_BEHAVIOR = String.static_array("always_invoice", "create_prorations", "none")
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_COUPON                            = 5000
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_CUSTOMER                          = 5000
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SUBSCRIPTION                      = 5000
    GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SCHEDULE                          = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_upcoming(
      *,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      schedule : String? = nil,
      subscription_cancel_now : Bool? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.get_invoices_upcoming ..." }
      end

      if client_side_validation
        unless (_customer_details = customer_details).nil?
          _customer_details.validate if _customer_details.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_proration_behavior = subscription_proration_behavior).nil?
          OpenApi::EnumValidator.validate("subscription_proration_behavior", _subscription_proration_behavior, GET_INVOICES_UPCOMING_VALID_VALUES_FOR_SUBSCRIPTION_PRORATION_BEHAVIOR)
        end
        unless (_subscription_billing_cycle_anchor = subscription_billing_cycle_anchor).nil?
          _subscription_billing_cycle_anchor.validate if _subscription_billing_cycle_anchor.is_a?(OpenApi::Validatable)
        end

        unless (_subscription_trial_end = subscription_trial_end).nil?
          _subscription_trial_end.validate if _subscription_trial_end.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_default_tax_rates = subscription_default_tax_rates).nil?
          _subscription_default_tax_rates.validate if _subscription_default_tax_rates.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end

        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_COUPON)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SUBSCRIPTION)
        end
        unless (_schedule = schedule).nil?
          OpenApi::PrimitiveValidator.validate_max_length("schedule", schedule.to_s.size, GET_INVOICES_UPCOMING_MAX_LENGTH_FOR_SCHEDULE)
        end

        unless (_subscription_cancel_at = subscription_cancel_at).nil?
          _subscription_cancel_at.validate if _subscription_cancel_at.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/upcoming"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["subscription_items"] = @api_client.build_collection_param(subscription_items, "csv") if !subscription_items.nil? && !subscription_items.empty?
      query_params["subscription_cancel_at_period_end"] = subscription_cancel_at_period_end.to_s if !subscription_cancel_at_period_end.nil?
      query_params["subscription_start_date"] = subscription_start_date.to_s if !subscription_start_date.nil?
      query_params["customer_details"] = customer_details.to_s if !customer_details.nil?
      query_params["subscription_proration_behavior"] = subscription_proration_behavior.to_s if !subscription_proration_behavior.nil?
      query_params["subscription_billing_cycle_anchor"] = subscription_billing_cycle_anchor.to_s if !subscription_billing_cycle_anchor.nil?
      query_params["subscription_proration_date"] = subscription_proration_date.to_s if !subscription_proration_date.nil?
      query_params["subscription_trial_end"] = subscription_trial_end.to_s if !subscription_trial_end.nil?
      query_params["subscription_default_tax_rates"] = subscription_default_tax_rates.to_s if !subscription_default_tax_rates.nil?
      query_params["subscription_trial_from_plan"] = subscription_trial_from_plan.to_s if !subscription_trial_from_plan.nil?
      query_params["invoice_items"] = @api_client.build_collection_param(invoice_items, "csv") if !invoice_items.nil? && !invoice_items.empty?
      query_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["coupon"] = coupon.to_s if !coupon.nil?
      query_params["discounts"] = discounts.to_s if !discounts.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["schedule"] = schedule.to_s if !schedule.nil?
      query_params["subscription_cancel_now"] = subscription_cancel_now.to_s if !subscription_cancel_now.nil?
      query_params["subscription_cancel_at"] = subscription_cancel_at.to_s if !subscription_cancel_at.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_upcoming",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param subscription_cancel_at_period_end [Bool?] Boolean indicating whether this subscription should cancel at the end of the current period.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past)
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule [String?] The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.
    # @return [Stripe::InvoiceLinesList]
    def get_invoices_upcoming_lines(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      schedule : String? = nil,
      subscription_cancel_now : Bool? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil
    ) : Stripe::InvoiceLinesList
      data, _status_code, _headers = get_invoices_upcoming_lines_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, subscription_items: subscription_items, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, discounts: discounts, currency: currency, customer: customer, subscription: subscription, schedule: schedule, subscription_cancel_now: subscription_cancel_now, subscription_cancel_at: subscription_cancel_at)
      data
    end

    # &lt;p&gt;When retrieving an upcoming invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param subscription_cancel_at_period_end [Bool?] Boolean indicating whether this subscription should cancel at the end of the current period.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past)
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule [String?] The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.
    # @return [Tuple(Stripe::InvoiceLinesList, Integer, Hash)] Stripe::InvoiceLinesList, response status code and response headers
    def get_invoices_upcoming_lines_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      schedule : String? = nil,
      subscription_cancel_now : Bool? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil
    ) : Tuple(Stripe::InvoiceLinesList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_invoices_upcoming_lines(ending_before: ending_before, starting_after: starting_after, limit: limit, subscription_items: subscription_items, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, discounts: discounts, currency: currency, customer: customer, subscription: subscription, schedule: schedule, subscription_cancel_now: subscription_cancel_now, subscription_cancel_at: subscription_cancel_at)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#get_invoices_upcoming_lines\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::InvoiceLinesList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving an upcoming invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param subscription_items [Array(Array(SubscriptionItemUpdateParams))?] A list of up to 20 subscription items, each with an attached price.
    # @optional @param subscription_cancel_at_period_end [Bool?] Boolean indicating whether this subscription should cancel at the end of the current period.
    # @optional @param subscription_start_date [Int32?] Date a subscription is intended to start (can be future or past)
    # @optional @param customer_details [Stripe::CustomerDetailsParam?] Details about the customer you want to invoice or overrides for an existing customer.
    # @optional @param subscription_proration_behavior [String?] Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes.
    # @optional @param subscription_billing_cycle_anchor [Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter?] For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
    # @optional @param subscription_proration_date [Int32?] If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'.
    # @optional @param subscription_trial_end [Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter?] If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
    # @optional @param subscription_default_tax_rates [Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter?] If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set.
    # @optional @param subscription_trial_from_plan [Bool?] Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    # @optional @param invoice_items [Array(Array(InvoiceItemPreviewParams))?] List of invoice items to add or update in the upcoming invoice preview.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParam?] Settings for automatic tax lookup for this invoice preview.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @optional @param coupon [String?] The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
    # @optional @param discounts [Stripe::GetInvoicesUpcomingDiscountsParameter?] The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead.
    # @optional @param currency [String?] The currency to preview this invoice in. Defaults to that of `customer` if not specified.
    # @optional @param customer [String?] The identifier of the customer whose upcoming invoice you'd like to retrieve.
    # @optional @param subscription [String?] The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
    # @optional @param schedule [String?] The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
    # @optional @param subscription_cancel_now [Bool?] This simulates the subscription being canceled or expired immediately.
    # @optional @param subscription_cancel_at [Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter?] Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.
    # @return nil
    def get_invoices_upcoming_lines(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      schedule : String? = nil,
      subscription_cancel_now : Bool? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_invoices_upcoming_lines(ending_before: ending_before, starting_after: starting_after, limit: limit, subscription_items: subscription_items, subscription_cancel_at_period_end: subscription_cancel_at_period_end, subscription_start_date: subscription_start_date, customer_details: customer_details, subscription_proration_behavior: subscription_proration_behavior, subscription_billing_cycle_anchor: subscription_billing_cycle_anchor, subscription_proration_date: subscription_proration_date, subscription_trial_end: subscription_trial_end, subscription_default_tax_rates: subscription_default_tax_rates, subscription_trial_from_plan: subscription_trial_from_plan, invoice_items: invoice_items, automatic_tax: automatic_tax, expand: expand, coupon: coupon, discounts: discounts, currency: currency, customer: customer, subscription: subscription, schedule: schedule, subscription_cancel_now: subscription_cancel_now, subscription_cancel_at: subscription_cancel_at).execute(&block)
    end

    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_ENDING_BEFORE                     = 5000
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_STARTING_AFTER                    = 5000
    GET_INVOICES_UPCOMING_LINES_VALID_VALUES_FOR_SUBSCRIPTION_PRORATION_BEHAVIOR = String.static_array("always_invoice", "create_prorations", "none")
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_COUPON                            = 5000
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_CUSTOMER                          = 5000
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SUBSCRIPTION                      = 5000
    GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SCHEDULE                          = 5000

    # @return Crest::Request
    def build_api_request_for_get_invoices_upcoming_lines(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      subscription_items : Array(Array(SubscriptionItemUpdateParams))? = nil,
      subscription_cancel_at_period_end : Bool? = nil,
      subscription_start_date : Int64? = nil,
      customer_details : Stripe::CustomerDetailsParam? = nil,
      subscription_proration_behavior : String? = nil,
      subscription_billing_cycle_anchor : Stripe::GetInvoicesUpcomingSubscriptionBillingCycleAnchorParameter? = nil,
      subscription_proration_date : Int64? = nil,
      subscription_trial_end : Stripe::GetInvoicesUpcomingSubscriptionTrialEndParameter? = nil,
      subscription_default_tax_rates : Stripe::GetInvoicesUpcomingSubscriptionDefaultTaxRatesParameter? = nil,
      subscription_trial_from_plan : Bool? = nil,
      invoice_items : Array(Array(InvoiceItemPreviewParams))? = nil,
      automatic_tax : Stripe::AutomaticTaxParam? = nil,
      expand : Array(Array(String))? = nil,
      coupon : String? = nil,
      discounts : Stripe::GetInvoicesUpcomingDiscountsParameter? = nil,
      currency : String? = nil,
      customer : String? = nil,
      subscription : String? = nil,
      schedule : String? = nil,
      subscription_cancel_now : Bool? = nil,
      subscription_cancel_at : Stripe::GetInvoicesUpcomingSubscriptionCancelAtParameter? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.get_invoices_upcoming_lines ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_STARTING_AFTER)
        end

        unless (_customer_details = customer_details).nil?
          _customer_details.validate if _customer_details.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_proration_behavior = subscription_proration_behavior).nil?
          OpenApi::EnumValidator.validate("subscription_proration_behavior", _subscription_proration_behavior, GET_INVOICES_UPCOMING_LINES_VALID_VALUES_FOR_SUBSCRIPTION_PRORATION_BEHAVIOR)
        end
        unless (_subscription_billing_cycle_anchor = subscription_billing_cycle_anchor).nil?
          _subscription_billing_cycle_anchor.validate if _subscription_billing_cycle_anchor.is_a?(OpenApi::Validatable)
        end

        unless (_subscription_trial_end = subscription_trial_end).nil?
          _subscription_trial_end.validate if _subscription_trial_end.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_default_tax_rates = subscription_default_tax_rates).nil?
          _subscription_default_tax_rates.validate if _subscription_default_tax_rates.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end

        unless (_coupon = coupon).nil?
          OpenApi::PrimitiveValidator.validate_max_length("coupon", coupon.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_COUPON)
        end
        unless (_discounts = discounts).nil?
          _discounts.validate if _discounts.is_a?(OpenApi::Validatable)
        end

        unless (_customer = customer).nil?
          OpenApi::PrimitiveValidator.validate_max_length("customer", customer.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_CUSTOMER)
        end
        unless (_subscription = subscription).nil?
          OpenApi::PrimitiveValidator.validate_max_length("subscription", subscription.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SUBSCRIPTION)
        end
        unless (_schedule = schedule).nil?
          OpenApi::PrimitiveValidator.validate_max_length("schedule", schedule.to_s.size, GET_INVOICES_UPCOMING_LINES_MAX_LENGTH_FOR_SCHEDULE)
        end

        unless (_subscription_cancel_at = subscription_cancel_at).nil?
          _subscription_cancel_at.validate if _subscription_cancel_at.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/upcoming/lines"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["subscription_items"] = @api_client.build_collection_param(subscription_items, "csv") if !subscription_items.nil? && !subscription_items.empty?
      query_params["subscription_cancel_at_period_end"] = subscription_cancel_at_period_end.to_s if !subscription_cancel_at_period_end.nil?
      query_params["subscription_start_date"] = subscription_start_date.to_s if !subscription_start_date.nil?
      query_params["customer_details"] = customer_details.to_s if !customer_details.nil?
      query_params["subscription_proration_behavior"] = subscription_proration_behavior.to_s if !subscription_proration_behavior.nil?
      query_params["subscription_billing_cycle_anchor"] = subscription_billing_cycle_anchor.to_s if !subscription_billing_cycle_anchor.nil?
      query_params["subscription_proration_date"] = subscription_proration_date.to_s if !subscription_proration_date.nil?
      query_params["subscription_trial_end"] = subscription_trial_end.to_s if !subscription_trial_end.nil?
      query_params["subscription_default_tax_rates"] = subscription_default_tax_rates.to_s if !subscription_default_tax_rates.nil?
      query_params["subscription_trial_from_plan"] = subscription_trial_from_plan.to_s if !subscription_trial_from_plan.nil?
      query_params["invoice_items"] = @api_client.build_collection_param(invoice_items, "csv") if !invoice_items.nil? && !invoice_items.empty?
      query_params["automatic_tax"] = automatic_tax.to_s if !automatic_tax.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?
      query_params["coupon"] = coupon.to_s if !coupon.nil?
      query_params["discounts"] = discounts.to_s if !discounts.nil?
      query_params["currency"] = currency.to_s if !currency.nil?
      query_params["customer"] = customer.to_s if !customer.nil?
      query_params["subscription"] = subscription.to_s if !subscription.nil?
      query_params["schedule"] = schedule.to_s if !schedule.nil?
      query_params["subscription_cancel_now"] = subscription_cancel_now.to_s if !subscription_cancel_now.nil?
      query_params["subscription_cancel_at"] = subscription_cancel_at.to_s if !subscription_cancel_at.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "InvoicesApi.get_invoices_upcoming_lines",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href=\"#finalize_invoice\">finalize</a> the invoice, which allows you to <a href=\"#pay_invoice\">pay</a> or <a href=\"#send_invoice\">send</a> the invoice to your customers.</p>
    # @optional @param post_invoices_request [Stripe::PostInvoicesRequest?]
    # @return [Stripe::Invoice]
    def post_invoices(
      *,
      post_invoices_request : Stripe::PostInvoicesRequest? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_with_http_info(post_invoices_request: post_invoices_request)
      data
    end

    # &lt;p&gt;This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you &lt;a href&#x3D;\&quot;#finalize_invoice\&quot;&gt;finalize&lt;/a&gt; the invoice, which allows you to &lt;a href&#x3D;\&quot;#pay_invoice\&quot;&gt;pay&lt;/a&gt; or &lt;a href&#x3D;\&quot;#send_invoice\&quot;&gt;send&lt;/a&gt; the invoice to your customers.&lt;/p&gt;
    # @optional @param post_invoices_request [Stripe::PostInvoicesRequest?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_with_http_info(
      *,
      post_invoices_request : Stripe::PostInvoicesRequest? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices(post_invoices_request: post_invoices_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#post_invoices\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you &lt;a href&#x3D;\&quot;#finalize_invoice\&quot;&gt;finalize&lt;/a&gt; the invoice, which allows you to &lt;a href&#x3D;\&quot;#pay_invoice\&quot;&gt;pay&lt;/a&gt; or &lt;a href&#x3D;\&quot;#send_invoice\&quot;&gt;send&lt;/a&gt; the invoice to your customers.&lt;/p&gt;
    # @optional @param post_invoices_request [Stripe::PostInvoicesRequest?]
    # @return nil
    def post_invoices(
      *,
      post_invoices_request : Stripe::PostInvoicesRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices(post_invoices_request: post_invoices_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_invoices(
      *,
      post_invoices_request : Stripe::PostInvoicesRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.post_invoices ..." }
      end

      if client_side_validation
        unless (_post_invoices_request = post_invoices_request).nil?
          _post_invoices_request.validate if _post_invoices_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_invoices_request, content_type: header_params["Content-Type"]?) if !post_invoices_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Draft invoices are fully editable. Once an invoice is <a href=\"/docs/billing/invoices/workflow#finalized\">finalized</a>, monetary values, as well as <code>collection_method</code>, become uneditable.</p>  <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or <a href=\"/docs/billing/invoices/reconciliation\">automatically reconciling</a> invoices, pass <code>auto_advance=false</code>.</p>
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_request [Stripe::PostInvoicesInvoiceRequest?]
    # @return [Stripe::Invoice]
    def post_invoices_invoice(
      *,
      invoice : String? = nil,
      post_invoices_invoice_request : Stripe::PostInvoicesInvoiceRequest? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_with_http_info(invoice: invoice, post_invoices_invoice_request: post_invoices_invoice_request)
      data
    end

    # &lt;p&gt;Draft invoices are fully editable. Once an invoice is &lt;a href&#x3D;\&quot;/docs/billing/invoices/workflow#finalized\&quot;&gt;finalized&lt;/a&gt;, monetary values, as well as &lt;code&gt;collection_method&lt;/code&gt;, become uneditable.&lt;/p&gt;  &lt;p&gt;If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or &lt;a href&#x3D;\&quot;/docs/billing/invoices/reconciliation\&quot;&gt;automatically reconciling&lt;/a&gt; invoices, pass &lt;code&gt;auto_advance&#x3D;false&lt;/code&gt;.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_request [Stripe::PostInvoicesInvoiceRequest?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_with_http_info(
      *,
      invoice : String? = nil,
      post_invoices_invoice_request : Stripe::PostInvoicesInvoiceRequest? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice(invoice: invoice, post_invoices_invoice_request: post_invoices_invoice_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#post_invoices_invoice\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Draft invoices are fully editable. Once an invoice is &lt;a href&#x3D;\&quot;/docs/billing/invoices/workflow#finalized\&quot;&gt;finalized&lt;/a&gt;, monetary values, as well as &lt;code&gt;collection_method&lt;/code&gt;, become uneditable.&lt;/p&gt;  &lt;p&gt;If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or &lt;a href&#x3D;\&quot;/docs/billing/invoices/reconciliation\&quot;&gt;automatically reconciling&lt;/a&gt; invoices, pass &lt;code&gt;auto_advance&#x3D;false&lt;/code&gt;.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_request [Stripe::PostInvoicesInvoiceRequest?]
    # @return nil
    def post_invoices_invoice(
      *,
      invoice : String? = nil,
      post_invoices_invoice_request : Stripe::PostInvoicesInvoiceRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice(invoice: invoice, post_invoices_invoice_request: post_invoices_invoice_request).execute(&block)
    end

    POST_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice(
      *,
      invoice : String? = nil,
      post_invoices_invoice_request : Stripe::PostInvoicesInvoiceRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_post_invoices_invoice_request = post_invoices_invoice_request).nil?
          _post_invoices_invoice_request.validate if _post_invoices_invoice_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_invoices_invoice_request, content_type: header_params["Content-Type"]?) if !post_invoices_invoice_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_finalize_request [Stripe::PostInvoicesInvoiceFinalizeRequest?]
    # @return [Stripe::Invoice]
    def post_invoices_invoice_finalize(
      *,
      invoice : String? = nil,
      post_invoices_invoice_finalize_request : Stripe::PostInvoicesInvoiceFinalizeRequest? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_finalize_with_http_info(invoice: invoice, post_invoices_invoice_finalize_request: post_invoices_invoice_finalize_request)
      data
    end

    # &lt;p&gt;Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_finalize_request [Stripe::PostInvoicesInvoiceFinalizeRequest?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_finalize_with_http_info(
      *,
      invoice : String? = nil,
      post_invoices_invoice_finalize_request : Stripe::PostInvoicesInvoiceFinalizeRequest? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_finalize(invoice: invoice, post_invoices_invoice_finalize_request: post_invoices_invoice_finalize_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_finalize\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_finalize_request [Stripe::PostInvoicesInvoiceFinalizeRequest?]
    # @return nil
    def post_invoices_invoice_finalize(
      *,
      invoice : String? = nil,
      post_invoices_invoice_finalize_request : Stripe::PostInvoicesInvoiceFinalizeRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_finalize(invoice: invoice, post_invoices_invoice_finalize_request: post_invoices_invoice_finalize_request).execute(&block)
    end

    POST_INVOICES_INVOICE_FINALIZE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_finalize(
      *,
      invoice : String? = nil,
      post_invoices_invoice_finalize_request : Stripe::PostInvoicesInvoiceFinalizeRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_finalize ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_FINALIZE_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_post_invoices_invoice_finalize_request = post_invoices_invoice_finalize_request).nil?
          _post_invoices_invoice_finalize_request.validate if _post_invoices_invoice_finalize_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/finalize".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_invoices_invoice_finalize_request, content_type: header_params["Content-Type"]?) if !post_invoices_invoice_finalize_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_finalize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Stripe::Invoice]
    def post_invoices_invoice_mark_uncollectible(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_mark_uncollectible_with_http_info(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request)
      data
    end

    # &lt;p&gt;Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_mark_uncollectible_with_http_info(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_mark_uncollectible(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_mark_uncollectible\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return nil
    def post_invoices_invoice_mark_uncollectible(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_mark_uncollectible(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request).execute(&block)
    end

    POST_INVOICES_INVOICE_MARK_UNCOLLECTIBLE_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_mark_uncollectible(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_mark_uncollectible ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_MARK_UNCOLLECTIBLE_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_post_accounts_account_login_links_request = post_accounts_account_login_links_request).nil?
          _post_accounts_account_login_links_request.validate if _post_accounts_account_login_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/mark_uncollectible".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_login_links_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_login_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_mark_uncollectible",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href=\"https://dashboard.stripe.com/account/billing/automatic\">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_pay_request [Stripe::PostInvoicesInvoicePayRequest?]
    # @return [Stripe::Invoice]
    def post_invoices_invoice_pay(
      *,
      invoice : String? = nil,
      post_invoices_invoice_pay_request : Stripe::PostInvoicesInvoicePayRequest? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_pay_with_http_info(invoice: invoice, post_invoices_invoice_pay_request: post_invoices_invoice_pay_request)
      data
    end

    # &lt;p&gt;Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_pay_request [Stripe::PostInvoicesInvoicePayRequest?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_pay_with_http_info(
      *,
      invoice : String? = nil,
      post_invoices_invoice_pay_request : Stripe::PostInvoicesInvoicePayRequest? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_pay(invoice: invoice, post_invoices_invoice_pay_request: post_invoices_invoice_pay_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_pay\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_invoices_invoice_pay_request [Stripe::PostInvoicesInvoicePayRequest?]
    # @return nil
    def post_invoices_invoice_pay(
      *,
      invoice : String? = nil,
      post_invoices_invoice_pay_request : Stripe::PostInvoicesInvoicePayRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_pay(invoice: invoice, post_invoices_invoice_pay_request: post_invoices_invoice_pay_request).execute(&block)
    end

    POST_INVOICES_INVOICE_PAY_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_pay(
      *,
      invoice : String? = nil,
      post_invoices_invoice_pay_request : Stripe::PostInvoicesInvoicePayRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_pay ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_PAY_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_post_invoices_invoice_pay_request = post_invoices_invoice_pay_request).nil?
          _post_invoices_invoice_pay_request.validate if _post_invoices_invoice_pay_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/pay".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_invoices_invoice_pay_request, content_type: header_params["Content-Type"]?) if !post_invoices_invoice_pay_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_pay",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Stripe will automatically send invoices to customers according to your <a href=\"https://dashboard.stripe.com/account/billing/automatic\">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>  <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Stripe::Invoice]
    def post_invoices_invoice_send(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_send_with_http_info(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request)
      data
    end

    # &lt;p&gt;Stripe will automatically send invoices to customers according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.&lt;/p&gt;  &lt;p&gt;Requests made in test-mode result in no emails being sent, despite sending an &lt;code&gt;invoice.sent&lt;/code&gt; event.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_send_with_http_info(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_send(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_send\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Stripe will automatically send invoices to customers according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.&lt;/p&gt;  &lt;p&gt;Requests made in test-mode result in no emails being sent, despite sending an &lt;code&gt;invoice.sent&lt;/code&gt; event.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return nil
    def post_invoices_invoice_send(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_send(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request).execute(&block)
    end

    POST_INVOICES_INVOICE_SEND_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_send(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_send ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_SEND_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_post_accounts_account_login_links_request = post_accounts_account_login_links_request).nil?
          _post_accounts_account_login_links_request.validate if _post_accounts_account_login_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/send".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_login_links_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_login_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_send",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href=\"#delete_invoice\">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Stripe::Invoice]
    def post_invoices_invoice_void(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Stripe::Invoice
      data, _status_code, _headers = post_invoices_invoice_void_with_http_info(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request)
      data
    end

    # &lt;p&gt;Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to &lt;a href&#x3D;\&quot;#delete_invoice\&quot;&gt;deletion&lt;/a&gt;, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return [Tuple(Stripe::Invoice, Integer, Hash)] Stripe::Invoice, response status code and response headers
    def post_invoices_invoice_void_with_http_info(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Tuple(Stripe::Invoice, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_invoices_invoice_void(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: InvoicesApi#post_invoices_invoice_void\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::Invoice.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to &lt;a href&#x3D;\&quot;#delete_invoice\&quot;&gt;deletion&lt;/a&gt;, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.&lt;/p&gt;
    # @required @param invoice [String?]
    # @optional @param post_accounts_account_login_links_request [Stripe::PostAccountsAccountLoginLinksRequest?]
    # @return nil
    def post_invoices_invoice_void(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_invoices_invoice_void(invoice: invoice, post_accounts_account_login_links_request: post_accounts_account_login_links_request).execute(&block)
    end

    POST_INVOICES_INVOICE_VOID_MAX_LENGTH_FOR_INVOICE = 5000

    # @return Crest::Request
    def build_api_request_for_post_invoices_invoice_void(
      *,
      invoice : String? = nil,
      post_accounts_account_login_links_request : Stripe::PostAccountsAccountLoginLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: InvoicesApi.post_invoices_invoice_void ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"invoice\" is required and cannot be null") if invoice.nil?
        unless (_invoice = invoice).nil?
          OpenApi::PrimitiveValidator.validate_max_length("invoice", invoice.to_s.size, POST_INVOICES_INVOICE_VOID_MAX_LENGTH_FOR_INVOICE)
        end
        unless (_post_accounts_account_login_links_request = post_accounts_account_login_links_request).nil?
          _post_accounts_account_login_links_request.validate if _post_accounts_account_login_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/invoices/{invoice}/void".sub("{" + "invoice" + "}", URI.encode_path(invoice.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_accounts_account_login_links_request, content_type: header_params["Content-Type"]?) if !post_accounts_account_login_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "InvoicesApi.post_invoices_invoice_void",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
