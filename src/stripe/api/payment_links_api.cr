#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2022-11-15
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module Stripe
  class PaymentLinksApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of your payment links.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentLinksResourcePaymentLinkList]
    def get_payment_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentLinksResourcePaymentLinkList
      data, _status_code, _headers = get_payment_links_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentLinksResourcePaymentLinkList, Integer, Hash)] Stripe::PaymentLinksResourcePaymentLinkList, response status code and response headers
    def get_payment_links_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentLinksResourcePaymentLinkList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_links(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentLinksApi#get_payment_links\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLinksResourcePaymentLinkList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_links(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, expand: expand).execute(&block)
    end

    GET_PAYMENT_LINKS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYMENT_LINKS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentLinksApi.get_payment_links ..." }
      end

      if client_side_validation
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYMENT_LINKS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYMENT_LINKS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["active"] = active.to_s if !active.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentLinksApi.get_payment_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a payment link.</p>
    # @required @param payment_link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentLink]
    def get_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentLink
      data, _status_code, _headers = get_payment_links_payment_link_with_http_info(payment_link: payment_link, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentLink, Integer, Hash)] Stripe::PaymentLink, response status code and response headers
    def get_payment_links_payment_link_with_http_info(
      *,
      payment_link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_links_payment_link(payment_link: payment_link, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentLinksApi#get_payment_links_payment_link\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_links_payment_link(payment_link: payment_link, expand: expand).execute(&block)
    end

    GET_PAYMENT_LINKS_PAYMENT_LINK_MAX_LENGTH_FOR_PAYMENT_LINK = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentLinksApi.get_payment_links_payment_link ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payment_link\" is required and cannot be null") if payment_link.nil?
        unless (_payment_link = payment_link).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_link", payment_link.to_s.size, GET_PAYMENT_LINKS_PAYMENT_LINK_MAX_LENGTH_FOR_PAYMENT_LINK)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links/{payment_link}".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentLinksApi.get_payment_links_payment_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @required @param payment_link [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentLinksResourceListLineItems]
    def get_payment_links_payment_link_line_items(
      *,
      payment_link : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentLinksResourceListLineItems
      data, _status_code, _headers = get_payment_links_payment_link_line_items_with_http_info(payment_link: payment_link, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentLinksResourceListLineItems, Integer, Hash)] Stripe::PaymentLinksResourceListLineItems, response status code and response headers
    def get_payment_links_payment_link_line_items_with_http_info(
      *,
      payment_link : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentLinksResourceListLineItems, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_links_payment_link_line_items(payment_link: payment_link, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentLinksApi#get_payment_links_payment_link_line_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLinksResourceListLineItems.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_links_payment_link_line_items(
      *,
      payment_link : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_links_payment_link_line_items(payment_link: payment_link, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_PAYMENT_LINK   = 5000
    GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_links_payment_link_line_items(
      *,
      payment_link : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentLinksApi.get_payment_links_payment_link_line_items ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payment_link\" is required and cannot be null") if payment_link.nil?
        unless (_payment_link = payment_link).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_link", payment_link.to_s.size, GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_PAYMENT_LINK)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links/{payment_link}/line_items".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentLinksApi.get_payment_links_payment_link_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a payment link.</p>
    # @required @param post_payment_links_request [Stripe::PostPaymentLinksRequest?]
    # @return [Stripe::PaymentLink]
    def post_payment_links(
      *,
      post_payment_links_request : Stripe::PostPaymentLinksRequest? = nil
    ) : Stripe::PaymentLink
      data, _status_code, _headers = post_payment_links_with_http_info(post_payment_links_request: post_payment_links_request)
      data
    end

    # &lt;p&gt;Creates a payment link.&lt;/p&gt;
    # @required @param post_payment_links_request [Stripe::PostPaymentLinksRequest?]
    # @return [Tuple(Stripe::PaymentLink, Integer, Hash)] Stripe::PaymentLink, response status code and response headers
    def post_payment_links_with_http_info(
      *,
      post_payment_links_request : Stripe::PostPaymentLinksRequest? = nil
    ) : Tuple(Stripe::PaymentLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_links(post_payment_links_request: post_payment_links_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentLinksApi#post_payment_links\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a payment link.&lt;/p&gt;
    # @required @param post_payment_links_request [Stripe::PostPaymentLinksRequest?]
    # @return nil
    def post_payment_links(
      *,
      post_payment_links_request : Stripe::PostPaymentLinksRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_links(post_payment_links_request: post_payment_links_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_post_payment_links(
      *,
      post_payment_links_request : Stripe::PostPaymentLinksRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentLinksApi.post_payment_links ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"post_payment_links_request\" is required and cannot be null") if post_payment_links_request.nil?
        unless (_post_payment_links_request = post_payment_links_request).nil?
          _post_payment_links_request.validate if _post_payment_links_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_links_request, content_type: header_params["Content-Type"]?) if !post_payment_links_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentLinksApi.post_payment_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a payment link.</p>
    # @required @param payment_link [String?]
    # @optional @param post_payment_links_payment_link_request [Stripe::PostPaymentLinksPaymentLinkRequest?]
    # @return [Stripe::PaymentLink]
    def post_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      post_payment_links_payment_link_request : Stripe::PostPaymentLinksPaymentLinkRequest? = nil
    ) : Stripe::PaymentLink
      data, _status_code, _headers = post_payment_links_payment_link_with_http_info(payment_link: payment_link, post_payment_links_payment_link_request: post_payment_links_payment_link_request)
      data
    end

    # &lt;p&gt;Updates a payment link.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param post_payment_links_payment_link_request [Stripe::PostPaymentLinksPaymentLinkRequest?]
    # @return [Tuple(Stripe::PaymentLink, Integer, Hash)] Stripe::PaymentLink, response status code and response headers
    def post_payment_links_payment_link_with_http_info(
      *,
      payment_link : String? = nil,
      post_payment_links_payment_link_request : Stripe::PostPaymentLinksPaymentLinkRequest? = nil
    ) : Tuple(Stripe::PaymentLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_links_payment_link(payment_link: payment_link, post_payment_links_payment_link_request: post_payment_links_payment_link_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: PaymentLinksApi#post_payment_links_payment_link\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a payment link.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param post_payment_links_payment_link_request [Stripe::PostPaymentLinksPaymentLinkRequest?]
    # @return nil
    def post_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      post_payment_links_payment_link_request : Stripe::PostPaymentLinksPaymentLinkRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_links_payment_link(payment_link: payment_link, post_payment_links_payment_link_request: post_payment_links_payment_link_request).execute(&block)
    end

    POST_PAYMENT_LINKS_PAYMENT_LINK_MAX_LENGTH_FOR_PAYMENT_LINK = 5000

    # @return Crest::Request
    def build_api_request_for_post_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      post_payment_links_payment_link_request : Stripe::PostPaymentLinksPaymentLinkRequest? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: PaymentLinksApi.post_payment_links_payment_link ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"payment_link\" is required and cannot be null") if payment_link.nil?
        unless (_payment_link = payment_link).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_link", payment_link.to_s.size, POST_PAYMENT_LINKS_PAYMENT_LINK_MAX_LENGTH_FOR_PAYMENT_LINK)
        end
        unless (_post_payment_links_payment_link_request = post_payment_links_payment_link_request).nil?
          _post_payment_links_payment_link_request.validate if _post_payment_links_payment_link_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links/{payment_link}".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: post_payment_links_payment_link_request, content_type: header_params["Content-Type"]?) if !post_payment_links_payment_link_request.nil?

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentLinksApi.post_payment_links_payment_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
