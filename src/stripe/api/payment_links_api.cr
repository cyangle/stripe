#  Stripe API
#
# The Stripe REST API. Please see https://stripe.com/docs/api for more details.
#
# The version of the OpenAPI document: 2024-06-20
# Contact: dev-platform@stripe.com
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/after_completion_params"
require "../models/automatic_tax_params"
require "../models/consent_collection_params"
require "../models/custom_field_param"
require "../models/custom_text_param"
require "../models/error"

require "../models/invoice_creation_create_params"
require "../models/invoice_creation_update_params"
require "../models/line_items_create_params"
require "../models/line_items_update_params"
require "../models/payment_intent_data_params"
require "../models/payment_intent_data_update_params"
require "../models/payment_link"
require "../models/payment_links_resource_list_line_items"
require "../models/payment_links_resource_payment_link_list"
require "../models/phone_number_collection_params"
require "../models/post_payment_links_payment_link_request_custom_fields"
require "../models/post_payment_links_payment_link_request_inactive_message"
require "../models/post_payment_links_payment_link_request_payment_method_types"
require "../models/post_payment_links_payment_link_request_restrictions"
require "../models/post_payment_links_payment_link_request_shipping_address_collection"
require "../models/restrictions_params"
require "../models/shipping_address_collection_params"
require "../models/shipping_option_params"
require "../models/subscription_data_params"
require "../models/subscription_data_update_params"
require "../models/tax_id_collection_params"
require "../models/transfer_data_params"

module Stripe
  class PaymentLinksApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # <p>Returns a list of your payment links.</p>
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentLinksResourcePaymentLinkList]
    def get_payment_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentLinksResourcePaymentLinkList
      data, _status_code, _headers = get_payment_links_with_http_info(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, expand: expand)
      data
    end

    # &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentLinksResourcePaymentLinkList, Integer, Hash)] Stripe::PaymentLinksResourcePaymentLinkList, response status code and response headers
    def get_payment_links_with_http_info(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentLinksResourcePaymentLinkList, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_links(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentLinksApi#get_payment_links\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLinksResourcePaymentLinkList.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param active [Bool?] Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_links(ending_before: ending_before, starting_after: starting_after, limit: limit, active: active, expand: expand).execute(&block)
    end

    GET_PAYMENT_LINKS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYMENT_LINKS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_links(
      *,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      active : Bool? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentLinksApi.get_payment_links ..." }
      end

      if client_side_validation?
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYMENT_LINKS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYMENT_LINKS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["active"] = active.to_s if !active.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentLinksApi.get_payment_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Retrieve a payment link.</p>
    # @required @param payment_link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentLink]
    def get_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentLink
      data, _status_code, _headers = get_payment_links_payment_link_with_http_info(payment_link: payment_link, expand: expand)
      data
    end

    # &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentLink, Integer, Hash)] Stripe::PaymentLink, response status code and response headers
    def get_payment_links_payment_link_with_http_info(
      *,
      payment_link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_links_payment_link(payment_link: payment_link, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentLinksApi#get_payment_links_payment_link\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_links_payment_link(payment_link: payment_link, expand: expand).execute(&block)
    end

    GET_PAYMENT_LINKS_PAYMENT_LINK_MAX_LENGTH_FOR_PAYMENT_LINK = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentLinksApi.get_payment_links_payment_link ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_link\" is required and cannot be null") if payment_link.nil?
        unless (_payment_link = payment_link).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_link", payment_link.to_s.size, GET_PAYMENT_LINKS_PAYMENT_LINK_MAX_LENGTH_FOR_PAYMENT_LINK)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links/{payment_link}".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentLinksApi.get_payment_links_payment_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
    # @required @param payment_link [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Stripe::PaymentLinksResourceListLineItems]
    def get_payment_links_payment_link_line_items(
      *,
      payment_link : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Stripe::PaymentLinksResourceListLineItems
      data, _status_code, _headers = get_payment_links_payment_link_line_items_with_http_info(payment_link: payment_link, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)
      data
    end

    # &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return [Tuple(Stripe::PaymentLinksResourceListLineItems, Integer, Hash)] Stripe::PaymentLinksResourceListLineItems, response status code and response headers
    def get_payment_links_payment_link_line_items_with_http_info(
      *,
      payment_link : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Tuple(Stripe::PaymentLinksResourceListLineItems, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_payment_links_payment_link_line_items(payment_link: payment_link, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentLinksApi#get_payment_links_payment_link_line_items\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLinksResourceListLineItems.from_json(body), status_code, headers)
    end

    # &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param ending_before [String?] A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    # @optional @param starting_after [String?] A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    # @optional @param limit [Int32?] A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @optional @param expand [Array(Array(String))?] Specifies which fields in the response should be expanded.
    # @return nil
    def get_payment_links_payment_link_line_items(
      *,
      payment_link : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_payment_links_payment_link_line_items(payment_link: payment_link, ending_before: ending_before, starting_after: starting_after, limit: limit, expand: expand).execute(&block)
    end

    GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_PAYMENT_LINK   = 5000
    GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE  = 5000
    GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER = 5000

    # @return Crest::Request
    def build_api_request_for_get_payment_links_payment_link_line_items(
      *,
      payment_link : String? = nil,
      ending_before : String? = nil,
      starting_after : String? = nil,
      limit : Int64? = nil,
      expand : Array(Array(String))? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentLinksApi.get_payment_links_payment_link_line_items ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_link\" is required and cannot be null") if payment_link.nil?
        unless (_payment_link = payment_link).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_link", payment_link.to_s.size, GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_PAYMENT_LINK)
        end
        unless (_ending_before = ending_before).nil?
          OpenApi::PrimitiveValidator.validate_max_length("ending_before", ending_before.to_s.size, GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_ENDING_BEFORE)
        end
        unless (_starting_after = starting_after).nil?
          OpenApi::PrimitiveValidator.validate_max_length("starting_after", starting_after.to_s.size, GET_PAYMENT_LINKS_PAYMENT_LINK_LINE_ITEMS_MAX_LENGTH_FOR_STARTING_AFTER)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links/{payment_link}/line_items".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["ending_before"] = ending_before.to_s if !ending_before.nil?
      query_params["starting_after"] = starting_after.to_s if !starting_after.nil?
      query_params["limit"] = limit.to_s if !limit.nil?
      query_params["expand"] = @api_client.build_collection_param(expand, "csv") if !expand.nil? && !expand.empty?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "PaymentLinksApi.get_payment_links_payment_link_line_items",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Creates a payment link.</p>
    # @required @param line_items [Array(Stripe::LineItemsCreateParams)?] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @optional @param after_completion [Stripe::AfterCompletionParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Can only be applied when there are no line items with recurring prices.
    # @optional @param application_fee_percent [Float64?] A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Configuration for collecting the customer's billing address. Defaults to `auto`.
    # @optional @param consent_collection [Stripe::ConsentCollectionParams?]
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies) and supported by each line item's price.
    # @optional @param custom_fields [Array(Stripe::CustomFieldParam)?] Collect additional information from your customer using custom fields. Up to 3 fields are supported.
    # @optional @param custom_text [Stripe::CustomTextParam?]
    # @optional @param customer_creation [String?] Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param inactive_message [String?] The custom message to be displayed to a customer when a payment link is no longer active.
    # @optional @param invoice_creation [Stripe::InvoiceCreationCreateParams?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?] The account on behalf of which to charge.
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_types [Array(String)?] The list of payment method types that customers can use. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)).
    # @optional @param phone_number_collection [Stripe::PhoneNumberCollectionParams?]
    # @optional @param restrictions [Stripe::RestrictionsParams?]
    # @optional @param shipping_address_collection [Stripe::ShippingAddressCollectionParams?]
    # @optional @param shipping_options [Array(Stripe::ShippingOptionParams)?] The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
    # @optional @param submit_type [String?] Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
    # @optional @param subscription_data [Stripe::SubscriptionDataParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @optional @param transfer_data [Stripe::TransferDataParams?]
    # @return [Stripe::PaymentLink]
    def post_payment_links(
      *,
      line_items : Array(Stripe::LineItemsCreateParams)? = nil,
      after_completion : Stripe::AfterCompletionParams? = nil,
      allow_promotion_codes : Bool? = nil,
      application_fee_amount : Int64? = nil,
      application_fee_percent : Float64? = nil,
      automatic_tax : Stripe::AutomaticTaxParams? = nil,
      billing_address_collection : String? = nil,
      consent_collection : Stripe::ConsentCollectionParams? = nil,
      currency : String? = nil,
      custom_fields : Array(Stripe::CustomFieldParam)? = nil,
      custom_text : Stripe::CustomTextParam? = nil,
      customer_creation : String? = nil,
      expand : Array(String)? = nil,
      inactive_message : String? = nil,
      invoice_creation : Stripe::InvoiceCreationCreateParams? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      payment_intent_data : Stripe::PaymentIntentDataParams? = nil,
      payment_method_collection : String? = nil,
      payment_method_types : Array(String)? = nil,
      phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil,
      restrictions : Stripe::RestrictionsParams? = nil,
      shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil,
      shipping_options : Array(Stripe::ShippingOptionParams)? = nil,
      submit_type : String? = nil,
      subscription_data : Stripe::SubscriptionDataParams? = nil,
      tax_id_collection : Stripe::TaxIdCollectionParams? = nil,
      transfer_data : Stripe::TransferDataParams? = nil
    ) : Stripe::PaymentLink
      data, _status_code, _headers = post_payment_links_with_http_info(line_items: line_items, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, consent_collection: consent_collection, currency: currency, custom_fields: custom_fields, custom_text: custom_text, customer_creation: customer_creation, expand: expand, inactive_message: inactive_message, invoice_creation: invoice_creation, metadata: metadata, on_behalf_of: on_behalf_of, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, restrictions: restrictions, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection, transfer_data: transfer_data)
      data
    end

    # &lt;p&gt;Creates a payment link.&lt;/p&gt;
    # @required @param line_items [Array(Stripe::LineItemsCreateParams)?] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @optional @param after_completion [Stripe::AfterCompletionParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Can only be applied when there are no line items with recurring prices.
    # @optional @param application_fee_percent [Float64?] A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Configuration for collecting the customer's billing address. Defaults to `auto`.
    # @optional @param consent_collection [Stripe::ConsentCollectionParams?]
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies) and supported by each line item's price.
    # @optional @param custom_fields [Array(Stripe::CustomFieldParam)?] Collect additional information from your customer using custom fields. Up to 3 fields are supported.
    # @optional @param custom_text [Stripe::CustomTextParam?]
    # @optional @param customer_creation [String?] Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param inactive_message [String?] The custom message to be displayed to a customer when a payment link is no longer active.
    # @optional @param invoice_creation [Stripe::InvoiceCreationCreateParams?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?] The account on behalf of which to charge.
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_types [Array(String)?] The list of payment method types that customers can use. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)).
    # @optional @param phone_number_collection [Stripe::PhoneNumberCollectionParams?]
    # @optional @param restrictions [Stripe::RestrictionsParams?]
    # @optional @param shipping_address_collection [Stripe::ShippingAddressCollectionParams?]
    # @optional @param shipping_options [Array(Stripe::ShippingOptionParams)?] The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
    # @optional @param submit_type [String?] Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
    # @optional @param subscription_data [Stripe::SubscriptionDataParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @optional @param transfer_data [Stripe::TransferDataParams?]
    # @return [Tuple(Stripe::PaymentLink, Integer, Hash)] Stripe::PaymentLink, response status code and response headers
    def post_payment_links_with_http_info(
      *,
      line_items : Array(Stripe::LineItemsCreateParams)? = nil,
      after_completion : Stripe::AfterCompletionParams? = nil,
      allow_promotion_codes : Bool? = nil,
      application_fee_amount : Int64? = nil,
      application_fee_percent : Float64? = nil,
      automatic_tax : Stripe::AutomaticTaxParams? = nil,
      billing_address_collection : String? = nil,
      consent_collection : Stripe::ConsentCollectionParams? = nil,
      currency : String? = nil,
      custom_fields : Array(Stripe::CustomFieldParam)? = nil,
      custom_text : Stripe::CustomTextParam? = nil,
      customer_creation : String? = nil,
      expand : Array(String)? = nil,
      inactive_message : String? = nil,
      invoice_creation : Stripe::InvoiceCreationCreateParams? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      payment_intent_data : Stripe::PaymentIntentDataParams? = nil,
      payment_method_collection : String? = nil,
      payment_method_types : Array(String)? = nil,
      phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil,
      restrictions : Stripe::RestrictionsParams? = nil,
      shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil,
      shipping_options : Array(Stripe::ShippingOptionParams)? = nil,
      submit_type : String? = nil,
      subscription_data : Stripe::SubscriptionDataParams? = nil,
      tax_id_collection : Stripe::TaxIdCollectionParams? = nil,
      transfer_data : Stripe::TransferDataParams? = nil
    ) : Tuple(Stripe::PaymentLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_links(line_items: line_items, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, consent_collection: consent_collection, currency: currency, custom_fields: custom_fields, custom_text: custom_text, customer_creation: customer_creation, expand: expand, inactive_message: inactive_message, invoice_creation: invoice_creation, metadata: metadata, on_behalf_of: on_behalf_of, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, restrictions: restrictions, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection, transfer_data: transfer_data)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentLinksApi#post_payment_links\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Creates a payment link.&lt;/p&gt;
    # @required @param line_items [Array(Stripe::LineItemsCreateParams)?] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @optional @param after_completion [Stripe::AfterCompletionParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param application_fee_amount [Int32?] The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Can only be applied when there are no line items with recurring prices.
    # @optional @param application_fee_percent [Float64?] A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Configuration for collecting the customer's billing address. Defaults to `auto`.
    # @optional @param consent_collection [Stripe::ConsentCollectionParams?]
    # @optional @param currency [String?] Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies) and supported by each line item's price.
    # @optional @param custom_fields [Array(Stripe::CustomFieldParam)?] Collect additional information from your customer using custom fields. Up to 3 fields are supported.
    # @optional @param custom_text [Stripe::CustomTextParam?]
    # @optional @param customer_creation [String?] Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param inactive_message [String?] The custom message to be displayed to a customer when a payment link is no longer active.
    # @optional @param invoice_creation [Stripe::InvoiceCreationCreateParams?]
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param on_behalf_of [String?] The account on behalf of which to charge.
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_types [Array(String)?] The list of payment method types that customers can use. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)).
    # @optional @param phone_number_collection [Stripe::PhoneNumberCollectionParams?]
    # @optional @param restrictions [Stripe::RestrictionsParams?]
    # @optional @param shipping_address_collection [Stripe::ShippingAddressCollectionParams?]
    # @optional @param shipping_options [Array(Stripe::ShippingOptionParams)?] The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
    # @optional @param submit_type [String?] Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
    # @optional @param subscription_data [Stripe::SubscriptionDataParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @optional @param transfer_data [Stripe::TransferDataParams?]
    # @return nil
    def post_payment_links(
      *,
      line_items : Array(Stripe::LineItemsCreateParams)? = nil,
      after_completion : Stripe::AfterCompletionParams? = nil,
      allow_promotion_codes : Bool? = nil,
      application_fee_amount : Int64? = nil,
      application_fee_percent : Float64? = nil,
      automatic_tax : Stripe::AutomaticTaxParams? = nil,
      billing_address_collection : String? = nil,
      consent_collection : Stripe::ConsentCollectionParams? = nil,
      currency : String? = nil,
      custom_fields : Array(Stripe::CustomFieldParam)? = nil,
      custom_text : Stripe::CustomTextParam? = nil,
      customer_creation : String? = nil,
      expand : Array(String)? = nil,
      inactive_message : String? = nil,
      invoice_creation : Stripe::InvoiceCreationCreateParams? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      payment_intent_data : Stripe::PaymentIntentDataParams? = nil,
      payment_method_collection : String? = nil,
      payment_method_types : Array(String)? = nil,
      phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil,
      restrictions : Stripe::RestrictionsParams? = nil,
      shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil,
      shipping_options : Array(Stripe::ShippingOptionParams)? = nil,
      submit_type : String? = nil,
      subscription_data : Stripe::SubscriptionDataParams? = nil,
      tax_id_collection : Stripe::TaxIdCollectionParams? = nil,
      transfer_data : Stripe::TransferDataParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_links(line_items: line_items, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, application_fee_amount: application_fee_amount, application_fee_percent: application_fee_percent, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, consent_collection: consent_collection, currency: currency, custom_fields: custom_fields, custom_text: custom_text, customer_creation: customer_creation, expand: expand, inactive_message: inactive_message, invoice_creation: invoice_creation, metadata: metadata, on_behalf_of: on_behalf_of, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_types: payment_method_types, phone_number_collection: phone_number_collection, restrictions: restrictions, shipping_address_collection: shipping_address_collection, shipping_options: shipping_options, submit_type: submit_type, subscription_data: subscription_data, tax_id_collection: tax_id_collection, transfer_data: transfer_data).execute(&block)
    end

    POST_PAYMENT_LINKS_VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION = String.static_array("auto", "required")
    POST_PAYMENT_LINKS_VALID_VALUES_FOR_CUSTOMER_CREATION          = String.static_array("always", "if_required")
    POST_PAYMENT_LINKS_MAX_LENGTH_FOR_INACTIVE_MESSAGE             = 500
    POST_PAYMENT_LINKS_VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION  = String.static_array("always", "if_required")
    POST_PAYMENT_LINKS_VALID_VALUES_FOR_PAYMENT_METHOD_TYPES       = String.static_array("affirm", "afterpay_clearpay", "alipay", "au_becs_debit", "bacs_debit", "bancontact", "blik", "boleto", "card", "cashapp", "eps", "fpx", "giropay", "grabpay", "ideal", "klarna", "konbini", "link", "mobilepay", "multibanco", "oxxo", "p24", "paynow", "paypal", "pix", "promptpay", "sepa_debit", "sofort", "swish", "twint", "us_bank_account", "wechat_pay", "zip")
    POST_PAYMENT_LINKS_VALID_VALUES_FOR_SUBMIT_TYPE                = String.static_array("auto", "book", "donate", "pay")

    # @return Crest::Request
    def build_api_request_for_post_payment_links(
      *,
      line_items : Array(Stripe::LineItemsCreateParams)? = nil,
      after_completion : Stripe::AfterCompletionParams? = nil,
      allow_promotion_codes : Bool? = nil,
      application_fee_amount : Int64? = nil,
      application_fee_percent : Float64? = nil,
      automatic_tax : Stripe::AutomaticTaxParams? = nil,
      billing_address_collection : String? = nil,
      consent_collection : Stripe::ConsentCollectionParams? = nil,
      currency : String? = nil,
      custom_fields : Array(Stripe::CustomFieldParam)? = nil,
      custom_text : Stripe::CustomTextParam? = nil,
      customer_creation : String? = nil,
      expand : Array(String)? = nil,
      inactive_message : String? = nil,
      invoice_creation : Stripe::InvoiceCreationCreateParams? = nil,
      metadata : Hash(String, String)? = nil,
      on_behalf_of : String? = nil,
      payment_intent_data : Stripe::PaymentIntentDataParams? = nil,
      payment_method_collection : String? = nil,
      payment_method_types : Array(String)? = nil,
      phone_number_collection : Stripe::PhoneNumberCollectionParams? = nil,
      restrictions : Stripe::RestrictionsParams? = nil,
      shipping_address_collection : Stripe::ShippingAddressCollectionParams? = nil,
      shipping_options : Array(Stripe::ShippingOptionParams)? = nil,
      submit_type : String? = nil,
      subscription_data : Stripe::SubscriptionDataParams? = nil,
      tax_id_collection : Stripe::TaxIdCollectionParams? = nil,
      transfer_data : Stripe::TransferDataParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentLinksApi.post_payment_links ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"line_items\" is required and cannot be null") if line_items.nil?
        unless (_line_items = line_items).nil?
          OpenApi::ContainerValidator.validate(container: _line_items) if _line_items.is_a?(Array)
        end
        unless (_after_completion = after_completion).nil?
          _after_completion.validate if _after_completion.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_billing_address_collection = billing_address_collection).nil?
          OpenApi::EnumValidator.validate("billing_address_collection", _billing_address_collection, POST_PAYMENT_LINKS_VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
        end
        unless (_consent_collection = consent_collection).nil?
          _consent_collection.validate if _consent_collection.is_a?(OpenApi::Validatable)
        end

        unless (_custom_fields = custom_fields).nil?
          OpenApi::ContainerValidator.validate(container: _custom_fields) if _custom_fields.is_a?(Array)
        end
        unless (_custom_text = custom_text).nil?
          _custom_text.validate if _custom_text.is_a?(OpenApi::Validatable)
        end
        unless (_customer_creation = customer_creation).nil?
          OpenApi::EnumValidator.validate("customer_creation", _customer_creation, POST_PAYMENT_LINKS_VALID_VALUES_FOR_CUSTOMER_CREATION)
        end

        unless (_inactive_message = inactive_message).nil?
          OpenApi::PrimitiveValidator.validate_max_length("inactive_message", inactive_message.to_s.size, POST_PAYMENT_LINKS_MAX_LENGTH_FOR_INACTIVE_MESSAGE)
        end
        unless (_invoice_creation = invoice_creation).nil?
          _invoice_creation.validate if _invoice_creation.is_a?(OpenApi::Validatable)
        end

        unless (_payment_intent_data = payment_intent_data).nil?
          _payment_intent_data.validate if _payment_intent_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_collection = payment_method_collection).nil?
          OpenApi::EnumValidator.validate("payment_method_collection", _payment_method_collection, POST_PAYMENT_LINKS_VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
        end
        unless (_payment_method_types = payment_method_types).nil?
          OpenApi::EnumValidator.validate("payment_method_types", _payment_method_types, POST_PAYMENT_LINKS_VALID_VALUES_FOR_PAYMENT_METHOD_TYPES)
        end
        unless (_phone_number_collection = phone_number_collection).nil?
          _phone_number_collection.validate if _phone_number_collection.is_a?(OpenApi::Validatable)
        end
        unless (_restrictions = restrictions).nil?
          _restrictions.validate if _restrictions.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_address_collection = shipping_address_collection).nil?
          _shipping_address_collection.validate if _shipping_address_collection.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_options = shipping_options).nil?
          OpenApi::ContainerValidator.validate(container: _shipping_options) if _shipping_options.is_a?(Array)
        end
        unless (_submit_type = submit_type).nil?
          OpenApi::EnumValidator.validate("submit_type", _submit_type, POST_PAYMENT_LINKS_VALID_VALUES_FOR_SUBMIT_TYPE)
        end
        unless (_subscription_data = subscription_data).nil?
          _subscription_data.validate if _subscription_data.is_a?(OpenApi::Validatable)
        end
        unless (_tax_id_collection = tax_id_collection).nil?
          _tax_id_collection.validate if _tax_id_collection.is_a?(OpenApi::Validatable)
        end
        unless (_transfer_data = transfer_data).nil?
          _transfer_data.validate if _transfer_data.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(after_completion.to_json), "after_completion")) if !after_completion.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("allow_promotion_codes", allow_promotion_codes.to_s) if !allow_promotion_codes.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_amount", application_fee_amount.to_s) if !application_fee_amount.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("application_fee_percent", application_fee_percent.to_s) if !application_fee_percent.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_tax.to_json), "automatic_tax")) if !automatic_tax.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("billing_address_collection", billing_address_collection.to_s) if !billing_address_collection.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(consent_collection.to_json), "consent_collection")) if !consent_collection.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("currency", currency.to_s) if !currency.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(custom_fields.to_json), "custom_fields")) if !custom_fields.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(custom_text.to_json), "custom_text")) if !custom_text.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer_creation", customer_creation.to_s) if !customer_creation.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("inactive_message", inactive_message.to_s) if !inactive_message.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(invoice_creation.to_json), "invoice_creation")) if !invoice_creation.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(line_items.to_json), "line_items")) if !line_items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("on_behalf_of", on_behalf_of.to_s) if !on_behalf_of.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_intent_data.to_json), "payment_intent_data")) if !payment_intent_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method_collection", payment_method_collection.to_s) if !payment_method_collection.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_types.to_json), "payment_method_types")) if !payment_method_types.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(phone_number_collection.to_json), "phone_number_collection")) if !phone_number_collection.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(restrictions.to_json), "restrictions")) if !restrictions.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_address_collection.to_json), "shipping_address_collection")) if !shipping_address_collection.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_options.to_json), "shipping_options")) if !shipping_options.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("submit_type", submit_type.to_s) if !submit_type.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(subscription_data.to_json), "subscription_data")) if !subscription_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(tax_id_collection.to_json), "tax_id_collection")) if !tax_id_collection.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(transfer_data.to_json), "transfer_data")) if !transfer_data.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentLinksApi.post_payment_links",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # <p>Updates a payment link.</p>
    # @required @param payment_link [String?]
    # @optional @param active [Bool?] Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
    # @optional @param after_completion [Stripe::AfterCompletionParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Configuration for collecting the customer's billing address. Defaults to `auto`.
    # @optional @param custom_fields [Stripe::PostPaymentLinksPaymentLinkRequestCustomFields?]
    # @optional @param custom_text [Stripe::CustomTextParam?]
    # @optional @param customer_creation [String?] Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param inactive_message [Stripe::PostPaymentLinksPaymentLinkRequestInactiveMessage?]
    # @optional @param invoice_creation [Stripe::InvoiceCreationUpdateParams?]
    # @optional @param line_items [Array(Stripe::LineItemsUpdateParams)?] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataUpdateParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_types [Stripe::PostPaymentLinksPaymentLinkRequestPaymentMethodTypes?]
    # @optional @param restrictions [Stripe::PostPaymentLinksPaymentLinkRequestRestrictions?]
    # @optional @param shipping_address_collection [Stripe::PostPaymentLinksPaymentLinkRequestShippingAddressCollection?]
    # @optional @param subscription_data [Stripe::SubscriptionDataUpdateParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @return [Stripe::PaymentLink]
    def post_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      active : Bool? = nil,
      after_completion : Stripe::AfterCompletionParams? = nil,
      allow_promotion_codes : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParams? = nil,
      billing_address_collection : String? = nil,
      custom_fields : Stripe::PostPaymentLinksPaymentLinkRequestCustomFields? = nil,
      custom_text : Stripe::CustomTextParam? = nil,
      customer_creation : String? = nil,
      expand : Array(String)? = nil,
      inactive_message : Stripe::PostPaymentLinksPaymentLinkRequestInactiveMessage? = nil,
      invoice_creation : Stripe::InvoiceCreationUpdateParams? = nil,
      line_items : Array(Stripe::LineItemsUpdateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      payment_intent_data : Stripe::PaymentIntentDataUpdateParams? = nil,
      payment_method_collection : String? = nil,
      payment_method_types : Stripe::PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? = nil,
      restrictions : Stripe::PostPaymentLinksPaymentLinkRequestRestrictions? = nil,
      shipping_address_collection : Stripe::PostPaymentLinksPaymentLinkRequestShippingAddressCollection? = nil,
      subscription_data : Stripe::SubscriptionDataUpdateParams? = nil,
      tax_id_collection : Stripe::TaxIdCollectionParams? = nil
    ) : Stripe::PaymentLink
      data, _status_code, _headers = post_payment_links_payment_link_with_http_info(payment_link: payment_link, active: active, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, custom_fields: custom_fields, custom_text: custom_text, customer_creation: customer_creation, expand: expand, inactive_message: inactive_message, invoice_creation: invoice_creation, line_items: line_items, metadata: metadata, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_types: payment_method_types, restrictions: restrictions, shipping_address_collection: shipping_address_collection, subscription_data: subscription_data, tax_id_collection: tax_id_collection)
      data
    end

    # &lt;p&gt;Updates a payment link.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param active [Bool?] Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
    # @optional @param after_completion [Stripe::AfterCompletionParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Configuration for collecting the customer's billing address. Defaults to `auto`.
    # @optional @param custom_fields [Stripe::PostPaymentLinksPaymentLinkRequestCustomFields?]
    # @optional @param custom_text [Stripe::CustomTextParam?]
    # @optional @param customer_creation [String?] Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param inactive_message [Stripe::PostPaymentLinksPaymentLinkRequestInactiveMessage?]
    # @optional @param invoice_creation [Stripe::InvoiceCreationUpdateParams?]
    # @optional @param line_items [Array(Stripe::LineItemsUpdateParams)?] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataUpdateParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_types [Stripe::PostPaymentLinksPaymentLinkRequestPaymentMethodTypes?]
    # @optional @param restrictions [Stripe::PostPaymentLinksPaymentLinkRequestRestrictions?]
    # @optional @param shipping_address_collection [Stripe::PostPaymentLinksPaymentLinkRequestShippingAddressCollection?]
    # @optional @param subscription_data [Stripe::SubscriptionDataUpdateParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @return [Tuple(Stripe::PaymentLink, Integer, Hash)] Stripe::PaymentLink, response status code and response headers
    def post_payment_links_payment_link_with_http_info(
      *,
      payment_link : String? = nil,
      active : Bool? = nil,
      after_completion : Stripe::AfterCompletionParams? = nil,
      allow_promotion_codes : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParams? = nil,
      billing_address_collection : String? = nil,
      custom_fields : Stripe::PostPaymentLinksPaymentLinkRequestCustomFields? = nil,
      custom_text : Stripe::CustomTextParam? = nil,
      customer_creation : String? = nil,
      expand : Array(String)? = nil,
      inactive_message : Stripe::PostPaymentLinksPaymentLinkRequestInactiveMessage? = nil,
      invoice_creation : Stripe::InvoiceCreationUpdateParams? = nil,
      line_items : Array(Stripe::LineItemsUpdateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      payment_intent_data : Stripe::PaymentIntentDataUpdateParams? = nil,
      payment_method_collection : String? = nil,
      payment_method_types : Stripe::PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? = nil,
      restrictions : Stripe::PostPaymentLinksPaymentLinkRequestRestrictions? = nil,
      shipping_address_collection : Stripe::PostPaymentLinksPaymentLinkRequestShippingAddressCollection? = nil,
      subscription_data : Stripe::SubscriptionDataUpdateParams? = nil,
      tax_id_collection : Stripe::TaxIdCollectionParams? = nil
    ) : Tuple(Stripe::PaymentLink, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_post_payment_links_payment_link(payment_link: payment_link, active: active, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, custom_fields: custom_fields, custom_text: custom_text, customer_creation: customer_creation, expand: expand, inactive_message: inactive_message, invoice_creation: invoice_creation, line_items: line_items, metadata: metadata, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_types: payment_method_types, restrictions: restrictions, shipping_address_collection: shipping_address_collection, subscription_data: subscription_data, tax_id_collection: tax_id_collection)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PaymentLinksApi#post_payment_links_payment_link\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Stripe::PaymentLink.from_json(body), status_code, headers)
    end

    # &lt;p&gt;Updates a payment link.&lt;/p&gt;
    # @required @param payment_link [String?]
    # @optional @param active [Bool?] Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
    # @optional @param after_completion [Stripe::AfterCompletionParams?]
    # @optional @param allow_promotion_codes [Bool?] Enables user redeemable promotion codes.
    # @optional @param automatic_tax [Stripe::AutomaticTaxParams?]
    # @optional @param billing_address_collection [String?] Configuration for collecting the customer's billing address. Defaults to `auto`.
    # @optional @param custom_fields [Stripe::PostPaymentLinksPaymentLinkRequestCustomFields?]
    # @optional @param custom_text [Stripe::CustomTextParam?]
    # @optional @param customer_creation [String?] Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
    # @optional @param expand [Array(String)?] Specifies which fields in the response should be expanded.
    # @optional @param inactive_message [Stripe::PostPaymentLinksPaymentLinkRequestInactiveMessage?]
    # @optional @param invoice_creation [Stripe::InvoiceCreationUpdateParams?]
    # @optional @param line_items [Array(Stripe::LineItemsUpdateParams)?] The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
    # @optional @param metadata [Hash(String, String)?]
    # @optional @param payment_intent_data [Stripe::PaymentIntentDataUpdateParams?]
    # @optional @param payment_method_collection [String?] Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
    # @optional @param payment_method_types [Stripe::PostPaymentLinksPaymentLinkRequestPaymentMethodTypes?]
    # @optional @param restrictions [Stripe::PostPaymentLinksPaymentLinkRequestRestrictions?]
    # @optional @param shipping_address_collection [Stripe::PostPaymentLinksPaymentLinkRequestShippingAddressCollection?]
    # @optional @param subscription_data [Stripe::SubscriptionDataUpdateParams?]
    # @optional @param tax_id_collection [Stripe::TaxIdCollectionParams?]
    # @return nil
    def post_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      active : Bool? = nil,
      after_completion : Stripe::AfterCompletionParams? = nil,
      allow_promotion_codes : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParams? = nil,
      billing_address_collection : String? = nil,
      custom_fields : Stripe::PostPaymentLinksPaymentLinkRequestCustomFields? = nil,
      custom_text : Stripe::CustomTextParam? = nil,
      customer_creation : String? = nil,
      expand : Array(String)? = nil,
      inactive_message : Stripe::PostPaymentLinksPaymentLinkRequestInactiveMessage? = nil,
      invoice_creation : Stripe::InvoiceCreationUpdateParams? = nil,
      line_items : Array(Stripe::LineItemsUpdateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      payment_intent_data : Stripe::PaymentIntentDataUpdateParams? = nil,
      payment_method_collection : String? = nil,
      payment_method_types : Stripe::PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? = nil,
      restrictions : Stripe::PostPaymentLinksPaymentLinkRequestRestrictions? = nil,
      shipping_address_collection : Stripe::PostPaymentLinksPaymentLinkRequestShippingAddressCollection? = nil,
      subscription_data : Stripe::SubscriptionDataUpdateParams? = nil,
      tax_id_collection : Stripe::TaxIdCollectionParams? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_post_payment_links_payment_link(payment_link: payment_link, active: active, after_completion: after_completion, allow_promotion_codes: allow_promotion_codes, automatic_tax: automatic_tax, billing_address_collection: billing_address_collection, custom_fields: custom_fields, custom_text: custom_text, customer_creation: customer_creation, expand: expand, inactive_message: inactive_message, invoice_creation: invoice_creation, line_items: line_items, metadata: metadata, payment_intent_data: payment_intent_data, payment_method_collection: payment_method_collection, payment_method_types: payment_method_types, restrictions: restrictions, shipping_address_collection: shipping_address_collection, subscription_data: subscription_data, tax_id_collection: tax_id_collection).execute(&block)
    end

    POST_PAYMENT_LINKS_PAYMENT_LINK_MAX_LENGTH_FOR_PAYMENT_LINK                 = 5000
    POST_PAYMENT_LINKS_PAYMENT_LINK_VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION = String.static_array("auto", "required")
    POST_PAYMENT_LINKS_PAYMENT_LINK_VALID_VALUES_FOR_CUSTOMER_CREATION          = String.static_array("always", "if_required")
    POST_PAYMENT_LINKS_PAYMENT_LINK_VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION  = String.static_array("always", "if_required")

    # @return Crest::Request
    def build_api_request_for_post_payment_links_payment_link(
      *,
      payment_link : String? = nil,
      active : Bool? = nil,
      after_completion : Stripe::AfterCompletionParams? = nil,
      allow_promotion_codes : Bool? = nil,
      automatic_tax : Stripe::AutomaticTaxParams? = nil,
      billing_address_collection : String? = nil,
      custom_fields : Stripe::PostPaymentLinksPaymentLinkRequestCustomFields? = nil,
      custom_text : Stripe::CustomTextParam? = nil,
      customer_creation : String? = nil,
      expand : Array(String)? = nil,
      inactive_message : Stripe::PostPaymentLinksPaymentLinkRequestInactiveMessage? = nil,
      invoice_creation : Stripe::InvoiceCreationUpdateParams? = nil,
      line_items : Array(Stripe::LineItemsUpdateParams)? = nil,
      metadata : Hash(String, String)? = nil,
      payment_intent_data : Stripe::PaymentIntentDataUpdateParams? = nil,
      payment_method_collection : String? = nil,
      payment_method_types : Stripe::PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? = nil,
      restrictions : Stripe::PostPaymentLinksPaymentLinkRequestRestrictions? = nil,
      shipping_address_collection : Stripe::PostPaymentLinksPaymentLinkRequestShippingAddressCollection? = nil,
      subscription_data : Stripe::SubscriptionDataUpdateParams? = nil,
      tax_id_collection : Stripe::TaxIdCollectionParams? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PaymentLinksApi.post_payment_links_payment_link ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_link\" is required and cannot be null") if payment_link.nil?
        unless (_payment_link = payment_link).nil?
          OpenApi::PrimitiveValidator.validate_max_length("payment_link", payment_link.to_s.size, POST_PAYMENT_LINKS_PAYMENT_LINK_MAX_LENGTH_FOR_PAYMENT_LINK)
        end

        unless (_after_completion = after_completion).nil?
          _after_completion.validate if _after_completion.is_a?(OpenApi::Validatable)
        end

        unless (_automatic_tax = automatic_tax).nil?
          _automatic_tax.validate if _automatic_tax.is_a?(OpenApi::Validatable)
        end
        unless (_billing_address_collection = billing_address_collection).nil?
          OpenApi::EnumValidator.validate("billing_address_collection", _billing_address_collection, POST_PAYMENT_LINKS_PAYMENT_LINK_VALID_VALUES_FOR_BILLING_ADDRESS_COLLECTION)
        end
        unless (_custom_fields = custom_fields).nil?
          _custom_fields.validate if _custom_fields.is_a?(OpenApi::Validatable)
        end
        unless (_custom_text = custom_text).nil?
          _custom_text.validate if _custom_text.is_a?(OpenApi::Validatable)
        end
        unless (_customer_creation = customer_creation).nil?
          OpenApi::EnumValidator.validate("customer_creation", _customer_creation, POST_PAYMENT_LINKS_PAYMENT_LINK_VALID_VALUES_FOR_CUSTOMER_CREATION)
        end

        unless (_inactive_message = inactive_message).nil?
          _inactive_message.validate if _inactive_message.is_a?(OpenApi::Validatable)
        end
        unless (_invoice_creation = invoice_creation).nil?
          _invoice_creation.validate if _invoice_creation.is_a?(OpenApi::Validatable)
        end
        unless (_line_items = line_items).nil?
          OpenApi::ContainerValidator.validate(container: _line_items) if _line_items.is_a?(Array)
        end

        unless (_payment_intent_data = payment_intent_data).nil?
          _payment_intent_data.validate if _payment_intent_data.is_a?(OpenApi::Validatable)
        end
        unless (_payment_method_collection = payment_method_collection).nil?
          OpenApi::EnumValidator.validate("payment_method_collection", _payment_method_collection, POST_PAYMENT_LINKS_PAYMENT_LINK_VALID_VALUES_FOR_PAYMENT_METHOD_COLLECTION)
        end
        unless (_payment_method_types = payment_method_types).nil?
          _payment_method_types.validate if _payment_method_types.is_a?(OpenApi::Validatable)
        end
        unless (_restrictions = restrictions).nil?
          _restrictions.validate if _restrictions.is_a?(OpenApi::Validatable)
        end
        unless (_shipping_address_collection = shipping_address_collection).nil?
          _shipping_address_collection.validate if _shipping_address_collection.is_a?(OpenApi::Validatable)
        end
        unless (_subscription_data = subscription_data).nil?
          _subscription_data.validate if _subscription_data.is_a?(OpenApi::Validatable)
        end
        unless (_tax_id_collection = tax_id_collection).nil?
          _tax_id_collection.validate if _tax_id_collection.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/v1/payment_links/{payment_link}".sub("{" + "payment_link" + "}", URI.encode_path(payment_link.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = Array(Tuple(String, Crest::ParamsValue)).new
      form_params << Tuple(String, Crest::ParamsValue).new("active", active.to_s) if !active.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(after_completion.to_json), "after_completion")) if !after_completion.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("allow_promotion_codes", allow_promotion_codes.to_s) if !allow_promotion_codes.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(automatic_tax.to_json), "automatic_tax")) if !automatic_tax.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("billing_address_collection", billing_address_collection.to_s) if !billing_address_collection.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(custom_fields.to_json), "custom_fields")) if !custom_fields.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(custom_text.to_json), "custom_text")) if !custom_text.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("customer_creation", customer_creation.to_s) if !customer_creation.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(expand.to_json), "expand")) if !expand.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(inactive_message.to_json), "inactive_message")) if !inactive_message.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(invoice_creation.to_json), "invoice_creation")) if !invoice_creation.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(line_items.to_json), "line_items")) if !line_items.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(metadata.to_json), "metadata")) if !metadata.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_intent_data.to_json), "payment_intent_data")) if !payment_intent_data.nil?
      form_params << Tuple(String, Crest::ParamsValue).new("payment_method_collection", payment_method_collection.to_s) if !payment_method_collection.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(payment_method_types.to_json), "payment_method_types")) if !payment_method_types.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(restrictions.to_json), "restrictions")) if !restrictions.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(shipping_address_collection.to_json), "shipping_address_collection")) if !shipping_address_collection.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(subscription_data.to_json), "subscription_data")) if !subscription_data.nil?
      form_params.concat(Crest::ZeroEnumeratedFlatParamsEncoder.flatten_params(JSON.parse(tax_id_collection.to_json), "tax_id_collection")) if !tax_id_collection.nil?

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["basicAuth", "bearerAuth"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PaymentLinksApi.post_payment_links_payment_link",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
